{"sha": "06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZDljYzFkN2E4NTgyZmY4NDRjMjFhM2ZhZmUwOWRjOTdmMjI4OTU=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-29T06:55:35Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-09-14T05:48:47Z"}, "message": "Add help diagnostic messages\n\nThis adds \u2018help\u2019\u00a0diagnostic messages to rustc. This is used for anything that\nprovides help to the user, particularly the `--explain` messages that were\npreviously integrated into the relevant error message.", "tree": {"sha": "2c4a1b90c58202708d0ee9f95d1ea932b1f3c4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4a1b90c58202708d0ee9f95d1ea932b1f3c4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "html_url": "https://github.com/rust-lang/rust/commit/06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19311b6103b49232709d301af4036dbc0021082c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19311b6103b49232709d301af4036dbc0021082c", "html_url": "https://github.com/rust-lang/rust/commit/19311b6103b49232709d301af4036dbc0021082c"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "afc30589d4dde5642ad669591f869ab44135372d", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -97,12 +97,18 @@ impl Session {\n     pub fn span_end_note(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_end_note(sp, msg)\n     }\n+    pub fn span_help(&self, sp: Span, msg: &str) {\n+        self.diagnostic().span_help(sp, msg)\n+    }\n     pub fn fileline_note(&self, sp: Span, msg: &str) {\n         self.diagnostic().fileline_note(sp, msg)\n     }\n     pub fn note(&self, msg: &str) {\n         self.diagnostic().handler().note(msg)\n     }\n+    pub fn help(&self, msg: &str) {\n+        self.diagnostic().handler().note(msg)\n+    }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.diagnostic().span_bug(sp, msg)\n     }"}, {"sha": "586c9c5624dac676812caa51a09aa47533e5ead3", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -624,6 +624,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_end_note(s, m);\n     }\n \n+    pub fn span_help(&self, s: Span, m: &str) {\n+        self.tcx.sess.span_help(s, m);\n+    }\n+\n     pub fn bckerr_to_string(&self, err: &BckError) -> String {\n         match err.code {\n             err_mutbl => {"}, {"sha": "858d0d89deaf72237a58564d4b76b8a3fde5f19d", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -1407,7 +1407,7 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n                                               opt_explicit_self, generics);\n         let msg = format!(\"consider using an explicit lifetime \\\n                            parameter as shown: {}\", suggested_fn);\n-        self.tcx.sess.span_note(span, msg.as_slice());\n+        self.tcx.sess.span_help(span, msg.as_slice());\n     }\n \n     fn report_inference_failure(&self,"}, {"sha": "1915c5ef6e1c70568c768f9318d565ce148dd0f4", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -35,7 +35,7 @@ use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::glb::Glb;\n use syntax::codemap;\n use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n-use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note};\n+use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n use syntax::{ast, ast_map};\n use util::ppaux::{ty_to_string, UserString};\n \n@@ -59,7 +59,7 @@ struct ExpectErrorEmitter {\n fn remove_message(e: &mut ExpectErrorEmitter, msg: &str, lvl: Level) {\n     match lvl {\n         Bug | Fatal | Error => { }\n-        Warning | Note => { return; }\n+        Warning | Note | Help => { return; }\n     }\n \n     debug!(\"Error: {}\", msg);"}, {"sha": "3b7ee5b28e0503e2a92f8aeee47d05c9ad8f924f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -105,6 +105,9 @@ impl SpanHandler {\n     pub fn span_end_note(&self, sp: Span, msg: &str) {\n         self.handler.custom_emit(&self.cm, FullSpan(sp), msg, Note);\n     }\n+    pub fn span_help(&self, sp: Span, msg: &str) {\n+        self.handler.emit(Some((&self.cm, sp)), msg, Help);\n+    }\n     pub fn fileline_note(&self, sp: Span, msg: &str) {\n         self.handler.custom_emit(&self.cm, FileLine(sp), msg, Note);\n     }\n@@ -164,6 +167,9 @@ impl Handler {\n     pub fn note(&self, msg: &str) {\n         self.emit.borrow_mut().emit(None, msg, None, Note);\n     }\n+    pub fn help(&self, msg: &str) {\n+        self.emit.borrow_mut().emit(None, msg, None, Help);\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.emit.borrow_mut().emit(None, msg, None, Bug);\n         fail!(ExplicitBug);\n@@ -216,6 +222,7 @@ pub enum Level {\n     Error,\n     Warning,\n     Note,\n+    Help,\n }\n \n impl fmt::Show for Level {\n@@ -227,6 +234,7 @@ impl fmt::Show for Level {\n             Fatal | Error => \"error\".fmt(f),\n             Warning => \"warning\".fmt(f),\n             Note => \"note\".fmt(f),\n+            Help => \"help\".fmt(f),\n         }\n     }\n }\n@@ -236,7 +244,8 @@ impl Level {\n         match self {\n             Bug | Fatal | Error => term::color::BRIGHT_RED,\n             Warning => term::color::BRIGHT_YELLOW,\n-            Note => term::color::BRIGHT_GREEN\n+            Note => term::color::BRIGHT_GREEN,\n+            Help => term::color::BRIGHT_CYAN,\n         }\n     }\n }\n@@ -293,15 +302,6 @@ fn print_diagnostic(dst: &mut EmitterWriter, topic: &str, lvl: Level,\n         Some(code) => {\n             let style = term::attr::ForegroundColor(term::color::BRIGHT_MAGENTA);\n             try!(print_maybe_styled(dst, format!(\" [{}]\", code.clone()).as_slice(), style));\n-            match dst.registry.as_ref().and_then(|registry| registry.find_description(code)) {\n-                Some(_) => {\n-                    try!(write!(&mut dst.dst,\n-                        \" (pass `--explain {}` to see a detailed explanation)\",\n-                        code\n-                    ));\n-                }\n-                None => ()\n-            }\n         }\n         None => ()\n     }\n@@ -401,7 +401,20 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n             try!(highlight_lines(dst, cm, sp, lvl, lines));\n         }\n     }\n-    print_macro_backtrace(dst, cm, sp)\n+    try!(print_macro_backtrace(dst, cm, sp));\n+    match code {\n+        Some(code) =>\n+            match dst.registry.as_ref().and_then(|registry| registry.find_description(code)) {\n+                Some(_) => {\n+                    try!(print_diagnostic(dst, ss.as_slice(), Help,\n+                                          format!(\"pass `--explain {}` to see a detailed \\\n+                                                   explanation\", code).as_slice(), None));\n+                }\n+                None => ()\n+            },\n+        None => (),\n+    }\n+    Ok(())\n }\n \n fn highlight_lines(err: &mut EmitterWriter,"}, {"sha": "5cad132688a03dd4ef9cd99a2fed99303da8333d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -575,6 +575,10 @@ impl<'a> ExtCtxt<'a> {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_note(sp, msg);\n     }\n+    pub fn span_help(&self, sp: Span, msg: &str) {\n+        self.print_backtrace();\n+        self.parse_sess.span_diagnostic.span_help(sp, msg);\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.handler().bug(msg);"}, {"sha": "d4ca285e4dbfa789a90875da2b7476a856f145b3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -959,6 +959,9 @@ impl<'a> Parser<'a> {\n     pub fn span_note(&mut self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_note(sp, m)\n     }\n+    pub fn span_help(&mut self, sp: Span, m: &str) {\n+        self.sess.span_diagnostic.span_help(sp, m)\n+    }\n     pub fn bug(&mut self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(self.span, m)\n     }"}, {"sha": "7c514b4e16f0766de914d3a9d8093f17fefc8250", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -22,7 +22,7 @@ impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n }\n \n fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &'r T) -> bool\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &'r T) -> bool\n     let cont_iter = cont.iter(); //~ ERROR: cannot infer\n     let result = cont_iter.fold(Some(0u16), |state, val| {\n         state.map_or(None, |mask| {"}, {"sha": "29265b8750ca749137b06e1c5fe8391785d98833", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-3.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -12,15 +12,15 @@\n \n struct Bar<'x, 'y, 'z> { bar: &'y int, baz: int }\n fn bar1<'a>(x: &Bar) -> (&'a int, &'a int, &'a int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar1<'b, 'c, 'a>(x: &'a Bar<'b, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n     (x.bar, &x.baz, &x.baz)\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer\n     //~^^^ ERROR: cannot infer\n }\n \n fn bar2<'a, 'b, 'c>(x: &Bar<'a, 'b, 'c>) -> (&'a int, &'a int, &'a int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn bar2<'a, 'c>(x: &'a Bar<'a, 'a, 'c>) -> (&'a int, &'a int, &'a int)\n     (x.bar, &x.baz, &x.baz)\n     //~^ ERROR: cannot infer\n     //~^^ ERROR: cannot infer"}, {"sha": "4abf045501c269de0e47be3cdbaa5fdf91d8e49d", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06d9cc1d7a8582ff844c21a3fafe09dc97f22895/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param.rs?ref=06d9cc1d7a8582ff844c21a3fafe09dc97f22895", "patch": "@@ -12,23 +12,23 @@\n \n struct Foo<'x> { bar: int }\n fn foo1<'a>(x: &Foo) -> &'a int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a int\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo1<'a>(x: &'a Foo) -> &'a int\n     &x.bar //~ ERROR: cannot infer\n }\n \n fn foo2<'a, 'b>(x: &'a Foo) -> &'b int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo2<'a>(x: &'a Foo) -> &'a int\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo2<'a>(x: &'a Foo) -> &'a int\n     &x.bar //~ ERROR: cannot infer\n }\n \n fn foo3<'a>(x: &Foo) -> (&'a int, &'a int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo3<'a>(x: &'a Foo) -> (&'a int, &'a int)\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo3<'a>(x: &'a Foo) -> (&'a int, &'a int)\n     (&x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n \n fn foo4<'a, 'b>(x: &'a Foo) -> (&'b int, &'a int, &'b int) {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn foo4<'a>(x: &'a Foo) -> (&'a int, &'a int, &'a int)\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn foo4<'a>(x: &'a Foo) -> (&'a int, &'a int, &'a int)\n     (&x.bar, &x.bar, &x.bar) //~ ERROR: cannot infer\n     //~^ ERROR: cannot infer\n }\n@@ -37,7 +37,7 @@ struct Cat<'x, T> { cat: &'x int, t: T }\n struct Dog<'y> { dog: &'y int }\n \n fn cat2<'x, 'y>(x: Cat<'x, Dog<'y>>) -> &'x int {\n-//~^ NOTE: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x int\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn cat2<'x>(x: Cat<'x, Dog<'x>>) -> &'x int\n     x.t.dog //~ ERROR: cannot infer\n }\n "}]}