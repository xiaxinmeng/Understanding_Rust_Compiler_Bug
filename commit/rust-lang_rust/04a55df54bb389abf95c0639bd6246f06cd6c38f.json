{"sha": "04a55df54bb389abf95c0639bd6246f06cd6c38f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YTU1ZGY1NGJiMzg5YWJmOTVjMDYzOWJkNjI0NmYwNmNkNmMzOGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T00:05:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-23T00:05:38Z"}, "message": "Flesh out rustc.me.trans to construct functions, basic blocks and builders off the AST.", "tree": {"sha": "1e8b8630fbf875195ec135a19f0aa87ecc104933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8b8630fbf875195ec135a19f0aa87ecc104933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a55df54bb389abf95c0639bd6246f06cd6c38f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a55df54bb389abf95c0639bd6246f06cd6c38f", "html_url": "https://github.com/rust-lang/rust/commit/04a55df54bb389abf95c0639bd6246f06cd6c38f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a55df54bb389abf95c0639bd6246f06cd6c38f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d172833710f580c777cb5c1938a8991cc38cd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d172833710f580c777cb5c1938a8991cc38cd08", "html_url": "https://github.com/rust-lang/rust/commit/4d172833710f580c777cb5c1938a8991cc38cd08"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "c59d5b566e4d4069247f907831bc203582356a49", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=04a55df54bb389abf95c0639bd6246f06cd6c38f", "patch": "@@ -18,7 +18,7 @@ fn main(vec[str] args) {\n           auto p = parser.new_parser(sess, filename);\n           log \"opened file: \" + filename;\n           auto crate = parser.parse_crate(p);\n-          trans.translate_crate(sess, crate);\n+          trans.trans_crate(sess, crate);\n       }\n       i += 1;\n   }"}, {"sha": "f0c4428c5130dc9b5507348d6c70cda6e7c6dd1c", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=04a55df54bb389abf95c0639bd6246f06cd6c38f", "patch": "@@ -25,6 +25,10 @@ type LongLong = i64;\n type Long = i32;\n type Bool = int;\n \n+fn True() -> Bool { ret 1; }\n+fn False() -> Bool { ret 0; }\n+\n+\n native mod llvm = llvm_lib {\n \n     type ModuleRef;"}, {"sha": "d8e587c5b8f9d535c63cec8dd7fe41dd9af606dd", "filename": "src/comp/me/trans.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Fme%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a55df54bb389abf95c0639bd6246f06cd6c38f/src%2Fcomp%2Fme%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fme%2Ftrans.rs?ref=04a55df54bb389abf95c0639bd6246f06cd6c38f", "patch": "@@ -1,18 +1,74 @@\n import std._str;\n+import std._vec;\n+import std._str.rustrt.sbuf;\n+import std._vec.rustrt.vbuf;\n \n import fe.ast;\n import driver.session;\n \n import lib.llvm.llvm;\n import lib.llvm.builder;\n+import lib.llvm.llvm.ModuleRef;\n+import lib.llvm.llvm.ValueRef;\n+import lib.llvm.llvm.TypeRef;\n+import lib.llvm.llvm.BuilderRef;\n+import lib.llvm.llvm.BasicBlockRef;\n \n+import lib.llvm.False;\n+import lib.llvm.True;\n \n-fn translate_crate(session.session sess, ast.crate crate) {\n+fn T_nil() -> TypeRef {\n+    ret llvm.LLVMVoidType();\n+}\n+\n+fn T_int() -> TypeRef {\n+    ret llvm.LLVMInt32Type();\n+}\n+\n+fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n+    ret llvm.LLVMFunctionType(output,\n+                              _vec.buf[TypeRef](inputs),\n+                              _vec.len[TypeRef](inputs),\n+                              False());\n+}\n+\n+fn trans_fn(ModuleRef llmod, str name, &ast._fn f) {\n+    let vec[TypeRef] args = vec();\n+    let TypeRef llty = T_fn(args, T_nil());\n+    let ValueRef llfn =\n+        llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n+}\n+\n+fn trans_block(ast.block b, ValueRef llfn) {\n+    let BasicBlockRef llbb =\n+        llvm.LLVMAppendBasicBlock(llfn, 0 as sbuf);\n+    let BuilderRef llbuild = llvm.LLVMCreateBuilder();\n+    llvm.LLVMPositionBuilderAtEnd(llbuild, llbb);\n+    auto b = builder(llbuild);\n+}\n+\n+fn trans_mod_item(ModuleRef llmod, str name, &ast.item item) {\n+    alt (item) {\n+        case (ast.item_fn(?f)) {\n+            trans_fn(llmod, name, *f);\n+        }\n+        case (ast.item_mod(?m)) {\n+            trans_mod(llmod, name, *m);\n+        }\n+    }\n+}\n+\n+fn trans_mod(ModuleRef llmod, str name, &ast._mod m) {\n+    for each (tup(str, ast.item) pair in m.items()) {\n+        trans_mod_item(llmod, name + \".\" + pair._0, pair._1);\n+    }\n+}\n+\n+fn trans_crate(session.session sess, ast.crate crate) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n \n-    auto b = builder(llvm.LLVMCreateBuilder());\n \n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(\"rust_out.bc\"));\n     llvm.LLVMDisposeModule(llmod);"}]}