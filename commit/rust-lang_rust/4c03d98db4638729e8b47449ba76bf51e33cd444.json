{"sha": "4c03d98db4638729e8b47449ba76bf51e33cd444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMDNkOThkYjQ2Mzg3MjllOGI0NzQ0OWJhNzZiZjUxZTMzY2Q0NDQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-08T22:22:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-08T22:22:11Z"}, "message": "Remove text_edit_builder api from AssistBuilder", "tree": {"sha": "54445f9c5bae1645f1d383831e7b03b8b11932fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54445f9c5bae1645f1d383831e7b03b8b11932fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c03d98db4638729e8b47449ba76bf51e33cd444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c03d98db4638729e8b47449ba76bf51e33cd444", "html_url": "https://github.com/rust-lang/rust/commit/4c03d98db4638729e8b47449ba76bf51e33cd444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c03d98db4638729e8b47449ba76bf51e33cd444/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c365329911bfb33410da0363a4783f102094283f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c365329911bfb33410da0363a4783f102094283f", "html_url": "https://github.com/rust-lang/rust/commit/c365329911bfb33410da0363a4783f102094283f"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "51a160f405f79e676b15ea1cf221ea47cad3fd98", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=4c03d98db4638729e8b47449ba76bf51e33cd444", "patch": "@@ -275,12 +275,6 @@ impl AssistBuilder {\n         algo::diff(&node, &new).into_text_edit(&mut self.edit);\n     }\n \n-    // FIXME: kill this API\n-    /// Get access to the raw `TextEditBuilder`.\n-    pub(crate) fn text_edit_builder(&mut self) -> &mut TextEditBuilder {\n-        &mut self.edit\n-    }\n-\n     fn finish(mut self) -> SourceChange {\n         self.commit();\n         let mut change = mem::take(&mut self.change);"}, {"sha": "f51a9a4ad157d3a1f7a393ec4279f04076601526", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 48, "deletions": 28, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=4c03d98db4638729e8b47449ba76bf51e33cd444", "patch": "@@ -5,13 +5,13 @@ use ide_db::{\n     search::SearchScope,\n };\n use syntax::{\n-    algo,\n+    algo::SyntaxRewriter,\n     ast::{self, make},\n     AstNode, Direction, SyntaxNode, SyntaxToken, T,\n };\n \n use crate::{\n-    assist_context::{AssistBuilder, AssistContext, Assists},\n+    assist_context::{AssistContext, Assists},\n     AssistId, AssistKind,\n };\n \n@@ -61,7 +61,9 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n         \"Expand glob import\",\n         target.text_range(),\n         |builder| {\n-            replace_ast(builder, parent, mod_path, names_to_import);\n+            let mut rewriter = SyntaxRewriter::default();\n+            replace_ast(&mut rewriter, parent, mod_path, names_to_import);\n+            builder.rewrite(rewriter);\n         },\n     )\n }\n@@ -236,7 +238,7 @@ fn find_names_to_import(\n }\n \n fn replace_ast(\n-    builder: &mut AssistBuilder,\n+    rewriter: &mut SyntaxRewriter,\n     parent: Either<ast::UseTree, ast::UseTreeList>,\n     path: ast::Path,\n     names_to_import: Vec<Name>,\n@@ -264,32 +266,21 @@ fn replace_ast(\n     match use_trees.as_slice() {\n         [name] => {\n             if let Some(end_path) = name.path() {\n-                let replacement =\n-                    make::use_tree(make::path_concat(path, end_path), None, None, false);\n-\n-                algo::diff(\n-                    &parent.either(|n| n.syntax().clone(), |n| n.syntax().clone()),\n-                    replacement.syntax(),\n-                )\n-                .into_text_edit(builder.text_edit_builder());\n+                rewriter.replace_ast(\n+                    &parent.left_or_else(|tl| tl.parent_use_tree()),\n+                    &make::use_tree(make::path_concat(path, end_path), None, None, false),\n+                );\n             }\n         }\n-        names => {\n-            let replacement = match parent {\n-                Either::Left(_) => {\n-                    make::use_tree(path, Some(make::use_tree_list(names.to_owned())), None, false)\n-                        .syntax()\n-                        .clone()\n-                }\n-                Either::Right(_) => make::use_tree_list(names.to_owned()).syntax().clone(),\n-            };\n-\n-            algo::diff(\n-                &parent.either(|n| n.syntax().clone(), |n| n.syntax().clone()),\n-                &replacement,\n-            )\n-            .into_text_edit(builder.text_edit_builder());\n-        }\n+        names => match &parent {\n+            Either::Left(parent) => rewriter.replace_ast(\n+                parent,\n+                &make::use_tree(path, Some(make::use_tree_list(names.to_owned())), None, false),\n+            ),\n+            Either::Right(parent) => {\n+                rewriter.replace_ast(parent, &make::use_tree_list(names.to_owned()))\n+            }\n+        },\n     };\n }\n \n@@ -884,4 +875,33 @@ fn qux(baz: Baz) {}\n     \",\n         )\n     }\n+\n+    #[test]\n+    fn expanding_glob_import_single_nested_glob_only() {\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+}\n+\n+use foo::{*<|>};\n+\n+struct Baz {\n+    bar: Bar\n+}\n+\",\n+            r\"\n+mod foo {\n+    pub struct Bar;\n+}\n+\n+use foo::Bar;\n+\n+struct Baz {\n+    bar: Bar\n+}\n+\",\n+        );\n+    }\n }"}, {"sha": "7c0f0f44e1c76939105a604443fdab4c05b4709c", "filename": "crates/assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c03d98db4638729e8b47449ba76bf51e33cd444/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=4c03d98db4638729e8b47449ba76bf51e33cd444", "patch": "@@ -47,9 +47,11 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         \"Reorder record fields\",\n         target,\n         |edit| {\n+            let mut rewriter = algo::SyntaxRewriter::default();\n             for (old, new) in fields.iter().zip(&sorted_fields) {\n-                algo::diff(old, new).into_text_edit(edit.text_edit_builder());\n+                rewriter.replace(old, new);\n             }\n+            edit.rewrite(rewriter);\n         },\n     )\n }"}]}