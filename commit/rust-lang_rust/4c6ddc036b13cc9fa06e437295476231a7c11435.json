{"sha": "4c6ddc036b13cc9fa06e437295476231a7c11435", "node_id": "C_kwDOAAsO6NoAKDRjNmRkYzAzNmIxM2NjOWZhMDZlNDM3Mjk1NDc2MjMxYTdjMTE0MzU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T11:12:37Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T11:38:52Z"}, "message": "fix library and rustdoc tests", "tree": {"sha": "717b3f36e2816da3d169201b14b384e30b04b077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717b3f36e2816da3d169201b14b384e30b04b077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6ddc036b13cc9fa06e437295476231a7c11435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6ddc036b13cc9fa06e437295476231a7c11435", "html_url": "https://github.com/rust-lang/rust/commit/4c6ddc036b13cc9fa06e437295476231a7c11435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6ddc036b13cc9fa06e437295476231a7c11435/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "147e850691b60b273643f1e4d3b53cad620b80b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/147e850691b60b273643f1e4d3b53cad620b80b7", "html_url": "https://github.com/rust-lang/rust/commit/147e850691b60b273643f1e4d3b53cad620b80b7"}], "stats": {"total": 1281, "additions": 839, "deletions": 442}, "files": [{"sha": "4e7d7fc833ea1d874537e21fc6f0aa4807e472f4", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,13 +1,16 @@\n // Test const functions in the library\n \n pub const MY_VEC: Vec<usize> = Vec::new();\n-pub const MY_VEC2: Vec<usize> = Default::default();\n+\n+// FIXME(#110395)\n+// pub const MY_VEC2: Vec<usize> = Default::default();\n \n pub const MY_STRING: String = String::new();\n-pub const MY_STRING2: String = Default::default();\n \n-pub const MY_BOXED_SLICE: Box<[usize]> = Default::default();\n-pub const MY_BOXED_STR: Box<str> = Default::default();\n+// pub const MY_STRING2: String = Default::default();\n+\n+// pub const MY_BOXED_SLICE: Box<[usize]> = Default::default();\n+// pub const MY_BOXED_STR: Box<str> = Default::default();\n \n use std::collections::{BTreeMap, BTreeSet};\n \n@@ -23,11 +26,11 @@ pub const SET_IS_EMPTY: bool = SET.is_empty();\n \n #[test]\n fn test_const() {\n-    assert_eq!(MY_VEC, MY_VEC2);\n-    assert_eq!(MY_STRING, MY_STRING2);\n+    assert_eq!(MY_VEC, /* MY_VEC */ vec![]);\n+    assert_eq!(MY_STRING, /* MY_STRING2 */ String::default());\n \n-    assert_eq!(MY_VEC, *MY_BOXED_SLICE);\n-    assert_eq!(MY_STRING, *MY_BOXED_STR);\n+    // assert_eq!(MY_VEC, *MY_BOXED_SLICE);\n+    // assert_eq!(MY_STRING, *MY_BOXED_STR);\n \n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);"}, {"sha": "0eca4c9bb07aa6cad094aa60835d3a1b51ebf12d", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -3,7 +3,6 @@\n #![feature(assert_matches)]\n #![feature(btree_drain_filter)]\n #![feature(cow_is_borrowed)]\n-#![feature(const_convert)]\n #![feature(const_cow_is_borrowed)]\n #![feature(const_heap)]\n #![feature(const_mut_refs)]\n@@ -33,7 +32,6 @@\n #![feature(slice_partition_dedup)]\n #![feature(string_remove_matches)]\n #![feature(const_btree_len)]\n-#![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(const_str_from_utf8)]\n #![feature(panic_update_hook)]"}, {"sha": "a67a842d3407ffab5d09dd9c6eb02318b0760774", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -306,9 +306,11 @@ fn atomic_compare_exchange() {\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n }\n \n+/* FIXME(#110395)\n #[test]\n fn atomic_const_from() {\n     const _ATOMIC_U8: AtomicU8 = AtomicU8::from(1);\n     const _ATOMIC_BOOL: AtomicBool = AtomicBool::from(true);\n     const _ATOMIC_PTR: AtomicPtr<u32> = AtomicPtr::from(core::ptr::null_mut());\n }\n+*/"}, {"sha": "47f6459915b3e1dd7992fc506fcc4deb1d039f6f", "filename": "library/core/tests/bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fbool.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -89,6 +89,7 @@ fn test_bool_to_option() {\n     assert_eq!(false.then(|| 0), None);\n     assert_eq!(true.then(|| 0), Some(0));\n \n+    /* FIXME(#110395)\n     const fn zero() -> i32 {\n         0\n     }\n@@ -102,4 +103,5 @@ fn test_bool_to_option() {\n     assert_eq!(B, Some(0));\n     assert_eq!(C, None);\n     assert_eq!(D, Some(0));\n+    */\n }"}, {"sha": "e084f867943d3ad1ab1fe70060e564f5af5aed7e", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -468,6 +468,7 @@ fn const_cells() {\n     const CELL: Cell<i32> = Cell::new(3);\n     const _: i32 = CELL.into_inner();\n \n+/* FIXME(#110395)\n     const UNSAFE_CELL_FROM: UnsafeCell<i32> = UnsafeCell::from(3);\n     const _: i32 = UNSAFE_CELL.into_inner();\n \n@@ -476,4 +477,5 @@ fn const_cells() {\n \n     const CELL_FROM: Cell<i32> = Cell::from(3);\n     const _: i32 = CELL.into_inner();\n+*/\n }"}, {"sha": "85ba51c9228e3aafb63738fa56fba86731d3ef85", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -21,6 +21,7 @@ fn test_convert() {\n     assert!(char::try_from(0xFFFF_FFFF_u32).is_err());\n }\n \n+/* FIXME(#110395)\n #[test]\n const fn test_convert_const() {\n     assert!(u32::from('a') == 0x61);\n@@ -30,6 +31,7 @@ const fn test_convert_const() {\n     assert!(char::from(b'a') == 'a');\n     assert!(char::from(b'\\xFF') == '\\u{FF}');\n }\n+*/\n \n #[test]\n fn test_from_str() {"}, {"sha": "72fdd490da152c58707c04866180fcdae8535652", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -217,6 +217,7 @@ fn cmp_default() {\n     assert_eq!(Fool(false), Fool(true));\n }\n \n+/* FIXME(#110395)\n mod const_cmp {\n     use super::*;\n \n@@ -248,3 +249,4 @@ mod const_cmp {\n     const _: () = assert!(S(0) < S(1));\n     const _: () = assert!(S(1) > S(0));\n }\n+*/"}, {"sha": "f76dd277884e20f0abc8bc6b90a97a00171d3622", "filename": "library/core/tests/convert.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconvert.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,4 @@\n+/* FIXME(#110395)\n #[test]\n fn convert() {\n     const fn from(x: i32) -> i32 {\n@@ -14,3 +15,4 @@ fn convert() {\n     const BAR: Vec<String> = into(Vec::new());\n     assert_eq!(BAR, Vec::<String>::new());\n }\n+*/"}, {"sha": "033bd1ed6ed9e055e1cc613f16b25ea74624cfa7", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -35,13 +35,14 @@ impl Hasher for MyHasher {\n \n #[test]\n fn test_writer_hasher() {\n-    const fn hash<T: Hash>(t: &T) -> u64 {\n+    // FIXME(#110395)\n+    /* const */ fn hash<T: Hash>(t: &T) -> u64 {\n         let mut s = MyHasher { hash: 0 };\n         t.hash(&mut s);\n         s.finish()\n     }\n \n-    const {\n+    /* const {\n         // FIXME(fee1-dead): assert_eq\n         assert!(hash(&()) == 0);\n         assert!(hash(&5_u8) == 5);\n@@ -52,7 +53,7 @@ fn test_writer_hasher() {\n \n         let s: &str = \"a\";\n         assert!(hash(&s) == 97 + 0xFF);\n-    };\n+    }; */\n \n     assert_eq!(hash(&()), 0);\n \n@@ -139,15 +140,16 @@ impl Hash for Custom {\n \n #[test]\n fn test_custom_state() {\n-    const fn hash<T: Hash>(t: &T) -> u64 {\n+    // FIXME(#110395)\n+    /* const */ fn hash<T: Hash>(t: &T) -> u64 {\n         let mut c = CustomHasher { output: 0 };\n         t.hash(&mut c);\n         c.finish()\n     }\n \n     assert_eq!(hash(&Custom { hash: 5 }), 5);\n \n-    const { assert!(hash(&Custom { hash: 6 }) == 6) };\n+    // const { assert!(hash(&Custom { hash: 6 }) == 6) };\n }\n \n // FIXME: Instantiated functions with i128 in the signature is not supported in Emscripten."}, {"sha": "0a67c485c98bb3ebcd3ccdc95706a14d23affe3d", "filename": "library/core/tests/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fsip.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -23,6 +23,7 @@ fn hash<T: Hash>(x: &T) -> u64 {\n     hash_with(SipHasher::new(), x)\n }\n \n+/* FIXME(#110395)\n #[test]\n const fn test_const_sip() {\n     let val1 = 0x45;\n@@ -36,6 +37,7 @@ const fn test_const_sip() {\n \n     assert!(const_hash(&(val1)) != const_hash(&(val2)));\n }\n+*/\n \n #[test]\n #[allow(unused_must_use)]"}, {"sha": "e2f526d155e878b6ce0216171cde7d7bb3dce86d", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -46,11 +46,13 @@ fn unsync_once_cell_drop_empty() {\n     drop(x);\n }\n \n+/* FIXME(#110395)\n #[test]\n const fn once_cell_const() {\n     let _once_cell: OnceCell<u32> = OnceCell::new();\n     let _once_cell: OnceCell<u32> = OnceCell::from(32);\n }\n+*/\n \n #[test]\n fn clone() {"}, {"sha": "f460da35dd3e650d59193e73d787c026ca6ab63a", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -8,16 +8,13 @@\n #![feature(const_assume)]\n #![feature(const_align_of_val_raw)]\n #![feature(const_black_box)]\n-#![feature(const_bool_to_option)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n-#![feature(const_convert)]\n #![feature(const_hash)]\n #![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]\n-#![feature(const_num_from_num)]\n #![feature(const_pointer_byte_offsets)]\n #![feature(const_pointer_is_aligned)]\n #![feature(const_ptr_as_ref)]"}, {"sha": "96356b728e926f656f669c1dc86a5f0dadea61f5", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -215,11 +215,13 @@ fn nonzero_const() {\n     const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n     assert!(ONE.is_some());\n \n+    /* FIXME(#110395)\n     const FROM_NONZERO_U8: u8 = u8::from(NONZERO_U8);\n     assert_eq!(FROM_NONZERO_U8, 5);\n \n     const NONZERO_CONVERT: NonZeroU32 = NonZeroU32::from(NONZERO_U8);\n     assert_eq!(NONZERO_CONVERT.get(), 5);\n+    */\n }\n \n #[test]"}, {"sha": "fa58e77187915458b333d05e53a060b0098659ef", "filename": "library/core/tests/num/const_from.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fnum%2Fconst_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Fnum%2Fconst_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fconst_from.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,4 @@\n+/* FIXME(#110395)\n #[test]\n fn from() {\n     use core::convert::TryFrom;\n@@ -23,3 +24,4 @@ fn from() {\n     const I16_FROM_U16: Result<i16, TryFromIntError> = i16::try_from(1u16);\n     assert_eq!(I16_FROM_U16, Ok(1i16));\n }\n+*/"}, {"sha": "5defeb50d40f99d88c4818fef47f67427ce847dc", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -88,6 +88,7 @@ fn test_and() {\n     assert_eq!(x.and(Some(2)), None);\n     assert_eq!(x.and(None::<isize>), None);\n \n+    /* FIXME(#110395)\n     const FOO: Option<isize> = Some(1);\n     const A: Option<isize> = FOO.and(Some(2));\n     const B: Option<isize> = FOO.and(None);\n@@ -99,6 +100,7 @@ fn test_and() {\n     const D: Option<isize> = BAR.and(None);\n     assert_eq!(C, None);\n     assert_eq!(D, None);\n+    */\n }\n \n #[test]\n@@ -119,6 +121,7 @@ fn test_and_then() {\n     assert_eq!(x.and_then(plus_one), None);\n     assert_eq!(x.and_then(none), None);\n \n+    /* FIXME(#110395)\n     const FOO: Option<isize> = Some(1);\n     const A: Option<isize> = FOO.and_then(plus_one);\n     const B: Option<isize> = FOO.and_then(none);\n@@ -130,6 +133,7 @@ fn test_and_then() {\n     const D: Option<isize> = BAR.and_then(none);\n     assert_eq!(C, None);\n     assert_eq!(D, None);\n+    */\n }\n \n #[test]\n@@ -142,6 +146,7 @@ fn test_or() {\n     assert_eq!(x.or(Some(2)), Some(2));\n     assert_eq!(x.or(None), None);\n \n+    /* FIXME(#110395)\n     const FOO: Option<isize> = Some(1);\n     const A: Option<isize> = FOO.or(Some(2));\n     const B: Option<isize> = FOO.or(None);\n@@ -153,6 +158,7 @@ fn test_or() {\n     const D: Option<isize> = BAR.or(None);\n     assert_eq!(C, Some(2));\n     assert_eq!(D, None);\n+    */\n }\n \n #[test]\n@@ -173,6 +179,7 @@ fn test_or_else() {\n     assert_eq!(x.or_else(two), Some(2));\n     assert_eq!(x.or_else(none), None);\n \n+/* FIXME(#110395)\n     const FOO: Option<isize> = Some(1);\n     const A: Option<isize> = FOO.or_else(two);\n     const B: Option<isize> = FOO.or_else(none);\n@@ -184,6 +191,7 @@ fn test_or_else() {\n     const D: Option<isize> = BAR.or_else(none);\n     assert_eq!(C, Some(2));\n     assert_eq!(D, None);\n+*/\n }\n \n #[test]\n@@ -215,10 +223,12 @@ fn test_unwrap_or() {\n     let x: Option<isize> = None;\n     assert_eq!(x.unwrap_or(2), 2);\n \n+    /* FIXME(#110395)\n     const A: isize = Some(1).unwrap_or(2);\n     const B: isize = None.unwrap_or(2);\n     assert_eq!(A, 1);\n     assert_eq!(B, 2);\n+    */\n }\n \n #[test]\n@@ -233,10 +243,12 @@ fn test_unwrap_or_else() {\n     let x: Option<isize> = None;\n     assert_eq!(x.unwrap_or_else(two), 2);\n \n+    /* FIXME(#110395)\n     const A: isize = Some(1).unwrap_or_else(two);\n     const B: isize = None.unwrap_or_else(two);\n     assert_eq!(A, 1);\n     assert_eq!(B, 2);\n+    */\n }\n \n #[test]\n@@ -439,14 +451,15 @@ fn option_const() {\n     const OPTION: Option<usize> = Some(32);\n     assert_eq!(OPTION, Some(32));\n \n-    const OPTION_FROM: Option<usize> = Option::from(32);\n-    assert_eq!(OPTION_FROM, Some(32));\n+    // FIXME(#110395)\n+    // const OPTION_FROM: Option<usize> = Option::from(32);\n+    // assert_eq!(OPTION_FROM, Some(32));\n \n     const REF: Option<&usize> = OPTION.as_ref();\n     assert_eq!(REF, Some(&32));\n \n-    const REF_FROM: Option<&usize> = Option::from(&OPTION);\n-    assert_eq!(REF_FROM, Some(&32));\n+    // const REF_FROM: Option<&usize> = Option::from(&OPTION);\n+    // assert_eq!(REF_FROM, Some(&32));\n \n     const IS_SOME: bool = OPTION.is_some();\n     assert!(IS_SOME);\n@@ -474,14 +487,15 @@ const fn option_const_mut() {\n             None => unreachable!(),\n         }\n     }\n-\n+/* FIXME(const-hack)\n     {\n         let as_mut: Option<&mut usize> = Option::from(&mut option);\n         match as_mut {\n             Some(v) => *v = 42,\n             None => unreachable!(),\n         }\n     }\n+*/\n }\n \n #[test]"}, {"sha": "872611937cc084a0fc6120793415b18eface483f", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -425,14 +425,16 @@ fn duration_const() {\n     const SECONDS_F32: f32 = Duration::SECOND.as_secs_f32();\n     assert_eq!(SECONDS_F32, 1.0);\n \n-    const FROM_SECONDS_F32: Duration = Duration::from_secs_f32(1.0);\n-    assert_eq!(FROM_SECONDS_F32, Duration::SECOND);\n+    // FIXME(#110395)\n+    // const FROM_SECONDS_F32: Duration = Duration::from_secs_f32(1.0);\n+    // assert_eq!(FROM_SECONDS_F32, Duration::SECOND);\n \n     const SECONDS_F64: f64 = Duration::SECOND.as_secs_f64();\n     assert_eq!(SECONDS_F64, 1.0);\n \n-    const FROM_SECONDS_F64: Duration = Duration::from_secs_f64(1.0);\n-    assert_eq!(FROM_SECONDS_F64, Duration::SECOND);\n+    // FIXME(#110395)\n+    // const FROM_SECONDS_F64: Duration = Duration::from_secs_f64(1.0);\n+    // assert_eq!(FROM_SECONDS_F64, Duration::SECOND);\n \n     const MILLIS: u128 = Duration::SECOND.as_millis();\n     assert_eq!(MILLIS, 1_000);\n@@ -463,6 +465,7 @@ fn duration_const() {\n     const CHECKED_MUL: Option<Duration> = Duration::SECOND.checked_mul(1);\n     assert_eq!(CHECKED_MUL, Some(Duration::SECOND));\n \n+/*  FIXME(#110395)\n     const MUL_F32: Duration = Duration::SECOND.mul_f32(1.0);\n     assert_eq!(MUL_F32, Duration::SECOND);\n \n@@ -477,6 +480,7 @@ fn duration_const() {\n \n     const DIV_F64: Duration = Duration::SECOND.div_f64(1.0);\n     assert_eq!(DIV_F64, Duration::SECOND);\n+*/\n \n     const DIV_DURATION_F32: f32 = Duration::SECOND.div_duration_f32(Duration::SECOND);\n     assert_eq!(DIV_DURATION_F32, 1.0);"}, {"sha": "6006354eba4e5154c455771b4b4b79291890b5fc", "filename": "tests/rustdoc/hide-complex-unevaluated-const-arguments.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -29,7 +29,7 @@ pub trait Stage {\n     //\n     // @has - '//*[@id=\"associatedconstant.ARRAY1\"]' \\\n     //        'const ARRAY1: [u8; { _ }]'\n-    const ARRAY1: [u8; Struct::new(/* ... */) + Self::ABSTRACT * 1_000];\n+    const ARRAY1: [u8; Struct::new(/* ... */).do_something(Self::ABSTRACT * 1_000)];\n \n     // @has - '//*[@id=\"associatedconstant.VERBOSE\"]' \\\n     //        'const VERBOSE: [u16; { _ }]'\n@@ -73,10 +73,14 @@ pub struct Struct { private: () }\n \n impl Struct {\n     const fn new() -> Self { Self { private: () } }\n+    const fn do_something(self, x: usize) -> usize {\n+        x\n+    }\n }\n-\n+/* FIXME(const-trait): readd this\n impl const std::ops::Add<usize> for Struct {\n     type Output = usize;\n \n     fn add(self, _: usize) -> usize { 0 }\n }\n+*/"}, {"sha": "5d742dc391a53e0c64f7325e5d2a6764f890d67c", "filename": "tests/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -13,57 +13,57 @@ use std::marker::Destruct;\n pub struct S<T>(T);\n \n // @!has foo/trait.Tr.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Fn'\n // @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' '~const'\n-// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' ': Clone'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where\"]' ': Fn'\n #[const_trait]\n pub trait Tr<T> {\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n-    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Fn'\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n-    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n-    fn a<A: ~const Clone + ~const Destruct>()\n+    // @has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Fn'\n+    fn a<A: ~const Fn() + ~const Destruct>()\n     where\n-        Option<A>: ~const Clone + ~const Destruct,\n+        Option<A>: ~const Fn() + ~const Destruct,\n     {\n     }\n }\n \n // @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]' ''\n // @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]' '~const'\n-// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/a[@class=\"trait\"]' 'Fn'\n // @!has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n-// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n-impl<T: ~const Clone + ~const Destruct> const Tr<T> for T\n+// @has - '//section[@id=\"impl-Tr%3CT%3E-for-T\"]/h3[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Fn'\n+impl<T: ~const Fn() + ~const Destruct> const Tr<T> for T\n where\n-    Option<T>: ~const Clone + ~const Destruct,\n+    Option<T>: ~const Fn() + ~const Destruct,\n {\n-    fn a<A: ~const Clone + ~const Destruct>()\n+    fn a<A: ~const Fn() + ~const Destruct>()\n     where\n-        Option<A>: ~const Clone + ~const Destruct,\n+        Option<A>: ~const Fn() + ~const Destruct,\n     {\n     }\n }\n \n // @!has foo/fn.foo.html '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @has - '//pre[@class=\"rust item-decl\"]/code/a[@class=\"trait\"]' 'Fn'\n // @!has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n-// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n-pub const fn foo<F: ~const Clone + ~const Destruct>()\n+// @has - '//pre[@class=\"rust item-decl\"]/code/span[@class=\"where fmt-newline\"]' ': Fn'\n+pub const fn foo<F: ~const Fn() + ~const Destruct>()\n where\n-    Option<F>: ~const Clone + ~const Destruct,\n+    Option<F>: ~const Fn() + ~const Destruct,\n {\n     F::a()\n }\n \n impl<T> S<T> {\n     // @!has foo/struct.S.html '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]' '~const'\n-    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Clone'\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/a[@class=\"trait\"]' 'Fn'\n     // @!has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where\"]' '~const'\n-    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Clone'\n-    pub const fn foo<B, C: ~const Clone + ~const Destruct>()\n+    // @has - '//section[@id=\"method.foo\"]/h4[@class=\"code-header\"]/span[@class=\"where fmt-newline\"]' ': Fn'\n+    pub const fn foo<B, C: ~const Fn() + ~const Destruct>()\n     where\n-        B: ~const Clone + ~const Destruct,\n+        B: ~const Fn() + ~const Destruct,\n     {\n         B::a()\n     }"}, {"sha": "ae9207cf8555b66132b8cdbc771b2c3caad6378d", "filename": "tests/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,5 @@\n+// known-bug: #110395\n+\n #![feature(generic_const_exprs, adt_const_params, const_trait_impl)]\n #![allow(incomplete_features)]\n \n@@ -26,7 +28,6 @@ struct Evaluatable2<const N: usize>;\n \n fn foo2<const N: usize>(a: Evaluatable2<{ N + N }>) {\n     bar2::<{ std::ops::Add::add(N, N) }>();\n-    //~^ error: unconstrained generic constant\n     // FIXME(generic_const_exprs) make this not an error\n }\n "}, {"sha": "7f28771cee83f99139c5aa3e767a8fef2a56412c", "filename": "tests/ui/const-generics/generic_const_exprs/unify-op-with-fn-call.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funify-op-with-fn-call.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,10 +1,11 @@\n-error: unconstrained generic constant\n-  --> $DIR/unify-op-with-fn-call.rs:28:12\n+error: const `impl` for trait `Add` which is not marked with `#[const_trait]`\n+  --> $DIR/unify-op-with-fn-call.rs:10:12\n    |\n-LL |     bar2::<{ std::ops::Add::add(N, N) }>();\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl const std::ops::Add for Foo {\n+   |            ^^^^^^^^^^^^^\n    |\n-   = help: try adding a `where` bound using this expression: `where [(); { std::ops::Add::add(N, N) }]:`\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to previous error\n "}, {"sha": "05f33c33946a896444f70031dbac0aabf3426131", "filename": "tests/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                      ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8` in const contexts\n+error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-3b.rs:16:20\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n    |                    ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `~const Add<u8>` is not implemented for `i8`\n+   = help: the trait `Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a i8 as Add<i8>>\n              <&i8 as Add<&i8>>"}, {"sha": "d019f5920b5174f7d7d5fef6db03921096ce7c8c", "filename": "tests/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -4,13 +4,13 @@ error[E0308]: mismatched types\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                              ^^^ expected `i8`, found `u8`\n \n-error[E0277]: cannot add `u8` to `i8` in const contexts\n+error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-4b.rs:9:28\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n    |                            ^ no implementation for `i8 + u8`\n    |\n-   = help: the trait `~const Add<u8>` is not implemented for `i8`\n+   = help: the trait `Add<u8>` is not implemented for `i8`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a i8 as Add<i8>>\n              <&i8 as Add<&i8>>"}, {"sha": "432a05756d305ef401b03c665a6ff5fe32647250", "filename": "tests/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR can't compare\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR pointers cannot\n // unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR can't compare\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR pointers cannot"}, {"sha": "1f5bca273d3b040012c8b4dd13c8e613d1b9fcdb", "filename": "tests/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,29 +1,18 @@\n-error[E0277]: can't compare `*const i32` with `_` in const contexts\n-  --> $DIR/const_raw_ptr_ops.rs:4:43\n+error: pointers cannot be reliably compared during const eval\n+  --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   |                                           ^^ no implementation for `*const i32 == _`\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n-note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n-  --> $DIR/const_raw_ptr_ops.rs:4:43\n-   |\n-LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n-   |                                           ^^\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-error[E0277]: can't compare `*const i32` with `_` in const contexts\n-  --> $DIR/const_raw_ptr_ops.rs:6:44\n+error: pointers cannot be reliably compared during const eval\n+  --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   |                                            ^^ no implementation for `*const i32 == _`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `*const i32`\n-note: the trait `PartialEq<_>` is implemented for `*const i32`, but that implementation is not `const`\n-  --> $DIR/const_raw_ptr_ops.rs:6:44\n-   |\n-LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n-   |                                            ^^\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ebc5543b380a542ceeb8b30071962661fb83ded4", "filename": "tests/ui/consts/const-eval/ub-slice-get-unchecked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,5 @@\n+// known-bug: #110395\n+\n #![feature(const_slice_index)]\n \n const A: [(); 5] = [(), (), (), (), ()];"}, {"sha": "403fb5e09404d99b3f8cbb70747cb54a93685621", "filename": "tests/ui/consts/const-eval/ub-slice-get-unchecked.stderr", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fub-slice-get-unchecked.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,18 +1,11 @@\n-error[E0080]: evaluation of constant value failed\n-  --> $SRC_DIR/core/src/slice/index.rs:LL:COL\n-   |\n-   = note: overflow executing `unchecked_sub`\n-   |\n-note: inside `<std::ops::Range<usize> as SliceIndex<[()]>>::get_unchecked`\n-  --> $SRC_DIR/core/src/slice/index.rs:LL:COL\n-note: inside `core::slice::<impl [()]>::get_unchecked::<std::ops::Range<usize>>`\n-  --> $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-note: inside `B`\n-  --> $DIR/ub-slice-get-unchecked.rs:7:27\n+error[E0015]: cannot call non-const fn `core::slice::<impl [()]>::get_unchecked::<std::ops::Range<usize>>` in constants\n+  --> $DIR/ub-slice-get-unchecked.rs:9:29\n    |\n LL | const B: &[()] = unsafe { A.get_unchecked(3..1) };\n-   |                           ^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "3a5d5bb46e912049db656af29af311be7c46de3c", "filename": "tests/ui/consts/const-float-classify.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -8,11 +8,33 @@\n // Don't promote\n const fn nop<T>(x: T) -> T { x }\n \n+// FIXME(const-hack): replace with PartialEq\n+#[const_trait]\n+trait MyEq<T> {\n+    fn eq(self, b: T) -> bool;\n+}\n+\n+impl const MyEq<bool> for bool {\n+    fn eq(self, b: bool) -> bool {\n+        self == b\n+    }\n+}\n+\n+impl const MyEq<NonDet> for bool {\n+    fn eq(self, _: NonDet) -> bool {\n+        true\n+    }\n+}\n+\n+const fn eq<A: ~const MyEq<B>, B>(x: A, y: B) -> bool {\n+    x.eq(y)\n+}\n+\n macro_rules! const_assert {\n     ($a:expr, $b:expr) => {\n         {\n-            const _: () = assert!($a == $b);\n-            assert_eq!(nop($a), nop($b));\n+            const _: () = assert!(eq($a, $b));\n+            assert!(eq(nop($a), nop($b)));\n         }\n     };\n }\n@@ -47,15 +69,6 @@ macro_rules! suite_inner {\n #[derive(Debug)]\n struct NonDet;\n \n-impl const PartialEq<NonDet> for bool {\n-    fn eq(&self, _: &NonDet) -> bool {\n-        true\n-    }\n-    fn ne(&self, _: &NonDet) -> bool {\n-        false\n-    }\n-}\n-\n // The result of the `is_sign` methods are not checked for correctness, since LLVM does not\n // guarantee anything about the signedness of NaNs. See\n // https://github.com/rust-lang/rust/issues/55131."}, {"sha": "50b7ce1f8c01db3c869fb447dba119458f8a3f86", "filename": "tests/ui/consts/const-fn-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -7,7 +7,6 @@ const fn f(x: usize) -> usize {\n         //~| ERROR `for` is not allowed in a `const fn`\n         //~| ERROR mutable references are not allowed in constant functions\n         //~| ERROR cannot call non-const fn\n-        //~| ERROR the trait bound\n         sum += i;\n     }\n     sum"}, {"sha": "f735b3d53ce43202b6b00c0a48b0769287e7d511", "filename": "tests/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -5,7 +5,7 @@ LL | /     for i in 0..x {\n LL | |\n LL | |\n LL | |\n-...  |\n+LL | |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n@@ -33,19 +33,6 @@ LL |     for i in 0..x {\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<usize>: Iterator` is not satisfied\n-  --> $DIR/const-fn-error.rs:5:14\n-   |\n-LL |     for i in 0..x {\n-   |              ^^^^ `std::ops::Range<usize>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<usize>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<usize>`, but that implementation is not `const`\n-  --> $DIR/const-fn-error.rs:5:14\n-   |\n-LL |     for i in 0..x {\n-   |              ^^^^\n-\n error[E0015]: cannot call non-const fn `<std::ops::Range<usize> as Iterator>::next` in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n    |\n@@ -55,7 +42,7 @@ LL |     for i in 0..x {\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0015, E0277, E0658.\n+Some errors have detailed explanations: E0015, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "8db2485355833d3b58313271859f15afbc05c843", "filename": "tests/ui/consts/const-for.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -5,7 +5,6 @@ const _: () = {\n     for _ in 0..5 {}\n     //~^ error: cannot call\n     //~| error: cannot convert\n-    //~| error: the trait bound\n };\n \n fn main() {}"}, {"sha": "3fb9787c0d868455fe8d88840560ee407d8cec19", "filename": "tests/ui/consts/const-for.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -9,19 +9,6 @@ note: impl defined here, but it is not `const`\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `std::ops::Range<i32>: Iterator` is not satisfied\n-  --> $DIR/const-for.rs:5:14\n-   |\n-LL |     for _ in 0..5 {}\n-   |              ^^^^ `std::ops::Range<i32>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<i32>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<i32>`, but that implementation is not `const`\n-  --> $DIR/const-for.rs:5:14\n-   |\n-LL |     for _ in 0..5 {}\n-   |              ^^^^\n-\n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n   --> $DIR/const-for.rs:5:14\n    |\n@@ -31,7 +18,6 @@ LL |     for _ in 0..5 {}\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "6b7ba8f1e32b40beceb2e71f1f6954fbd5602f04", "filename": "tests/ui/consts/const-try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-try.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n // Demonstrates what's needed to make use of `?` in const contexts.\n "}, {"sha": "37014f9b83f69fb61a264d260a2b2e8fdad638fc", "filename": "tests/ui/consts/const-try.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst-try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-try.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,20 @@\n+error: const `impl` for trait `FromResidual` which is not marked with `#[const_trait]`\n+  --> $DIR/const-try.rs:15:12\n+   |\n+LL | impl const FromResidual<Error> for TryMe {\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: const `impl` for trait `Try` which is not marked with `#[const_trait]`\n+  --> $DIR/const-try.rs:21:12\n+   |\n+LL | impl const Try for TryMe {\n+   |            ^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "19cee2022ac079832c76d49cf5367966e01f759b", "filename": "tests/ui/consts/const_cmp_type_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// known-bug: #110395\n #![feature(const_type_id)]\n #![feature(const_trait_impl)]\n "}, {"sha": "319d2b924a88ca11966c4dca7bbeb1a7ee740423", "filename": "tests/ui/consts/const_cmp_type_id.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_cmp_type_id.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,76 @@\n+error[E0277]: can't compare `TypeId` with `TypeId` in const contexts\n+  --> $DIR/const_cmp_type_id.rs:8:13\n+   |\n+LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId == TypeId`\n+   |\n+   = help: the trait `~const PartialEq` is not implemented for `TypeId`\n+note: the trait `PartialEq` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/const_cmp_type_id.rs:8:13\n+   |\n+LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/const_cmp_type_id.rs:8:13\n+   |\n+LL |     assert!(TypeId::of::<u8>() == TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: can't compare `TypeId` with `TypeId` in const contexts\n+  --> $DIR/const_cmp_type_id.rs:9:13\n+   |\n+LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId == TypeId`\n+   |\n+   = help: the trait `~const PartialEq` is not implemented for `TypeId`\n+note: the trait `PartialEq` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/const_cmp_type_id.rs:9:13\n+   |\n+LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/const_cmp_type_id.rs:9:13\n+   |\n+LL |     assert!(TypeId::of::<()>() != TypeId::of::<u8>());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: can't compare `TypeId` with `TypeId` in const contexts\n+  --> $DIR/const_cmp_type_id.rs:10:22\n+   |\n+LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId < TypeId` and `TypeId > TypeId`\n+   |\n+   = help: the trait `~const PartialOrd` is not implemented for `TypeId`\n+note: the trait `PartialOrd` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/const_cmp_type_id.rs:10:22\n+   |\n+LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constants\n+  --> $DIR/const_cmp_type_id.rs:10:22\n+   |\n+LL |     const _A: bool = TypeId::of::<u8>() < TypeId::of::<u16>();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "be11ac7264a1ab867d50a9c3b4915708008f50dc", "filename": "tests/ui/consts/fn_trait_refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ffn_trait_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ffn_trait_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ffn_trait_refs.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![feature(const_fn_trait_ref_impls)]\n #![feature(fn_traits)]"}, {"sha": "bfebf66701bd9c05aaf146993c7da729590bf0e7", "filename": "tests/ui/consts/fn_trait_refs.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ffn_trait_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ffn_trait_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ffn_trait_refs.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,15 @@\n+error[E0635]: unknown feature `const_fn_trait_ref_impls`\n+  --> $DIR/fn_trait_refs.rs:3:12\n+   |\n+LL | #![feature(const_fn_trait_ref_impls)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0635]: unknown feature `const_cmp`\n+  --> $DIR/fn_trait_refs.rs:8:12\n+   |\n+LL | #![feature(const_cmp)]\n+   |            ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "f5ed5aeedc39c238cae98a9d3bb53bc2c196ab99", "filename": "tests/ui/consts/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-25826.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR can't compare\n+    //~^ ERROR pointers cannot\n     println!(\"{}\", A);\n }"}, {"sha": "780edd2149fe102ce3ed1fd78264ecf77f247b4c", "filename": "tests/ui/consts/issue-25826.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-25826.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,16 +1,10 @@\n-error[E0277]: can't compare `*const ()` with `*const ()` in const contexts\n-  --> $DIR/issue-25826.rs:3:52\n+error: pointers cannot be reliably compared during const eval\n+  --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-   |                                                    ^ no implementation for `*const () < *const ()` and `*const () > *const ()`\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `~const PartialOrd` is not implemented for `*const ()`\n-note: the trait `PartialOrd` is implemented for `*const ()`, but that implementation is not `const`\n-  --> $DIR/issue-25826.rs:3:52\n-   |\n-LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-   |                                                    ^\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "a3b9510036d0fd859427ee8c99cfcc4d8e257739", "filename": "tests/ui/consts/issue-73976-monomorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n //\n // This test is complement to the test in issue-73976-polymorphic.rs.\n // In that test we ensure that polymorphic use of type_id and type_name in patterns"}, {"sha": "95ab78b1b23b35f85f51c345c642d30c95eb85e6", "filename": "tests/ui/consts/issue-73976-monomorphic.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-73976-monomorphic.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,28 @@\n+error[E0277]: can't compare `TypeId` with `TypeId` in const contexts\n+  --> $DIR/issue-73976-monomorphic.rs:21:5\n+   |\n+LL |     GetTypeId::<T>::VALUE == GetTypeId::<usize>::VALUE\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `TypeId == TypeId`\n+   |\n+   = help: the trait `~const PartialEq` is not implemented for `TypeId`\n+note: the trait `PartialEq` is implemented for `TypeId`, but that implementation is not `const`\n+  --> $DIR/issue-73976-monomorphic.rs:21:5\n+   |\n+LL |     GetTypeId::<T>::VALUE == GetTypeId::<usize>::VALUE\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/issue-73976-monomorphic.rs:21:5\n+   |\n+LL |     GetTypeId::<T>::VALUE == GetTypeId::<usize>::VALUE\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/core/src/any.rs:LL:COL\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "38c8129b8cfd918d0302fb9f95d51931400caf28", "filename": "tests/ui/consts/issue-94675.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-94675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-94675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-94675.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -7,8 +7,9 @@ struct Foo<'a> {\n impl<'a> Foo<'a> {\n     const fn spam(&mut self, baz: &mut Vec<u32>) {\n         self.bar[0] = baz.len();\n-        //~^ the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n-        //~| the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n+        //~^ ERROR: cannot call\n+        //~| ERROR: cannot call\n+        //~| ERROR: the trait bound\n     }\n }\n "}, {"sha": "b4e5db44e7105847789fe3f65bb133848d241c48", "filename": "tests/ui/consts/issue-94675.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-94675.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,15 +1,10 @@\n-error[E0277]: the trait bound `Vec<usize>: ~const Index<_>` is not satisfied\n-  --> $DIR/issue-94675.rs:9:9\n+error[E0015]: cannot call non-const fn `Vec::<u32>::len` in constant functions\n+  --> $DIR/issue-94675.rs:9:27\n    |\n LL |         self.bar[0] = baz.len();\n-   |         ^^^^^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n-   |\n-   = help: the trait `~const Index<_>` is not implemented for `Vec<usize>`\n-note: the trait `Index<_>` is implemented for `Vec<usize>`, but that implementation is not `const`\n-  --> $DIR/issue-94675.rs:9:9\n+   |                           ^^^^^\n    |\n-LL |         self.bar[0] = baz.len();\n-   |         ^^^^^^^^^^^\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error[E0277]: the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n   --> $DIR/issue-94675.rs:9:9\n@@ -24,6 +19,17 @@ note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that impl\n LL |         self.bar[0] = baz.len();\n    |         ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "c5990a7f5155f402769a0d48282c90d3791ded04", "filename": "tests/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,6 +1,6 @@\n const fn cmp(x: fn(), y: fn()) -> bool {\n     unsafe { x == y }\n-    //~^ ERROR can't compare\n+    //~^ ERROR pointers cannot\n }\n \n fn main() {}"}, {"sha": "3845068d8411c652cfca567167c846d75d0d4a4d", "filename": "tests/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,16 +1,10 @@\n-error[E0277]: can't compare `fn()` with `_` in const contexts\n-  --> $DIR/cmp_fn_pointers.rs:2:16\n+error: pointers cannot be reliably compared during const eval\n+  --> $DIR/cmp_fn_pointers.rs:2:14\n    |\n LL |     unsafe { x == y }\n-   |                ^^ no implementation for `fn() == _`\n+   |              ^^^^^^\n    |\n-   = help: the trait `~const PartialEq<_>` is not implemented for `fn()`\n-note: the trait `PartialEq<_>` is implemented for `fn()`, but that implementation is not `const`\n-  --> $DIR/cmp_fn_pointers.rs:2:16\n-   |\n-LL |     unsafe { x == y }\n-   |                ^^\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "dae6cafaebb34bd0a298f4676bf011412c6a615e", "filename": "tests/ui/consts/promoted_const_call.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fpromoted_const_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fpromoted_const_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fpromoted_const_call.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,7 +1,9 @@\n #![feature(const_mut_refs)]\n #![feature(const_trait_impl)]\n+\n struct Panic;\n impl const Drop for Panic { fn drop(&mut self) { panic!(); } }\n+\n pub const fn id<T>(x: T) -> T { x }\n pub const C: () = {\n     let _: &'static _ = &id(&Panic);"}, {"sha": "1cbd8cbe6999c855db0f22a8a69538b8839f549a", "filename": "tests/ui/consts/promoted_const_call.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fpromoted_const_call.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:7:26\n+  --> $DIR/promoted_const_call.rs:9:26\n    |\n LL |     let _: &'static _ = &id(&Panic);\n    |            ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n@@ -10,7 +10,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:7:30\n+  --> $DIR/promoted_const_call.rs:9:30\n    |\n LL |     let _: &'static _ = &id(&Panic);\n    |            ----------        ^^^^^ - temporary value is freed at the end of this statement\n@@ -19,7 +19,7 @@ LL |     let _: &'static _ = &id(&Panic);\n    |            type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:13:26\n+  --> $DIR/promoted_const_call.rs:15:26\n    |\n LL |     let _: &'static _ = &id(&Panic);\n    |            ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n@@ -30,7 +30,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:13:30\n+  --> $DIR/promoted_const_call.rs:15:30\n    |\n LL |     let _: &'static _ = &id(&Panic);\n    |            ----------        ^^^^^ - temporary value is freed at the end of this statement\n@@ -39,7 +39,7 @@ LL |     let _: &'static _ = &id(&Panic);\n    |            type annotation requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:16:26\n+  --> $DIR/promoted_const_call.rs:18:26\n    |\n LL |     let _: &'static _ = &&(Panic, 0).1;\n    |            ----------    ^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n@@ -50,7 +50,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promoted_const_call.rs:16:27\n+  --> $DIR/promoted_const_call.rs:18:27\n    |\n LL |     let _: &'static _ = &&(Panic, 0).1;\n    |            ----------     ^^^^^^^^^^ creates a temporary value which is freed while still in use"}, {"sha": "a1a741e80e55e713a89d35330882357a81695aab", "filename": "tests/ui/consts/rustc-impl-const-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![crate_type = \"lib\"]\n #![feature(staged_api)]"}, {"sha": "e6930da71ec7810c3b61abf6aefbc1e14c7bfba0", "filename": "tests/ui/consts/rustc-impl-const-stability.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Frustc-impl-const-stability.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,11 @@\n+error: const `impl` for trait `Default` which is not marked with `#[const_trait]`\n+  --> $DIR/rustc-impl-const-stability.rs:15:12\n+   |\n+LL | impl const Default for Data {\n+   |            ^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: aborting due to previous error\n+"}, {"sha": "ed69f492fb969a3408b2beff852e67a7e76076a9", "filename": "tests/ui/consts/try-operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ftry-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ftry-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftry-operator.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// known-bug: #110395\n \n #![feature(try_trait_v2)]\n #![feature(const_trait_impl)]"}, {"sha": "f6a651c5e663c2be2c0151454c0e8a9fcd0d5bcd", "filename": "tests/ui/consts/try-operator.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ftry-operator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fconsts%2Ftry-operator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Ftry-operator.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,9 @@\n+error[E0635]: unknown feature `const_convert`\n+  --> $DIR/try-operator.rs:6:12\n+   |\n+LL | #![feature(const_convert)]\n+   |            ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "26986684f0c0a0a2d19f5df67e1b528b6957f532", "filename": "tests/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -15,13 +15,13 @@ help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ~\n \n-error[E0277]: cannot subtract `{integer}` from `{float}` in const contexts\n+error[E0277]: cannot subtract `{integer}` from `{float}`\n   --> $DIR/issue-49746-unicode-confusable-in-float-literal-expt.rs:1:53\n    |\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ^ no implementation for `{float} - {integer}`\n    |\n-   = help: the trait `~const Sub<{integer}>` is not implemented for `{float}`\n+   = help: the trait `Sub<{integer}>` is not implemented for `{float}`\n    = help: the following other types implement trait `Sub<Rhs>`:\n              <&'a f32 as Sub<f32>>\n              <&'a f64 as Sub<f64>>"}, {"sha": "85e12463a903dca4f9964557282053d8174332e8", "filename": "tests/ui/issues/issue-25901.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-25901.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-25901.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-25901.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -2,7 +2,7 @@ struct A;\n struct B;\n \n static S: &'static B = &A;\n-//~^ ERROR the trait bound\n+//~^ ERROR cannot perform deref coercion\n \n use std::ops::Deref;\n "}, {"sha": "1427e43854f57de283f4dc807f0bcbdc66788f36", "filename": "tests/ui/issues/issue-25901.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-25901.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-25901.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-25901.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,15 +1,24 @@\n-error[E0277]: the trait bound `A: Deref` is not satisfied\n+error[E0015]: cannot perform deref coercion on `A` in statics\n   --> $DIR/issue-25901.rs:4:24\n    |\n LL | static S: &'static B = &A;\n-   |                        ^^ the trait `~const Deref` is not implemented for `A`\n+   |                        ^^\n    |\n-note: the trait `Deref` is implemented for `A`, but that implementation is not `const`\n-  --> $DIR/issue-25901.rs:4:24\n+   = note: attempting to deref into `B`\n+note: deref defined here\n+  --> $DIR/issue-25901.rs:10:5\n    |\n-LL | static S: &'static B = &A;\n-   |                        ^^\n+LL |     type Target = B;\n+   |     ^^^^^^^^^^^\n+note: impl defined here, but it is not `const`\n+  --> $DIR/issue-25901.rs:9:1\n+   |\n+LL | impl Deref for A {\n+   | ^^^^^^^^^^^^^^^^\n+   = note: calls in statics are limited to constant functions, tuple structs and tuple variants\n+   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n+   = note: consider wrapping this expression in `Lazy::new(|| ...)` from the `once_cell` crate: https://crates.io/crates/once_cell\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "3d527eb6b4e4a56ec09a7536af60d3cf364bda5b", "filename": "tests/ui/issues/issue-50582.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-50582.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fissues%2Fissue-50582.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-50582.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -7,13 +7,13 @@ LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    = note: see issue #87575 <https://github.com/rust-lang/rust/issues/87575> for more information\n    = help: add `#![feature(const_for)]` to the crate attributes to enable\n \n-error[E0277]: cannot add `()` to `{integer}` in const contexts\n+error[E0277]: cannot add `()` to `{integer}`\n   --> $DIR/issue-50582.rs:2:18\n    |\n LL |     Vec::<[(); 1 + for x in 0..1 {}]>::new();\n    |                  ^ no implementation for `{integer} + ()`\n    |\n-   = help: the trait `~const Add<()>` is not implemented for `{integer}`\n+   = help: the trait `Add<()>` is not implemented for `{integer}`\n    = help: the following other types implement trait `Add<Rhs>`:\n              <&'a f32 as Add<f32>>\n              <&'a f64 as Add<f64>>"}, {"sha": "0498a8a16259010501a0387c4bcfb61a2e839a74", "filename": "tests/ui/never_type/issue-52443.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fnever_type%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fnever_type%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -11,5 +11,4 @@ fn main() {\n     //~| ERROR cannot convert\n     //~| ERROR mutable references\n     //~| ERROR cannot call\n-    //~| ERROR the trait bound\n }"}, {"sha": "99dfce869034323b3549a951d8f345b2f0f04179", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -58,19 +58,6 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0277]: the trait bound `RangeFrom<usize>: Iterator` is not satisfied\n-  --> $DIR/issue-52443.rs:9:21\n-   |\n-LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^ `RangeFrom<usize>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `RangeFrom<usize>`\n-note: the trait `Iterator` is implemented for `RangeFrom<usize>`, but that implementation is not `const`\n-  --> $DIR/issue-52443.rs:9:21\n-   |\n-LL |     [(); { for _ in 0usize.. {}; 0}];\n-   |                     ^^^^^^^^\n-\n error[E0015]: cannot call non-const fn `<RangeFrom<usize> as Iterator>::next` in constants\n   --> $DIR/issue-52443.rs:9:21\n    |\n@@ -80,7 +67,7 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 7 previous errors; 1 warning emitted\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0015, E0277, E0308, E0658.\n+Some errors have detailed explanations: E0015, E0308, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "96790a87311dd2127e780c804973dca01bd6d850", "filename": "tests/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,5 @@\n+// known-bug: #110395\n+\n #![feature(const_trait_impl)]\n \n struct NonConstAdd(i32);\n@@ -17,7 +19,6 @@ trait Foo {\n \n impl const Foo for NonConstAdd {\n     type Bar = NonConstAdd;\n-    //~^ ERROR: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n }\n \n #[const_trait]"}, {"sha": "0cffae1da8d97510c4afbc489a2bdbf5a4f8fe6d", "filename": "tests/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,21 +1,8 @@\n-error[E0277]: cannot add `NonConstAdd` to `NonConstAdd` in const contexts\n-  --> $DIR/assoc-type.rs:19:16\n-   |\n-LL |     type Bar = NonConstAdd;\n-   |                ^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n-   |\n-   = help: the trait `~const Add` is not implemented for `NonConstAdd`\n-note: the trait `Add` is implemented for `NonConstAdd`, but that implementation is not `const`\n-  --> $DIR/assoc-type.rs:19:16\n-   |\n-LL |     type Bar = NonConstAdd;\n-   |                ^^^^^^^^^^^\n-note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:15:15\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/assoc-type.rs:17:22\n    |\n LL |     type Bar: ~const std::ops::Add;\n-   |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n+   |                      ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ae0c2e6bcfa413620339acd759423a83d51b70c3", "filename": "tests/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "ff53eea1110c00027be6736e9c107fd620825a5d", "filename": "tests/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,20 @@\n+error: const `impl` for trait `Add` which is not marked with `#[const_trait]`\n+  --> $DIR/call-const-trait-method-pass.rs:7:12\n+   |\n+LL | impl const std::ops::Add for Int {\n+   |            ^^^^^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/call-const-trait-method-pass.rs:15:12\n+   |\n+LL | impl const PartialEq for Int {\n+   |            ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5120e6bfb41178cbcff34161a715f0af39f966fa", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n #![feature(const_trait_impl)]\n \n #[const_trait]"}, {"sha": "02d53cc78ee56974e8e64b6818ec9934bf363cd5", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-in-impl.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-in-impl.rs:9:16\n+   |\n+LL | impl<T: ~const PartialEq> const MyPartialEq for T {\n+   |                ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3febb328a83ca02600b7bfcbb06e8a7597190e86", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,6 +1,6 @@\n //! Basic test for calling methods on generic type parameters in `const fn`.\n \n-// check-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "529a472e0bda5260c47577391bef8456024950ce", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-chain.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,23 @@\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/call-generic-method-chain.rs:9:12\n+   |\n+LL | impl const PartialEq for S {\n+   |            ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-method-chain.rs:18:32\n+   |\n+LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+   |                                ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-method-chain.rs:22:40\n+   |\n+LL | const fn equals_self_wrapper<T: ~const PartialEq>(t: &T) -> bool {\n+   |                                        ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "e618160d3b6f0a01205f03f66cbefd9e00992241", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "bdc6ccc8aec233e3c8ec00a9d2bf41e8d2b4a847", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,23 @@\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/call-generic-method-dup-bound.rs:7:12\n+   |\n+LL | impl const PartialEq for S {\n+   |            ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-method-dup-bound.rs:18:44\n+   |\n+LL | const fn equals_self<T: PartialEq + ~const PartialEq>(t: &T) -> bool {\n+   |                                            ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-method-dup-bound.rs:25:37\n+   |\n+LL | const fn equals_self2<T: A + ~const PartialEq>(t: &T) -> bool {\n+   |                                     ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fe1abbf42071577852c752bfbe030538f187d58b", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,8 +1,9 @@\n+// known-bug: #110395\n #![feature(const_trait_impl)]\n \n pub const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     *t == *t\n-    //~^ ERROR can't compare\n+    // (remove this) ~^ ERROR can't compare\n }\n \n fn main() {}"}, {"sha": "3963f64ad32b3b90b59cb9f2b9ae9b7588012b38", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,15 +1,28 @@\n-error[E0277]: can't compare `T` with `_` in const contexts\n-  --> $DIR/call-generic-method-fail.rs:4:8\n+error[E0277]: can't compare `T` with `T` in const contexts\n+  --> $DIR/call-generic-method-fail.rs:5:5\n    |\n LL |     *t == *t\n-   |        ^^ no implementation for `T == _`\n+   |     ^^^^^^^^ no implementation for `T == T`\n    |\n-note: the trait `PartialEq<_>` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-fail.rs:4:8\n+note: the trait `PartialEq` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-fail.rs:5:5\n    |\n LL |     *t == *t\n-   |        ^^\n+   |     ^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/call-generic-method-fail.rs:5:5\n+   |\n+LL |     *t == *t\n+   |     ^^^^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+help: consider further restricting this bound\n+   |\n+LL | pub const fn equals_self<T: PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {\n+   |                                       ++++++++++++++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "09f35a277371e2c4d3a60224f05824917e6c6932", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,6 +1,6 @@\n //! Basic test for calling methods on generic type parameters in `const fn`.\n \n-// check-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "7fbe89dba3cb37162598f73fef2c605a4be64aa7", "filename": "tests/ui/rfc-2632-const-trait-impl/call-generic-method-pass.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,17 @@\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/call-generic-method-pass.rs:9:12\n+   |\n+LL | impl const PartialEq for S {\n+   |            ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/call-generic-method-pass.rs:18:32\n+   |\n+LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+   |                                ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9ba19e800dd65ba38414c60fe1eeffab82694efd", "filename": "tests/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,9 +1,10 @@\n+// known-bug: #110395\n+\n #![feature(const_trait_impl)]\n \n pub struct Int(i32);\n \n impl const std::ops::Add for i32 {\n-    //~^ ERROR only traits defined in the current crate can be implemented for primitive types\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {\n@@ -20,7 +21,6 @@ impl std::ops::Add for Int {\n }\n \n impl const std::ops::Add for Int {\n-    //~^ ERROR conflicting implementations of trait\n     type Output = Self;\n \n     fn add(self, rhs: Self) -> Self {"}, {"sha": "4f858d61eebaa717cb4dad5895d1c881999485af", "filename": "tests/ui/rfc-2632-const-trait-impl/const-and-non-const-impl.stderr", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-and-non-const-impl.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,25 +1,20 @@\n-error[E0117]: only traits defined in the current crate can be implemented for primitive types\n-  --> $DIR/const-and-non-const-impl.rs:5:1\n+error: const `impl` for trait `Add` which is not marked with `#[const_trait]`\n+  --> $DIR/const-and-non-const-impl.rs:7:12\n    |\n LL | impl const std::ops::Add for i32 {\n-   | ^^^^^^^^^^^-------------^^^^^---\n-   | |          |                 |\n-   | |          |                 `i32` is not defined in the current crate\n-   | |          `i32` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n+   |            ^^^^^^^^^^^^^\n    |\n-   = note: define and implement a trait or new type instead\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n-error[E0119]: conflicting implementations of trait `Add` for type `Int`\n-  --> $DIR/const-and-non-const-impl.rs:22:1\n+error: const `impl` for trait `Add` which is not marked with `#[const_trait]`\n+  --> $DIR/const-and-non-const-impl.rs:23:12\n    |\n-LL | impl std::ops::Add for Int {\n-   | -------------------------- first implementation here\n-...\n LL | impl const std::ops::Add for Int {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Int`\n+   |            ^^^^^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0117, E0119.\n-For more information about an error, try `rustc --explain E0117`."}, {"sha": "b4cc7a9e17e64be0546eb26811eec884f71df989", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closure-trait-method-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,5 @@\n+// known-bug: #110395\n+\n #![feature(const_trait_impl)]\n \n #[const_trait]\n@@ -14,6 +16,5 @@ const fn need_const_closure<T: ~const FnOnce(()) -> i32>(x: T) -> i32 {\n }\n \n const _: () = assert!(need_const_closure(Tr::a) == 42);\n-//~^ ERROR: the trait bound\n \n fn main() {}"}, {"sha": "112416a354343baf184186979be2cb792b3952af", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closure-trait-method-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-trait-method-fail.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied in `fn(()) -> i32 {<() as Tr>::a}`\n-  --> $DIR/const-closure-trait-method-fail.rs:16:23\n+  --> $DIR/const-closure-trait-method-fail.rs:18:23\n    |\n LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ within `fn(()) -> i32 {<() as Tr>::a}`, the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/const-closure-trait-method-fail.rs:16:23\n+  --> $DIR/const-closure-trait-method-fail.rs:18:23\n    |\n LL | const _: () = assert!(need_const_closure(Tr::a) == 42);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7c55b51c8f5f0a0a9bb89d7f7e5e5e6087edb129", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n #![feature(const_trait_impl)]\n "}, {"sha": "13350a6d14a42dee4d3ecf2347e22d7f032ca4cb", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.precise.stderr", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.precise.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,50 +1,26 @@\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail-2.rs:31:23\n+error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`\n+  --> $DIR/const-drop-fail-2.rs:23:25\n    |\n-LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n+   |                         ^^^^\n    |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail-2.rs:31:23\n-   |\n-LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail-2.rs:21:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail-2.rs:33:5\n-   |\n-LL |     ConstDropImplWithBounds(PhantomData)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-drop-fail-2.rs:29:26\n    |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail-2.rs:33:5\n-   |\n-LL |     ConstDropImplWithBounds(PhantomData)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail-2.rs:21:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                          ^^^^^^^^\n \n-error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n-  --> $DIR/const-drop-fail-2.rs:39:9\n+error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`\n+  --> $DIR/const-drop-fail-2.rs:39:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-   |         ^^^^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/const-drop-fail-2.rs:37:1\n+   |                         ^^^^\n    |\n-LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0277, E0367.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "3de9d37d49337782ad94b4fc7f4824442fa34003", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// revisions: stock precise\n+// known-bug: #110395\n #![feature(const_trait_impl)]\n #![feature(const_mut_refs)]\n #![cfg_attr(precise, feature(const_precise_live_drops))]\n@@ -29,15 +29,12 @@ impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n const fn check<T: ~const Destruct>(_: T) {}\n \n const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n-    //~^ ERROR the trait bound\n     ConstDropImplWithBounds(PhantomData)\n-    //~^ ERROR the trait bound\n );\n \n struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n \n impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-//~^ ERROR `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n     fn drop(&mut self) {\n         T::a();\n     }"}, {"sha": "375f5d2c52d644413c143a22bcf7af1f3c463dc4", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,50 @@\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:31:23\n+   |\n+LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail-2.rs:32:5\n+   |\n+LL |     ConstDropImplWithBounds(PhantomData)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail-2.rs:32:5\n+   |\n+LL |     ConstDropImplWithBounds(PhantomData)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail-2.rs:21:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail-2.rs:37:9\n+   |\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail-2.rs:35:1\n+   |\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "13350a6d14a42dee4d3ecf2347e22d7f032ca4cb", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail-2.stock.stderr", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail-2.stock.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,50 +1,26 @@\n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail-2.rs:31:23\n+error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`\n+  --> $DIR/const-drop-fail-2.rs:23:25\n    |\n-LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n+   |                         ^^^^\n    |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail-2.rs:31:23\n-   |\n-LL | const _: () = check::<ConstDropImplWithBounds<NonTrivialDrop>>(\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail-2.rs:21:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n-error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n-  --> $DIR/const-drop-fail-2.rs:33:5\n-   |\n-LL |     ConstDropImplWithBounds(PhantomData)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-drop-fail-2.rs:29:26\n    |\n-note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail-2.rs:33:5\n-   |\n-LL |     ConstDropImplWithBounds(PhantomData)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required by a bound in `ConstDropImplWithBounds`\n-  --> $DIR/const-drop-fail-2.rs:21:35\n-   |\n-LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n-   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+LL | const fn check<T: ~const Destruct>(_: T) {}\n+   |                          ^^^^^^^^\n \n-error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n-  --> $DIR/const-drop-fail-2.rs:39:9\n+error: const `impl` for trait `Drop` which is not marked with `#[const_trait]`\n+  --> $DIR/const-drop-fail-2.rs:39:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n-   |         ^^^^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/const-drop-fail-2.rs:37:1\n+   |                         ^^^^\n    |\n-LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0277, E0367.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "e745cbd24429249af98ae4836c955dd922451763", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n@@ -11,7 +11,7 @@ LL | | }\n    | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL | | }\n    = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n@@ -36,7 +36,7 @@ LL | | }\n    | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^\n@@ -47,7 +47,7 @@ LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n LL | | }\n    | |_- in this macro invocation\n note: required because it appears within the type `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:16:8\n+  --> $DIR/const-drop-fail.rs:18:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1c37648ff1cbac609117dc0b74e6e8bfadf0eea6", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,5 @@\n+// known-bug: #110395\n+\n // revisions: stock precise\n #![feature(const_trait_impl)]\n #![feature(const_mut_refs)]\n@@ -24,8 +26,6 @@ const fn check<T: ~const Destruct>(_: T) {}\n macro_rules! check_all {\n     ($($exp:expr),*$(,)?) => {$(\n         const _: () = check($exp);\n-        //~^ ERROR can't drop\n-        //~| ERROR can't drop\n     )*};\n }\n "}, {"sha": "e745cbd24429249af98ae4836c955dd922451763", "filename": "tests/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n@@ -11,7 +11,7 @@ LL | | }\n    | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL | | }\n    = note: this error originates in the macro `check_all` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n@@ -36,7 +36,7 @@ LL | | }\n    | |_- in this macro invocation\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:26:23\n+  --> $DIR/const-drop-fail.rs:28:23\n    |\n LL |           const _: () = check($exp);\n    |                         ^^^^^^^^^^^\n@@ -47,7 +47,7 @@ LL | |     ConstImplWithDropGlue(NonTrivialDrop),\n LL | | }\n    | |_- in this macro invocation\n note: required because it appears within the type `ConstImplWithDropGlue`\n-  --> $DIR/const-drop-fail.rs:16:8\n+  --> $DIR/const-drop-fail.rs:18:8\n    |\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f396deff4fe899d75287790d41ea83cf58752487", "filename": "tests/ui/rfc-2632-const-trait-impl/const-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n #![allow(incomplete_features)]\n #![feature(\n     associated_type_bounds,"}, {"sha": "f9078e227910d49d69aab09cadf64042571f6206", "filename": "tests/ui/rfc-2632-const-trait-impl/const-impl-trait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,39 @@\n+error[E0635]: unknown feature `const_cmp`\n+  --> $DIR/const-impl-trait.rs:6:5\n+   |\n+LL |     const_cmp,\n+   |     ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-impl-trait.rs:12:30\n+   |\n+LL | const fn cmp(a: &impl ~const PartialEq) -> bool {\n+   |                              ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-impl-trait.rs:16:30\n+   |\n+LL | const fn wrap(x: impl ~const PartialEq + ~const Destruct)\n+   |                              ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-impl-trait.rs:17:20\n+   |\n+LL |     -> impl ~const PartialEq + ~const Destruct\n+   |                    ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-impl-trait.rs:24:29\n+   |\n+LL |     fn huh() -> impl ~const PartialEq + ~const Destruct + Copy;\n+   |                             ^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const-impl-trait.rs:28:29\n+   |\n+LL |     fn huh() -> impl ~const PartialEq + ~const Destruct + Copy {\n+   |                             ^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "dba3ad7f8701eab252601e0f5ca8e4e2097b537c", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,5 @@\n #[derive_const(Default)] //~ ERROR use of unstable library feature\n+//~^ ERROR not marked with `#[const_trait]`\n pub struct S;\n \n fn main() {}"}, {"sha": "6a81f96d88d2e77f5ab89cb4bb626ae848925625", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-gate.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-gate.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -6,6 +6,16 @@ LL | #[derive_const(Default)]\n    |\n    = help: add `#![feature(derive_const)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: const `impl` for trait `Default` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-gate.rs:1:16\n+   |\n+LL | #[derive_const(Default)]\n+   |                ^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b575ea8dae2980d745ad76b8c05c5bc2d15430b9", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,3 +1,4 @@\n+// known-bug: #110395\n #![feature(derive_const)]\n \n pub struct A;\n@@ -8,7 +9,5 @@ impl Default for A {\n \n #[derive_const(Default)]\n pub struct S(A);\n-//~^ cannot call non-const fn\n-//~| the trait bound\n \n fn main() {}"}, {"sha": "1c69ad4317142a70e24a2a169d4e8cda921b3009", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,38 +1,12 @@\n-error[E0277]: the trait bound `A: Default` is not satisfied\n-  --> $DIR/derive-const-non-const-type.rs:10:14\n+error: const `impl` for trait `Default` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-non-const-type.rs:10:16\n    |\n LL | #[derive_const(Default)]\n-   |                ------- in this derive macro expansion\n-LL | pub struct S(A);\n-   |              ^ the trait `~const Default` is not implemented for `A`\n+   |                ^^^^^^^\n    |\n-note: the trait `Default` is implemented for `A`, but that implementation is not `const`\n-  --> $DIR/derive-const-non-const-type.rs:10:14\n-   |\n-LL | #[derive_const(Default)]\n-   |                ------- in this derive macro expansion\n-LL | pub struct S(A);\n-   |              ^\n-   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider annotating `A` with `#[derive(Default)]`\n-   |\n-LL + #[derive(Default)]\n-LL | pub struct A;\n-   |\n-\n-error[E0015]: cannot call non-const fn `<A as Default>::default` in constant functions\n-  --> $DIR/derive-const-non-const-type.rs:10:14\n-   |\n-LL | #[derive_const(Default)]\n-   |                ------- in this derive macro expansion\n-LL | pub struct S(A);\n-   |              ^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-   = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "69098542b7e360fa1a9d86786f49de0cc83af8c8", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]\n \n pub struct A;"}, {"sha": "88054096e630bcfa38ea2b92e81acecaeb2ea7a7", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-use.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-use.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,53 @@\n+error[E0635]: unknown feature `const_cmp`\n+  --> $DIR/derive-const-use.rs:2:30\n+   |\n+LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]\n+   |                              ^^^^^^^^^\n+\n+error[E0635]: unknown feature `const_default_impls`\n+  --> $DIR/derive-const-use.rs:2:41\n+   |\n+LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]\n+   |                                         ^^^^^^^^^^^^^^^^^^^\n+\n+error: const `impl` for trait `Default` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-use.rs:6:12\n+   |\n+LL | impl const Default for A {\n+   |            ^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-use.rs:10:12\n+   |\n+LL | impl const PartialEq for A {\n+   |            ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: const `impl` for trait `Default` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-use.rs:14:16\n+   |\n+LL | #[derive_const(Default, PartialEq)]\n+   |                ^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-use.rs:14:25\n+   |\n+LL | #[derive_const(Default, PartialEq)]\n+   |                         ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "2a5d0176ba0043db97100f33311fd4b4eeedda19", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![feature(derive_const)]\n #![feature(const_trait_impl)]"}, {"sha": "fa78326587c71bae6da205539be5a50897f18851", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,20 @@\n+error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\n+  --> $DIR/derive-const-with-params.rs:6:16\n+   |\n+LL | #[derive_const(PartialEq)]\n+   |                ^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/derive-const-with-params.rs:6:16\n+   |\n+LL | #[derive_const(PartialEq)]\n+   |                ^^^^^^^^^\n+   |\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d665c4479c9ab53889e94a48e166bee77a1bfe63", "filename": "tests/ui/rfc-2632-const-trait-impl/generic-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "1b21d7c0e0e60a66b3695d562770aead491ad102", "filename": "tests/ui/rfc-2632-const-trait-impl/generic-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgeneric-bound.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,11 @@\n+error: const `impl` for trait `Add` which is not marked with `#[const_trait]`\n+  --> $DIR/generic-bound.rs:16:15\n+   |\n+LL | impl<T> const std::ops::Add for S<T> {\n+   |               ^^^^^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: aborting due to previous error\n+"}, {"sha": "dff8a244453af255528f1c6fd6b81e431790a9a4", "filename": "tests/ui/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![feature(const_trait_impl)]\n "}, {"sha": "cfdda4713a7932bca75e470842f4bc13e01c6bf2", "filename": "tests/ui/rfc-2632-const-trait-impl/non-const-op-in-closure-in-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fnon-const-op-in-closure-in-const.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/non-const-op-in-closure-in-const.rs:10:51\n+   |\n+LL | impl<A, B> const Convert<B> for A where B: ~const From<A> {\n+   |                                                   ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c2a3f80170eaa0b84299ef5db5a62589ce1c2bb", "filename": "tests/ui/rfc-2632-const-trait-impl/specializing-constness.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -11,13 +11,16 @@ pub trait A {\n     fn a() -> u32;\n }\n \n-impl<T: ~const Default> const A for T {\n+#[const_trait]\n+pub trait Spec {}\n+\n+impl<T: ~const Spec> const A for T {\n     default fn a() -> u32 {\n         2\n     }\n }\n \n-impl<T: Default + Sup> A for T {\n+impl<T: Spec + Sup> A for T {\n //~^ ERROR: cannot specialize\n //~| ERROR: missing `~const` qualifier\n     fn a() -> u32 {"}, {"sha": "1ffdc50e5893233d1ed9c13e502276df2164af5a", "filename": "tests/ui/rfc-2632-const-trait-impl/specializing-constness.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,14 +1,14 @@\n error: cannot specialize on const impl with non-const impl\n-  --> $DIR/specializing-constness.rs:20:1\n+  --> $DIR/specializing-constness.rs:23:1\n    |\n-LL | impl<T: Default + Sup> A for T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<T: Spec + Sup> A for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing `~const` qualifier for specialization\n-  --> $DIR/specializing-constness.rs:20:9\n+  --> $DIR/specializing-constness.rs:23:9\n    |\n-LL | impl<T: Default + Sup> A for T {\n-   |         ^^^^^^^\n+LL | impl<T: Spec + Sup> A for T {\n+   |         ^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "78aab9469e8221474950f1e546007eb085b4776d", "filename": "tests/ui/rfc-2632-const-trait-impl/std-impl-gate.gated.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.gated.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,9 @@\n+error[E0635]: unknown feature `const_default_impls`\n+  --> $DIR/std-impl-gate.rs:6:46\n+   |\n+LL | #![cfg_attr(gated, feature(const_trait_impl, const_default_impls))]\n+   |                                              ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0635`."}, {"sha": "e9e5e0235df3377a46440e72e4c548168e8b6c7a", "filename": "tests/ui/rfc-2632-const-trait-impl/std-impl-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fstd-impl-gate.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,7 +1,7 @@\n // This tests feature gates for const impls in the standard library.\n \n // revisions: stock gated\n-//[gated] run-pass\n+//[gated] known-bug: #110395\n \n #![cfg_attr(gated, feature(const_trait_impl, const_default_impls))]\n "}, {"sha": "8d56295e738370e554972ec28fbfb28ff4d32690", "filename": "tests/ui/rfc-2632-const-trait-impl/trait-default-body-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// known-bug: #110395\n \n #![feature(staged_api)]\n #![feature(const_trait_impl)]"}, {"sha": "35dc1ca129b12e3844714c76e41f36ae4376d71f", "filename": "tests/ui/rfc-2632-const-trait-impl/trait-default-body-stability.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-default-body-stability.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,20 @@\n+error: const `impl` for trait `Try` which is not marked with `#[const_trait]`\n+  --> $DIR/trait-default-body-stability.rs:18:12\n+   |\n+LL | impl const Try for T {\n+   |            ^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: const `impl` for trait `FromResidual` which is not marked with `#[const_trait]`\n+  --> $DIR/trait-default-body-stability.rs:33:12\n+   |\n+LL | impl const FromResidual for T {\n+   |            ^^^^^^^^^^^^\n+   |\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b1ec58c3df31b0e45b4ab97e4737f71edd28adc3", "filename": "tests/ui/specialization/const_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fspecialization%2Fconst_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fspecialization%2Fconst_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fconst_trait_impl.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -1,4 +1,5 @@\n-// check-pass\n+// known-bug: #110395\n+\n #![feature(const_trait_impl, min_specialization, rustc_attrs)]\n \n #[rustc_specialization_trait]"}, {"sha": "d13cd8f55553d32f4b03aa62be11a164fae18ba6", "filename": "tests/ui/specialization/const_trait_impl.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fspecialization%2Fconst_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fspecialization%2Fconst_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fconst_trait_impl.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -0,0 +1,20 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const_trait_impl.rs:34:16\n+   |\n+LL | impl<T: ~const Default> const A for T {\n+   |                ^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const_trait_impl.rs:40:16\n+   |\n+LL | impl<T: ~const Default + ~const Sup> const A for T {\n+   |                ^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/const_trait_impl.rs:46:16\n+   |\n+LL | impl<T: ~const Default + ~const Sub> const A for T {\n+   |                ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c479326f935343163db2280911f19f3435212b2d", "filename": "tests/ui/suggestions/issue-109436.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `Foo: Into<_>` is not satisfied\n   --> $DIR/issue-109436.rs:12:22\n    |\n LL |     let b: Bar = foo.into();\n-   |                      ^^^^ the trait `~const Into<_>` is not implemented for `Foo`\n+   |                      ^^^^ the trait `Into<_>` is not implemented for `Foo`\n    |\n    = note: required for `Foo` to implement `Into<Bar>`\n help: consider borrowing here"}, {"sha": "46aed0f603e870249d613d6db9edbcdc0131ace6", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -227,6 +227,4 @@ fn evens_squared(n: usize) -> _ {\n }\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-//~^ ERROR the trait bound\n-//~| ERROR the trait bound\n-//~| ERROR the placeholder\n+//~^ ERROR the placeholder"}, {"sha": "bc02547c65eb8d89f4954ea75a31166f7d5de7b1", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c6ddc036b13cc9fa06e437295476231a7c11435/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=4c6ddc036b13cc9fa06e437295476231a7c11435", "patch": "@@ -437,37 +437,17 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n-error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n-  --> $DIR/typeck_type_placeholder_item.rs:229:22\n-   |\n-LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n-   |\n-   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n-note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n-  --> $DIR/typeck_type_placeholder_item.rs:229:14\n-   |\n-LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |              ^^^^^^^\n-\n-error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n-  --> $DIR/typeck_type_placeholder_item.rs:229:45\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:229:10\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |                                             ^^^ `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>` is not an iterator\n+   |          ^ not allowed in type signatures\n    |\n-   = help: the trait `~const Iterator` is not implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`\n-note: the trait `Iterator` is implemented for `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>`, but that implementation is not `const`\n+note: however, the inferred type `Map<Filter<Range<i32>, [closure@typeck_type_placeholder_item.rs:229:29]>, [closure@typeck_type_placeholder_item.rs:229:49]>` cannot be named\n   --> $DIR/typeck_type_placeholder_item.rs:229:14\n    |\n LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n-  --> $DIR/typeck_type_placeholder_item.rs:229:10\n-   |\n-LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n-   |          ^ not allowed in type signatures\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n@@ -677,7 +657,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 73 previous errors\n+error: aborting due to 71 previous errors\n \n-Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n+Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}