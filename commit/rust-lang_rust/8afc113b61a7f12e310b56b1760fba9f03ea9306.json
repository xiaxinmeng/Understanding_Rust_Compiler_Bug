{"sha": "8afc113b61a7f12e310b56b1760fba9f03ea9306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmMxMTNiNjFhN2YxMmUzMTBiNTZiMTc2MGZiYTlmMDNlYTkzMDY=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-06-22T21:00:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:56Z"}, "message": "std: wire-up low-level bindings to libuv's uv_getaddrinfo API and friends", "tree": {"sha": "6493e52423d65071a49fcc036d73c8e61fa66bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6493e52423d65071a49fcc036d73c8e61fa66bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afc113b61a7f12e310b56b1760fba9f03ea9306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afc113b61a7f12e310b56b1760fba9f03ea9306", "html_url": "https://github.com/rust-lang/rust/commit/8afc113b61a7f12e310b56b1760fba9f03ea9306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afc113b61a7f12e310b56b1760fba9f03ea9306/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237589b3c0cea40ca23a7a913f80628f0e38afa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/237589b3c0cea40ca23a7a913f80628f0e38afa8", "html_url": "https://github.com/rust-lang/rust/commit/237589b3c0cea40ca23a7a913f80628f0e38afa8"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "e645050828ba804168f65cb7c7fabb5f19fb3500", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8afc113b61a7f12e310b56b1760fba9f03ea9306/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afc113b61a7f12e310b56b1760fba9f03ea9306/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=8afc113b61a7f12e310b56b1760fba9f03ea9306", "patch": "@@ -561,14 +561,18 @@ native mod rustrt {\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> libc::c_int;\n \n     fn rust_uv_getaddrinfo(loop_ptr: *libc::c_void,\n-                           handle: *uv_getaddrinfo_t, cb: *u8,\n+                           handle: *uv_getaddrinfo_t,\n+                           cb: *u8,\n                            node_name_ptr: *u8,\n                            service_name_ptr: *u8,\n                            // should probably only pass ptr::null()\n-                           hints: *addrinfo)\n-        -> libc::c_int;\n+                           hints: *addrinfo) -> libc::c_int;\n \n     // data accessors/helpers for rust-mapped uv structs\n+    fn rust_uv_is_ipv4_addrinfo(input: *addrinfo) -> bool;\n+    fn rust_uv_get_next_addrinfo(input: *addrinfo) -> *addrinfo;\n+    fn rust_uv_addrinfo_as_sockaddr_in(input: *addrinfo) -> *sockaddr_in;\n+    fn rust_uv_addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6;\n     fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n     fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n     fn rust_uv_get_stream_handle_from_connect_req(\n@@ -793,6 +797,19 @@ unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: uint,\n unsafe fn timer_stop(timer_ptr: *uv_timer_t) -> libc::c_int {\n     ret rustrt::rust_uv_timer_stop(timer_ptr);\n }\n+unsafe fn getaddrinfo(loop_ptr: *libc::c_void,\n+                           handle: *uv_getaddrinfo_t,\n+                           cb: *u8,\n+                           node_name_ptr: *u8,\n+                           service_name_ptr: *u8,\n+                           hints: *addrinfo) -> libc::c_int {\n+    rustrt::rust_uv_getaddrinfo(loop_ptr,\n+                           handle,\n+                           cb,\n+                           node_name_ptr,\n+                           service_name_ptr,\n+                           hints)\n+}\n \n // libuv struct initializers\n unsafe fn tcp_t() -> uv_tcp_t {\n@@ -888,6 +905,19 @@ type uv_err_data = {\n     err_msg: str\n };\n \n+unsafe fn is_ipv4_addrinfo(input: *addrinfo) -> bool {\n+    rustrt::rust_uv_is_ipv4_addrinfo(input)\n+}\n+unsafe fn get_next_addrinfo(input: *addrinfo) -> *addrinfo {\n+    rustrt::rust_uv_get_next_addrinfo(input)\n+}\n+unsafe fn addrinfo_as_sockaddr_in(input: *addrinfo) -> *sockaddr_in {\n+    rustrt::rust_uv_addrinfo_as_sockaddr_in(input)\n+}\n+unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n+    rustrt::rust_uv_addrinfo_as_sockaddr_in6(input)\n+}\n+\n #[cfg(test)]\n mod test {\n     enum tcp_read_data {"}]}