{"sha": "972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmUxZjRiOGNhMzExOGUzNThiYTdiYjkxZDRjMGNmZDRmYzEwY2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-09T12:43:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-09T12:43:48Z"}, "message": "Merge #8445\n\n8445: `hir_ty` cleanup r=flodiebold a=flodiebold\n\nMove lots of things around within `hir_ty`. Most notably, all the Chalk-related stuff moves from within `traits/` to the top-level, since Chalk isn't purely a \"traits thing\" anymore.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "9b05cd514d183b04e40554db9624441935cb7f12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b05cd514d183b04e40554db9624441935cb7f12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcEwECRBK7hj4Ov3rIwAAdHIIADaC/QirGa4dKgur8mRJBvt4\nOAcpYzUnVoogMMwXQ4kxp5lGffl8ZFP7FSPBHP8Et7lQw5NU/tYS0UGRtPNOiFlH\nIEzT9NALnxaHOGXlX8ShYf6xenpJ4wJkxodY7d+FIgAapEuZWRseL1Aam+SvjgB/\nePIPwuE+VRvVY2ZqSXw2O7mizis6pEzFOenkjX5Mx1pLUQT6Y+MuDJwQwh/GuAHX\nDLwcO4YvEFdv5nCMY0ZaDi7IEQ16l7NVUnuKCSnuQl2BS3SE8VKH6J1v6w546LYU\n2EgxZkXyhUTKtDqtPmGbuuePKzaHBSG8aTirllWvb1iMV9FM8zV6BY2seU3bAc4=\n=F+0O\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b05cd514d183b04e40554db9624441935cb7f12\nparent a6b65cf5169deb6c7b2c02f50e59234c0924b429\nparent fbe98047d419ade6c87ccf432eb9534393d20020\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617972228 +0000\ncommitter GitHub <noreply@github.com> 1617972228 +0000\n\nMerge #8445\n\n8445: `hir_ty` cleanup r=flodiebold a=flodiebold\n\nMove lots of things around within `hir_ty`. Most notably, all the Chalk-related stuff moves from within `traits/` to the top-level, since Chalk isn't purely a \"traits thing\" anymore.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "html_url": "https://github.com/rust-lang/rust/commit/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b65cf5169deb6c7b2c02f50e59234c0924b429", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b65cf5169deb6c7b2c02f50e59234c0924b429", "html_url": "https://github.com/rust-lang/rust/commit/a6b65cf5169deb6c7b2c02f50e59234c0924b429"}, {"sha": "fbe98047d419ade6c87ccf432eb9534393d20020", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe98047d419ade6c87ccf432eb9534393d20020", "html_url": "https://github.com/rust-lang/rust/commit/fbe98047d419ade6c87ccf432eb9534393d20020"}], "stats": {"total": 716, "additions": 355, "deletions": 361}, "files": [{"sha": "f27dee3fdedf42c343b4228b3caf294008fcf88c", "filename": "crates/hir_ty/src/chalk_cast.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6b65cf5169deb6c7b2c02f50e59234c0924b429/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b65cf5169deb6c7b2c02f50e59234c0924b429/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs?ref=a6b65cf5169deb6c7b2c02f50e59234c0924b429", "patch": "@@ -1,16 +0,0 @@\n-//! Implementations of the Chalk `Cast` trait for our types.\n-\n-use chalk_ir::interner::HasInterner;\n-\n-use crate::{CallableSig, ReturnTypeImplTraits};\n-\n-macro_rules! has_interner {\n-    ($t:ty) => {\n-        impl HasInterner for $t {\n-            type Interner = crate::Interner;\n-        }\n-    };\n-}\n-\n-has_interner!(CallableSig);\n-has_interner!(ReturnTypeImplTraits);"}, {"sha": "8f054d06bf5e6440fadd36bbbedcc75c4c060c77", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "renamed", "additions": 87, "deletions": 63, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,50 +1,47 @@\n-//! Conversion code from/to Chalk.\n+//! The implementation of `RustIrDatabase` for Chalk, which provides information\n+//! about the code that Chalk needs.\n use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{fold::shift::Shift, CanonicalVarKinds};\n+use chalk_ir::{cast::Cast, fold::shift::Shift, CanonicalVarKinds};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n-use base_db::{salsa::InternKey, CrateId};\n+use base_db::CrateId;\n use hir_def::{\n     lang_item::{lang_attr, LangItemTarget},\n-    AssocContainerId, AssocItemId, HasModule, Lookup, TypeAliasId,\n+    AssocContainerId, AssocItemId, GenericDefId, HasModule, Lookup, TypeAliasId,\n };\n use hir_expand::name::name;\n \n-use super::ChalkContext;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    from_assoc_type_id, make_only_type_binders,\n+    from_assoc_type_id, from_chalk_trait_id, make_only_type_binders,\n+    mapping::{from_chalk, ToChalk, TypeAliasAsValue},\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n+    traits::ChalkContext,\n     utils::generics,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n-    TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n+    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, Interner, ProjectionTy,\n+    ProjectionTyExt, QuantifiedWhereClause, Substitution, TraitRef, TraitRefExt, Ty, TyBuilder,\n+    TyExt, TyKind, WhereClause,\n };\n-use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, TypeAliasAsValue};\n \n-pub use self::interner::Interner;\n-pub(crate) use self::interner::*;\n-\n-pub(super) mod tls;\n-mod interner;\n-mod mapping;\n-\n-pub(crate) trait ToChalk {\n-    type Chalk;\n-    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk;\n-    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self;\n-}\n-\n-pub(crate) fn from_chalk<T, ChalkT>(db: &dyn HirDatabase, chalk: ChalkT) -> T\n-where\n-    T: ToChalk<Chalk = ChalkT>,\n-{\n-    T::from_chalk(db, chalk)\n-}\n+pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n+pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n+pub(crate) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n+pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n+pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n+\n+pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n+pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n+pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n+pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n+pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n+pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n+pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     fn associated_ty_data(&self, id: AssocTypeId) -> Arc<AssociatedTyDatum> {\n@@ -82,7 +79,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         binders: &CanonicalVarKinds<Interner>,\n     ) -> Vec<ImplId> {\n         debug!(\"impls_for_trait {:?}\", trait_id);\n-        let trait_: hir_def::TraitId = from_chalk(self.db, trait_id);\n+        let trait_: hir_def::TraitId = from_chalk_trait_id(trait_id);\n \n         let ty: Ty = parameters[0].assert_ty_ref(&Interner).clone();\n \n@@ -164,7 +161,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             Some(LangItemTarget::TraitId(trait_)) => trait_,\n             _ => return None,\n         };\n-        Some(trait_.to_chalk(self.db))\n+        Some(to_chalk_trait_id(trait_))\n     }\n \n     fn program_clauses_for_env(\n@@ -311,7 +308,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n \n     fn trait_name(&self, trait_id: chalk_ir::TraitId<Interner>) -> String {\n-        let id = from_chalk(self.db, trait_id);\n+        let id = from_chalk_trait_id(trait_id);\n         self.db.trait_data(id).name.to_string()\n     }\n     fn adt_name(&self, chalk_ir::AdtId(adt_id): AdtId) -> String {\n@@ -416,7 +413,7 @@ pub(crate) fn trait_datum_query(\n     trait_id: TraitId,\n ) -> Arc<TraitDatum> {\n     debug!(\"trait_datum {:?}\", trait_id);\n-    let trait_: hir_def::TraitId = from_chalk(db, trait_id);\n+    let trait_ = from_chalk_trait_id(trait_id);\n     let trait_data = db.trait_data(trait_);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_data.name);\n     let generic_params = generics(db.upcast(), trait_.into());\n@@ -679,38 +676,65 @@ pub(crate) fn adt_variance_query(\n     )\n }\n \n-impl From<FnDefId> for crate::db::InternedCallableDefId {\n-    fn from(fn_def_id: FnDefId) -> Self {\n-        InternKey::from_intern_id(fn_def_id.0)\n-    }\n-}\n-\n-impl From<crate::db::InternedCallableDefId> for FnDefId {\n-    fn from(callable_def_id: crate::db::InternedCallableDefId) -> Self {\n-        chalk_ir::FnDefId(callable_def_id.as_intern_id())\n-    }\n-}\n-\n-impl From<OpaqueTyId> for crate::db::InternedOpaqueTyId {\n-    fn from(id: OpaqueTyId) -> Self {\n-        InternKey::from_intern_id(id.0)\n-    }\n-}\n-\n-impl From<crate::db::InternedOpaqueTyId> for OpaqueTyId {\n-    fn from(id: crate::db::InternedOpaqueTyId) -> Self {\n-        chalk_ir::OpaqueTyId(id.as_intern_id())\n-    }\n-}\n-\n-impl From<chalk_ir::ClosureId<Interner>> for crate::db::InternedClosureId {\n-    fn from(id: chalk_ir::ClosureId<Interner>) -> Self {\n-        Self::from_intern_id(id.0)\n-    }\n+pub(super) fn convert_where_clauses(\n+    db: &dyn HirDatabase,\n+    def: GenericDefId,\n+    substs: &Substitution,\n+) -> Vec<chalk_ir::QuantifiedWhereClause<Interner>> {\n+    let generic_predicates = db.generic_predicates(def);\n+    let mut result = Vec::with_capacity(generic_predicates.len());\n+    for pred in generic_predicates.iter() {\n+        result.push(pred.clone().substitute(&Interner, substs));\n+    }\n+    result\n }\n \n-impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n-    fn from(id: crate::db::InternedClosureId) -> Self {\n-        chalk_ir::ClosureId(id.as_intern_id())\n+pub(super) fn generic_predicate_to_inline_bound(\n+    db: &dyn HirDatabase,\n+    pred: &QuantifiedWhereClause,\n+    self_ty: &Ty,\n+) -> Option<chalk_ir::Binders<rust_ir::InlineBound<Interner>>> {\n+    // An InlineBound is like a GenericPredicate, except the self type is left out.\n+    // We don't have a special type for this, but Chalk does.\n+    let self_ty_shifted_in = self_ty.clone().shifted_in_from(&Interner, DebruijnIndex::ONE);\n+    let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n+    match pred {\n+        WhereClause::Implemented(trait_ref) => {\n+            if trait_ref.self_type_parameter(&Interner) != self_ty_shifted_in {\n+                // we can only convert predicates back to type bounds if they\n+                // have the expected self type\n+                return None;\n+            }\n+            let args_no_self = trait_ref.substitution.as_slice(&Interner)[1..]\n+                .iter()\n+                .map(|ty| ty.clone().cast(&Interner))\n+                .collect();\n+            let trait_bound = rust_ir::TraitBound { trait_id: trait_ref.trait_id, args_no_self };\n+            Some(chalk_ir::Binders::new(binders, rust_ir::InlineBound::TraitBound(trait_bound)))\n+        }\n+        WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n+            if projection_ty.self_type_parameter(&Interner) != self_ty_shifted_in {\n+                return None;\n+            }\n+            let trait_ = projection_ty.trait_(db);\n+            let args_no_self = projection_ty.substitution.as_slice(&Interner)[1..]\n+                .iter()\n+                .map(|ty| ty.clone().cast(&Interner))\n+                .collect();\n+            let alias_eq_bound = rust_ir::AliasEqBound {\n+                value: ty.clone(),\n+                trait_bound: rust_ir::TraitBound {\n+                    trait_id: to_chalk_trait_id(trait_),\n+                    args_no_self,\n+                },\n+                associated_ty_id: projection_ty.associated_ty_id,\n+                parameters: Vec::new(), // FIXME we don't support generic associated types yet\n+            };\n+            Some(chalk_ir::Binders::new(\n+                binders,\n+                rust_ir::InlineBound::AliasEqBound(alias_eq_bound),\n+            ))\n+        }\n+        _ => None,\n     }\n }", "previous_filename": "crates/hir_ty/src/traits/chalk.rs"}, {"sha": "1690926ad3802ca3eebf4c543c66a2ecfebd5ece", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! The home of `HirDatabase`, which is the Salsa database containing all the\n+//! type inference-related queries.\n \n use std::sync::Arc;\n \n@@ -10,9 +11,9 @@ use hir_def::{\n use la_arena::ArenaMap;\n \n use crate::{\n+    chalk_db,\n     method_resolution::{InherentImpls, TraitImpls},\n-    traits::chalk,\n-    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, PolyFnSig,\n+    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, Interner, PolyFnSig,\n     QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -94,33 +95,38 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n \n-    #[salsa::invoke(chalk::associated_ty_data_query)]\n-    fn associated_ty_data(&self, id: chalk::AssocTypeId) -> Arc<chalk::AssociatedTyDatum>;\n+    #[salsa::invoke(chalk_db::associated_ty_data_query)]\n+    fn associated_ty_data(&self, id: chalk_db::AssocTypeId) -> Arc<chalk_db::AssociatedTyDatum>;\n \n-    #[salsa::invoke(chalk::trait_datum_query)]\n-    fn trait_datum(&self, krate: CrateId, trait_id: chalk::TraitId) -> Arc<chalk::TraitDatum>;\n+    #[salsa::invoke(chalk_db::trait_datum_query)]\n+    fn trait_datum(&self, krate: CrateId, trait_id: chalk_db::TraitId)\n+        -> Arc<chalk_db::TraitDatum>;\n \n-    #[salsa::invoke(chalk::struct_datum_query)]\n-    fn struct_datum(&self, krate: CrateId, struct_id: chalk::AdtId) -> Arc<chalk::StructDatum>;\n+    #[salsa::invoke(chalk_db::struct_datum_query)]\n+    fn struct_datum(\n+        &self,\n+        krate: CrateId,\n+        struct_id: chalk_db::AdtId,\n+    ) -> Arc<chalk_db::StructDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::impl_datum_query)]\n-    fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n+    #[salsa::invoke(chalk_db::impl_datum_query)]\n+    fn impl_datum(&self, krate: CrateId, impl_id: chalk_db::ImplId) -> Arc<chalk_db::ImplDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n-    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk::FnDefDatum>;\n+    #[salsa::invoke(chalk_db::fn_def_datum_query)]\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk_db::FnDefDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::fn_def_variance_query)]\n-    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk::Variances;\n+    #[salsa::invoke(chalk_db::fn_def_variance_query)]\n+    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk_db::Variances;\n \n-    #[salsa::invoke(crate::traits::chalk::adt_variance_query)]\n-    fn adt_variance(&self, krate: CrateId, adt_id: chalk::AdtId) -> chalk::Variances;\n+    #[salsa::invoke(chalk_db::adt_variance_query)]\n+    fn adt_variance(&self, krate: CrateId, adt_id: chalk_db::AdtId) -> chalk_db::Variances;\n \n-    #[salsa::invoke(crate::traits::chalk::associated_ty_value_query)]\n+    #[salsa::invoke(chalk_db::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,\n         krate: CrateId,\n-        id: chalk::AssociatedTyValueId,\n-    ) -> Arc<chalk::AssociatedTyValue>;\n+        id: chalk_db::AssociatedTyValueId,\n+    ) -> Arc<chalk_db::AssociatedTyValue>;\n \n     #[salsa::invoke(crate::traits::trait_solve_query)]\n     fn trait_solve(\n@@ -129,12 +135,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         goal: crate::Canonical<crate::InEnvironment<crate::DomainGoal>>,\n     ) -> Option<crate::Solution>;\n \n-    #[salsa::invoke(crate::traits::chalk::program_clauses_for_chalk_env_query)]\n+    #[salsa::invoke(chalk_db::program_clauses_for_chalk_env_query)]\n     fn program_clauses_for_chalk_env(\n         &self,\n         krate: CrateId,\n-        env: chalk_ir::Environment<chalk::Interner>,\n-    ) -> chalk_ir::ProgramClauses<chalk::Interner>;\n+        env: chalk_ir::Environment<Interner>,\n+    ) -> chalk_ir::ProgramClauses<Interner>;\n }\n \n fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "84fc8ce14de4cb17c6056f4146af4c716463fc17", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Type inference-based diagnostics.\n mod expr;\n mod match_check;\n mod unsafe_check;"}, {"sha": "e7c9dabc222887858465ad21a5ca4ba4751882ca", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,4 +1,6 @@\n-//! FIXME: write short doc here\n+//! The `HirDisplay` trait, which serves two purposes: Turning various bits from\n+//! HIR back into source code, and just displaying them for debugging/testing\n+//! purposes.\n \n use std::{\n     array,\n@@ -20,11 +22,11 @@ use hir_expand::name::Name;\n \n use crate::{\n     const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n-    from_placeholder_idx, lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id,\n-    traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n-    CallableSig, Const, ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime,\n-    LifetimeData, LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt,\n-    QuantifiedWhereClause, Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n+    from_placeholder_idx, lt_from_placeholder_idx, mapping::from_chalk, primitive, subst_prefix,\n+    to_assoc_type_id, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId, CallableSig, Const,\n+    ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, LifetimeData,\n+    LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt, QuantifiedWhereClause,\n+    Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n };\n \n pub struct HirFormatter<'a> {"}, {"sha": "50497eecb0255b891dfc9db3e2c7c3906d2583af", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -17,10 +17,11 @@ use syntax::ast::RangeOp;\n use crate::{\n     autoderef, dummy_usize_const,\n     lower::lower_to_chalk_mutability,\n+    mapping::from_chalk,\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n-    traits::{chalk::from_chalk, FnTrait},\n+    traits::FnTrait,\n     utils::{generics, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,"}, {"sha": "a1656115d65dd424eba927b32766db96190b1af4", "filename": "crates/hir_ty/src/interner.rs", "status": "renamed", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,8 +1,7 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use super::tls;\n-use crate::GenericArg;\n+use crate::{chalk_db, tls, GenericArg};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n@@ -15,21 +14,6 @@ use std::{fmt, sync::Arc};\n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Interner;\n \n-pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n-pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n-pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n-pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n-pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n-pub(crate) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n-pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n-pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n-pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n-pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n-pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n-pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n-pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n-pub(crate) type Variances = chalk_ir::Variances<Interner>;\n-\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct InternedWrapper<T>(T);\n \n@@ -76,15 +60,24 @@ impl chalk_ir::interner::Interner for Interner {\n     type Identifier = TypeAliasId;\n     type FnAbi = ();\n \n-    fn debug_adt_id(type_kind_id: AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_adt_id(\n+        type_kind_id: chalk_db::AdtId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_trait_id(type_kind_id: TraitId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_trait_id(\n+        type_kind_id: chalk_db::TraitId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_trait_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_assoc_type_id(id: AssocTypeId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_assoc_type_id(\n+        id: chalk_db::AssocTypeId,\n+        fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_assoc_type_id(id, fmt)))\n     }\n \n@@ -419,3 +412,12 @@ impl chalk_ir::interner::Interner for Interner {\n impl chalk_ir::interner::HasInterner for Interner {\n     type Interner = Self;\n }\n+\n+#[macro_export]\n+macro_rules! has_interner {\n+    ($t:ty) => {\n+        impl HasInterner for $t {\n+            type Interner = crate::Interner;\n+        }\n+    };\n+}", "previous_filename": "crates/hir_ty/src/traits/chalk/interner.rs"}, {"sha": "113234fa48c2516ba440344a44a78e8585e8bfbf", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 31, "deletions": 77, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -7,21 +7,23 @@ macro_rules! eprintln {\n }\n \n mod autoderef;\n-pub mod primitive;\n-pub mod traits;\n-pub mod method_resolution;\n-mod op;\n-mod lower;\n-pub(crate) mod infer;\n-pub(crate) mod utils;\n-mod chalk_cast;\n-mod chalk_ext;\n mod builder;\n+mod chalk_db;\n+mod chalk_ext;\n+mod infer;\n+mod interner;\n+mod lower;\n+mod mapping;\n+mod op;\n+mod tls;\n+mod utils;\n mod walk;\n-\n-pub mod display;\n pub mod db;\n pub mod diagnostics;\n+pub mod display;\n+pub mod method_resolution;\n+pub mod primitive;\n+pub mod traits;\n \n #[cfg(test)]\n mod tests;\n@@ -30,28 +32,30 @@ mod test_db;\n \n use std::sync::Arc;\n \n-use base_db::salsa;\n use chalk_ir::{\n     fold::{Fold, Shift},\n     interner::HasInterner,\n     UintTy,\n };\n-use hir_def::{\n-    expr::ExprId, type_ref::Rawness, ConstParamId, LifetimeParamId, TraitId, TypeAliasId,\n-    TypeParamId,\n-};\n+use hir_def::{expr::ExprId, type_ref::Rawness, TypeParamId};\n \n use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;\n pub use chalk_ext::*;\n pub use infer::{could_unify, InferenceResult};\n+pub use interner::Interner;\n pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::{chalk::Interner, TraitEnvironment};\n+pub use mapping::{\n+    const_from_placeholder_idx, from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id,\n+    from_placeholder_idx, lt_from_placeholder_idx, to_assoc_type_id, to_chalk_trait_id,\n+    to_foreign_def_id, to_placeholder_idx,\n+};\n+pub use traits::TraitEnvironment;\n pub use walk::TypeWalk;\n \n pub use chalk_ir::{\n@@ -94,6 +98,10 @@ pub type ConstValue = chalk_ir::ConstValue<Interner>;\n pub type ConcreteConst = chalk_ir::ConcreteConst<Interner>;\n \n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n+pub type TraitRef = chalk_ir::TraitRef<Interner>;\n+pub type QuantifiedWhereClause = Binders<WhereClause>;\n+pub type QuantifiedWhereClauses = chalk_ir::QuantifiedWhereClauses<Interner>;\n+pub type Canonical<T> = chalk_ir::Canonical<T>;\n \n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n@@ -118,14 +126,14 @@ pub fn param_idx(db: &dyn HirDatabase, id: TypeParamId) -> Option<usize> {\n     generics(db.upcast(), id.parent).param_idx(id)\n }\n \n-pub fn wrap_empty_binders<T>(value: T) -> Binders<T>\n+pub(crate) fn wrap_empty_binders<T>(value: T) -> Binders<T>\n where\n     T: Fold<Interner, Result = T> + HasInterner<Interner = Interner>,\n {\n     Binders::empty(&Interner, value.shifted_in_from(&Interner, DebruijnIndex::ONE))\n }\n \n-pub fn make_only_type_binders<T: HasInterner<Interner = Interner>>(\n+pub(crate) fn make_only_type_binders<T: HasInterner<Interner = Interner>>(\n     num_vars: usize,\n     value: T,\n ) -> Binders<T> {\n@@ -153,14 +161,6 @@ pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n     Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n }\n \n-pub type TraitRef = chalk_ir::TraitRef<Interner>;\n-\n-pub type QuantifiedWhereClause = Binders<WhereClause>;\n-\n-pub type QuantifiedWhereClauses = chalk_ir::QuantifiedWhereClauses<Interner>;\n-\n-pub type Canonical<T> = chalk_ir::Canonical<T>;\n-\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type.\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -169,6 +169,8 @@ pub struct CallableSig {\n     is_varargs: bool,\n }\n \n+has_interner!(CallableSig);\n+\n /// A polymorphic function signature.\n pub type PolyFnSig = Binders<CallableSig>;\n \n@@ -232,61 +234,13 @@ pub struct ReturnTypeImplTraits {\n     pub(crate) impl_traits: Vec<ReturnTypeImplTrait>,\n }\n \n+has_interner!(ReturnTypeImplTraits);\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<QuantifiedWhereClause>>,\n }\n \n-pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n-    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n-pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n-    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n-pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_type_param_id(interned_id)\n-}\n-\n-pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n-    let interned_id = db.intern_type_param_id(id);\n-    PlaceholderIndex {\n-        ui: chalk_ir::UniverseIndex::ROOT,\n-        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n-    }\n-}\n-\n-pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> LifetimeParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_lifetime_param_id(interned_id)\n-}\n-\n-pub fn const_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> ConstParamId {\n-    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n-    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n-    db.lookup_intern_const_param_id(interned_id)\n-}\n-\n-pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n-    chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n-}\n-\n-pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n-    salsa::InternKey::from_intern_id(id.0)\n-}\n-\n pub fn static_lifetime() -> Lifetime {\n     LifetimeData::Static.intern(&Interner)\n }"}, {"sha": "a035686bc9e1c80f67dcf78e4be3cd0f109ccd6f", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -27,13 +27,14 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    dummy_usize_const, static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n-    traits::chalk::{Interner, ToChalk},\n+    dummy_usize_const,\n+    mapping::ToChalk,\n+    static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n+    FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n     QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n     TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };"}, {"sha": "5e86fafe5d6b9f63ba4b0e193acdc04f14f5b24f", "filename": "crates/hir_ty/src/mapping.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmapping.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -0,0 +1,154 @@\n+//! This module contains the implementations of the `ToChalk` trait, which\n+//! handles conversion between our data types and their corresponding types in\n+//! Chalk (in both directions); plus some helper functions for more specialized\n+//! conversions.\n+\n+use chalk_solve::rust_ir;\n+\n+use base_db::salsa::{self, InternKey};\n+use hir_def::{ConstParamId, LifetimeParamId, TraitId, TypeAliasId, TypeParamId};\n+\n+use crate::{\n+    chalk_db, db::HirDatabase, AssocTypeId, CallableDefId, ChalkTraitId, FnDefId, ForeignDefId,\n+    Interner, OpaqueTyId, PlaceholderIndex,\n+};\n+\n+pub(crate) trait ToChalk {\n+    type Chalk;\n+    fn to_chalk(self, db: &dyn HirDatabase) -> Self::Chalk;\n+    fn from_chalk(db: &dyn HirDatabase, chalk: Self::Chalk) -> Self;\n+}\n+\n+pub(crate) fn from_chalk<T, ChalkT>(db: &dyn HirDatabase, chalk: ChalkT) -> T\n+where\n+    T: ToChalk<Chalk = ChalkT>,\n+{\n+    T::from_chalk(db, chalk)\n+}\n+\n+impl ToChalk for hir_def::ImplId {\n+    type Chalk = chalk_db::ImplId;\n+\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::ImplId {\n+        chalk_ir::ImplId(self.as_intern_id())\n+    }\n+\n+    fn from_chalk(_db: &dyn HirDatabase, impl_id: chalk_db::ImplId) -> hir_def::ImplId {\n+        InternKey::from_intern_id(impl_id.0)\n+    }\n+}\n+\n+impl ToChalk for CallableDefId {\n+    type Chalk = FnDefId;\n+\n+    fn to_chalk(self, db: &dyn HirDatabase) -> FnDefId {\n+        db.intern_callable_def(self).into()\n+    }\n+\n+    fn from_chalk(db: &dyn HirDatabase, fn_def_id: FnDefId) -> CallableDefId {\n+        db.lookup_intern_callable_def(fn_def_id.into())\n+    }\n+}\n+\n+pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n+\n+impl ToChalk for TypeAliasAsValue {\n+    type Chalk = chalk_db::AssociatedTyValueId;\n+\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::AssociatedTyValueId {\n+        rust_ir::AssociatedTyValueId(self.0.as_intern_id())\n+    }\n+\n+    fn from_chalk(\n+        _db: &dyn HirDatabase,\n+        assoc_ty_value_id: chalk_db::AssociatedTyValueId,\n+    ) -> TypeAliasAsValue {\n+        TypeAliasAsValue(TypeAliasId::from_intern_id(assoc_ty_value_id.0))\n+    }\n+}\n+\n+impl From<FnDefId> for crate::db::InternedCallableDefId {\n+    fn from(fn_def_id: FnDefId) -> Self {\n+        InternKey::from_intern_id(fn_def_id.0)\n+    }\n+}\n+\n+impl From<crate::db::InternedCallableDefId> for FnDefId {\n+    fn from(callable_def_id: crate::db::InternedCallableDefId) -> Self {\n+        chalk_ir::FnDefId(callable_def_id.as_intern_id())\n+    }\n+}\n+\n+impl From<OpaqueTyId> for crate::db::InternedOpaqueTyId {\n+    fn from(id: OpaqueTyId) -> Self {\n+        InternKey::from_intern_id(id.0)\n+    }\n+}\n+\n+impl From<crate::db::InternedOpaqueTyId> for OpaqueTyId {\n+    fn from(id: crate::db::InternedOpaqueTyId) -> Self {\n+        chalk_ir::OpaqueTyId(id.as_intern_id())\n+    }\n+}\n+\n+impl From<chalk_ir::ClosureId<Interner>> for crate::db::InternedClosureId {\n+    fn from(id: chalk_ir::ClosureId<Interner>) -> Self {\n+        Self::from_intern_id(id.0)\n+    }\n+}\n+\n+impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n+    fn from(id: crate::db::InternedClosureId) -> Self {\n+        chalk_ir::ClosureId(id.as_intern_id())\n+    }\n+}\n+\n+pub fn to_foreign_def_id(id: TypeAliasId) -> ForeignDefId {\n+    chalk_ir::ForeignDefId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_foreign_def_id(id: ForeignDefId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n+    chalk_ir::AssocTypeId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}\n+\n+pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_type_param_id(interned_id)\n+}\n+\n+pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n+    let interned_id = db.intern_type_param_id(id);\n+    PlaceholderIndex {\n+        ui: chalk_ir::UniverseIndex::ROOT,\n+        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n+    }\n+}\n+\n+pub fn lt_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> LifetimeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_lifetime_param_id(interned_id)\n+}\n+\n+pub fn const_from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> ConstParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_const_param_id(interned_id)\n+}\n+\n+pub fn to_chalk_trait_id(id: TraitId) -> ChalkTraitId {\n+    chalk_ir::TraitId(salsa::InternKey::as_intern_id(&id))\n+}\n+\n+pub fn from_chalk_trait_id(id: ChalkTraitId) -> TraitId {\n+    salsa::InternKey::from_intern_id(id.0)\n+}"}, {"sha": "d7f48c69a56ef2198e0a7cbe608b419fbece1f9e", "filename": "crates/hir_ty/src/primitive.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fprimitive.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,7 +1,4 @@\n-//! Defines primitive types, which have a couple of peculiarities:\n-//!\n-//! * during type inference, they can be uncertain (ie, `let x = 92;`)\n-//! * they don't belong to any particular crate.\n+//! A few helper functions for dealing with primitives.\n \n pub use chalk_ir::{FloatTy, IntTy, UintTy};\n pub use hir_def::builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint};"}, {"sha": "87c671a422cd743372714fc0db7e9eb433bbffba", "filename": "crates/hir_ty/src/tls.rs", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -4,8 +4,10 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n use itertools::Itertools;\n \n-use super::{from_chalk, Interner};\n-use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId};\n+use crate::{\n+    chalk_db, db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, mapping::from_chalk,\n+    CallableDefId, Interner,\n+};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n@@ -15,7 +17,7 @@ pub(crate) struct DebugContext<'a>(&'a dyn HirDatabase);\n impl DebugContext<'_> {\n     pub(crate) fn debug_struct_id(\n         &self,\n-        id: super::AdtId,\n+        id: chalk_db::AdtId,\n         f: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let name = match id.0 {\n@@ -28,17 +30,17 @@ impl DebugContext<'_> {\n \n     pub(crate) fn debug_trait_id(\n         &self,\n-        id: super::TraitId,\n+        id: chalk_db::TraitId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n-        let trait_: hir_def::TraitId = from_chalk(self.0, id);\n+        let trait_: hir_def::TraitId = from_chalk_trait_id(id);\n         let trait_data = self.0.trait_data(trait_);\n         write!(fmt, \"{}\", trait_data.name)\n     }\n \n     pub(crate) fn debug_assoc_type_id(\n         &self,\n-        id: super::AssocTypeId,\n+        id: chalk_db::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let type_alias: TypeAliasId = from_assoc_type_id(id);", "previous_filename": "crates/hir_ty/src/traits/chalk/tls.rs"}, {"sha": "9936d080338aac64a0cdb4f2120af4e3a1042e2a", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=972e1f4b8ca3118e358ba7bb91d4c0cfd4fc10ca", "patch": "@@ -1,28 +1,26 @@\n //! Trait solving using Chalk.\n+\n use std::env::var;\n \n-use base_db::CrateId;\n use chalk_ir::cast::Cast;\n use chalk_solve::{logging_db::LoggingRustIrDatabase, Solver};\n+\n+use base_db::CrateId;\n use hir_def::{lang_item::LangItemTarget, TraitId};\n use stdx::panic_context;\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n-    Solution, TraitRefExt, Ty, TyKind, WhereClause,\n+    Interner, Solution, TraitRefExt, Ty, TyKind, WhereClause,\n };\n \n-use self::chalk::Interner;\n-\n-pub(crate) mod chalk;\n-\n /// This controls how much 'time' we give the Chalk solver before giving up.\n const CHALK_SOLVER_FUEL: i32 = 100;\n \n #[derive(Debug, Copy, Clone)]\n-struct ChalkContext<'a> {\n-    db: &'a dyn HirDatabase,\n-    krate: CrateId,\n+pub(crate) struct ChalkContext<'a> {\n+    pub(crate) db: &'a dyn HirDatabase,\n+    pub(crate) krate: CrateId,\n }\n \n fn create_chalk_solver() -> chalk_recursive::RecursiveSolver<Interner> {\n@@ -148,7 +146,7 @@ fn solve(\n     // don't set the TLS for Chalk unless Chalk debugging is active, to make\n     // extra sure we only use it for debugging\n     let solution =\n-        if is_chalk_debug() { chalk::tls::set_current_program(db, solve) } else { solve() };\n+        if is_chalk_debug() { crate::tls::set_current_program(db, solve) } else { solve() };\n \n     solution\n }"}, {"sha": "e78581ea5b43cc1cef1655f6e9da65bd54e3169f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/a6b65cf5169deb6c7b2c02f50e59234c0924b429/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6b65cf5169deb6c7b2c02f50e59234c0924b429/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=a6b65cf5169deb6c7b2c02f50e59234c0924b429", "patch": "@@ -1,131 +0,0 @@\n-//! This module contains the implementations of the `ToChalk` trait, which\n-//! handles conversion between our data types and their corresponding types in\n-//! Chalk (in both directions); plus some helper functions for more specialized\n-//! conversions.\n-\n-use chalk_ir::cast::Cast;\n-use chalk_solve::rust_ir;\n-\n-use base_db::salsa::InternKey;\n-use hir_def::{GenericDefId, TypeAliasId};\n-\n-use crate::{\n-    db::HirDatabase, AliasTy, CallableDefId, ProjectionTyExt, QuantifiedWhereClause, Substitution,\n-    Ty, WhereClause,\n-};\n-\n-use super::interner::*;\n-use super::*;\n-\n-impl ToChalk for hir_def::TraitId {\n-    type Chalk = TraitId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> TraitId {\n-        chalk_ir::TraitId(self.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, trait_id: TraitId) -> hir_def::TraitId {\n-        InternKey::from_intern_id(trait_id.0)\n-    }\n-}\n-\n-impl ToChalk for hir_def::ImplId {\n-    type Chalk = ImplId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> ImplId {\n-        chalk_ir::ImplId(self.as_intern_id())\n-    }\n-\n-    fn from_chalk(_db: &dyn HirDatabase, impl_id: ImplId) -> hir_def::ImplId {\n-        InternKey::from_intern_id(impl_id.0)\n-    }\n-}\n-\n-impl ToChalk for CallableDefId {\n-    type Chalk = FnDefId;\n-\n-    fn to_chalk(self, db: &dyn HirDatabase) -> FnDefId {\n-        db.intern_callable_def(self).into()\n-    }\n-\n-    fn from_chalk(db: &dyn HirDatabase, fn_def_id: FnDefId) -> CallableDefId {\n-        db.lookup_intern_callable_def(fn_def_id.into())\n-    }\n-}\n-\n-pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n-\n-impl ToChalk for TypeAliasAsValue {\n-    type Chalk = AssociatedTyValueId;\n-\n-    fn to_chalk(self, _db: &dyn HirDatabase) -> AssociatedTyValueId {\n-        rust_ir::AssociatedTyValueId(self.0.as_intern_id())\n-    }\n-\n-    fn from_chalk(\n-        _db: &dyn HirDatabase,\n-        assoc_ty_value_id: AssociatedTyValueId,\n-    ) -> TypeAliasAsValue {\n-        TypeAliasAsValue(TypeAliasId::from_intern_id(assoc_ty_value_id.0))\n-    }\n-}\n-\n-pub(super) fn convert_where_clauses(\n-    db: &dyn HirDatabase,\n-    def: GenericDefId,\n-    substs: &Substitution,\n-) -> Vec<chalk_ir::QuantifiedWhereClause<Interner>> {\n-    let generic_predicates = db.generic_predicates(def);\n-    let mut result = Vec::with_capacity(generic_predicates.len());\n-    for pred in generic_predicates.iter() {\n-        result.push(pred.clone().substitute(&Interner, substs));\n-    }\n-    result\n-}\n-\n-pub(super) fn generic_predicate_to_inline_bound(\n-    db: &dyn HirDatabase,\n-    pred: &QuantifiedWhereClause,\n-    self_ty: &Ty,\n-) -> Option<chalk_ir::Binders<rust_ir::InlineBound<Interner>>> {\n-    // An InlineBound is like a GenericPredicate, except the self type is left out.\n-    // We don't have a special type for this, but Chalk does.\n-    let self_ty_shifted_in = self_ty.clone().shifted_in_from(&Interner, DebruijnIndex::ONE);\n-    let (pred, binders) = pred.as_ref().into_value_and_skipped_binders();\n-    match pred {\n-        WhereClause::Implemented(trait_ref) => {\n-            if trait_ref.self_type_parameter(&Interner) != self_ty_shifted_in {\n-                // we can only convert predicates back to type bounds if they\n-                // have the expected self type\n-                return None;\n-            }\n-            let args_no_self = trait_ref.substitution.as_slice(&Interner)[1..]\n-                .iter()\n-                .map(|ty| ty.clone().cast(&Interner))\n-                .collect();\n-            let trait_bound = rust_ir::TraitBound { trait_id: trait_ref.trait_id, args_no_self };\n-            Some(chalk_ir::Binders::new(binders, rust_ir::InlineBound::TraitBound(trait_bound)))\n-        }\n-        WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n-            if projection_ty.self_type_parameter(&Interner) != self_ty_shifted_in {\n-                return None;\n-            }\n-            let trait_ = projection_ty.trait_(db);\n-            let args_no_self = projection_ty.substitution.as_slice(&Interner)[1..]\n-                .iter()\n-                .map(|ty| ty.clone().cast(&Interner))\n-                .collect();\n-            let alias_eq_bound = rust_ir::AliasEqBound {\n-                value: ty.clone(),\n-                trait_bound: rust_ir::TraitBound { trait_id: trait_.to_chalk(db), args_no_self },\n-                associated_ty_id: projection_ty.associated_ty_id,\n-                parameters: Vec::new(), // FIXME we don't support generic associated types yet\n-            };\n-            Some(chalk_ir::Binders::new(\n-                binders,\n-                rust_ir::InlineBound::AliasEqBound(alias_eq_bound),\n-            ))\n-        }\n-        _ => None,\n-    }\n-}"}]}