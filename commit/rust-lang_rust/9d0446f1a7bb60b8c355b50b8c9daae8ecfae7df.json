{"sha": "9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMDQ0NmYxYTdiYjYwYjhjMzU1YjUwYjhjOWRhYWU4ZWNmYWU3ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-18T14:46:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-18T14:46:38Z"}, "message": "Auto merge of #83166 - cjgillot:defkey-vge, r=oli-obk\n\nIterate on DefId for variances and generics.\n\nSplit from #80347", "tree": {"sha": "f71bdfd1d325aacfde57e0baef2fd7a3cca34316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71bdfd1d325aacfde57e0baef2fd7a3cca34316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df", "html_url": "https://github.com/rust-lang/rust/commit/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0464f638af99a7c0876e9b8f96db5bbf917e3fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0464f638af99a7c0876e9b8f96db5bbf917e3fe2", "html_url": "https://github.com/rust-lang/rust/commit/0464f638af99a7c0876e9b8f96db5bbf917e3fe2"}, {"sha": "fcd6f20700848d9220bae663b7a41cea4e94f280", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd6f20700848d9220bae663b7a41cea4e94f280", "html_url": "https://github.com/rust-lang/rust/commit/fcd6f20700848d9220bae663b7a41cea4e94f280"}], "stats": {"total": 178, "additions": 86, "deletions": 92}, "files": [{"sha": "254954c83762a33cff7e7bdd7dc1fac98318db8c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 86, "deletions": 92, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9d0446f1a7bb60b8c355b50b8c9daae8ecfae7df", "patch": "@@ -836,6 +836,76 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n     }\n }\n \n+fn should_encode_variances(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Fn\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn => true,\n+        DefKind::Mod\n+        | DefKind::Field\n+        | DefKind::AssocTy\n+        | DefKind::AssocConst\n+        | DefKind::TyParam\n+        | DefKind::ConstParam\n+        | DefKind::Static\n+        | DefKind::Const\n+        | DefKind::ForeignMod\n+        | DefKind::TyAlias\n+        | DefKind::OpaqueTy\n+        | DefKind::Impl\n+        | DefKind::Trait\n+        | DefKind::TraitAlias\n+        | DefKind::Macro(..)\n+        | DefKind::ForeignTy\n+        | DefKind::Use\n+        | DefKind::LifetimeParam\n+        | DefKind::AnonConst\n+        | DefKind::GlobalAsm\n+        | DefKind::Closure\n+        | DefKind::Generator\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n+fn should_encode_generics(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Variant\n+        | DefKind::Trait\n+        | DefKind::TyAlias\n+        | DefKind::ForeignTy\n+        | DefKind::TraitAlias\n+        | DefKind::AssocTy\n+        | DefKind::Fn\n+        | DefKind::Const\n+        | DefKind::Static\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn\n+        | DefKind::AssocConst\n+        | DefKind::AnonConst\n+        | DefKind::OpaqueTy\n+        | DefKind::Impl\n+        | DefKind::Closure\n+        | DefKind::Generator => true,\n+        DefKind::Mod\n+        | DefKind::Field\n+        | DefKind::ForeignMod\n+        | DefKind::TyParam\n+        | DefKind::ConstParam\n+        | DefKind::Macro(..)\n+        | DefKind::Use\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n impl EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n@@ -864,6 +934,22 @@ impl EncodeContext<'a, 'tcx> {\n                 self.encode_const_stability(def_id);\n                 self.encode_deprecation(def_id);\n             }\n+            if should_encode_variances(def_kind) {\n+                let v = self.tcx.variances_of(def_id);\n+                record!(self.tables.variances[def_id] <- v);\n+            }\n+            if should_encode_generics(def_kind) {\n+                let g = tcx.generics_of(def_id);\n+                record!(self.tables.generics[def_id] <- g);\n+                record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));\n+                let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n+                if !inferred_outlives.is_empty() {\n+                    record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n+                }\n+            }\n+            if let DefKind::Trait | DefKind::TraitAlias = def_kind {\n+                record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));\n+            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -878,11 +964,6 @@ impl EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_variances_of(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n-        record!(self.tables.variances[def_id] <- self.tcx.variances_of(def_id));\n-    }\n-\n     fn encode_item_type(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_item_type({:?})\", def_id);\n         record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));\n@@ -913,12 +994,7 @@ impl EncodeContext<'a, 'tcx> {\n             if let Some(ctor_def_id) = variant.ctor_def_id {\n                 record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n             }\n-            // FIXME(eddyb) is this ever used?\n-            self.encode_variances_of(def_id);\n         }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {\n@@ -939,11 +1015,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {\n@@ -1002,9 +1074,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_item_type(def_id);\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {\n@@ -1023,37 +1092,9 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n-        }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n-    }\n-\n-    fn encode_generics(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_generics({:?})\", def_id);\n-        record!(self.tables.generics[def_id] <- self.tcx.generics_of(def_id));\n-    }\n-\n-    fn encode_explicit_predicates(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_explicit_predicates({:?})\", def_id);\n-        record!(self.tables.explicit_predicates[def_id] <-\n-            self.tcx.explicit_predicates_of(def_id));\n-    }\n-\n-    fn encode_inferred_outlives(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_inferred_outlives({:?})\", def_id);\n-        let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n-        if !inferred_outlives.is_empty() {\n-            record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n         }\n     }\n \n-    fn encode_super_predicates(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_super_predicates({:?})\", def_id);\n-        record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));\n-    }\n-\n     fn encode_explicit_item_bounds(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_item_bounds({:?})\", def_id);\n         let bounds = self.tcx.explicit_item_bounds(def_id);\n@@ -1128,11 +1169,7 @@ impl EncodeContext<'a, 'tcx> {\n         }\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_info_for_impl_item(&mut self, def_id: DefId) {\n@@ -1189,11 +1226,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n@@ -1458,37 +1491,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.impl_trait_ref[def_id] <- trait_ref);\n             }\n         }\n-        match item.kind {\n-            hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Fn(..) => self.encode_variances_of(def_id),\n-            _ => {}\n-        }\n-        match item.kind {\n-            hir::ItemKind::Static(..)\n-            | hir::ItemKind::Const(..)\n-            | hir::ItemKind::Fn(..)\n-            | hir::ItemKind::TyAlias(..)\n-            | hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Impl { .. }\n-            | hir::ItemKind::OpaqueTy(..)\n-            | hir::ItemKind::Trait(..)\n-            | hir::ItemKind::TraitAlias(..) => {\n-                self.encode_generics(def_id);\n-                self.encode_explicit_predicates(def_id);\n-                self.encode_inferred_outlives(def_id);\n-            }\n-            _ => {}\n-        }\n-        match item.kind {\n-            hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) => {\n-                self.encode_super_predicates(def_id);\n-            }\n-            _ => {}\n-        }\n     }\n \n     /// Serialize the text of exported macros\n@@ -1529,7 +1531,6 @@ impl EncodeContext<'a, 'tcx> {\n         if let ty::Closure(def_id, substs) = *ty.kind() {\n             record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());\n         }\n-        self.encode_generics(def_id.to_def_id());\n     }\n \n     fn encode_info_for_anon_const(&mut self, def_id: LocalDefId) {\n@@ -1541,9 +1542,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         self.encode_item_type(def_id.to_def_id());\n-        self.encode_generics(def_id.to_def_id());\n-        self.encode_explicit_predicates(def_id.to_def_id());\n-        self.encode_inferred_outlives(def_id.to_def_id());\n     }\n \n     fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {\n@@ -1822,11 +1820,7 @@ impl EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n-            self.encode_variances_of(def_id);\n         }\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n }\n "}]}