{"sha": "b48aba009025701c4adb45e2042f0bcdb9d949a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGFiYTAwOTAyNTcwMWM0YWRiNDVlMjA0MmYwYmNkYjlkOTQ5YTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-21T13:41:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T13:41:27Z"}, "message": "Merge #9227\n\n9227: Add a config setting to disable the 'test' cfg in specified crates r=matklad a=lf-\n\nIf you are opening libcore from rust-lang/rust as opposed to e.g.\r\ngoto definition from some other crate which would use the sysroot\r\ninstance of libcore, a `#![cfg(not(test))]` would previously have made\r\nall the code excluded from the module tree, breaking the editor\r\nexperience.\r\n\r\nCore does not need to ever be edited with `#[cfg(test)]` enabled,\r\nas the tests are in another crate.\r\n\r\nThis PR puts in a slight hack that checks for the crate name \"core\" and\r\nturns off `#[cfg(test)]` for that crate.\r\n\r\nFixes #9203 \r\nFixes #9226 \n\nCo-authored-by: Jade <software@lfcode.ca>", "tree": {"sha": "9c311ee5e9058a3db66134368c8b84c30ed94f81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c311ee5e9058a3db66134368c8b84c30ed94f81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48aba009025701c4adb45e2042f0bcdb9d949a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0JcHCRBK7hj4Ov3rIwAAsMMIAGdRAq9MIbLHaknzthtm29Uc\ns3Og71SQtc9ue5B0nxnrDzwrVGAUdQYPjdywmaz8JmZ3JUr2mqHJ1hilm1G23Q3Z\nR+CV9qHaU0LtGZsNbI7jxNukv1YjqAjAwHHhlXiVwr6ZpfyR6hAsBwMXAAmRaarw\nbZ6FhTZ0x+rVHh7BLEqNDF07rFcoyDUnSPqjwAjZ3+FutNLDoWjS62Zp/smTRxuQ\n5ciLaIA8uJVXLfYdlNncv3bC19fGfCHjkw5AvY47JJljqLy4tQWOh56ReIeUJV8A\nUMBL0hSL5cn8UhvnEDCmaij3et3qje+L5fqaR8Q6fbMnsyM81dvsMfanYxd7O48=\n=uph+\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c311ee5e9058a3db66134368c8b84c30ed94f81\nparent 4402f2b280f58896ed0696f4243d88a58fd970ca\nparent 8b77e2692cd97552b1b8d66eb51cec69695b3a5b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624282887 +0000\ncommitter GitHub <noreply@github.com> 1624282887 +0000\n\nMerge #9227\n\n9227: Add a config setting to disable the 'test' cfg in specified crates r=matklad a=lf-\n\nIf you are opening libcore from rust-lang/rust as opposed to e.g.\r\ngoto definition from some other crate which would use the sysroot\r\ninstance of libcore, a `#![cfg(not(test))]` would previously have made\r\nall the code excluded from the module tree, breaking the editor\r\nexperience.\r\n\r\nCore does not need to ever be edited with `#[cfg(test)]` enabled,\r\nas the tests are in another crate.\r\n\r\nThis PR puts in a slight hack that checks for the crate name \"core\" and\r\nturns off `#[cfg(test)]` for that crate.\r\n\r\nFixes #9203 \r\nFixes #9226 \n\nCo-authored-by: Jade <software@lfcode.ca>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48aba009025701c4adb45e2042f0bcdb9d949a7", "html_url": "https://github.com/rust-lang/rust/commit/b48aba009025701c4adb45e2042f0bcdb9d949a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48aba009025701c4adb45e2042f0bcdb9d949a7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4402f2b280f58896ed0696f4243d88a58fd970ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4402f2b280f58896ed0696f4243d88a58fd970ca", "html_url": "https://github.com/rust-lang/rust/commit/4402f2b280f58896ed0696f4243d88a58fd970ca"}, {"sha": "8b77e2692cd97552b1b8d66eb51cec69695b3a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b77e2692cd97552b1b8d66eb51cec69695b3a5b", "html_url": "https://github.com/rust-lang/rust/commit/8b77e2692cd97552b1b8d66eb51cec69695b3a5b"}], "stats": {"total": 179, "additions": 130, "deletions": 49}, "files": [{"sha": "916d39a0b4a2bf3b41c78139de8215df821142bf", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -1,4 +1,4 @@\n-//! cfg defines conditional compiling options, `cfg` attibute parser and evaluator\n+//! cfg defines conditional compiling options, `cfg` attribute parser and evaluator\n \n mod cfg_expr;\n mod dnf;\n@@ -52,13 +52,28 @@ impl CfgOptions {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CfgDiff {\n     // Invariants: No duplicates, no atom that's both in `enable` and `disable`.\n     enable: Vec<CfgAtom>,\n     disable: Vec<CfgAtom>,\n }\n \n impl CfgDiff {\n+    /// Create a new CfgDiff. Will return None if the same item appears more than once in the set\n+    /// of both.\n+    pub fn new(enable: Vec<CfgAtom>, disable: Vec<CfgAtom>) -> Option<CfgDiff> {\n+        let mut occupied = FxHashSet::default();\n+        for item in enable.iter().chain(disable.iter()) {\n+            if !occupied.insert(item) {\n+                // was present\n+                return None;\n+            }\n+        }\n+\n+        Some(CfgDiff { enable, disable })\n+    }\n+\n     /// Returns the total number of atoms changed by this diff.\n     pub fn len(&self) -> usize {\n         self.enable.len() + self.disable.len()"}, {"sha": "0935ea96762367923a53bbf55d9bd78127b9747a", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -1,5 +1,6 @@\n //! See [`CargoWorkspace`].\n \n+use std::iter;\n use std::path::PathBuf;\n use std::{convert::TryInto, ops, process::Command, sync::Arc};\n \n@@ -12,6 +13,7 @@ use rustc_hash::FxHashMap;\n use serde::Deserialize;\n use serde_json::from_value;\n \n+use crate::CfgOverrides;\n use crate::{build_data::BuildDataConfig, utf8_stdout};\n \n /// [`CargoWorkspace`] represents the logical structure of, well, a Cargo\n@@ -76,6 +78,21 @@ pub struct CargoConfig {\n \n     /// rustc private crate source\n     pub rustc_source: Option<RustcSource>,\n+\n+    /// crates to disable `#[cfg(test)]` on\n+    pub unset_test_crates: Vec<String>,\n+}\n+\n+impl CargoConfig {\n+    pub fn cfg_overrides(&self) -> CfgOverrides {\n+        self.unset_test_crates\n+            .iter()\n+            .cloned()\n+            .zip(iter::repeat_with(|| {\n+                cfg::CfgDiff::new(Vec::new(), vec![cfg::CfgAtom::Flag(\"test\".into())]).unwrap()\n+            }))\n+            .collect()\n+    }\n }\n \n pub type Package = Idx<PackageData>;"}, {"sha": "1d408dff2eafeb2f48de0fd3a87478c2c6385ff2", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -41,7 +41,7 @@ pub use crate::{\n     },\n     project_json::{ProjectJson, ProjectJsonData},\n     sysroot::Sysroot,\n-    workspace::{PackageRoot, ProjectWorkspace},\n+    workspace::{CfgOverrides, PackageRoot, ProjectWorkspace},\n };\n \n pub use proc_macro_api::ProcMacroClient;"}, {"sha": "d8217f714ebb935aa6e8f8c4e20bc87cd0683031", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 77, "deletions": 47, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, path::Path, process::Command};\n use anyhow::{format_err, Context, Result};\n use base_db::{CrateDisplayName, CrateGraph, CrateId, CrateName, Edition, Env, FileId, ProcMacro};\n use cargo_workspace::DepKind;\n-use cfg::CfgOptions;\n+use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -22,6 +22,8 @@ use crate::{\n     Sysroot, TargetKind,\n };\n \n+pub type CfgOverrides = FxHashMap<String, CfgDiff>;\n+\n /// `PackageRoot` describes a package root folder.\n /// Which may be an external dependency, or a member of\n /// the current workspace.\n@@ -46,6 +48,7 @@ pub enum ProjectWorkspace {\n         /// FIXME: make this a per-crate map, as, eg, build.rs might have a\n         /// different target.\n         rustc_cfg: Vec<CfgFlag>,\n+        cfg_overrides: CfgOverrides,\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n@@ -67,7 +70,7 @@ impl fmt::Debug for ProjectWorkspace {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Make sure this isn't too verbose.\n         match self {\n-            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg } => f\n+            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg, cfg_overrides } => f\n                 .debug_struct(\"Cargo\")\n                 .field(\"root\", &cargo.workspace_root().file_name())\n                 .field(\"n_packages\", &cargo.packages().len())\n@@ -77,6 +80,7 @@ impl fmt::Debug for ProjectWorkspace {\n                     &rustc.as_ref().map_or(0, |rc| rc.packages().len()),\n                 )\n                 .field(\"n_rustc_cfg\", &rustc_cfg.len())\n+                .field(\"n_cfg_overrides\", &cfg_overrides.len())\n                 .finish(),\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => {\n                 let mut debug_struct = f.debug_struct(\"Json\");\n@@ -164,7 +168,9 @@ impl ProjectWorkspace {\n                 };\n \n                 let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n-                ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg }\n+\n+                let cfg_overrides = config.cfg_overrides();\n+                ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg, cfg_overrides }\n             }\n         };\n \n@@ -213,43 +219,45 @@ impl ProjectWorkspace {\n                     })\n                 }))\n                 .collect::<Vec<_>>(),\n-            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg: _ } => cargo\n-                .packages()\n-                .map(|pkg| {\n-                    let is_member = cargo[pkg].is_member;\n-                    let pkg_root = cargo[pkg].root().to_path_buf();\n-\n-                    let mut include = vec![pkg_root.clone()];\n-                    include.extend(\n-                        build_data\n-                            .and_then(|it| it.get(cargo.workspace_root()))\n-                            .and_then(|map| map.get(&cargo[pkg].id))\n-                            .and_then(|it| it.out_dir.clone()),\n-                    );\n+            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg: _, cfg_overrides: _ } => {\n+                cargo\n+                    .packages()\n+                    .map(|pkg| {\n+                        let is_member = cargo[pkg].is_member;\n+                        let pkg_root = cargo[pkg].root().to_path_buf();\n+\n+                        let mut include = vec![pkg_root.clone()];\n+                        include.extend(\n+                            build_data\n+                                .and_then(|it| it.get(cargo.workspace_root()))\n+                                .and_then(|map| map.get(&cargo[pkg].id))\n+                                .and_then(|it| it.out_dir.clone()),\n+                        );\n \n-                    let mut exclude = vec![pkg_root.join(\".git\")];\n-                    if is_member {\n-                        exclude.push(pkg_root.join(\"target\"));\n-                    } else {\n-                        exclude.push(pkg_root.join(\"tests\"));\n-                        exclude.push(pkg_root.join(\"examples\"));\n-                        exclude.push(pkg_root.join(\"benches\"));\n-                    }\n-                    PackageRoot { is_member, include, exclude }\n-                })\n-                .chain(sysroot.crates().map(|krate| PackageRoot {\n-                    is_member: false,\n-                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n-                    exclude: Vec::new(),\n-                }))\n-                .chain(rustc.into_iter().flat_map(|rustc| {\n-                    rustc.packages().map(move |krate| PackageRoot {\n+                        let mut exclude = vec![pkg_root.join(\".git\")];\n+                        if is_member {\n+                            exclude.push(pkg_root.join(\"target\"));\n+                        } else {\n+                            exclude.push(pkg_root.join(\"tests\"));\n+                            exclude.push(pkg_root.join(\"examples\"));\n+                            exclude.push(pkg_root.join(\"benches\"));\n+                        }\n+                        PackageRoot { is_member, include, exclude }\n+                    })\n+                    .chain(sysroot.crates().map(|krate| PackageRoot {\n                         is_member: false,\n-                        include: vec![rustc[krate].root().to_path_buf()],\n+                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n                         exclude: Vec::new(),\n-                    })\n-                }))\n-                .collect(),\n+                    }))\n+                    .chain(rustc.into_iter().flat_map(|rustc| {\n+                        rustc.packages().map(move |krate| PackageRoot {\n+                            is_member: false,\n+                            include: vec![rustc[krate].root().to_path_buf()],\n+                            exclude: Vec::new(),\n+                        })\n+                    }))\n+                    .collect()\n+            }\n             ProjectWorkspace::DetachedFiles { files, sysroot, .. } => files\n                 .into_iter()\n                 .map(|detached_file| PackageRoot {\n@@ -299,16 +307,22 @@ impl ProjectWorkspace {\n                 project,\n                 sysroot,\n             ),\n-            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg } => cargo_to_crate_graph(\n-                rustc_cfg.clone(),\n-                &proc_macro_loader,\n-                load,\n-                cargo,\n-                build_data.and_then(|it| it.get(cargo.workspace_root())),\n-                sysroot,\n-                rustc,\n-                rustc.as_ref().zip(build_data).and_then(|(it, map)| map.get(it.workspace_root())),\n-            ),\n+            ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg, cfg_overrides } => {\n+                cargo_to_crate_graph(\n+                    rustc_cfg.clone(),\n+                    cfg_overrides,\n+                    &proc_macro_loader,\n+                    load,\n+                    cargo,\n+                    build_data.and_then(|it| it.get(cargo.workspace_root())),\n+                    sysroot,\n+                    rustc,\n+                    rustc\n+                        .as_ref()\n+                        .zip(build_data)\n+                        .and_then(|(it, map)| map.get(it.workspace_root())),\n+                )\n+            }\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => {\n                 detached_files_to_crate_graph(rustc_cfg.clone(), load, files, sysroot)\n             }\n@@ -398,6 +412,7 @@ fn project_json_to_crate_graph(\n \n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n+    override_cfg: &CfgOverrides,\n     proc_macro_loader: &dyn Fn(&Path) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n@@ -425,6 +440,21 @@ fn cargo_to_crate_graph(\n     let mut has_private = false;\n     // Next, create crates for each package, target pair\n     for pkg in cargo.packages() {\n+        let mut cfg_options = &cfg_options;\n+        let mut replaced_cfg_options;\n+        if let Some(overrides) = override_cfg.get(&cargo[pkg].name) {\n+            // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n+            // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n+            // working on rust-lang/rust as that's the only time it appears outside sysroot).\n+            //\n+            // A more ideal solution might be to reanalyze crates based on where the cursor is and\n+            // figure out the set of cfgs that would have to apply to make it active.\n+\n+            replaced_cfg_options = cfg_options.clone();\n+            replaced_cfg_options.apply_diff(overrides.clone());\n+            cfg_options = &replaced_cfg_options;\n+        };\n+\n         has_private |= cargo[pkg].metadata.rustc_private;\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {"}, {"sha": "7e0276c10e627f63b27d96845da24801d4045455", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -55,6 +55,8 @@ config_data! {\n         cargo_autoreload: bool           = \"true\",\n         /// Activate all available features (`--all-features`).\n         cargo_allFeatures: bool          = \"false\",\n+        /// Unsets `#[cfg(test)]` for the specified crates.\n+        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n         /// List of features to activate.\n         cargo_features: Vec<String>      = \"[]\",\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n@@ -595,8 +597,10 @@ impl Config {\n             target: self.data.cargo_target.clone(),\n             rustc_source,\n             no_sysroot: self.data.cargo_noSysroot,\n+            unset_test_crates: self.data.cargo_unsetTest.clone(),\n         }\n     }\n+\n     pub fn rustfmt(&self) -> RustfmtConfig {\n         match &self.data.rustfmt_overrideCommand {\n             Some(args) if !args.is_empty() => {"}, {"sha": "58cb469740fe4415ea954fd52b1eaadc05464fe7", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -39,6 +39,11 @@ Automatically refresh project info via `cargo metadata` on\n --\n Activate all available features (`--all-features`).\n --\n+[[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n++\n+--\n+Unsets `#[cfg(test)]` for the specified crates.\n+--\n [[rust-analyzer.cargo.features]]rust-analyzer.cargo.features (default: `[]`)::\n +\n --"}, {"sha": "b20a39a956fe1563dab79e1cafbefc2a7851f9f3", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b48aba009025701c4adb45e2042f0bcdb9d949a7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b48aba009025701c4adb45e2042f0bcdb9d949a7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b48aba009025701c4adb45e2042f0bcdb9d949a7", "patch": "@@ -452,6 +452,16 @@\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.unsetTest\": {\n+                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n+                    \"default\": [\n+                        \"core\"\n+                    ],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n                 \"rust-analyzer.cargo.features\": {\n                     \"markdownDescription\": \"List of features to activate.\",\n                     \"default\": [],"}]}