{"sha": "44adfccffe34d14079b06ae459982b8600f84577", "node_id": "C_kwDOAAsO6NoAKDQ0YWRmY2NmZmUzNGQxNDA3OWIwNmFlNDU5OTgyYjg2MDBmODQ1Nzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T05:02:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T05:02:32Z"}, "message": "Auto merge of #101504 - lqd:rust-lld-fix, r=petrochenkov\n\nFix `-Zgcc-ld=lld`\n\n`-Zgcc-ld=lld` is currently broken. CI is currently ignoring its tests.\n\ncc `@Mark-Simulacrum` on the `compiletest` change: I'm not sure which of `bootstrap`'s test step or `compiletest` is currently incorrect wrt windows' `--compile-lib-path`. Since `sysroot/bin` is passed on windows, that means that `compiletest` can't find `rust-lld` on windows and tests are currently ignored: it's looking for something that is in `sysroot/lib` instead.\n\nThey are currently ignored on unixes for a different reason: the lld wrapper has a different name than what is checked.\n\n(I've changed `compiletest` in this PR, just because I could make a very targeted change there, whereas completely changing the intentional lib path that is passed seemed it'd have wider reaching implications on all tests.)\n\nAnd in both unix/win cases, I've changed the detection to look for `rust-lld` rather than the wrappers in `bin/gcc-ld/`. It seems like the more stable of all these executable names.\n\nr? `@petrochenkov`\n\nI've tested the `lld-wrapper` change on linux and osx, but couldn't test on windows gnu targets (I only have MSVC targets, and these can't use `rust-lld` via `-Zgcc-ld=lld`, nor do they use the lld wrapper IIUC).\n\nI'd expect it to work whether or not the wrapper is called with or without an executable suffix. But at least now CI should test it in these targets.\n\nFixes #101370.", "tree": {"sha": "e4c52c239f165fdf0b43c6c1b0742bc2aa0de4cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c52c239f165fdf0b43c6c1b0742bc2aa0de4cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44adfccffe34d14079b06ae459982b8600f84577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44adfccffe34d14079b06ae459982b8600f84577", "html_url": "https://github.com/rust-lang/rust/commit/44adfccffe34d14079b06ae459982b8600f84577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44adfccffe34d14079b06ae459982b8600f84577/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af35b8e3017cb080630942d1c2b7045c74e450a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af35b8e3017cb080630942d1c2b7045c74e450a", "html_url": "https://github.com/rust-lang/rust/commit/4af35b8e3017cb080630942d1c2b7045c74e450a"}, {"sha": "318d0eba8b5ffc02651ae40738e4276c1f4cf950", "url": "https://api.github.com/repos/rust-lang/rust/commits/318d0eba8b5ffc02651ae40738e4276c1f4cf950", "html_url": "https://github.com/rust-lang/rust/commit/318d0eba8b5ffc02651ae40738e4276c1f4cf950"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "16d9a56e6bf78c472846074595c86a26aaede6b7", "filename": "src/test/run-make/issue-71519/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-71519%2FMakefile?ref=44adfccffe34d14079b06ae459982b8600f84577", "patch": "@@ -1,5 +1,6 @@\n include ../../run-make-fulldeps/tools.mk\n \n+# ignore-msvc\n # needs-rust-lld\n all:\n \tRUSTC_LOG=rustc_codegen_ssa::back::link=info $(RUSTC) -Z gcc-ld=lld -C link-args=-Wl,-v main.rs 2> $(TMPDIR)/output.txt"}, {"sha": "3ff1cbf20cd26cc84009f42df3998f2b48222649", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=44adfccffe34d14079b06ae459982b8600f84577", "patch": "@@ -897,15 +897,27 @@ pub fn make_test_description<R: Read>(\n     let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_memtag = util::MEMTAG_SUPPORTED_TARGETS.contains(&&*config.target);\n     let has_shadow_call_stack = util::SHADOWCALLSTACK_SUPPORTED_TARGETS.contains(&&*config.target);\n-    // for `-Z gcc-ld=lld`\n+\n+    // For tests using the `needs-rust-lld` directive (e.g. for `-Zgcc-ld=lld`), we need to find\n+    // whether `rust-lld` is present in the compiler under test.\n+    //\n+    // The --compile-lib-path is the path to host shared libraries, but depends on the OS. For\n+    // example:\n+    // - on linux, it can be <sysroot>/lib\n+    // - on windows, it can be <sysroot>/bin\n+    //\n+    // However, `rust-lld` is only located under the lib path, so we look for it there.\n     let has_rust_lld = config\n         .compile_lib_path\n+        .parent()\n+        .expect(\"couldn't traverse to the parent of the specified --compile-lib-path\")\n+        .join(\"lib\")\n         .join(\"rustlib\")\n         .join(&config.target)\n         .join(\"bin\")\n-        .join(\"gcc-ld\")\n-        .join(if config.host.contains(\"windows\") { \"ld.exe\" } else { \"ld\" })\n+        .join(if config.host.contains(\"windows\") { \"rust-lld.exe\" } else { \"rust-lld\" })\n         .exists();\n+\n     iter_header(path, src, &mut |revision, ln| {\n         if revision.is_some() && revision != cfg {\n             return;"}, {"sha": "b5e977b2637d8075fc6d51682e1a6e204187d715", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44adfccffe34d14079b06ae459982b8600f84577/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=44adfccffe34d14079b06ae459982b8600f84577", "patch": "@@ -11,9 +11,10 @@\n //! obtained from the wrapper's name as the first two arguments.\n //! On Windows it spawns a `..\\rust-lld.exe` child process.\n \n+use std::env::{self, consts::EXE_SUFFIX};\n use std::fmt::Display;\n use std::path::{Path, PathBuf};\n-use std::{env, process};\n+use std::process;\n \n trait UnwrapOrExitWith<T> {\n     fn unwrap_or_exit_with(self, context: &str) -> T;\n@@ -42,7 +43,7 @@ impl<T, E: Display> UnwrapOrExitWith<T> for Result<T, E> {\n /// Exits if the parent directory cannot be determined.\n fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n     let mut rust_lld_exe_name = \"rust-lld\".to_owned();\n-    rust_lld_exe_name.push_str(env::consts::EXE_SUFFIX);\n+    rust_lld_exe_name.push_str(EXE_SUFFIX);\n     let mut rust_lld_path = current_exe_path\n         .parent()\n         .unwrap_or_exit_with(\"directory containing current executable could not be determined\")\n@@ -55,13 +56,14 @@ fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n \n /// Extract LLD flavor name from the lld-wrapper executable name.\n fn get_lld_flavor(current_exe_path: &Path) -> Result<&'static str, String> {\n-    let stem = current_exe_path.file_stem();\n-    Ok(match stem.and_then(|s| s.to_str()) {\n+    let file = current_exe_path.file_name();\n+    let stem = file.and_then(|s| s.to_str()).map(|s| s.trim_end_matches(EXE_SUFFIX));\n+    Ok(match stem {\n         Some(\"ld.lld\") => \"gnu\",\n         Some(\"ld64.lld\") => \"darwin\",\n         Some(\"lld-link\") => \"link\",\n         Some(\"wasm-ld\") => \"wasm\",\n-        _ => return Err(format!(\"{:?}\", stem)),\n+        _ => return Err(format!(\"{:?}\", file)),\n     })\n }\n "}]}