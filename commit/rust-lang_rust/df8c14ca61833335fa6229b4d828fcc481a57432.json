{"sha": "df8c14ca61833335fa6229b4d828fcc481a57432", "node_id": "C_kwDOAAsO6NoAKGRmOGMxNGNhNjE4MzMzMzVmYTYyMjliNGQ4MjhmY2M0ODFhNTc0MzI", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T18:19:47Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:21:50Z"}, "message": "Check all arg indexes before removing inlined format args.", "tree": {"sha": "bc3136fa6afae47ec62e2493a2fdd8360eaad04e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc3136fa6afae47ec62e2493a2fdd8360eaad04e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8c14ca61833335fa6229b4d828fcc481a57432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8c14ca61833335fa6229b4d828fcc481a57432", "html_url": "https://github.com/rust-lang/rust/commit/df8c14ca61833335fa6229b4d828fcc481a57432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8c14ca61833335fa6229b4d828fcc481a57432/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0554401fcc7bc552b45a900781434e856f917404", "url": "https://api.github.com/repos/rust-lang/rust/commits/0554401fcc7bc552b45a900781434e856f917404", "html_url": "https://github.com/rust-lang/rust/commit/0554401fcc7bc552b45a900781434e856f917404"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "acfc0099db7f0014d0d89581e301d37efbe140a2", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df8c14ca61833335fa6229b4d828fcc481a57432/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8c14ca61833335fa6229b4d828fcc481a57432/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=df8c14ca61833335fa6229b4d828fcc481a57432", "patch": "@@ -103,10 +103,8 @@ fn flatten_format_args(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n ///\n /// `format_args!(\"Hello, World! {}\", 123)`.\n fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n-    // None: Not sure yet.\n-    // Some(true): Remove, because it was inlined. (Might be set to false later if it is used in another way.)\n-    // Some(false): Do not remove, because some non-inlined placeholder uses it.\n-    let mut remove = vec![None; fmt.arguments.all_args().len()];\n+    let mut was_inlined = vec![false; fmt.arguments.all_args().len()];\n+    let mut inlined_anything = false;\n \n     for i in 0..fmt.template.len() {\n         let FormatArgsPiece::Placeholder(placeholder) = &fmt.template[i] else { continue };\n@@ -123,30 +121,34 @@ fn inline_literals(mut fmt: Cow<'_, FormatArgs>) -> Cow<'_, FormatArgs> {\n             let fmt = fmt.to_mut();\n             // Replace the placeholder with the literal.\n             fmt.template[i] = FormatArgsPiece::Literal(s);\n-            // Only remove it wasn't set to 'do not remove'.\n-            remove[arg_index].get_or_insert(true);\n-        } else {\n-            // Never remove an argument that's used by a non-inlined placeholder,\n-            // even if this argument is inlined in another place.\n-            remove[arg_index] = Some(false);\n+            was_inlined[arg_index] = true;\n+            inlined_anything = true;\n         }\n     }\n \n     // Remove the arguments that were inlined.\n-    if remove.iter().any(|&x| x == Some(true)) {\n+    if inlined_anything {\n         let fmt = fmt.to_mut();\n+\n+        let mut remove = was_inlined;\n+\n+        // Don't remove anything that's still used.\n+        for_all_argument_indexes(&mut fmt.template, |index| remove[*index] = false);\n+\n         // Drop all the arguments that are marked for removal.\n         let mut remove_it = remove.iter();\n-        fmt.arguments.all_args_mut().retain(|_| remove_it.next() != Some(&Some(true)));\n+        fmt.arguments.all_args_mut().retain(|_| remove_it.next() != Some(&true));\n+\n         // Calculate the mapping of old to new indexes for the remaining arguments.\n         let index_map: Vec<usize> = remove\n             .into_iter()\n             .scan(0, |i, remove| {\n                 let mapped = *i;\n-                *i += (remove != Some(true)) as usize;\n+                *i += !remove as usize;\n                 Some(mapped)\n             })\n             .collect();\n+\n         // Correct the indexes that refer to arguments that have shifted position.\n         for_all_argument_indexes(&mut fmt.template, |index| *index = index_map[*index]);\n     }"}]}