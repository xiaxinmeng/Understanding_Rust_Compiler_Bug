{"sha": "431622e1e202467e0ba61cdf2df7ceb501926547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMTYyMmUxZTIwMjQ2N2UwYmE2MWNkZjJkZjdjZWI1MDE5MjY1NDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T16:31:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T17:24:26Z"}, "message": "rustdoc: Fix links to Box/Gc\n\nThese are lang items now, so the internal representations need to be\nre-translated back to the original structures manually.\n\nCloses #15185\nCloses #15800", "tree": {"sha": "0c6c396fab9f58dd9d33b7995b71af225272f5d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6c396fab9f58dd9d33b7995b71af225272f5d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431622e1e202467e0ba61cdf2df7ceb501926547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431622e1e202467e0ba61cdf2df7ceb501926547", "html_url": "https://github.com/rust-lang/rust/commit/431622e1e202467e0ba61cdf2df7ceb501926547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431622e1e202467e0ba61cdf2df7ceb501926547/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a727bba1b3a93d58c786460de6926c138d9507", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a727bba1b3a93d58c786460de6926c138d9507", "html_url": "https://github.com/rust-lang/rust/commit/15a727bba1b3a93d58c786460de6926c138d9507"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "5b59eed93216195dade50abc85b3a02cc1b20837", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/431622e1e202467e0ba61cdf2df7ceb501926547/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431622e1e202467e0ba61cdf2df7ceb501926547/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=431622e1e202467e0ba61cdf2df7ceb501926547", "patch": "@@ -747,7 +747,6 @@ pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n     SelfBorrowed(Option<Lifetime>, Mutability),\n-    SelfOwned,\n     SelfExplicit(Type),\n }\n \n@@ -971,28 +970,27 @@ impl Clean<Item> for ty::Method {\n     fn clean(&self) -> Item {\n         let cx = get_cx();\n         let (self_, sig) = match self.explicit_self {\n-            ty::StaticExplicitSelfCategory => (ast::SelfStatic.clean(), self.fty.sig.clone()),\n+            ty::StaticExplicitSelfCategory => (ast::SelfStatic.clean(),\n+                                               self.fty.sig.clone()),\n             s => {\n                 let sig = ty::FnSig {\n                     inputs: Vec::from_slice(self.fty.sig.inputs.slice_from(1)),\n                     ..self.fty.sig.clone()\n                 };\n                 let s = match s {\n+                    ty::ByValueExplicitSelfCategory => SelfValue,\n                     ty::ByReferenceExplicitSelfCategory(..) => {\n                         match ty::get(self.fty.sig.inputs[0]).sty {\n                             ty::ty_rptr(r, mt) => {\n                                 SelfBorrowed(r.clean(), mt.mutbl.clean())\n                             }\n-                            _ => {\n-                                // FIXME(pcwalton): This is wrong.\n-                                SelfStatic\n-                            }\n+                            _ => unreachable!(),\n                         }\n                     }\n-                    _ => {\n-                        // FIXME(pcwalton): This is wrong.\n-                        SelfStatic\n+                    ty::ByBoxExplicitSelfCategory => {\n+                        SelfExplicit(self.fty.sig.inputs[0].clean())\n                     }\n+                    ty::StaticExplicitSelfCategory => unreachable!(),\n                 };\n                 (s, sig)\n             }\n@@ -1213,8 +1211,18 @@ impl Clean<Type> for ty::t {\n             ty::ty_float(ast::TyF32) => Primitive(F32),\n             ty::ty_float(ast::TyF64) => Primitive(F64),\n             ty::ty_str => Primitive(Str),\n-            ty::ty_box(t) => Managed(box t.clean()),\n-            ty::ty_uniq(t) => Unique(box t.clean()),\n+            ty::ty_box(t) => {\n+                let gc_did = get_cx().tcx_opt().and_then(|tcx| {\n+                    tcx.lang_items.gc()\n+                });\n+                lang_struct(gc_did, t, \"Gc\", Managed)\n+            }\n+            ty::ty_uniq(t) => {\n+                let box_did = get_cx().tcx_opt().and_then(|tcx| {\n+                    tcx.lang_items.owned_box()\n+                });\n+                lang_struct(box_did, t, \"Box\", Unique)\n+            }\n             ty::ty_vec(mt, None) => Vector(box mt.ty.clean()),\n             ty::ty_vec(mt, Some(i)) => FixedVector(box mt.ty.clean(),\n                                                    format!(\"{}\", i)),\n@@ -2094,3 +2102,29 @@ impl Clean<Stability> for attr::Stability {\n         }\n     }\n }\n+\n+fn lang_struct(did: Option<ast::DefId>, t: ty::t, name: &str,\n+               fallback: fn(Box<Type>) -> Type) -> Type {\n+    let did = match did {\n+        Some(did) => did,\n+        None => return fallback(box t.clean()),\n+    };\n+    let fqn = csearch::get_item_path(get_cx().tcx(), did);\n+    let fqn: Vec<String> = fqn.move_iter().map(|i| {\n+        i.to_string()\n+    }).collect();\n+    get_cx().external_paths.borrow_mut().get_mut_ref()\n+                           .insert(did, (fqn, TypeStruct));\n+    ResolvedPath {\n+        typarams: None,\n+        did: did,\n+        path: Path {\n+            global: false,\n+            segments: vec![PathSegment {\n+                name: name.to_string(),\n+                lifetimes: vec![],\n+                types: vec![t.clean()],\n+            }],\n+        },\n+    }\n+}"}, {"sha": "c6d6843db5fb32d029f1a82b359831a32f06de62", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/431622e1e202467e0ba61cdf2df7ceb501926547/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431622e1e202467e0ba61cdf2df7ceb501926547/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=431622e1e202467e0ba61cdf2df7ceb501926547", "patch": "@@ -444,8 +444,6 @@ impl fmt::Show for clean::Type {\n                                format!(\"[{}, ..{}]\", **t, *s).as_slice())\n             }\n             clean::Bottom => f.write(\"!\".as_bytes()),\n-            clean::Unique(ref t) => write!(f, \"Box<{}>\", **t),\n-            clean::Managed(ref t) => write!(f, \"Gc<{}>\", **t),\n             clean::RawPointer(m, ref t) => {\n                 write!(f, \"*{}{}\", RawMutableSpace(m), **t)\n             }\n@@ -456,6 +454,9 @@ impl fmt::Show for clean::Type {\n                 };\n                 write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n             }\n+            clean::Unique(..) | clean::Managed(..) => {\n+                fail!(\"should have been cleaned\")\n+            }\n         }\n     }\n }\n@@ -491,7 +492,6 @@ impl<'a> fmt::Show for Method<'a> {\n         match *selfty {\n             clean::SelfStatic => {},\n             clean::SelfValue => args.push_str(\"self\"),\n-            clean::SelfOwned => args.push_str(\"self: Box<Self>\"),\n             clean::SelfBorrowed(Some(ref lt), mtbl) => {\n                 args.push_str(format!(\"&amp;{} {}self\", *lt,\n                                       MutableSpace(mtbl)).as_slice());"}]}