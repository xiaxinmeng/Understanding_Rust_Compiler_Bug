{"sha": "857a55b8f0a692cb2304ab7c062d9cc74122e516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1N2E1NWI4ZjBhNjkyY2IyMzA0YWI3YzA2MmQ5Y2M3NDEyMmU1MTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T10:11:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-20T10:11:10Z"}, "message": "Auto merge of #65497 - choller:master, r=tmiasko\n\nAvoid injecting sanitizer runtimes into staticlibs (#64629).\n\nThis fixes the remaining issue in `creader.rs` and also fixes the expected test failure. I have explicitly turned the `$(CC)` call into a negative check with the `!` to ensure that this command is really failing (if it is not, then either the runtime is attached to the lib or the lib has not been instrumented and both would be an error).\n\nI've also borrowed `program.rs` and the additional `rustc` invocation from @tmiasko 's PR since he pointed out that using `-fsanitize=address` with `$(CC)` for linking could fail if the sanitizer runtimes on the system are incompatible.\n\nWith this toolchain I was able to compile Firefox locally without any linker errors. I am still seeing races with Rust in TSan but I assume that is because I did not build with `-Z build-std`.", "tree": {"sha": "241cd13b3888bc4633af5c82c80decd8a84adc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241cd13b3888bc4633af5c82c80decd8a84adc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/857a55b8f0a692cb2304ab7c062d9cc74122e516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/857a55b8f0a692cb2304ab7c062d9cc74122e516", "html_url": "https://github.com/rust-lang/rust/commit/857a55b8f0a692cb2304ab7c062d9cc74122e516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/857a55b8f0a692cb2304ab7c062d9cc74122e516/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf377f289a4f79829309ed69dccfe33f20b089c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf377f289a4f79829309ed69dccfe33f20b089c", "html_url": "https://github.com/rust-lang/rust/commit/7bf377f289a4f79829309ed69dccfe33f20b089c"}, {"sha": "a2feb9c6cc343a25ecca5594acff61bb92ab4e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2feb9c6cc343a25ecca5594acff61bb92ab4e22", "html_url": "https://github.com/rust-lang/rust/commit/a2feb9c6cc343a25ecca5594acff61bb92ab4e22"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "7412e8a2cb9bd7f8c0cc54d44b39ce6b90eb91b0", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=857a55b8f0a692cb2304ab7c062d9cc74122e516", "patch": "@@ -738,10 +738,10 @@ impl<'a> CrateLoader<'a> {\n                 if !self.sess.crate_types.borrow().iter().all(|ct| {\n                     match *ct {\n                         // Link the runtime\n-                        config::CrateType::Staticlib |\n                         config::CrateType::Executable => true,\n                         // This crate will be compiled with the required\n                         // instrumentation pass\n+                        config::CrateType::Staticlib |\n                         config::CrateType::Rlib |\n                         config::CrateType::Dylib |\n                         config::CrateType::Cdylib =>"}, {"sha": "f56475b441f1a0aa0731c950f2a7757cc990891e", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/Makefile", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2FMakefile?ref=857a55b8f0a692cb2304ab7c062d9cc74122e516", "patch": "@@ -4,12 +4,18 @@\n \n -include ../tools.mk\n \n-# This test builds a staticlib, then an executable that links to it.\n-# The staticlib and executable both  are compiled with address sanitizer,\n-# and we assert that a fault in the staticlib is correctly detected.\n+# This test first builds a staticlib with AddressSanitizer and checks that\n+# linking it to an executable fails due to the missing sanitizer runtime.\n+# It then builds an executable linking to the staticlib and checks that\n+# the fault in the staticlib is detected correctly.\n+\n+# Note that checking for the link failure actually checks two things at once:\n+#   1) That the library has the sanitizer intrumentation\n+#   2) and that library does not have the sanitizer runtime\n \n all:\n \t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n-\t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t! $(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -L . program.rs\n \tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | $(CGREP) stack-buffer-overflow\n "}, {"sha": "21e1ade2cd52c41807cbdcfa34af556d2dddc8c7", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/program.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/857a55b8f0a692cb2304ab7c062d9cc74122e516/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Fprogram.rs?ref=857a55b8f0a692cb2304ab7c062d9cc74122e516", "patch": "@@ -0,0 +1,10 @@\n+#[link(name = \"library\")]\n+extern {\n+    fn overflow();\n+}\n+\n+fn main() {\n+    unsafe {\n+        overflow();\n+    }\n+}"}]}