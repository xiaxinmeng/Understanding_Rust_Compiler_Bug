{"sha": "9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNThmYjc3NmE3NGE0NGY0ZmNjMmNiNTcwODRkMzNjNTU1MzBhYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-15T15:37:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-15T15:37:09Z"}, "message": "Auto merge of #33658 - Manishearth:rollup, r=Manishearth\n\nRollup of 14 pull requests\n\n- Successful merges: #33342, #33393, #33415, #33475, #33517, #33533, #33534, #33565, #33580, #33584, #33585, #33590, #33591, #33598\n- Failed merges: #33578", "tree": {"sha": "007f7ad1fef9ac62eeefe2b9f36eafba11431b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007f7ad1fef9ac62eeefe2b9f36eafba11431b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "html_url": "https://github.com/rust-lang/rust/commit/9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3583193531c124e36aa1813cf5f8b8e667d016c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3583193531c124e36aa1813cf5f8b8e667d016c", "html_url": "https://github.com/rust-lang/rust/commit/b3583193531c124e36aa1813cf5f8b8e667d016c"}, {"sha": "95ace6be43d3e037f8b812e03bd8ace3b0d9e50a", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ace6be43d3e037f8b812e03bd8ace3b0d9e50a", "html_url": "https://github.com/rust-lang/rust/commit/95ace6be43d3e037f8b812e03bd8ace3b0d9e50a"}], "stats": {"total": 662, "additions": 619, "deletions": 43}, "files": [{"sha": "10e4ea1c3f055ab7e0827c9ffb6b76bef9512261", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -525,14 +525,16 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n /// }\n /// ```\n #[rustc_paren_sugar]\n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\",\n+           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n pub trait FnBox<A> {\n     type Output;\n \n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n \n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\",\n+           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n impl<A, F> FnBox<A> for F where F: FnOnce<A>\n {\n     type Output = F::Output;\n@@ -542,7 +544,8 @@ impl<A, F> FnBox<A> for F where F: FnOnce<A>\n     }\n }\n \n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\",\n+           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n     type Output = R;\n \n@@ -551,7 +554,8 @@ impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n     }\n }\n \n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"28796\")]\n+#[unstable(feature = \"fnbox\",\n+           reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> {\n     type Output = R;\n "}, {"sha": "eedf4c2c11f34fcf32808df3805259efa9990513", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -184,7 +184,7 @@ use boxed::Box;\n /// let len = story.len();\n /// let capacity = story.capacity();\n ///\n-/// // story has thirteen bytes\n+/// // story has nineteen bytes\n /// assert_eq!(19, len);\n ///\n /// // Now that we have our parts, we throw the story away."}, {"sha": "52ba8d9a631d89459534b8b093fadae84cfaa96f", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -142,13 +142,13 @@ pub enum Ordering {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Relaxed,\n     /// When coupled with a store, all previous writes become visible\n-    /// to another thread that performs a load with `Acquire` ordering\n+    /// to the other threads that perform a load with `Acquire` ordering\n     /// on the same value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Release,\n     /// When coupled with a load, all subsequent loads will see data\n     /// written before a store with `Release` ordering on the same value\n-    /// in another thread.\n+    /// in other threads.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Acquire,\n     /// When coupled with a load, uses `Acquire` ordering, and with a store"}, {"sha": "cdbad685008f2371e02ad444919e3ee58c0b8b1a", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 126, "deletions": 2, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -378,6 +378,53 @@ let c = &i; // still ok!\n ```\n \"##,\n \n+E0500: r##\"\n+A borrowed variable was used in another closure. Example of erroneous code:\n+\n+```compile_fail\n+fn you_know_nothing(jon_snow: &mut i32) {\n+    let nights_watch = || {\n+        *jon_snow = 2;\n+    };\n+    let starks = || {\n+        *jon_snow = 3; // error: closure requires unique access to `jon_snow`\n+                       //        but it is already borrowed\n+    };\n+}\n+\n+In here, `jon_snow` is already borrowed by the `nights_watch` closure, so it\n+cannot be borrowed by the `starks` closure at the same time. To fix this issue,\n+you can put the closure in its own scope:\n+\n+```\n+fn you_know_nothing(jon_snow: &mut i32) {\n+    {\n+        let nights_watch = || {\n+            *jon_snow = 2;\n+        };\n+    } // At this point, `jon_snow` is free.\n+    let starks = || {\n+        *jon_snow = 3;\n+    };\n+}\n+```\n+\n+Or, if the type implements the `Clone` trait, you can clone it between\n+closures:\n+\n+```\n+fn you_know_nothing(jon_snow: &mut i32) {\n+    let mut jon_copy = jon_snow.clone();\n+    let nights_watch = || {\n+        jon_copy = 2;\n+    };\n+    let starks = || {\n+        *jon_snow = 3;\n+    };\n+}\n+```\n+\"##,\n+\n E0501: r##\"\n This error indicates that a mutable variable is being used while it is still\n captured by a closure. Because the closure has borrowed the variable, it is not\n@@ -642,6 +689,85 @@ fn print_fancy_ref(fancy_ref: &FancyNum){\n ```\n \"##,\n \n+E0505: r##\"\n+A value was moved out while it was still borrowed.\n+Erroneous code example:\n+\n+```compile_fail\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(x);\n+    }\n+}\n+```\n+\n+Here, the function `eat` takes the ownership of `x`. However,\n+`x` cannot be moved because it was borrowed to `_ref_to_val`.\n+To fix that you can do few different things:\n+\n+* Try to avoid moving the variable.\n+* Release borrow before move.\n+* Implement the `Copy` trait on the type.\n+\n+Examples:\n+\n+```\n+struct Value {}\n+\n+fn eat(val: &Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(&x); // pass by reference, if it's possible\n+    }\n+}\n+```\n+\n+Or:\n+\n+```\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+    }\n+    eat(x); // release borrow and then move it.\n+}\n+```\n+\n+Or:\n+\n+```\n+#[derive(Clone, Copy)] // implement Copy trait\n+struct Value {}\n+\n+fn eat(val: Value) {}\n+\n+fn main() {\n+    let x = Value{};\n+    {\n+        let _ref_to_val: &Value = &x;\n+        eat(x); // it will be copied here.\n+    }\n+}\n+```\n+\n+You can find more information about borrowing in the rust-book:\n+http://doc.rust-lang.org/stable/book/references-and-borrowing.html\n+\"##,\n+\n E0507: r##\"\n You tried to move out of a value which was borrowed. Erroneous code example:\n \n@@ -857,10 +983,8 @@ fn main() {\n register_diagnostics! {\n     E0385, // {} in an aliasable location\n     E0388, // {} in a static location\n-    E0500, // closure requires unique access to `..` but .. is already borrowed\n     E0502, // cannot borrow `..`.. as .. because .. is also borrowed as ...\n     E0503, // cannot use `..` because it was mutably borrowed\n-    E0505, // cannot move out of `..` because it is borrowed\n     E0508, // cannot move out of type `..`, a non-copy fixed-size array\n     E0524, // two closures require unique access to `..` at the same time\n }"}, {"sha": "457d25923c611b21c56ba249b20267446344797e", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -62,8 +62,6 @@ fn foo(x: Empty) {\n However, this won't:\n \n ```compile_fail\n-enum Empty {}\n-\n fn foo(x: Option<String>) {\n     match x {\n         // empty\n@@ -191,7 +189,7 @@ inner `String` to be moved into a variable called `s`.\n let x = Some(\"s\".to_string());\n \n match x {\n-    op_string @ Some(s) => {},\n+    op_string @ Some(s) => {}, // error: cannot bind by-move with sub-bindings\n     None => {},\n }\n ```\n@@ -288,7 +286,8 @@ struct X { x: (), }\n \n let x = Some((X { x: () }, X { x: () }));\n match x {\n-    Some((y, ref z)) => {},\n+    Some((y, ref z)) => {}, // error: cannot bind by-move and by-ref in the\n+                            //        same pattern\n     None => panic!()\n }\n ```\n@@ -574,6 +573,12 @@ be a compile-time constant. Erroneous code example:\n     let x = [0i32; len]; // error: expected constant integer for repeat count,\n                          //        found variable\n ```\n+\n+Working example:\n+\n+```\n+let x = [0i32; 10];\n+```\n \"##,\n \n }"}, {"sha": "ae9f500c5de59113ba5165bffa00c42feca1663a", "filename": "src/librustc_metadata/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_metadata%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_metadata%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdiagnostics.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -26,6 +26,27 @@ name. Example:\n ```\n \"##,\n \n+E0455: r##\"\n+Linking with `kind=framework` is only supported when targeting OS X,\n+as frameworks are specific to that operating system.\n+\n+Erroneous code example:\n+\n+```compile_fail\"\n+#[link(name = \"FooCoreServices\",  kind = \"framework\")] extern {}\n+// OS used to compile is Linux for example\n+```\n+\n+To solve this error you can use conditional compilation:\n+\n+```\n+#[cfg_attr(target=\"macos\", link(name = \"FooCoreServices\", kind = \"framework\"))]\n+extern {}\n+```\n+\n+See more: https://doc.rust-lang.org/book/conditional-compilation.html\n+\"##,\n+\n E0458: r##\"\n An unknown \"kind\" was specified for a link attribute. Erroneous code example:\n \n@@ -73,7 +94,6 @@ well, and you link to them the same way.\n }\n \n register_diagnostics! {\n-    E0455, // native frameworks are only available on OSX targets\n     E0456, // plugin `..` is not available for triple `..`\n     E0457, // plugin `..` only found in rlib format, but must be available...\n     E0514, // metadata version mismatch"}, {"sha": "00eeefa0449ce628eb9032c2a1710b652550d794", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -84,7 +84,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          span: Span,\n                          method_name: ast::Name,\n                          self_ty: ty::Ty<'tcx>,\n-                         call_expr_id: ast::NodeId)\n+                         call_expr_id: ast::NodeId,\n+                         allow_private: bool)\n                          -> bool\n     {\n         let mode = probe::Mode::MethodCall;\n@@ -93,7 +94,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Err(NoMatch(..)) => false,\n             Err(Ambiguity(..)) => true,\n             Err(ClosureAmbiguity(..)) => true,\n-            Err(PrivateMatch(..)) => true,\n+            Err(PrivateMatch(..)) => allow_private,\n         }\n     }\n "}, {"sha": "ed2edc30c9d31c826beec26c1733a665bd77be5e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -3053,12 +3053,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some((did, field_ty)) = private_candidate {\n             let struct_path = self.tcx().item_path_str(did);\n-            let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n-            self.tcx().sess.span_err(expr.span, &msg);\n             self.write_ty(expr.id, field_ty);\n+            let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n+            let mut err = self.tcx().sess.struct_span_err(expr.span, &msg);\n+            // Also check if an accessible method exists, which is often what is meant.\n+            if self.method_exists(field.span, field.node, expr_t, expr.id, false) {\n+                err.note(&format!(\"a method `{}` also exists, perhaps you wish to call it\",\n+                                  field.node));\n+            }\n+            err.emit();\n         } else if field.node == keywords::Invalid.name() {\n             self.write_error(expr.id);\n-        } else if self.method_exists(field.span, field.node, expr_t, expr.id) {\n+        } else if self.method_exists(field.span, field.node, expr_t, expr.id, true) {\n             self.type_error_struct(field.span, |actual| {\n                 format!(\"attempted to take value of method `{}` on type \\\n                          `{}`\", field.node, actual)\n@@ -3307,7 +3313,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expr_ty = self.instantiate_type(def.def_id(), path);\n         self.write_ty(expr.id, expr_ty);\n \n-        self.check_expr_struct_fields(expr_ty, expr.span, variant, fields,\n+        self.check_expr_struct_fields(expr_ty, path.span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {\n             self.check_expr_has_type(base_expr, expr_ty);"}, {"sha": "af21c7148ef6de2357886dc62011d977d8f24479", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 162, "deletions": 11, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -45,8 +45,8 @@ Matching with the wrong number of fields has no sensible interpretation:\n \n ```compile_fail\n enum Fruit {\n-    Apple(String, String),\n-    Pear(u32),\n+    Fruit::Apple(String, String),\n+    Fruit::Pear(u32),\n }\n \n let x = Fruit::Apple(String::new(), String::new());\n@@ -77,8 +77,8 @@ enum Number {\n \n // Assuming x is a Number we can pattern match on its contents.\n match x {\n-    Zero(inside) => {},\n-    One(inside) => {},\n+    Number::Zero(inside) => {},\n+    Number::One(inside) => {},\n }\n ```\n \n@@ -3284,6 +3284,164 @@ impl Baz for Bar { } // Note: This is OK\n ```\n \"##,\n \n+E0374: r##\"\n+A struct without a field containing an unsized type cannot implement\n+`CoerceUnsized`. An\n+[unsized type](https://doc.rust-lang.org/book/unsized-types.html)\n+is any type that the compiler doesn't know the length or alignment of at\n+compile time. Any struct containing an unsized type is also unsized.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T: ?Sized> {\n+    a: i32,\n+}\n+\n+// error: Struct `Foo` has no unsized fields that need `CoerceUnsized`.\n+impl<T, U> CoerceUnsized<Foo<U>> for Foo<T>\n+    where T: CoerceUnsized<U> {}\n+```\n+\n+`CoerceUnsized` is used to coerce one struct containing an unsized type\n+into another struct containing a different unsized type. If the struct\n+doesn't have any fields of unsized types then you don't need explicit\n+coercion to get the types you want. To fix this you can either\n+not try to implement `CoerceUnsized` or you can add a field that is\n+unsized to the struct.\n+\n+Example:\n+\n+```\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+// We don't need to impl `CoerceUnsized` here.\n+struct Foo {\n+    a: i32,\n+}\n+\n+// We add the unsized type field to the struct.\n+struct Bar<T: ?Sized> {\n+    a: i32,\n+    b: T,\n+}\n+\n+// The struct has an unsized field so we can implement\n+// `CoerceUnsized` for it.\n+impl<T, U> CoerceUnsized<Bar<U>> for Bar<T>\n+    where T: CoerceUnsized<U> {}\n+```\n+\n+Note that `CoerceUnsized` is mainly used by smart pointers like `Box`, `Rc`\n+and `Arc` to be able to mark that they can coerce unsized types that they\n+are pointing at.\n+\"##,\n+\n+E0375: r##\"\n+A struct with more than one field containing an unsized type cannot implement\n+`CoerceUnsized`. This only occurs when you are trying to coerce one of the\n+types in your struct to another type in the struct. In this case we try to\n+impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n+takes. An [unsized type](https://doc.rust-lang.org/book/unsized-types.html)\n+is any type that the compiler doesn't know the length or alignment of at\n+compile time. Any struct containing an unsized type is also unsized.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T: ?Sized, U: ?Sized> {\n+    a: i32,\n+    b: T,\n+    c: U,\n+}\n+\n+// error: Struct `Foo` has more than one unsized field.\n+impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n+```\n+\n+`CoerceUnsized` only allows for coercion from a structure with a single\n+unsized type field to another struct with a single unsized type field.\n+In fact Rust only allows for a struct to have one unsized type in a struct\n+and that unsized type must be the last field in the struct. So having two\n+unsized types in a single struct is not allowed by the compiler. To fix this\n+use only one field containing an unsized type in the struct and then use\n+multiple structs to manage each unsized type field you need.\n+\n+Example:\n+\n+```\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T: ?Sized> {\n+    a: i32,\n+    b: T,\n+}\n+\n+impl <T, U> CoerceUnsized<Foo<U>> for Foo<T>\n+    where T: CoerceUnsized<U> {}\n+\n+fn coerce_foo<T: CoerceUnsized<U>, U>(t: T) -> Foo<U> {\n+    Foo { a: 12i32, b: t } // we use coercion to get the `Foo<U>` type we need\n+}\n+```\n+\n+\"##,\n+\n+E0376: r##\"\n+The type you are trying to impl `CoerceUnsized` for is not a struct.\n+`CoerceUnsized` can only be implemented for a struct. Unsized types are\n+already able to be coerced without an implementation of `CoerceUnsized`\n+whereas a struct containing an unsized type needs to know the unsized type\n+field it's containing is able to be coerced. An\n+[unsized type](https://doc.rust-lang.org/book/unsized-types.html)\n+is any type that the compiler doesn't know the length or alignment of at\n+compile time. Any struct containing an unsized type is also unsized.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T: ?Sized> {\n+    a: T,\n+}\n+\n+// error: The type `U` is not a struct\n+impl<T, U> CoerceUnsized<U> for Foo<T> {}\n+```\n+\n+The `CoerceUnsized` trait takes a struct type. Make sure the type you are\n+providing to `CoerceUnsized` is a struct with only the last field containing an\n+unsized type.\n+\n+Example:\n+\n+```\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+struct Foo<T> {\n+    a: T,\n+}\n+\n+// The `Foo<U>` is a struct so `CoerceUnsized` can be implemented\n+impl<T, U> CoerceUnsized<Foo<U>> for Foo<T> where T: CoerceUnsized<U> {}\n+```\n+\n+Note that in Rust, structs can only contain an unsized type if the field\n+containing the unsized type is the last and only unsized type field in the\n+struct.\n+\"##,\n+\n E0379: r##\"\n Trait methods cannot be declared `const` by design. For more information, see\n [RFC 911].\n@@ -3777,13 +3935,6 @@ register_diagnostics! {\n     E0320, // recursive overflow during dropck\n     E0328, // cannot implement Unsize explicitly\n //  E0372, // coherence not object safe\n-    E0374, // the trait `CoerceUnsized` may only be implemented for a coercion\n-           // between structures with one field being coerced, none found\n-    E0375, // the trait `CoerceUnsized` may only be implemented for a coercion\n-           // between structures with one field being coerced, but multiple\n-           // fields need coercions\n-    E0376, // the trait `CoerceUnsized` may only be implemented for a coercion\n-           // between structures\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n     E0399, // trait items need to be implemented because the associated"}, {"sha": "6956dc0d901a44a9f235546463a80eb64f522218", "filename": "src/libstd/env.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -452,16 +452,16 @@ pub fn home_dir() -> Option<PathBuf> {\n \n /// Returns the path of a temporary directory.\n ///\n-/// On Unix, returns the value of the 'TMPDIR' environment variable if it is\n-/// set, otherwise for non-Android it returns '/tmp'. If Android, since there\n-/// is no global temporary folder (it is usually allocated per-app), we return\n-/// '/data/local/tmp'.\n-///\n-/// On Windows, returns the value of, in order, the 'TMP', 'TEMP',\n-/// 'USERPROFILE' environment variable  if any are set and not the empty\n-/// string. Otherwise, tmpdir returns the path of the Windows directory. This\n-/// behavior is identical to that of [GetTempPath][msdn], which this function\n-/// uses internally.\n+/// On Unix, returns the value of the `TMPDIR` environment variable if it is\n+/// set, otherwise for non-Android it returns `/tmp`. If Android, since there\n+/// is no global temporary folder (it is usually allocated per-app), it returns\n+/// `/data/local/tmp`.\n+///\n+/// On Windows, returns the value of, in order, the `TMP`, `TEMP`,\n+/// `USERPROFILE` environment variable if any are set and not the empty\n+/// string. Otherwise, `temp_dir` returns the path of the Windows directory.\n+/// This behavior is identical to that of [`GetTempPath`][msdn], which this\n+/// function uses internally.\n ///\n /// [msdn]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992(v=vs.85).aspx\n ///"}, {"sha": "d8a4a69c73cd38ad8f371188ac3127f74be782d2", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -218,7 +218,6 @@ impl Once {\n     /// The closure `f` is yielded a structure which can be used to query the\n     /// state of this `Once` (whether initialization has previously panicked or\n     /// not).\n-    /// poisoned or not.\n     #[unstable(feature = \"once_poison\", issue = \"31688\")]\n     pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`."}, {"sha": "80963a9b735a5e32294d0753d953d8247f27d0e8", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -76,7 +76,7 @@ pub struct Instant(time::Instant);\n /// Distinct from the `Instant` type, this time measurement **is not\n /// monotonic**. This means that you can save a file to the file system, then\n /// save another file to the file system, **and the second file has a\n-/// `SystemTime` measurement earlier than the second**. In other words, an\n+/// `SystemTime` measurement earlier than the first**. In other words, an\n /// operation that happens after another operation in real time may have an\n /// earlier `SystemTime`!\n ///"}, {"sha": "906642d8555806c8f71de42d8426f518fc59c100", "filename": "src/test/compile-fail/E0001.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0001.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = Some(1);\n+    match foo {\n+        Some(bar) => {/* ... */}\n+        None => {/* ... */}\n+        _ => {/* ... */} //~ ERROR E0001\n+    }\n+}"}, {"sha": "0e94c9595d82cf4ea9b9730a4e9c46c134822ce4", "filename": "src/test/compile-fail/E0002.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0002.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = Some(1);\n+\n+    match x { } //~ ERROR E0002\n+}"}, {"sha": "79e53c7a29fdbb360df088a9d62f31095afe4ae4", "filename": "src/test/compile-fail/E0004.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0004.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Terminator {\n+    HastaLaVistaBaby,\n+    TalkToMyHand,\n+}\n+\n+fn main() {\n+    let x = Terminator::HastaLaVistaBaby;\n+\n+    match x { //~ ERROR E0004\n+        Terminator::TalkToMyHand => {}\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "0405bba81b585d81a7a2d0ac63c3827210b46964", "filename": "src/test/compile-fail/E0005.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0005.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = Some(1);\n+    let Some(y) = x; //~ ERROR E0005\n+}"}, {"sha": "bfc0f1afe3ad3d5bca94df7233a60cfeecd9ed9c", "filename": "src/test/compile-fail/E0007.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0007.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0007.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0007.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = Some(\"s\".to_string());\n+    match x {\n+        op_string @ Some(s) => {}, //~ ERROR E0007\n+                                   //~| ERROR E0303\n+        None => {},\n+    }\n+}"}, {"sha": "97dd0f368bd12fd954cf8256b0d624e2cda35702", "filename": "src/test/compile-fail/E0008.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0008.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match Some(\"hi\".to_string()) {\n+        Some(s) if s.len() == 0 => {}, //~ ERROR E0008\n+        _ => {},\n+    }\n+}"}, {"sha": "51f71ea10c9e4e41e290fe87b3db17942951f2fe", "filename": "src/test/compile-fail/E0009.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0009.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    struct X { x: (), }\n+    let x = Some((X { x: () }, X { x: () }));\n+    match x {\n+        Some((y, ref z)) => {}, //~ ERROR E0009\n+        None => panic!()\n+    }\n+}"}, {"sha": "9ae9e795466d28a65554944e7d8a87a5ba669278", "filename": "src/test/compile-fail/E0010.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0010.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+\n+const CON : Box<i32> = box 0; //~ ERROR E0010\n+\n+fn main() {}"}, {"sha": "13f2c23d8c4a9912624fc6a67505262d3a963769", "filename": "src/test/compile-fail/E0017.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0017.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static X: i32 = 1;\n+const C: i32 = 2;\n+\n+const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n+                                     //~| ERROR E0017\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n+                                              //~| ERROR E0017\n+                                              //~| ERROR E0388\n+static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n+                                             //~| ERROR E0017\n+\n+fn main() {}"}, {"sha": "05f126baf9a7036764b1f1ea4a6fc72969d18831", "filename": "src/test/compile-fail/E0023.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0023.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Fruit {\n+    Apple(String, String),\n+    Pear(u32),\n+}\n+\n+fn main() {\n+    let x = Fruit::Apple(String::new(), String::new());\n+    match x {\n+        Fruit::Apple(a) => {}, //~ ERROR E0023\n+        Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n+    }\n+}"}, {"sha": "18f4dcf19d7060742d412da545984b6750426413", "filename": "src/test/compile-fail/E0024.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0024.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0024.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0024.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Number {\n+    Zero,\n+    One(u32)\n+}\n+\n+fn main() {\n+    let x = Number::Zero;\n+    match x {\n+        Number::Zero(inside) => {}, //~ ERROR E0024\n+        Number::One(inside) => {},\n+    }\n+}"}, {"sha": "3f5922cdc02311f9313208e86a73fdc8c7023b81", "filename": "src/test/compile-fail/E0025.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0025.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    a: u8,\n+    b: u8,\n+}\n+\n+fn main() {\n+    let x = Foo { a:1, b:2 };\n+    let Foo { a: x, a: y, b: 0 } = x; //~ ERROR E0025\n+}"}, {"sha": "359c2a822a243d40fca9275d401f0bff8eace55a", "filename": "src/test/compile-fail/E0026.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2FE0026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0026.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Thing {\n+    x: u32,\n+    y: u32\n+}\n+\n+fn main() {\n+    let thing = Thing { x: 0, y: 0 };\n+    match thing {\n+        Thing { x, y, z } => {} //~ ERROR E0026\n+    }\n+}"}, {"sha": "0d59a897ef1af419f71d69f0cc83739cddf5b6e0", "filename": "src/test/compile-fail/issue-26472.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f58fb776a74a44f4fcc2cb57084d33c55530aa4/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs?ref=9f58fb776a74a44f4fcc2cb57084d33c55530aa4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod sub {\n+    pub struct S { len: usize }\n+    impl S {\n+        pub fn new() -> S { S { len: 0 } }\n+        pub fn len(&self) -> usize { self.len }\n+    }\n+}\n+\n+fn main() {\n+    let s = sub::S::new();\n+    let v = s.len;\n+    //~^ ERROR field `len` of struct `sub::S` is private\n+    //~| NOTE a method `len` also exists, perhaps you wish to call it\n+}"}]}