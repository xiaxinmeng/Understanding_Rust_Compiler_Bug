{"sha": "6130b9959c418f48ccc12beab71a5c0e84659b4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzBiOTk1OWM0MThmNDhjY2MxMmJlYWI3MWE1YzBlODQ2NTliNGI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T19:29:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:15:35Z"}, "message": "rustc: use LocalDefId instead of DefIndex in hir::lowering.", "tree": {"sha": "db4c79d9eb14667cda5148e804d7b29c1b732e70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4c79d9eb14667cda5148e804d7b29c1b732e70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6130b9959c418f48ccc12beab71a5c0e84659b4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6130b9959c418f48ccc12beab71a5c0e84659b4b", "html_url": "https://github.com/rust-lang/rust/commit/6130b9959c418f48ccc12beab71a5c0e84659b4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6130b9959c418f48ccc12beab71a5c0e84659b4b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42b2adfab0e77c4662021badcf765a445681a12e", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b2adfab0e77c4662021badcf765a445681a12e", "html_url": "https://github.com/rust-lang/rust/commit/42b2adfab0e77c4662021badcf765a445681a12e"}], "stats": {"total": 129, "additions": 72, "deletions": 57}, "files": [{"sha": "94ae2a0973ae9501133172b60d11ab00d03ebf27", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6130b9959c418f48ccc12beab71a5c0e84659b4b/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6130b9959c418f48ccc12beab71a5c0e84659b4b/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=6130b9959c418f48ccc12beab71a5c0e84659b4b", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -269,7 +269,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(_, FnSig { ref decl, header }, ref generics, ref body) => {\n-                let fn_def_id = self.resolver.definitions().local_def_id(id);\n+                let fn_def_id = self.resolver.definitions().local_def_id(id).expect_local();\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n \n@@ -287,7 +287,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         AnonymousLifetimeMode::PassThrough,\n                         |this, idty| {\n                             let ret_id = asyncness.opt_return_id();\n-                            this.lower_fn_decl(&decl, Some((fn_def_id, idty)), true, ret_id)\n+                            this.lower_fn_decl(\n+                                &decl,\n+                                Some((fn_def_id.to_def_id(), idty)),\n+                                true,\n+                                ret_id,\n+                            )\n                         },\n                     );\n                     let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n@@ -351,7 +356,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self_ty: ref ty,\n                 items: ref impl_items,\n             } => {\n-                let def_id = self.resolver.definitions().local_def_id(id);\n+                let def_id = self.resolver.definitions().local_def_id(id).expect_local();\n \n                 // Lower the \"impl header\" first. This ordering is important\n                 // for in-band lifetimes! Consider `'a` here:\n@@ -648,7 +653,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n-        let def_id = self.resolver.definitions().local_def_id(i.id);\n+        let def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n         hir::ForeignItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n@@ -749,7 +754,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem<'hir> {\n-        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n+        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n@@ -814,7 +819,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem<'hir> {\n-        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n+        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n@@ -1211,7 +1216,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         generics: &Generics,\n         sig: &FnSig,\n-        fn_def_id: DefId,\n+        fn_def_id: LocalDefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n     ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n@@ -1223,7 +1228,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             |this, idty| {\n                 this.lower_fn_decl(\n                     &sig.decl,\n-                    Some((fn_def_id, idty)),\n+                    Some((fn_def_id.to_def_id(), idty)),\n                     impl_trait_return_allow,\n                     is_async,\n                 )"}, {"sha": "3056612ee299b9554a2c95772bc3a2eb8d22771e", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 58, "deletions": 48, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/6130b9959c418f48ccc12beab71a5c0e84659b4b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6130b9959c418f48ccc12beab71a5c0e84659b4b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=6130b9959c418f48ccc12beab71a5c0e84659b4b", "patch": "@@ -53,7 +53,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n@@ -160,7 +160,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     type_def_lifetime_params: DefIdMap<usize>,\n \n-    current_hir_id_owner: Vec<(DefIndex, u32)>,\n+    current_hir_id_owner: Vec<(LocalDefId, u32)>,\n     item_local_id_counters: NodeMap<u32>,\n     node_id_to_hir_id: IndexVec<NodeId, hir::HirId>,\n \n@@ -290,7 +290,7 @@ pub fn lower_crate<'a, 'hir>(\n         anonymous_lifetime_mode: AnonymousLifetimeMode::PassThrough,\n         type_def_lifetime_params: Default::default(),\n         current_module: hir::CRATE_HIR_ID,\n-        current_hir_id_owner: vec![(CRATE_DEF_INDEX, 0)],\n+        current_hir_id_owner: vec![(LocalDefId { local_def_index: CRATE_DEF_INDEX }, 0)],\n         item_local_id_counters: Default::default(),\n         node_id_to_hir_id: IndexVec::new(),\n         generator_kind: None,\n@@ -407,12 +407,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl MiscCollector<'_, '_, '_> {\n-            fn allocate_use_tree_hir_id_counters(&mut self, tree: &UseTree, owner: DefIndex) {\n+            fn allocate_use_tree_hir_id_counters(&mut self, tree: &UseTree, owner: LocalDefId) {\n                 match tree.kind {\n                     UseTreeKind::Simple(_, id1, id2) => {\n                         for &id in &[id1, id2] {\n                             self.lctx.resolver.definitions().create_def_with_parent(\n-                                owner,\n+                                owner.local_def_index,\n                                 id,\n                                 DefPathData::Misc,\n                                 ExpnId::root(),\n@@ -425,7 +425,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     UseTreeKind::Nested(ref trees) => {\n                         for &(ref use_tree, id) in trees {\n                             let hir_id = self.lctx.allocate_hir_id_counter(id);\n-                            self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                            self.allocate_use_tree_hir_id_counters(\n+                                use_tree,\n+                                hir_id.owner_local_def_id(),\n+                            );\n                         }\n                     }\n                 }\n@@ -463,7 +466,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     | ItemKind::Enum(_, ref generics)\n                     | ItemKind::TyAlias(_, ref generics, ..)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n-                        let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n+                        let def_id =\n+                            self.lctx.resolver.definitions().local_def_id(item.id).expect_local();\n                         let count = generics\n                             .params\n                             .iter()\n@@ -472,10 +476,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 _ => false,\n                             })\n                             .count();\n-                        self.lctx.type_def_lifetime_params.insert(def_id, count);\n+                        self.lctx.type_def_lifetime_params.insert(def_id.to_def_id(), count);\n                     }\n                     ItemKind::Use(ref use_tree) => {\n-                        self.allocate_use_tree_hir_id_counters(use_tree, hir_id.owner);\n+                        self.allocate_use_tree_hir_id_counters(\n+                            use_tree,\n+                            hir_id.owner_local_def_id(),\n+                        );\n                     }\n                     _ => {}\n                 }\n@@ -598,12 +605,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .item_local_id_counters\n             .insert(owner, HIR_ID_COUNTER_LOCKED)\n             .unwrap_or_else(|| panic!(\"no `item_local_id_counters` entry for {:?}\", owner));\n-        let def_index = self.resolver.definitions().opt_def_index(owner).unwrap();\n-        self.current_hir_id_owner.push((def_index, counter));\n+        let def_id = self.resolver.definitions().local_def_id(owner).expect_local();\n+        self.current_hir_id_owner.push((def_id, counter));\n         let ret = f(self);\n-        let (new_def_index, new_counter) = self.current_hir_id_owner.pop().unwrap();\n+        let (new_def_id, new_counter) = self.current_hir_id_owner.pop().unwrap();\n \n-        debug_assert!(def_index == new_def_index);\n+        debug_assert!(def_id == new_def_id);\n         debug_assert!(new_counter >= counter);\n \n         let prev = self.item_local_id_counters.insert(owner, new_counter).unwrap();\n@@ -619,11 +626,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// properly. Calling the method twice with the same `NodeId` is fine though.\n     fn lower_node_id(&mut self, ast_node_id: NodeId) -> hir::HirId {\n         self.lower_node_id_generic(ast_node_id, |this| {\n-            let &mut (def_index, ref mut local_id_counter) =\n+            let &mut (def_id, ref mut local_id_counter) =\n                 this.current_hir_id_owner.last_mut().unwrap();\n             let local_id = *local_id_counter;\n             *local_id_counter += 1;\n-            hir::HirId { owner: def_index, local_id: hir::ItemLocalId::from_u32(local_id) }\n+            hir::HirId {\n+                owner: def_id.local_def_index,\n+                local_id: hir::ItemLocalId::from_u32(local_id),\n+            }\n         })\n     }\n \n@@ -724,7 +734,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// parameter while `f` is running (and restored afterwards).\n     fn collect_in_band_defs<T>(\n         &mut self,\n-        parent_id: DefId,\n+        parent_def_id: LocalDefId,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n         f: impl FnOnce(&mut Self) -> (Vec<hir::GenericParam<'hir>>, T),\n     ) -> (Vec<hir::GenericParam<'hir>>, T) {\n@@ -744,7 +754,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let params = lifetimes_to_define\n             .into_iter()\n-            .map(|(span, hir_name)| self.lifetime_to_generic_param(span, hir_name, parent_id.index))\n+            .map(|(span, hir_name)| self.lifetime_to_generic_param(span, hir_name, parent_def_id))\n             .chain(in_band_ty_params.into_iter())\n             .collect();\n \n@@ -756,7 +766,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         span: Span,\n         hir_name: ParamName,\n-        parent_index: DefIndex,\n+        parent_def_id: LocalDefId,\n     ) -> hir::GenericParam<'hir> {\n         let node_id = self.resolver.next_node_id();\n \n@@ -771,7 +781,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // Add a definition for the in-band lifetime def.\n         self.resolver.definitions().create_def_with_parent(\n-            parent_index,\n+            parent_def_id.local_def_index,\n             node_id,\n             DefPathData::LifetimeNs(str_name),\n             ExpnId::root(),\n@@ -860,13 +870,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn add_in_band_defs<T>(\n         &mut self,\n         generics: &Generics,\n-        parent_id: DefId,\n+        parent_def_id: LocalDefId,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n         f: impl FnOnce(&mut Self, &mut Vec<hir::GenericParam<'hir>>) -> T,\n     ) -> (hir::Generics<'hir>, T) {\n         let (in_band_defs, (mut lowered_generics, res)) =\n             self.with_in_scope_lifetime_defs(&generics.params, |this| {\n-                this.collect_in_band_defs(parent_id, anonymous_lifetime_mode, |this| {\n+                this.collect_in_band_defs(parent_def_id, anonymous_lifetime_mode, |this| {\n                     let mut params = Vec::new();\n                     // Note: it is necessary to lower generics *before* calling `f`.\n                     // When lowering `async fn`, there's a final step when lowering\n@@ -1048,9 +1058,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n                     let impl_trait_node_id = self.resolver.next_node_id();\n-                    let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n+                    let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n                     self.resolver.definitions().create_def_with_parent(\n-                        parent_def_index,\n+                        parent_def_id.local_def_index,\n                         impl_trait_node_id,\n                         DefPathData::ImplTrait,\n                         ExpnId::root(),\n@@ -1111,12 +1121,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                             // Construct a AnonConst where the expr is the \"ty\"'s path.\n \n-                            let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n+                            let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n                             let node_id = self.resolver.next_node_id();\n \n                             // Add a definition for the in-band const def.\n                             self.resolver.definitions().create_def_with_parent(\n-                                parent_def_index,\n+                                parent_def_id.local_def_index,\n                                 node_id,\n                                 DefPathData::AnonConst,\n                                 ExpnId::root(),\n@@ -1278,8 +1288,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n                         // Add a definition for the in-band `Param`.\n-                        let def_index =\n-                            self.resolver.definitions().opt_def_index(def_node_id).unwrap();\n+                        let def_id =\n+                            self.resolver.definitions().local_def_id(def_node_id).expect_local();\n \n                         let hir_bounds = self.lower_param_bounds(\n                             bounds,\n@@ -1304,7 +1314,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             None,\n                             self.arena.alloc(hir::Path {\n                                 span,\n-                                res: Res::Def(DefKind::TyParam, DefId::local(def_index)),\n+                                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n                                 segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n                             }),\n                         ))\n@@ -1367,18 +1377,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_index =\n-            self.resolver.definitions().opt_def_index(opaque_ty_node_id).unwrap();\n+        let opaque_ty_def_id =\n+            self.resolver.definitions().local_def_id(opaque_ty_node_id).expect_local();\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n \n         let hir_bounds = self.with_hir_id_owner(opaque_ty_node_id, lower_bounds);\n \n-        let (lifetimes, lifetime_defs) = self.lifetimes_from_impl_trait_bounds(\n-            opaque_ty_node_id,\n-            opaque_ty_def_index,\n-            &hir_bounds,\n-        );\n+        let (lifetimes, lifetime_defs) =\n+            self.lifetimes_from_impl_trait_bounds(opaque_ty_node_id, opaque_ty_def_id, &hir_bounds);\n \n         debug!(\"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes,);\n \n@@ -1396,7 +1403,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 origin,\n             };\n \n-            trace!(\"lower_opaque_impl_trait: {:#?}\", opaque_ty_def_index);\n+            trace!(\"lower_opaque_impl_trait: {:#?}\", opaque_ty_def_id);\n             let opaque_ty_id =\n                 lctx.generate_opaque_type(opaque_ty_node_id, opaque_ty_item, span, opaque_ty_span);\n \n@@ -1437,22 +1444,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lifetimes_from_impl_trait_bounds(\n         &mut self,\n         opaque_ty_id: NodeId,\n-        parent_index: DefIndex,\n+        parent_def_id: LocalDefId,\n         bounds: hir::GenericBounds<'hir>,\n     ) -> (&'hir [hir::GenericArg<'hir>], &'hir [hir::GenericParam<'hir>]) {\n         debug!(\n             \"lifetimes_from_impl_trait_bounds(opaque_ty_id={:?}, \\\n-             parent_index={:?}, \\\n+             parent_def_id={:?}, \\\n              bounds={:#?})\",\n-            opaque_ty_id, parent_index, bounds,\n+            opaque_ty_id, parent_def_id, bounds,\n         );\n \n         // This visitor walks over `impl Trait` bounds and creates defs for all lifetimes that\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n         // E.g., `'a`, `'b`, but not `'c` in `impl for<'c> SomeTrait<'a, 'b, 'c>`.\n         struct ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n             context: &'r mut LoweringContext<'a, 'hir>,\n-            parent: DefIndex,\n+            parent: LocalDefId,\n             opaque_ty_id: NodeId,\n             collect_elided_lifetimes: bool,\n             currently_bound_lifetimes: Vec<hir::LifetimeName>,\n@@ -1557,7 +1564,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let hir_id =\n                         self.context.lower_node_id_with_owner(def_node_id, self.opaque_ty_id);\n                     self.context.resolver.definitions().create_def_with_parent(\n-                        self.parent,\n+                        self.parent.local_def_index,\n                         def_node_id,\n                         DefPathData::LifetimeNs(name.ident().name),\n                         ExpnId::root(),\n@@ -1590,7 +1597,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let mut lifetime_collector = ImplTraitLifetimeCollector {\n             context: self,\n-            parent: parent_index,\n+            parent: parent_def_id,\n             opaque_ty_id,\n             collect_elided_lifetimes: true,\n             currently_bound_lifetimes: Vec::new(),\n@@ -1620,12 +1627,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 visitor.visit_ty(ty);\n             }\n         }\n-        let parent_def_id = DefId::local(self.current_hir_id_owner.last().unwrap().0);\n+        let parent_def_id = self.current_hir_id_owner.last().unwrap().0;\n         let ty = l.ty.as_ref().map(|t| {\n             self.lower_ty(\n                 t,\n                 if self.sess.features_untracked().impl_trait_in_bindings {\n-                    ImplTraitContext::OpaqueTy(Some(parent_def_id), hir::OpaqueTyOrigin::Misc)\n+                    ImplTraitContext::OpaqueTy(\n+                        Some(parent_def_id.to_def_id()),\n+                        hir::OpaqueTyOrigin::Misc,\n+                    )\n                 } else {\n                     ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                 },\n@@ -1797,8 +1807,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, span, None);\n \n-        let opaque_ty_def_index =\n-            self.resolver.definitions().opt_def_index(opaque_ty_node_id).unwrap();\n+        let opaque_ty_def_id =\n+            self.resolver.definitions().local_def_id(opaque_ty_node_id).expect_local();\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n \n@@ -1886,7 +1896,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             let generic_params =\n                 this.arena.alloc_from_iter(lifetime_params.iter().map(|(span, hir_name)| {\n-                    this.lifetime_to_generic_param(*span, *hir_name, opaque_ty_def_index)\n+                    this.lifetime_to_generic_param(*span, *hir_name, opaque_ty_def_id)\n                 }));\n \n             let opaque_ty_item = hir::OpaqueTy {\n@@ -1900,7 +1910,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 origin: hir::OpaqueTyOrigin::AsyncFn,\n             };\n \n-            trace!(\"exist ty from async fn def index: {:#?}\", opaque_ty_def_index);\n+            trace!(\"exist ty from async fn def id: {:#?}\", opaque_ty_def_id);\n             let opaque_ty_id =\n                 this.generate_opaque_type(opaque_ty_node_id, opaque_ty_item, span, opaque_ty_span);\n "}]}