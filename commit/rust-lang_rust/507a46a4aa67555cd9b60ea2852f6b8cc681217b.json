{"sha": "507a46a4aa67555cd9b60ea2852f6b8cc681217b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2E0NmE0YWE2NzU1NWNkOWI2MGVhMjg1MmY2YjhjYzY4MTIxN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T05:53:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-17T05:53:55Z"}, "message": "Auto merge of #47917 - davidtwco:issue-47703, r=nikomatsakis\n\nFixes NLL: error from URL crate\n\nFixes #47703.\n\nr? @nikomatsakis", "tree": {"sha": "fff7d1b651f9c6a1b7cba389d5856a8468a28029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff7d1b651f9c6a1b7cba389d5856a8468a28029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507a46a4aa67555cd9b60ea2852f6b8cc681217b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507a46a4aa67555cd9b60ea2852f6b8cc681217b", "html_url": "https://github.com/rust-lang/rust/commit/507a46a4aa67555cd9b60ea2852f6b8cc681217b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507a46a4aa67555cd9b60ea2852f6b8cc681217b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "554fe71ac6172ce9c0baeabbfd692280dcc893fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/554fe71ac6172ce9c0baeabbfd692280dcc893fe", "html_url": "https://github.com/rust-lang/rust/commit/554fe71ac6172ce9c0baeabbfd692280dcc893fe"}, {"sha": "98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2", "html_url": "https://github.com/rust-lang/rust/commit/98904c2ecc580b27f87e43dbe3e7f6995a2ec3a2"}], "stats": {"total": 141, "additions": 134, "deletions": 7}, "files": [{"sha": "650f99828ae483592fc4b4fb9ab4f5158183be70", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 73, "deletions": 7, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=507a46a4aa67555cd9b60ea2852f6b8cc681217b", "patch": "@@ -463,13 +463,20 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.access_place(\n-                    ContextKind::Drop.new(loc),\n-                    (drop_place, span),\n-                    (Deep, Write(WriteKind::StorageDeadOrDrop)),\n-                    LocalMutationIsAllowed::Yes,\n-                    flow_state,\n-                );\n+                let gcx = self.tcx.global_tcx();\n+\n+                // Compute the type with accurate region information.\n+                let drop_place_ty = drop_place.ty(self.mir, self.tcx);\n+\n+                // Erase the regions.\n+                let drop_place_ty = self.tcx.erase_regions(&drop_place_ty).to_ty(self.tcx);\n+\n+                // \"Lift\" into the gcx -- once regions are erased, this type should be in the\n+                // global arenas; this \"lift\" operation basically just asserts that is true, but\n+                // that is useful later.\n+                let drop_place_ty = gcx.lift(&drop_place_ty).unwrap();\n+\n+                self.visit_terminator_drop(loc, term, flow_state, drop_place, drop_place_ty, span);\n             }\n             TerminatorKind::DropAndReplace {\n                 location: ref drop_place,\n@@ -717,6 +724,65 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n              self.tcx.sess.opts.debugging_opts.two_phase_beyond_autoref)\n     }\n \n+    /// Invokes `access_place` as appropriate for dropping the value\n+    /// at `drop_place`. Note that the *actual* `Drop` in the MIR is\n+    /// always for a variable (e.g., `Drop(x)`) -- but we recursively\n+    /// break this variable down into subpaths (e.g., `Drop(x.foo)`)\n+    /// to indicate more precisely which fields might actually be\n+    /// accessed by a destructor.\n+    fn visit_terminator_drop(\n+        &mut self,\n+        loc: Location,\n+        term: &Terminator<'tcx>,\n+        flow_state: &Flows<'cx, 'gcx, 'tcx>,\n+        drop_place: &Place<'tcx>,\n+        erased_drop_place_ty: ty::Ty<'gcx>,\n+        span: Span,\n+    ) {\n+        match erased_drop_place_ty.sty {\n+            // When a struct is being dropped, we need to check\n+            // whether it has a destructor, if it does, then we can\n+            // call it, if it does not then we need to check the\n+            // individual fields instead. This way if `foo` has a\n+            // destructor but `bar` does not, we will only check for\n+            // borrows of `x.foo` and not `x.bar`. See #47703.\n+            ty::TyAdt(def, substs) if def.is_struct() && !def.has_dtor(self.tcx) => {\n+                for (index, field) in def.all_fields().enumerate() {\n+                    let gcx = self.tcx.global_tcx();\n+                    let field_ty = field.ty(gcx, substs);\n+                    let field_ty = gcx.normalize_associated_type_in_env(&field_ty, self.param_env);\n+                    let place = drop_place.clone().field(Field::new(index), field_ty);\n+\n+                    self.visit_terminator_drop(\n+                        loc,\n+                        term,\n+                        flow_state,\n+                        &place,\n+                        field_ty,\n+                        span,\n+                    );\n+                }\n+            },\n+            _ => {\n+                // We have now refined the type of the value being\n+                // dropped (potentially) to just the type of a\n+                // subfield; so check whether that field's type still\n+                // \"needs drop\". If so, we assume that the destructor\n+                // may access any data it likes (i.e., a Deep Write).\n+                let gcx = self.tcx.global_tcx();\n+                if erased_drop_place_ty.needs_drop(gcx, self.param_env) {\n+                    self.access_place(\n+                        ContextKind::Drop.new(loc),\n+                        (drop_place, span),\n+                        (Deep, Write(WriteKind::StorageDeadOrDrop)),\n+                        LocalMutationIsAllowed::Yes,\n+                        flow_state,\n+                    );\n+                }\n+            },\n+        }\n+    }\n+\n     /// Checks an access to the given place to see if it is allowed. Examines the set of borrows\n     /// that are in scope, as well as which paths have been initialized, to ensure that (a) the\n     /// place is initialized and (b) it is not borrowed in some way that would prevent this"}, {"sha": "facdee5cc176fb8935a516ff425bdcb7dbd8b04b", "filename": "src/test/run-pass/issue-47703-1.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Ftest%2Frun-pass%2Fissue-47703-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Ftest%2Frun-pass%2Fissue-47703-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47703-1.rs?ref=507a46a4aa67555cd9b60ea2852f6b8cc681217b", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct AtomicRefMut<'a> {\n+    value: &'a mut i32,\n+    borrow: AtomicBorrowRefMut,\n+}\n+\n+struct AtomicBorrowRefMut {\n+}\n+\n+impl Drop for AtomicBorrowRefMut {\n+    fn drop(&mut self) {\n+    }\n+}\n+\n+fn map(orig: AtomicRefMut) -> AtomicRefMut {\n+    AtomicRefMut {\n+        value: orig.value,\n+        borrow: orig.borrow,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2146986377a0522f3263830511e1220bcb3756aa", "filename": "src/test/run-pass/issue-47703.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Ftest%2Frun-pass%2Fissue-47703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507a46a4aa67555cd9b60ea2852f6b8cc681217b/src%2Ftest%2Frun-pass%2Fissue-47703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47703.rs?ref=507a46a4aa67555cd9b60ea2852f6b8cc681217b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+struct MyStruct<'a> {\n+    field: &'a mut (),\n+    field2: WithDrop\n+}\n+\n+struct WithDrop;\n+\n+impl Drop for WithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+impl<'a> MyStruct<'a> {\n+    fn consume(self) -> &'a mut () { self.field }\n+}\n+\n+fn main() {}"}]}