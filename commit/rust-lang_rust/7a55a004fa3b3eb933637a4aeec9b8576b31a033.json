{"sha": "7a55a004fa3b3eb933637a4aeec9b8576b31a033", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNTVhMDA0ZmEzYjNlYjkzMzYzN2E0YWVlYzliODU3NmIzMWEwMzM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T03:49:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T03:51:32Z"}, "message": "Make `-Z treat-err-as-bug` take a number of errors to be emitted\n\n`-Z treat-err-as-bug=0` will cause `rustc` to panic after the first\nerror is reported. `-Z treat-err-as-bug=2` will cause `rustc` to\npanic after 3 errors have been reported.", "tree": {"sha": "7656b26cd67da6ebb110938d9368a32a5d304ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7656b26cd67da6ebb110938d9368a32a5d304ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a55a004fa3b3eb933637a4aeec9b8576b31a033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a55a004fa3b3eb933637a4aeec9b8576b31a033", "html_url": "https://github.com/rust-lang/rust/commit/7a55a004fa3b3eb933637a4aeec9b8576b31a033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a55a004fa3b3eb933637a4aeec9b8576b31a033/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "html_url": "https://github.com/rust-lang/rust/commit/f22dca0a1bef4141e75326caacc3cd59f3d5be8e"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "dfd8e4dd571b5d0e32cab7bfb7b8a3b7a2e8a91e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -1234,7 +1234,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"parse only; do not compile, assemble, or link\"),\n     no_codegen: bool = (false, parse_bool, [TRACKED],\n         \"run all passes except codegen; no output\"),\n-    treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n+    treat_err_as_bug: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"treat all errors that occur as bugs\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n@@ -3212,7 +3212,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.treat_err_as_bug = true;\n+        opts.debugging_opts.treat_err_as_bug = Some(1);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "751fa7e95e3a835b38339b1f013dcd882fb15183", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -1315,7 +1315,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     errors::FatalError.raise();\n }\n@@ -1330,7 +1330,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, true, false))\n         }\n     };\n-    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n "}, {"sha": "c84b38cde81853f39aae0869024b6f26e700c361", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -247,7 +247,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n \n impl<B: WriteBackendMethods> CodegenContext<B> {\n     pub fn create_diag_handler(&self) -> Handler {\n-        Handler::with_emitter(true, false, Box::new(self.diag_emitter.clone()))\n+        Handler::with_emitter(true, None, Box::new(self.diag_emitter.clone()))\n     }\n \n     pub fn config(&self, kind: ModuleKind) -> &ModuleConfig {"}, {"sha": "656d8e463dbd044806d6f540d42039a536791d13", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -148,7 +148,7 @@ pub fn run<F>(run_compiler: F) -> isize\n                                 true,\n                                 false\n                             );\n-                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        let handler = errors::Handler::with_emitter(true, None, Box::new(emitter));\n                         handler.emit(&MultiSpan::new(),\n                                      \"aborting due to previous error(s)\",\n                                      errors::Level::Fatal);\n@@ -1327,7 +1327,7 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) -> Result<(), CompilationFail\n                                                                 None,\n                                                                 false,\n                                                                 false));\n-            let handler = errors::Handler::with_emitter(true, false, emitter);\n+            let handler = errors::Handler::with_emitter(true, None, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print."}, {"sha": "a995d808bc41e927ec95b22cd1202312cb0d72f9", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -103,7 +103,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// Buffers the diagnostic for later emission, unless handler\n     /// has disabled such buffering.\n     pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n-        if self.handler.flags.dont_buffer_diagnostics || self.handler.flags.treat_err_as_bug {\n+        if self.handler.flags.dont_buffer_diagnostics || self.handler.treat_err_as_bug() {\n             self.emit();\n             return;\n         }"}, {"sha": "ae634018b9353c2429790ee0f7df145c5a11a929", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -330,7 +330,7 @@ pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     /// If true, error-level diagnostics are upgraded to bug-level.\n     /// (rustc: see `-Z treat-err-as-bug`)\n-    pub treat_err_as_bug: bool,\n+    pub treat_err_as_bug: Option<usize>,\n     /// If true, immediately emit diagnostics that would otherwise be buffered.\n     /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n     pub dont_buffer_diagnostics: bool,\n@@ -360,7 +360,7 @@ impl Drop for Handler {\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n-                            treat_err_as_bug: bool,\n+                            treat_err_as_bug: Option<usize>,\n                             cm: Option<Lrc<SourceMapperDyn>>)\n                             -> Handler {\n         Handler::with_tty_emitter_and_flags(\n@@ -382,7 +382,7 @@ impl Handler {\n     }\n \n     pub fn with_emitter(can_emit_warnings: bool,\n-                        treat_err_as_bug: bool,\n+                        treat_err_as_bug: Option<usize>,\n                         e: Box<dyn Emitter + sync::Send>)\n                         -> Handler {\n         Handler::with_emitter_and_flags(\n@@ -516,7 +516,7 @@ impl Handler {\n     }\n \n     fn panic_if_treat_err_as_bug(&self) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             panic!(\"encountered error with `-Z treat_err_as_bug\");\n         }\n     }\n@@ -558,7 +558,7 @@ impl Handler {\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n@@ -593,14 +593,14 @@ impl Handler {\n         DiagnosticBuilder::new(self, FailureNote, msg).emit()\n     }\n     pub fn fatal(&self, msg: &str) -> FatalError {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         DiagnosticBuilder::new(self, Fatal, msg).emit();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n-        if self.flags.treat_err_as_bug {\n+        if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n         let mut db = DiagnosticBuilder::new(self, Error, msg);\n@@ -610,6 +610,9 @@ impl Handler {\n         let mut db = DiagnosticBuilder::new(self, Warning, msg);\n         db.emit();\n     }\n+    fn treat_err_as_bug(&self) -> bool {\n+        self.flags.treat_err_as_bug.map(|c| self.err_count() >= c).unwrap_or(false)\n+    }\n     pub fn note_without_error(&self, msg: &str) {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.emit();\n@@ -624,8 +627,8 @@ impl Handler {\n     }\n \n     fn bump_err_count(&self) {\n-        self.panic_if_treat_err_as_bug();\n         self.err_count.fetch_add(1, SeqCst);\n+        self.panic_if_treat_err_as_bug();\n     }\n \n     pub fn err_count(&self) -> usize {\n@@ -643,7 +646,13 @@ impl Handler {\n             _ => format!(\"aborting due to {} previous errors\", self.err_count())\n         };\n \n-        let _ = self.fatal(&s);\n+        let _ = if self.treat_err_as_bug() {\n+            self.fatal(&s)\n+        } else {\n+            // only emit one backtrace when using `-Z treat-err-as-bug=X`\n+            DiagnosticBuilder::new(self, Fatal, &s).emit();\n+            FatalError\n+        };\n \n         let can_show_explain = self.emitter.borrow().should_show_explain();\n         let are_there_diagnostics = !self.emitted_diagnostic_codes.borrow().is_empty();"}, {"sha": "f4074bcdba6f28d648b181aea3f1f6dd30ca4740", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -266,7 +266,7 @@ impl DocAccessLevels for AccessLevels<DefId> {\n /// will be created for the handler.\n pub fn new_handler(error_format: ErrorOutputType,\n                    source_map: Option<Lrc<source_map::SourceMap>>,\n-                   treat_err_as_bug: bool,\n+                   treat_err_as_bug: Option<usize>,\n                    ui_testing: bool,\n ) -> errors::Handler {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so"}, {"sha": "9cfcfcd6241ad46f9e74b604a6ceb1194afd0254", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a55a004fa3b3eb933637a4aeec9b8576b31a033/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=7a55a004fa3b3eb933637a4aeec9b8576b31a033", "patch": "@@ -53,7 +53,7 @@ impl ParseSess {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(ColorConfig::Auto,\n                                                 true,\n-                                                false,\n+                                                None,\n                                                 Some(cm.clone()));\n         ParseSess::with_span_handler(handler, cm)\n     }"}]}