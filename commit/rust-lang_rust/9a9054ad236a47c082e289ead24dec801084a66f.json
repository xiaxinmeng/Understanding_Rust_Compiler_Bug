{"sha": "9a9054ad236a47c082e289ead24dec801084a66f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTA1NGFkMjM2YTQ3YzA4MmUyODllYWQyNGRlYzgwMTA4NGE2NmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T11:43:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T11:43:17Z"}, "message": "Disable define_function to prevent crashing on things cranelift doesn't yet support", "tree": {"sha": "577b9bfeca9612caa51296b116ca2d39a2ed4c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/577b9bfeca9612caa51296b116ca2d39a2ed4c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9054ad236a47c082e289ead24dec801084a66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9054ad236a47c082e289ead24dec801084a66f", "html_url": "https://github.com/rust-lang/rust/commit/9a9054ad236a47c082e289ead24dec801084a66f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9054ad236a47c082e289ead24dec801084a66f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9615f3a1372e715772815292cfab23a456932f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/9615f3a1372e715772815292cfab23a456932f63", "html_url": "https://github.com/rust-lang/rust/commit/9615f3a1372e715772815292cfab23a456932f63"}], "stats": {"total": 49, "additions": 27, "deletions": 22}, "files": [{"sha": "7dc816aa7dc9118e16524570acda523addf6cc6b", "filename": "example.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a9054ad236a47c082e289ead24dec801084a66f/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9054ad236a47c082e289ead24dec801084a66f/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=9a9054ad236a47c082e289ead24dec801084a66f", "patch": "@@ -1,5 +1,6 @@\n #![feature(no_core, lang_items)]\n #![no_core]\n+#![allow(dead_code)]\n \n #[lang=\"sized\"]\n trait Sized {}\n@@ -52,14 +53,14 @@ fn bcd(b: bool, a: u8) -> u8 {\n }\n \n // FIXME make calls work\n-/*fn call() {\n+fn call() {\n     abc(42);\n }\n \n fn indirect_call() {\n     let f: fn() = call;\n     f();\n-}*/\n+}\n \n enum BoolOption {\n     Some(bool),"}, {"sha": "31eb6e462bfd9fded5d592a93b3bf6801251af69", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a9054ad236a47c082e289ead24dec801084a66f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9054ad236a47c082e289ead24dec801084a66f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9a9054ad236a47c082e289ead24dec801084a66f", "patch": "@@ -50,7 +50,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n                 }\n \n                 context.func = f;\n-                cx.module.define_function(func_id, context).unwrap();\n+                // TODO: cranelift doesn't yet support some of the things needed\n+                // cx.module.define_function(func_id, context).unwrap();\n+\n                 context.clear();\n             }\n             inst => cx.tcx.sess.warn(&format!(\"Unimplemented instance {:?}\", inst)),"}, {"sha": "e02c431b21b6f4ef70541cac6be9fa077161196c", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9a9054ad236a47c082e289ead24dec801084a66f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9054ad236a47c082e289ead24dec801084a66f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9a9054ad236a47c082e289ead24dec801084a66f", "patch": "@@ -192,27 +192,29 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         tcx.sess.warn(\"Compiled everything\");\n \n-        module.finalize_all();\n-\n-        tcx.sess.warn(\"Finalized everything\");\n-\n-        for (inst, func_id) in def_id_fn_id_map.iter() {\n-            //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n-            if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n-                continue;\n+        // TODO: this doesn't work most of the time\n+        if false {\n+            module.finalize_all();\n+            tcx.sess.warn(\"Finalized everything\");\n+\n+            for (inst, func_id) in def_id_fn_id_map.iter() {\n+                //if tcx.absolute_item_path_str(inst.def_id()) != \"example::ret_42\" {\n+                if tcx.absolute_item_path_str(inst.def_id()) != \"example::option_unwrap_or\" {\n+                    continue;\n+                }\n+                let finalized_function: *const u8 = module.finalize_function(*func_id);\n+                /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n+                let mut res = 0u32;\n+                f(&mut res);\n+                tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n+                let f: extern \"C\" fn(&mut bool, &u8, bool) = unsafe { ::std::mem::transmute(finalized_function) };\n+                let mut res = false;\n+                f(&mut res, &3, false);\n+                tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));\n             }\n-            let finalized_function: *const u8 = module.finalize_function(*func_id);\n-            /*let f: extern \"C\" fn(&mut u32) = unsafe { ::std::mem::transmute(finalized_function) };\n-            let mut res = 0u32;\n-            f(&mut res);\n-            tcx.sess.warn(&format!(\"ret_42 returned {}\", res));*/\n-            let f: extern \"C\" fn(&mut bool, &u8, bool) = unsafe { ::std::mem::transmute(finalized_function) };\n-            let mut res = false;\n-            f(&mut res, &3, false);\n-            tcx.sess.warn(&format!(\"option_unwrap_or returned {}\", res));\n-        }\n \n-        module.finish();\n+            module.finish();\n+        }\n \n         tcx.sess.fatal(\"unimplemented\");\n "}]}