{"sha": "c476b55e528ce854b6198de5bcfdd20b08440c9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NzZiNTVlNTI4Y2U4NTRiNjE5OGRlNWJjZmRkMjBiMDg0NDBjOWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-20T20:35:03Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-26T22:34:10Z"}, "message": "proc_macro: Update `Span::def_site` to use the proc macro definition location\n\nWhich is no longer dummy and is available from metadata now.", "tree": {"sha": "d59e39ff632190cda0426a7cde8ac3658a9c641e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59e39ff632190cda0426a7cde8ac3658a9c641e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c476b55e528ce854b6198de5bcfdd20b08440c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c476b55e528ce854b6198de5bcfdd20b08440c9d", "html_url": "https://github.com/rust-lang/rust/commit/c476b55e528ce854b6198de5bcfdd20b08440c9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c476b55e528ce854b6198de5bcfdd20b08440c9d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2065ee9accc87a461897d06414195cfa3e92fb89", "url": "https://api.github.com/repos/rust-lang/rust/commits/2065ee9accc87a461897d06414195cfa3e92fb89", "html_url": "https://github.com/rust-lang/rust/commit/2065ee9accc87a461897d06414195cfa3e92fb89"}], "stats": {"total": 200, "additions": 151, "deletions": 49}, "files": [{"sha": "1a26b17dac782fae18ee1ff86c3b872e17162a33", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -360,12 +360,11 @@ pub(crate) struct Rustc<'a> {\n \n impl<'a> Rustc<'a> {\n     pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n-        // No way to determine def location for a proc macro right now, so use call location.\n-        let location = cx.current_expansion.id.expn_data().call_site;\n+        let expn_data = cx.current_expansion.id.expn_data();\n         Rustc {\n             sess: cx.parse_sess,\n-            def_site: cx.with_def_site_ctxt(location),\n-            call_site: cx.with_call_site_ctxt(location),\n+            def_site: cx.with_def_site_ctxt(expn_data.def_site),\n+            call_site: cx.with_call_site_ctxt(expn_data.call_site),\n         }\n     }\n "}, {"sha": "47243b1ac5678cfde8f1f76d6896019459e5e14b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -375,10 +375,11 @@ impl<'a> Parser<'a> {\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if !parser.token.span.is_dummy() {\n-            if let FileName::Real(mut path) =\n-                    sess.source_map().span_to_unmapped_path(parser.token.span) {\n-                path.pop();\n-                parser.directory.path = Cow::from(path);\n+            if let Some(FileName::Real(path)) =\n+                    &sess.source_map().lookup_char_pos(parser.token.span.lo()).file.unmapped_path {\n+                if let Some(directory_path) = path.parent() {\n+                    parser.directory.path = Cow::from(directory_path.to_path_buf());\n+                }\n             }\n         }\n "}, {"sha": "c460db36f1aa3592be38a0fd71b3b0cd69c10fee", "filename": "src/test/ui/macros/auxiliary/proc_macro_sequence.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fproc_macro_sequence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fproc_macro_sequence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fproc_macro_sequence.rs?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -6,7 +6,7 @@\n \n extern crate proc_macro;\n \n-use proc_macro::{quote, Span, TokenStream};\n+use proc_macro::{quote, Span, TokenStream, TokenTree};\n \n fn assert_same_span(a: Span, b: Span) {\n     assert_eq!(a.start(), b.start());\n@@ -24,12 +24,22 @@ pub fn make_foo(_: TokenStream) -> TokenStream {\n     };\n \n     // Check that all spans are equal.\n-    let mut span = None;\n+    // FIXME: `quote!` gives def-site spans to idents and literals,\n+    // but leaves (default) call-site spans on groups and punctuation.\n+    let mut span_call = None;\n+    let mut span_def = None;\n     for tt in result.clone() {\n-        match span {\n-            None => span = Some(tt.span()),\n-            Some(span) => assert_same_span(tt.span(), span),\n+        match tt {\n+            TokenTree::Ident(..) | TokenTree::Literal(..) => match span_def {\n+                None => span_def = Some(tt.span()),\n+                Some(span) => assert_same_span(tt.span(), span),\n+            }\n+            TokenTree::Punct(..) | TokenTree::Group(..) => match span_call {\n+                None => span_call = Some(tt.span()),\n+                Some(span) => assert_same_span(tt.span(), span),\n+            }\n         }\n+\n     }\n \n     result"}, {"sha": "0eef4a2a678b6b7bb51d8f3932e9e3d03e8bfab5", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -17,11 +17,15 @@ LL |                $(= $z:tt)*\n error: `$x:expr` may be followed by `$y:tt`, which is not allowed for `expr` fragments\n   --> $DIR/same-sequence-span.rs:20:1\n    |\n-LL | proc_macro_sequence::make_foo!();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |   proc_macro_sequence::make_foo!();\n+   |   ^--------------------------------\n+   |   |\n+   |  _in this macro invocation\n    | |\n-   | not allowed after `expr` fragments\n-   | in this macro invocation\n+LL | |\n+LL | |\n+LL | | fn main() {}\n+...  |\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n "}, {"sha": "e7f705c7feb67142afd56c93d908df98d53e420f", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "modified", "additions": 105, "deletions": 28, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -1,8 +1,19 @@\n error: hello to you, too!\n-  --> $DIR/multispan.rs:14:5\n-   |\n-LL |     hello!(hi);\n-   |     ^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:14:5\n+   |\n+LL |       hello!(hi);\n+   |       ----------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:14:12\n@@ -11,10 +22,21 @@ LL |     hello!(hi);\n    |            ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:17:5\n-   |\n-LL |     hello!(hi hi);\n-   |     ^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:17:5\n+   |\n+LL |       hello!(hi hi);\n+   |       -------------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:17:12\n@@ -23,10 +45,21 @@ LL |     hello!(hi hi);\n    |            ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:20:5\n-   |\n-LL |     hello!(hi hi hi);\n-   |     ^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:20:5\n+   |\n+LL |       hello!(hi hi hi);\n+   |       ----------------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:20:12\n@@ -35,10 +68,21 @@ LL |     hello!(hi hi hi);\n    |            ^^ ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:23:5\n-   |\n-LL |     hello!(hi hey hi yo hi beep beep hi hi);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:23:5\n+   |\n+LL |       hello!(hi hey hi yo hi beep beep hi hi);\n+   |       ---------------------------------------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:23:12\n@@ -47,10 +91,21 @@ LL |     hello!(hi hey hi yo hi beep beep hi hi);\n    |            ^^     ^^    ^^           ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:24:5\n-   |\n-LL |     hello!(hi there, hi how are you? hi... hi.);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:24:5\n+   |\n+LL |       hello!(hi there, hi how are you? hi... hi.);\n+   |       -------------------------------------------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:24:12\n@@ -59,10 +114,21 @@ LL |     hello!(hi there, hi how are you? hi... hi.);\n    |            ^^        ^^              ^^    ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:25:5\n-   |\n-LL |     hello!(whoah. hi di hi di ho);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:25:5\n+   |\n+LL |       hello!(whoah. hi di hi di ho);\n+   |       ------------------------------ in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:25:19\n@@ -71,10 +137,21 @@ LL |     hello!(whoah. hi di hi di ho);\n    |                   ^^    ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:26:5\n-   |\n-LL |     hello!(hi good hi and good bye);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/multispan.rs:31:1\n+   |\n+LL | / pub fn hello(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |     }\n+LL | |\n+LL | |     TokenStream::new()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/multispan.rs:26:5\n+   |\n+LL |       hello!(hi good hi and good bye);\n+   |       -------------------------------- in this macro invocation\n    |\n note: found these 'hi's\n   --> $DIR/multispan.rs:26:12"}, {"sha": "0698b0f47542409f6b8d638c964e429d9786d8c3", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c476b55e528ce854b6198de5bcfdd20b08440c9d/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=c476b55e528ce854b6198de5bcfdd20b08440c9d", "patch": "@@ -1,8 +1,19 @@\n error: found 2 equal signs, need exactly 3\n-  --> $DIR/three-equals.rs:15:5\n-   |\n-LL |     three_equals!(==);\n-   |     ^^^^^^^^^^^^^^^^^^ in this macro invocation\n+  --> $DIR/auxiliary/three-equals.rs:42:1\n+   |\n+LL | / pub fn three_equals(input: TokenStream) -> TokenStream {\n+LL | |     if let Err(diag) = parse(input) {\n+LL | |         diag.emit();\n+LL | |         return TokenStream::new();\n+...  |\n+LL | |     \"3\".parse().unwrap()\n+LL | | }\n+   | |_^\n+   | \n+  ::: $DIR/three-equals.rs:15:5\n+   |\n+LL |       three_equals!(==);\n+   |       ------------------ in this macro invocation\n    |\n    = help: input must be: `===`\n "}]}