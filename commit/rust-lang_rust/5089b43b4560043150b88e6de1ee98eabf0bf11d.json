{"sha": "5089b43b4560043150b88e6de1ee98eabf0bf11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwODliNDNiNDU2MDA0MzE1MGI4OGU2ZGUxZWU5OGVhYmYwYmYxMWQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-08T22:10:55Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-08T22:10:55Z"}, "message": "Fix up docs for String::from_utf8_lossy()\n\nWhen I last did a pass through the string documentation, I focused on\nconsistency across similar functions. Unfortunately, I missed some\ndetails. This example was _too_ consistent: it wasn't actually accurate!\n\nThis commit fixes the docs do both be more accurate and to explain why\nthe return type is a Cow<'a, str>.\n\nFirst reported here:\nhttps://www.reddit.com/r/rust/comments/44q9ms/stringfrom_utf8_lossy_doesnt_return_a_string/", "tree": {"sha": "07e646aadf1a1a8dcafb0bfb4a906e118f843f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e646aadf1a1a8dcafb0bfb4a906e118f843f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5089b43b4560043150b88e6de1ee98eabf0bf11d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5089b43b4560043150b88e6de1ee98eabf0bf11d", "html_url": "https://github.com/rust-lang/rust/commit/5089b43b4560043150b88e6de1ee98eabf0bf11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5089b43b4560043150b88e6de1ee98eabf0bf11d/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efdde2479b3099b35b38a7445b5f09559e3f1fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdde2479b3099b35b38a7445b5f09559e3f1fd0", "html_url": "https://github.com/rust-lang/rust/commit/efdde2479b3099b35b38a7445b5f09559e3f1fd0"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "7f6def68320476cab93b561f1aaf92c3aa7a1293", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5089b43b4560043150b88e6de1ee98eabf0bf11d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5089b43b4560043150b88e6de1ee98eabf0bf11d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=5089b43b4560043150b88e6de1ee98eabf0bf11d", "patch": "@@ -479,16 +479,15 @@ impl String {\n         }\n     }\n \n-    /// Converts a slice of bytes to a `String`, including invalid characters.\n+    /// Converts a slice of bytes to a string, including invalid characters.\n     ///\n-    /// A string slice ([`&str`]) is made of bytes ([`u8`]), and a slice of\n-    /// bytes ([`&[u8]`][byteslice]) is made of bytes, so this function converts between\n-    /// the two. Not all byte slices are valid string slices, however: [`&str`]\n-    /// requires that it is valid UTF-8. During this conversion,\n+    /// Strings are made of bytes ([`u8`]), and a slice of bytes\n+    /// ([`&[u8]`][byteslice]) is made of bytes, so this function converts\n+    /// between the two. Not all byte slices are valid strings, however: strings\n+    /// are required to be valid UTF-8. During this conversion,\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n     ///\n-    /// [`&str`]: ../primitive.str.html\n     /// [`u8`]: ../primitive.u8.html\n     /// [byteslice]: ../primitive.slice.html\n     ///\n@@ -499,10 +498,13 @@ impl String {\n     ///\n     /// [`from_utf8_unchecked()`]: struct.String.html#method.from_utf8_unchecked\n     ///\n-    /// If you need a [`&str`] instead of a `String`, consider\n-    /// [`str::from_utf8()`].\n+    /// This function returns a [`Cow<'a, str>`]. If our byte slice is invalid\n+    /// UTF-8, then we need to insert the replacement characters, which will\n+    /// change the size of the string, and hence, require a `String`. But if\n+    /// it's already valid UTF-8, we don't need a new allocation. This return\n+    /// type allows us to handle both cases.\n     ///\n-    /// [`str::from_utf8()`]: ../str/fn.from_utf8.html\n+    /// [`Cow<'a, str>`]: ../borrow/enum.Cow.html\n     ///\n     /// # Examples\n     ///\n@@ -512,8 +514,7 @@ impl String {\n     /// // some bytes, in a vector\n     /// let sparkle_heart = vec![240, 159, 146, 150];\n     ///\n-    /// // We know these bytes are valid, so we'll use `unwrap()`.\n-    /// let sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n+    /// let sparkle_heart = String::from_utf8_lossy(&sparkle_heart);\n     ///\n     /// assert_eq!(\"\ud83d\udc96\", sparkle_heart);\n     /// ```"}]}