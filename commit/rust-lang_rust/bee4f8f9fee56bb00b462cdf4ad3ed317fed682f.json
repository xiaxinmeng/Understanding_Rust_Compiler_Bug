{"sha": "bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTRmOGY5ZmVlNTZiYjAwYjQ2MmNkZjRhZDNlZDMxN2ZlZDY4MmY=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-26T18:12:13Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-26T18:12:13Z"}, "message": "Pass trivially copy types as copy", "tree": {"sha": "8e57136f9371d79f8fcdc9fa2002e5e6118871a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e57136f9371d79f8fcdc9fa2002e5e6118871a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "html_url": "https://github.com/rust-lang/rust/commit/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3280eb4ae9d8c49badeaa0a503f546b95dfcd31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3280eb4ae9d8c49badeaa0a503f546b95dfcd31", "html_url": "https://github.com/rust-lang/rust/commit/e3280eb4ae9d8c49badeaa0a503f546b95dfcd31"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "8d7937d947a48cad7b26a0d35984f1fe7abb531d", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "patch": "@@ -532,7 +532,7 @@ impl Adt {\n         Some(self.module(db).krate())\n     }\n \n-    pub fn name(&self, db: &dyn HirDatabase) -> Name {\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n         match self {\n             Adt::Struct(s) => s.name(db),\n             Adt::Union(u) => u.name(db),\n@@ -1018,15 +1018,15 @@ impl ImplDef {\n         impls.lookup_impl_defs_for_trait(trait_.id).map(Self::from).collect()\n     }\n \n-    pub fn target_trait(&self, db: &dyn HirDatabase) -> Option<TypeRef> {\n+    pub fn target_trait(self, db: &dyn HirDatabase) -> Option<TypeRef> {\n         db.impl_data(self.id).target_trait.clone()\n     }\n \n-    pub fn target_type(&self, db: &dyn HirDatabase) -> TypeRef {\n+    pub fn target_type(self, db: &dyn HirDatabase) -> TypeRef {\n         db.impl_data(self.id).target_type.clone()\n     }\n \n-    pub fn target_ty(&self, db: &dyn HirDatabase) -> Type {\n+    pub fn target_ty(self, db: &dyn HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n@@ -1038,23 +1038,23 @@ impl ImplDef {\n         }\n     }\n \n-    pub fn items(&self, db: &dyn HirDatabase) -> Vec<AssocItem> {\n+    pub fn items(self, db: &dyn HirDatabase) -> Vec<AssocItem> {\n         db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n     }\n \n-    pub fn is_negative(&self, db: &dyn HirDatabase) -> bool {\n+    pub fn is_negative(self, db: &dyn HirDatabase) -> bool {\n         db.impl_data(self.id).is_negative\n     }\n \n-    pub fn module(&self, db: &dyn HirDatabase) -> Module {\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n         self.id.lookup(db.upcast()).container.module(db.upcast()).into()\n     }\n \n-    pub fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n         Crate { id: self.module(db).id.krate }\n     }\n \n-    pub fn is_builtin_derive(&self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n+    pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n         let src = self.source(db);\n         let item = src.file_id.is_builtin_derive(db.upcast())?;\n         let hygenic = hir_expand::hygiene::Hygiene::new(db.upcast(), item.file_id);"}, {"sha": "f44baa57942fb0dc887312ba0fdacef183973abb", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "patch": "@@ -175,7 +175,7 @@ pub(super) enum DefKind {\n }\n \n impl DefKind {\n-    pub fn ast_id(&self) -> FileAstId<ast::ModuleItem> {\n+    pub fn ast_id(self) -> FileAstId<ast::ModuleItem> {\n         match self {\n             DefKind::Function(it) => it.upcast(),\n             DefKind::Struct(it, _) => it.upcast(),"}, {"sha": "04c0260046bc21851704d61865f592d52cef5164", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "patch": "@@ -25,7 +25,7 @@ impl ProcMacroExpander {\n     }\n \n     pub fn expand(\n-        &self,\n+        self,\n         db: &dyn AstDatabase,\n         _id: LazyMacroId,\n         tt: &tt::Subtree,"}, {"sha": "21c9316e6662f2cc34aad09391123c597b1fc9fd", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee4f8f9fee56bb00b462cdf4ad3ed317fed682f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=bee4f8f9fee56bb00b462cdf4ad3ed317fed682f", "patch": "@@ -49,56 +49,53 @@ use crate::{\n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some((trigger, impl_def)) = completion_match(ctx) {\n         match trigger.kind() {\n-            SyntaxKind::NAME_REF => {\n-                get_missing_assoc_items(&ctx.sema, &impl_def).iter().for_each(|item| match item {\n+            SyntaxKind::NAME_REF => get_missing_assoc_items(&ctx.sema, &impl_def)\n+                .into_iter()\n+                .for_each(|item| match item {\n                     hir::AssocItem::Function(fn_item) => {\n-                        add_function_impl(&trigger, acc, ctx, &fn_item)\n+                        add_function_impl(&trigger, acc, ctx, fn_item)\n                     }\n                     hir::AssocItem::TypeAlias(type_item) => {\n-                        add_type_alias_impl(&trigger, acc, ctx, &type_item)\n+                        add_type_alias_impl(&trigger, acc, ctx, type_item)\n                     }\n                     hir::AssocItem::Const(const_item) => {\n-                        add_const_impl(&trigger, acc, ctx, &const_item)\n+                        add_const_impl(&trigger, acc, ctx, const_item)\n                     }\n-                })\n-            }\n+                }),\n \n             SyntaxKind::FN_DEF => {\n-                for missing_fn in\n-                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n-                            _ => None,\n-                        }\n+                for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n+                    .into_iter()\n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                        _ => None,\n                     })\n                 {\n-                    add_function_impl(&trigger, acc, ctx, &missing_fn);\n+                    add_function_impl(&trigger, acc, ctx, missing_fn);\n                 }\n             }\n \n             SyntaxKind::TYPE_ALIAS_DEF => {\n-                for missing_fn in\n-                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n-                            _ => None,\n-                        }\n+                for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n+                    .into_iter()\n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n+                        _ => None,\n                     })\n                 {\n-                    add_type_alias_impl(&trigger, acc, ctx, &missing_fn);\n+                    add_type_alias_impl(&trigger, acc, ctx, missing_fn);\n                 }\n             }\n \n             SyntaxKind::CONST_DEF => {\n-                for missing_fn in\n-                    get_missing_assoc_items(&ctx.sema, &impl_def).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::Const(const_item) => Some(const_item),\n-                            _ => None,\n-                        }\n+                for missing_fn in get_missing_assoc_items(&ctx.sema, &impl_def)\n+                    .into_iter()\n+                    .filter_map(|item| match item {\n+                        hir::AssocItem::Const(const_item) => Some(const_item),\n+                        _ => None,\n                     })\n                 {\n-                    add_const_impl(&trigger, acc, ctx, &missing_fn);\n+                    add_const_impl(&trigger, acc, ctx, missing_fn);\n                 }\n             }\n \n@@ -126,9 +123,9 @@ fn add_function_impl(\n     fn_def_node: &SyntaxNode,\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    func: &hir::Function,\n+    func: hir::Function,\n ) {\n-    let signature = FunctionSignature::from_hir(ctx.db, *func);\n+    let signature = FunctionSignature::from_hir(ctx.db, func);\n \n     let fn_name = func.name(ctx.db).to_string();\n \n@@ -167,7 +164,7 @@ fn add_type_alias_impl(\n     type_def_node: &SyntaxNode,\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    type_alias: &hir::TypeAlias,\n+    type_alias: hir::TypeAlias,\n ) {\n     let alias_name = type_alias.name(ctx.db).to_string();\n \n@@ -187,7 +184,7 @@ fn add_const_impl(\n     const_def_node: &SyntaxNode,\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    const_: &hir::Const,\n+    const_: hir::Const,\n ) {\n     let const_name = const_.name(ctx.db).map(|n| n.to_string());\n "}]}