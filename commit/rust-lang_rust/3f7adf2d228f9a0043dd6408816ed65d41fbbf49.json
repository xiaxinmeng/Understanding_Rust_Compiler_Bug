{"sha": "3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmN2FkZjJkMjI4ZjlhMDA0M2RkNjQwODgxNmVkNjVkNDFmYmJmNDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-06T12:57:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-06T12:57:06Z"}, "message": "Add some more patches", "tree": {"sha": "e0a605c1294f8bd860e13641e8a0e7f8389adfe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a605c1294f8bd860e13641e8a0e7f8389adfe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "html_url": "https://github.com/rust-lang/rust/commit/3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa547ac9894e31b1c8aa37461fe029fc7400c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa547ac9894e31b1c8aa37461fe029fc7400c2d", "html_url": "https://github.com/rust-lang/rust/commit/0fa547ac9894e31b1c8aa37461fe029fc7400c2d"}], "stats": {"total": 257, "additions": 254, "deletions": 3}, "files": [{"sha": "8ffb00cff42c2d04f9906ef0d42d68aef32cffd5", "filename": "0005-Disable-compiler_builtins.patch", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0005-Disable-compiler_builtins.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0005-Disable-compiler_builtins.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0005-Disable-compiler_builtins.patch?ref=3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "patch": "@@ -0,0 +1,29 @@\n+From d873311b7bd16bac383d71d49f93d0448cfcb0b1 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sun, 30 Sep 2018 18:32:50 +0200\n+Subject: [PATCH] Disable compiler_builtins\n+\n+---\n+ src/libcompiler_builtins/src/lib.rs | 2 ++\n+ 1 file changed, 2 insertions(+)\n+\n+diff --git a/src/libcompiler_builtins/src/lib.rs b/src/libcompiler_builtins/src/lib.rs\n+index 9f1dd15..b1eed26 100644\n+--- a/src/libcompiler_builtins/src/lib.rs\n++++ b/src/libcompiler_builtins/src/lib.rs\n+@@ -34,6 +34,7 @@\n+ // that follow \"x86 naming convention\" (e.g. addsf3). Those aeabi intrinsics must adhere to the\n+ // AAPCS calling convention (`extern \"aapcs\"`) because that's how LLVM will call them.\n+ \n++/*\n+ #[cfg(test)]\n+ extern crate core;\n+ \n+@@ -68,3 +69,4 @@ pub mod x86;\n+ pub mod x86_64;\n+ \n+ pub mod probestack;\n++*/\n+-- \n+2.17.1 (Apple Git-112)\n+"}, {"sha": "ca336859109d8ef6711dfb248530b072e12243a3", "filename": "0006-alloc-Disable-some-unsupported-stuff.patch", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0006-alloc-Disable-some-unsupported-stuff.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0006-alloc-Disable-some-unsupported-stuff.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0006-alloc-Disable-some-unsupported-stuff.patch?ref=3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "patch": "@@ -0,0 +1,92 @@\n+From a65665bae4e5ad6ef76a365b7cdff8bdfbd3db67 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sat, 6 Oct 2018 11:03:00 +0200\n+Subject: [PATCH] [alloc] Disable some unsupported stuff\n+\n+---\n+ src/liballoc/boxed.rs | 6 ------\n+ src/liballoc/str.rs   | 4 ++++\n+ src/liballoc/vec.rs   | 2 --\n+ 3 files changed, 4 insertions(+), 8 deletions(-)\n+\n+diff --git a/src/liballoc/boxed.rs b/src/liballoc/boxed.rs\n+index f989e70..597dd15 100644\n+--- a/src/liballoc/boxed.rs\n++++ b/src/liballoc/boxed.rs\n+@@ -410,9 +410,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n+     fn write_u64(&mut self, i: u64) {\n+         (**self).write_u64(i)\n+     }\n+-    fn write_u128(&mut self, i: u128) {\n+-        (**self).write_u128(i)\n+-    }\n+     fn write_usize(&mut self, i: usize) {\n+         (**self).write_usize(i)\n+     }\n+@@ -428,9 +425,6 @@ impl<T: ?Sized + Hasher> Hasher for Box<T> {\n+     fn write_i64(&mut self, i: i64) {\n+         (**self).write_i64(i)\n+     }\n+-    fn write_i128(&mut self, i: i128) {\n+-        (**self).write_i128(i)\n+-    }\n+     fn write_isize(&mut self, i: isize) {\n+         (**self).write_isize(i)\n+     }\n+diff --git a/src/liballoc/str.rs b/src/liballoc/str.rs\n+index 2af8956..23dbb79 100644\n+--- a/src/liballoc/str.rs\n++++ b/src/liballoc/str.rs\n+@@ -361,6 +361,7 @@ impl str {\n+     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n+     pub fn to_lowercase(&self) -> String {\n+         let mut s = String::with_capacity(self.len());\n++        /*\n+         for (i, c) in self[..].char_indices() {\n+             if c == '\u03a3' {\n+                 // \u03a3 maps to \u03c3, except at the end of a word where it maps to \u03c2.\n+@@ -384,6 +385,7 @@ impl str {\n+                 }\n+             }\n+         }\n++        */\n+         return s;\n+ \n+         fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) {\n+@@ -435,6 +437,7 @@ impl str {\n+     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n+     pub fn to_uppercase(&self) -> String {\n+         let mut s = String::with_capacity(self.len());\n++        /*\n+         for c in self[..].chars() {\n+             match conversions::to_upper(c) {\n+                 [a, '\\0', _] => s.push(a),\n+@@ -449,6 +452,7 @@ impl str {\n+                 }\n+             }\n+         }\n++        */\n+         return s;\n+     }\n+ \n+diff --git a/src/liballoc/vec.rs b/src/liballoc/vec.rs\n+index 2bc037e..2fe8894 100644\n+--- a/src/liballoc/vec.rs\n++++ b/src/liballoc/vec.rs\n+@@ -1569,13 +1569,11 @@ impl_is_zero!(i8, |x| x == 0);\n+ impl_is_zero!(i16, |x| x == 0);\n+ impl_is_zero!(i32, |x| x == 0);\n+ impl_is_zero!(i64, |x| x == 0);\n+-impl_is_zero!(i128, |x| x == 0);\n+ impl_is_zero!(isize, |x| x == 0);\n+ \n+ impl_is_zero!(u16, |x| x == 0);\n+ impl_is_zero!(u32, |x| x == 0);\n+ impl_is_zero!(u64, |x| x == 0);\n+-impl_is_zero!(u128, |x| x == 0);\n+ impl_is_zero!(usize, |x| x == 0);\n+ \n+ impl_is_zero!(char, |x| x == '\\0');\n+-- \n+2.17.1 (Apple Git-112)\n+"}, {"sha": "be930ae3022798d25fc72665d332a5dbe4f04802", "filename": "0007-Fix-libstd-building.patch", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0007-Fix-libstd-building.patch", "raw_url": "https://github.com/rust-lang/rust/raw/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/0007-Fix-libstd-building.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0007-Fix-libstd-building.patch?ref=3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "patch": "@@ -0,0 +1,131 @@\n+From 40c86527fe92b608a65cc1187901035ebc56b281 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Sat, 6 Oct 2018 13:21:15 +0200\n+Subject: [PATCH] Fix libstd building\n+\n+---\n+ src/libstd/lib.rs            |  6 ------\n+ src/libstd/net/ip.rs         | 20 --------------------\n+ src/libstd/num.rs            |  2 +-\n+ src/libstd/primitive_docs.rs | 16 ----------------\n+ 4 files changed, 1 insertion(+), 43 deletions(-)\n+\n+diff --git a/src/libstd/lib.rs b/src/libstd/lib.rs\n+index 4768e8b..c89f99a 100644\n+--- a/src/libstd/lib.rs\n++++ b/src/libstd/lib.rs\n+@@ -257,7 +257,6 @@\n+ #![feature(const_cstr_unchecked)]\n+ #![feature(core_intrinsics)]\n+ #![feature(dropck_eyepatch)]\n+-#![feature(duration_as_u128)]\n+ #![feature(exact_size_is_empty)]\n+ #![feature(external_doc)]\n+ #![feature(fixed_size_array)]\n+@@ -287,7 +286,6 @@\n+ #![feature(rustc_attrs)]\n+ #![feature(rustc_const_unstable)]\n+ #![feature(std_internals)]\n+-#![cfg_attr(not(stage0), feature(stdsimd))]\n+ #![feature(shrink_to)]\n+ #![feature(slice_concat_ext)]\n+ #![feature(slice_internals)]\n+@@ -410,8 +408,6 @@ pub use core::i16;\n+ pub use core::i32;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::i64;\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-pub use core::i128;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::usize;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+@@ -444,8 +440,6 @@ pub use alloc_crate::string;\n+ pub use alloc_crate::vec;\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ pub use core::char;\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-pub use core::u128;\n+ #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n+ pub use core::hint;\n+ \n+diff --git a/src/libstd/net/ip.rs b/src/libstd/net/ip.rs\n+index d45a66e..b25b862 100644\n+--- a/src/libstd/net/ip.rs\n++++ b/src/libstd/net/ip.rs\n+@@ -1393,26 +1393,6 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n+     }\n+ }\n+ \n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-impl From<Ipv6Addr> for u128 {\n+-    fn from(ip: Ipv6Addr) -> u128 {\n+-        let ip = ip.segments();\n+-        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n+-            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n+-            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+-    }\n+-}\n+-#[stable(feature = \"i128\", since = \"1.26.0\")]\n+-impl From<u128> for Ipv6Addr {\n+-    fn from(ip: u128) -> Ipv6Addr {\n+-        Ipv6Addr::new(\n+-            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n+-            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n+-            (ip >> 16) as u16, ip as u16,\n+-        )\n+-    }\n+-}\n+-\n+ #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n+ impl From<[u8; 16]> for Ipv6Addr {\n+     fn from(octets: [u8; 16]) -> Ipv6Addr {\n+diff --git a/src/libstd/num.rs b/src/libstd/num.rs\n+index 3f90c1f..85aab83 100644\n+--- a/src/libstd/num.rs\n++++ b/src/libstd/num.rs\n+@@ -22,7 +22,7 @@ pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError}\n+ pub use core::num::Wrapping;\n+ \n+ #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+-pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU128, NonZeroUsize};\n++pub use core::num::{NonZeroU8, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroUsize};\n+ \n+ #[cfg(test)] use fmt;\n+ #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n+diff --git a/src/libstd/primitive_docs.rs b/src/libstd/primitive_docs.rs\n+index 8d54728..c36893c 100644\n+--- a/src/libstd/primitive_docs.rs\n++++ b/src/libstd/primitive_docs.rs\n+@@ -809,14 +809,6 @@ mod prim_i32 { }\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ mod prim_i64 { }\n+ \n+-#[doc(primitive = \"i128\")]\n+-//\n+-/// The 128-bit signed integer type.\n+-///\n+-/// *[See also the `std::i128` module](i128/index.html).*\n+-#[stable(feature = \"i128\", since=\"1.26.0\")]\n+-mod prim_i128 { }\n+-\n+ #[doc(primitive = \"u8\")]\n+ //\n+ /// The 8-bit unsigned integer type.\n+@@ -849,14 +841,6 @@ mod prim_u32 { }\n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+ mod prim_u64 { }\n+ \n+-#[doc(primitive = \"u128\")]\n+-//\n+-/// The 128-bit unsigned integer type.\n+-///\n+-/// *[See also the `std::u128` module](u128/index.html).*\n+-#[stable(feature = \"i128\", since=\"1.26.0\")]\n+-mod prim_u128 { }\n+-\n+ #[doc(primitive = \"isize\")]\n+ //\n+ /// The pointer-sized signed integer type.\n+-- \n+2.17.1 (Apple Git-112)\n+"}, {"sha": "409b7845238a443f7b3bb9f9ff8da365bb80a2af", "filename": "prepare_libcore.sh", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/prepare_libcore.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3f7adf2d228f9a0043dd6408816ed65d41fbbf49/prepare_libcore.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/prepare_libcore.sh?ref=3f7adf2d228f9a0043dd6408816ed65d41fbbf49", "patch": "@@ -11,9 +11,8 @@ fi\n \n rm -rf $DST_DIR\n mkdir -p $DST_DIR/src\n-for crate in libcore libstd; do\n-    cp -r $SRC_DIR/src/$crate $DST_DIR/src/\n-done\n+cp -r $SRC_DIR/src $DST_DIR/\n+\n cd $DST_DIR\n git init\n git add ."}]}