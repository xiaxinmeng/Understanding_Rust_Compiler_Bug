{"sha": "2b0e730bf3896432b73f6697de699181cd7bf92f", "node_id": "C_kwDOAAsO6NoAKDJiMGU3MzBiZjM4OTY0MzJiNzNmNjY5N2RlNjk5MTgxY2Q3YmY5MmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T09:39:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-16T09:39:22Z"}, "message": "Auto merge of #8547 - Jarcho:transmute_8501, r=flip1995\n\nMore `transmute_undefined_repr` fixes\n\nfixes: #8498\nfixes: #8501\nfixes: #8503\n\nchangelog: Allow `transumte_undefined_repr` between fat pointers and `(usize, usize)`\nchangelog: Allow `transumte_undefined_repr` when one side is a union\nchangelog: Fix `transumte_undefined_repr` on tuples with one non-zero-sized type.", "tree": {"sha": "247ebd8ff75a7def66a0c6d544ee4c10b0080653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247ebd8ff75a7def66a0c6d544ee4c10b0080653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0e730bf3896432b73f6697de699181cd7bf92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0e730bf3896432b73f6697de699181cd7bf92f", "html_url": "https://github.com/rust-lang/rust/commit/2b0e730bf3896432b73f6697de699181cd7bf92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0e730bf3896432b73f6697de699181cd7bf92f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6a3fbf8da9e12c52f047b2a4302960433450797", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a3fbf8da9e12c52f047b2a4302960433450797", "html_url": "https://github.com/rust-lang/rust/commit/d6a3fbf8da9e12c52f047b2a4302960433450797"}, {"sha": "47c9ed697b4041fca4488922ee5614ad98bfeec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c9ed697b4041fca4488922ee5614ad98bfeec2", "html_url": "https://github.com/rust-lang/rust/commit/47c9ed697b4041fca4488922ee5614ad98bfeec2"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "02569bd3a476e50e3b0ea759ad9930712847f481", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b0e730bf3896432b73f6697de699181cd7bf92f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0e730bf3896432b73f6697de699181cd7bf92f/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=2b0e730bf3896432b73f6697de699181cd7bf92f", "patch": "@@ -415,7 +415,8 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 // And see https://github.com/rust-lang/rust/issues/51911 for dereferencing raw pointers.\n                 let const_context = in_constant(cx, e.hir_id);\n \n-                let from_ty = cx.typeck_results().expr_ty(arg);\n+                let from_ty = cx.typeck_results().expr_ty_adjusted(arg);\n+                // Adjustments for `to_ty` happen after the call to `transmute`, so don't use them.\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n                 // If useless_transmute is triggered, the other lints can be skipped."}, {"sha": "4922c40bcefcd2bcb27df2b3a8cc2318c7c65b87", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2b0e730bf3896432b73f6697de699181cd7bf92f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0e730bf3896432b73f6697de699181cd7bf92f/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=2b0e730bf3896432b73f6697de699181cd7bf92f", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::ty::is_c_void;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, IntTy, Ty, TypeAndMut, UintTy};\n use rustc_span::Span;\n \n #[allow(clippy::too_many_lines)]\n@@ -23,7 +23,8 @@ pub(super) fn check<'tcx>(\n                 unsized_ty,\n                 to_ty: to_sub_ty,\n             } => match reduce_ty(cx, to_sub_ty) {\n-                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                ReducedTy::TypeErasure => break,\n+                ReducedTy::UnorderedFields(ty) if is_size_pair(ty) => break,\n                 ReducedTy::Ref(to_sub_ty) => {\n                     from_ty = unsized_ty;\n                     to_ty = to_sub_ty;\n@@ -48,7 +49,8 @@ pub(super) fn check<'tcx>(\n                 unsized_ty,\n                 from_ty: from_sub_ty,\n             } => match reduce_ty(cx, from_sub_ty) {\n-                ReducedTy::IntArray | ReducedTy::TypeErasure => break,\n+                ReducedTy::TypeErasure => break,\n+                ReducedTy::UnorderedFields(ty) if is_size_pair(ty) => break,\n                 ReducedTy::Ref(from_sub_ty) => {\n                     from_ty = from_sub_ty;\n                     to_ty = unsized_ty;\n@@ -123,8 +125,7 @@ pub(super) fn check<'tcx>(\n                 from_ty: from_sub_ty,\n                 to_ty: to_sub_ty,\n             } => match (reduce_ty(cx, from_sub_ty), reduce_ty(cx, to_sub_ty)) {\n-                (ReducedTy::IntArray | ReducedTy::TypeErasure, _)\n-                | (_, ReducedTy::IntArray | ReducedTy::TypeErasure) => return false,\n+                (ReducedTy::TypeErasure, _) | (_, ReducedTy::TypeErasure) => return false,\n                 (ReducedTy::UnorderedFields(from_ty), ReducedTy::UnorderedFields(to_ty)) if from_ty != to_ty => {\n                     span_lint_and_then(\n                         cx,\n@@ -263,9 +264,6 @@ enum ReducedTy<'tcx> {\n     UnorderedFields(Ty<'tcx>),\n     /// The type is a reference to the contained type.\n     Ref(Ty<'tcx>),\n-    /// The type is an array of a primitive integer type. These can be used as storage for a value\n-    /// of another type.\n-    IntArray,\n     /// Any other type.\n     Other(Ty<'tcx>),\n }\n@@ -275,17 +273,18 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n     loop {\n         ty = cx.tcx.try_normalize_erasing_regions(cx.param_env, ty).unwrap_or(ty);\n         return match *ty.kind() {\n-            ty::Array(sub_ty, _) if matches!(sub_ty.kind(), ty::Int(_) | ty::Uint(_)) => ReducedTy::IntArray,\n+            ty::Array(sub_ty, _) if matches!(sub_ty.kind(), ty::Int(_) | ty::Uint(_)) => ReducedTy::TypeErasure,\n             ty::Array(sub_ty, _) | ty::Slice(sub_ty) => {\n                 ty = sub_ty;\n                 continue;\n             },\n             ty::Tuple(args) if args.is_empty() => ReducedTy::TypeErasure,\n             ty::Tuple(args) => {\n-                let Some(sized_ty) = args.iter().find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n+                let mut iter = args.iter();\n+                let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::OrderedFields(ty);\n                 };\n-                if args.iter().all(|ty| is_zero_sized_ty(cx, ty)) {\n+                if iter.all(|ty| is_zero_sized_ty(cx, ty)) {\n                     ty = sized_ty;\n                     continue;\n                 }\n@@ -313,6 +312,8 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n             ty::Adt(def, _) if def.is_enum() && (def.variants().is_empty() || is_c_void(cx, ty)) => {\n                 ReducedTy::TypeErasure\n             },\n+            // TODO: Check if the conversion to or from at least one of a union's fields is valid.\n+            ty::Adt(def, _) if def.is_union() => ReducedTy::TypeErasure,\n             ty::Foreign(_) => ReducedTy::TypeErasure,\n             ty::Ref(_, ty, _) => ReducedTy::Ref(ty),\n             ty::RawPtr(ty) => ReducedTy::Ref(ty.ty),\n@@ -332,3 +333,14 @@ fn is_zero_sized_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         }\n     }\n }\n+\n+fn is_size_pair(ty: Ty<'_>) -> bool {\n+    if let ty::Tuple(tys) = *ty.kind()\n+        && let [ty1, ty2] = &**tys\n+    {\n+        matches!(ty1.kind(), ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize))\n+            && matches!(ty2.kind(), ty::Int(IntTy::Isize) | ty::Uint(UintTy::Usize))\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "7cc03b89fe0ec13ea99e1b38e15fee8823858b48", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b0e730bf3896432b73f6697de699181cd7bf92f/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0e730bf3896432b73f6697de699181cd7bf92f/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=2b0e730bf3896432b73f6697de699181cd7bf92f", "patch": "@@ -2,7 +2,7 @@\n #![allow(clippy::unit_arg, clippy::transmute_ptr_to_ref)]\n \n use core::ffi::c_void;\n-use core::mem::{size_of, transmute};\n+use core::mem::{size_of, transmute, MaybeUninit};\n \n fn value<T>() -> T {\n     unimplemented!()\n@@ -87,5 +87,26 @@ fn main() {\n \n         let _: *const [u8] = transmute(value::<Box<[u8]>>()); // Ok\n         let _: Box<[u8]> = transmute(value::<*mut [u8]>()); // Ok\n+\n+        let _: Ty2<u32, u32> = transmute(value::<(Ty2<u32, u32>,)>()); // Ok\n+        let _: (Ty2<u32, u32>,) = transmute(value::<Ty2<u32, u32>>()); // Ok\n+\n+        let _: Ty2<u32, u32> = transmute(value::<(Ty2<u32, u32>, ())>()); // Ok\n+        let _: (Ty2<u32, u32>, ()) = transmute(value::<Ty2<u32, u32>>()); // Ok\n+\n+        let _: Ty2<u32, u32> = transmute(value::<((), Ty2<u32, u32>)>()); // Ok\n+        let _: ((), Ty2<u32, u32>) = transmute(value::<Ty2<u32, u32>>()); // Ok\n+\n+        let _: (usize, usize) = transmute(value::<&[u8]>()); // Ok\n+        let _: &[u8] = transmute(value::<(usize, usize)>()); // Ok\n+\n+        trait Trait {}\n+        let _: (isize, isize) = transmute(value::<&dyn Trait>()); // Ok\n+        let _: &dyn Trait = transmute(value::<(isize, isize)>()); // Ok\n+\n+        let _: MaybeUninit<Ty2<u32, u32>> = transmute(value::<Ty2<u32, u32>>()); // Ok\n+        let _: Ty2<u32, u32> = transmute(value::<MaybeUninit<Ty2<u32, u32>>>()); // Ok\n+\n+        let _: Ty<&[u32]> = transmute::<&[u32], _>(value::<&Vec<u32>>()); // Ok\n     }\n }"}, {"sha": "de9418c8d1adc4af6ab0e578ef3697b2a95a1c72", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b0e730bf3896432b73f6697de699181cd7bf92f/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b0e730bf3896432b73f6697de699181cd7bf92f/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=2b0e730bf3896432b73f6697de699181cd7bf92f", "patch": "@@ -34,13 +34,13 @@ error: transmute from a reference to a pointer\n LL |     let _array_ptr_transmute = unsafe { transmute::<&[i32; 4], *const [i32; 4]>(array_ref) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n \n-error: transmute from `fn(usize) -> u8 {main::foo}` to `*const usize` which could be expressed as a pointer cast instead\n+error: transmute from `fn(usize) -> u8` to `*const usize` which could be expressed as a pointer cast instead\n   --> $DIR/transmutes_expressible_as_ptr_casts.rs:48:41\n    |\n LL |     let _usize_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, *const usize>(foo) };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n \n-error: transmute from `fn(usize) -> u8 {main::foo}` to `usize` which could be expressed as a pointer cast instead\n+error: transmute from `fn(usize) -> u8` to `usize` which could be expressed as a pointer cast instead\n   --> $DIR/transmutes_expressible_as_ptr_casts.rs:52:49\n    |\n LL |     let _usize_from_fn_ptr_transmute = unsafe { transmute::<fn(usize) -> u8, usize>(foo) };"}]}