{"sha": "cfdf7633f08ee77e303f1bf88b613a35f9946e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZGY3NjMzZjA4ZWU3N2UzMDNmMWJmODhiNjEzYTM1Zjk5NDZlNzU=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-11-03T06:58:01Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-11-08T21:28:50Z"}, "message": "Improve \"Doesn't live long enough\" error\n\ncase with temporary variable", "tree": {"sha": "bc145012daf7b215be45761b4866cc9ff2b6f320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc145012daf7b215be45761b4866cc9ff2b6f320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfdf7633f08ee77e303f1bf88b613a35f9946e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf7633f08ee77e303f1bf88b613a35f9946e75", "html_url": "https://github.com/rust-lang/rust/commit/cfdf7633f08ee77e303f1bf88b613a35f9946e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfdf7633f08ee77e303f1bf88b613a35f9946e75/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e7e357a796f93527d0a0e850fa71c48594b91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e7e357a796f93527d0a0e850fa71c48594b91d", "html_url": "https://github.com/rust-lang/rust/commit/a0e7e357a796f93527d0a0e850fa71c48594b91d"}], "stats": {"total": 87, "additions": 63, "deletions": 24}, "files": [{"sha": "a0e1e4f3c9397bc5173707c045944ec2ce92e669", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -1013,11 +1013,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n             }\n \n             err_out_of_scope(super_scope, sub_scope, cause) => {\n-                let (value_kind, value_msg, is_temporary) = match err.cmt.cat {\n+                let (value_kind, value_msg) = match err.cmt.cat {\n                     mc::Categorization::Rvalue(_) =>\n-                        (\"temporary value\", \"temporary value created here\", true),\n+                        (\"temporary value\", \"temporary value created here\"),\n                     _ =>\n-                        (\"borrowed value\", \"does not live long enough\", false)\n+                        (\"borrowed value\", \"borrow occurs here\")\n                 };\n \n                 let is_closure = match cause {\n@@ -1030,14 +1030,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             Some(primary) => {\n                                 db.span = MultiSpan::from_span(s);\n                                 db.span_label(primary, &format!(\"capture occurs here\"));\n-                                db.span_label(s, &value_msg);\n+                                db.span_label(s, &\"does not live long enough\");\n                                 true\n                             }\n                             None => false\n                         }\n                     }\n                     _ => {\n-                        db.span_label(error_span, &value_msg);\n+                        db.span_label(error_span, &\"does not live long enough\");\n                         false\n                     }\n                 };\n@@ -1047,11 +1047,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 match (sub_span, super_span) {\n                     (Some(s1), Some(s2)) if s1 == s2 => {\n-                        if !is_temporary && !is_closure {\n+                        if !is_closure {\n                             db.span = MultiSpan::from_span(s1);\n-                            db.span_label(error_span, &format!(\"borrow occurs here\"));\n+                            db.span_label(error_span, &value_msg);\n                             let msg = match opt_loan_path(&err.cmt) {\n-                                None => \"borrowed value\".to_string(),\n+                                None => value_kind.to_string(),\n                                 Some(lp) => {\n                                     format!(\"`{}`\", self.loan_path_to_string(&lp))\n                                 }\n@@ -1064,17 +1064,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         db.note(\"values in a scope are dropped in the opposite order \\\n                                 they are created\");\n                     }\n-                    (Some(s1), Some(s2)) if !is_temporary && !is_closure => {\n+                    (Some(s1), Some(s2)) if !is_closure => {\n                         db.span = MultiSpan::from_span(s2);\n-                        db.span_label(error_span, &format!(\"borrow occurs here\"));\n+                        db.span_label(error_span, &value_msg);\n                         let msg = match opt_loan_path(&err.cmt) {\n-                            None => \"borrowed value\".to_string(),\n+                            None => value_kind.to_string(),\n                             Some(lp) => {\n                                 format!(\"`{}`\", self.loan_path_to_string(&lp))\n                             }\n                         };\n-                        db.span_label(s2,\n-                                      &format!(\"{} dropped here while still borrowed\", msg));\n+                        db.span_label(s2, &format!(\"{} dropped here while still borrowed\", msg));\n                         db.span_label(s1, &format!(\"{} needs to live until here\", value_kind));\n                     }\n                     _ => {"}, {"sha": "d85483f43c9e02dfb57a38b5551da5e8d475237a", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -1,8 +1,8 @@\n error: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion.rs:12:13\n+  --> $DIR/borrowck-let-suggestion.rs:12:23\n    |\n 12 |     let x = [1].iter();\n-   |             ^^^       - temporary value only lives until here\n+   |             ---       ^ temporary value dropped here while still borrowed\n    |             |\n    |             temporary value created here\n 13 | }"}, {"sha": "5bb656878b3f3b7d384a760621b84503453b8e6c", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -10,10 +10,10 @@ error: `young[..]` does not live long enough\n    = note: values in a scope are dropped in the opposite order they are created\n \n error: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:24:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:24:18\n    |\n 24 |     v3.push(&'x');           // statement 6\n-   |              ^^^ - temporary value only lives until here\n+   |              --- ^ temporary value dropped here while still borrowed\n    |              |\n    |              temporary value created here\n ...\n@@ -23,10 +23,10 @@ error: borrowed value does not live long enough\n    = note: consider using a `let` binding to increase its lifetime\n \n error: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:34:18\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:34:22\n    |\n 34 |         v4.push(&'y');\n-   |                  ^^^ - temporary value only lives until here\n+   |                  --- ^ temporary value dropped here while still borrowed\n    |                  |\n    |                  temporary value created here\n ...\n@@ -36,10 +36,10 @@ error: borrowed value does not live long enough\n    = note: consider using a `let` binding to increase its lifetime\n \n error: borrowed value does not live long enough\n-  --> $DIR/borrowck-let-suggestion-suffixes.rs:45:14\n+  --> $DIR/borrowck-let-suggestion-suffixes.rs:45:18\n    |\n 45 |     v5.push(&'z');\n-   |              ^^^ - temporary value only lives until here\n+   |              --- ^ temporary value dropped here while still borrowed\n    |              |\n    |              temporary value created here\n ..."}, {"sha": "ea5f4d3fe60e3c8bee319374237d227dadca0ea3", "filename": "src/test/ui/span/issue-15480.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.rs?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -11,7 +11,6 @@\n fn main() {\n     let v = vec![\n         &3\n-//~^ ERROR borrowed value does not live long enough\n     ];\n \n     for &&x in &v {", "previous_filename": "src/test/compile-fail/issue-15480.rs"}, {"sha": "85f6c41c366413320ca85c8d37f1cba702a9f40f", "filename": "src/test/ui/span/issue-15480.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.stderr?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -0,0 +1,15 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/issue-15480.rs:14:6\n+   |\n+13 |         &3\n+   |          - temporary value created here\n+14 |     ];\n+   |      ^ temporary value dropped here while still borrowed\n+...\n+19 | }\n+   | - temporary value needs to live until here\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "a524562f2d959b3f0b346a3077dc2c898ba2f918", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -17,7 +17,7 @@ impl<'a> Foo for &'a isize { }\n fn main() {\n     let blah;\n     {\n-        let ss: &isize = &1; //~ ERROR borrowed value does not live long enough\n+        let ss: &isize = &1;\n         blah = box ss as Box<Foo>;\n     }\n }", "previous_filename": "src/test/compile-fail/regions-close-over-borrowed-ref-in-obj.rs"}, {"sha": "205734c25e0e6cd4926fc870e852f62e7032dea0", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.stderr?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -0,0 +1,13 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/regions-close-over-borrowed-ref-in-obj.rs:22:5\n+   |\n+20 |         let ss: &isize = &1;\n+   |                           - temporary value created here\n+21 |         blah = box ss as Box<Foo>;\n+22 |     }\n+   |     ^ temporary value dropped here while still borrowed\n+23 | }\n+   | - temporary value needs to live until here\n+\n+error: aborting due to previous error\n+"}, {"sha": "4ca0ccaa731d8f30b62abd9332560fe615c294cf", "filename": "src/test/ui/span/slice-borrow.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -13,7 +13,7 @@\n fn main() {\n     let y;\n     {\n-        let x: &[isize] = &[1, 2, 3, 4, 5]; //~ ERROR borrowed value does not live long enough\n+        let x: &[isize] = &[1, 2, 3, 4, 5];\n         y = &x[1..];\n     }\n }", "previous_filename": "src/test/compile-fail/slice-borrow.rs"}, {"sha": "efe81fd00bf4789b2069fb255d68782041d53b98", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdf7633f08ee77e303f1bf88b613a35f9946e75/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=cfdf7633f08ee77e303f1bf88b613a35f9946e75", "patch": "@@ -0,0 +1,13 @@\n+error: borrowed value does not live long enough\n+  --> $DIR/slice-borrow.rs:18:5\n+   |\n+16 |         let x: &[isize] = &[1, 2, 3, 4, 5];\n+   |                            --------------- temporary value created here\n+17 |         y = &x[1..];\n+18 |     }\n+   |     ^ temporary value dropped here while still borrowed\n+19 | }\n+   | - temporary value needs to live until here\n+\n+error: aborting due to previous error\n+"}]}