{"sha": "ce92300a49367a10489d0f9280adfa52ff60f6cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTIzMDBhNDkzNjdhMTA0ODlkMGY5MjgwYWRmYTUyZmY2MGY2Y2Y=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-05-10T20:55:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-10T20:55:18Z"}, "message": "Merge pull request #117 from rust-lang/feature/mask-select\n\nImplement select on masks", "tree": {"sha": "acc4771f17cdf3d09297cf891cf1a41f06890730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acc4771f17cdf3d09297cf891cf1a41f06890730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce92300a49367a10489d0f9280adfa52ff60f6cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmZ22CRBK7hj4Ov3rIwAAbIMIACRt8q60XiZbAca1a49bzHtW\nPsl/ry40/RZyfYCjBXLCd3Z57/2iSSVGsyZyQ69vYMfJXkoOTjBDb/i0zFQqqNnv\ndcyoWXEiY1PMS30kcCNmLUmyizQ0buH8mkcuHfO03+BFvZOnHA4FQG8tXWot/BJN\nJitF648LS018jwe5Tsdt2OF0uGNCiv1gSDkrWA/dumpPmYwN5a5gWeOhmR/gqC6a\nvj/roojFYdIB09aYMJ5wEO+DsmOUkDn9YBNgPhihQvrPqG9+SVcl0zWN+423ccwR\nlj+z4iG+sQt/ChBhKWAFlnZofzVEmVHeQMUSDehfSijsbZ3vIGDKkLI1H6Wp46g=\n=Sxos\n-----END PGP SIGNATURE-----\n", "payload": "tree acc4771f17cdf3d09297cf891cf1a41f06890730\nparent dfebaf901e6ac63cb9de686ef21b4709e5b35976\nparent 45d7e80aa88a689ac15a029de2af0ef698465fb4\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1620680118 -0700\ncommitter GitHub <noreply@github.com> 1620680118 -0700\n\nMerge pull request #117 from rust-lang/feature/mask-select\n\nImplement select on masks"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce92300a49367a10489d0f9280adfa52ff60f6cf", "html_url": "https://github.com/rust-lang/rust/commit/ce92300a49367a10489d0f9280adfa52ff60f6cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce92300a49367a10489d0f9280adfa52ff60f6cf/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfebaf901e6ac63cb9de686ef21b4709e5b35976", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfebaf901e6ac63cb9de686ef21b4709e5b35976", "html_url": "https://github.com/rust-lang/rust/commit/dfebaf901e6ac63cb9de686ef21b4709e5b35976"}, {"sha": "45d7e80aa88a689ac15a029de2af0ef698465fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d7e80aa88a689ac15a029de2af0ef698465fb4", "html_url": "https://github.com/rust-lang/rust/commit/45d7e80aa88a689ac15a029de2af0ef698465fb4"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "3779d96a40ec4283a517e744b5de26b4439e05dd", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=ce92300a49367a10489d0f9280adfa52ff60f6cf", "patch": "@@ -82,6 +82,7 @@ extern \"platform-intrinsic\" {\n \n     // select\n     pub(crate) fn simd_select<T, U>(m: T, a: U, b: U) -> U;\n+    #[allow(unused)]\n     pub(crate) fn simd_select_bitmask<T, U>(m: T, a: U, b: U) -> U;\n }\n "}, {"sha": "343fd33a53506f88a990724b07522360c8e86114", "filename": "crates/core_simd/src/select.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Fsrc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fselect.rs?ref=ce92300a49367a10489d0f9280adfa52ff60f6cf", "patch": "@@ -1,10 +1,13 @@\n mod sealed {\n-pub trait Sealed {}\n+    pub trait Sealed {}\n }\n use sealed::Sealed;\n \n /// Supporting trait for vector `select` function\n-pub trait Select<Mask>: Sealed {}\n+pub trait Select<Mask>: Sealed {\n+    #[doc(hidden)]\n+    fn select(mask: Mask, true_values: Self, false_values: Self) -> Self;\n+}\n \n macro_rules! impl_select {\n     {\n@@ -17,9 +20,32 @@ macro_rules! impl_select {\n             crate::$mask<LANES>: crate::Mask,\n             crate::$bits_ty<LANES>: crate::LanesAtMost32,\n             Self: crate::LanesAtMost32,\n-        {}\n+        {\n+            #[doc(hidden)]\n+            #[inline]\n+            fn select(mask: crate::$mask<LANES>, true_values: Self, false_values: Self) -> Self {\n+                unsafe { crate::intrinsics::simd_select(mask.to_int(), true_values, false_values) }\n+            }\n+        }\n         )*\n \n+        impl<const LANES: usize> Sealed for crate::$mask<LANES>\n+        where\n+            Self: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+        {}\n+        impl<const LANES: usize> Select<Self> for crate::$mask<LANES>\n+        where\n+            Self: crate::Mask,\n+            crate::$bits_ty<LANES>: crate::LanesAtMost32,\n+        {\n+            #[doc(hidden)]\n+            #[inline]\n+            fn select(mask: Self, true_values: Self, false_values: Self) -> Self {\n+                mask & true_values | !mask & false_values\n+            }\n+        }\n+\n         impl<const LANES: usize> crate::$mask<LANES>\n         where\n             Self: crate::Mask,\n@@ -38,8 +64,19 @@ macro_rules! impl_select {\n             /// let c = mask.select(a, b);\n             /// assert_eq!(c.to_array(), [0, 5, 6, 3]);\n             /// ```\n+            ///\n+            /// `select` can also be used on masks:\n+            /// ```\n+            /// # use core_simd::Mask32;\n+            /// let a = Mask32::from_array([true, true, false, false]);\n+            /// let b = Mask32::from_array([false, false, true, true]);\n+            /// let mask = Mask32::from_array([true, false, false, true]);\n+            /// let c = mask.select(a, b);\n+            /// assert_eq!(c.to_array(), [true, false, true, false]);\n+            /// ```\n+            #[inline]\n             pub fn select<S: Select<Self>>(self, true_values: S, false_values: S) -> S {\n-                unsafe { crate::intrinsics::simd_select(self.to_int(), true_values, false_values) }\n+                S::select(self, true_values, false_values)\n             }\n         }\n     }"}, {"sha": "b9ec8462a052fb6ac27a6652bbe699622f9af404", "filename": "crates/core_simd/tests/mask_ops_impl/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce92300a49367a10489d0f9280adfa52ff60f6cf/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs?ref=ce92300a49367a10489d0f9280adfa52ff60f6cf", "patch": "@@ -1,6 +1,7 @@\n #[macro_use]\n mod mask_macros;\n \n+#[rustfmt::skip]\n mod mask8;\n mod mask16;\n mod mask32;"}]}