{"sha": "cb14269145abef952861b4f73beb78a7ca79e8f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMTQyNjkxNDVhYmVmOTUyODYxYjRmNzNiZWI3OGE3Y2E3OWU4ZjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-16T13:20:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-16T13:20:44Z"}, "message": "Replace a couple of asserts with rtassert! in rt code\n\nThis replaces a couple of panic locations with hard aborts. The panics\ncan't be catched by the user anyway in these locations.", "tree": {"sha": "9e5b56fa939065ae63dc12feedee2b602613d525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5b56fa939065ae63dc12feedee2b602613d525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb14269145abef952861b4f73beb78a7ca79e8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb14269145abef952861b4f73beb78a7ca79e8f6", "html_url": "https://github.com/rust-lang/rust/commit/cb14269145abef952861b4f73beb78a7ca79e8f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb14269145abef952861b4f73beb78a7ca79e8f6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad44b23d1e6d0d5f52d3ed689f35abbe797ef11", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad44b23d1e6d0d5f52d3ed689f35abbe797ef11", "html_url": "https://github.com/rust-lang/rust/commit/1ad44b23d1e6d0d5f52d3ed689f35abbe797ef11"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "9adf9a20747d5fea9fdeabb1f440eec264da0e4c", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=cb14269145abef952861b4f73beb78a7ca79e8f6", "patch": "@@ -26,38 +26,6 @@ use crate::sys;\n use crate::sys_common::thread_info;\n use crate::thread::Thread;\n \n-// One-time runtime initialization.\n-// Runs before `main`.\n-// SAFETY: must be called only once during runtime initialization.\n-// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-#[cfg_attr(test, allow(dead_code))]\n-unsafe fn init(argc: isize, argv: *const *const u8) {\n-    unsafe {\n-        sys::init(argc, argv);\n-\n-        let main_guard = sys::thread::guard::init();\n-        // Next, set up the current Thread with the guard information we just\n-        // created. Note that this isn't necessary in general for new threads,\n-        // but we just do this to name the main thread and to give it correct\n-        // info about the stack bounds.\n-        let thread = Thread::new(Some(CString::new(\"main\").unwrap()));\n-        thread_info::set(main_guard, thread);\n-    }\n-}\n-\n-// One-time runtime cleanup.\n-// Runs after `main` or at program exit.\n-// NOTE: this is not guaranteed to run, for example when the program aborts.\n-pub(crate) fn cleanup() {\n-    static CLEANUP: Once = Once::new();\n-    CLEANUP.call_once(|| unsafe {\n-        // Flush stdout and disable buffering.\n-        crate::io::cleanup();\n-        // SAFETY: Only called once during runtime cleanup.\n-        sys::cleanup();\n-    });\n-}\n-\n // Prints to the \"panic output\", depending on the platform this may be:\n // - the standard error output\n // - some dedicated platform specific output\n@@ -99,6 +67,38 @@ macro_rules! rtunwrap {\n     };\n }\n \n+// One-time runtime initialization.\n+// Runs before `main`.\n+// SAFETY: must be called only once during runtime initialization.\n+// NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n+#[cfg_attr(test, allow(dead_code))]\n+unsafe fn init(argc: isize, argv: *const *const u8) {\n+    unsafe {\n+        sys::init(argc, argv);\n+\n+        let main_guard = sys::thread::guard::init();\n+        // Next, set up the current Thread with the guard information we just\n+        // created. Note that this isn't necessary in general for new threads,\n+        // but we just do this to name the main thread and to give it correct\n+        // info about the stack bounds.\n+        let thread = Thread::new(Some(rtunwrap!(Ok, CString::new(\"main\"))));\n+        thread_info::set(main_guard, thread);\n+    }\n+}\n+\n+// One-time runtime cleanup.\n+// Runs after `main` or at program exit.\n+// NOTE: this is not guaranteed to run, for example when the program aborts.\n+pub(crate) fn cleanup() {\n+    static CLEANUP: Once = Once::new();\n+    CLEANUP.call_once(|| unsafe {\n+        // Flush stdout and disable buffering.\n+        crate::io::cleanup();\n+        // SAFETY: Only called once during runtime cleanup.\n+        sys::cleanup();\n+    });\n+}\n+\n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work.\n #[cfg(not(test))]"}, {"sha": "1c37f4ee4981e51f07cc2d30df4ab60fed59823b", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=cb14269145abef952861b4f73beb78a7ca79e8f6", "patch": "@@ -120,7 +120,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n \n     unsafe fn reset_sigpipe() {\n         #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n-        assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n+        rtassert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n }\n "}, {"sha": "c8c0ecceb48cb496d4fc660c50c65abc72459786", "filename": "library/std/src/sys_common/thread_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb14269145abef952861b4f73beb78a7ca79e8f6/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_info.rs?ref=cb14269145abef952861b4f73beb78a7ca79e8f6", "patch": "@@ -39,6 +39,6 @@ pub fn stack_guard() -> Option<Guard> {\n }\n \n pub fn set(stack_guard: Option<Guard>, thread: Thread) {\n-    THREAD_INFO.with(|c| assert!(c.borrow().is_none()));\n+    THREAD_INFO.with(|c| rtassert!(c.borrow().is_none()));\n     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo { stack_guard, thread }));\n }"}]}