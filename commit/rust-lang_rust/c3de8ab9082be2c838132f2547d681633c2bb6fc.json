{"sha": "c3de8ab9082be2c838132f2547d681633c2bb6fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZGU4YWI5MDgyYmUyYzgzODEzMmYyNTQ3ZDY4MTYzM2MyYmI2ZmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:48Z"}, "message": "Rollup merge of #81969 - jonas-schievink:no-cfg-if, r=Mark-Simulacrum\n\nAvoid `cfg_if` in `std::os`\n\nrust-analyzer cannot currently load the `cfg_if` crate, which means that rust-analyzer is unable to see `std::os::{unix, windows, linux}` here. This works around that by avoiding `cfg_if`; the `#[cfg]` expressions are simple enough to reasonably write by hand.\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6038", "tree": {"sha": "2a1c782fc6aa8a1e01019c94f5b4bbccead297b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1c782fc6aa8a1e01019c94f5b4bbccead297b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3de8ab9082be2c838132f2547d681633c2bb6fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+0CRBK7hj4Ov3rIwAAdHIIACqiUK8XJeganZ9/Z3M2BO9C\nMn80buru8yXFSp/WVLNoHXcDe49UiRvafrfc515J6UegNSLxYNyqeObTeLbFNz4K\n+wS/d7xkk1QYNJ/WURk88PN2er7HBFAasA1bOGK3n5NKZDpTPCAnmMEw767Z2YrU\n1OAFrAzk4BvAJqxetfHSGYTpdkSjp98Yy5sY3aJu6LrhF+jux/7u6b0YikBawPQy\n6H7X1KP1Adgmxgv+x5TOcFji1aDSNN4h027ZfZ1XKNMNaO/L/DtVwPHDJiypNMm4\nFOMLahCIJiOS3wr2xh6Thwmiokz0mwuYMakAasseAyL/a9Uu+4rHCMkjMYr0Lj8=\n=/dVN\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a1c782fc6aa8a1e01019c94f5b4bbccead297b6\nparent 4af965e73262190137a86b44fc2f75da7fb54eab\nparent 7bc501687b39a9d47938c58f2661b54f014ff7d3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045108 +0100\ncommitter GitHub <noreply@github.com> 1614045108 +0100\n\nRollup merge of #81969 - jonas-schievink:no-cfg-if, r=Mark-Simulacrum\n\nAvoid `cfg_if` in `std::os`\n\nrust-analyzer cannot currently load the `cfg_if` crate, which means that rust-analyzer is unable to see `std::os::{unix, windows, linux}` here. This works around that by avoiding `cfg_if`; the `#[cfg]` expressions are simple enough to reasonably write by hand.\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/6038\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3de8ab9082be2c838132f2547d681633c2bb6fc", "html_url": "https://github.com/rust-lang/rust/commit/c3de8ab9082be2c838132f2547d681633c2bb6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3de8ab9082be2c838132f2547d681633c2bb6fc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af965e73262190137a86b44fc2f75da7fb54eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af965e73262190137a86b44fc2f75da7fb54eab", "html_url": "https://github.com/rust-lang/rust/commit/4af965e73262190137a86b44fc2f75da7fb54eab"}, {"sha": "7bc501687b39a9d47938c58f2661b54f014ff7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc501687b39a9d47938c58f2661b54f014ff7d3", "html_url": "https://github.com/rust-lang/rust/commit/7bc501687b39a9d47938c58f2661b54f014ff7d3"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "f61e402e37027ae18f5e579afdd0e1b4f0ac47ae", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c3de8ab9082be2c838132f2547d681633c2bb6fc/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3de8ab9082be2c838132f2547d681633c2bb6fc/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=c3de8ab9082be2c838132f2547d681633c2bb6fc", "patch": "@@ -3,40 +3,40 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n-cfg_if::cfg_if! {\n-    if #[cfg(doc)] {\n+// When documenting libstd we want to show unix/windows/linux modules as these are the \"main\n+// modules\" that are used across platforms, so all modules are enabled when `cfg(doc)` is set.\n+// This should help show platform-specific functionality in a hopefully cross-platform way in the\n+// documentation.\n+// Note that we deliberately avoid `cfg_if!` here to work around a rust-analyzer bug that would make\n+// `std::os` submodules unusable: https://github.com/rust-analyzer/rust-analyzer/issues/6038\n \n-        // When documenting libstd we want to show unix/windows/linux modules as\n-        // these are the \"main modules\" that are used across platforms. This\n-        // should help show platform-specific functionality in a hopefully\n-        // cross-platform way in the documentation\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::unix_ext as unix;\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::unix_ext as unix;\n+#[cfg(doc)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::windows_ext as windows;\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::windows_ext as windows;\n+#[cfg(doc)]\n+#[doc(cfg(target_os = \"linux\"))]\n+pub mod linux;\n \n-        #[doc(cfg(target_os = \"linux\"))]\n-        pub mod linux;\n-    } else {\n+// If we're not documenting libstd then we just expose the main modules as we otherwise would.\n \n-        // If we're not documenting libstd then we just expose the main modules\n-        // as we otherwise would.\n+#[cfg(not(doc))]\n+#[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::ext as unix;\n \n-        #[cfg(any(target_os = \"redox\", unix, target_os = \"vxworks\", target_os = \"hermit\"))]\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::ext as unix;\n+#[cfg(not(doc))]\n+#[cfg(windows)]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::ext as windows;\n \n-        #[cfg(windows)]\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        pub use crate::sys::ext as windows;\n-\n-        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-        pub mod linux;\n-\n-    }\n-}\n+#[cfg(not(doc))]\n+#[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+pub mod linux;\n \n #[cfg(target_os = \"android\")]\n pub mod android;"}]}