{"sha": "f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "node_id": "C_kwDOAAsO6NoAKGY0MDgzYzVhZTcyZjVmODBiZjE5ZTg4MTUyOGM0ZDM5YjM4ZGIwZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T09:20:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T09:20:50Z"}, "message": "Auto merge of #9745 - matttpt:fix-redundant-closure-for-method-calls-suggestion, r=flip1995\n\nFix `redundant_closure_for_method_calls` suggestion\n\nFixes #7746. The issue turns out to be more general than raw pointers. The `redundant_closure_for_method_calls` lint produces incorrect suggestions when the method is associated with a type that must be enclosed in angle brackets or must be written with generic arguments substituted. For example:\n\n```rust\nfn main() {\n    // Clippy's suggestion: [T; N]::as_slice\n    // Correct suggestion:  <[u8; 3]>::as_slice\n    let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);\n    array_opt.map(|a| a.as_slice());\n\n    // Clippy's suggestion: [T]::len\n    // Correct suggestion:  <[u8]>::len\n    let slice_opt: Option<&[u8]> = Some(b\"slice\");\n    slice_opt.map(|s| s.len());\n\n    // Clippy's suggestion: *const T::is_null\n    // Correct suggestion:  <*const usize>::is_null\n    let ptr_opt: Option<*const usize> = Some(&487);\n    ptr_opt.map(|p| p.is_null());\n\n    // Clippy's suggestion: dyn TestTrait::method_on_dyn\n    // Correct suggestion:  <dyn TestTrait>::method_on_dyn\n    let test_struct = TestStruct {};\n    let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);\n    dyn_opt.map(|d| d.method_on_dyn());\n}\n\n// For the trait object example:\ntrait TestTrait {}\nstruct TestStruct {}\nimpl TestTrait for TestStruct {}\n\nimpl dyn TestTrait + '_ {\n    fn method_on_dyn(&self) -> bool {\n        false\n    }\n}\n```\n\nThe issue also affects references and tuples, though I had to patch the standard library with non-trait methods for those types to test that. Just in case, I also included handling for `!`, since it appeared to be possible to call methods on it with angle brackets. I just couldn't verify the resulting suggestion, since dead-code analysis eliminates the code first.\n\nThis is my first exposure to Rust compiler internals, so please let me know if I'm taking the wrong approach here!\n\nchangelog: [`redundant_closure_for_method_calls`]: add angle brackets and substitute generic arguments in suggestion when needed", "tree": {"sha": "4b407c2bf491818a3789098f001747917f481b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b407c2bf491818a3789098f001747917f481b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "html_url": "https://github.com/rust-lang/rust/commit/f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73efce9ee6e971f45b20976c1efd96888faf4a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/73efce9ee6e971f45b20976c1efd96888faf4a1d", "html_url": "https://github.com/rust-lang/rust/commit/73efce9ee6e971f45b20976c1efd96888faf4a1d"}, {"sha": "329dc4715bb152c98d4a5d59747604f3e79a2bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/329dc4715bb152c98d4a5d59747604f3e79a2bb6", "html_url": "https://github.com/rust-lang/rust/commit/329dc4715bb152c98d4a5d59747604f3e79a2bb6"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "9588be7364d82a57a32bb91d8874703d0738dd6b", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n-use rustc_middle::ty::{self, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, EarlyBinder, SubstsRef, Ty, TypeVisitable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n@@ -150,7 +150,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             if check_sig(cx, closure_ty, call_ty);\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE_FOR_METHOD_CALLS, expr.span, \"redundant closure\", |diag| {\n-                    let name = get_ufcs_type_name(cx, method_def_id);\n+                    let name = get_ufcs_type_name(cx, method_def_id, substs);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"replace the closure with the method itself\",\n@@ -220,7 +220,7 @@ fn check_sig<'tcx>(cx: &LateContext<'tcx>, closure_ty: Ty<'tcx>, call_ty: Ty<'tc\n     cx.tcx.erase_late_bound_regions(closure_sig) == cx.tcx.erase_late_bound_regions(call_sig)\n }\n \n-fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n+fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs: SubstsRef<'tcx>) -> String {\n     let assoc_item = cx.tcx.associated_item(method_def_id);\n     let def_id = assoc_item.container_id(cx.tcx);\n     match assoc_item.container {\n@@ -229,6 +229,15 @@ fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: DefId) -> String {\n             let ty = cx.tcx.type_of(def_id);\n             match ty.kind() {\n                 ty::Adt(adt, _) => cx.tcx.def_path_str(adt.did()),\n+                ty::Array(..)\n+                | ty::Dynamic(..)\n+                | ty::Never\n+                | ty::RawPtr(_)\n+                | ty::Ref(..)\n+                | ty::Slice(_)\n+                | ty::Tuple(_) => {\n+                    format!(\"<{}>\", EarlyBinder(ty).subst(cx.tcx, substs))\n+                },\n                 _ => ty.to_string(),\n             }\n         },"}, {"sha": "dc129591eac4eb7e4f9e96f9dc64f739acfad0b6", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "patch": "@@ -316,3 +316,25 @@ pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -\n \n     move || takes_fn_mut(&mut f_used_once)\n }\n+\n+impl dyn TestTrait + '_ {\n+    fn method_on_dyn(&self) -> bool {\n+        false\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7746\n+fn angle_brackets_and_substs() {\n+    let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);\n+    array_opt.map(<[u8; 3]>::as_slice);\n+\n+    let slice_opt: Option<&[u8]> = Some(b\"slice\");\n+    slice_opt.map(<[u8]>::len);\n+\n+    let ptr_opt: Option<*const usize> = Some(&487);\n+    ptr_opt.map(<*const usize>::is_null);\n+\n+    let test_struct = TestStruct { some_ref: &487 };\n+    let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);\n+    dyn_opt.map(<dyn TestTrait>::method_on_dyn);\n+}"}, {"sha": "025fd6a0b7afdf1f5995c0a9d38f314d28efbb3c", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "patch": "@@ -316,3 +316,25 @@ pub fn mutable_impl_fn_mut(mut f: impl FnMut(), mut f_used_once: impl FnMut()) -\n \n     move || takes_fn_mut(|| f_used_once())\n }\n+\n+impl dyn TestTrait + '_ {\n+    fn method_on_dyn(&self) -> bool {\n+        false\n+    }\n+}\n+\n+// https://github.com/rust-lang/rust-clippy/issues/7746\n+fn angle_brackets_and_substs() {\n+    let array_opt: Option<&[u8; 3]> = Some(&[4, 8, 7]);\n+    array_opt.map(|a| a.as_slice());\n+\n+    let slice_opt: Option<&[u8]> = Some(b\"slice\");\n+    slice_opt.map(|s| s.len());\n+\n+    let ptr_opt: Option<*const usize> = Some(&487);\n+    ptr_opt.map(|p| p.is_null());\n+\n+    let test_struct = TestStruct { some_ref: &487 };\n+    let dyn_opt: Option<&dyn TestTrait> = Some(&test_struct);\n+    dyn_opt.map(|d| d.method_on_dyn());\n+}"}, {"sha": "a521fb868607ad8de2aafb9e3085a6b6bfd12f1e", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4083c5ae72f5f80bf19e881528c4d39b38db0e7/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "patch": "@@ -134,5 +134,29 @@ error: redundant closure\n LL |     move || takes_fn_mut(|| f_used_once())\n    |                          ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut f_used_once`\n \n-error: aborting due to 22 previous errors\n+error: redundant closure\n+  --> $DIR/eta.rs:329:19\n+   |\n+LL |     array_opt.map(|a| a.as_slice());\n+   |                   ^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8; 3]>::as_slice`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:332:19\n+   |\n+LL |     slice_opt.map(|s| s.len());\n+   |                   ^^^^^^^^^^^ help: replace the closure with the method itself: `<[u8]>::len`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:335:17\n+   |\n+LL |     ptr_opt.map(|p| p.is_null());\n+   |                 ^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<*const usize>::is_null`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:339:17\n+   |\n+LL |     dyn_opt.map(|d| d.method_on_dyn());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `<dyn TestTrait>::method_on_dyn`\n+\n+error: aborting due to 26 previous errors\n "}]}