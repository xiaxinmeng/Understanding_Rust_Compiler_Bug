{"sha": "cc2503a4f4ffc86beced2715764e38ddde802f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjUwM2E0ZjRmZmM4NmJlY2VkMjcxNTc2NGUzOGRkZGU4MDJmOTg=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-08T21:42:33Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-09T15:10:27Z"}, "message": "Add individual docs for rotate_{left, right}", "tree": {"sha": "22d490465f5e083675682032544ec1f32fee6f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d490465f5e083675682032544ec1f32fee6f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2503a4f4ffc86beced2715764e38ddde802f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2503a4f4ffc86beced2715764e38ddde802f98", "html_url": "https://github.com/rust-lang/rust/commit/cc2503a4f4ffc86beced2715764e38ddde802f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2503a4f4ffc86beced2715764e38ddde802f98/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4471537ea046da8d8465e2234fa501c29b201d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4471537ea046da8d8465e2234fa501c29b201d0c", "html_url": "https://github.com/rust-lang/rust/commit/4471537ea046da8d8465e2234fa501c29b201d0c"}], "stats": {"total": 228, "additions": 115, "deletions": 113}, "files": [{"sha": "dce587e4eb017c0605da62a683cb745d0d6e8a83", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 115, "deletions": 113, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/cc2503a4f4ffc86beced2715764e38ddde802f98/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2503a4f4ffc86beced2715764e38ddde802f98/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cc2503a4f4ffc86beced2715764e38ddde802f98", "patch": "@@ -188,7 +188,7 @@ mod wrapping;\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n-     $EndFeature:expr) => {\n+     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -334,55 +334,52 @@ $EndFeature, \"\n             }\n         }\n \n-        /// Shifts the bits to the left by a specified amount, `n`,\n-        /// wrapping the truncated bits to the end of the resulting integer.\n-        ///\n-        /// Please note this isn't the same operation as `<<`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i64` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFi64;\n-        /// let m = -0x76543210FEDCBA99i64;\n-        ///\n-        /// assert_eq!(n.rotate_left(32), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_left(n) as Self\n-        }\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the left by a specified amount, `n`,\n+wrapping the truncated bits to the end of the resulting integer.\n \n-        /// Shifts the bits to the right by a specified amount, `n`,\n-        /// wrapping the truncated bits to the beginning of the resulting\n-        /// integer.\n-        ///\n-        /// Please note this isn't the same operation as `>>`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i64` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFi64;\n-        /// let m = -0xFEDCBA987654322i64;\n-        ///\n-        /// assert_eq!(n.rotate_right(4), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            (self as $UnsignedT).rotate_right(n) as Self\n+Please note this isn't the same operation as `<<`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_op, stringify!($SelfT), \";\n+let m = \", $rot_result, \";\n+\n+assert_eq!(n.rotate_left(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_left(self, n: u32) -> Self {\n+                (self as $UnsignedT).rotate_left(n) as Self\n+            }\n         }\n \n+        doc_comment! {\n+            concat!(\"Shifts the bits to the right by a specified amount, `n`,\n+wrapping the truncated bits to the beginning of the resulting\n+integer.\n+\n+Please note this isn't the same operation as `>>`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_result, stringify!($SelfT), \";\n+let m = \", $rot_op, \";\n+\n+assert_eq!(n.rotate_right(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_right(self, n: u32) -> Self {\n+                (self as $UnsignedT).rotate_right(n) as Self\n+            }\n+        }\n         /// Reverses the byte order of the integer.\n         ///\n         /// # Examples\n@@ -1940,46 +1937,50 @@ $EndFeature, \"\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\" }\n+    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\" }\n+    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\" }\n+    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n+    int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n+                \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n-        170141183460469231731687303715884105727, \"\", \"\" }\n+        170141183460469231731687303715884105727, \"\", \"\", 16,\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\"\n+    }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\" }\n+    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\" }\n+    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\" }\n+    int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n+        12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n // Emits the correct `cttz` call, depending on the size of the type.\n@@ -1997,7 +1998,8 @@ macro_rules! uint_cttz_call {\n \n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr) => {\n+    ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n+        $rot:expr, $rot_op:expr, $rot_result:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2138,57 +2140,55 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             }\n         }\n \n-        /// Shifts the bits to the left by a specified amount, `n`,\n-        /// wrapping the truncated bits to the end of the resulting integer.\n-        ///\n-        /// Please note this isn't the same operation as `<<`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u64` is used here.\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0x3456789ABCDEF012u64;\n-        ///\n-        /// assert_eq!(n.rotate_left(12), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_left(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self << n) | (self >> (($BITS - n) % $BITS))\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the left by a specified amount, `n`,\n+wrapping the truncated bits to the end of the resulting integer.\n+\n+Please note this isn't the same operation as `<<`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_op, stringify!($SelfT), \";\n+let m = \", $rot_result, \";\n+\n+assert_eq!(n.rotate_left(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_left(self, n: u32) -> Self {\n+                // Protect against undefined behaviour for over-long bit shifts\n+                let n = n % $BITS;\n+                (self << n) | (self >> (($BITS - n) % $BITS))\n+            }\n         }\n \n-        /// Shifts the bits to the right by a specified amount, `n`,\n-        /// wrapping the truncated bits to the beginning of the resulting\n-        /// integer.\n-        ///\n-        /// Please note this isn't the same operation as `>>`!\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u64` is used here.\n-        ///\n-        /// ```\n-        /// let n = 0x0123456789ABCDEFu64;\n-        /// let m = 0xDEF0123456789ABCu64;\n-        ///\n-        /// assert_eq!(n.rotate_right(12), m);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[inline]\n-        pub fn rotate_right(self, n: u32) -> Self {\n-            // Protect against undefined behaviour for over-long bit shifts\n-            let n = n % $BITS;\n-            (self >> n) | (self << (($BITS - n) % $BITS))\n+        doc_comment! {\n+            concat!(\"Shifts the bits to the right by a specified amount, `n`,\n+wrapping the truncated bits to the beginning of the resulting\n+integer.\n+\n+Please note this isn't the same operation as `>>`!\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $rot_result, stringify!($SelfT), \";\n+let m = \", $rot_op, \";\n+\n+assert_eq!(n.rotate_right(\", $rot, \"), m);\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline]\n+            pub fn rotate_right(self, n: u32) -> Self {\n+                // Protect against undefined behaviour for over-long bit shifts\n+                let n = n % $BITS;\n+                (self >> n) | (self << (($BITS - n) % $BITS))\n+            }\n         }\n \n         /// Reverses the byte order of the integer.\n@@ -3549,7 +3549,7 @@ $EndFeature, \"\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8, 255, \"\", \"\" }\n+    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4095,39 +4095,41 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16, 65535, \"\", \"\" }\n+    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\" }\n+    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\" }\n+    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\" }\n+    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16, 65536, \"\", \"\" }\n+    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\" }\n+    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\" }\n+    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\",\n+        \"0x6e10aa\" }\n }\n \n /// A classification of floating point numbers."}]}