{"sha": "24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YjQ5MjI4ZjBkYmQ1YTRiNTlhNTI5NzUzMmY0YjljYjRkZmRjNmE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-31T01:09:48Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:26Z"}, "message": "rustc_trans: unbox closures used in function arguments", "tree": {"sha": "d22af8767b8df0fa0f5a1895f33703e2eecd8e5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22af8767b8df0fa0f5a1895f33703e2eecd8e5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "html_url": "https://github.com/rust-lang/rust/commit/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a/comments", "author": null, "committer": null, "parents": [{"sha": "5de9f47e49200f1e9e367144d184446ddde9105b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de9f47e49200f1e9e367144d184446ddde9105b", "html_url": "https://github.com/rust-lang/rust/commit/5de9f47e49200f1e9e367144d184446ddde9105b"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "cf3070919cb38686940fedbba165bf15baeee829", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=24b49228f0dbd5a4b59a5297532f4b9cb4dfdc6a", "patch": "@@ -299,12 +299,16 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // into a type to be destructed. If we want to end up with a Box pointer,\n     // then mk_ty should make a Box pointer (T -> Box<T>), if we want a\n     // borrowed reference then it should be T -> &T.\n-    // FIXME(#19596) unbox `mk_ty`\n-    fn unsized_info<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                                kind: &ty::UnsizeKind<'tcx>,\n-                                id: ast::NodeId,\n-                                unadjusted_ty: Ty<'tcx>,\n-                                mk_ty: |Ty<'tcx>| -> Ty<'tcx>) -> ValueRef {\n+    fn unsized_info<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n+                                   kind: &ty::UnsizeKind<'tcx>,\n+                                   id: ast::NodeId,\n+                                   unadjusted_ty: Ty<'tcx>,\n+                                   mk_ty: F) -> ValueRef where\n+        F: FnOnce(Ty<'tcx>) -> Ty<'tcx>,\n+    {\n+        // FIXME(#19596) workaround: `|t| t` causes monomorphization recursion\n+        fn identity<T>(t: T) -> T { t }\n+\n         debug!(\"unsized_info(kind={}, id={}, unadjusted_ty={})\",\n                kind, id, unadjusted_ty.repr(bcx.tcx()));\n         match kind {\n@@ -314,7 +318,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     let ty_substs = substs.types.get_slice(subst::TypeSpace);\n                     // The dtor for a field treats it like a value, so mk_ty\n                     // should just be the identity function.\n-                    unsized_info(bcx, k, id, ty_substs[tp_index], |t| t)\n+                    unsized_info(bcx, k, id, ty_substs[tp_index], identity)\n                 }\n                 _ => bcx.sess().bug(format!(\"UnsizeStruct with bad sty: {}\",\n                                           bcx.ty_to_string(unadjusted_ty))[])"}]}