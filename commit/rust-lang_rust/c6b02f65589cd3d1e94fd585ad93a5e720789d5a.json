{"sha": "c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjAyZjY1NTg5Y2QzZDFlOTRmZDU4NWFkOTNhNWU3MjA3ODlkNWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T22:45:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:48Z"}, "message": "std: Improve Duration comments", "tree": {"sha": "a48504c1a2d439b77fe6b865edd49e3252560f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48504c1a2d439b77fe6b865edd49e3252560f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "html_url": "https://github.com/rust-lang/rust/commit/c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b02f65589cd3d1e94fd585ad93a5e720789d5a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee10f3501c1df04a015a5331c8343792e519c7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee10f3501c1df04a015a5331c8343792e519c7a7", "html_url": "https://github.com/rust-lang/rust/commit/ee10f3501c1df04a015a5331c8343792e519c7a7"}], "stats": {"total": 19, "additions": 2, "deletions": 17}, "files": [{"sha": "ddec5f8b3b8b5e175ac558eaad8b022bb2c522b3", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6b02f65589cd3d1e94fd585ad93a5e720789d5a/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b02f65589cd3d1e94fd585ad93a5e720789d5a/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=c6b02f65589cd3d1e94fd585ad93a5e720789d5a", "patch": "@@ -39,8 +39,8 @@ macro_rules! try_opt(\n #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n pub struct Duration {\n     days: i32,\n-    secs: u32,\n-    nanos: u32,\n+    secs: u32,  // Always < SECS_PER_DAY\n+    nanos: u32, // Always < NANOS_PR_SECOND\n }\n \n /// The minimum possible `Duration`.\n@@ -81,18 +81,13 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of days.\n     /// Equivalent to `Duration::new(days, 0, 0)`.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn days(days: i32) -> Duration {\n-        let days = days.to_i32().expect(\"Duration::days out of bounds\");\n         Duration { days: days, secs: 0, nanos: 0 }\n     }\n \n     /// Makes a new `Duration` with given number of hours.\n     /// Equivalent to `Duration::new(0, hours * 3600, 0)` with overflow checks.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn hours(hours: i32) -> Duration {\n         let (days, hours) = div_mod_floor(hours, (SECS_PER_DAY / 3600));\n@@ -102,8 +97,6 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of minutes.\n     /// Equivalent to `Duration::new(0, mins * 60, 0)` with overflow checks.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn minutes(mins: i32) -> Duration {\n         let (days, mins) = div_mod_floor(mins, (SECS_PER_DAY / 60));\n@@ -113,8 +106,6 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of seconds.\n     /// Equivalent to `Duration::new(0, secs, 0)`.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn seconds(secs: i32) -> Duration {\n         let (days, secs) = div_mod_floor(secs, SECS_PER_DAY);\n@@ -123,8 +114,6 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of milliseconds.\n     /// Equivalent to `Duration::new(0, 0, millis * 1_000_000)` with overflow checks.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn milliseconds(millis: i32) -> Duration {\n         let (secs, millis) = div_mod_floor(millis, (NANOS_PER_SEC / 1_000_000));\n@@ -134,8 +123,6 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of microseconds.\n     /// Equivalent to `Duration::new(0, 0, micros * 1_000)` with overflow checks.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn microseconds(micros: i32) -> Duration {\n         let (secs, micros) = div_mod_floor(micros, (NANOS_PER_SEC / 1_000));\n@@ -145,8 +132,6 @@ impl Duration {\n \n     /// Makes a new `Duration` with given number of nanoseconds.\n     /// Equivalent to `Duration::new(0, 0, nanos)`.\n-    ///\n-    /// Fails when the duration is out of bounds.\n     #[inline]\n     pub fn nanoseconds(nanos: i32) -> Duration {\n         let (secs, nanos) = div_mod_floor(nanos, NANOS_PER_SEC);"}]}