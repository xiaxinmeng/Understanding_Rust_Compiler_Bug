{"sha": "14265f9c5558e599ba8908cffc717f26389420e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MjY1ZjljNTU1OGU1OTliYTg5MDhjZmZjNzE3ZjI2Mzg5NDIwZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T22:20:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T22:20:58Z"}, "message": "Auto merge of #79578 - alexcrichton:update-waasi, r=KodrAus\n\nstd: Update wasi-libc commit of the wasm32-wasi target\n\nThis brings in an implementation of `current_dir` and `set_current_dir`\n(emulation in `wasi-libc`) as well as an updated version of finding\nrelative paths. This also additionally updates clang to the latest\nrelease to build wasi-libc with.", "tree": {"sha": "7c1d1e79e9ac56e01c1ec715164e507c7f6d5945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1d1e79e9ac56e01c1ec715164e507c7f6d5945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14265f9c5558e599ba8908cffc717f26389420e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14265f9c5558e599ba8908cffc717f26389420e1", "html_url": "https://github.com/rust-lang/rust/commit/14265f9c5558e599ba8908cffc717f26389420e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14265f9c5558e599ba8908cffc717f26389420e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a96fb7973649807a7943e7395456db158dcab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a96fb7973649807a7943e7395456db158dcab6", "html_url": "https://github.com/rust-lang/rust/commit/c5a96fb7973649807a7943e7395456db158dcab6"}, {"sha": "5756bd7f2daaa1acf486f911f7246498c7ee6881", "url": "https://api.github.com/repos/rust-lang/rust/commits/5756bd7f2daaa1acf486f911f7246498c7ee6881", "html_url": "https://github.com/rust-lang/rust/commit/5756bd7f2daaa1acf486f911f7246498c7ee6881"}], "stats": {"total": 110, "additions": 82, "deletions": 28}, "files": [{"sha": "4134ef676719ccea4606860f06aaa3d0f466a2c2", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/14265f9c5558e599ba8908cffc717f26389420e1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14265f9c5558e599ba8908cffc717f26389420e1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=14265f9c5558e599ba8908cffc717f26389420e1", "patch": "@@ -627,33 +627,50 @@ fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {\n /// to any pre-opened file descriptor.\n fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n     let p = CString::new(p.as_os_str().as_bytes())?;\n-    unsafe {\n-        let mut ret = ptr::null();\n-        let fd = __wasilibc_find_relpath(p.as_ptr(), &mut ret);\n-        if fd == -1 {\n-            let msg = format!(\n-                \"failed to find a pre-opened file descriptor \\\n-                 through which {:?} could be opened\",\n-                p\n+    let mut buf = Vec::<u8>::with_capacity(512);\n+    loop {\n+        unsafe {\n+            let mut relative_path = buf.as_ptr().cast();\n+            let mut abs_prefix = ptr::null();\n+            let fd = __wasilibc_find_relpath(\n+                p.as_ptr(),\n+                &mut abs_prefix,\n+                &mut relative_path,\n+                buf.capacity(),\n             );\n-            return Err(io::Error::new(io::ErrorKind::Other, msg));\n+            if fd == -1 {\n+                if io::Error::last_os_error().raw_os_error() == Some(libc::ENOMEM) {\n+                    // Trigger the internal buffer resizing logic of `Vec` by requiring\n+                    // more space than the current capacity.\n+                    let cap = buf.capacity();\n+                    buf.set_len(cap);\n+                    buf.reserve(1);\n+                    continue;\n+                }\n+                let msg = format!(\n+                    \"failed to find a pre-opened file descriptor \\\n+                     through which {:?} could be opened\",\n+                    p\n+                );\n+                return Err(io::Error::new(io::ErrorKind::Other, msg));\n+            }\n+            let len = CStr::from_ptr(buf.as_ptr().cast()).to_bytes().len();\n+            buf.set_len(len);\n+            buf.shrink_to_fit();\n+\n+            return Ok((\n+                ManuallyDrop::new(WasiFd::from_raw(fd as u32)),\n+                PathBuf::from(OsString::from_vec(buf)),\n+            ));\n         }\n-        let path = Path::new(OsStr::from_bytes(CStr::from_ptr(ret).to_bytes()));\n-\n-        // FIXME: right now `path` is a pointer into `p`, the `CString` above.\n-        // When we return `p` is deallocated and we can't use it, so we need to\n-        // currently separately allocate `path`. If this becomes an issue though\n-        // we should probably turn this into a closure-taking interface or take\n-        // `&CString` and then pass off `&Path` tied to the same lifetime.\n-        let path = path.to_path_buf();\n-\n-        return Ok((ManuallyDrop::new(WasiFd::from_raw(fd as u32)), path));\n     }\n \n     extern \"C\" {\n         pub fn __wasilibc_find_relpath(\n             path: *const libc::c_char,\n+            abs_prefix: *mut *const libc::c_char,\n             relative_path: *mut *const libc::c_char,\n+            relative_path_len: libc::size_t,\n         ) -> libc::c_int;\n     }\n }"}, {"sha": "185d6109cb93e93a5cb7a39b42225009670fa212", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/14265f9c5558e599ba8908cffc717f26389420e1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14265f9c5558e599ba8908cffc717f26389420e1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=14265f9c5558e599ba8908cffc717f26389420e1", "patch": "@@ -13,6 +13,16 @@ use crate::sys::memchr;\n use crate::sys::{unsupported, Void};\n use crate::vec;\n \n+// Add a few symbols not in upstream `libc` just yet.\n+mod libc {\n+    pub use libc::*;\n+\n+    extern \"C\" {\n+        pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n+        pub fn chdir(dir: *const c_char) -> c_int;\n+    }\n+}\n+\n #[cfg(not(target_feature = \"atomics\"))]\n pub unsafe fn env_lock() -> impl Any {\n     // No need for a lock if we're single-threaded, but this function will need\n@@ -41,11 +51,40 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n-    unsupported()\n+    let mut buf = Vec::with_capacity(512);\n+    loop {\n+        unsafe {\n+            let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n+            if !libc::getcwd(ptr, buf.capacity()).is_null() {\n+                let len = CStr::from_ptr(buf.as_ptr() as *const libc::c_char).to_bytes().len();\n+                buf.set_len(len);\n+                buf.shrink_to_fit();\n+                return Ok(PathBuf::from(OsString::from_vec(buf)));\n+            } else {\n+                let error = io::Error::last_os_error();\n+                if error.raw_os_error() != Some(libc::ERANGE) {\n+                    return Err(error);\n+                }\n+            }\n+\n+            // Trigger the internal buffer resizing logic of `Vec` by requiring\n+            // more space than the current capacity.\n+            let cap = buf.capacity();\n+            buf.set_len(cap);\n+            buf.reserve(1);\n+        }\n+    }\n }\n \n-pub fn chdir(_: &path::Path) -> io::Result<()> {\n-    unsupported()\n+pub fn chdir(p: &path::Path) -> io::Result<()> {\n+    let p: &OsStr = p.as_ref();\n+    let p = CString::new(p.as_bytes())?;\n+    unsafe {\n+        match libc::chdir(p.as_ptr()) == (0 as libc::c_int) {\n+            true => Ok(()),\n+            false => Err(io::Error::last_os_error()),\n+        }\n+    }\n }\n \n pub struct SplitPaths<'a>(&'a Void);"}, {"sha": "82d0f7dc471e8d95c9ee718e7ccfd917acf7be69", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14265f9c5558e599ba8908cffc717f26389420e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/14265f9c5558e599ba8908cffc717f26389420e1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=14265f9c5558e599ba8908cffc717f26389420e1", "patch": "@@ -1,18 +1,16 @@\n #!/bin/sh\n-#\n-# ignore-tidy-linelength\n \n set -ex\n \n-# Originally from https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz\n-curl https://ci-mirrors.rust-lang.org/rustc/clang%2Bllvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz | \\\n+# Originally from https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-16.04.tar.xz\n+curl https://ci-mirrors.rust-lang.org/rustc/2021-01-14-clang%2Bllvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz | \\\n   tar xJf -\n-export PATH=`pwd`/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/bin:$PATH\n+export PATH=`pwd`/clang+llvm-11.0.1-x86_64-linux-gnu-ubuntu-16.04/bin:$PATH\n \n git clone https://github.com/WebAssembly/wasi-libc\n \n cd wasi-libc\n-git reset --hard 215adc8ac9f91eb055311acc72683fd2eb1ae15a\n+git reset --hard 58795582905e08fa7748846c1971b4ab911d1e16\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd .."}]}