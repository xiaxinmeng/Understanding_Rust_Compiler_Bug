{"sha": "81904a413eb1d90d64e2450f075e38d7e0cf1c00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOTA0YTQxM2ViMWQ5MGQ2NGUyNDUwZjA3NWUzOGQ3ZTBjZjFjMDA=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-14T21:17:04Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-15T21:09:57Z"}, "message": "Remove refs from pat slices", "tree": {"sha": "8e84cc49625034005b9006eec304748a3847aad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e84cc49625034005b9006eec304748a3847aad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81904a413eb1d90d64e2450f075e38d7e0cf1c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81904a413eb1d90d64e2450f075e38d7e0cf1c00", "html_url": "https://github.com/rust-lang/rust/commit/81904a413eb1d90d64e2450f075e38d7e0cf1c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81904a413eb1d90d64e2450f075e38d7e0cf1c00/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d084b13a58efac06c478ae721b5666e76fe3214", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d084b13a58efac06c478ae721b5666e76fe3214", "html_url": "https://github.com/rust-lang/rust/commit/1d084b13a58efac06c478ae721b5666e76fe3214"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "9d8d77cf8f089aba80c1edd48bfd95d0dbda990f", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=81904a413eb1d90d64e2450f075e38d7e0cf1c00", "patch": "@@ -61,13 +61,13 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)| {\n                 match arm.pat.kind {\n                     PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n-                    PatKind::TupleStruct(ref qpath, &[pat], _) =>\n+                    PatKind::TupleStruct(ref qpath, [pat], _) =>\n                         matches!(pat.kind, PatKind::Wild) && is_lang_ctor(cx, qpath, ResultErr),\n                     _ => false,\n                 }\n             });\n             let unwrap_arm = &arms[1 - idx];\n-            if let PatKind::TupleStruct(ref qpath, &[unwrap_pat], _) = unwrap_arm.pat.kind;\n+            if let PatKind::TupleStruct(ref qpath, [unwrap_pat], _) = unwrap_arm.pat.kind;\n             if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n             if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n             if path_to_local_id(unwrap_arm.body, binding_hir_id);"}, {"sha": "6d5ce3373f79d523060a219922875acf3a3cec7c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=81904a413eb1d90d64e2450f075e38d7e0cf1c00", "patch": "@@ -625,7 +625,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             if let PatKind::TupleStruct(\n                 QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n             if args.len() == 1;\n-            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(args[0]).kind;\n+            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n             let body = remove_blocks(arms[0].body);\n             if path_to_local_id(body, arg);\n "}, {"sha": "b2be35bdddb38fbb18625b0c305c092ca9ace406", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=81904a413eb1d90d64e2450f075e38d7e0cf1c00", "patch": "@@ -132,7 +132,7 @@ fn detect_option_if_let_else<'tcx>(\n         if !is_else_clause(cx.tcx, expr);\n         if arms.len() == 2;\n         if !is_result_ok(cx, cond_expr); // Don't lint on Result::ok because a different lint does it already\n-        if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n+        if let PatKind::TupleStruct(struct_qpath, [inner_pat], _) = &arms[0].pat.kind;\n         if is_lang_ctor(cx, struct_qpath, OptionSome);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n         if !contains_return_break_continue_macro(arms[0].body);"}, {"sha": "ea4065d371b81a1bb11b243fbd66179ff7265f5b", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=81904a413eb1d90d64e2450f075e38d7e0cf1c00", "patch": "@@ -258,7 +258,7 @@ fn get_variant<'a>(adt_def: &'a AdtDef, qpath: &QPath<'_>) -> Option<&'a Variant\n \n fn find_first_mismatch_in_tuple<'tcx, I>(\n     cx: &LateContext<'tcx>,\n-    pats: &[&Pat<'_>],\n+    pats: &[Pat<'_>],\n     ty_iter_src: I,\n ) -> Option<(Span, Mutability, Level)>\n where"}, {"sha": "4f0a9f442ed9f5b4893a67d135477aba49075c77", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81904a413eb1d90d64e2450f075e38d7e0cf1c00/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=81904a413eb1d90d64e2450f075e38d7e0cf1c00", "patch": "@@ -255,7 +255,7 @@ pub fn in_macro(span: Span) -> bool {\n }\n \n /// Checks if given pattern is a wildcard (`_`)\n-pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n+pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n@@ -1023,8 +1023,8 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         )\n     }\n \n-    fn are_refutable<'a, I: Iterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, mut i: I) -> bool {\n-        i.any(|pat| is_refutable(cx, pat))\n+    fn are_refutable<'a, I: IntoIterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, i: I) -> bool {\n+        i.into_iter().any(|pat| is_refutable(cx, pat))\n     }\n \n     match pat.kind {\n@@ -1035,23 +1035,23 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n         PatKind::Or(pats) => {\n             // TODO: should be the honest check, that pats is exhaustive set\n-            are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            are_refutable(cx, pats)\n         },\n-        PatKind::Tuple(pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Tuple(pats, _) => are_refutable(cx, pats),\n         PatKind::Struct(ref qpath, fields, _) => {\n             is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, pats, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats)\n         },\n-        PatKind::Slice(head, ref middle, tail) => {\n+        PatKind::Slice(head, middle, tail) => {\n             match &cx.typeck_results().node_type(pat.hir_id).kind() {\n                 rustc_ty::Slice(..) => {\n                     // [..] is the only irrefutable slice pattern.\n                     !head.is_empty() || middle.is_none() || !tail.is_empty()\n                 },\n                 rustc_ty::Array(..) => {\n-                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()))\n                 },\n                 _ => {\n                     // unreachable!()\n@@ -1066,7 +1066,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().copied().for_each(f);\n+        pats.iter().for_each(f);\n     } else {\n         f(pat);\n     }"}]}