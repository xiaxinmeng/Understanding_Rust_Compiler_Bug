{"sha": "37f5cf563c2c039503e8e50e252f2c1b31d69268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjVjZjU2M2MyYzAzOTUwM2U4ZTUwZTI1MmYyYzFiMzFkNjkyNjg=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2018-05-17T15:17:35Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2018-05-31T20:27:08Z"}, "message": "Implement `downcast` for `Arc<Any + Send + Sync>`\n\nWe only need to implement it for `Any + Send + Sync` because in practice\nthat's the only useful combination for `Arc` and `Any`.\n\nImplementation for #44608 under the `rc_downcast` feature.", "tree": {"sha": "77eef669544c42a7876ffa3c5d7f529c528c86d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77eef669544c42a7876ffa3c5d7f529c528c86d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f5cf563c2c039503e8e50e252f2c1b31d69268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f5cf563c2c039503e8e50e252f2c1b31d69268", "html_url": "https://github.com/rust-lang/rust/commit/37f5cf563c2c039503e8e50e252f2c1b31d69268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f5cf563c2c039503e8e50e252f2c1b31d69268/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72433e179d203431c85164555e651c7d65bd93c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/72433e179d203431c85164555e651c7d65bd93c7", "html_url": "https://github.com/rust-lang/rust/commit/72433e179d203431c85164555e651c7d65bd93c7"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "0795498f87f9ddd04488be0ffff98286e398deba", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37f5cf563c2c039503e8e50e252f2c1b31d69268/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f5cf563c2c039503e8e50e252f2c1b31d69268/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=37f5cf563c2c039503e8e50e252f2c1b31d69268", "patch": "@@ -16,6 +16,7 @@\n //!\n //! [arc]: struct.Arc.html\n \n+use core::any::Any;\n use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n@@ -971,6 +972,49 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     }\n }\n \n+impl Arc<Any + Send + Sync> {\n+    #[inline]\n+    #[unstable(feature = \"rc_downcast\", issue = \"44608\")]\n+    /// Attempt to downcast the `Arc<Any + Send + Sync>` to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_downcast)]\n+    /// use std::any::Any;\n+    /// use std::sync::Arc;\n+    ///\n+    /// fn print_if_string(value: Arc<Any + Send + Sync>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Arc::new(my_string));\n+    ///     print_if_string(Arc::new(0i8));\n+    /// }\n+    /// ```\n+    pub fn downcast<T>(self) -> Result<Arc<T>, Self>\n+    where\n+        T: Any + Send + Sync + 'static,\n+    {\n+        if (*self).is::<T>() {\n+            unsafe {\n+                let raw: *const ArcInner<Any + Send + Sync> = self.ptr.as_ptr();\n+                mem::forget(self);\n+                Ok(Arc {\n+                    ptr: NonNull::new_unchecked(raw as *const ArcInner<T> as *mut _),\n+                    phantom: PhantomData,\n+                })\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n impl<T> Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n     /// it. Calling [`upgrade`] on the return value always gives [`None`].\n@@ -1844,6 +1888,26 @@ mod tests {\n \n         assert_eq!(&r[..], [1, 2, 3]);\n     }\n+\n+    #[test]\n+    fn test_downcast() {\n+        use std::any::Any;\n+\n+        let r1: Arc<Any + Send + Sync> = Arc::new(i32::max_value());\n+        let r2: Arc<Any + Send + Sync> = Arc::new(\"abc\");\n+\n+        assert!(r1.clone().downcast::<u32>().is_err());\n+\n+        let r1i32 = r1.downcast::<i32>();\n+        assert!(r1i32.is_ok());\n+        assert_eq!(r1i32.unwrap(), Arc::new(i32::max_value()));\n+\n+        assert!(r2.clone().downcast::<i32>().is_err());\n+\n+        let r2str = r2.downcast::<&'static str>();\n+        assert!(r2str.is_ok());\n+        assert_eq!(r2str.unwrap(), Arc::new(\"abc\"));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}