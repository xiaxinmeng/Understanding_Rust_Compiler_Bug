{"sha": "2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOWYyZWFlODRkYzM5ODhjNTQ2M2ZkZDFiMTI0YTliNjk1NDQ3ZDc=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-25T22:37:22Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2021-08-15T19:05:25Z"}, "message": "Use correct drop scopes for if expressions", "tree": {"sha": "373c546d14e21ad7e4315d367c145f7ae00739b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/373c546d14e21ad7e4315d367c145f7ae00739b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "html_url": "https://github.com/rust-lang/rust/commit/2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0490a2dbbb94f8244fb6a15ca5d33dc3fcd268a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0490a2dbbb94f8244fb6a15ca5d33dc3fcd268a", "html_url": "https://github.com/rust-lang/rust/commit/c0490a2dbbb94f8244fb6a15ca5d33dc3fcd268a"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "3bf7c7c37a47786b9521ee28a33fc54378294745", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "patch": "@@ -443,9 +443,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         else_opt: Option<&Expr>,\n     ) -> hir::ExprKind<'hir> {\n         let cond = self.lower_expr(cond);\n-        let then = self.arena.alloc(self.lower_block_expr(then));\n-        let els = else_opt.map(|els| self.lower_expr(els));\n-        hir::ExprKind::If(cond, then, els)\n+        let wrapped_cond = match cond.kind {\n+            hir::ExprKind::Let(..) => cond,\n+            _ => self.expr_drop_temps(cond.span, cond, AttrVec::new()),\n+        };\n+        let then_expr = self.lower_block_expr(then);\n+        if let Some(rslt) = else_opt {\n+            hir::ExprKind::If(\n+                wrapped_cond,\n+                self.arena.alloc(then_expr),\n+                Some(self.lower_expr(rslt)),\n+            )\n+        } else {\n+            hir::ExprKind::If(wrapped_cond, self.arena.alloc(then_expr), None)\n+        }\n     }\n \n     fn lower_expr_if_let("}, {"sha": "9ca4425a1b505ea58ab78d1f465e1a6f950ffdf4", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "patch": "@@ -35,6 +35,47 @@ use std::convert::TryFrom;\n use std::mem;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n+    pub(crate) fn then_else_blocks(\n+        &mut self,\n+        mut block: BasicBlock,\n+        expr: ExprRef<'tcx>,\n+        source_info: SourceInfo,\n+    ) -> (BasicBlock, BasicBlock) {\n+        let this = self;\n+        let expr = this.hir.mirror(expr);\n+        let expr_span = expr.span;\n+\n+        match expr.kind {\n+            ExprKind::Scope { region_scope, lint_level, value } => {\n+                let region_scope = (region_scope, source_info);\n+                let then_block;\n+                let else_block = unpack!(\n+                    then_block = this.in_scope(region_scope, lint_level, |this| {\n+                        let (then_block, else_block) =\n+                            this.then_else_blocks(block, value, source_info);\n+                        then_block.and(else_block)\n+                    })\n+                );\n+                (then_block, else_block)\n+            }\n+            ExprKind::Let { expr, pat } => {\n+                // TODO: Use correct span.\n+                this.lower_let(block, &expr, &pat, expr_span)\n+            }\n+            _ => {\n+                let local_scope = Some(this.local_scope());\n+                let place =\n+                    unpack!(block = this.as_temp(block, local_scope, expr, Mutability::Mut));\n+                let operand = Operand::Move(Place::from(place));\n+                let then_block = this.cfg.start_new_block();\n+                let else_block = this.cfg.start_new_block();\n+                let term = TerminatorKind::if_(this.hir.tcx(), operand, then_block, else_block);\n+                this.cfg.terminate(block, source_info, term);\n+                (then_block, else_block)\n+            }\n+        }\n+    }\n+\n     /// Generates MIR for a `match` expression.\n     ///\n     /// The MIR that we generate for a match looks like this."}, {"sha": "7403e51c7341b84974f54db455dbc1dd5a1bf264", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9f2eae84dc3988c5463fdd1b124a9b695447d7/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=2d9f2eae84dc3988c5463fdd1b124a9b695447d7", "patch": "@@ -233,14 +233,12 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n                 terminating(r.hir_id.local_id);\n             }\n \n-            hir::ExprKind::If(ref expr, ref then, Some(ref otherwise)) => {\n-                terminating(expr.hir_id.local_id);\n+            hir::ExprKind::If(_, ref then, Some(ref otherwise)) => {\n                 terminating(then.hir_id.local_id);\n                 terminating(otherwise.hir_id.local_id);\n             }\n \n-            hir::ExprKind::If(ref expr, ref then, None) => {\n-                terminating(expr.hir_id.local_id);\n+            hir::ExprKind::If(_, ref then, None) => {\n                 terminating(then.hir_id.local_id);\n             }\n \n@@ -392,6 +390,24 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             }\n         }\n \n+        hir::ExprKind::If(ref cond, ref then, Some(ref otherwise)) => {\n+            // FIXME(matthewjasper): ideally the scope we use here would only\n+            // contain the condition and then expression. This works, but\n+            // can result in some extra drop flags.\n+            visitor.cx.var_parent = visitor.cx.parent;\n+            visitor.visit_expr(cond);\n+            visitor.cx.var_parent = prev_cx.var_parent;\n+            visitor.visit_expr(then);\n+            visitor.visit_expr(otherwise);\n+        }\n+\n+        hir::ExprKind::If(ref cond, ref then, None) => {\n+            visitor.cx.var_parent = visitor.cx.parent;\n+            visitor.visit_expr(cond);\n+            visitor.cx.var_parent = prev_cx.var_parent;\n+            visitor.visit_expr(then);\n+        }\n+\n         _ => intravisit::walk_expr(visitor, expr),\n     }\n "}]}