{"sha": "ae8a3c92a77e9295a764fc98998245aa1e0336b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGEzYzkyYTc3ZTkyOTVhNzY0ZmM5ODk5ODI0NWFhMWUwMzM2YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T18:41:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T18:41:42Z"}, "message": "Auto merge of #26182 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #26142, #26143, #26145, #26146, #26164, #26174\n- Failed merges:", "tree": {"sha": "bfd4ea2a05ff2b50273142c85cf301efc39af78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd4ea2a05ff2b50273142c85cf301efc39af78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8a3c92a77e9295a764fc98998245aa1e0336b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a3c92a77e9295a764fc98998245aa1e0336b1", "html_url": "https://github.com/rust-lang/rust/commit/ae8a3c92a77e9295a764fc98998245aa1e0336b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a3c92a77e9295a764fc98998245aa1e0336b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a9570154dfbc4032cb3a6ba8b51c6256518dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a9570154dfbc4032cb3a6ba8b51c6256518dcd", "html_url": "https://github.com/rust-lang/rust/commit/d8a9570154dfbc4032cb3a6ba8b51c6256518dcd"}, {"sha": "c8519c9793128cb15b91498cda9a90d948d53da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8519c9793128cb15b91498cda9a90d948d53da3", "html_url": "https://github.com/rust-lang/rust/commit/c8519c9793128cb15b91498cda9a90d948d53da3"}], "stats": {"total": 174, "additions": 121, "deletions": 53}, "files": [{"sha": "8ad4eeedd187f46585a55e70935236c423067ef9", "filename": "src/doc/trpl/enums.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fenums.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -64,3 +64,45 @@ equality yet, but we\u2019ll find out in the [`traits`][traits] section.\n [match]: match.html\n [if-let]: if-let.html\n [traits]: traits.html\n+\n+# Constructors as functions\n+\n+An enum\u2019s constructors can also be used like functions. For example:\n+\n+```rust\n+# enum Message {\n+# Write(String),\n+# }\n+let m = Message::Write(\"Hello, world\".to_string());\n+```\n+\n+Is the same as\n+\n+```rust\n+# enum Message {\n+# Write(String),\n+# }\n+fn foo(x: String) -> Message {\n+    Message::Write(x)\n+}\n+\n+let x = foo(\"Hello, world\".to_string());\n+```\n+\n+This is not immediately useful to us, but when we get to\n+[`closures`][closures], we\u2019ll talk about passing functions as arguments to\n+other functions. For example, with [`iterators`][iterators], we can do this\n+to convert a vector of `String`s into a vector of `Message::Write`s:\n+\n+```rust\n+# enum Message {\n+# Write(String),\n+# }\n+\n+let v = vec![\"Hello\".to_string(), \"World\".to_string()];\n+\n+let v1: Vec<Message> = v.into_iter().map(Message::Write).collect();\n+```\n+\n+[closures]: closures.html\n+[iterators]: iterators.html"}, {"sha": "54e850c051e8db01a039b2bc4769e49fbe25ba21", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -238,7 +238,7 @@ However it is often desired that the callback is targeted to a special\n Rust object. This could be the object that represents the wrapper for the\n respective C object.\n \n-This can be achieved by passing an unsafe pointer to the object down to the\n+This can be achieved by passing an raw pointer to the object down to the\n C library. The C library can then include the pointer to the Rust object in\n the notification. This will allow the callback to unsafely access the\n referenced Rust object.\n@@ -370,7 +370,7 @@ On OSX, frameworks behave with the same semantics as a dynamic library.\n \n # Unsafe blocks\n \n-Some operations, like dereferencing unsafe pointers or calling functions that have been marked\n+Some operations, like dereferencing raw pointers or calling functions that have been marked\n unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to\n the compiler that the unsafety does not leak out of the block.\n "}, {"sha": "ea927707ecd6fe272d8b8f454c2dddcc429e09cb", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -144,7 +144,9 @@ an expression, and a `let` can only begin a statement, not an expression.\n Note that assigning to an already-bound variable (e.g. `y = 5`) is still an\n expression, although its value is not particularly useful. Unlike other\n languages where an assignment evaluates to the assigned value (e.g. `5` in the\n-previous example), in Rust the value of an assignment is an empty tuple `()`:\n+previous example), in Rust the value of an assignment is an empty tuple `()`\n+because the assigned value can have [just one owner](ownership.html), and any\n+other returned value would be too surprising:\n \n ```rust\n let mut y = 5;"}, {"sha": "8a3b98b72927b3303f3146e076084347a327c014", "filename": "src/doc/trpl/raw-pointers.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fraw-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fraw-pointers.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -52,9 +52,9 @@ println!(\"raw points at {}\", *raw);\n It gives this error:\n \n ```text\n-error: dereference of unsafe pointer requires unsafe function or block [E0133]\n-     println!(\"raw points at{}\", *raw);\n-                                 ^~~~\n+error: dereference of raw pointer requires unsafe function or block [E0133]\n+     println!(\"raw points at {}\", *raw);\n+                                  ^~~~\n ```\n \n When you dereference a raw pointer, you\u2019re taking responsibility that it\u2019s not"}, {"sha": "7d5c43ea14c03cc6bace35702e5a67586b89c0d6", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -117,6 +117,30 @@ let dog = hachiko.chars().nth(1); // kinda like hachiko[1]\n \n This emphasizes that we have to go through the whole list of `chars`.\n \n+## Slicing\n+\n+You can get a slice of a string with slicing syntax:\n+\n+```rust\n+let dog = \"hachiko\";\n+let hachi = &dog[0..5];\n+```\n+\n+But note that these are _byte_ offsets, not _character_ offsets. So\n+this will fail at runtime:\n+\n+```rust,should_panic\n+let dog = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n+let hachi = &dog[0..2];\n+```\n+\n+with this error:\n+\n+```text\n+thread '<main>' panicked at 'index 0 and/or 2 in `\u5fe0\u72ac\u30cf\u30c1\u516c` do not lie on\n+character boundary'\n+```\n+\n ## Concatenation\n \n If you have a `String`, you can concatenate a `&str` to the end of it:"}, {"sha": "5541a5f34c41c6f8f3dc1c9c1e8f340c3408c75f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -22,9 +22,9 @@\n //!\n //! ## Boxed values\n //!\n-//! The [`Box`](boxed/index.html) type is the core owned pointer type in Rust.\n-//! There can only be one owner of a `Box`, and the owner can decide to mutate\n-//! the contents, which live on the heap.\n+//! The [`Box`](boxed/index.html) type is a smart pointer type. There can\n+//! only be one owner of a `Box`, and the owner can decide to mutate the\n+//! contents, which live on the heap.\n //!\n //! This type can be sent among threads efficiently as the size of a `Box` value\n //! is the same as that of a pointer. Tree-like data structures are often built"}, {"sha": "e99fc95d200bd9d29f2f96dc9c7f6d64e6082582", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -370,7 +370,7 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n \n-    /// Returns an unsafe pointer to the slice's buffer\n+    /// Returns an raw pointer to the slice's buffer\n     ///\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage."}, {"sha": "0020c65157a7882e5fe6c2317f7929dba55a051a", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -525,7 +525,7 @@ impl str {\n         core_str::StrExt::as_bytes(&self[..])\n     }\n \n-    /// Returns an unsafe pointer to the `&str`'s buffer.\n+    /// Returns a raw pointer to the `&str`'s buffer.\n     ///\n     /// The caller must ensure that the string outlives this pointer, and\n     /// that it is not"}, {"sha": "49f6fa53b018a8d800ce5479c1bb358d569907d6", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -1213,9 +1213,9 @@ impl<T: PartialEq> Vec<T> {\n             // Duplicate, advance r. End of vec. Truncate to w.\n \n             let ln = self.len();\n-            if ln < 1 { return; }\n+            if ln <= 1 { return; }\n \n-            // Avoid bounds checks by using unsafe pointers.\n+            // Avoid bounds checks by using raw pointers.\n             let p = self.as_mut_ptr();\n             let mut r: usize = 1;\n             let mut w: usize = 1;"}, {"sha": "774f86563d79c82a164e869547fbfa862edcfc36", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -46,7 +46,7 @@ use marker::Sized;\n \n extern \"rust-intrinsic\" {\n \n-    // NB: These intrinsics take unsafe pointers because they mutate aliased\n+    // NB: These intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n \n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> T;"}, {"sha": "7c20722b26d47ec5da9a09b9dc120f8650064638", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -357,7 +357,7 @@ macro_rules! impls{\n /// struct is dropped, it may in turn drop one or more instances of\n /// the type `T`, though that may not be apparent from the other\n /// structure of the type itself. This is commonly necessary if the\n-/// structure is using an unsafe pointer like `*mut T` whose referent\n+/// structure is using a raw pointer like `*mut T` whose referent\n /// may be dropped when the type is dropped, as a `*mut T` is\n /// otherwise not treated as owned.\n ///"}, {"sha": "9ca9b4fc46c99d4bfd17a36a7a53aff0d2c2c113", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -10,16 +10,16 @@\n \n // FIXME: talk about offset, copy_memory, copy_nonoverlapping_memory\n \n-//! Operations on unsafe pointers, `*const T`, and `*mut T`.\n+//! Operations on raw pointers, `*const T`, and `*mut T`.\n //!\n-//! Working with unsafe pointers in Rust is uncommon,\n+//! Working with raw pointers in Rust is uncommon,\n //! typically limited to a few patterns.\n //!\n //! Use the `null` function to create null pointers, and the `is_null` method\n //! of the `*const T` type  to check for null. The `*const T` type also defines\n //! the `offset` method, for pointer math.\n //!\n-//! # Common ways to create unsafe pointers\n+//! # Common ways to create raw pointers\n //!\n //! ## 1. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n //!\n@@ -86,7 +86,7 @@\n //!\n //! Usually you wouldn't literally use `malloc` and `free` from Rust,\n //! but C APIs hand out a lot of pointers generally, so are a common source\n-//! of unsafe pointers in Rust.\n+//! of raw pointers in Rust.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"pointer\")]"}, {"sha": "c6978808f6d43c9f03b0f3141806b9bd4eade972", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -13,10 +13,10 @@\n //\n // - For each *mutable* static item, it checks that its **type**:\n //     - doesn't have a destructor\n-//     - doesn't own an owned pointer\n+//     - doesn't own a box\n //\n // - For each *immutable* static item, it checks that its **value**:\n-//       - doesn't own owned, managed pointers\n+//       - doesn't own a box\n //       - doesn't contain a struct literal or a call to an enum variant / struct constructor where\n //           - the type of the struct/enum has a dtor\n //"}, {"sha": "defdf2ae0886542d83728479fab3351152b45070", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 debug!(\"effect: unary case, base type is {}\",\n                        ppaux::ty_to_string(self.tcx, base_type));\n                 if let ty::ty_ptr(_) = base_type.sty {\n-                    self.require_unsafe(expr.span, \"dereference of unsafe pointer\")\n+                    self.require_unsafe(expr.span, \"dereference of raw pointer\")\n                 }\n             }\n             ast::ExprAssign(ref base, _) | ast::ExprAssignOp(_, ref base, _) => {"}, {"sha": "c0fa868fcd4d4e1aadbeac4c4dc9c3a491290312", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -1410,7 +1410,7 @@ pub enum AliasableReason {\n \n impl<'tcx> cmt_<'tcx> {\n     pub fn guarantor(&self) -> cmt<'tcx> {\n-        //! Returns `self` after stripping away any owned pointer derefs or\n+        //! Returns `self` after stripping away any derefs or\n         //! interior content. The return value is basically the `cmt` which\n         //! determines how long the value in `self` remains live.\n \n@@ -1546,7 +1546,7 @@ impl<'tcx> cmt_<'tcx> {\n                                 format!(\"`Box` content\")\n                             }\n                             UnsafePtr(..) => {\n-                                format!(\"dereference of unsafe pointer\")\n+                                format!(\"dereference of raw pointer\")\n                             }\n                             BorrowedPtr(..) => {\n                                 format!(\"borrowed content\")"}, {"sha": "fed9760d4e9b3f08e72886d6f09b863b2bb153fb", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -3646,7 +3646,7 @@ impl TypeContents {\n             *self & TC::ReachesAll)\n     }\n \n-    /// Includes only those bits that still apply when indirected through an unsafe pointer (`*`)\n+    /// Includes only those bits that still apply when indirected through a raw pointer (`*`)\n     pub fn unsafe_pointer(&self) -> TypeContents {\n         *self & TC::ReachesAll\n     }"}, {"sha": "5cfbd59d3336881ecc0e6d450ae8198e338c3af4", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -170,7 +170,7 @@ overwrite (or freeze) `(*x).f`, and thus invalidate the reference\n that was created. In general it holds that when a path is\n lent, restrictions are issued for all the owning prefixes of that\n path. In this case, the path `*x` owns the path `(*x).f` and,\n-because `x` is an owned pointer, the path `x` owns the path `*x`.\n+because `x` has ownership, the path `x` owns the path `*x`.\n Therefore, borrowing `(*x).f` yields restrictions on both\n `*x` and `x`.\n \n@@ -286,7 +286,7 @@ MUTABILITY(X, imm)                  // M-Var-Imm\n \n ### Checking mutability of owned content\n \n-Fields and owned pointers inherit their mutability from\n+Fields and boxes inherit their mutability from\n their base expressions, so both of their rules basically\n delegate the check to the base expression `LV`:\n \n@@ -387,7 +387,7 @@ LIFETIME(X, LT, MQ)                 // L-Local\n \n ### Checking lifetime for owned content\n \n-The lifetime of a field or owned pointer is the same as the lifetime\n+The lifetime of a field or box is the same as the lifetime\n of its owner:\n \n ```text\n@@ -466,10 +466,10 @@ origin of inherited mutability.\n \n Because the mutability of owned referents is inherited, restricting an\n owned referent is similar to restricting a field, in that it implies\n-restrictions on the pointer. However, owned pointers have an important\n+restrictions on the pointer. However, boxes have an important\n twist: if the owner `LV` is mutated, that causes the owned referent\n `*LV` to be freed! So whenever an owned referent `*LV` is borrowed, we\n-must prevent the owned pointer `LV` from being mutated, which means\n+must prevent the box `LV` from being mutated, which means\n that we always add `MUTATE` and `CLAIM` to the restriction set imposed\n on `LV`:\n \n@@ -648,7 +648,7 @@ fn main() {\n ```\n \n Clause (2) propagates the restrictions on the referent to the pointer\n-itself. This is the same as with an owned pointer, though the\n+itself. This is the same as with an box, though the\n reasoning is mildly different. The basic goal in all cases is to\n prevent the user from establishing another route to the same data. To\n see what I mean, let's examine various cases of what can go wrong and"}, {"sha": "fef8acf2f7b5c6f9887612b31554f494975d606f", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -137,7 +137,7 @@ fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                move_info.id, move_info.kind);\n         }\n         None => {\n-            // move from rvalue or unsafe pointer, hence ok\n+            // move from rvalue or raw pointer, hence ok\n         }\n     }\n }"}, {"sha": "56f49a3047bf5eab48d7b64210ffc7242421ec49", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                     mc::Unique => {\n                         // R-Deref-Send-Pointer\n                         //\n-                        // When we borrow the interior of an owned pointer, we\n+                        // When we borrow the interior of a box, we\n                         // cannot permit the base to be mutated, because that\n                         // would cause the unique pointer to be freed.\n                         //\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    // Borrowck is not relevant for unsafe pointers\n+                    // Borrowck is not relevant for raw pointers\n                     mc::UnsafePtr(..) => Safe\n                 }\n             }"}, {"sha": "b84572292923a88bbee07fee0bfec2f9c3af736a", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -341,8 +341,8 @@ impl<'tcx> CastCheck<'tcx> {\n                 // Due to the limitations of LLVM global constants,\n                 // region pointers end up pointing at copies of\n                 // vector elements instead of the original values.\n-                // To allow unsafe pointers to work correctly, we\n-                // need to special-case obtaining an unsafe pointer\n+                // To allow raw pointers to work correctly, we\n+                // need to special-case obtaining a raw pointer\n                 // from a region pointer to a vector.\n \n                 // this will report a type mismatch if needed"}, {"sha": "fbb6502b5b901ba618d13fb17b851f6303b300bc", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -76,7 +76,7 @@\n //! the borrow itself (L2).  What do I mean by \"guaranteed\" by a\n //! borrowed pointer? I mean any data that is reached by first\n //! dereferencing a borrowed pointer and then either traversing\n-//! interior offsets or owned pointers.  We say that the guarantor\n+//! interior offsets or boxes.  We say that the guarantor\n //! of such data it the region of the borrowed pointer that was\n //! traversed.  This is essentially the same as the ownership\n //! relation, except that a borrowed pointer never owns its"}, {"sha": "3b2cb00d8c47dcbb6130763eb7635a0a0ee7c328", "filename": "src/libstd/sys/common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_local.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -102,7 +102,7 @@ pub struct StaticKey {\n /// type is entirely safe to use.\n ///\n /// Implementations will likely, however, contain unsafe code as this type only\n-/// operates on `*mut u8`, an unsafe pointer.\n+/// operates on `*mut u8`, a raw pointer.\n ///\n /// # Examples\n ///"}, {"sha": "32066b744134db800b2e496c13c286274564aeeb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -4215,7 +4215,7 @@ impl<'a> Parser<'a> {\n                 };\n                 if self.is_self_ident() {\n                     let span = self.span;\n-                    self.span_err(span, \"cannot pass self by unsafe pointer\");\n+                    self.span_err(span, \"cannot pass self by raw pointer\");\n                     try!(self.bump());\n                 }\n                 // error case, making bogus self ident:"}, {"sha": "7284fa7a850f0cbd63aedac91cc1c4ddf429e3c3", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -10,7 +10,7 @@\n \n \n fn foo(x: *const Box<isize>) -> Box<isize> {\n-    let y = *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    let y = *x; //~ ERROR dereference of raw pointer requires unsafe function or block\n     return y;\n }\n "}, {"sha": "d3b97a9c058633a45fd9f15717e0c2717c4856ff", "filename": "src/test/compile-fail/issue-20801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20801.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -40,8 +40,8 @@ pub fn main() {\n     //~^ ERROR cannot move out of borrowed content\n \n     let c = unsafe { *mut_ptr() };\n-    //~^ ERROR cannot move out of dereference of unsafe pointer\n+    //~^ ERROR cannot move out of dereference of raw pointer\n \n     let d = unsafe { *const_ptr() };\n-    //~^ ERROR cannot move out of dereference of unsafe pointer\n+    //~^ ERROR cannot move out of dereference of raw pointer\n }"}, {"sha": "8261862c5fc518545718f7605f423e4e113a4670", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Creating a stack closure which references an owned pointer and then\n-// transferring ownership of the owned box before invoking the stack\n+// Creating a stack closure which references an box and then\n+// transferring ownership of the box before invoking the stack\n // closure results in a crash.\n \n #![feature(box_syntax)]"}, {"sha": "997c940c9547e9ffd24877c98b8cb35c25099342", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -37,7 +37,7 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<&'static mut isize>(); //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<&'a mut isize>();  //~ ERROR `core::marker::Copy` is not implemented\n \n-    // owned pointers are not ok\n+    // boxes are not ok\n     assert_copy::<Box<isize>>();   //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<String>();   //~ ERROR `core::marker::Copy` is not implemented\n     assert_copy::<Vec<isize> >(); //~ ERROR `core::marker::Copy` is not implemented"}, {"sha": "19c50d57e1b39565386fe8d2f3410830aacd25ca", "filename": "src/test/compile-fail/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -54,7 +54,7 @@ fn box_with_region_not_ok<'a>() {\n     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n }\n \n-// unsafe pointers are ok unless they point at unsendable things\n+// raw pointers are ok unless they point at unsendable things\n \n fn unsafe_ok1<'a>(_: &'a isize) {\n     assert_send::<*const isize>();"}, {"sha": "cff10329b858970d2ddd03da32ef21788319921f", "filename": "src/test/compile-fail/unsafe-fn-assign-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-assign-deref-ptr.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) {\n-    *p = 0; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    *p = 0; //~ ERROR dereference of raw pointer requires unsafe function or block\n     return;\n }\n "}, {"sha": "bf87df71fd87dc77163aebfe05b48caec1ef56c1", "filename": "src/test/compile-fail/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(p: *const u8) -> u8 {\n-    return *p; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    return *p; //~ ERROR dereference of raw pointer requires unsafe function or block\n }\n \n fn main() {"}, {"sha": "1cc0e62f5b2d5cfb5d9a2db13809b873c7096872", "filename": "src/test/parse-fail/no-unsafe-self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fno-unsafe-self.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -11,14 +11,14 @@\n // compile-flags: -Z parse-only\n \n trait A {\n-    fn foo(*mut self); //~ ERROR cannot pass self by unsafe pointer\n-    fn bar(*self); //~ ERROR cannot pass self by unsafe pointer\n+    fn foo(*mut self); //~ ERROR cannot pass self by raw pointer\n+    fn bar(*self); //~ ERROR cannot pass self by raw pointer\n }\n \n struct X;\n impl A for X {\n-    fn foo(*mut self) { } //~ ERROR cannot pass self by unsafe pointer\n-    fn bar(*self) { } //~ ERROR cannot pass self by unsafe pointer\n+    fn foo(*mut self) { } //~ ERROR cannot pass self by raw pointer\n+    fn bar(*self) { } //~ ERROR cannot pass self by raw pointer\n }\n \n fn main() { }"}, {"sha": "6b0faa2207b25f942583936b2a8fb99e11abe7fe", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a3c92a77e9295a764fc98998245aa1e0336b1/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=ae8a3c92a77e9295a764fc98998245aa1e0336b1", "patch": "@@ -10,7 +10,7 @@\n //\n \n pub trait Clone2 {\n-    /// Returns a copy of the value. The contents of owned pointers\n+    /// Returns a copy of the value. The contents of boxes\n     /// are copied to maintain uniqueness, while the contents of\n     /// managed pointers are not copied.\n     fn clone(&self) -> Self;"}]}