{"sha": "d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjRjNmVkYTI5YzRiYTJmMmE4OGI1ZTMzNmUwM2RkYmMxMmEyYWE=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-22T11:54:55Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-31T02:45:17Z"}, "message": "removes std::mtypes", "tree": {"sha": "d3c195b33e9c228fb7734a35ae968d0e601e4fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c195b33e9c228fb7734a35ae968d0e601e4fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "html_url": "https://github.com/rust-lang/rust/commit/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d124c6eda29c4ba2f2a88b5e336e03ddbc12a2aa/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cd06053a404b7e9c4efa8fc0ca77cc7154913c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cd06053a404b7e9c4efa8fc0ca77cc7154913c", "html_url": "https://github.com/rust-lang/rust/commit/e0cd06053a404b7e9c4efa8fc0ca77cc7154913c"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "cddea420cc8364bb1f00124a83b2874426abbd21", "filename": "src/libstd/mtypes.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e0cd06053a404b7e9c4efa8fc0ca77cc7154913c/src%2Flibstd%2Fmtypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0cd06053a404b7e9c4efa8fc0ca77cc7154913c/src%2Flibstd%2Fmtypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmtypes.rs?ref=e0cd06053a404b7e9c4efa8fc0ca77cc7154913c", "patch": "@@ -1,64 +0,0 @@\n-/*\n-\n-Module: mtypes\n-\n-Machine type equivalents of rust int, uint, float, and complex.\n-\n-Types useful for interop with C when writing bindings that exist\n-for different types (float, f32, f64, ...; cf float.rs for an example)\n-*/\n-\n-export m_int, m_uint, m_float;\n-\n-// PORT Change this when porting to a new architecture\n-\n-/*\n-Type: m_int\n-\n-Machine type equivalent of an int\n-*/\n-#[cfg(target_arch=\"x86\")]\n-type m_int = i32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_int = i64;\n-\n-// PORT Change this when porting to a new architecture\n-\n-/*\n-Type: m_uint\n-\n-Machine type equivalent of a uint\n-*/\n-#[cfg(target_arch=\"x86\")]\n-type m_uint = u32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_uint = u64;\n-\n-// PORT *must* match with \"import m_float = fXX\" in std::math per arch\n-\n-/*\n-Type: m_float\n-\n-Machine type equivalent of a float\n-*/\n-type m_float = f64;\n-\n-// PORT  *must* match \"import m_complex = ...\" in std::complex per arch\n-\n-/*\n-FIXME Type m_complex\n-\n-Machine type representing a complex value that uses floats for\n-both the real and the imaginary part.\n-*/\n-// type m_complex = complex_c64::t;\n-\n-//\n-// Local Variables:\n-// mode: rust\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//"}]}