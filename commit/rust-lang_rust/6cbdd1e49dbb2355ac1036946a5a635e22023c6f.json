{"sha": "6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmRkMWU0OWRiYjIzNTVhYzEwMzY5NDZhNWE2MzVlMjIwMjNjNmY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T10:28:40Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-14T13:56:17Z"}, "message": "Merge `option_map_unwrap_or`, `option_map_unwrap_or_else` and `result_map_unwrap_or_else` lints into `map_unwrap` lint", "tree": {"sha": "e1cabd5e69afd6497445dbdb062ad3277fdf50dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1cabd5e69afd6497445dbdb062ad3277fdf50dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "html_url": "https://github.com/rust-lang/rust/commit/6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945c9447093a2ca944e70bae125f2af69f8eac16", "url": "https://api.github.com/repos/rust-lang/rust/commits/945c9447093a2ca944e70bae125f2af69f8eac16", "html_url": "https://github.com/rust-lang/rust/commit/945c9447093a2ca944e70bae125f2af69f8eac16"}], "stats": {"total": 260, "additions": 94, "deletions": 166}, "files": [{"sha": "28b05044db6d0393e366bf5b59862c4abb71e8f9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -1430,6 +1430,7 @@ Released 2018-09-13\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n+[`map_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool\n [`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n@@ -1499,8 +1500,6 @@ Released 2018-09-13\n [`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n-[`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n-[`option_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or_else\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n [`option_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_unwrap_used\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n@@ -1542,7 +1541,6 @@ Released 2018-09-13\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n-[`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition"}, {"sha": "c9a2ef499070b1254cda546062ac1f16635751fe", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -673,19 +673,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_FLATTEN,\n+        &methods::MAP_UNWRAP,\n         &methods::NEW_RET_NO_SELF,\n         &methods::OK_EXPECT,\n         &methods::OPTION_AND_THEN_SOME,\n         &methods::OPTION_AS_REF_DEREF,\n         &methods::OPTION_EXPECT_USED,\n         &methods::OPTION_MAP_OR_NONE,\n-        &methods::OPTION_MAP_UNWRAP_OR,\n-        &methods::OPTION_MAP_UNWRAP_OR_ELSE,\n         &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n-        &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n@@ -1152,9 +1150,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FIND_MAP),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n-        LintId::of(&methods::OPTION_MAP_UNWRAP_OR),\n-        LintId::of(&methods::OPTION_MAP_UNWRAP_OR_ELSE),\n-        LintId::of(&methods::RESULT_MAP_UNWRAP_OR_ELSE),\n+        LintId::of(&methods::MAP_UNWRAP),\n         LintId::of(&misc::USED_UNDERSCORE_BINDING),\n         LintId::of(&misc_early::UNSEPARATED_LITERAL_SUFFIX),\n         LintId::of(&mut_mut::MUT_MUT),"}, {"sha": "401298b2d517d512ff7a662dff33a8e99e16d2d7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -257,59 +257,40 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).unwrap_or(_)`.\n+    /// **What it does:** Checks for usage of `option.map(_).unwrap_or(_)` or `option.map(_).unwrap_or_else(_)` or\n+    /// `result.map(_).unwrap_or_else(_)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.map_or(_, _)`.\n+    /// **Why is this bad?** Readability, these can be written more concisely (resp.) as\n+    /// `option.map_or(_, _)`, `option.map_or_else(_, _)` and `result.map_or_else(_, _)`.\n     ///\n     /// **Known problems:** The order of the arguments is not in execution order\n     ///\n-    /// **Example:**\n+    /// **Examples:**\n     /// ```rust\n     /// # let x = Some(1);\n-    /// x.map(|a| a + 1).unwrap_or(0);\n-    /// ```\n-    pub OPTION_MAP_UNWRAP_OR,\n-    pedantic,\n-    \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `_.map(_).unwrap_or_else(_)`.\n-    ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.map_or_else(_, _)`.\n     ///\n-    /// **Known problems:** The order of the arguments is not in execution order.\n+    /// // Bad\n+    /// x.map(|a| a + 1).unwrap_or(0);\n     ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # let x = Some(1);\n-    /// # fn some_function() -> usize { 1 }\n-    /// x.map(|a| a + 1).unwrap_or_else(some_function);\n+    /// // Good\n+    /// x.map_or(0, |a| a + 1);\n     /// ```\n-    pub OPTION_MAP_UNWRAP_OR_ELSE,\n-    pedantic,\n-    \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `result.map(_).unwrap_or_else(_)`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `result.map_or_else(_, _)`.\n-    ///\n-    /// **Known problems:** None.\n+    /// // or\n     ///\n-    /// **Example:**\n     /// ```rust\n     /// # let x: Result<usize, ()> = Ok(1);\n     /// # fn some_function(foo: ()) -> usize { 1 }\n+    ///\n+    /// // Bad\n     /// x.map(|a| a + 1).unwrap_or_else(some_function);\n+    ///\n+    /// // Good\n+    /// x.map_or_else(some_function, |a| a + 1);\n     /// ```\n-    pub RESULT_MAP_UNWRAP_OR_ELSE,\n+    pub MAP_UNWRAP,\n     pedantic,\n-    \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\"\n+    \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\"\n }\n \n declare_clippy_lint! {\n@@ -1294,9 +1275,7 @@ declare_lint_pass!(Methods => [\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n     OK_EXPECT,\n-    OPTION_MAP_UNWRAP_OR,\n-    OPTION_MAP_UNWRAP_OR_ELSE,\n-    RESULT_MAP_UNWRAP_OR_ELSE,\n+    MAP_UNWRAP,\n     RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n@@ -1503,9 +1482,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                             cx,\n                             lint,\n                             first_arg.pat.span,\n-                            &format!(\n-                               \"methods called `{}` usually take {}; consider choosing a less \\\n-                                 ambiguous name\",\n+                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n                                 conv,\n                                 &self_kinds\n                                     .iter()\n@@ -1678,7 +1655,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n             let self_ty = cx.tables.expr_ty(self_expr);\n \n             if let Some(&(_, fn_has_arguments, poss, suffix)) =\n-                   know_types.iter().find(|&&i| match_type(cx, self_ty, i.0));\n+                know_types.iter().find(|&&i| match_type(cx, self_ty, i.0));\n \n             if poss.contains(&name);\n \n@@ -1931,7 +1908,7 @@ fn lint_clone_on_copy(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &hir:\n                 CLONE_DOUBLE_REF,\n                 expr.span,\n                 \"using `clone` on a double-reference; \\\n-                 this will copy the reference instead of cloning the inner type\",\n+                this will copy the reference instead of cloning the inner type\",\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                         let mut ty = innermost;\n@@ -2121,7 +2098,7 @@ fn lint_iter_cloned_collect<'a, 'tcx>(\n                 ITER_CLONED_COLLECT,\n                 to_replace,\n                 \"called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and \\\n-                 more readable\",\n+                more readable\",\n                 \"try\",\n                 \".to_vec()\".to_string(),\n                 Applicability::MachineApplicable,\n@@ -2436,7 +2413,7 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             None,\n             &format!(\n                 \"if you don't want to handle the `{}` case gracefully, consider \\\n-                 using `expect()` to provide a better panic message\",\n+                using `expect()` to provide a better panic message\",\n                 none_value,\n             ),\n         );\n@@ -2494,7 +2471,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n     // lint if caller of `.map().flatten()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `map(..).flatten()` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.flat_map(..)`\";\n+                    This is more succinctly expressed by calling `.flat_map(..)`\";\n         let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n         let hint = format!(\"{0}.flat_map({1})\", self_snippet, func_snippet);\n@@ -2555,10 +2532,10 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         // lint message\n         let msg = if is_option {\n             \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n-             `map_or_else(g, f)` instead\"\n+            `map_or_else(g, f)` instead\"\n         } else {\n             \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n-             `.map_or_else(g, f)` instead\"\n+            `.map_or_else(g, f)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n         let map_snippet = snippet(cx, map_args[1].span, \"..\");\n@@ -2570,11 +2547,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         if same_span && !multiline {\n             span_lint_and_note(\n                 cx,\n-                if is_option {\n-                    OPTION_MAP_UNWRAP_OR_ELSE\n-                } else {\n-                    RESULT_MAP_UNWRAP_OR_ELSE\n-                },\n+                MAP_UNWRAP,\n                 expr.span,\n                 msg,\n                 None,\n@@ -2584,16 +2557,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 ),\n             );\n         } else if same_span && multiline {\n-            span_lint(\n-                cx,\n-                if is_option {\n-                    OPTION_MAP_UNWRAP_OR_ELSE\n-                } else {\n-                    RESULT_MAP_UNWRAP_OR_ELSE\n-                },\n-                expr.span,\n-                msg,\n-            );\n+            span_lint(cx, MAP_UNWRAP, expr.span, msg);\n         };\n     }\n }"}, {"sha": "fcaa9b47e64cb3362808058010f8155307cace2f", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n-use super::OPTION_MAP_UNWRAP_OR;\n+use super::MAP_UNWRAP;\n \n /// lint use of `map().unwrap_or()` for `Option`s\n pub(super) fn lint<'a, 'tcx>(\n@@ -62,11 +62,11 @@ pub(super) fn lint<'a, 'tcx>(\n         };\n         let msg = &format!(\n             \"called `map(f).unwrap_or({})` on an `Option` value. \\\n-             This can be done more directly by calling `{}` instead\",\n+            This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );\n \n-        span_lint_and_then(cx, OPTION_MAP_UNWRAP_OR, expr.span, msg, |diag| {\n+        span_lint_and_then(cx, MAP_UNWRAP, expr.span, msg, |diag| {\n             let map_arg_span = map_args[1].span;\n \n             let mut suggestion = vec!["}, {"sha": "d3bd9f66e384f12a58d6561ac4264cde69dc80f9", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -1137,6 +1137,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"map_unwrap\",\n+        group: \"pedantic\",\n+        desc: \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"match_as_ref\",\n         group: \"complexity\",\n@@ -1613,20 +1620,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n-    Lint {\n-        name: \"option_map_unwrap_or\",\n-        group: \"pedantic\",\n-        desc: \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n-    Lint {\n-        name: \"option_map_unwrap_or_else\",\n-        group: \"pedantic\",\n-        desc: \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"option_option\",\n         group: \"pedantic\",\n@@ -1900,13 +1893,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n-    Lint {\n-        name: \"result_map_unwrap_or_else\",\n-        group: \"pedantic\",\n-        desc: \"using `Result.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `.map_or_else(g, f)`\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"result_unwrap_used\",\n         group: \"restriction\","}, {"sha": "53e50368231c1b2cbdb843ec7a72b4ea7f8095aa", "filename": "tests/ui/map_unwrap.rs", "status": "renamed", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/tests%2Fui%2Fmap_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/tests%2Fui%2Fmap_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap.rs?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -1,21 +1,18 @@\n // FIXME: Add \"run-rustfix\" once it's supported for multipart suggestions\n // aux-build:option_helpers.rs\n \n-#![warn(clippy::option_map_unwrap_or, clippy::option_map_unwrap_or_else)]\n+#![warn(clippy::map_unwrap)]\n \n #[macro_use]\n extern crate option_helpers;\n \n use std::collections::HashMap;\n \n-/// Checks implementation of the following lints:\n-/// * `OPTION_MAP_UNWRAP_OR`\n-/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n #[rustfmt::skip]\n fn option_methods() {\n     let opt = Some(1);\n \n-    // Check `OPTION_MAP_UNWRAP_OR`.\n+    // Check for `option.map(_).unwrap_or(_)` use.\n     // Single line case.\n     let _ = opt.map(|x| x + 1)\n         // Should lint even though this call is on a separate line.\n@@ -49,7 +46,7 @@ fn option_methods() {\n     let id: String = \"identifier\".to_string();\n     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n \n-    // Check OPTION_MAP_UNWRAP_OR_ELSE\n+    // Check for `option.map(_).unwrap_or_else(_)` use.\n     // single line case\n     let _ = opt.map(|x| x + 1)\n         // Should lint even though this call is on a separate line.\n@@ -83,6 +80,20 @@ fn option_methods() {\n     }\n }\n \n+fn result_methods() {\n+    let res: Result<i32, ()> = Ok(1);\n+\n+    // Check for `result.map(_).unwrap_or_else(_)` use.\n+    // single line case\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+                                                      // multi line cases\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+    // macro case\n+    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n+}\n+\n fn main() {\n     option_methods();\n+    result_methods();\n }", "previous_filename": "tests/ui/option_map_unwrap_or.rs"}, {"sha": "2610923275d3afd6d79d1a5fb22c2bf3f09da70f", "filename": "tests/ui/map_unwrap.stderr", "status": "renamed", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/tests%2Fui%2Fmap_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cbdd1e49dbb2355ac1036946a5a635e22023c6f/tests%2Fui%2Fmap_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap.stderr?ref=6cbdd1e49dbb2355ac1036946a5a635e22023c6f", "patch": "@@ -1,20 +1,20 @@\n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:20:13\n+  --> $DIR/map_unwrap.rs:17:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or(0);\n    | |_____________________^\n    |\n-   = note: `-D clippy::option-map-unwrap-or` implied by `-D warnings`\n+   = note: `-D clippy::map-unwrap` implied by `-D warnings`\n help: use `map_or(a, f)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:24:13\n+  --> $DIR/map_unwrap.rs:21:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -32,7 +32,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:28:13\n+  --> $DIR/map_unwrap.rs:25:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -49,7 +49,7 @@ LL |         }, |x| x + 1);\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:33:13\n+  --> $DIR/map_unwrap.rs:30:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:35:13\n+  --> $DIR/map_unwrap.rs:32:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -78,7 +78,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:39:13\n+  --> $DIR/map_unwrap.rs:36:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -92,7 +92,7 @@ LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:50:13\n+  --> $DIR/map_unwrap.rs:47:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,19 +103,18 @@ LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:54:13\n+  --> $DIR/map_unwrap.rs:51:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or_else(|| 0);\n    | |_____________________________^\n    |\n-   = note: `-D clippy::option-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:58:13\n+  --> $DIR/map_unwrap.rs:55:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -125,7 +124,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/option_map_unwrap_or.rs:62:13\n+  --> $DIR/map_unwrap.rs:59:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -134,5 +133,29 @@ LL | |             0\n LL | |         );\n    | |_________^\n \n-error: aborting due to 10 previous errors\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap.rs:88:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap.rs:90:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+  --> $DIR/map_unwrap.rs:91:13\n+   |\n+LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n+\n+error: aborting due to 13 previous errors\n ", "previous_filename": "tests/ui/option_map_unwrap_or.stderr"}, {"sha": "40751bfebe6c926e602eafbae9e9662aefdf32d2", "filename": "tests/ui/result_map_unwrap_or_else.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fresult_map_unwrap_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.rs?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,23 +0,0 @@\n-// aux-build:option_helpers.rs\n-\n-//! Checks implementation of `RESULT_MAP_UNWRAP_OR_ELSE`\n-\n-#![warn(clippy::result_map_unwrap_or_else)]\n-\n-#[macro_use]\n-extern crate option_helpers;\n-\n-fn result_methods() {\n-    let res: Result<i32, ()> = Ok(1);\n-\n-    // Check RESULT_MAP_UNWRAP_OR_ELSE\n-    // single line case\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-                                                      // multi line cases\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-    let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-    // macro case\n-    let _ = opt_map!(res, |x| x + 1).unwrap_or_else(|e| 0); // should not lint\n-}\n-\n-fn main() {}"}, {"sha": "ec7bc8f12414f05258c2e0feb2336cd289c3e5f6", "filename": "tests/ui/result_map_unwrap_or_else.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/945c9447093a2ca944e70bae125f2af69f8eac16/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.stderr?ref=945c9447093a2ca944e70bae125f2af69f8eac16", "patch": "@@ -1,27 +0,0 @@\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:15:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::result-map-unwrap-or-else` implied by `-D warnings`\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:17:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/result_map_unwrap_or_else.rs:18:13\n-   |\n-LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n-\n-error: aborting due to 3 previous errors\n-"}]}