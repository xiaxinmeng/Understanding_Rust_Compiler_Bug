{"sha": "ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhN2NkZjIxYmU1MjVlMzljYmJlZTg4MDQ3MDNjZmUyNmUwYWM3YzY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-12T17:31:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-12T17:31:35Z"}, "message": "Emit unwind info for main and alloc shim\n\nFixes #988", "tree": {"sha": "26d92d4d552ec69a2b82459bdf265856cdd397f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d92d4d552ec69a2b82459bdf265856cdd397f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "html_url": "https://github.com/rust-lang/rust/commit/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a77a5ce6b13aadc834c8e0e695b196b330ad08", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a77a5ce6b13aadc834c8e0e695b196b330ad08", "html_url": "https://github.com/rust-lang/rust/commit/e1a77a5ce6b13aadc834c8e0e695b196b330ad08"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "8dae5dcf38591fdbae3bbc198861ec9c0f179acd", "filename": "src/allocator.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "patch": "@@ -13,22 +13,30 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n /// Returns whether an allocator shim was created\n-pub(crate) fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {\n+pub(crate) fn codegen(\n+    tcx: TyCtxt<'_>,\n+    module: &mut Module<impl Backend + 'static>,\n+    unwind_context: &mut UnwindContext<'_>,\n+) -> bool {\n     let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = tcx.allocator_kind() {\n-        codegen_inner(module, kind);\n+        codegen_inner(module, unwind_context, kind);\n         true\n     } else {\n         false\n     }\n }\n \n-fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n+fn codegen_inner(\n+    module: &mut Module<impl Backend + 'static>,\n+    unwind_context: &mut UnwindContext<'_>,\n+    kind: AllocatorKind,\n+) {\n     let usize_ty = module.target_config().pointer_type();\n \n     for method in ALLOCATOR_METHODS {\n@@ -99,5 +107,6 @@ fn codegen_inner(module: &mut Module<impl Backend + 'static>, kind: AllocatorKin\n             &mut ctx,\n             &mut cranelift_codegen::binemit::NullTrapSink {},\n         ).unwrap();\n+        unwind_context.add_function(func_id, &ctx, module.isa());\n     }\n }"}, {"sha": "27c76fbee1d313a2a43382dc44dd285897f744d0", "filename": "src/driver/aot.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "patch": "@@ -123,7 +123,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     let mut unwind_context = UnwindContext::new(tcx, &mut module);\n \n     super::codegen_mono_items(tcx, &mut module, debug.as_mut(), &mut unwind_context, mono_items);\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);\n \n     emit_module(\n         tcx,\n@@ -185,19 +185,21 @@ pub(super) fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let mut allocator_module = new_module(tcx, \"allocator_shim\".to_string());\n-    let created_alloc_shim = crate::allocator::codegen(tcx, &mut allocator_module);\n+    let mut allocator_unwind_context = UnwindContext::new(tcx, &mut allocator_module);\n+    let created_alloc_shim = crate::allocator::codegen(\n+        tcx,\n+        &mut allocator_module,\n+        &mut allocator_unwind_context,\n+    );\n \n     let allocator_module = if created_alloc_shim {\n-        // FIXME create .eh_frame for allocator shim\n-        let unwind_context = UnwindContext::new(tcx, &mut allocator_module);\n-\n         let ModuleCodegenResult(module, work_product) = emit_module(\n             tcx,\n             \"allocator_shim\".to_string(),\n             ModuleKind::Allocator,\n             allocator_module,\n             None,\n-            unwind_context,\n+            allocator_unwind_context,\n         );\n         if let Some((id, product)) = work_product {\n             work_products.insert(id, product);"}, {"sha": "fa88029ceb93bdf90a8622e33b1453781df3dc95", "filename": "src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "patch": "@@ -57,8 +57,8 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     super::time(tcx, \"codegen mono items\", || {\n         super::codegen_mono_items(tcx, &mut jit_module, None, &mut unwind_context, mono_items);\n     });\n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module);\n-    crate::allocator::codegen(tcx, &mut jit_module);\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n+    crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n     jit_module.finalize_definitions();\n "}, {"sha": "7366c6a9c0a547553ebc35e1576134c7a78c806a", "filename": "src/main_shim.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7cdf21be525e39cbbee8804703cfe26e0ac7c6/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=ba7cdf21be525e39cbbee8804703cfe26e0ac7c6", "patch": "@@ -2,7 +2,11 @@ use crate::prelude::*;\n \n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n-pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) {\n+pub(crate) fn maybe_create_entry_wrapper(\n+    tcx: TyCtxt<'_>,\n+    module: &mut Module<impl Backend + 'static>,\n+    unwind_context: &mut UnwindContext<'_>,\n+) {\n     use rustc_hir::lang_items::StartFnLangItem;\n     use rustc_session::config::EntryFnType;\n \n@@ -22,11 +26,12 @@ pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<im\n         return;\n     }\n \n-    create_entry_fn(tcx, module, main_def_id, use_start_lang_item);\n+    create_entry_fn(tcx, module, unwind_context, main_def_id, use_start_lang_item);\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n         m: &mut Module<impl Backend + 'static>,\n+        unwind_context: &mut UnwindContext<'_>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,\n     ) {\n@@ -109,5 +114,6 @@ pub(crate) fn maybe_create_entry_wrapper(tcx: TyCtxt<'_>, module: &mut Module<im\n             &mut ctx,\n             &mut cranelift_codegen::binemit::NullTrapSink {},\n         ).unwrap();\n+        unwind_context.add_function(cmain_func_id, &ctx, m.isa());\n     }\n }"}]}