{"sha": "a3622eb629bf7acea933d956f8cee902ae357fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNjIyZWI2MjliZjdhY2VhOTMzZDk1NmY4Y2VlOTAyYWUzNTdmY2E=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-02-08T21:43:13Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2019-02-08T21:43:13Z"}, "message": "Add some assist ranges", "tree": {"sha": "e09c517a22f7cf4229c8d4a306f68d9f3940adec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e09c517a22f7cf4229c8d4a306f68d9f3940adec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3622eb629bf7acea933d956f8cee902ae357fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3622eb629bf7acea933d956f8cee902ae357fca", "html_url": "https://github.com/rust-lang/rust/commit/a3622eb629bf7acea933d956f8cee902ae357fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3622eb629bf7acea933d956f8cee902ae357fca/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e3b4c70b5ef23b2fdfc197296d483680e125f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e3b4c70b5ef23b2fdfc197296d483680e125f9", "html_url": "https://github.com/rust-lang/rust/commit/12e3b4c70b5ef23b2fdfc197296d483680e125f9"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "5ce4a8084c1edb5be19a37abfaa226c58cd3559f", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -1,3 +1,5 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n [[package]]\n name = \"aho-corasick\"\n version = \"0.6.9\""}, {"sha": "de33b356c3652e4397dcc25022a8dc117f6fde80", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -24,6 +24,7 @@ pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n             }\n             Some(tt) => tt.syntax().range().end() - TextUnit::of_char(')'),\n         };\n+        edit.target(nominal.syntax().range());\n         edit.set_cursor(offset)\n     })\n }"}, {"sha": "41c8ac2f69de9148b946e724c7700adbab638f40", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -16,7 +16,7 @@ pub(crate) enum Assist {\n \n /// `AssistCtx` allows to apply an assist or check if it could be applied.\n ///\n-/// Assists use a somewhat overengineered approach, given the current needs. The\n+/// Assists use a somewhat over-engineered approach, given the current needs. The\n /// assists workflow consists of two phases. In the first phase, a user asks for\n /// the list of available assists. In the second phase, the user picks a\n /// particular assist and it gets applied.\n@@ -106,6 +106,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     cursor_position: Option<TextUnit>,\n+    target: Option<TextRange>,\n }\n \n impl AssistBuilder {\n@@ -138,7 +139,15 @@ impl AssistBuilder {\n         self.cursor_position = Some(offset)\n     }\n \n+    pub(crate) fn target(&mut self, target: TextRange) {\n+        self.target = Some(target)\n+    }\n+\n     fn build(self) -> AssistAction {\n-        AssistAction { edit: self.edit.finish(), cursor_position: self.cursor_position }\n+        AssistAction {\n+            edit: self.edit.finish(),\n+            cursor_position: self.cursor_position,\n+            target: self.target,\n+        }\n     }\n }"}, {"sha": "73dd8319f558bd02ebcbfe1cb84819bfc56a3d6f", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -20,7 +20,7 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         _ => false,\n     });\n \n-    let offset = if let Some(keyword) = item_keyword {\n+    let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent()?;\n         let def_kws = vec![FN_DEF, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF];\n         // Parent is not a definition, can't add visibility\n@@ -31,17 +31,18 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         if parent.children().any(|child| child.kind() == VISIBILITY) {\n             return None;\n         }\n-        vis_offset(parent)\n+        (vis_offset(parent), parent.range())\n     } else {\n         let ident = ctx.leaf_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n         let field = ident.ancestors().find_map(ast::NamedFieldDef::cast)?;\n         if field.name()?.syntax().range() != ident.range() && field.visibility().is_some() {\n             return None;\n         }\n-        vis_offset(field.syntax())\n+        (vis_offset(field.syntax()), field.syntax().range())\n     };\n \n     ctx.build(\"make pub(crate)\", |edit| {\n+        edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n     })\n@@ -60,13 +61,15 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n \n fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n-        return ctx.build(\"chage to pub(crate)\", |edit| {\n+        return ctx.build(\"change to pub(crate)\", |edit| {\n+            edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub(crate)\");\n             edit.set_cursor(vis.syntax().range().start());\n         });\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        return ctx.build(\"chage to pub\", |edit| {\n+        return ctx.build(\"change to pub\", |edit| {\n+            edit.target(vis.syntax().range());\n             edit.replace(vis.syntax().range(), \"pub\");\n             edit.set_cursor(vis.syntax().range().start());\n         });"}, {"sha": "fc4e953039d2ab67fe88f953607b5f552bff13a0", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -8,7 +8,7 @@\n mod assist_ctx;\n \n use ra_text_edit::TextEdit;\n-use ra_syntax::{TextUnit, SyntaxNode, Direction};\n+use ra_syntax::{TextRange, TextUnit, SyntaxNode, Direction};\n use ra_db::FileRange;\n use hir::db::HirDatabase;\n \n@@ -23,6 +23,7 @@ pub struct AssistLabel {\n pub struct AssistAction {\n     pub edit: TextEdit,\n     pub cursor_position: Option<TextUnit>,\n+    pub target: Option<TextRange>,\n }\n \n /// Return all the assists applicable at the given position.\n@@ -53,15 +54,26 @@ pub fn assists<H>(db: &H, range: FileRange) -> Vec<(AssistLabel, AssistAction)>\n where\n     H: HirDatabase + 'static,\n {\n+    use std::cmp::Ordering;\n+\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n-        all_assists()\n+        let mut a = all_assists()\n             .iter()\n             .filter_map(|f| f(ctx.clone()))\n             .map(|a| match a {\n                 Assist::Resolved(label, action) => (label, action),\n                 Assist::Unresolved(..) => unreachable!(),\n             })\n-            .collect()\n+            .collect::<Vec<(AssistLabel, AssistAction)>>();\n+        a.sort_unstable_by(|a, b| match a {\n+            // Some(y) < Some(x) < None for y < x\n+            (_, AssistAction { target: Some(a), .. }) => match b {\n+                (_, AssistAction { target: Some(b), .. }) => a.len().cmp(&b.len()),\n+                _ => Ordering::Less,\n+            },\n+            _ => Ordering::Greater,\n+        });\n+        a\n     })\n }\n \n@@ -162,5 +174,27 @@ mod helpers {\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use hir::mock::MockDatabase;\n+    use ra_syntax::TextRange;\n+    use ra_db::FileRange;\n+    use test_utils::extract_offset;\n+\n+    #[test]\n+    fn assist_order() {\n+        let before = \"struct Foo { <|>bar: u32 }\";\n+        let (before_cursor_pos, before) = extract_offset(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange =\n+            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+        let assists = super::assists(&db, frange);\n+        let mut assists = assists.iter();\n+\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"make pub(crate)\");\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"add `#[derive]`\");\n+    }\n \n }"}, {"sha": "287c058301c14d8063d5500578e2284e97d9fa5a", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3622eb629bf7acea933d956f8cee902ae357fca/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=a3622eb629bf7acea933d956f8cee902ae357fca", "patch": "@@ -24,6 +24,7 @@ pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     };\n \n     ctx.build(\"split import\", |edit| {\n+        edit.target(colon_colon.range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");\n         edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));"}]}