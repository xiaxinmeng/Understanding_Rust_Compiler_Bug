{"sha": "8823684197f2314fe773c35bbb40444ca49a1d23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjM2ODQxOTdmMjMxNGZlNzczYzM1YmJiNDA0NDRjYTQ5YTFkMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T11:16:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-27T11:16:21Z"}, "message": "Auto merge of #6244 - mikerite:invalid_paths_20201027, r=flip1995\n\nNew internal lint: Invalid paths\n\nAdd a new internal lint that detects invalid paths in the `util::paths` and fix some invalid paths found.\n\nThis commit partially addresses #6047 but the lint would have to be run before running tests to close that issue.\n\nchangelog: none", "tree": {"sha": "a5df1314d650494c4ebd900115c592fd5c4ebb34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5df1314d650494c4ebd900115c592fd5c4ebb34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8823684197f2314fe773c35bbb40444ca49a1d23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8823684197f2314fe773c35bbb40444ca49a1d23", "html_url": "https://github.com/rust-lang/rust/commit/8823684197f2314fe773c35bbb40444ca49a1d23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8823684197f2314fe773c35bbb40444ca49a1d23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afbac8906e614a63ff5825710c3ebe45a3b5e01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/afbac8906e614a63ff5825710c3ebe45a3b5e01a", "html_url": "https://github.com/rust-lang/rust/commit/afbac8906e614a63ff5825710c3ebe45a3b5e01a"}, {"sha": "f79c4afd3a5c408bd9253311b224773702a912df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f79c4afd3a5c408bd9253311b224773702a912df", "html_url": "https://github.com/rust-lang/rust/commit/f79c4afd3a5c408bd9253311b224773702a912df"}], "stats": {"total": 178, "additions": 163, "deletions": 15}, "files": [{"sha": "c75efc6e99f899c73ed3c3d56c43ef00f47ef127", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::paths;\n use crate::utils::{\n-    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_path, span_lint_and_help,\n+    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_def_path, match_path, span_lint_and_help,\n     span_lint_and_note, span_lint_and_then,\n };\n use if_chain::if_chain;\n@@ -193,10 +193,9 @@ fn check_hash_peq<'tcx>(\n     hash_is_automatically_derived: bool,\n ) {\n     if_chain! {\n-        if match_path(&trait_ref.path, &paths::HASH);\n         if let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait();\n-        if let Some(def_id) = &trait_ref.trait_def_id();\n-        if !def_id.is_local();\n+        if let Some(def_id) = trait_ref.trait_def_id();\n+        if match_def_path(cx, def_id, &paths::HASH);\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {\n@@ -352,7 +351,8 @@ fn check_unsafe_derive_deserialize<'tcx>(\n     }\n \n     if_chain! {\n-        if match_path(&trait_ref.path, &paths::SERDE_DESERIALIZE);\n+        if let Some(trait_def_id) = trait_ref.trait_def_id();\n+        if match_def_path(cx, trait_def_id, &paths::SERDE_DESERIALIZE);\n         if let ty::Adt(def, _) = ty.kind();\n         if let Some(local_def_id) = def.did.as_local();\n         let adt_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_def_id);"}, {"sha": "c1c08597ee67004700cc2aef27b2e0c8e4ba39f7", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::{match_qpath, paths, span_lint_and_then, sugg};\n+use crate::utils::{match_def_path, paths, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc_ast::util::parser::AssocOp;\n use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -76,7 +77,8 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n \n             // right hand side matches either f32::EPSILON or f64::EPSILON\n             if let ExprKind::Path(ref epsilon_path) = rhs.kind;\n-            if match_qpath(epsilon_path, &paths::F32_EPSILON) || match_qpath(epsilon_path, &paths::F64_EPSILON);\n+            if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n+            if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n \n             // values of the substractions on the left hand side are of the type float\n             let t_val_l = cx.typeck_results().expr_ty(val_l);"}, {"sha": "7c8cb90fe1c8e398dd6a9a8be471561411165e34", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -892,6 +892,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS,\n         &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         &utils::internal_lints::DEFAULT_LINT,\n+        &utils::internal_lints::INVALID_PATHS,\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n         &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n         &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n@@ -919,6 +920,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n     store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n     store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+    store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n     store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n     store.register_late_pass(|| box utils::author::Author);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n@@ -1280,6 +1282,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::COLLAPSIBLE_SPAN_LINT_CALLS),\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n+        LintId::of(&utils::internal_lints::INVALID_PATHS),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),"}, {"sha": "6ca72d895c8dab74c2af2b4a89b1151c2e0dc1ae", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -1,3 +1,4 @@\n+use crate::consts::{constant_simple, Constant};\n use crate::utils::{\n     is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, qpath_res, run_lints,\n     snippet, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n@@ -14,9 +15,11 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_typeck::hir_ty_to_ty;\n \n use std::borrow::{Borrow, Cow};\n \n@@ -229,6 +232,21 @@ declare_clippy_lint! {\n     \"using `utils::match_type()` instead of `utils::is_type_diagnostic_item()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks the paths module for invalid paths.\n+    ///\n+    /// **Why is this bad?**\n+    /// It indicates a bug in the code.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:** None.\n+    pub INVALID_PATHS,\n+    internal,\n+    \"invalid path\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -761,3 +779,64 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n \n     None\n }\n+\n+// This is not a complete resolver for paths. It works on all the paths currently used in the paths\n+// module.  That's all it does and all it needs to do.\n+pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n+    if path_to_res(cx, path).is_some() {\n+        return true;\n+    }\n+\n+    // Some implementations can't be found by `path_to_res`, particularly inherent\n+    // implementations of native types. Check lang items.\n+    let path_syms: Vec<_> = path.iter().map(|p| Symbol::intern(p)).collect();\n+    let lang_items = cx.tcx.lang_items();\n+    for lang_item in lang_items.items() {\n+        if let Some(def_id) = lang_item {\n+            let lang_item_path = cx.get_def_path(*def_id);\n+            if path_syms.starts_with(&lang_item_path) {\n+                if let [item] = &path_syms[lang_item_path.len()..] {\n+                    for child in cx.tcx.item_children(*def_id) {\n+                        if child.ident.name == *item {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+declare_lint_pass!(InvalidPaths => [INVALID_PATHS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let local_def_id = &cx.tcx.parent_module(item.hir_id);\n+        let mod_name = &cx.tcx.item_name(local_def_id.to_def_id());\n+        if_chain! {\n+            if mod_name.as_str() == \"paths\";\n+            if let hir::ItemKind::Const(ty, body_id) = item.kind;\n+            let ty = hir_ty_to_ty(cx.tcx, ty);\n+            if let ty::Array(el_ty, _) = &ty.kind();\n+            if let ty::Ref(_, el_ty, _) = &el_ty.kind();\n+            if el_ty.is_str();\n+            let body = cx.tcx.hir().body(body_id);\n+            let typeck_results = cx.tcx.typeck_body(body_id);\n+            if let Some(Constant::Vec(path)) = constant_simple(cx, typeck_results, &body.value);\n+            let path: Vec<&str> = path.iter().map(|x| {\n+                    if let Constant::Str(s) = x {\n+                        s.as_str()\n+                    } else {\n+                        // We checked the type of the constant above\n+                        unreachable!()\n+                    }\n+                }).collect();\n+            if !check_path(cx, &path[..]);\n+            then {\n+                span_lint(cx, CLIPPY_LINTS_INTERNAL, item.span, \"invalid path\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "a1ecca0961a8d57060f627d7342a6e3f70cb81e1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -268,6 +268,7 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<def::Res> {\n             krate: *krate,\n             index: CRATE_DEF_INDEX,\n         };\n+        let mut current_item = None;\n         let mut items = cx.tcx.item_children(krate);\n         let mut path_it = path.iter().skip(1).peekable();\n \n@@ -277,17 +278,41 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<def::Res> {\n                 None => return None,\n             };\n \n+            // `get_def_path` seems to generate these empty segments for extern blocks.\n+            // We can just ignore them.\n+            if segment.is_empty() {\n+                continue;\n+            }\n+\n             let result = SmallVec::<[_; 8]>::new();\n             for item in mem::replace(&mut items, cx.tcx.arena.alloc_slice(&result)).iter() {\n                 if item.ident.name.as_str() == *segment {\n                     if path_it.peek().is_none() {\n                         return Some(item.res);\n                     }\n \n+                    current_item = Some(item);\n                     items = cx.tcx.item_children(item.res.def_id());\n                     break;\n                 }\n             }\n+\n+            // The segment isn't a child_item.\n+            // Try to find it under an inherent impl.\n+            if_chain! {\n+                if path_it.peek().is_none();\n+                if let Some(current_item) = current_item;\n+                let item_def_id = current_item.res.def_id();\n+                if cx.tcx.def_kind(item_def_id) == DefKind::Struct;\n+                then {\n+                    // Bad `find_map` suggestion. See #4193.\n+                    #[allow(clippy::find_map)]\n+                    return cx.tcx.inherent_impls(item_def_id).iter()\n+                        .flat_map(|&impl_def_id| cx.tcx.item_children(impl_def_id))\n+                        .find(|item| item.ident.name.as_str() == *segment)\n+                        .map(|item| item.res);\n+                }\n+            }\n         }\n     } else {\n         None"}, {"sha": "d5a0e0d1f2943c8b47cfda208b20b02ea0c1fc3f", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -32,10 +32,10 @@ pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n-pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n+pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n-pub const F32_EPSILON: [&str; 2] = [\"f32\", \"EPSILON\"];\n-pub const F64_EPSILON: [&str; 2] = [\"f64\", \"EPSILON\"];\n+pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n+pub const F64_EPSILON: [&str; 4] = [\"core\", \"f64\", \"<impl f64>\", \"EPSILON\"];\n pub const FILE: [&str; 3] = [\"std\", \"fs\", \"File\"];\n pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n@@ -47,7 +47,7 @@ pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n-pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n+pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n@@ -58,7 +58,7 @@ pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"Into\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\"];\n-pub const LATE_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"LateContext\"];\n+pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 3] = [\"rustc_session\", \"lint\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -86,8 +86,8 @@ pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n-pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n-pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n+pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n+pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n@@ -107,7 +107,7 @@ pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n-pub const SERDE_DESERIALIZE: [&str; 2] = [\"_serde\", \"Deserialize\"];\n+pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];"}, {"sha": "01e28ae5e9d3581c0995e1b88abb0fd738494052", "filename": "tests/ui/invalid_paths.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/tests%2Fui%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/tests%2Fui%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_paths.rs?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::internal)]\n+\n+mod paths {\n+    // Good path\n+    pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n+\n+    // Path to method on inherent impl of a primitive type\n+    pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n+\n+    // Path to method on inherent impl\n+    pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n+\n+    // Path with empty segment\n+    pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+\n+    // Path with bad crate\n+    pub const BAD_CRATE_PATH: [&str; 2] = [\"bad\", \"path\"];\n+\n+    // Path with bad module\n+    pub const BAD_MOD_PATH: [&str; 2] = [\"std\", \"xxx\"];\n+}\n+\n+fn main() {}"}, {"sha": "bd69d661b714fe8bd29e553588d2736e3eb22fc3", "filename": "tests/ui/invalid_paths.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8823684197f2314fe773c35bbb40444ca49a1d23/tests%2Fui%2Finvalid_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8823684197f2314fe773c35bbb40444ca49a1d23/tests%2Fui%2Finvalid_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_paths.stderr?ref=8823684197f2314fe773c35bbb40444ca49a1d23", "patch": "@@ -0,0 +1,16 @@\n+error: invalid path\n+  --> $DIR/invalid_paths.rs:17:5\n+   |\n+LL |     pub const BAD_CRATE_PATH: [&str; 2] = [\"bad\", \"path\"];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::clippy-lints-internal` implied by `-D warnings`\n+\n+error: invalid path\n+  --> $DIR/invalid_paths.rs:20:5\n+   |\n+LL |     pub const BAD_MOD_PATH: [&str; 2] = [\"std\", \"xxx\"];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}