{"sha": "c63020a7c3e624f610f1f402a44a0db92bd21a88", "node_id": "C_kwDOAAsO6NoAKGM2MzAyMGE3YzNlNjI0ZjYxMGYxZjQwMmE0NGEwZGI5MmJkMjFhODg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-09T11:36:27Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-09T11:36:27Z"}, "message": "rename `codegen_fulfill_obligation`", "tree": {"sha": "70c6e26cdeb6a8321b513b875de3794ca45377b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c6e26cdeb6a8321b513b875de3794ca45377b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c63020a7c3e624f610f1f402a44a0db92bd21a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c63020a7c3e624f610f1f402a44a0db92bd21a88", "html_url": "https://github.com/rust-lang/rust/commit/c63020a7c3e624f610f1f402a44a0db92bd21a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c63020a7c3e624f610f1f402a44a0db92bd21a88/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14f2acd0ac5d20a58f3333276d1ea77510379ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/14f2acd0ac5d20a58f3333276d1ea77510379ac0", "html_url": "https://github.com/rust-lang/rust/commit/14f2acd0ac5d20a58f3333276d1ea77510379ac0"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "f72e7389fc606d9b935fd257aff85ff0ee03d384", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -1202,14 +1202,11 @@ rustc_queries! {\n         }\n     }\n \n-    query codegen_fulfill_obligation(\n+    query codegen_select_candidate(\n         key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n     ) -> Result<&'tcx ImplSource<'tcx, ()>, traits::CodegenObligationError> {\n         cache_on_disk_if { true }\n-        desc { |tcx|\n-            \"checking if `{}` fulfills its obligations\",\n-            tcx.def_path_str(key.1.def_id())\n-        }\n+        desc { |tcx| \"computing candidate for `{}`\", key.1 }\n     }\n \n     /// Return all `impl` blocks in the current crate."}, {"sha": "755d9f8f696675859c387125c2181a95b95f3921", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -1024,7 +1024,7 @@ pub enum MethodViolationCode {\n     UndispatchableReceiver(Option<Span>),\n }\n \n-/// These are the error cases for `codegen_fulfill_obligation`.\n+/// These are the error cases for `codegen_select_candidate`.\n #[derive(Copy, Clone, Debug, Hash, HashStable, Encodable, Decodable)]\n pub enum CodegenObligationError {\n     /// Ambiguity can happen when monomorphizing during trans"}, {"sha": "3afff7bcabf7de1cbfe2fc8dc48810290c7c41f4", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -35,7 +35,7 @@ fn custom_coerce_unsize_info<'tcx>(\n         substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n     });\n \n-    match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n+    match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {\n             impl_def_id,\n             .."}, {"sha": "08adbcbd410c679ac9c444831ab594185a14c0ae", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::{self, TyCtxt};\n /// obligations *could be* resolved if we wanted to.\n ///\n /// This also expects that `trait_ref` is fully normalized.\n-pub fn codegen_fulfill_obligation<'tcx>(\n+pub fn codegen_select_candidate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<&'tcx ImplSource<'tcx, ()>, CodegenObligationError> {"}, {"sha": "40596078f0414f551e862d702cecd21df0ece38e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -971,7 +971,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n-        codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,\n+        codegen_select_candidate: codegen::codegen_select_candidate,\n         own_existential_vtable_entries,\n         vtable_entries,\n         vtable_trait_upcasting_coercion_new_vptr_slot,"}, {"sha": "b55302de2a733891ad6d72010240747a68559acf", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -3,9 +3,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{\n-    self, Instance, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, Instance, TyCtxt, TypeVisitable};\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n@@ -101,7 +99,7 @@ fn resolve_associated_item<'tcx>(\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n \n-    let vtbl = match tcx.codegen_fulfill_obligation((param_env, ty::Binder::dummy(trait_ref))) {\n+    let vtbl = match tcx.codegen_select_candidate((param_env, ty::Binder::dummy(trait_ref))) {\n         Ok(vtbl) => vtbl,\n         Err(CodegenObligationError::Ambiguity) => {\n             let reported = tcx.sess.delay_span_bug("}, {"sha": "d5f914f46f873bd1fb2fd77f4545108a756c8bc3", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c63020a7c3e624f610f1f402a44a0db92bd21a88/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c63020a7c3e624f610f1f402a44a0db92bd21a88/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=c63020a7c3e624f610f1f402a44a0db92bd21a88", "patch": "@@ -4,13 +4,13 @@ error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, { T::DIM },\n LL |     const DIM: usize;\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires checking if `TensorDimension` fulfills its obligations...\n+note: ...which requires computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`...\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires resolving instance `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>::DIM`, completing the cycle\n-note: cycle used when checking if `TensorDimension` fulfills its obligations\n+note: cycle used when computing candidate for `<LazyUpdim<T, { T::DIM }, DIM> as TensorDimension>`\n   --> $DIR/issue-83765.rs:4:1\n    |\n LL | trait TensorDimension {"}]}