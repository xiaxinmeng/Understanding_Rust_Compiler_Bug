{"sha": "78d9091afff88464a32d14508cd4671e8d419e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDkwOTFhZmZmODg0NjRhMzJkMTQ1MDhjZDQ2NzFlOGQ0MTllN2Q=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-12T18:41:56Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-12T18:41:56Z"}, "message": "do not vertically align list items in case the tactic is Horizontal", "tree": {"sha": "5c0ed891e6cb55c543bba898456214880632ff8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c0ed891e6cb55c543bba898456214880632ff8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d9091afff88464a32d14508cd4671e8d419e7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlvA6vQACgkQbVYg2Qgh\nATNo4gf+OCh5BQ9pQl90ULMEWxkw8RbJ1zAwYewS5jRgcslVZz1S14DCoMVcUhsi\nAZeTATIzl1BC7WThXoqYoSJ25HCqy+S3SuZmlf2aW2q1xPkvO8HDFKNr5fCGNJCZ\nqj3tQxDMkWOOPrEYO/47chpKHaOwKxohRFWkCPSRLW0DhTRZbpg1+u+rI56M+DHh\nRfQo6PdKMq4iXaINEPo2b8pBHbKsNDQeNMHr08Xx2RjfIVgPV9MtCSJRQoVt4eU2\nYYHXTNer70m6BHRO7ADCKMSeri455oYw9ZtAJ9IiG+Q5TEq+cSbcTnBYY1VFLRe5\nai50H3vYnqkjBYMiZZMqU7q/als1tg==\n=/lxk\n-----END PGP SIGNATURE-----", "payload": "tree 5c0ed891e6cb55c543bba898456214880632ff8e\nparent 8b709c0019244d8554c0799084815146a5ce800a\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539369716 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539369716 +0200\n\ndo not vertically align list items in case the tactic is Horizontal\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d9091afff88464a32d14508cd4671e8d419e7d", "html_url": "https://github.com/rust-lang/rust/commit/78d9091afff88464a32d14508cd4671e8d419e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d9091afff88464a32d14508cd4671e8d419e7d/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b709c0019244d8554c0799084815146a5ce800a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b709c0019244d8554c0799084815146a5ce800a", "html_url": "https://github.com/rust-lang/rust/commit/8b709c0019244d8554c0799084815146a5ce800a"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "dbb3e732d6268477a186f478316c8c9020c50c52", "filename": "src/vertical.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78d9091afff88464a32d14508cd4671e8d419e7d/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d9091afff88464a32d14508cd4671e8d419e7d/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=78d9091afff88464a32d14508cd4671e8d419e7d", "patch": "@@ -19,7 +19,7 @@ use syntax::source_map::{BytePos, Span};\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use source_map::SpanUtils;\n@@ -227,7 +227,7 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         field_prefix_max_width = 0;\n     }\n \n-    let items = itemize_list(\n+    let mut items = itemize_list(\n         context.snippet_provider,\n         fields.iter(),\n         \"}\",\n@@ -248,6 +248,20 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         one_line_width,\n     );\n \n+    if tactic == DefinitiveListTactic::Horizontal {\n+        // since the items fits on a line, there is no need to align them\n+        let do_rewrite =\n+            |field: &T| -> Option<String> { field.rewrite_aligned_item(context, item_shape, 0) };\n+        fields\n+            .iter()\n+            .zip(items.iter_mut())\n+            .for_each(|(field, list_item): (&T, &mut ListItem)| {\n+                if list_item.item.is_some() {\n+                    list_item.item = do_rewrite(field);\n+                }\n+            });\n+    }\n+\n     let fmt = ListFormatting::new(item_shape, context.config)\n         .tactic(tactic)\n         .trailing_separator(context.config.trailing_comma())"}, {"sha": "a381945fd8b8fd5fd8aef4b45e67250e2709d881", "filename": "tests/target/issue-2633.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78d9091afff88464a32d14508cd4671e8d419e7d/tests%2Ftarget%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d9091afff88464a32d14508cd4671e8d419e7d/tests%2Ftarget%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2633.rs?ref=78d9091afff88464a32d14508cd4671e8d419e7d", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-struct_field_align_threshold: 5\n+\n+#[derive(Fail, Debug, Clone)]\n+pub enum BuildError {\n+    LineTooLong { length: usize, limit: usize },\n+    DisallowedByte { b: u8, pos: usize },\n+    ContainsNewLine { pos: usize },\n+}\n+\n+enum Foo {\n+    A { a: usize, bbbbb: () },\n+    B { a: (), bbbbb: () },\n+}"}]}