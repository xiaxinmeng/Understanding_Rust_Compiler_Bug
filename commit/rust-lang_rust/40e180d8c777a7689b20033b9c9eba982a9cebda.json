{"sha": "40e180d8c777a7689b20033b9c9eba982a9cebda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZTE4MGQ4Yzc3N2E3Njg5YjIwMDMzYjljOWViYTk4MmE5Y2ViZGE=", "commit": {"author": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-09-29T11:16:53Z"}, "committer": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-09-29T11:16:53Z"}, "message": "Replace tabs by spaces", "tree": {"sha": "f9faf883cc5636352f74a79a9b46feab45baf4a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9faf883cc5636352f74a79a9b46feab45baf4a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e180d8c777a7689b20033b9c9eba982a9cebda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e180d8c777a7689b20033b9c9eba982a9cebda", "html_url": "https://github.com/rust-lang/rust/commit/40e180d8c777a7689b20033b9c9eba982a9cebda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e180d8c777a7689b20033b9c9eba982a9cebda/comments", "author": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8cdefb6cfab11087943bb41824bb955c655daf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cdefb6cfab11087943bb41824bb955c655daf1", "html_url": "https://github.com/rust-lang/rust/commit/b8cdefb6cfab11087943bb41824bb955c655daf1"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "96e78256f4ebe8c1a20051f11c5ce690633cd5d2", "filename": "src/mut_reference.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40e180d8c777a7689b20033b9c9eba982a9cebda/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e180d8c777a7689b20033b9c9eba982a9cebda/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=40e180d8c777a7689b20033b9c9eba982a9cebda", "patch": "@@ -23,28 +23,28 @@ impl LintPass for UnnecessaryMutPassed {\n impl LateLintPass for UnnecessaryMutPassed {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         if let &ExprCall(ref fn_expr, ref arguments) = &e.node {\n-\t\t\tlet borrowed_table = cx.tcx.tables.borrow();\n-\t\t\tlet funtion_type = match borrowed_table.node_types.get(&fn_expr.id) {\n-\t\t\t\tSome(funtion_type) => funtion_type,\n-\t\t\t\tNone => unreachable!(), // A function with unknown type is called.\n-\t\t\t\t                        // If this happened the compiler would have aborted the\n-\t\t\t\t\t\t\t\t\t\t// compilation long ago.\n-\t\t\t};\n+            let borrowed_table = cx.tcx.tables.borrow();\n+            let funtion_type = match borrowed_table.node_types.get(&fn_expr.id) {\n+                Some(funtion_type) => funtion_type,\n+                None => unreachable!(), // A function with unknown type is called.\n+                                        // If this happened the compiler would have aborted the\n+                                        // compilation long ago.\n+            };\n             if let TypeVariants::TyBareFn(_, ref b) = funtion_type.sty {\n                 let parameters = b.sig.skip_binder().inputs.clone();\n                 for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                     match parameter.sty {\n-\t\t\t\t\t\tTypeVariants::TyRef(_, TypeAndMut {ty: _, mutbl: MutImmutable}) | \n-\t\t\t\t\t\tTypeVariants::TyRawPtr(TypeAndMut {ty: _, mutbl: MutImmutable}) => {\n-\t\t\t\t\t\t\tif let Expr_::ExprAddrOf(MutMutable, _) = argument.node {\n-\t\t\t\t\t\t\t\tif let ExprPath(_, path) = fn_expr.node.clone() {\n-\t\t\t\t\t\t\t\t\tspan_lint(cx, UNNECESSARY_MUT_PASSED, \n+                        TypeVariants::TyRef(_, TypeAndMut {ty: _, mutbl: MutImmutable}) | \n+                        TypeVariants::TyRawPtr(TypeAndMut {ty: _, mutbl: MutImmutable}) => {\n+                            if let Expr_::ExprAddrOf(MutMutable, _) = argument.node {\n+                                if let ExprPath(_, path) = fn_expr.node.clone() {\n+                                    span_lint(cx, UNNECESSARY_MUT_PASSED, \n                                               argument.span, &format!(\"This argument of the \\\n                                               function \\\"{}\\\" doesn't need to be mutable\", path));\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\t_ => {}\n+                                }\n+                            }\n+                        },\n+                        _ => {}\n                     }\n                 }\n             }"}]}