{"sha": "d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYTgxYjk1YzNlMmNjZmRiYTAzMjRjYWFlNTMxY2UzNTI4ZWQ0ZTI=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-18T10:58:58Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-18T10:58:58Z"}, "message": "Implement bitwise operator traits for ints and uints", "tree": {"sha": "362466ea31c22bcfa018bb126890899ce5b4a9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/362466ea31c22bcfa018bb126890899ce5b4a9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "html_url": "https://github.com/rust-lang/rust/commit/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e087bf310e7e7911bf05efa36a2cdb57855a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e087bf310e7e7911bf05efa36a2cdb57855a4e", "html_url": "https://github.com/rust-lang/rust/commit/07e087bf310e7e7911bf05efa36a2cdb57855a4e"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "f901e591027435c3871876fb94e2c51199943f84", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "patch": "@@ -199,6 +199,30 @@ impl ops::Modulo<T,T> for T {\n impl ops::Neg<T> for T {\n     fn neg(&self) -> T { -*self }\n }\n+#[cfg(notest)]\n+impl ops::BitOr<T,T> for T {\n+    fn bitor(&self, other: &T) -> T { *self | *other }\n+}\n+#[cfg(notest)]\n+impl ops::BitAnd<T,T> for T {\n+    fn bitand(&self, other: &T) -> T { *self & *other }\n+}\n+#[cfg(notest)]\n+impl ops::BitXor<T,T> for T {\n+    fn bitxor(&self, other: &T) -> T { *self ^ *other }\n+}\n+#[cfg(notest)]\n+impl ops::Shl<T,T> for T {\n+    fn shl(&self, other: &T) -> T { *self << *other }\n+}\n+#[cfg(notest)]\n+impl ops::Shr<T,T> for T {\n+    fn shr(&self, other: &T) -> T { *self >> *other }\n+}\n+#[cfg(notest)]\n+impl ops::Not<T> for T {\n+    fn not(&self) -> T { !*self }\n+}\n \n // String conversion functions and impl str -> num\n \n@@ -283,6 +307,16 @@ mod tests {\n     use super::inst::T;\n     use prelude::*;\n \n+    #[test]\n+    fn test_bitwise_ops() {\n+        assert!(0b1110 as T == (0b1100 as T).bitor(&(0b1010 as T)));\n+        assert!(0b1000 as T == (0b1100 as T).bitand(&(0b1010 as T)));\n+        assert!(0b0110 as T == (0b1100 as T).bitxor(&(0b1010 as T)));\n+        assert!(0b1110 as T == (0b0111 as T).shl(&(1 as T)));\n+        assert!(0b0111 as T == (0b1110 as T).shr(&(1 as T)));\n+        assert!(-(0b11 as T) - (1 as T) == (0b11 as T).not());\n+    }\n+\n     #[test]\n     fn test_from_str() {\n         assert!(from_str(~\"0\") == Some(0 as T));"}, {"sha": "34c11804af4399bf8b505d25d0586bbf58762bb1", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "patch": "@@ -164,6 +164,30 @@ impl ops::Modulo<T,T> for T {\n impl ops::Neg<T> for T {\n     fn neg(&self) -> T { -*self }\n }\n+#[cfg(notest)]\n+impl ops::BitOr<T,T> for T {\n+    fn bitor(&self, other: &T) -> T { *self | *other }\n+}\n+#[cfg(notest)]\n+impl ops::BitAnd<T,T> for T {\n+    fn bitand(&self, other: &T) -> T { *self & *other }\n+}\n+#[cfg(notest)]\n+impl ops::BitXor<T,T> for T {\n+    fn bitxor(&self, other: &T) -> T { *self ^ *other }\n+}\n+#[cfg(notest)]\n+impl ops::Shl<T,T> for T {\n+    fn shl(&self, other: &T) -> T { *self << *other }\n+}\n+#[cfg(notest)]\n+impl ops::Shr<T,T> for T {\n+    fn shr(&self, other: &T) -> T { *self >> *other }\n+}\n+#[cfg(notest)]\n+impl ops::Not<T> for T {\n+    fn not(&self) -> T { !*self }\n+}\n \n // String conversion functions and impl str -> num\n \n@@ -247,6 +271,17 @@ mod tests {\n     use super::*;\n     use super::inst::T;\n     use prelude::*;\n+\n+    #[test]\n+    fn test_bitwise_ops() {\n+        assert!(0b1110 as T == (0b1100 as T).bitor(&(0b1010 as T)));\n+        assert!(0b1000 as T == (0b1100 as T).bitand(&(0b1010 as T)));\n+        assert!(0b0110 as T == (0b1100 as T).bitxor(&(0b1010 as T)));\n+        assert!(0b1110 as T == (0b0111 as T).shl(&(1 as T)));\n+        assert!(0b0111 as T == (0b1110 as T).shr(&(1 as T)));\n+        assert!(max_value - (0b1011 as T) == (0b1011 as T).not());\n+    }\n+\n     #[test]\n     pub fn test_to_str() {\n         assert!(to_str_radix(0 as T, 10u) == ~\"0\");"}]}