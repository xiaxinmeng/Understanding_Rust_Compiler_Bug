{"sha": "b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "node_id": "C_kwDOAAsO6NoAKGI3ZTJiMDQ5ZjNlZjdlMDgyYWY4MzJmYTUzYWI2YWYwYTQ1YmFhNjI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-06T10:56:23Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-06T10:56:23Z"}, "message": "Querify registered_tools.", "tree": {"sha": "3d864c2c3465662cc2dd3fee52ba0d45b772931b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d864c2c3465662cc2dd3fee52ba0d45b772931b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "html_url": "https://github.com/rust-lang/rust/commit/b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f540a25745e03cfe9eac7e3a5e5489d36e4ad58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f540a25745e03cfe9eac7e3a5e5489d36e4ad58a", "html_url": "https://github.com/rust-lang/rust/commit/f540a25745e03cfe9eac7e3a5e5489d36e4ad58a"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "713e4fbbdce2364b855db30b2604080ce2a4409a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -12,13 +12,13 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AttrVec, Attribute, HasAttrs, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan, PResult,\n };\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n-use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics};\n+use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics, RegisteredTools};\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n use rustc_session::errors::report_lit_error;\n use rustc_session::{parse::ParseSess, Limit, Session};\n@@ -947,14 +947,14 @@ pub trait ResolverExpand {\n     fn declare_proc_macro(&mut self, id: NodeId);\n \n     /// Tools registered with `#![register_tool]` and used by tool attributes and lints.\n-    fn registered_tools(&self) -> &FxHashSet<Ident>;\n+    fn registered_tools(&self) -> &RegisteredTools;\n }\n \n pub trait LintStoreExpand {\n     fn pre_expansion_lint(\n         &self,\n         sess: &Session,\n-        registered_tools: &FxHashSet<Ident>,\n+        registered_tools: &RegisteredTools,\n         node_id: NodeId,\n         attrs: &[Attribute],\n         items: &[P<Item>],"}, {"sha": "192ef65047491c8705b4bf67222b7e5223031c98", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -178,7 +178,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     let sess = tcx.sess;\n     let lint_store = unerased_lint_store(tcx);\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n+    pre_expansion_lint(sess, lint_store, tcx.registered_tools(()), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -557,6 +557,7 @@ fn resolver_for_lowering<'tcx>(\n     (): (),\n ) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n     let arenas = Resolver::arenas();\n+    let _ = tcx.registered_tools(()); // Uses `crate_for_resolver`.\n     let krate = tcx.crate_for_resolver(()).steal();\n     let mut resolver = Resolver::new(tcx, &krate, &arenas);\n     let krate = configure_and_expand(krate, &mut resolver);\n@@ -637,6 +638,7 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     rustc_mir_transform::provide(providers);\n     rustc_monomorphize::provide(providers);\n     rustc_privacy::provide(providers);\n+    rustc_resolve::provide(providers);\n     rustc_hir_analysis::provide(providers);\n     rustc_hir_typeck::provide(providers);\n     ty::provide(providers);"}, {"sha": "a76229dd3524b2ed0ce13a9310817a542317a4cb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -128,7 +128,7 @@ fn lint_expectations(tcx: TyCtxt<'_>, (): ()) -> Vec<(LintExpectationId, LintExp\n         },\n         warn_about_weird_lints: false,\n         store,\n-        registered_tools: &tcx.resolutions(()).registered_tools,\n+        registered_tools: &tcx.registered_tools(()),\n     };\n \n     builder.add_command_line();\n@@ -156,7 +156,7 @@ fn shallow_lint_levels_on(tcx: TyCtxt<'_>, owner: hir::OwnerId) -> ShallowLintLe\n         },\n         warn_about_weird_lints: false,\n         store,\n-        registered_tools: &tcx.resolutions(()).registered_tools,\n+        registered_tools: &tcx.registered_tools(()),\n     };\n \n     if owner == hir::CRATE_OWNER_ID {"}, {"sha": "8736b5267df4743d4ef78d7ef5e20e3780464bdc", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_macros;\n pub use self::Level::*;\n use rustc_ast::node_id::NodeId;\n use rustc_ast::{AttrId, Attribute};\n-use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_error_messages::{DiagnosticMessage, MultiSpan};\n use rustc_hir::HashStableContext;\n@@ -594,6 +594,8 @@ impl LintBuffer {\n     }\n }\n \n+pub type RegisteredTools = FxIndexSet<Ident>;\n+\n /// Declares a static item of type `&'static Lint`.\n ///\n /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html> for"}, {"sha": "98b976176ffc661a7879e2b70560e4ef105fbdcc", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -107,6 +107,7 @@ macro_rules! arena_types {\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n             [decode] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [decode] used_trait_imports: rustc_data_structures::unord::UnordSet<rustc_hir::def_id::LocalDefId>,\n+            [decode] registered_tools: rustc_middle::ty::RegisteredTools,\n             [decode] is_late_bound_map: rustc_data_structures::fx::FxIndexSet<rustc_hir::ItemLocalId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n "}, {"sha": "b69e227cfbed772dc1944055b9d121174fa4deba", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -26,6 +26,11 @@ rustc_queries! {\n         desc { \"triggering a delay span bug\" }\n     }\n \n+    query registered_tools(_: ()) -> &'tcx ty::RegisteredTools {\n+        arena_cache\n+        desc { \"compute registered tools for crate\" }\n+    }\n+\n     query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n         feedable\n         no_hash"}, {"sha": "bfa50550cf6d861e4b0eb586c6fd6462edfd060d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -44,6 +44,7 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n+pub use rustc_session::lint::RegisteredTools;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, ExpnKind, Span};\n@@ -148,8 +149,6 @@ mod typeck_results;\n \n // Data types\n \n-pub type RegisteredTools = FxHashSet<Ident>;\n-\n pub struct ResolverOutputs {\n     pub global_ctxt: ResolverGlobalCtxt,\n     pub ast_lowering: ResolverAstLowering,\n@@ -179,7 +178,6 @@ pub struct ResolverGlobalCtxt {\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n-    pub registered_tools: RegisteredTools,\n     pub doc_link_resolutions: FxHashMap<LocalDefId, DocLinkResMap>,\n     pub doc_link_traits_in_scope: FxHashMap<LocalDefId, Vec<DefId>>,\n     pub all_macro_rules: FxHashMap<Symbol, Res<ast::NodeId>>,"}, {"sha": "e9fe4c09a9f3ce52a063ee518f962895069db0d5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -966,7 +966,7 @@ pub struct Resolver<'a, 'tcx> {\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n     /// the surface (`macro` items in libcore), but are actually attributes or derives.\n     builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n-    registered_tools: RegisteredTools,\n+    registered_tools: &'tcx RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n     macro_map: FxHashMap<DefId, MacroData>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n@@ -1241,7 +1241,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        let registered_tools = macros::registered_tools(tcx.sess, &krate.attrs);\n+        let registered_tools = tcx.registered_tools(());\n \n         let features = tcx.sess.features_untracked();\n \n@@ -1424,7 +1424,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_impls: self.trait_impls,\n             proc_macros,\n             confused_type_with_std_module,\n-            registered_tools: self.registered_tools,\n             doc_link_resolutions: self.doc_link_resolutions,\n             doc_link_traits_in_scope: self.doc_link_traits_in_scope,\n             all_macro_rules: self.all_macro_rules,\n@@ -2056,3 +2055,7 @@ impl Finalize {\n         Finalize { node_id, path_span, root_span, report_private: true }\n     }\n }\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    providers.registered_tools = macros::registered_tools;\n+}"}, {"sha": "37153854f7e7f7c49e03a5a87b817c98a5c2bb2d", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e2b049f3ef7e082af832fa53ab6af0a45baa62/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b7e2b049f3ef7e082af832fa53ab6af0a45baa62", "patch": "@@ -8,7 +8,6 @@ use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment};\n use rustc_ast::{self as ast, Inline, ItemKind, ModKind, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -20,11 +19,11 @@ use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::RegisteredTools;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, SOFT_UNSTABLE};\n use rustc_session::lint::builtin::{UNUSED_MACROS, UNUSED_MACRO_RULES};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::feature_err;\n-use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::hygiene::{AstPass, MacroKind};\n@@ -111,23 +110,28 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n     }\n }\n \n-pub(crate) fn registered_tools(sess: &Session, attrs: &[ast::Attribute]) -> FxHashSet<Ident> {\n-    let mut registered_tools = FxHashSet::default();\n-    for attr in sess.filter_by_name(attrs, sym::register_tool) {\n+pub(crate) fn registered_tools(tcx: TyCtxt<'_>, (): ()) -> RegisteredTools {\n+    let mut registered_tools = RegisteredTools::default();\n+    let krate = tcx.crate_for_resolver(()).borrow();\n+    for attr in tcx.sess.filter_by_name(&krate.attrs, sym::register_tool) {\n         for nested_meta in attr.meta_item_list().unwrap_or_default() {\n             match nested_meta.ident() {\n                 Some(ident) => {\n                     if let Some(old_ident) = registered_tools.replace(ident) {\n                         let msg = format!(\"{} `{}` was already registered\", \"tool\", ident);\n-                        sess.struct_span_err(ident.span, &msg)\n+                        tcx.sess\n+                            .struct_span_err(ident.span, &msg)\n                             .span_label(old_ident.span, \"already registered here\")\n                             .emit();\n                     }\n                 }\n                 None => {\n                     let msg = format!(\"`{}` only accepts identifiers\", sym::register_tool);\n                     let span = nested_meta.span();\n-                    sess.struct_span_err(span, &msg).span_label(span, \"not an identifier\").emit();\n+                    tcx.sess\n+                        .struct_span_err(span, &msg)\n+                        .span_label(span, \"not an identifier\")\n+                        .emit();\n                 }\n             }\n         }"}]}