{"sha": "a13e4aea81a224c5c008dda22ae953bd26295d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2U0YWVhODFhMjI0YzVjMDA4ZGRhMjJhZTk1M2JkMjYyOTVkNzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-10T16:42:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T17:48:40Z"}, "message": "remove the liveness mode and simplify `categorize`\n\nLess modes!", "tree": {"sha": "ee8ad805a00787c8b5824ab19e791bd4250e1ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8ad805a00787c8b5824ab19e791bd4250e1ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13e4aea81a224c5c008dda22ae953bd26295d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13e4aea81a224c5c008dda22ae953bd26295d71", "html_url": "https://github.com/rust-lang/rust/commit/a13e4aea81a224c5c008dda22ae953bd26295d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13e4aea81a224c5c008dda22ae953bd26295d71/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8785e348ba6b9d43ffd8ce4b1a59059cbce6334c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8785e348ba6b9d43ffd8ce4b1a59059cbce6334c", "html_url": "https://github.com/rust-lang/rust/commit/8785e348ba6b9d43ffd8ce4b1a59059cbce6334c"}], "stats": {"total": 60, "additions": 17, "deletions": 43}, "files": [{"sha": "a35117f2e35605ec82c83f7f9eed0c46de95162e", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a13e4aea81a224c5c008dda22ae953bd26295d71/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13e4aea81a224c5c008dda22ae953bd26295d71/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=a13e4aea81a224c5c008dda22ae953bd26295d71", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n use rustc::mir::{Local, Location, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use util::liveness::{self, DefUse, LivenessMode};\n+use util::liveness::{self, DefUse};\n \n crate fn find<'tcx>(\n     mir: &Mir<'tcx>,\n@@ -32,10 +32,6 @@ crate fn find<'tcx>(\n         tcx,\n         region_vid,\n         start_point,\n-        liveness_mode: LivenessMode {\n-            include_regular_use: true,\n-            include_drops: true,\n-        },\n     };\n \n     uf.find()\n@@ -47,7 +43,6 @@ struct UseFinder<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     region_vid: RegionVid,\n     start_point: Location,\n-    liveness_mode: LivenessMode,\n }\n \n impl<'cx, 'gcx, 'tcx> UseFinder<'cx, 'gcx, 'tcx> {\n@@ -108,7 +103,6 @@ impl<'cx, 'gcx, 'tcx> UseFinder<'cx, 'gcx, 'tcx> {\n             mir: self.mir,\n             tcx: self.tcx,\n             region_vid: self.region_vid,\n-            liveness_mode: self.liveness_mode,\n             def_use_result: None,\n         };\n \n@@ -122,7 +116,6 @@ struct DefUseVisitor<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     mir: &'cx Mir<'tcx>,\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     region_vid: RegionVid,\n-    liveness_mode: LivenessMode,\n     def_use_result: Option<DefUseResult>,\n }\n \n@@ -146,23 +139,12 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'gcx, 'tcx> {\n         });\n \n         if found_it {\n-            match liveness::categorize(context, self.liveness_mode) {\n-                Some(DefUse::Def) => {\n-                    self.def_use_result = Some(DefUseResult::Def);\n-                }\n-\n-                Some(DefUse::Use) => {\n-                    self.def_use_result = if context.is_drop() {\n-                        Some(DefUseResult::UseDrop { local })\n-                    } else {\n-                        Some(DefUseResult::UseLive { local })\n-                    };\n-                }\n-\n-                None => {\n-                    self.def_use_result = None;\n-                }\n-            }\n+            self.def_use_result = match liveness::categorize(context) {\n+                Some(DefUse::Def) => Some(DefUseResult::Def),\n+                Some(DefUse::Use) => Some(DefUseResult::UseLive { local }),\n+                Some(DefUse::Drop) => Some(DefUseResult::UseDrop { local }),\n+                None => None,\n+            };\n         }\n     }\n }"}, {"sha": "91598d86c79c134bba52c72c89d3f25c76b7db12", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a13e4aea81a224c5c008dda22ae953bd26295d71/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13e4aea81a224c5c008dda22ae953bd26295d71/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=a13e4aea81a224c5c008dda22ae953bd26295d71", "patch": "@@ -279,9 +279,10 @@ impl<V: Idx> LivenessResult<V> {\n pub enum DefUse {\n     Def,\n     Use,\n+    Drop,\n }\n \n-pub fn categorize<'tcx>(context: PlaceContext<'tcx>, mode: LivenessMode) -> Option<DefUse> {\n+pub fn categorize<'tcx>(context: PlaceContext<'tcx>) -> Option<DefUse> {\n     match context {\n         ///////////////////////////////////////////////////////////////////////////\n         // DEFS\n@@ -322,13 +323,8 @@ pub fn categorize<'tcx>(context: PlaceContext<'tcx>, mode: LivenessMode) -> Opti\n         PlaceContext::Inspect |\n         PlaceContext::Copy |\n         PlaceContext::Move |\n-        PlaceContext::Validate => {\n-            if mode.include_regular_use {\n-                Some(DefUse::Use)\n-            } else {\n-                None\n-            }\n-        }\n+        PlaceContext::Validate =>\n+            Some(DefUse::Use),\n \n         ///////////////////////////////////////////////////////////////////////////\n         // DROP USES\n@@ -338,13 +334,8 @@ pub fn categorize<'tcx>(context: PlaceContext<'tcx>, mode: LivenessMode) -> Opti\n         // uses in drop are special because `#[may_dangle]`\n         // attributes can affect whether lifetimes must be live.\n \n-        PlaceContext::Drop => {\n-            if mode.include_drops {\n-                Some(DefUse::Use)\n-            } else {\n-                None\n-            }\n-        }\n+        PlaceContext::Drop =>\n+            Some(DefUse::Drop),\n     }\n }\n \n@@ -434,10 +425,11 @@ where\n {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n         if let Some(v_index) = self.map.from_local(local) {\n-            match categorize(context, self.mode) {\n+            match categorize(context) {\n                 Some(DefUse::Def) => self.defs_uses.add_def(v_index),\n-                Some(DefUse::Use) => self.defs_uses.add_use(v_index),\n-                None => (),\n+                Some(DefUse::Use) if self.mode.include_regular_use => self.defs_uses.add_use(v_index),\n+                Some(DefUse::Drop) if self.mode.include_drops => self.defs_uses.add_use(v_index),\n+                _ => (),\n             }\n         }\n     }"}]}