{"sha": "10ecb11ff569e37c588b35861065191ad607b0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZWNiMTFmZjU2OWUzN2M1ODhiMzU4NjEwNjUxOTFhZDYwN2IwYmI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-13T23:59:28Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-13T23:59:28Z"}, "message": "Error out non single root token tree conversion", "tree": {"sha": "c2162b33191036fb2dc64b1067486b3fc06281a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2162b33191036fb2dc64b1067486b3fc06281a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ecb11ff569e37c588b35861065191ad607b0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ecb11ff569e37c588b35861065191ad607b0bb", "html_url": "https://github.com/rust-lang/rust/commit/10ecb11ff569e37c588b35861065191ad607b0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ecb11ff569e37c588b35861065191ad607b0bb/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22614f0b500c351d3abf33a4ed6beaea6861bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22614f0b500c351d3abf33a4ed6beaea6861bca", "html_url": "https://github.com/rust-lang/rust/commit/b22614f0b500c351d3abf33a4ed6beaea6861bca"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "5e6a6f2a1363a9dbefae688d13fdfab60aee87bc", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/10ecb11ff569e37c588b35861065191ad607b0bb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ecb11ff569e37c588b35861065191ad607b0bb/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=10ecb11ff569e37c588b35861065191ad607b0bb", "patch": "@@ -50,6 +50,10 @@ pub fn token_tree_to_expr(tt: &tt::Subtree) -> Result<TreeArc<ast::Expr>, Expand\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_expr(&token_source, &mut tree_sink);\n+    if tree_sink.roots.len() != 1 {\n+        return Err(ExpandError::ConversionError);\n+    }\n+\n     let syntax = tree_sink.inner.finish();\n     ast::Expr::cast(&syntax)\n         .map(|m| m.to_owned())\n@@ -61,6 +65,10 @@ pub fn token_tree_to_pat(tt: &tt::Subtree) -> Result<TreeArc<ast::Pat>, ExpandEr\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_pat(&token_source, &mut tree_sink);\n+    if tree_sink.roots.len() != 1 {\n+        return Err(ExpandError::ConversionError);\n+    }\n+\n     let syntax = tree_sink.inner.finish();\n     ast::Pat::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n@@ -70,6 +78,9 @@ pub fn token_tree_to_ty(tt: &tt::Subtree) -> Result<TreeArc<ast::TypeRef>, Expan\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_ty(&token_source, &mut tree_sink);\n+    if tree_sink.roots.len() != 1 {\n+        return Err(ExpandError::ConversionError);\n+    }\n     let syntax = tree_sink.inner.finish();\n     ast::TypeRef::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n@@ -81,6 +92,9 @@ pub fn token_tree_to_macro_stmts(\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_macro_stmts(&token_source, &mut tree_sink);\n+    if tree_sink.roots.len() != 1 {\n+        return Err(ExpandError::ConversionError);\n+    }\n     let syntax = tree_sink.inner.finish();\n     ast::MacroStmts::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n@@ -92,6 +106,9 @@ pub fn token_tree_to_macro_items(\n     let token_source = SubtreeTokenSource::new(tt);\n     let mut tree_sink = TtTreeSink::new(token_source.querier());\n     ra_parser::parse_macro_items(&token_source, &mut tree_sink);\n+    if tree_sink.roots.len() != 1 {\n+        return Err(ExpandError::ConversionError);\n+    }\n     let syntax = tree_sink.inner.finish();\n     ast::MacroItems::cast(&syntax).map(|m| m.to_owned()).ok_or_else(|| ExpandError::ConversionError)\n }\n@@ -268,6 +285,10 @@ struct TtTreeSink<'a, Q: Querier> {\n     text_pos: TextUnit,\n     token_pos: usize,\n     inner: SyntaxTreeBuilder,\n+\n+    // Number of roots\n+    // Use for detect ill-form tree which is not single root\n+    roots: smallvec::SmallVec<[usize; 1]>,\n }\n \n impl<'a, Q: Querier> TtTreeSink<'a, Q> {\n@@ -278,6 +299,7 @@ impl<'a, Q: Querier> TtTreeSink<'a, Q> {\n             text_pos: 0.into(),\n             token_pos: 0,\n             inner: SyntaxTreeBuilder::default(),\n+            roots: smallvec::SmallVec::new(),\n         }\n     }\n }\n@@ -323,10 +345,16 @@ impl<'a, Q: Querier> TreeSink for TtTreeSink<'a, Q> {\n \n     fn start_node(&mut self, kind: SyntaxKind) {\n         self.inner.start_node(kind);\n+\n+        match self.roots.last_mut() {\n+            None | Some(0) => self.roots.push(1),\n+            Some(ref mut n) => **n += 1,\n+        };\n     }\n \n     fn finish_node(&mut self) {\n         self.inner.finish_node();\n+        *self.roots.last_mut().unwrap() -= 1;\n     }\n \n     fn error(&mut self, error: ParseError) {\n@@ -375,4 +403,22 @@ mod tests {\n         assert_eq!(query.token(2 + 15 + 3).1, \"\\\"rust1\\\"\");\n         assert_eq!(query.token(2 + 15 + 3).0, STRING);\n     }\n+\n+    #[test]\n+    fn stmts_token_trees_to_expr_is_err() {\n+        let rules = create_rules(\n+            r#\"\n+            macro_rules! stmts {\n+                () => {\n+                    let a = 0;\n+                    let b = 0;\n+                    let c = 0;\n+                    let d = 0;\n+                }\n+            }\n+            \"#,\n+        );\n+        let expansion = expand(&rules, \"stmts!()\");\n+        assert!(token_tree_to_expr(&expansion).is_err());\n+    }\n }"}]}