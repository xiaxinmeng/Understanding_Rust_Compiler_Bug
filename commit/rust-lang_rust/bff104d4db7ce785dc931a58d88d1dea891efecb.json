{"sha": "bff104d4db7ce785dc931a58d88d1dea891efecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZjEwNGQ0ZGI3Y2U3ODVkYzkzMWE1OGQ4OGQxZGVhODkxZWZlY2I=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-12T20:00:44Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-08-12T20:00:44Z"}, "message": "Remove unused tcx parameter", "tree": {"sha": "a517c97b09bbc4783ec373ac5fe1a6be6e8eebf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a517c97b09bbc4783ec373ac5fe1a6be6e8eebf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff104d4db7ce785dc931a58d88d1dea891efecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff104d4db7ce785dc931a58d88d1dea891efecb", "html_url": "https://github.com/rust-lang/rust/commit/bff104d4db7ce785dc931a58d88d1dea891efecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff104d4db7ce785dc931a58d88d1dea891efecb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2", "html_url": "https://github.com/rust-lang/rust/commit/1275cc15d6aa0597f0b3bbf8aa0750239f9da7b2"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "1839e1af45eeff7d004dc1bacc5efbacec42a89e", "filename": "src/librustc_query_system/query/caches.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bff104d4db7ce785dc931a58d88d1dea891efecb/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff104d4db7ce785dc931a58d88d1dea891efecb/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs?ref=bff104d4db7ce785dc931a58d88d1dea891efecb", "patch": "@@ -43,9 +43,8 @@ pub trait QueryCache: QueryStorage {\n         OnHit: FnOnce(&Self::Stored, DepNodeIndex) -> R,\n         OnMiss: FnOnce(Self::Key, QueryLookup<'_, CTX, Self::Key, Self::Sharded>) -> R;\n \n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        tcx: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: Self::Key,\n         value: Self::Value,\n@@ -112,9 +111,8 @@ impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n     }\n \n     #[inline]\n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: K,\n         value: V,\n@@ -195,9 +193,8 @@ impl<'tcx, K: Eq + Hash, V: 'tcx> QueryCache for ArenaCache<'tcx, K, V> {\n     }\n \n     #[inline]\n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: K,\n         value: V,"}, {"sha": "ae042cc808126bec5a2085fd74399789368d412a", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bff104d4db7ce785dc931a58d88d1dea891efecb/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff104d4db7ce785dc931a58d88d1dea891efecb/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=bff104d4db7ce785dc931a58d88d1dea891efecb", "patch": "@@ -264,7 +264,7 @@ where\n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     #[inline(always)]\n-    fn complete(self, tcx: CTX, result: C::Value, dep_node_index: DepNodeIndex) -> C::Stored {\n+    fn complete(self, result: C::Value, dep_node_index: DepNodeIndex) -> C::Stored {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n         let state = self.state;\n@@ -278,7 +278,7 @@ where\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            let result = state.cache.complete(tcx, &mut lock.cache, key, result, dep_node_index);\n+            let result = state.cache.complete(&mut lock.cache, key, result, dep_node_index);\n             (job, result)\n         };\n \n@@ -432,7 +432,7 @@ where\n             tcx.store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n         }\n \n-        return job.complete(tcx, result, dep_node_index);\n+        return job.complete(result, dep_node_index);\n     }\n \n     let dep_node = query.to_dep_node(tcx, &key);\n@@ -458,7 +458,7 @@ where\n             })\n         });\n         if let Some((result, dep_node_index)) = loaded {\n-            return job.complete(tcx, result, dep_node_index);\n+            return job.complete(result, dep_node_index);\n         }\n     }\n \n@@ -609,7 +609,7 @@ where\n         }\n     }\n \n-    let result = job.complete(tcx, result, dep_node_index);\n+    let result = job.complete(result, dep_node_index);\n \n     (result, dep_node_index)\n }"}]}