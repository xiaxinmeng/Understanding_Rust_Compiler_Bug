{"sha": "5d428cae7d5926d5b53098436ebcc53d0dadb228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNDI4Y2FlN2Q1OTI2ZDViNTMwOTg0MzZlYmNjNTNkMGRhZGIyMjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-21T18:44:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-21T18:44:11Z"}, "message": "Rollup merge of #79182 - lochsh:78777-fix-extern-types-ref, r=jyn514\n\nFix links to extern types in rustdoc (fixes #78777)\n\n r? `@jyn514`\n Fixes #78777.\nThe initial fix we tried was:\n```diff\ndiff --git a/src/librustdoc/passes/collect_intra_doc_links.rs b/src/librustdoc/passes/collect_intra_doc_links.rs\nindex 8be9482acff..c4b7086fdb1 100644\n--- a/src/librustdoc/passes/collect_intra_doc_links.rs\n+++ b/src/librustdoc/passes/collect_intra_doc_links.rs\n`@@` -433,8 +433,9 `@@` impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             Res::PrimTy(prim) => Some(\n                 self.resolve_primitive_associated_item(prim, ns, module_id, item_name, item_str),\n             ),\n-            Res::Def(DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias, did) => {\n+            Res::Def(kind, did) if kind.ns() == Some(Namespace::TypeNS) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);\n+\n                 // Checks if item_name belongs to `impl SomeItem`\n                 let assoc_item = cx\n                     .tcx\n```\n\nHowever, this caused traits to be matched, resulting in a panic when `resolve_associated_trait_item` is called further down in this function.\n\nThis PR also adds an error message for that panic. Currently it will look something like:\n```rust\nthread 'rustc' panicked at 'Not a type: DefIndex(8624)', compiler/rustc_metadata/src/rmeta/decoder.rs:951:32\n```\nI wasn't sure how to get a better debug output than `DefIndex(...)`, and am open to suggestions.", "tree": {"sha": "85d6f8137b78cb67dcdf4555e84923eba9fda927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d6f8137b78cb67dcdf4555e84923eba9fda927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d428cae7d5926d5b53098436ebcc53d0dadb228", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfuV/8CRBK7hj4Ov3rIwAAdHIIABHHSbRJwZ5SKAWF+sM+ieDR\nhO/Ewwg0LcNGuyIr8qrC227MaScVfU6UHCJE6m+LJOFb8TbAWKK08v7DVwMNdfHA\nqQjpZqJIHJ9I3KTGzuN3DOoAwIdg1qGIHiPp+1pJQmB3fGZ91IN4qTnO1PeH6AqE\nYu0fmKSNDMLGmtK0rtu5kEXtX8HiHDk0oB8HOd1JxqmxHc32ZVtiDZz1kvn4maDQ\nCKyQLRwm8jSwA+lxgzevMYllMZTR4bRrVUARYOhteFZWaAFrBdWrly7I1QTEpi6T\n4dy1TCALbtF9pw3LslOalPKC2LK/SAA6kuib/1+5foG8g4BgUGfB3Lwp/3hBPb4=\n=9tY/\n-----END PGP SIGNATURE-----\n", "payload": "tree 85d6f8137b78cb67dcdf4555e84923eba9fda927\nparent 426835762bd757cb21001598fe6aa701e59bd354\nparent 32cd4bc790ae8a4b0d7105e2a70de90616a5a621\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605984251 +0100\ncommitter GitHub <noreply@github.com> 1605984251 +0100\n\nRollup merge of #79182 - lochsh:78777-fix-extern-types-ref, r=jyn514\n\nFix links to extern types in rustdoc (fixes #78777)\n\n r? `@jyn514`\n Fixes #78777.\nThe initial fix we tried was:\n```diff\ndiff --git a/src/librustdoc/passes/collect_intra_doc_links.rs b/src/librustdoc/passes/collect_intra_doc_links.rs\nindex 8be9482acff..c4b7086fdb1 100644\n--- a/src/librustdoc/passes/collect_intra_doc_links.rs\n+++ b/src/librustdoc/passes/collect_intra_doc_links.rs\n`@@` -433,8 +433,9 `@@` impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             Res::PrimTy(prim) => Some(\n                 self.resolve_primitive_associated_item(prim, ns, module_id, item_name, item_str),\n             ),\n-            Res::Def(DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias, did) => {\n+            Res::Def(kind, did) if kind.ns() == Some(Namespace::TypeNS) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);\n+\n                 // Checks if item_name belongs to `impl SomeItem`\n                 let assoc_item = cx\n                     .tcx\n```\n\nHowever, this caused traits to be matched, resulting in a panic when `resolve_associated_trait_item` is called further down in this function.\n\nThis PR also adds an error message for that panic. Currently it will look something like:\n```rust\nthread 'rustc' panicked at 'Not a type: DefIndex(8624)', compiler/rustc_metadata/src/rmeta/decoder.rs:951:32\n```\nI wasn't sure how to get a better debug output than `DefIndex(...)`, and am open to suggestions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d428cae7d5926d5b53098436ebcc53d0dadb228", "html_url": "https://github.com/rust-lang/rust/commit/5d428cae7d5926d5b53098436ebcc53d0dadb228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d428cae7d5926d5b53098436ebcc53d0dadb228/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "426835762bd757cb21001598fe6aa701e59bd354", "url": "https://api.github.com/repos/rust-lang/rust/commits/426835762bd757cb21001598fe6aa701e59bd354", "html_url": "https://github.com/rust-lang/rust/commit/426835762bd757cb21001598fe6aa701e59bd354"}, {"sha": "32cd4bc790ae8a4b0d7105e2a70de90616a5a621", "url": "https://api.github.com/repos/rust-lang/rust/commits/32cd4bc790ae8a4b0d7105e2a70de90616a5a621", "html_url": "https://github.com/rust-lang/rust/commit/32cd4bc790ae8a4b0d7105e2a70de90616a5a621"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "19340dd51de14219dfa4d11a806224ec98439f6c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d428cae7d5926d5b53098436ebcc53d0dadb228/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d428cae7d5926d5b53098436ebcc53d0dadb228/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=5d428cae7d5926d5b53098436ebcc53d0dadb228", "patch": "@@ -947,7 +947,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_type(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        self.root.tables.ty.get(self, id).unwrap().decode((self, tcx))\n+        self.root\n+            .tables\n+            .ty\n+            .get(self, id)\n+            .unwrap_or_else(|| panic!(\"Not a type: {:?}\", id))\n+            .decode((self, tcx))\n     }\n \n     fn get_stability(&self, id: DefIndex) -> Option<attr::Stability> {"}, {"sha": "fd09ba04b3db92fdac4e636827ca3cac0c73bbae", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d428cae7d5926d5b53098436ebcc53d0dadb228/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d428cae7d5926d5b53098436ebcc53d0dadb228/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5d428cae7d5926d5b53098436ebcc53d0dadb228", "patch": "@@ -492,7 +492,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             Res::PrimTy(prim) => Some(\n                 self.resolve_primitive_associated_item(prim, ns, module_id, item_name, item_str),\n             ),\n-            Res::Def(DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::TyAlias, did) => {\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::Enum\n+                | DefKind::TyAlias\n+                | DefKind::ForeignTy,\n+                did,\n+            ) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);\n                 // Checks if item_name belongs to `impl SomeItem`\n                 let assoc_item = cx"}, {"sha": "418e0d91ea7ef8afa16d94071f67ff30caf354c1", "filename": "src/test/rustdoc/intra-link-extern-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d428cae7d5926d5b53098436ebcc53d0dadb228/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d428cae7d5926d5b53098436ebcc53d0dadb228/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-extern-type.rs?ref=5d428cae7d5926d5b53098436ebcc53d0dadb228", "patch": "@@ -0,0 +1,18 @@\n+#![feature(extern_types)]\n+\n+extern {\n+    pub type ExternType;\n+}\n+\n+impl ExternType {\n+    pub fn f(&self) {\n+\n+    }\n+}\n+\n+// @has 'intra_link_extern_type/foreigntype.ExternType.html'\n+// @has 'intra_link_extern_type/fn.links_to_extern_type.html' \\\n+// 'href=\"../intra_link_extern_type/foreigntype.ExternType.html#method.f\"'\n+/// See also [ExternType::f]\n+pub fn links_to_extern_type() {\n+}"}]}