{"sha": "26e547af5d2d98c9e85770ac53217ad0f8b24999", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTU0N2FmNWQyZDk4YzllODU3NzBhYzUzMjE3YWQwZjhiMjQ5OTk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-15T01:59:41Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-10-16T15:15:34Z"}, "message": "libsyntax: Remove all uses of {:?}.", "tree": {"sha": "fff6de512fe69b88be68e19b28a57b8b3c1e51f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff6de512fe69b88be68e19b28a57b8b3c1e51f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e547af5d2d98c9e85770ac53217ad0f8b24999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e547af5d2d98c9e85770ac53217ad0f8b24999", "html_url": "https://github.com/rust-lang/rust/commit/26e547af5d2d98c9e85770ac53217ad0f8b24999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e547af5d2d98c9e85770ac53217ad0f8b24999/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38aca17c474321e4c260e36f173275a90d753397", "url": "https://api.github.com/repos/rust-lang/rust/commits/38aca17c474321e4c260e36f173275a90d753397", "html_url": "https://github.com/rust-lang/rust/commit/38aca17c474321e4c260e36f173275a90d753397"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "fd41666275b502c474b5bb85752150818b44223a", "filename": "mk/crates.mk", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -51,7 +51,7 @@\n \n TARGET_CRATES := libc std green native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n-                 url log regex graphviz core rbml rlibc alloc debug rustrt \\\n+                 url log regex graphviz core rbml rlibc alloc rustrt \\\n                  unicode\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros \\\n \t       rustc_llvm rustc_back\n@@ -63,20 +63,19 @@ DEPS_libc := core\n DEPS_rlibc := core\n DEPS_unicode := core\n DEPS_alloc := core libc native:jemalloc\n-DEPS_debug := std\n DEPS_rustrt := alloc core libc collections native:rustrt_native\n DEPS_std := core libc rand alloc collections rustrt sync unicode \\\n \tnative:rust_builtin native:backtrace\n DEPS_graphviz := std\n DEPS_green := std native:context_switch\n DEPS_native := std\n-DEPS_syntax := std term serialize log fmt_macros debug arena libc\n+DEPS_syntax := std term serialize log fmt_macros arena libc\n DEPS_rustc := syntax flate arena serialize getopts rbml \\\n-              time log graphviz debug rustc_llvm rustc_back\n+              time log graphviz rustc_llvm rustc_back\n DEPS_rustc_llvm := native:rustllvm libc std\n DEPS_rustc_back := std syntax rustc_llvm flate log libc\n DEPS_rustdoc := rustc native:hoedown serialize getopts \\\n-                test time debug\n+                test time\n DEPS_flate := std native:miniz\n DEPS_arena := std\n DEPS_graphviz := std"}, {"sha": "df63d161eec35bc77b1dc5516ee9ba569ddb29fa", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -81,7 +81,7 @@ impl PartialEq for Ident {\n             // one example and its non-hygienic counterpart would be:\n             //      syntax::parse::token::mtwt_token_eq\n             //      syntax::ext::tt::macro_parser::token_name_eq\n-            fail!(\"not allowed to compare these idents: {:?}, {:?}. \\\n+            fail!(\"not allowed to compare these idents: {}, {}. \\\n                    Probably related to issue \\\\#6993\", self, other);\n         }\n     }"}, {"sha": "fb5373cee00403c84babe4c7138fba7112a548df", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -96,6 +96,7 @@ pub fn path_to_string<PI: Iterator<PathElem>>(mut path: PI) -> String {\n     }).to_string()\n }\n \n+#[deriving(Show)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),\n@@ -387,7 +388,7 @@ impl<'ast> Map<'ast> {\n                                 PathName(ident.name)\n                             }\n                             MethMac(_) => {\n-                                fail!(\"no path elem for {:?}\", node)\n+                                fail!(\"no path elem for {}\", node)\n                             }\n                         }\n                     }\n@@ -401,13 +402,13 @@ impl<'ast> Map<'ast> {\n                         MethDecl(ident, _, _, _, _, _, _, _) => {\n                             PathName(ident.name)\n                         }\n-                        MethMac(_) => fail!(\"no path elem for {:?}\", node),\n+                        MethMac(_) => fail!(\"no path elem for {}\", node),\n                     }\n                 }\n                 TypeTraitItem(ref m) => PathName(m.ident.name),\n             },\n             NodeVariant(v) => PathName(v.node.name.name),\n-            _ => fail!(\"no path elem for {:?}\", node)\n+            _ => fail!(\"no path elem for {}\", node)\n         }\n     }\n "}, {"sha": "726aceb5819b6640aaa81c131815013a94ca9eed", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -308,7 +308,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[deriving(Encodable, Decodable)]\n+#[deriving(Encodable, Decodable, Show)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "c792d4b99eefbcc524bb640fbf21afec66bab4c2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -1700,11 +1700,11 @@ foo_module!()\n         }).enumerate() {\n             if mtwt::resolve(v.segments.get(0).identifier) != resolved_binding {\n                 println!(\"uh oh, xx binding didn't match xx varref:\");\n-                println!(\"this is xx varref \\\\# {:?}\",idx);\n-                println!(\"binding: {:?}\",cxbind);\n-                println!(\"resolves to: {:?}\",resolved_binding);\n-                println!(\"varref: {:?}\",v.segments.get(0).identifier);\n-                println!(\"resolves to: {:?}\",\n+                println!(\"this is xx varref \\\\# {}\", idx);\n+                println!(\"binding: {}\", cxbind);\n+                println!(\"resolves to: {}\", resolved_binding);\n+                println!(\"varref: {}\", v.segments.get(0).identifier);\n+                println!(\"resolves to: {}\",\n                          mtwt::resolve(v.segments.get(0).identifier));\n                 mtwt::with_sctable(|x| mtwt::display_sctable(x));\n             }"}, {"sha": "523299abce141eabbd9d73856b4e349b52ee5405", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -38,7 +38,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[deriving(PartialEq, Encodable, Decodable, Hash)]\n+#[deriving(PartialEq, Encodable, Decodable, Hash, Show)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),\n@@ -129,7 +129,7 @@ fn new_sctable_internal() -> SCTable {\n pub fn display_sctable(table: &SCTable) {\n     error!(\"SC table:\");\n     for (idx,val) in table.table.borrow().iter().enumerate() {\n-        error!(\"{:4u} : {:?}\",idx,val);\n+        error!(\"{:4u} : {}\",idx,val);\n     }\n }\n "}, {"sha": "2eb3b398da81548afcc05c2639599c7d96f183f8", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -1389,7 +1389,7 @@ mod test {\n                 let a_val = $a;\n                 let b_val = $b;\n                 if !(pred_val(a_val.as_slice(),b_val.as_slice())) {\n-                    fail!(\"expected args satisfying {}, got {:?} and {:?}\",\n+                    fail!(\"expected args satisfying {}, got {} and {}\",\n                           $predname, a_val, b_val);\n                 }\n             }"}, {"sha": "17dd546ad59d1d46d1f067b56ff78d4f17834767", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -63,7 +63,7 @@ impl<'a> ParserAttr for Parser<'a> {\n     /// If permit_inner is true, then a leading `!` indicates an inner\n     /// attribute\n     fn parse_attribute(&mut self, permit_inner: bool) -> ast::Attribute {\n-        debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n+        debug!(\"parse_attributes: permit_inner={} self.token={}\",\n                permit_inner, self.token);\n         let (span, value, mut style) = match self.token {\n             token::POUND => {"}, {"sha": "c4a8775a0128278f99ee064a0615f05e38729277", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -823,19 +823,19 @@ mod test {\n                                 }\n                             },\n                             _ => {\n-                                error!(\"failing value 3: {:?}\",first_set);\n+                                error!(\"failing value 3: {}\",first_set);\n                                 assert_eq!(\"wrong 3\",\"correct\")\n                             }\n                         }\n                     },\n                     _ => {\n-                        error!(\"failing value 2: {:?}\",delim_elts);\n+                        error!(\"failing value 2: {}\",delim_elts);\n                         assert_eq!(\"wrong\",\"correct\");\n                     }\n                 }\n             },\n             _ => {\n-                error!(\"failing value: {:?}\",tts);\n+                error!(\"failing value: {}\",tts);\n                 assert_eq!(\"wrong 1\",\"correct\");\n             }\n         }"}, {"sha": "7e77283cca77850f281e1cb1fab5adfefaccbca2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e547af5d2d98c9e85770ac53217ad0f8b24999/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=26e547af5d2d98c9e85770ac53217ad0f8b24999", "patch": "@@ -492,7 +492,7 @@ impl<'a> Parser<'a> {\n     /// followed by some token from the set edible + inedible.  Recover\n     /// from anticipated input errors, discarding erroneous characters.\n     pub fn commit_expr(&mut self, e: &Expr, edible: &[token::Token], inedible: &[token::Token]) {\n-        debug!(\"commit_expr {:?}\", e);\n+        debug!(\"commit_expr {}\", e);\n         match e.node {\n             ExprPath(..) => {\n                 // might be unit-struct construction; check for recoverableinput error.\n@@ -1535,7 +1535,7 @@ impl<'a> Parser<'a> {\n             // TYPE TO BE INFERRED\n             TyInfer\n         } else {\n-            let msg = format!(\"expected type, found token {:?}\", self.token);\n+            let msg = format!(\"expected type, found token {}\", self.token);\n             self.fatal(msg.as_slice());\n         };\n \n@@ -1591,7 +1591,7 @@ impl<'a> Parser<'a> {\n     /// identifier names.\n     pub fn parse_arg_general(&mut self, require_name: bool) -> Arg {\n         let pat = if require_name || self.is_named_argument() {\n-            debug!(\"parse_arg_general parse_pat (require_name:{:?})\",\n+            debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n             let pat = self.parse_pat();\n \n@@ -1882,7 +1882,7 @@ impl<'a> Parser<'a> {\n                 token::BINOP(token::SHR) => { return res; }\n                 _ => {\n                     let msg = format!(\"expected `,` or `>` after lifetime \\\n-                                      name, got: {:?}\",\n+                                      name, got: {}\",\n                                       self.token);\n                     self.fatal(msg.as_slice());\n                 }\n@@ -4711,7 +4711,7 @@ impl<'a> Parser<'a> {\n                 attrs = attrs_remaining.clone().append(attrs.as_slice());\n                 first = false;\n             }\n-            debug!(\"parse_mod_items: parse_item_or_view_item(attrs={:?})\",\n+            debug!(\"parse_mod_items: parse_item_or_view_item(attrs={})\",\n                    attrs);\n             match self.parse_item_or_view_item(attrs,\n                                                true /* macros allowed */) {"}]}