{"sha": "ced5c2d08af52de40d104687c2b6066d9daedecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDVjMmQwOGFmNTJkZTQwZDEwNDY4N2MyYjYwNjZkOWRhZWRlY2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-10T21:33:45Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-24T22:33:13Z"}, "message": "Add \"Shallow\" borrow kind\n\nThis allows treating the \"fake\" match borrows differently from shared\nborrows.", "tree": {"sha": "6c658a0c77354f47de7b52c96d3150ecc644a619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c658a0c77354f47de7b52c96d3150ecc644a619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced5c2d08af52de40d104687c2b6066d9daedecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced5c2d08af52de40d104687c2b6066d9daedecf", "html_url": "https://github.com/rust-lang/rust/commit/ced5c2d08af52de40d104687c2b6066d9daedecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced5c2d08af52de40d104687c2b6066d9daedecf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a072d1bca6282d1d2fbec103d12393527eb5a868", "url": "https://api.github.com/repos/rust-lang/rust/commits/a072d1bca6282d1d2fbec103d12393527eb5a868", "html_url": "https://github.com/rust-lang/rust/commit/a072d1bca6282d1d2fbec103d12393527eb5a868"}], "stats": {"total": 124, "additions": 102, "deletions": 22}, "files": [{"sha": "e145e87a0890753330c4bdb733d5b1195d2f545b", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -46,6 +46,7 @@ for mir::BorrowKind {\n \n         match *self {\n             mir::BorrowKind::Shared |\n+            mir::BorrowKind::Shallow |\n             mir::BorrowKind::Unique => {}\n             mir::BorrowKind::Mut { allow_two_phase_borrow } => {\n                 allow_two_phase_borrow.hash_stable(hcx, hasher);"}, {"sha": "21c2299eac035901145240da5020700111e3b6af", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -456,6 +456,27 @@ pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     Shared,\n \n+    /// The immediately borrowed place must be immutable, but projections from\n+    /// it don't need to be. For example, a shallow borrow of `a.b` doesn't\n+    /// conflict with a mutable borrow of `a.b.c`.\n+    ///\n+    /// This is used when lowering matches: when matching on a place we want to\n+    /// ensure that place have the same value from the start of the match until\n+    /// an arm is selected. This prevents this code from compiling:\n+    ///\n+    ///     let mut x = &Some(0);\n+    ///     match *x {\n+    ///         None => (),\n+    ///         Some(_) if { x = &None; false } => (),\n+    ///         Some(_) => (),\n+    ///     }\n+    ///\n+    /// This can't be a shared borrow because mutably borrowing (*x as Some).0\n+    /// should not prevent `if let None = x { ... }`, for example, becase the\n+    /// mutating `(*x as Some).0` can't affect the discriminant of `x`.\n+    /// We can also report errors with this kind of borrow differently.\n+    Shallow,\n+\n     /// Data must be immutable but not aliasable.  This kind of borrow\n     /// cannot currently be expressed by the user and is used only in\n     /// implicit closure bindings. It is needed when the closure is\n@@ -504,7 +525,7 @@ pub enum BorrowKind {\n impl BorrowKind {\n     pub fn allows_two_phase_borrow(&self) -> bool {\n         match *self {\n-            BorrowKind::Shared | BorrowKind::Unique => false,\n+            BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => false,\n             BorrowKind::Mut {\n                 allow_two_phase_borrow,\n             } => allow_two_phase_borrow,\n@@ -2198,6 +2219,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             Ref(region, borrow_kind, ref place) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n+                    BorrowKind::Shallow => \"shallow \",\n                     BorrowKind::Mut { .. } | BorrowKind::Unique => \"mut \",\n                 };\n "}, {"sha": "2a25e057a71493ef7bcb65298ba6393b4e72ee2b", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -287,6 +287,10 @@ impl BorrowKind {\n             // use `&mut`. It gives all the capabilities of an `&uniq`\n             // and hence is a safe \"over approximation\".\n             BorrowKind::Unique => hir::MutMutable,\n+\n+            // We have no type corresponding to a shallow borrow, so use\n+            // `&` as an approximation.\n+            BorrowKind::Shallow => hir::MutImmutable,\n         }\n     }\n }"}, {"sha": "6de7e2215bf41bb426530d7f522f81871ccba221", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -963,6 +963,7 @@ impl<'tcx> PlaceContext<'tcx> {\n \n             PlaceContext::Inspect |\n             PlaceContext::Borrow { kind: BorrowKind::Shared, .. } |\n+            PlaceContext::Borrow { kind: BorrowKind::Shallow, .. } |\n             PlaceContext::Borrow { kind: BorrowKind::Unique, .. } |\n             PlaceContext::Projection(Mutability::Not) |\n             PlaceContext::Copy | PlaceContext::Move |\n@@ -974,7 +975,9 @@ impl<'tcx> PlaceContext<'tcx> {\n     /// Returns true if this place context represents a use that does not change the value.\n     pub fn is_nonmutating_use(&self) -> bool {\n         match *self {\n-            PlaceContext::Inspect | PlaceContext::Borrow { kind: BorrowKind::Shared, .. } |\n+            PlaceContext::Inspect |\n+            PlaceContext::Borrow { kind: BorrowKind::Shared, .. } |\n+            PlaceContext::Borrow { kind: BorrowKind::Shallow, .. } |\n             PlaceContext::Borrow { kind: BorrowKind::Unique, .. } |\n             PlaceContext::Projection(Mutability::Not) |\n             PlaceContext::Copy | PlaceContext::Move => true,"}, {"sha": "bcf377221301498b5b98a3853350ea82e242ae1b", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -87,6 +87,7 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n     fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n         let kind = match self.kind {\n             mir::BorrowKind::Shared => \"\",\n+            mir::BorrowKind::Shallow => \"shallow \",\n             mir::BorrowKind::Unique => \"uniq \",\n             mir::BorrowKind::Mut { .. } => \"mut \",\n         };\n@@ -287,7 +288,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n                     borrow_data.activation_location = match context {\n                         // The use of TMP in a shared borrow does not\n                         // count as an actual activation.\n-                        PlaceContext::Borrow { kind: mir::BorrowKind::Shared, .. } => {\n+                        PlaceContext::Borrow { kind: mir::BorrowKind::Shared, .. }\n+                        | PlaceContext::Borrow { kind: mir::BorrowKind::Shallow, .. } => {\n                             TwoPhaseActivation::NotActivated\n                         }\n                         _ => {"}, {"sha": "f0dd8a9feb8e1398adba186a27d6e40f2c733755", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -333,6 +333,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Origin::Mir,\n                 ),\n \n+            (BorrowKind::Mut { .. }, _, _, BorrowKind::Shallow, _, _)\n+            | (BorrowKind::Unique, _, _, BorrowKind::Shallow, _, _) => {\n+                return;\n+            }\n+\n             (BorrowKind::Unique, _, _, _, _, _) => tcx.cannot_uniquely_borrow_by_one_closure(\n                 span,\n                 &desc_place,"}, {"sha": "34fe9408eafc38893181a47588e4ac15b19c3fe3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -755,6 +755,7 @@ use self::AccessDepth::{Deep, Shallow};\n enum ArtificialField {\n     Discriminant,\n     ArrayLength,\n+    ShallowBorrow,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -972,7 +973,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared) => {\n+                (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared)\n+                | (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow) => {\n+                    Control::Continue\n+                }\n+\n+                (Write(WriteKind::Move), BorrowKind::Shallow) => {\n+                    // Handled by initialization checks.\n                     Control::Continue\n                 }\n \n@@ -1108,6 +1115,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         match *rvalue {\n             Rvalue::Ref(_ /*rgn*/, bk, ref place) => {\n                 let access_kind = match bk {\n+                    BorrowKind::Shallow => {\n+                        (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))\n+                    },\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n@@ -1315,11 +1325,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             return;\n         }\n \n-        // FIXME: replace this with a proper borrow_conflicts_with_place when\n-        // that is merged.\n         let sd = if might_be_alive { Deep } else { Shallow(None) };\n \n-        if places_conflict::places_conflict(self.infcx.tcx, self.mir, place, root_place, sd) {\n+        if places_conflict::borrow_conflicts_with_place(\n+            self.infcx.tcx,\n+            self.mir,\n+            place,\n+            borrow.kind,\n+            root_place,\n+            sd\n+        ) {\n             debug!(\"check_for_invalidation_at_exit({:?}): INVALID\", place);\n             // FIXME: should be talking about the region lifetime instead\n             // of just a span here.\n@@ -1369,7 +1384,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             // only mutable borrows should be 2-phase\n             assert!(match borrow.kind {\n-                BorrowKind::Shared => false,\n+                BorrowKind::Shared | BorrowKind::Shallow => false,\n                 BorrowKind::Unique | BorrowKind::Mut { .. } => true,\n             });\n \n@@ -1669,7 +1684,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let is_local_mutation_allowed = match borrow_kind {\n                     BorrowKind::Unique => LocalMutationIsAllowed::Yes,\n                     BorrowKind::Mut { .. } => is_local_mutation_allowed,\n-                    BorrowKind::Shared => unreachable!(),\n+                    BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),\n                 };\n                 match self.is_mutable(place, is_local_mutation_allowed) {\n                     Ok(root_place) => {\n@@ -1699,8 +1714,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             | Write(wk @ WriteKind::Move)\n             | Reservation(wk @ WriteKind::StorageDeadOrDrop)\n             | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shallow))\n             | Write(wk @ WriteKind::StorageDeadOrDrop)\n-            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n+            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shallow)) => {\n                 if let Err(_place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     if self.infcx.tcx.migrate_borrowck() {\n                         // rust-lang/rust#46908: In pure NLL mode this\n@@ -1743,6 +1760,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Read(ReadKind::Borrow(BorrowKind::Unique))\n             | Read(ReadKind::Borrow(BorrowKind::Mut { .. }))\n             | Read(ReadKind::Borrow(BorrowKind::Shared))\n+            | Read(ReadKind::Borrow(BorrowKind::Shallow))\n             | Read(ReadKind::Copy) => {\n                 // Access authorized\n                 return false;"}, {"sha": "1246f7120c4fb58313ab673d8304bca9f9f89e03", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -329,6 +329,9 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n         match *rvalue {\n             Rvalue::Ref(_ /*rgn*/, bk, ref place) => {\n                 let access_kind = match bk {\n+                    BorrowKind::Shallow => {\n+                        (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))\n+                    },\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n@@ -439,8 +442,9 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         // have already taken the reservation\n                     }\n \n-                    (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared) => {\n-                        // Reads/reservations don't invalidate shared borrows\n+                    (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow)\n+                    | (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared) => {\n+                        // Reads/reservations don't invalidate shared or shallow borrows\n                     }\n \n                     (Read(_), BorrowKind::Unique) | (Read(_), BorrowKind::Mut { .. }) => {"}, {"sha": "ccb7a4056267a24ac132bff534d0ccfeb70d1f7c", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -61,7 +61,14 @@ pub(super) fn each_borrow_involving_path<'a, 'tcx, 'gcx: 'tcx, F, I, S> (\n     for i in candidates {\n         let borrowed = &borrow_set[i];\n \n-        if places_conflict::places_conflict(tcx, mir, &borrowed.borrowed_place, place, access) {\n+        if places_conflict::places_conflict(\n+            tcx,\n+            mir,\n+            &borrowed.borrowed_place,\n+            borrowed.kind,\n+            place,\n+            access,\n+        ) {\n             debug!(\n                 \"each_borrow_involving_path: {:?} @ {:?} vs. {:?}/{:?}\",\n                 i, borrowed, place, access"}, {"sha": "13ac1d60c9543d87c45159443a5a8dfb761a253d", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -12,7 +12,7 @@ use borrow_check::ArtificialField;\n use borrow_check::Overlap;\n use borrow_check::{Deep, Shallow, AccessDepth};\n use rustc::hir;\n-use rustc::mir::{Mir, Place};\n+use rustc::mir::{BorrowKind, Mir, Place};\n use rustc::mir::{Projection, ProjectionElem};\n use rustc::ty::{self, TyCtxt};\n use std::cmp::max;\n@@ -21,6 +21,7 @@ pub(super) fn places_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     borrow_place: &Place<'tcx>,\n+    borrow_kind: BorrowKind,\n     access_place: &Place<'tcx>,\n     access: AccessDepth,\n ) -> bool {\n@@ -39,7 +40,14 @@ pub(super) fn places_conflict<'gcx, 'tcx>(\n \n     unroll_place(borrow_place, None, |borrow_components| {\n         unroll_place(access_place, None, |access_components| {\n-            place_components_conflict(tcx, mir, borrow_components, access_components, access)\n+            place_components_conflict(\n+                tcx,\n+                mir,\n+                borrow_components,\n+                borrow_kind,\n+                access_components,\n+                access\n+            )\n         })\n     })\n }\n@@ -48,6 +56,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     mut borrow_components: PlaceComponentsIter<'_, 'tcx>,\n+    borrow_kind: BorrowKind,\n     mut access_components: PlaceComponentsIter<'_, 'tcx>,\n     access: AccessDepth,\n ) -> bool {\n@@ -157,7 +166,8 @@ fn place_components_conflict<'gcx, 'tcx>(\n \n                 match (elem, &base_ty.sty, access) {\n                     (_, _, Shallow(Some(ArtificialField::Discriminant)))\n-                    | (_, _, Shallow(Some(ArtificialField::ArrayLength))) => {\n+                    | (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n+                    | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n                         // The discriminant and array length are like\n                         // additional fields on the type; they do not\n                         // overlap any existing data there. Furthermore,\n@@ -225,11 +235,13 @@ fn place_components_conflict<'gcx, 'tcx>(\n             // If the second example, where we did, then we still know\n             // that the borrow can access a *part* of our place that\n             // our access cares about, so we still have a conflict.\n-            //\n-            // FIXME: Differs from AST-borrowck; includes drive-by fix\n-            // to #38899. Will probably need back-compat mode flag.\n-            debug!(\"places_conflict: full borrow, CONFLICT\");\n-            return true;\n+            if borrow_kind == BorrowKind::Shallow && access_components.next().is_some() {\n+                debug!(\"places_conflict: shallow borrow\");\n+                return false;\n+            } else {\n+                debug!(\"places_conflict: full borrow, CONFLICT\");\n+                return true;\n+            }\n         }\n     }\n }"}, {"sha": "235440e28417d2f4060a31019e8b563b5d6f6135", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced5c2d08af52de40d104687c2b6066d9daedecf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=ced5c2d08af52de40d104687c2b6066d9daedecf", "patch": "@@ -1363,7 +1363,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     // borrow of the whole match input. See additional\n                     // discussion on rust-lang/rust#49870.\n                     let borrow_kind = match borrow_kind {\n-                        BorrowKind::Shared | BorrowKind::Unique => borrow_kind,\n+                        BorrowKind::Shared\n+                        | BorrowKind::Shallow\n+                        | BorrowKind::Unique => borrow_kind,\n                         BorrowKind::Mut { .. } => BorrowKind::Mut {\n                             allow_two_phase_borrow: true,\n                         },"}]}