{"sha": "b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "node_id": "C_kwDOAAsO6NoAKGIyNDg2NDdlZjBhZWQ4OGRjOGYzYmUyOWJlYzBiOThkOGJlNjRjM2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T00:43:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T06:43:50Z"}, "message": "Address nits, move substs replacement to separate function", "tree": {"sha": "b0b6c155159b7d52002c8304d443767b51c3d988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b6c155159b7d52002c8304d443767b51c3d988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "html_url": "https://github.com/rust-lang/rust/commit/b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b248647ef0aed88dc8f3be29bec0b98d8be64c3c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1618e8924dfcdb625fb532aad4b05f70827e767", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1618e8924dfcdb625fb532aad4b05f70827e767", "html_url": "https://github.com/rust-lang/rust/commit/f1618e8924dfcdb625fb532aad4b05f70827e767"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "ffbcedf46292e82e0c1de6224319f221c417830e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b248647ef0aed88dc8f3be29bec0b98d8be64c3c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b248647ef0aed88dc8f3be29bec0b98d8be64c3c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=b248647ef0aed88dc8f3be29bec0b98d8be64c3c", "patch": "@@ -1701,33 +1701,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 Ok(Some(ct)) => {\n                     if ct.unify_failure_kind(self.tcx) == FailureKind::Concrete {\n-                        substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n-                            let needs_replacement =\n-                                arg.has_param_types_or_consts() || arg.has_infer_types_or_consts();\n-                            match arg.unpack() {\n-                                GenericArgKind::Type(_) if needs_replacement => self\n-                                    .tcx\n-                                    .mk_ty(ty::Placeholder(ty::PlaceholderType {\n-                                        universe: ty::UniverseIndex::ROOT,\n-                                        name: ty::BoundVar::from_usize(idx),\n-                                    }))\n-                                    .into(),\n-                                GenericArgKind::Const(ct) if needs_replacement => self\n-                                    .tcx\n-                                    .mk_const(ty::ConstS {\n-                                        ty: ct.ty(),\n-                                        kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n-                                            universe: ty::UniverseIndex::ROOT,\n-                                            name: ty::BoundConst {\n-                                                var: ty::BoundVar::from_usize(idx),\n-                                                ty: ct.ty(),\n-                                            },\n-                                        }),\n-                                    })\n-                                    .into(),\n-                                _ => arg,\n-                            }\n-                        }));\n+                        substs = replace_param_and_infer_substs_with_placeholder(self.tcx, substs);\n                     } else {\n                         return Err(ErrorHandled::TooGeneric);\n                     }\n@@ -2052,3 +2026,43 @@ impl<'tcx> fmt::Debug for RegionObligation<'tcx> {\n         )\n     }\n }\n+\n+/// Replaces substs that reference param or infer variables with suitable\n+/// placeholders. This function is meant to remove these param and infer\n+/// substs when they're not actually needed to evaluate a constant.\n+fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+) -> SubstsRef<'tcx> {\n+    tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n+        match arg.unpack() {\n+            GenericArgKind::Type(_)\n+                if arg.has_param_types_or_consts() || arg.has_infer_types_or_consts() =>\n+            {\n+                tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                    universe: ty::UniverseIndex::ROOT,\n+                    name: ty::BoundVar::from_usize(idx),\n+                }))\n+                .into()\n+            }\n+            GenericArgKind::Const(ct)\n+                if ct.has_infer_types_or_consts() || ct.has_param_types_or_consts() =>\n+            {\n+                let ty = ct.ty();\n+                // If the type references param or infer, replace that too...\n+                if ty.has_param_types_or_consts() || ty.has_infer_types_or_consts() {\n+                    bug!(\"const `{ct}`'s type should not reference params or types\");\n+                }\n+                tcx.mk_const(ty::ConstS {\n+                    ty,\n+                    kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                        universe: ty::UniverseIndex::ROOT,\n+                        name: ty::BoundConst { ty, var: ty::BoundVar::from_usize(idx) },\n+                    }),\n+                })\n+                .into()\n+            }\n+            _ => arg,\n+        }\n+    }))\n+}"}]}