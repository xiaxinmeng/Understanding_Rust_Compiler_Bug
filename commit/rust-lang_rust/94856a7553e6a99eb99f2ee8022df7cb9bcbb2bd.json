{"sha": "94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODU2YTc1NTNlNmE5OWViOTlmMmVlODAyMmRmN2NiOWJjYmIyYmQ=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-11-15T23:46:17Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-12T20:23:17Z"}, "message": "Expand documantation for std::pin module", "tree": {"sha": "a2cbc1ad76a3b2d782b4c0b5e0b078eb941f5858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2cbc1ad76a3b2d782b4c0b5e0b078eb941f5858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "html_url": "https://github.com/rust-lang/rust/commit/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8fc7dc06dea00afbd365468cf4804f68a3531c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc7dc06dea00afbd365468cf4804f68a3531c", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc7dc06dea00afbd365468cf4804f68a3531c"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "256a1d60ac2e50154e7ea7c1903aff0389a9e00f", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "patch": "@@ -7,23 +7,30 @@\n //! since moving an object with pointers to itself will invalidate them,\n //! which could cause undefined behavior.\n //!\n-//! In order to prevent objects from moving, they must be pinned\n-//! by wrapping a pointer to the data in the [`Pin`] type. A pointer wrapped\n-//! in a `Pin` is otherwise equivalent to its normal version, e.g., `Pin<Box<T>>`\n-//! and `Box<T>` work the same way except that the first is pinning the value\n-//! of `T` in place.\n+//! By default, all types in Rust are movable. Rust allows passing all types by-value,\n+//! and common smart-pointer types such as `Box`, `Rc`, and `&mut` allow replacing and\n+//! moving the values they contain. In order to prevent objects from moving, they must\n+//! be pinned by wrapping a pointer to the data in the [`Pin`] type.\n+//! Doing this prohibits moving the value behind the pointer.\n+//! For example, `Pin<Box<T>>` functions much like a regular `Box<T>`,\n+//! but doesn't allow moving `T`. The pointer value itself (the `Box`) can still be moved,\n+//! but the value behind it cannot.\n //!\n-//! First of all, these are pointer types because pinned data mustn't be passed around by value\n-//! (that would change its location in memory).\n-//! Secondly, since data can be moved out of `&mut` and `Box` with functions such as [`swap`],\n-//! which causes their contents to swap places in memory,\n-//! we need dedicated types that prohibit such operations.\n+//! Since data can be moved out of `&mut` and `Box` with functions such as [`swap`],\n+//! changing the location of the underlying data, [`Pin`] prohibits accessing the\n+//! underlying pointer type (the `&mut` or `Box`) directly, and provides its own set of\n+//! APIs for accessing and using the value.\n //!\n-//! However, these restrictions are usually not necessary,\n-//! so most types implement the [`Unpin`] auto-trait,\n-//! which indicates that the type can be moved out safely.\n-//! Doing so removes the limitations of pinning types,\n-//! making them the same as their non-pinning counterparts.\n+//! However, these restrictions are usually not necessary. Many types are always freely\n+//! movable. These types implement the [`Unpin`] auto-trait, which nullifies the affect\n+//! of [`Pin`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function identically, as do\n+//! `Pin<&mut T>` and `&mut T`.\n+//!\n+//! Note that pinning and `Unpin` only affect the pointed-to type. For example, whether\n+//! or not `Box<T>` is `Unpin` has no affect on the behavior of `Pin<Box<T>>`. Similarly,\n+//! `Pin<Box<T>>` and `Pin<&mut T>` are always `Unpin` themselves, even though the\n+//! `T` underneath them isn't, because the pointers in `Pin<Box<_>>` and `Pin<&mut _>`\n+//! are always freely movable, even if the data they point to isn't.\n //!\n //! [`Pin`]: struct.Pin.html\n //! [`Unpin`]: trait.Unpin.html"}]}