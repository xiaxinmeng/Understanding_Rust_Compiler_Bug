{"sha": "ac505b21a8f3f1f03bfeed9209cfcf920c223852", "node_id": "C_kwDOAAsO6NoAKGFjNTA1YjIxYThmM2YxZjAzYmZlZWQ5MjA5Y2ZjZjkyMGMyMjM4NTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-15T17:27:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-15T17:27:19Z"}, "message": "Fix missing_fields diagnostic fix replacing wrong text ranges", "tree": {"sha": "bec67edb7f5e8bada560e2b1ee05ea7155df4440", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec67edb7f5e8bada560e2b1ee05ea7155df4440"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac505b21a8f3f1f03bfeed9209cfcf920c223852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac505b21a8f3f1f03bfeed9209cfcf920c223852", "html_url": "https://github.com/rust-lang/rust/commit/ac505b21a8f3f1f03bfeed9209cfcf920c223852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac505b21a8f3f1f03bfeed9209cfcf920c223852/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f87debcf87c16690e8d5e185a35d03a402a2d5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87debcf87c16690e8d5e185a35d03a402a2d5bf", "html_url": "https://github.com/rust-lang/rust/commit/f87debcf87c16690e8d5e185a35d03a402a2d5bf"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "3d416591fe62f9504f949b45669285610b2b0622", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac505b21a8f3f1f03bfeed9209cfcf920c223852/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac505b21a8f3f1f03bfeed9209cfcf920c223852/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=ac505b21a8f3f1f03bfeed9209cfcf920c223852", "patch": "@@ -54,6 +54,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n         Either::Right(_) => return None,\n     };\n     let old_field_list = field_list_parent.record_expr_field_list()?;\n+\n     let new_field_list = old_field_list.clone_for_update();\n     let mut locals = FxHashMap::default();\n     ctx.sema.scope(field_list_parent.syntax()).process_all_names(&mut |name, def| {\n@@ -80,11 +81,19 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n         new_field_list.add_field(field);\n     }\n \n-    let edit = {\n-        let mut builder = TextEdit::builder();\n+    let mut builder = TextEdit::builder();\n+    if d.file.is_macro() {\n+        // we can't map the diff up into the macro input unfortunately, as the macro loses all\n+        // whitespace information so the diff wouldn't be applicable no matter what\n+        // This has the downside that the cursor will be moved in macros by doing it without a diff\n+        // but that is a trade off we can make.\n+        // FIXE: this also currently discards a lot of whitespace in the input... we really need a formatter here\n+        let range = ctx.sema.original_range_opt(old_field_list.syntax())?;\n+        builder.replace(range.range, new_field_list.to_string());\n+    } else {\n         algo::diff(old_field_list.syntax(), new_field_list.syntax()).into_text_edit(&mut builder);\n-        builder.finish()\n-    };\n+    }\n+    let edit = builder.finish();\n     Some(vec![fix(\n         \"fill_missing_fields\",\n         \"Fill struct fields\",\n@@ -151,7 +160,6 @@ fn x(a: S) {\n \n     #[test]\n     fn range_mapping_out_of_macros() {\n-        // FIXME: this is very wrong, but somewhat tricky to fix.\n         check_fix(\n             r#\"\n fn some() {}\n@@ -167,14 +175,14 @@ fn main() {\n pub struct Foo { pub a: i32, pub b: i32 }\n \"#,\n             r#\"\n-fn some(, b: todo!() ) {}\n+fn some() {}\n fn items() {}\n fn here() {}\n \n macro_rules! id { ($($tt:tt)*) => { $($tt)*}; }\n \n fn main() {\n-    let _x = id![Foo { a: 42 }];\n+    let _x = id![Foo {a:42, b: todo!() }];\n }\n \n pub struct Foo { pub a: i32, pub b: i32 }"}]}