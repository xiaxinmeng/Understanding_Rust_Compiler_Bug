{"sha": "50ee0b29862a640526b05646f62fdf3b47e0f8bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZWUwYjI5ODYyYTY0MDUyNmIwNTY0NmY2MmZkZjNiNDdlMGY4YmM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-18T17:19:38Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-01-16T15:20:00Z"}, "message": "BTreeMap: clean up a few more comments", "tree": {"sha": "54f541c61ef16fa731a857268a10f5683286a18d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f541c61ef16fa731a857268a10f5683286a18d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ee0b29862a640526b05646f62fdf3b47e0f8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ee0b29862a640526b05646f62fdf3b47e0f8bc", "html_url": "https://github.com/rust-lang/rust/commit/50ee0b29862a640526b05646f62fdf3b47e0f8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ee0b29862a640526b05646f62fdf3b47e0f8bc/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf", "html_url": "https://github.com/rust-lang/rust/commit/efdb859dcdf7077cf6b8c85af0ea8820c93bcbdf"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "6f705414a9b9d5908cced65c93fa8817f42a0bbc", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50ee0b29862a640526b05646f62fdf3b47e0f8bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ee0b29862a640526b05646f62fdf3b47e0f8bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=50ee0b29862a640526b05646f62fdf3b47e0f8bc", "patch": "@@ -179,7 +179,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n \n     /// Removes the internal root node, using its first child as the new root node.\n     /// As it is intended only to be called when the root node has only one child,\n-    /// no cleanup is done on any of the other children.\n+    /// no cleanup is done on any of the keys, values and other children.\n     /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n     ///\n     /// Requires exclusive access to the `Root` object but not to the root node;\n@@ -220,7 +220,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n ///    - When this is `Owned`, the `NodeRef` acts roughly like `Box<Node>`,\n ///      but does not have a destructor, and must be cleaned up manually.\n ///   Since any `NodeRef` allows navigating through the tree, `BorrowType`\n-///   effectively applies to the entire tree, not just the node itself.\n+///   effectively applies to the entire tree, not just to the node itself.\n /// - `K` and `V`: These are the types of keys and values stored in the nodes.\n /// - `Type`: This can be `Leaf`, `Internal`, or `LeafOrInternal`. When this is\n ///   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the\n@@ -420,7 +420,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n \n impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// Similar to `ascend`, gets a reference to a node's parent node, but also\n-    /// deallocate the current node in the process. This is unsafe because the\n+    /// deallocates the current node in the process. This is unsafe because the\n     /// current node will still be accessible despite being deallocated.\n     pub unsafe fn deallocate_and_ascend(\n         self,\n@@ -656,7 +656,10 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Removes a key-value pair from the end of the node and returns the pair.\n     /// Also removes the edge that was to the right of that pair and, if the node\n     /// is internal, returns the orphaned subtree that this edge owned.\n-    fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n+    ///\n+    /// # Safety\n+    /// The node must not be empty.\n+    unsafe fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n         let idx = self.len() - 1;"}, {"sha": "efe94ef175ce756204585fc36c3701d14b0e8b9b", "filename": "library/alloc/src/collections/btree/search.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ee0b29862a640526b05646f62fdf3b47e0f8bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ee0b29862a640526b05646f62fdf3b47e0f8bc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs?ref=50ee0b29862a640526b05646f62fdf3b47e0f8bc", "patch": "@@ -12,8 +12,7 @@ pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> {\n \n /// Looks up a given key in a (sub)tree headed by the given node, recursively.\n /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n-/// returns a `GoDown` with the handle of the possible leaf edge where the key\n-/// belongs.\n+/// returns a `GoDown` with the handle of the leaf edge where the key belongs.\n ///\n /// The result is meaningful only if the tree is ordered by key, like the tree\n /// in a `BTreeMap` is."}]}