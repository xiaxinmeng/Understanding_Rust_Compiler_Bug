{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "node_id": "C_kwDOAAsO6NoAKDc5MTllZjBlYzU3NzZjNzJkYWNlN2ZlYzFjNjg1NTFhNjE3NTA1YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T15:02:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T15:02:44Z"}, "message": "Auto merge of #107055 - kylematsuda:eb-fn-sig, r=lcnr\n\nSwitch to `EarlyBinder` for `fn_sig` query\n\nPart of the work to finish #105779 (also see https://github.com/rust-lang/types-team/issues/78).\n\nSeveral queries `X` have a `bound_X` variant that wraps the output in [`EarlyBinder`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/subst/struct.EarlyBinder.html). This adds `EarlyBinder` to the return type of the `fn_sig` query and removes `bound_fn_sig`.\n\nr? `@lcnr`", "tree": {"sha": "e02489879e2313e74fdf466b6d48034f1631807f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e02489879e2313e74fdf466b6d48034f1631807f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6874f4e3fc2a16be7c78e702d068bbc1daa90e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/6874f4e3fc2a16be7c78e702d068bbc1daa90e16", "html_url": "https://github.com/rust-lang/rust/commit/6874f4e3fc2a16be7c78e702d068bbc1daa90e16"}, {"sha": "dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1216bc0660c2d76535a68a53ff37462c5b1cb0", "html_url": "https://github.com/rust-lang/rust/commit/dc1216bc0660c2d76535a68a53ff37462c5b1cb0"}], "stats": {"total": 365, "additions": 193, "deletions": 172}, "files": [{"sha": "50c0faf4597f1a2cdb36f0a085b0e09e2533cc8a", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -2599,7 +2599,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 match ty.kind() {\n                     ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n                         self.mir_def_id(),\n-                        self.infcx.tcx.fn_sig(self.mir_def_id()),\n+                        self.infcx.tcx.fn_sig(self.mir_def_id()).subst_identity(),\n                     ),\n                     _ => None,\n                 }"}, {"sha": "1011794d7b3b2995671c2946070a4f59df385fcb", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1064,7 +1064,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     }\n                 }\n-                CallKind::Normal { self_arg, desugaring, method_did } => {\n+                CallKind::Normal { self_arg, desugaring, method_did, method_substs } => {\n                     let self_arg = self_arg.unwrap();\n                     let tcx = self.infcx.tcx;\n                     if let Some((CallDesugaringKind::ForLoopIntoIter, _)) = desugaring {\n@@ -1136,7 +1136,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             && let self_ty = infcx.replace_bound_vars_with_fresh_vars(\n                                 fn_call_span,\n                                 LateBoundRegionConversionTime::FnCall,\n-                                tcx.fn_sig(method_did).input(0),\n+                                tcx.fn_sig(method_did).subst(tcx, method_substs).input(0),\n                             )\n                             && infcx.can_eq(self.param_env, ty, self_ty).is_ok()\n                         {"}, {"sha": "5380913f5c86ae5a4ab4fc06ee422b6ea553cbee", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -472,7 +472,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         // C-variadic fns also have a `VaList` input that's not listed in the signature\n         // (as it's created inside the body itself, not passed in from outside).\n         if let DefiningTy::FnDef(def_id, _) = defining_ty {\n-            if self.infcx.tcx.fn_sig(def_id).c_variadic() {\n+            if self.infcx.tcx.fn_sig(def_id).skip_binder().c_variadic() {\n                 let va_list_did = self.infcx.tcx.require_lang_item(\n                     LangItem::VaList,\n                     Some(self.infcx.tcx.def_span(self.mir_def.did)),\n@@ -665,7 +665,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n \n             DefiningTy::FnDef(def_id, _) => {\n-                let sig = tcx.fn_sig(def_id);\n+                let sig = tcx.fn_sig(def_id).subst_identity();\n                 let sig = indices.fold_to_region_vids(tcx, sig);\n                 sig.inputs_and_output()\n             }"}, {"sha": "3e3b685713427ce13bb571354b00316c4d02943c", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         is_main_fn: bool,\n         sigpipe: u8,\n     ) {\n-        let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n+        let main_ret_ty = tcx.fn_sig(rust_main_def_id).no_bound_vars().unwrap().output();\n         // Given that `main()` has no arguments,\n         // then its return type cannot have\n         // late-bound regions, since late-bound"}, {"sha": "54ac7a46cf2f331681ffb9f2e9b0e90034b94dcd", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -441,7 +441,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         // the WebAssembly specification, which has this feature. This won't be\n         // needed when LLVM enables this `multivalue` feature by default.\n         if !cx.tcx.is_closure(instance.def_id()) {\n-            let abi = cx.tcx.fn_sig(instance.def_id()).abi();\n+            let abi = cx.tcx.fn_sig(instance.def_id()).skip_binder().abi();\n             if abi == Abi::Wasm {\n                 function_features.push(\"+multivalue\".to_string());\n             }"}, {"sha": "02b502d948c2c890b83430bb45ee9a5791646a49", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -436,7 +436,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             cx.type_func(&[], cx.type_int())\n         };\n \n-        let main_ret_ty = cx.tcx().fn_sig(rust_main_def_id).output();\n+        let main_ret_ty = cx.tcx().fn_sig(rust_main_def_id).no_bound_vars().unwrap().output();\n         // Given that `main()` has no arguments,\n         // then its return type cannot have\n         // late-bound regions, since late-bound"}, {"sha": "87b819ebc9849504a6be8219bcfa67bda680c416", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -214,7 +214,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n             if validate_fn_only_attr(attr.span)\n-                && !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. })\n+                && !matches!(tcx.fn_sig(did).skip_binder().abi(), abi::Abi::C { .. })\n             {\n                 struct_span_err!(\n                     tcx.sess,\n@@ -234,7 +234,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::track_caller) {\n             if !tcx.is_closure(did.to_def_id())\n                 && validate_fn_only_attr(attr.span)\n-                && tcx.fn_sig(did).abi() != abi::Abi::Rust\n+                && tcx.fn_sig(did).skip_binder().abi() != abi::Abi::Rust\n             {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n@@ -266,7 +266,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             }\n         } else if attr.has_name(sym::target_feature) {\n             if !tcx.is_closure(did.to_def_id())\n-                && tcx.fn_sig(did).unsafety() == hir::Unsafety::Normal\n+                && tcx.fn_sig(did).skip_binder().unsafety() == hir::Unsafety::Normal\n             {\n                 if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on"}, {"sha": "f92277b111374ea268d5492dc76fd4d44b91872e", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -66,7 +66,7 @@ fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n                 if cfg!(debug_assertions) && stab.promotable {\n                     let sig = tcx.fn_sig(def_id);\n                     assert_eq!(\n-                        sig.unsafety(),\n+                        sig.skip_binder().unsafety(),\n                         hir::Unsafety::Normal,\n                         \"don't mark const unsafe fns as promotable\",\n                         // https://github.com/rust-lang/rust/pull/53851#issuecomment-418760682"}, {"sha": "e841500bf3e0569bc2ab9202eebe6bf8b6fffd9b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -72,7 +72,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n             let ty::Closure(_, substs) = ty.kind() else { bug!(\"type_of closure not ty::Closure\") };\n             substs.as_closure().sig()\n         } else {\n-            self.tcx.fn_sig(did)\n+            self.tcx.fn_sig(did).subst_identity()\n         }\n     }\n }"}, {"sha": "995363c0edd92e3e4849b045328b1650ec1225d1", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -40,6 +40,7 @@ pub enum CallKind<'tcx> {\n         self_arg: Option<Ident>,\n         desugaring: Option<(CallDesugaringKind, Ty<'tcx>)>,\n         method_did: DefId,\n+        method_substs: SubstsRef<'tcx>,\n     },\n     /// A call to `Fn(..)::call(..)`, desugared from `my_closure(a, b, c)`\n     FnCall { fn_trait_id: DefId, self_ty: Ty<'tcx> },\n@@ -131,6 +132,6 @@ pub fn call_kind<'tcx>(\n         } else {\n             None\n         };\n-        CallKind::Normal { self_arg, desugaring, method_did }\n+        CallKind::Normal { self_arg, desugaring, method_did, method_substs }\n     })\n }"}, {"sha": "27284f8b983b66f278b65de180a3e9888cb4da66", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -3140,7 +3140,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_ref.def_id,\n         )?;\n \n-        let fn_sig = tcx.bound_fn_sig(assoc.def_id).subst(\n+        let fn_sig = tcx.fn_sig(assoc.def_id).subst(\n             tcx,\n             trait_ref.substs.extend_to(tcx, assoc.def_id, |param, _| tcx.mk_param_from_def(param)),\n         );"}, {"sha": "780d5271619e7ef90a4af4a0172eb7aaf639ad80", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -249,15 +249,15 @@ fn compare_method_predicate_entailment<'tcx>(\n     let unnormalized_impl_sig = infcx.replace_bound_vars_with_fresh_vars(\n         impl_m_span,\n         infer::HigherRankedType,\n-        tcx.fn_sig(impl_m.def_id),\n+        tcx.fn_sig(impl_m.def_id).subst_identity(),\n     );\n     let unnormalized_impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(unnormalized_impl_sig));\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_def_id);\n     let impl_sig = ocx.normalize(&norm_cause, param_env, unnormalized_impl_sig);\n     debug!(\"compare_impl_method: impl_fty={:?}\", impl_sig);\n \n-    let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n+    let trait_sig = tcx.fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n     let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n \n     // Next, add all inputs and output as well-formed tys. Importantly,\n@@ -422,8 +422,8 @@ fn extract_bad_args_for_implies_lint<'tcx>(\n \n     // Map late-bound regions from trait to impl, so the names are right.\n     let mapping = std::iter::zip(\n-        tcx.fn_sig(trait_m.def_id).bound_vars(),\n-        tcx.fn_sig(impl_m.def_id).bound_vars(),\n+        tcx.fn_sig(trait_m.def_id).skip_binder().bound_vars(),\n+        tcx.fn_sig(impl_m.def_id).skip_binder().bound_vars(),\n     )\n     .filter_map(|(impl_bv, trait_bv)| {\n         if let ty::BoundVariableKind::Region(impl_bv) = impl_bv\n@@ -540,7 +540,7 @@ fn compare_asyncness<'tcx>(\n     trait_item_span: Option<Span>,\n ) -> Result<(), ErrorGuaranteed> {\n     if tcx.asyncness(trait_m.def_id) == hir::IsAsync::Async {\n-        match tcx.fn_sig(impl_m.def_id).skip_binder().output().kind() {\n+        match tcx.fn_sig(impl_m.def_id).skip_binder().skip_binder().output().kind() {\n             ty::Alias(ty::Opaque, ..) => {\n                 // allow both `async fn foo()` and `fn foo() -> impl Future`\n             }\n@@ -643,7 +643,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n         infcx.replace_bound_vars_with_fresh_vars(\n             return_span,\n             infer::HigherRankedType,\n-            tcx.fn_sig(impl_m.def_id),\n+            tcx.fn_sig(impl_m.def_id).subst_identity(),\n         ),\n     );\n     impl_sig.error_reported()?;\n@@ -657,7 +657,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     let unnormalized_trait_sig = tcx\n         .liberate_late_bound_regions(\n             impl_m.def_id,\n-            tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n+            tcx.fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n         .fold_with(&mut collector);\n     let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n@@ -1117,7 +1117,7 @@ fn compare_self_type<'tcx>(\n             ty::ImplContainer => impl_trait_ref.self_ty(),\n             ty::TraitContainer => tcx.types.self_param,\n         };\n-        let self_arg_ty = tcx.fn_sig(method.def_id).input(0);\n+        let self_arg_ty = tcx.fn_sig(method.def_id).subst_identity().input(0);\n         let param_env = ty::ParamEnv::reveal_all();\n \n         let infcx = tcx.infer_ctxt().build();\n@@ -1350,8 +1350,8 @@ fn compare_number_of_method_arguments<'tcx>(\n ) -> Result<(), ErrorGuaranteed> {\n     let impl_m_fty = tcx.fn_sig(impl_m.def_id);\n     let trait_m_fty = tcx.fn_sig(trait_m.def_id);\n-    let trait_number_args = trait_m_fty.inputs().skip_binder().len();\n-    let impl_number_args = impl_m_fty.inputs().skip_binder().len();\n+    let trait_number_args = trait_m_fty.skip_binder().inputs().skip_binder().len();\n+    let impl_number_args = impl_m_fty.skip_binder().inputs().skip_binder().len();\n \n     if trait_number_args != impl_number_args {\n         let trait_span = trait_m"}, {"sha": "955cacf03b1c676f5dfa32fca091b84497f4b825", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -58,7 +58,12 @@ fn equate_intrinsic_type<'tcx>(\n         let fty = tcx.mk_fn_ptr(sig);\n         let it_def_id = it.owner_id.def_id;\n         let cause = ObligationCause::new(it.span, it_def_id, ObligationCauseCode::IntrinsicType);\n-        require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.owner_id)), fty);\n+        require_same_types(\n+            tcx,\n+            &cause,\n+            tcx.mk_fn_ptr(tcx.fn_sig(it.owner_id).subst_identity()),\n+            fty,\n+        );\n     }\n }\n "}, {"sha": "2f2ee702837bc9a4920364e33e374666aa8c18a5", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -445,7 +445,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             // regions just fine, showing `fn(&MyType)`.\n             fn_sig_suggestion(\n                 tcx,\n-                tcx.fn_sig(assoc.def_id).skip_binder(),\n+                tcx.fn_sig(assoc.def_id).subst_identity().skip_binder(),\n                 assoc.ident(tcx),\n                 tcx.predicates_of(assoc.def_id),\n                 assoc,"}, {"sha": "870c57d5e0595354f7a8bc54b54b482b28f3bdf4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -386,7 +386,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                         // `Self::Iter<'a>` is a GAT we want to gather any potential missing bounds from.\n                         let sig: ty::FnSig<'_> = tcx.liberate_late_bound_regions(\n                             item_def_id.to_def_id(),\n-                            tcx.fn_sig(item_def_id),\n+                            tcx.fn_sig(item_def_id).subst_identity(),\n                         );\n                         gather_gat_bounds(\n                             tcx,\n@@ -1018,7 +1018,7 @@ fn check_associated_item(\n                 wfcx.register_wf_obligation(span, loc, ty.into());\n             }\n             ty::AssocKind::Fn => {\n-                let sig = tcx.fn_sig(item.def_id);\n+                let sig = tcx.fn_sig(item.def_id).subst_identity();\n                 let hir_sig = sig_if_method.expect(\"bad signature for method\");\n                 check_fn_or_method(\n                     wfcx,\n@@ -1203,7 +1203,7 @@ fn check_item_fn(\n     decl: &hir::FnDecl<'_>,\n ) {\n     enter_wf_checking_ctxt(tcx, span, def_id, |wfcx| {\n-        let sig = tcx.fn_sig(def_id);\n+        let sig = tcx.fn_sig(def_id).subst_identity();\n         check_fn_or_method(wfcx, ident.span, sig, decl, def_id);\n     })\n }\n@@ -1638,7 +1638,7 @@ fn check_method_receiver<'tcx>(\n \n     let span = fn_sig.decl.inputs[0].span;\n \n-    let sig = tcx.fn_sig(method.def_id);\n+    let sig = tcx.fn_sig(method.def_id).subst_identity();\n     let sig = tcx.liberate_late_bound_regions(method.def_id, sig);\n     let sig = wfcx.normalize(span, None, sig);\n "}, {"sha": "b73a05ff398460df22407c4bf6d8305b80c19105", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1087,7 +1087,7 @@ pub fn get_infer_ret_ty<'hir>(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir\n }\n \n #[instrument(level = \"debug\", skip(tcx))]\n-fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n+fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'_>> {\n     use rustc_hir::Node::*;\n     use rustc_hir::*;\n \n@@ -1096,7 +1096,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n \n-    match tcx.hir().get(hir_id) {\n+    let output = match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n             kind: TraitItemKind::Fn(sig, TraitFn::Provided(_)),\n             generics,\n@@ -1169,7 +1169,8 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         x => {\n             bug!(\"unexpected sort of node in fn_sig(): {:?}\", x);\n         }\n-    }\n+    };\n+    ty::EarlyBinder(output)\n }\n \n fn infer_return_ty_for_fn_sig<'tcx>("}, {"sha": "d0d819d9687bbd673211447b5eeeb84fef955104", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -867,7 +867,9 @@ fn infer_placeholder_type<'a>(\n             }\n \n             match ty.kind() {\n-                ty::FnDef(def_id, _) => self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id)),\n+                ty::FnDef(def_id, substs) => {\n+                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id).subst(self.tcx, substs))\n+                }\n                 // FIXME: non-capturing closures should also suggest a function pointer\n                 ty::Closure(..) | ty::Generator(..) => {\n                     self.success = false;"}, {"sha": "c2fa46e563e60ac60d7149bb4fc8dd45d03c7a72", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -182,7 +182,7 @@ fn require_same_types<'tcx>(\n }\n \n fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n-    let main_fnsig = tcx.fn_sig(main_def_id);\n+    let main_fnsig = tcx.fn_sig(main_def_id).subst_identity();\n     let main_span = tcx.def_span(main_def_id);\n \n     fn main_fn_diagnostics_def_id(tcx: TyCtxt<'_>, def_id: DefId, sp: Span) -> LocalDefId {\n@@ -449,7 +449,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                     ObligationCauseCode::StartFunctionType,\n                 ),\n                 se_ty,\n-                tcx.mk_fn_ptr(tcx.fn_sig(start_def_id)),\n+                tcx.mk_fn_ptr(tcx.fn_sig(start_def_id).subst_identity()),\n             );\n         }\n         _ => {"}, {"sha": "2cd2b6a5f7631a39c5c2b33ba19ab1f463acb551", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -119,7 +119,11 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::FnDef(..) => {\n-                self.add_constraints_from_sig(current_item, tcx.fn_sig(def_id), self.covariant);\n+                self.add_constraints_from_sig(\n+                    current_item,\n+                    tcx.fn_sig(def_id).subst_identity(),\n+                    self.covariant,\n+                );\n             }\n \n             ty::Error(_) => {}"}, {"sha": "c220956a2012e15620f124c86c5942b479587759", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -367,7 +367,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let (fn_sig, def_id) = match *callee_ty.kind() {\n             ty::FnDef(def_id, subst) => {\n-                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, subst);\n+                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, subst);\n \n                 // Unit testing: function items annotated with\n                 // `#[rustc_evaluate_where_clauses]` trigger special output"}, {"sha": "19b8fb96cde37133145ed156b3477c887c8225ee", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // We special case methods, because they can influence inference through the\n                 // call's arguments and we can provide a more explicit span.\n-                let sig = self.tcx.fn_sig(def_id);\n+                let sig = self.tcx.fn_sig(def_id).subst_identity();\n                 let def_self_ty = sig.input(0).skip_binder();\n                 let rcvr_ty = self.node_ty(rcvr.hir_id);\n                 // Get the evaluated type *after* calling the method call, so that the influence\n@@ -603,6 +603,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let substs = ty::InternalSubsts::for_item(self.tcx, m.def_id, |param, _| {\n                     self.var_for_def(deref.span, param)\n                 });\n+                let mutability =\n+                    match self.tcx.fn_sig(m.def_id).skip_binder().input(0).skip_binder().kind() {\n+                        ty::Ref(_, _, hir::Mutability::Mut) => \"&mut \",\n+                        ty::Ref(_, _, _) => \"&\",\n+                        _ => \"\",\n+                    };\n                 vec![\n                     (\n                         deref.span.until(base.span),\n@@ -611,11 +617,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             with_no_trimmed_paths!(\n                                 self.tcx.def_path_str_with_substs(m.def_id, substs,)\n                             ),\n-                            match self.tcx.fn_sig(m.def_id).input(0).skip_binder().kind() {\n-                                ty::Ref(_, _, hir::Mutability::Mut) => \"&mut \",\n-                                ty::Ref(_, _, _) => \"&\",\n-                                _ => \"\",\n-                            },\n+                            mutability,\n                         ),\n                     ),\n                     match &args[..] {\n@@ -1036,7 +1038,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match method.kind {\n             ty::AssocKind::Fn => {\n                 method.fn_has_self_parameter\n-                    && self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1\n+                    && self.tcx.fn_sig(method.def_id).skip_binder().inputs().skip_binder().len()\n+                        == 1\n             }\n             _ => false,\n         }"}, {"sha": "74913bac72411a7b73d771648c088367fc541db5", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -542,7 +542,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if let ty::FnDef(did, ..) = *ty.kind() {\n             let fn_sig = ty.fn_sig(tcx);\n-            if tcx.fn_sig(did).abi() == RustIntrinsic && tcx.item_name(did) == sym::transmute {\n+            if tcx.fn_sig(did).skip_binder().abi() == RustIntrinsic\n+                && tcx.item_name(did) == sym::transmute\n+            {\n                 let from = fn_sig.inputs().skip_binder()[0];\n                 let to = fn_sig.output().skip_binder();\n                 // We defer the transmute to the end of typeck, once all inference vars have"}, {"sha": "04ac9c085ea218836904e02ba91afa2970c9e4df", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -207,7 +207,7 @@ fn typeck_with_fallback<'tcx>(\n             let fn_sig = if rustc_hir_analysis::collect::get_infer_ret_ty(&decl.output).is_some() {\n                 fcx.astconv().ty_of_fn(id, header.unsafety, header.abi, decl, None, None)\n             } else {\n-                tcx.fn_sig(def_id)\n+                tcx.fn_sig(def_id).subst_identity()\n             };\n \n             check_abi(tcx, id, span, fn_sig.abi());"}, {"sha": "65ca47bfe538bbd5c42cb8854ee9dfa1adcc601b", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -503,9 +503,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n-        let sig = self.tcx.bound_fn_sig(def_id);\n-\n-        let sig = sig.subst(self.tcx, all_substs);\n+        let sig = self.tcx.fn_sig(def_id).subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, sig={:?}\", sig);\n \n         let sig = self.replace_bound_vars_with_fresh_vars(sig);"}, {"sha": "60d4dc326eea16f837983767fc138d6ffda50a5d", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             )\n             .map(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n-                sig.inputs().skip_binder().len().saturating_sub(1)\n+                sig.skip_binder().inputs().skip_binder().len().saturating_sub(1)\n             })\n             .unwrap_or(0);\n \n@@ -399,8 +399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // N.B., instantiate late-bound regions before normalizing the\n         // function signature so that normalization does not need to deal\n         // with bound regions.\n-        let fn_sig = tcx.bound_fn_sig(def_id);\n-        let fn_sig = fn_sig.subst(self.tcx, substs);\n+        let fn_sig = tcx.fn_sig(def_id).subst(self.tcx, substs);\n         let fn_sig =\n             self.replace_bound_vars_with_fresh_vars(obligation.cause.span, infer::FnCall, fn_sig);\n "}, {"sha": "9fc4c16fb071d2dbac212436a8187cca2d836a2a", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -921,26 +921,22 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         expected: Ty<'tcx>,\n     ) -> bool {\n         match method.kind {\n-            ty::AssocKind::Fn => {\n-                let fty = self.tcx.bound_fn_sig(method.def_id);\n-                self.probe(|_| {\n-                    let substs = self.fresh_substs_for_item(self.span, method.def_id);\n-                    let fty = fty.subst(self.tcx, substs);\n-                    let fty =\n-                        self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n-\n-                    if let Some(self_ty) = self_ty {\n-                        if self\n-                            .at(&ObligationCause::dummy(), self.param_env)\n-                            .sup(fty.inputs()[0], self_ty)\n-                            .is_err()\n-                        {\n-                            return false;\n-                        }\n+            ty::AssocKind::Fn => self.probe(|_| {\n+                let substs = self.fresh_substs_for_item(self.span, method.def_id);\n+                let fty = self.tcx.fn_sig(method.def_id).subst(self.tcx, substs);\n+                let fty = self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n+\n+                if let Some(self_ty) = self_ty {\n+                    if self\n+                        .at(&ObligationCause::dummy(), self.param_env)\n+                        .sup(fty.inputs()[0], self_ty)\n+                        .is_err()\n+                    {\n+                        return false;\n                     }\n-                    self.can_sub(self.param_env, fty.output(), expected).is_ok()\n-                })\n-            }\n+                }\n+                self.can_sub(self.param_env, fty.output(), expected).is_ok()\n+            }),\n             _ => false,\n         }\n     }\n@@ -1887,7 +1883,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn xform_method_sig(&self, method: DefId, substs: SubstsRef<'tcx>) -> ty::FnSig<'tcx> {\n-        let fn_sig = self.tcx.bound_fn_sig(method);\n+        let fn_sig = self.tcx.fn_sig(method);\n         debug!(?fn_sig);\n \n         assert!(!substs.has_escaping_bound_vars());"}, {"sha": "31d55a41d8a31b6d91b3d533d95a2008ab0b87ad", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1128,6 +1128,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ty::AssocKind::Fn => self\n                                 .tcx\n                                 .fn_sig(item.def_id)\n+                                .subst_identity()\n                                 .inputs()\n                                 .skip_binder()\n                                 .get(0)\n@@ -1264,7 +1265,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 && let Some(assoc) = self.associated_value(*impl_did, item_name)\n                 && assoc.kind == ty::AssocKind::Fn\n             {\n-                let sig = self.tcx.fn_sig(assoc.def_id);\n+                let sig = self.tcx.fn_sig(assoc.def_id).subst_identity();\n                 sig.inputs().skip_binder().get(0).and_then(|first| if first.peel_refs() == rcvr_ty.peel_refs() {\n                     None\n                 } else {\n@@ -2098,7 +2099,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // just changing the path.\n                     && pick.item.fn_has_self_parameter\n                     && let Some(self_ty) =\n-                        self.tcx.fn_sig(pick.item.def_id).inputs().skip_binder().get(0)\n+                        self.tcx.fn_sig(pick.item.def_id).subst_identity().inputs().skip_binder().get(0)\n                     && self_ty.is_ref()\n                 {\n                     let suggested_path = match deref_ty.kind() {\n@@ -2351,7 +2352,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // implement the `AsRef` trait.\n                         let skip = skippable.contains(&did)\n                             || ((\"Pin::new\" == *pre) && (sym::as_ref == item_name.name))\n-                            || inputs_len.map_or(false, |inputs_len| pick.item.kind == ty::AssocKind::Fn && self.tcx.fn_sig(pick.item.def_id).skip_binder().inputs().len() != inputs_len);\n+                            || inputs_len.map_or(false, |inputs_len| pick.item.kind == ty::AssocKind::Fn && self.tcx.fn_sig(pick.item.def_id).skip_binder().skip_binder().inputs().len() != inputs_len);\n                         // Make sure the method is defined for the *actual* receiver: we don't\n                         // want to treat `Box<Self>` as a receiver if it only works because of\n                         // an autoderef to `&self`\n@@ -2731,7 +2732,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // check the method arguments number\n             if let Ok(pick) = probe &&\n                 let fn_sig = self.tcx.fn_sig(pick.item.def_id) &&\n-                let fn_args = fn_sig.skip_binder().inputs() &&\n+                let fn_args = fn_sig.skip_binder().skip_binder().inputs() &&\n                 fn_args.len() == args.len() + 1 {\n                 err.span_suggestion_verbose(\n                     method_name.span.shrink_to_hi(),"}, {"sha": "b11db8396c9203e9e840c599590c8da6a2885c6e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1345,8 +1345,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n-                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n-                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n+                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(&sig1, &sig2);\n                 let path1 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did1, substs1));\n                 let path2 = format!(\" {{{}}}\", self.tcx.def_path_str_with_substs(*did2, substs2));\n@@ -1357,7 +1357,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n \n             (ty::FnDef(did1, substs1), ty::FnPtr(sig2)) => {\n-                let sig1 = self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1);\n+                let sig1 = self.tcx.fn_sig(*did1).subst(self.tcx, substs1);\n                 let mut values = self.cmp_fn_sig(&sig1, sig2);\n                 values.0.push_highlighted(format!(\n                     \" {{{}}}\",\n@@ -1367,7 +1367,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n \n             (ty::FnPtr(sig1), ty::FnDef(did2, substs2)) => {\n-                let sig2 = self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2);\n+                let sig2 = self.tcx.fn_sig(*did2).subst(self.tcx, substs2);\n                 let mut values = self.cmp_fn_sig(sig1, &sig2);\n                 values.1.push_normal(format!(\n                     \" {{{}}}\","}, {"sha": "4c0f457b46a7c76cbee3ebc7e4743e90272b4d08", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -65,7 +65,7 @@ pub fn find_param_with_region<'tcx>(\n \n     let owner_id = hir.body_owner(body_id);\n     let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n-    let poly_fn_sig = tcx.fn_sig(id);\n+    let poly_fn_sig = tcx.fn_sig(id).subst_identity();\n \n     let fn_sig = tcx.liberate_late_bound_regions(id, poly_fn_sig);\n     let body = hir.body(body_id);"}, {"sha": "34e8edd6140b211002eaf1f6de68b5b3a0bc8fcf", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -463,7 +463,7 @@ fn foo(&tcx) -> Self::T { String::new() }\n                 ty::AssocKind::Fn == item.kind && Some(item.name) != current_method_ident\n             })\n             .filter_map(|item| {\n-                let method = tcx.fn_sig(item.def_id);\n+                let method = tcx.fn_sig(item.def_id).subst_identity();\n                 match *method.output().skip_binder().kind() {\n                     ty::Alias(ty::Projection, ty::AliasTy { def_id: item_def_id, .. })\n                         if item_def_id == proj_ty_item_def_id =>"}, {"sha": "23063e80b05ff117091c95c35bdfa728f8de1584", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -369,7 +369,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             (ty::FnPtr(sig), ty::FnDef(did, substs)) => {\n                 let expected_sig = &(self.normalize_fn_sig)(*sig);\n                 let found_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did).subst(self.tcx, substs));\n \n                 let fn_name = self.tcx.def_path_str_with_substs(*did, substs);\n \n@@ -408,9 +408,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n             (ty::FnDef(did1, substs1), ty::FnDef(did2, substs2)) => {\n                 let expected_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did1).subst(self.tcx, substs1));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did1).subst(self.tcx, substs1));\n                 let found_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did2).subst(self.tcx, substs2));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did2).subst(self.tcx, substs2));\n \n                 if self.same_type_modulo_infer(*expected_sig, *found_sig) {\n                     diag.note(\"different fn items have unique types, even if their signatures are the same\");\n@@ -440,7 +440,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n             (ty::FnDef(did, substs), ty::FnPtr(sig)) => {\n                 let expected_sig =\n-                    &(self.normalize_fn_sig)(self.tcx.bound_fn_sig(*did).subst(self.tcx, substs));\n+                    &(self.normalize_fn_sig)(self.tcx.fn_sig(*did).subst(self.tcx, substs));\n                 let found_sig = &(self.normalize_fn_sig)(*sig);\n \n                 if !self.same_type_modulo_infer(*found_sig, *expected_sig) {"}, {"sha": "9be4b577aeb10d81b6c8205b400586cd39790005", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1225,7 +1225,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_foreign_fn(&mut self, id: hir::HirId, decl: &hir::FnDecl<'_>) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n-        let sig = self.cx.tcx.fn_sig(def_id);\n+        let sig = self.cx.tcx.fn_sig(def_id).subst_identity();\n         let sig = self.cx.tcx.erase_late_bound_regions(sig);\n \n         for (input_ty, input_hir) in iter::zip(sig.inputs(), decl.inputs) {"}, {"sha": "f46050dedc20cdd992f2078f1fa46c2f719d508d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1112,7 +1112,7 @@ fn should_encode_trait_impl_trait_tys(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n     // of work. We can probably remove this when we refactor RPITITs to be\n     // associated types.\n-    tcx.fn_sig(trait_item_def_id).skip_binder().output().walk().any(|arg| {\n+    tcx.fn_sig(trait_item_def_id).subst_identity().skip_binder().output().walk().any(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Alias(ty::Projection, data) = ty.kind()\n             && tcx.def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n@@ -1647,7 +1647,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty::Closure(_, substs) => {\n                 let constness = self.tcx.constness(def_id.to_def_id());\n                 self.tables.constness.set(def_id.to_def_id().index, constness);\n-                record!(self.tables.fn_sig[def_id.to_def_id()] <- substs.as_closure().sig());\n+                record!(self.tables.fn_sig[def_id.to_def_id()] <- ty::EarlyBinder(substs.as_closure().sig()));\n             }\n \n             _ => bug!(\"closure that is neither generator nor closure\"),"}, {"sha": "cf735e5bd17b414802aab978e5344f77a0edec7d", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -369,7 +369,7 @@ define_tables! {\n     super_predicates_of: Table<DefIndex, LazyValue<ty::GenericPredicates<'static>>>,\n     type_of: Table<DefIndex, LazyValue<Ty<'static>>>,\n     variances_of: Table<DefIndex, LazyArray<ty::Variance>>,\n-    fn_sig: Table<DefIndex, LazyValue<ty::PolyFnSig<'static>>>,\n+    fn_sig: Table<DefIndex, LazyValue<ty::EarlyBinder<ty::PolyFnSig<'static>>>>,\n     codegen_fn_attrs: Table<DefIndex, LazyValue<CodegenFnAttrs>>,\n     impl_trait_ref: Table<DefIndex, LazyValue<ty::EarlyBinder<ty::TraitRef<'static>>>>,\n     const_param_default: Table<DefIndex, LazyValue<ty::EarlyBinder<rustc_middle::ty::Const<'static>>>>,"}, {"sha": "dc626c2433c4e4c1eb1d1740b7fc46e2e4ebf77e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -814,7 +814,7 @@ rustc_queries! {\n     }\n \n     /// Computes the signature of the function.\n-    query fn_sig(key: DefId) -> ty::PolyFnSig<'tcx> {\n+    query fn_sig(key: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'tcx>> {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern"}, {"sha": "71cecfb558fb282c48055ff139d96fb399c88a07", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -79,7 +79,7 @@ impl AssocItem {\n                 // late-bound regions, and we don't want method signatures to show up\n                 // `as for<'r> fn(&'r MyType)`. Pretty-printing handles late-bound\n                 // regions just fine, showing `fn(&MyType)`.\n-                tcx.fn_sig(self.def_id).skip_binder().to_string()\n+                tcx.fn_sig(self.def_id).subst_identity().skip_binder().to_string()\n             }\n             ty::AssocKind::Type => format!(\"type {};\", self.name),\n             ty::AssocKind::Const => {"}, {"sha": "8b4fccc58bd4447819f4ad763867891d7a9acae0", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -459,7 +459,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve_for_vtable(def_id={:?}, substs={:?})\", def_id, substs);\n-        let fn_sig = tcx.fn_sig(def_id);\n+        let fn_sig = tcx.fn_sig(def_id).subst_identity();\n         let is_vtable_shim = !fn_sig.inputs().skip_binder().is_empty()\n             && fn_sig.input(0).skip_binder().is_param(0)\n             && tcx.generics_of(def_id).has_self;"}, {"sha": "2f30dbebbc22cbe4f53055a8ad8f0bb1f4366af8", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -675,7 +675,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(\")\")\n             }\n             ty::FnDef(def_id, substs) => {\n-                let sig = self.tcx().bound_fn_sig(def_id).subst(self.tcx(), substs);\n+                let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n                 p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),"}, {"sha": "0656c77d0b51c76fe77896af85cac9b85d7b3962", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -2059,7 +2059,7 @@ impl<'tcx> Ty<'tcx> {\n \n     pub fn fn_sig(self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {\n         match self.kind() {\n-            FnDef(def_id, substs) => tcx.bound_fn_sig(*def_id).subst(tcx, substs),\n+            FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),\n             FnPtr(f) => *f,\n             Error(_) => {\n                 // ignore errors (#54954)"}, {"sha": "cf1bb5f8ac8db27900054ae4415777b520f93e52", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -758,6 +758,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> ty::EarlyBinder<T> {\n     pub fn subst_identity(self) -> T {\n         self.0\n     }\n+\n+    /// Returns the inner value, but only if it contains no bound vars.\n+    pub fn no_bound_vars(self) -> Option<T> {\n+        if !self.0.needs_subst() { Some(self.0) } else { None }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "54ea63bb4cff7dcd4857fa2017482027d52759ae", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -643,10 +643,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.collect_return_position_impl_trait_in_trait_tys(def_id))\n     }\n \n-    pub fn bound_fn_sig(self, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'tcx>> {\n-        ty::EarlyBinder(self.fn_sig(def_id))\n-    }\n-\n     pub fn bound_explicit_item_bounds(\n         self,\n         def_id: DefId,\n@@ -1315,7 +1311,7 @@ pub fn is_doc_notable_trait(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n /// Determines whether an item is an intrinsic by Abi.\n pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    matches!(tcx.fn_sig(def_id).abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n+    matches!(tcx.fn_sig(def_id).skip_binder().abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "f85831b4fc6b57c106881d557ae3b9e39cceba83", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -637,7 +637,7 @@ fn construct_error(\n \n     let ty = tcx.ty_error();\n     let num_params = match body_owner_kind {\n-        hir::BodyOwnerKind::Fn => tcx.fn_sig(def).inputs().skip_binder().len(),\n+        hir::BodyOwnerKind::Fn => tcx.fn_sig(def).skip_binder().inputs().skip_binder().len(),\n         hir::BodyOwnerKind::Closure => {\n             let ty = tcx.type_of(def);\n             match ty.kind() {"}, {"sha": "aa19b1fdb5efae9dcb89029dba67be035855dc34", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n         for bound in bounds {\n             if let Some(bound_ty) = self.is_pointer_trait(&bound.kind().skip_binder()) {\n                 // Get the argument types as they appear in the function signature.\n-                let arg_defs = self.tcx.fn_sig(def_id).skip_binder().inputs();\n+                let arg_defs = self.tcx.fn_sig(def_id).subst_identity().skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n                     for generic_inner_ty in arg_def.walk() {\n@@ -161,7 +161,8 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n             .as_ref()\n             .assert_crate_local()\n             .lint_root;\n-        let fn_sig = self.tcx.fn_sig(fn_id);\n+        // FIXME: use existing printing routines to print the function signature\n+        let fn_sig = self.tcx.fn_sig(fn_id).subst(self.tcx, fn_substs);\n         let unsafety = fn_sig.unsafety().prefix_str();\n         let abi = match fn_sig.abi() {\n             Abi::Rust => String::from(\"\"),"}, {"sha": "69627fc5cb24ae274d03cf2207bc79a26572233a", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -331,7 +331,7 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n-                let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n+                let fn_sig = self.tcx.fn_sig(def_id).subst(self.tcx, substs);\n                 let source_info = SourceInfo { span: fn_span, ..terminator.source_info };\n \n                 return Some(CallSite { callee, fn_sig, block: bb, target, source_info });"}, {"sha": "8d4fe74e7d3925f7e624623a25a01b112b994b53", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -152,7 +152,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     } else {\n         InternalSubsts::identity_for_item(tcx, def_id)\n     };\n-    let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n+    let sig = tcx.fn_sig(def_id).subst(tcx, substs);\n     let sig = tcx.erase_late_bound_regions(sig);\n     let span = tcx.def_span(def_id);\n \n@@ -363,7 +363,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n-        let sig = tcx.bound_fn_sig(def_id).subst(tcx, &[self_ty.into()]);\n+        let sig = tcx.fn_sig(def_id).subst(tcx, &[self_ty.into()]);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n \n@@ -606,7 +606,7 @@ fn build_call_shim<'tcx>(\n     };\n \n     let def_id = instance.def_id();\n-    let sig = tcx.bound_fn_sig(def_id);\n+    let sig = tcx.fn_sig(def_id);\n     let sig = sig.map_bound(|sig| tcx.erase_late_bound_regions(sig));\n \n     assert_eq!(sig_substs.is_some(), !instance.has_polymorphic_mir_body());\n@@ -798,7 +798,11 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     let param_env = tcx.param_env(ctor_id);\n \n     // Normalize the sig.\n-    let sig = tcx.fn_sig(ctor_id).no_bound_vars().expect(\"LBR in ADT constructor signature\");\n+    let sig = tcx\n+        .fn_sig(ctor_id)\n+        .subst_identity()\n+        .no_bound_vars()\n+        .expect(\"LBR in ADT constructor signature\");\n     let sig = tcx.normalize_erasing_regions(param_env, sig);\n \n     let ty::Adt(adt_def, substs) = sig.output().kind() else {"}, {"sha": "305f0427e501be6477a03c6adba62c77322ca4e5", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1296,7 +1296,7 @@ impl<'v> RootCollector<'_, 'v> {\n         };\n \n         let start_def_id = self.tcx.require_lang_item(LangItem::Start, None);\n-        let main_ret_ty = self.tcx.fn_sig(main_def_id).output();\n+        let main_ret_ty = self.tcx.fn_sig(main_def_id).no_bound_vars().unwrap().output();\n \n         // Given that `main()` has no arguments,\n         // then its return type cannot have"}, {"sha": "f4673c332b88702778ffe77a8e800ba0cc696e7b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -2120,7 +2120,8 @@ impl CheckAttrVisitor<'_> {\n             let id = hir_id.expect_owner();\n             let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n \n-            let sig = tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id));\n+            let sig =\n+                tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id).subst_identity());\n             let sig = tcx.normalize_erasing_regions(ParamEnv::empty(), sig);\n \n             // We don't currently require that the function signature is equal to"}, {"sha": "e969bb6db9ec44ab4e0ad8a0fcd955c140e8f05d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -198,7 +198,8 @@ where\n                 // Something like `fn() -> Priv {my_func}` is considered a private type even if\n                 // `my_func` is public, so we need to visit signatures.\n                 if let ty::FnDef(..) = ty.kind() {\n-                    tcx.fn_sig(def_id).visit_with(self)?;\n+                    // FIXME: this should probably use `substs` from `FnDef`\n+                    tcx.fn_sig(def_id).subst_identity().visit_with(self)?;\n                 }\n                 // Inherent static methods don't have self type in substs.\n                 // Something like `fn() {my_method}` type of the method"}, {"sha": "6cab0bc6a4b25f3c165532d3aed95111ac4b5168", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -184,7 +184,7 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n ) -> Result<Option<ty::Binder<'tcx, (Ty<'tcx>, Ty<'tcx>)>>, NoSolution> {\n     match *self_ty.kind() {\n         ty::FnDef(def_id, substs) => Ok(Some(\n-            tcx.bound_fn_sig(def_id)\n+            tcx.fn_sig(def_id)\n                 .subst(tcx, substs)\n                 .map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output())),\n         )),"}, {"sha": "55c2f7e2e358d0433d51fcf36ee5fde45137551b", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -395,7 +395,7 @@ fn virtual_call_violation_for_method<'tcx>(\n     trait_def_id: DefId,\n     method: &ty::AssocItem,\n ) -> Option<MethodViolationCode> {\n-    let sig = tcx.fn_sig(method.def_id);\n+    let sig = tcx.fn_sig(method.def_id).subst_identity();\n \n     // The method's first parameter must be named `self`\n     if !method.fn_has_self_parameter {"}, {"sha": "2e9107e153c2a96a1d39b03e39b86915e68f3c13", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -269,7 +269,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n-        let sig = self.interner.tcx.bound_fn_sig(def_id);\n+        let sig = self.interner.tcx.fn_sig(def_id);\n         let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n             self.interner,\n             self.interner.tcx,"}, {"sha": "1c74aeca5ab1fae38a6e6234c6ad7b40b292078b", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -41,7 +41,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n             // We normalize the `fn_sig` again after substituting at a later point.\n             let mut sig = match *ty.kind() {\n                 ty::FnDef(def_id, substs) => tcx\n-                    .bound_fn_sig(def_id)\n+                    .fn_sig(def_id)\n                     .map_bound(|fn_sig| {\n                         tcx.normalize_erasing_regions(tcx.param_env(def_id), fn_sig)\n                     })"}, {"sha": "961c04974e508bc6ca69dc8b320a423ab5afb000", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -9,12 +9,12 @@ pub fn provide(providers: &mut ty::query::Providers) {\n fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n     match tcx.def_kind(def_id) {\n         DefKind::Fn => {\n-            let sig = tcx.fn_sig(def_id);\n+            let sig = tcx.fn_sig(def_id).subst_identity();\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n             liberated_sig.inputs_and_output\n         }\n         DefKind::AssocFn => {\n-            let sig = tcx.fn_sig(def_id);\n+            let sig = tcx.fn_sig(def_id).subst_identity();\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n             let mut assumed_wf_types: Vec<_> =\n                 tcx.assumed_wf_types(tcx.parent(def_id)).as_slice().into();"}, {"sha": "77986ad48613d9d83674b7fa0d86fb53d5e0ac6c", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -299,7 +299,7 @@ fn well_formed_types_in_env(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Predica\n         // In an fn, we assume that the arguments and all their constituents are\n         // well-formed.\n         NodeKind::Fn => {\n-            let fn_sig = tcx.fn_sig(def_id);\n+            let fn_sig = tcx.fn_sig(def_id).subst_identity();\n             let fn_sig = tcx.liberate_late_bound_regions(def_id, fn_sig);\n \n             inputs.extend(fn_sig.inputs().iter().flat_map(|ty| ty.walk()));"}, {"sha": "6592692d8b21481333f57efb749f75b1b79d0523", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -251,7 +251,7 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n }\n \n fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<clean::Function> {\n-    let sig = cx.tcx.fn_sig(did);\n+    let sig = cx.tcx.fn_sig(did).subst_identity();\n \n     let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n         ty::BoundVariableKind::Region(ty::BrNamed(_, name)) if name != kw::UnderscoreLifetime => {"}, {"sha": "a4d86981c262cc16b47ed33db62f089a895c58c3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1231,7 +1231,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n         }\n         ty::AssocKind::Fn => {\n-            let sig = tcx.fn_sig(assoc_item.def_id);\n+            let sig = tcx.fn_sig(assoc_item.def_id).subst_identity();\n \n             let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n                 ty::BoundVariableKind::Region(ty::BrNamed(_, name))"}, {"sha": "85dd3881593aca0969e2791a3305888390e26d43", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -654,7 +654,7 @@ impl Item {\n             tcx: TyCtxt<'_>,\n             asyncness: hir::IsAsync,\n         ) -> hir::FnHeader {\n-            let sig = tcx.fn_sig(def_id);\n+            let sig = tcx.fn_sig(def_id).skip_binder();\n             let constness =\n                 if tcx.is_const_fn(def_id) && is_unstable_const_fn(tcx, def_id).is_none() {\n                     hir::Constness::Const\n@@ -666,7 +666,7 @@ impl Item {\n         let header = match *self.kind {\n             ItemKind::ForeignFunctionItem(_) => {\n                 let def_id = self.item_id.as_def_id().unwrap();\n-                let abi = tcx.fn_sig(def_id).abi();\n+                let abi = tcx.fn_sig(def_id).skip_binder().abi();\n                 hir::FnHeader {\n                     unsafety: if abi == Abi::RustIntrinsic {\n                         intrinsic_operation_unsafety(tcx, self.item_id.as_def_id().unwrap())"}, {"sha": "1633ffd589c384ab827cdf224a1749c00b2ce8b6", "filename": "src/tools/clippy/clippy_lints/src/casts/as_ptr_cast_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fas_ptr_cast_mut.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -17,7 +17,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         && let ExprKind::MethodCall(method_name, receiver, [], _) = cast_expr.peel_blocks().kind\n         && method_name.ident.name == rustc_span::sym::as_ptr\n         && let Some(as_ptr_did) = cx.typeck_results().type_dependent_def_id(cast_expr.peel_blocks().hir_id)\n-        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did)\n+        && let as_ptr_sig = cx.tcx.fn_sig(as_ptr_did).subst_identity()\n         && let Some(first_param_ty) = as_ptr_sig.skip_binder().inputs().iter().next()\n         && let ty::Ref(_, _, Mutability::Not) = first_param_ty.kind()\n         && let Some(recv) = snippet_opt(cx, receiver.span)"}, {"sha": "f806ba238c7c670c0d068700a7a8acf28f2e2671", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n+                    let fn_sig = self.cx.tcx.fn_sig(def_id).subst_identity().skip_binder();\n                     for (expr, bound) in iter::zip(std::iter::once(*receiver).chain(args.iter()), fn_sig.inputs()) {\n                         self.ty_bounds.push((*bound).into());\n                         self.visit_expr(expr);\n@@ -215,7 +215,7 @@ fn fn_sig_opt<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<PolyFnSig<'\n     let node_ty = cx.typeck_results().node_type_opt(hir_id)?;\n     // We can't use `Ty::fn_sig` because it automatically performs substs, this may result in FNs.\n     match node_ty.kind() {\n-        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id)),\n+        ty::FnDef(def_id, _) => Some(cx.tcx.fn_sig(*def_id).subst_identity()),\n         ty::FnPtr(fn_sig) => Some(*fn_sig),\n         _ => None,\n     }"}, {"sha": "fa3e5aa6b72133b633b61e6caf8762b41b1e1878", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -759,7 +759,7 @@ fn walk_parents<'tcx>(\n             }) if span.ctxt() == ctxt => {\n                 let output = cx\n                     .tcx\n-                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id.to_def_id()).output());\n+                    .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n@@ -791,7 +791,7 @@ fn walk_parents<'tcx>(\n                         } else {\n                             let output = cx\n                                 .tcx\n-                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).output());\n+                                .erase_late_bound_regions(cx.tcx.fn_sig(cx.tcx.hir().local_def_id(owner_id)).subst_identity().output());\n                             ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n                         },\n                     )\n@@ -858,7 +858,7 @@ fn walk_parents<'tcx>(\n                             && let subs = cx\n                                 .typeck_results()\n                                 .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n-                            && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                            && let impl_ty = if cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[0].is_ref() {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -879,7 +879,7 @@ fn walk_parents<'tcx>(\n                         return Some(Position::MethodReceiver);\n                     }\n                     args.iter().position(|arg| arg.hir_id == child_id).map(|i| {\n-                        let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i + 1];\n+                        let ty = cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i + 1];\n                         // `e.hir_id == child_id` for https://github.com/rust-lang/rust-clippy/issues/9739\n                         // `method.args.is_none()` for https://github.com/rust-lang/rust-clippy/issues/9782\n                         if e.hir_id == child_id && method.args.is_none() && let ty::Param(param_ty) = ty.kind() {\n@@ -896,7 +896,7 @@ fn walk_parents<'tcx>(\n                         } else {\n                             ty_auto_deref_stability(\n                                 cx,\n-                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).input(i + 1)),\n+                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).subst_identity().input(i + 1)),\n                                 precedence,\n                             )\n                             .position_for_arg()\n@@ -1093,7 +1093,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n     let sized_trait_def_id = cx.tcx.lang_items().sized_trait();\n \n     let Some(callee_def_id) = fn_def_id(cx, parent) else { return Position::Other(precedence) };\n-    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+    let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n     let substs_with_expr_ty = cx\n         .typeck_results()\n         .node_substs(if let ExprKind::Call(callee, _) = parent.kind {\n@@ -1221,7 +1221,7 @@ fn has_ref_mut_self_method(cx: &LateContext<'_>, trait_def_id: DefId) -> bool {\n         .in_definition_order()\n         .any(|assoc_item| {\n             if assoc_item.fn_has_self_parameter {\n-                let self_ty = cx.tcx.fn_sig(assoc_item.def_id).skip_binder().inputs()[0];\n+                let self_ty = cx.tcx.fn_sig(assoc_item.def_id).subst_identity().skip_binder().inputs()[0];\n                 matches!(self_ty.kind(), ty::Ref(_, _, Mutability::Mut))\n             } else {\n                 false"}, {"sha": "cdb5e22e759827f0190f421b3e13064b3da1dbe3", "filename": "src/tools/clippy/clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -58,7 +58,7 @@ fn check_raw_ptr<'tcx>(\n                     },\n                     hir::ExprKind::MethodCall(_, recv, args, _) => {\n                         let def_id = typeck.type_dependent_def_id(e.hir_id).unwrap();\n-                        if cx.tcx.fn_sig(def_id).skip_binder().unsafety == hir::Unsafety::Unsafe {\n+                        if cx.tcx.fn_sig(def_id).skip_binder().skip_binder().unsafety == hir::Unsafety::Unsafe {\n                             check_arg(cx, &raw_ptrs, recv);\n                             for arg in args {\n                                 check_arg(cx, &raw_ptrs, arg);"}, {"sha": "fa2a9b30c058d1605a6048f85b0dfe2d14487bc5", "filename": "src/tools/clippy/clippy_lints/src/functions/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -21,7 +21,7 @@ fn result_err_ty<'tcx>(\n ) -> Option<(&'tcx hir::Ty<'tcx>, Ty<'tcx>)> {\n     if !in_external_macro(cx.sess(), item_span)\n         && let hir::FnRetTy::Return(hir_ty) = decl.output\n-        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).output())\n+        && let ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).subst_identity().output())\n         && is_type_diagnostic_item(cx, ty, sym::Result)\n         && let ty::Adt(_, substs) = ty.kind()\n     {"}, {"sha": "612c3ea8fdfd89253fbeb3e5a508628c82a1d47d", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -124,7 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n         .expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let self_type = cx.tcx.fn_sig(item.owner_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.owner_id).skip_binder().input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "7557a9ce13f1119d276f66beb3fcc26e260578eb", "filename": "src/tools/clippy/clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n \n fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n     if sig.decl.implicit_self.has_implicit_self() {\n-        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(fn_id).output());\n+        let ret_ty = cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(fn_id).subst_identity().output());\n         let ret_ty = cx\n             .tcx\n             .try_normalize_erasing_regions(cx.param_env, ret_ty)"}, {"sha": "80ed2862a419a9edb8fc6f759b9ad397a6e3e832", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -144,7 +144,7 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n             if let Some(local_id) = ty_id.as_local();\n             let ty_hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_id);\n             if !is_lint_allowed(cx, LEN_WITHOUT_IS_EMPTY, ty_hir_id);\n-            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).skip_binder());\n+            if let Some(output) = parse_len_output(cx, cx.tcx.fn_sig(item.owner_id).subst_identity().skip_binder());\n             then {\n                 let (name, kind) = match cx.tcx.hir().find(ty_hir_id) {\n                     Some(Node::ForeignItem(x)) => (x.ident.name, \"extern type\"),\n@@ -196,7 +196,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n     fn is_named_self(cx: &LateContext<'_>, item: &TraitItemRef, name: Symbol) -> bool {\n         item.ident.name == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && { cx.tcx.fn_sig(item.id.owner_id).inputs().skip_binder().len() == 1 }\n+                has_self && { cx.tcx.fn_sig(item.id.owner_id).skip_binder().inputs().skip_binder().len() == 1 }\n             } else {\n                 false\n             }\n@@ -224,7 +224,7 @@ fn check_trait_items(cx: &LateContext<'_>, visited_trait: &Item<'_>, trait_items\n             .any(|i| {\n                 i.kind == ty::AssocKind::Fn\n                     && i.fn_has_self_parameter\n-                    && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n+                    && cx.tcx.fn_sig(i.def_id).skip_binder().inputs().skip_binder().len() == 1\n             });\n \n         if !is_empty_method_found {\n@@ -342,7 +342,7 @@ fn check_for_is_empty<'tcx>(\n         ),\n         Some(is_empty)\n             if !(is_empty.fn_has_self_parameter\n-                && check_is_empty_sig(cx.tcx.fn_sig(is_empty.def_id).skip_binder(), self_kind, output)) =>\n+                && check_is_empty_sig(cx.tcx.fn_sig(is_empty.def_id).subst_identity().skip_binder(), self_kind, output)) =>\n         {\n             (\n                 format!(\n@@ -473,7 +473,7 @@ fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_>, item: &ty::AssocItem) -> bool {\n         if item.kind == ty::AssocKind::Fn {\n-            let sig = cx.tcx.fn_sig(item.def_id);\n+            let sig = cx.tcx.fn_sig(item.def_id).skip_binder();\n             let ty = sig.skip_binder();\n             ty.inputs().len() == 1\n         } else {"}, {"sha": "e6ed4ea7a5db550c0b80944f7c9d5930250423d8", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -370,7 +370,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             ExprKind::MethodCall(_, receiver, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n                 for (ty, expr) in iter::zip(\n-                    self.cx.tcx.fn_sig(def_id).inputs().skip_binder(),\n+                    self.cx.tcx.fn_sig(def_id).subst_identity().inputs().skip_binder(),\n                     std::iter::once(receiver).chain(args.iter()),\n                 ) {\n                     self.prefer_mutable = false;"}, {"sha": "edcab6968cbe0aaead4427e61b4d20de4a09d8cd", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -104,7 +104,7 @@ fn is_unit_function(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n \n     if let ty::FnDef(id, _) = *ty.kind() {\n-        if let Some(fn_type) = cx.tcx.fn_sig(id).no_bound_vars() {\n+        if let Some(fn_type) = cx.tcx.fn_sig(id).subst_identity().no_bound_vars() {\n             return is_unit_type(fn_type.output());\n         }\n     }"}, {"sha": "aed0ad5d9b5a78fe231beceff720413bc65f5287", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -70,7 +70,7 @@ pub(super) fn check<'tcx>(\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n                     match cx.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn | hir::def::DefKind::AssocFn, def_id) => matches!(\n-                            cx.tcx.fn_sig(def_id).output().skip_binder().kind(),\n+                            cx.tcx.fn_sig(def_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static(),\n                         ),\n                         _ => false,\n@@ -84,7 +84,7 @@ pub(super) fn check<'tcx>(\n                     .type_dependent_def_id(arg.hir_id)\n                     .map_or(false, |method_id| {\n                         matches!(\n-                            cx.tcx.fn_sig(method_id).output().skip_binder().kind(),\n+                            cx.tcx.fn_sig(method_id).subst_identity().output().skip_binder().kind(),\n                             ty::Ref(re, ..) if re.is_static()\n                         )\n                     })"}, {"sha": "a7e45d5126ab0e928f6eebf9cdbb77c76009eab8", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -3352,7 +3352,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n         if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind {\n-            let method_sig = cx.tcx.fn_sig(impl_item.owner_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.owner_id).subst_identity();\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n             let first_arg_ty_opt = method_sig.inputs().iter().next().copied();\n             // if this impl block implements a trait, lint in trait definition instead"}, {"sha": "82d3b830d4f3949c498c672280097b18dc7167d6", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -137,7 +137,7 @@ pub(super) fn check<'tcx>(\n /// Checks if the given method call matches the expected signature of `([&[mut]] self) -> bool`\n fn is_is_empty_sig(cx: &LateContext<'_>, call_id: HirId) -> bool {\n     cx.typeck_results().type_dependent_def_id(call_id).map_or(false, |id| {\n-        let sig = cx.tcx.fn_sig(id).skip_binder();\n+        let sig = cx.tcx.fn_sig(id).subst_identity().skip_binder();\n         sig.inputs().len() == 1 && sig.output().is_bool()\n     })\n }\n@@ -165,7 +165,7 @@ fn iterates_same_ty<'tcx>(cx: &LateContext<'tcx>, iter_ty: Ty<'tcx>, collect_ty:\n fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -> bool {\n     let typeck = cx.typeck_results();\n     if let Some(id) = typeck.type_dependent_def_id(call_id)\n-        && let sig = cx.tcx.fn_sig(id)\n+        && let sig = cx.tcx.fn_sig(id).subst_identity()\n         && sig.skip_binder().output().is_bool()\n         && let [_, search_ty] = *sig.skip_binder().inputs()\n         && let ty::Ref(_, search_ty, Mutability::Not) = *cx.tcx.erase_late_bound_regions(sig.rebind(search_ty)).kind()"}, {"sha": "12e053cb2134d1e3c5471707082368be6d0b2c00", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -246,7 +246,7 @@ fn check_other_call_arg<'tcx>(\n     if_chain! {\n         if let Some((maybe_call, maybe_arg)) = skip_addr_of_ancestors(cx, expr);\n         if let Some((callee_def_id, _, recv, call_args)) = get_callee_substs_and_args(cx, maybe_call);\n-        let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+        let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n         if let Some(i) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == maybe_arg.hir_id);\n         if let Some(input) = fn_sig.inputs().get(i);\n         let (input, n_refs) = peel_mid_ty_refs(*input);\n@@ -386,7 +386,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n-                    let fn_sig = cx.tcx.fn_sig(callee_def_id).skip_binder();\n+                    let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n                         && let ty::Param(ParamTy { index: param_index , ..}) = param_ty.kind()"}, {"sha": "16947cd5e3548277f97d77a04d4adf5617c72e02", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -138,7 +138,7 @@ impl MutableKeyType {\n \n     fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n         let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n             self.check_ty_(cx, hir_ty.span, *ty);\n         }"}, {"sha": "25ec9082c7076677c5f1cc8d6ea1bdbc84a0141d", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             ctx\n         };\n \n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n         let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n \n         for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {"}, {"sha": "954eeba751ffa4307d712dad99ac5898bb5c12cc", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -143,7 +143,7 @@ impl<'tcx> PassByRefOrValue {\n             return;\n         }\n \n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.fn_sig(def_id).subst_identity();\n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n \n         // Gather all the lifetimes found in the output type which may affect whether"}, {"sha": "8afe286fbd5dc97d3e42888d9ce22bfdee5f2f37", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n             check_mut_from_ref(cx, sig, None);\n             for arg in check_fn_args(\n                 cx,\n-                cx.tcx.fn_sig(item.owner_id).skip_binder().inputs(),\n+                cx.tcx.fn_sig(item.owner_id).subst_identity().skip_binder().inputs(),\n                 sig.decl.inputs,\n                 &[],\n             )\n@@ -217,7 +217,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n         check_mut_from_ref(cx, sig, Some(body));\n         let decl = sig.decl;\n-        let sig = cx.tcx.fn_sig(item_id).skip_binder();\n+        let sig = cx.tcx.fn_sig(item_id).subst_identity().skip_binder();\n         let lint_args: Vec<_> = check_fn_args(cx, sig.inputs(), decl.inputs, body.params)\n             .filter(|arg| !is_trait_item || arg.mutability() == Mutability::Not)\n             .collect();\n@@ -624,7 +624,7 @@ fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args:\n                             return;\n                         };\n \n-                        match *self.cx.tcx.fn_sig(id).skip_binder().inputs()[i].peel_refs().kind() {\n+                        match *self.cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i].peel_refs().kind() {\n                             ty::Dynamic(preds, _, _) if !matches_preds(self.cx, args.deref_ty.ty(self.cx), preds) => {\n                                 set_skip_flag();\n                             },"}, {"sha": "dc1275a3686d0b27a61d2f69c8fd3a3915e516a4", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -288,6 +288,7 @@ fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>)\n             && cx\n                 .tcx\n                 .fn_sig(def_id)\n+                .subst_identity()\n                 .skip_binder()\n                 .output()\n                 .walk()"}, {"sha": "289ca4e9bed3cb9707c5fcdea0563a07778c3d6a", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -76,7 +76,7 @@ fn get_projection_pred<'tcx>(\n fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Vec<(usize, String)> {\n     let mut args_to_check = Vec::new();\n     if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-        let fn_sig = cx.tcx.fn_sig(def_id);\n+        let fn_sig = cx.tcx.fn_sig(def_id).subst_identity();\n         let generics = cx.tcx.predicates_of(def_id);\n         let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n         let ord_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.get_diagnostic_item(sym::Ord));"}, {"sha": "d6167a62169d405fe996fad7007c7d82a410534b", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -156,7 +156,7 @@ fn needs_inferred_result_ty(\n         },\n         _ => return false,\n     };\n-    let sig = cx.tcx.fn_sig(id).skip_binder();\n+    let sig = cx.tcx.fn_sig(id).subst_identity().skip_binder();\n     if let ty::Param(output_ty) = *sig.output().kind() {\n         let args: Vec<&Expr<'_>> = if let Some(receiver) = receiver {\n             std::iter::once(receiver).chain(args.iter()).collect()"}, {"sha": "3cd35838961f65694aa9efce148b114c9b0ee314", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n                     .associated_item(impl_item.owner_id)\n                     .trait_item_def_id\n                     .expect(\"impl method matches a trait method\");\n-                let trait_method_sig = cx.tcx.fn_sig(trait_method);\n+                let trait_method_sig = cx.tcx.fn_sig(trait_method).subst_identity();\n                 let trait_method_sig = cx.tcx.erase_late_bound_regions(trait_method_sig);\n \n                 // `impl_inputs_outputs` is an iterator over the types (`hir::Ty`) declared in the"}, {"sha": "5c89dd3e49f41569bd2525e90c9a5e58b8ffedf7", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -79,7 +79,7 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n             && subs.types().all(|x| matches!(x.peel_refs().kind(), ty::Param(_)))\n         {\n             // Limit the function to either `(self) -> bool` or `(&self) -> bool`\n-            match &**cx.tcx.fn_sig(fn_id).skip_binder().inputs_and_output {\n+            match &**cx.tcx.fn_sig(fn_id).subst_identity().skip_binder().inputs_and_output {\n                 [arg, res] if !arg.is_mutable_ptr() && arg.peel_refs() == ty && res.is_bool() => NoChange,\n                 _ => Lazy,\n             }"}, {"sha": "23791ebe922549ac904fafa0d7efced13ae28d27", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -1379,7 +1379,7 @@ pub fn get_enclosing_loop_or_multi_call_closure<'tcx>(\n                                     .chain(args.iter())\n                                     .position(|arg| arg.hir_id == id)?;\n                                 let id = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n-                                let ty = cx.tcx.fn_sig(id).skip_binder().inputs()[i];\n+                                let ty = cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i];\n                                 ty_is_fn_once_param(cx.tcx, ty, cx.tcx.param_env(id).caller_bounds()).then_some(())\n                             },\n                             _ => None,\n@@ -1580,14 +1580,14 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n /// Convenience function to get the return type of a function.\n pub fn return_ty<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let ret_ty = cx.tcx.fn_sig(fn_def_id).output();\n+    let ret_ty = cx.tcx.fn_sig(fn_def_id).subst_identity().output();\n     cx.tcx.erase_late_bound_regions(ret_ty)\n }\n \n /// Convenience function to get the nth argument type of a function.\n pub fn nth_arg<'tcx>(cx: &LateContext<'tcx>, fn_item: hir::HirId, nth: usize) -> Ty<'tcx> {\n     let fn_def_id = cx.tcx.hir().local_def_id(fn_item);\n-    let arg = cx.tcx.fn_sig(fn_def_id).input(nth);\n+    let arg = cx.tcx.fn_sig(fn_def_id).subst_identity().input(nth);\n     cx.tcx.erase_late_bound_regions(arg)\n }\n "}, {"sha": "13de780b71095e9a1fbbd04b4b18995ebb309530", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -55,7 +55,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n-        tcx.fn_sig(def_id).output().skip_binder(),\n+        tcx.fn_sig(def_id).subst_identity().output().skip_binder(),\n         body.local_decls.iter().next().unwrap().source_info.span,\n     )?;\n "}, {"sha": "8d767f9d44d3a7f1189426f25cc16e29fa7e128e", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -885,7 +885,7 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n                     .cx\n                     .typeck_results()\n                     .type_dependent_def_id(parent_expr.hir_id)\n-                    .map(|did| self.cx.tcx.fn_sig(did).skip_binder())\n+                    .map(|did| self.cx.tcx.fn_sig(did).subst_identity().skip_binder())\n                 {\n                     std::iter::once(receiver)\n                         .chain(call_args.iter())"}, {"sha": "1d5d55d5b54cf4fdf218d391fb207da517d31bfa", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -628,7 +628,7 @@ impl<'tcx> ExprFnSig<'tcx> {\n /// If the expression is function like, get the signature for it.\n pub fn expr_sig<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> Option<ExprFnSig<'tcx>> {\n     if let Res::Def(DefKind::Fn | DefKind::Ctor(_, CtorKind::Fn) | DefKind::AssocFn, id) = path_res(cx, expr) {\n-        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id), Some(id)))\n+        Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst_identity(), Some(id)))\n     } else {\n         ty_sig(cx, cx.typeck_results().expr_ty_adjusted(expr).peel_refs())\n     }\n@@ -646,7 +646,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n                 .and_then(|id| cx.tcx.hir().fn_decl_by_hir_id(cx.tcx.hir().local_def_id_to_hir_id(id)));\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n-        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n+        ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n             sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id).subst(cx.tcx, substs), cx.tcx.opt_parent(def_id))\n         },"}, {"sha": "d18b62d1bf16aef6ac7cc3ee85c13d5035d8fdd7", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -392,12 +392,12 @@ pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n                         .cx\n                         .typeck_results()\n                         .type_dependent_def_id(e.hir_id)\n-                        .map_or(false, |id| self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe) =>\n+                        .map_or(false, |id| self.cx.tcx.fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe) =>\n                 {\n                     self.is_unsafe = true;\n                 },\n                 ExprKind::Call(func, _) => match *self.cx.typeck_results().expr_ty(func).peel_refs().kind() {\n-                    ty::FnDef(id, _) if self.cx.tcx.fn_sig(id).unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n+                    ty::FnDef(id, _) if self.cx.tcx.fn_sig(id).skip_binder().unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n                     ty::FnPtr(sig) if sig.unsafety() == Unsafety::Unsafe => self.is_unsafe = true,\n                     _ => walk_expr(self, e),\n                 },"}, {"sha": "96ab8b0d98e6348c794782bc00eb99be510d74bf", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7919ef0ec5776c72dace7fec1c68551a617505ad/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=7919ef0ec5776c72dace7fec1c68551a617505ad", "patch": "@@ -357,7 +357,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     match entry_type {\n         EntryFnType::Main { .. } => {\n             let start_id = tcx.lang_items().start_fn().unwrap();\n-            let main_ret_ty = tcx.fn_sig(entry_id).output();\n+            let main_ret_ty = tcx.fn_sig(entry_id).no_bound_vars().unwrap().output();\n             let main_ret_ty = main_ret_ty.no_bound_vars().unwrap();\n             let start_instance = ty::Instance::resolve(\n                 tcx,"}]}