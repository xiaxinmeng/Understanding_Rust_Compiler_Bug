{"sha": "6e5637983c155b2914647bb5e437337a44a63a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNTYzNzk4M2MxNTViMjkxNDY0N2JiNWU0MzczMzdhNDRhNjNhN2Q=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T16:23:03Z"}, "message": "Record type mismatches for failed coercions in match etc.", "tree": {"sha": "7329b76bdc2424075fafcac3108d70f1d8bae82c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7329b76bdc2424075fafcac3108d70f1d8bae82c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5637983c155b2914647bb5e437337a44a63a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5637983c155b2914647bb5e437337a44a63a7d", "html_url": "https://github.com/rust-lang/rust/commit/6e5637983c155b2914647bb5e437337a44a63a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5637983c155b2914647bb5e437337a44a63a7d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556c9cebdb91278702263df4ac8c99ec24ab331a", "url": "https://api.github.com/repos/rust-lang/rust/commits/556c9cebdb91278702263df4ac8c99ec24ab331a", "html_url": "https://github.com/rust-lang/rust/commit/556c9cebdb91278702263df4ac8c99ec24ab331a"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "40b4db92639b6619e82b66d38dfafe3b5bd62fba", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e5637983c155b2914647bb5e437337a44a63a7d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5637983c155b2914647bb5e437337a44a63a7d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=6e5637983c155b2914647bb5e437337a44a63a7d", "patch": "@@ -6,11 +6,11 @@\n //! librustc_typeck/check/coercion.rs.\n \n use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n-use hir_def::lang_item::LangItemTarget;\n+use hir_def::{expr::ExprId, lang_item::LangItemTarget};\n \n use crate::{\n-    autoderef, static_lifetime, Canonical, DomainGoal, FnPointer, FnSig, Interner, Solution,\n-    Substitution, Ty, TyBuilder, TyExt, TyKind,\n+    autoderef, infer::TypeMismatch, static_lifetime, Canonical, DomainGoal, FnPointer, FnSig,\n+    Interner, Solution, Substitution, Ty, TyBuilder, TyExt, TyKind,\n };\n \n use super::{InEnvironment, InferOk, InferResult, InferenceContext, TypeError};\n@@ -40,7 +40,7 @@ impl<'a> InferenceContext<'a> {\n     ///    coerce both to function pointers;\n     ///  - if we were concerned with lifetime subtyping, we'd need to look for a\n     ///    least upper bound.\n-    pub(super) fn coerce_merge_branch(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n+    pub(super) fn coerce_merge_branch(&mut self, id: Option<ExprId>, ty1: &Ty, ty2: &Ty) -> Ty {\n         let ty1 = self.resolve_ty_shallow(ty1);\n         let ty2 = self.resolve_ty_shallow(ty2);\n         // Special case: two function types. Try to coerce both to\n@@ -80,7 +80,11 @@ impl<'a> InferenceContext<'a> {\n         } else if self.coerce(&ty1, &ty2) {\n             ty2.clone()\n         } else {\n-            // TODO record a type mismatch\n+            if let Some(id) = id {\n+                self.result\n+                    .type_mismatches\n+                    .insert(id.into(), TypeMismatch { expected: ty1.clone(), actual: ty2.clone() });\n+            }\n             cov_mark::hit!(coerce_merge_fail_fallback);\n             ty1.clone()\n         }"}, {"sha": "08c05c67cc906261d022b6cbee3c1fcd5e9bf135", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6e5637983c155b2914647bb5e437337a44a63a7d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5637983c155b2914647bb5e437337a44a63a7d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=6e5637983c155b2914647bb5e437337a44a63a7d", "patch": "@@ -138,13 +138,14 @@ impl<'a> InferenceContext<'a> {\n                 let mut result_ty = self.table.new_type_var();\n                 let then_ty = self.infer_expr_inner(*then_branch, &expected);\n                 both_arms_diverge &= mem::replace(&mut self.diverges, Diverges::Maybe);\n-                result_ty = self.coerce_merge_branch(&result_ty, &then_ty);\n+                result_ty = self.coerce_merge_branch(Some(*then_branch), &result_ty, &then_ty);\n                 let else_ty = match else_branch {\n                     Some(else_branch) => self.infer_expr_inner(*else_branch, &expected),\n                     None => TyBuilder::unit(),\n                 };\n                 both_arms_diverge &= self.diverges;\n-                result_ty = self.coerce_merge_branch(&result_ty, &else_ty);\n+                // FIXME: create a synthetic `else {}` so we have something to refer to here instead of None?\n+                result_ty = self.coerce_merge_branch(*else_branch, &result_ty, &else_ty);\n \n                 self.diverges = condition_diverges | both_arms_diverge;\n \n@@ -358,7 +359,7 @@ impl<'a> InferenceContext<'a> {\n \n                     let arm_ty = self.infer_expr_inner(arm.expr, &expected);\n                     all_arms_diverge &= self.diverges;\n-                    result_ty = self.coerce_merge_branch(&result_ty, &arm_ty);\n+                    result_ty = self.coerce_merge_branch(Some(arm.expr), &result_ty, &arm_ty);\n                 }\n \n                 self.diverges = matchee_diverges | all_arms_diverge;\n@@ -372,20 +373,21 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Continue { .. } => TyKind::Never.intern(&Interner),\n             Expr::Break { expr, label } => {\n-                let val_ty = if let Some(expr) = expr {\n-                    self.infer_expr(*expr, &Expectation::none())\n-                } else {\n-                    TyBuilder::unit()\n-                };\n-\n                 let last_ty =\n                     if let Some(ctxt) = find_breakable(&mut self.breakables, label.as_ref()) {\n                         ctxt.break_ty.clone()\n                     } else {\n                         self.err_ty()\n                     };\n \n-                let merged_type = self.coerce_merge_branch(&last_ty, &val_ty);\n+                let val_ty = if let Some(expr) = expr {\n+                    self.infer_expr(*expr, &Expectation::none())\n+                } else {\n+                    TyBuilder::unit()\n+                };\n+\n+                // FIXME: create a synthetic `()` during lowering so we have something to refer to here?\n+                let merged_type = self.coerce_merge_branch(*expr, &last_ty, &val_ty);\n \n                 if let Some(ctxt) = find_breakable(&mut self.breakables, label.as_ref()) {\n                     ctxt.break_ty = merged_type;"}]}