{"sha": "8b9c2135d06ee0255d24b18efba8ef9cf92fb67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOWMyMTM1ZDA2ZWUwMjU1ZDI0YjE4ZWZiYThlZjljZjkyZmI2N2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-01T17:35:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-01T17:35:19Z"}, "message": "Fix transmutes between vectors and integers\n\nFixes #1102", "tree": {"sha": "f14d36ffdbd0fd6ffadccfed9a31590401bc0f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14d36ffdbd0fd6ffadccfed9a31590401bc0f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f", "html_url": "https://github.com/rust-lang/rust/commit/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c674c2c46c140e0e260dfe140ac941d3088e7139", "url": "https://api.github.com/repos/rust-lang/rust/commits/c674c2c46c140e0e260dfe140ac941d3088e7139", "html_url": "https://github.com/rust-lang/rust/commit/c674c2c46c140e0e260dfe140ac941d3088e7139"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "2b9ea5273b608221abebd5fb84b6531aada3ee11", "filename": "src/value_and_place.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9c2135d06ee0255d24b18efba8ef9cf92fb67f/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=8b9c2135d06ee0255d24b18efba8ef9cf92fb67f", "patch": "@@ -332,7 +332,7 @@ impl<'tcx> CPlace<'tcx> {\n \n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n-            size: layout.size.bytes() as u32,\n+            size: u32::try_from(layout.size.bytes()).unwrap(),\n             offset: None,\n         });\n         CPlace {\n@@ -530,6 +530,13 @@ impl<'tcx> CPlace<'tcx> {\n             dst_ty: Type,\n         ) {\n             let src_ty = fx.bcx.func.dfg.value_type(data);\n+            assert_eq!(\n+                src_ty.bytes(),\n+                dst_ty.bytes(),\n+                \"write_cvalue_transmute: {:?} -> {:?}\",\n+                src_ty,\n+                dst_ty,\n+            );\n             let data = match (src_ty, dst_ty) {\n                 (_, _) if src_ty == dst_ty => data,\n \n@@ -541,6 +548,17 @@ impl<'tcx> CPlace<'tcx> {\n                 _ if src_ty.is_vector() && dst_ty.is_vector() => {\n                     fx.bcx.ins().raw_bitcast(dst_ty, data)\n                 }\n+                _ if src_ty.is_vector() || dst_ty.is_vector() => {\n+                    // FIXME do something more efficient for transmutes between vectors and integers.\n+                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                        kind: StackSlotKind::ExplicitSlot,\n+                        size: src_ty.bytes(),\n+                        offset: None,\n+                    });\n+                    let ptr = Pointer::stack_slot(stack_slot);\n+                    ptr.store(fx, data, MemFlags::trusted());\n+                    ptr.load(fx, dst_ty, MemFlags::trusted())\n+                }\n                 _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n             };\n             fx.bcx"}]}