{"sha": "38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "node_id": "C_kwDOAAsO6NoAKDM4YmQ0ZmJkYmRiNzdkOTRmOWM3NjU4YWZmMjcwYzY2ZDA0MzlhNmU", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-21T02:09:32Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-21T02:09:32Z"}, "message": "rename to `BoundKind` and add comments", "tree": {"sha": "5447ca7ec7f49067e2103802df70c2cb746fcb16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5447ca7ec7f49067e2103802df70c2cb746fcb16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "html_url": "https://github.com/rust-lang/rust/commit/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4375b361170a63cc73d6f2ddc7a34112eb3f174f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4375b361170a63cc73d6f2ddc7a34112eb3f174f", "html_url": "https://github.com/rust-lang/rust/commit/4375b361170a63cc73d6f2ddc7a34112eb3f174f"}], "stats": {"total": 70, "additions": 41, "deletions": 29}, "files": [{"sha": "e08ba73e0ae31a866a3ac2c445db63c44bb600b6", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "patch": "@@ -33,9 +33,21 @@ pub enum FnCtxt {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum BoundCtxt {\n-    Normal,\n+pub enum BoundKind {\n+    /// Trait bounds in generics bounds and type/trait alias.\n+    /// E.g., `<T: Bound>`, `type A: Bound`, or `where T: Bound`.\n+    Bound,\n+\n+    /// Trait bounds in `impl` type.\n+    /// E.g., `type Foo = impl Bound1 + Bound2 + Bound3`.\n+    Impl,\n+\n+    /// Trait bounds in trait object type.\n+    /// E.g., `dyn Bound1 + Bound2 + Bound3`.\n     TraitObject,\n+\n+    /// Super traits of a trait.\n+    /// E.g., `trait A: B`\n     SuperTraits,\n }\n \n@@ -146,7 +158,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) {\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundCtxt) {\n+    fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {\n         walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n@@ -318,7 +330,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n         ItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n@@ -353,12 +365,12 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             ref items,\n         }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::SuperTraits);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::SuperTraits);\n             walk_list!(visitor, visit_assoc_item, items, AssocCtxt::Trait);\n         }\n         ItemKind::TraitAlias(ref generics, ref bounds) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n         ItemKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n@@ -424,10 +436,10 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             visitor.visit_anon_const(length)\n         }\n         TyKind::TraitObject(ref bounds, ..) => {\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::TraitObject);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::TraitObject);\n         }\n         TyKind::ImplTrait(_, ref bounds) => {\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Impl);\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n@@ -513,7 +525,7 @@ pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'\n             Term::Const(c) => visitor.visit_anon_const(c),\n         },\n         AssocConstraintKind::Bound { ref bounds } => {\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n     }\n }\n@@ -576,7 +588,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n         }\n         ForeignItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ForeignItemKind::MacCall(mac) => {\n@@ -595,7 +607,7 @@ pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericB\n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     visitor.visit_ident(param.ident);\n     walk_list!(visitor, visit_attribute, param.attrs.iter());\n-    walk_list!(visitor, visit_param_bound, &param.bounds, BoundCtxt::Normal);\n+    walk_list!(visitor, visit_param_bound, &param.bounds, BoundKind::Bound);\n     match param.kind {\n         GenericParamKind::Lifetime => (),\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n@@ -622,14 +634,14 @@ pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a\n             ..\n         }) => {\n             visitor.visit_ty(bounded_ty);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n         WherePredicate::RegionPredicate(WhereRegionPredicate {\n             ref lifetime, ref bounds, ..\n         }) => {\n             visitor.visit_lifetime(lifetime);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, .. }) => {\n             visitor.visit_ty(lhs_ty);\n@@ -682,7 +694,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n         }\n         AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds, BoundCtxt::Normal);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         AssocItemKind::MacCall(mac) => {"}, {"sha": "058a0f975a7b39be565f61803af4c906740057fd", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "patch": "@@ -8,7 +8,7 @@\n \n use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, BoundCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n@@ -1231,7 +1231,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n                 self.with_banned_tilde_const(|this| {\n-                    walk_list!(this, visit_param_bound, bounds, BoundCtxt::SuperTraits)\n+                    walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits)\n                 });\n                 walk_list!(self, visit_assoc_item, items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n@@ -1459,10 +1459,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_generic_param(self, param);\n     }\n \n-    fn visit_param_bound(&mut self, bound: &'a GenericBound, ctxt: BoundCtxt) {\n+    fn visit_param_bound(&mut self, bound: &'a GenericBound, ctxt: BoundKind) {\n         if let GenericBound::Trait(ref poly, modify) = *bound {\n             match (ctxt, modify) {\n-                (BoundCtxt::SuperTraits, TraitBoundModifier::Maybe) => {\n+                (BoundKind::SuperTraits, TraitBoundModifier::Maybe) => {\n                     let mut err = self.err_handler().struct_span_err(\n                         poly.span,\n                         &format!(\"`?Trait` is not permitted in supertraits\"),\n@@ -1471,7 +1471,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     err.note(&format!(\"traits are `?{}` by default\", path_str));\n                     err.emit();\n                 }\n-                (BoundCtxt::TraitObject, TraitBoundModifier::Maybe) => {\n+                (BoundKind::TraitObject, TraitBoundModifier::Maybe) => {\n                     let mut err = self.err_handler().struct_span_err(\n                         poly.span,\n                         &format!(\"`?Trait` is not permitted in trait object types\"),\n@@ -1661,7 +1661,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 self.with_tilde_const_allowed(|this| {\n                     this.visit_generics(generics);\n-                    walk_list!(this, visit_param_bound, bounds, BoundCtxt::Normal);\n+                    walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n                 });\n                 walk_list!(self, visit_ty, ty);\n             }"}, {"sha": "48b79809c1b97b0711aa34043902dfff7f239fa6", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "patch": "@@ -76,7 +76,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &GenericBound, _ctxt: BoundCtxt) {\n+    fn visit_param_bound(&mut self, bounds: &GenericBound, _ctxt: BoundKind) {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }"}, {"sha": "237a8abfabe7e918feb33896f8cde5d6956f6297", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "patch": "@@ -3,7 +3,7 @@\n // completely accurate (some things might be counted twice, others missed).\n \n use rustc_ast::visit as ast_visit;\n-use rustc_ast::visit::BoundCtxt;\n+use rustc_ast::visit::BoundKind;\n use rustc_ast::{self as ast, AttrId, NodeId};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -303,7 +303,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_assoc_item(self, item, ctxt);\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound, _ctxt: BoundCtxt) {\n+    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound, _ctxt: BoundKind) {\n         self.record(\"GenericBound\", Id::None, bounds);\n         ast_visit::walk_param_bound(self, bounds)\n     }"}, {"sha": "8e5d0f37ab609d58bd36acc3be95cbba212696c0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "patch": "@@ -12,7 +12,7 @@ use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, BoundCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -835,7 +835,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         this.visit_generic_param_vec(&bound_generic_params, false);\n                         this.visit_ty(bounded_ty);\n                         for bound in bounds {\n-                            this.visit_param_bound(bound, BoundCtxt::Normal)\n+                            this.visit_param_bound(bound, BoundKind::Bound)\n                         }\n                     },\n                 );\n@@ -1026,12 +1026,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 match param.kind {\n                     GenericParamKind::Lifetime => {\n                         for bound in &param.bounds {\n-                            this.visit_param_bound(bound, BoundCtxt::Normal);\n+                            this.visit_param_bound(bound, BoundKind::Bound);\n                         }\n                     }\n                     GenericParamKind::Type { ref default } => {\n                         for bound in &param.bounds {\n-                            this.visit_param_bound(bound, BoundCtxt::Normal);\n+                            this.visit_param_bound(bound, BoundKind::Bound);\n                         }\n \n                         if let Some(ref ty) = default {\n@@ -1496,7 +1496,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n                             |this| {\n                                 this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds, BoundCtxt::SuperTraits);\n+                                walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits);\n \n                                 let walk_assoc_item =\n                                     |this: &mut Self,\n@@ -1580,7 +1580,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n                             |this| {\n                                 this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds, BoundCtxt::Normal);\n+                                walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n                             },\n                         );\n                     },"}]}