{"sha": "c58c53274401acdc739f177aa3e408241e2e52d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OGM1MzI3NDQwMWFjZGM3MzlmMTc3YWEzZTQwODI0MWUyZTUyZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T16:28:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T16:28:57Z"}, "message": "Auto merge of #70989 - eddyb:mir-opt-32-pr-ci, r=Mark-Simulacrum\n\n ci: run mir-opt tests on PR CI also as 32-bit (for `EMIT_MIR_FOR_EACH_BIT_WIDTH`).\n\nBackground: #69916 and [`src/test/mir-opt/README.md`](https://github.com/rust-lang/rust/blob/master/src/test/mir-opt/README.md):\n> By default 32 bit and 64 bit targets use the same dump files, which can be problematic in the\npresence of pointers in constants or other bit width dependent things. In that case you can add\n>\n> ```\n> // EMIT_MIR_FOR_EACH_BIT_WIDTH\n> ```\n>\n> to your test, causing separate files to be generated for 32bit and 64bit systems.\n\nHowever, if you change the output of such a test (intentionally or not), or if you add a test and it varies between 32-bit and 64-bit platforms, you have to run this command (for a x64 linux host):\n`./x.py test --stage 1 --target x86_64-unknown-linux-gnu --target i686-unknown-linux-gnu --bless  src/test/mir-opt`\n\nOtherwise, bors trying to merge the PR will fail, since we test 32-bit targets there.\nBut we don't on PR CI, which means there's no way the PR author would know (unless they were burnt by this already and know what to look for).\n\nThis PR resolves that by running `mir-opt` tests for ~~`i686-unknown-linux-gnu`~~, on PR CI.\n**EDIT**: switched to `armv5te-unknown-linux-gnueabi` to work around LLVM 7 crashes (see https://github.com/rust-lang/compiler-builtins/pull/311#issuecomment-612270089), found during testing.\n\ncc @rust-lang/wg-mir-opt @rust-lang/infra", "tree": {"sha": "f923c7b9b7852ed83e294cdb9932d0440cc8137f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f923c7b9b7852ed83e294cdb9932d0440cc8137f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58c53274401acdc739f177aa3e408241e2e52d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c53274401acdc739f177aa3e408241e2e52d8", "html_url": "https://github.com/rust-lang/rust/commit/c58c53274401acdc739f177aa3e408241e2e52d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58c53274401acdc739f177aa3e408241e2e52d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5179ebe2064e15196c5be1f8df950736140b8fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5179ebe2064e15196c5be1f8df950736140b8fdd", "html_url": "https://github.com/rust-lang/rust/commit/5179ebe2064e15196c5be1f8df950736140b8fdd"}, {"sha": "cb6a5609b365779e62b404cbb730fa9e2a8e88b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6a5609b365779e62b404cbb730fa9e2a8e88b9", "html_url": "https://github.com/rust-lang/rust/commit/cb6a5609b365779e62b404cbb730fa9e2a8e88b9"}], "stats": {"total": 121, "additions": 111, "deletions": 10}, "files": [{"sha": "f70c3de2ece8309082209923e154d87cc1521d2e", "filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "patch": "@@ -2,6 +2,7 @@ FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n+  g++-arm-linux-gnueabi \\\n   make \\\n   file \\\n   curl \\\n@@ -29,7 +30,23 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-ENV SCRIPT python2.7 ../x.py test --exclude src/tools/tidy && python2.7 ../x.py test src/tools/tidy\n+ENV SCRIPT python2.7 ../x.py test --exclude src/tools/tidy && \\\n+           # Run the `mir-opt` tests again but this time for a 32-bit target.\n+           # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n+           # both 32-bit and 64-bit outputs updated by the PR author, before\n+           # the PR is approved and tested for merging.\n+           # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n+           # despite having different output on 32-bit vs 64-bit targets.\n+           #\n+           # HACK(eddyb) `armv5te` is used (not `i686`) to support older LLVM than LLVM 9:\n+           # https://github.com/rust-lang/compiler-builtins/pull/311#issuecomment-612270089.\n+           # This also requires `--pass=build` because we can't execute the tests\n+           # on the `x86_64` host when they're built as `armv5te` binaries.\n+           # (we're only interested in the MIR output, so this doesn't matter)\n+           python2.7 ../x.py test src/test/mir-opt --pass=build \\\n+                                  --target=armv5te-unknown-linux-gnueabi && \\\n+           # Run tidy at the very end, after all the other tests.\n+           python2.7 ../x.py test src/tools/tidy\n \n # The purpose of this container isn't to test with debug assertions and\n # this is run on all PRs, so let's get speedier builds by disabling these extra"}, {"sha": "77834e9661cecbf9376cea862b84921539d07d85", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n-// only-64bit FIXME: the mir representation of RawVec depends on ptr size\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n #![feature(box_syntax)]\n \n // EMIT_MIR rustc.main.Inline.diff"}, {"sha": "721b37778acccd7888268e286dc09b6e1d3c71eb", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "patch": "@@ -0,0 +1,76 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      }\n++     scope 2 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n+                                           // ty::Const\n+-                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n+-                                          // + val: Value(Scalar(<ZST>))\n++                                          // + ty: alloc::raw_vec::RawVec<u32>\n++                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n+-                                          // + user_ty: UserType(1)\n+-                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + user_ty: UserType(0)\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n++         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n++         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         _0 = ();                         // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+      }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      }\n+  \n+      bb2: {\n+-         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = ();                         // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     }\n+- \n+-     bb4 (cleanup): {\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // ty::Const\n+-                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "a0db20cbb743bd3438e1eab73e0b14e44b2797a5", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "previous_filename": "src/test/mir-opt/inline/inline-into-box-place/rustc.main.Inline.diff"}, {"sha": "1aca16ca80451327a2db4f2d2cb17b0ff2a0c7e0", "filename": "src/test/ui/issues/issue-69841.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fui%2Fissues%2Fissue-69841.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftest%2Fui%2Fissues%2Fissue-69841.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69841.rs?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "patch": "@@ -2,6 +2,7 @@\n // LLVM bug which needed a fix to be backported.\n \n // run-pass\n+// no-system-llvm\n \n fn main() {\n     let buffer = [49u8, 10];"}, {"sha": "70091bdbe6386233f6ee66678c55750f64ba616e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58c53274401acdc739f177aa3e408241e2e52d8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c58c53274401acdc739f177aa3e408241e2e52d8", "patch": "@@ -357,14 +357,15 @@ impl<'test> TestCx<'test> {\n             Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => {\n                 WillExecute::Yes\n             }\n-            Ui => WillExecute::No,\n+            MirOpt if pm == Some(PassMode::Run) => WillExecute::Yes,\n+            Ui | MirOpt => WillExecute::No,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n \n     fn should_run_successfully(&self, pm: Option<PassMode>) -> bool {\n         match self.config.mode {\n-            Ui => pm == Some(PassMode::Run),\n+            Ui | MirOpt => pm == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -3059,18 +3060,24 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_mir_opt_test(&self) {\n-        let proc_res = self.compile_test(WillExecute::Yes, EmitMetadata::No);\n+        let pm = self.pass_mode();\n+        let should_run = self.should_run(pm);\n+        let emit_metadata = self.should_emit_metadata(pm);\n+        let proc_res = self.compile_test(should_run, emit_metadata);\n \n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"compilation failed!\", &proc_res);\n         }\n \n-        let proc_res = self.exec_compiled_test();\n+        self.check_mir_dump();\n \n-        if !proc_res.status.success() {\n-            self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+        if let WillExecute::Yes = should_run {\n+            let proc_res = self.exec_compiled_test();\n+\n+            if !proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n+            }\n         }\n-        self.check_mir_dump();\n     }\n \n     fn check_mir_dump(&self) {\n@@ -3148,7 +3155,7 @@ impl<'test> TestCx<'test> {\n                     }\n                     let expected_string = fs::read_to_string(&expected_file).unwrap();\n                     if dumped_string != expected_string {\n-                        print_diff(&dumped_string, &expected_string, 3);\n+                        print_diff(&expected_string, &dumped_string, 3);\n                         panic!(\n                             \"Actual MIR output differs from expected MIR output {}\",\n                             expected_file.display()"}]}