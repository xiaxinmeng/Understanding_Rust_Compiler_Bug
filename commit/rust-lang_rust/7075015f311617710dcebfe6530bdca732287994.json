{"sha": "7075015f311617710dcebfe6530bdca732287994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNzUwMTVmMzExNjE3NzEwZGNlYmZlNjUzMGJkY2E3MzIyODc5OTQ=", "commit": {"author": {"name": "Abroskin Alexander", "email": "arkweid@evilmartians.com", "date": "2019-01-09T10:49:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-09T10:49:40Z"}, "message": "Merge branch 'master' into add-lints-aseert-checks", "tree": {"sha": "40f2427f7fe52a8a8b53b884cb7db061c099a6eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f2427f7fe52a8a8b53b884cb7db061c099a6eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7075015f311617710dcebfe6530bdca732287994", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcNdHECRBK7hj4Ov3rIwAAdHIIAEkaPHAbBmOJhzBEUAl2K8vn\np5BC+eTQx5TKwPPqLY6GYaiAa8Mjq7GwUxWdBm0PmzUFgav0XE76z2q/adcHkY6p\nxQgAWvJEECoMvxrv7iDm78hVNfk/Uw1QYuCPHVYK6w0Rfc0cVi+SdRaEwwrl7dIV\nE+o336xD8NqPfsKLoAS28De1/EhgdlWyU/nNSzbpPWZdwEJ6rSJNqSfv3Ml61u2k\nrxDFhb6edlgpY9RgbdJBN5KTYxuqw7/DlqtQaOl66QUTBRF4UpNWmFYCgLF45YkV\n+6YpY/UB9EoPdctRx3hvxDAWa7Ryg6QdIVz8HeUTIeAdMXpJtPZvBYZ/c/MUFvU=\n=ced9\n-----END PGP SIGNATURE-----\n", "payload": "tree 40f2427f7fe52a8a8b53b884cb7db061c099a6eb\nparent 906b51637ca4bfa0cf68b909160937546234a2e2\nparent 5b8496603c4db231719b67c1f88b409e7b278e5e\nauthor Abroskin Alexander <arkweid@evilmartians.com> 1547030980 +0300\ncommitter GitHub <noreply@github.com> 1547030980 +0300\n\nMerge branch 'master' into add-lints-aseert-checks"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7075015f311617710dcebfe6530bdca732287994", "html_url": "https://github.com/rust-lang/rust/commit/7075015f311617710dcebfe6530bdca732287994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7075015f311617710dcebfe6530bdca732287994/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "906b51637ca4bfa0cf68b909160937546234a2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/906b51637ca4bfa0cf68b909160937546234a2e2", "html_url": "https://github.com/rust-lang/rust/commit/906b51637ca4bfa0cf68b909160937546234a2e2"}, {"sha": "5b8496603c4db231719b67c1f88b409e7b278e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8496603c4db231719b67c1f88b409e7b278e5e", "html_url": "https://github.com/rust-lang/rust/commit/5b8496603c4db231719b67c1f88b409e7b278e5e"}], "stats": {"total": 197, "additions": 173, "deletions": 24}, "files": [{"sha": "14c1b0e4d3f6b6247d462b05e78953f08567ca80", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -635,6 +635,7 @@ All notable changes to this project will be documented in this file.\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n [`cast_precision_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\n [`cast_ptr_alignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment\n+[`cast_ref_to_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ref_to_mut\n [`cast_sign_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\n [`char_lit_as_u8`]: https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8\n [`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp"}, {"sha": "8ca10da416ddba62696cc2cba4d5e31d621807d4", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -7,13 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-<<<<<<< HEAD\n [There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n-||||||| merged common ancestors\n-[There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n-=======\n-[There are 291 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n->>>>>>> run ./util/dev update_lints\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "1c362313e7794ddc7e7c91045227a72eb7321c6f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -487,6 +487,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box ptr_offset_with_cast::Pass);\n     reg.register_late_lint_pass(box redundant_clone::RedundantClone);\n     reg.register_late_lint_pass(box slow_vector_initialization::Pass);\n+    reg.register_late_lint_pass(box types::RefToMut);\n     reg.register_late_lint_pass(box assertions_on_constants::AssertionsOnConstants);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n@@ -761,6 +762,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::BOX_VEC,\n         types::CAST_LOSSLESS,\n         types::CAST_PTR_ALIGNMENT,\n+        types::CAST_REF_TO_MUT,\n         types::CHAR_LIT_AS_U8,\n         types::FN_TO_NUMERIC_CAST,\n         types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n@@ -993,6 +995,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::WRONG_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::CAST_PTR_ALIGNMENT,\n+        types::CAST_REF_TO_MUT,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,"}, {"sha": "832311dc0279e518c94e49b93027c13f8df34359", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -27,7 +27,7 @@ use syntax::source_map::Span;\n /// It detects both the case when a manual\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n /// implementation is required and also when it can be created with\n-/// `#[derive(Default)]\n+/// `#[derive(Default)]`\n ///\n /// **Why is this bad?** The user might expect to be able to use\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) as the"}, {"sha": "f9ed38e52a02235f34cfd4522ad4c0cbd758ebd1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -2240,3 +2240,64 @@ impl<'a, 'b, 'tcx: 'a + 'b> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }\n+\n+/// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n+///\n+/// **Why is this bad?** It\u2019s basically guaranteed to be undefined behaviour.\n+/// `UnsafeCell` is the only way to obtain aliasable data that is considered\n+/// mutable.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn x(r: &i32) {\n+///     unsafe {\n+///         *(r as *const _ as *mut _) += 1;\n+///     }\n+/// }\n+/// ```\n+///\n+/// Instead consider using interior mutability types.\n+///\n+/// ```rust\n+/// fn x(r: &UnsafeCell<i32>) {\n+///     unsafe {\n+///         *r.get() += 1;\n+///     }\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub CAST_REF_TO_MUT,\n+    correctness,\n+    \"a cast of reference to a mutable pointer\"\n+}\n+\n+pub struct RefToMut;\n+\n+impl LintPass for RefToMut {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(CAST_REF_TO_MUT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.node;\n+            if let ExprKind::Cast(e, t) = &e.node;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutMutable, .. }) = t.node;\n+            if let ExprKind::Cast(e, t) = &e.node;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::MutImmutable, .. }) = t.node;\n+            if let ty::Ref(..) = cx.tables.node_id_to_type(e.hir_id).sty;\n+            then {\n+                span_lint(\n+                    cx,\n+                    CAST_REF_TO_MUT,\n+                    expr.span,\n+                    \"casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "5ec809f1b76cdcaa9ae1c0c4140233b12213b22d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -10,13 +10,12 @@\n use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc::hir::def::{CtorKind, Def};\n-use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n-use syntax::ast::NodeId;\n use syntax_pos::symbol::keywords::SelfUpper;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n@@ -29,7 +28,6 @@ use syntax_pos::symbol::keywords::SelfUpper;\n /// **Known problems:**\n /// - False positive when using associated types (#2843)\n /// - False positives in some situations when using generics (#3410)\n-/// - False positive when type from outer function can't be used (#3463)\n ///\n /// **Example:**\n /// ```rust\n@@ -242,8 +240,18 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn visit_use(&mut self, _path: &'tcx Path, _id: NodeId, _hir_id: HirId) {\n-        // Don't check use statements\n+    fn visit_item(&mut self, item: &'tcx Item) {\n+        match item.node {\n+            ItemKind::Use(..)\n+            | ItemKind::Static(..)\n+            | ItemKind::Enum(..)\n+            | ItemKind::Struct(..)\n+            | ItemKind::Union(..)\n+            | ItemKind::Impl(..) => {\n+                // Don't check statements that shadow `Self` or where `Self` can't be used\n+            },\n+            _ => walk_item(self, item),\n+        }\n     }\n \n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {"}, {"sha": "967e8e4673963a6abed18c5a907972e1a49dd479", "filename": "tests/ui/cast_ref_to_mut.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::cast_ref_to_mut)]\n+#![allow(clippy::no_effect)]\n+\n+extern \"C\" {\n+    // NB. Mutability can be easily incorrect in FFI calls, as\n+    // in C, the default are mutable pointers.\n+    fn ffi(c: *mut u8);\n+    fn int_ffi(c: *mut i32);\n+}\n+\n+fn main() {\n+    let s = String::from(\"Hello\");\n+    let a = &s;\n+    unsafe {\n+        let num = &3i32;\n+        let mut_num = &mut 3i32;\n+        // Should be warned against\n+        (*(a as *const _ as *mut String)).push_str(\" world\");\n+        *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+        *(a as *const _ as *mut String) += \" world\";\n+        // Shouldn't be warned against\n+        println!(\"{}\", *(num as *const _ as *const i16));\n+        println!(\"{}\", *(mut_num as *mut _ as *mut i16));\n+        ffi(a.as_ptr() as *mut _);\n+        int_ffi(num as *const _ as *mut _);\n+        int_ffi(&3 as *const _ as *mut _);\n+        let mut value = 3;\n+        let value: *const i32 = &mut value;\n+        *(value as *const i16 as *mut i16) = 42;\n+    }\n+}"}, {"sha": "448a66cfcce051702313210d4baab22cef90f6ab", "filename": "tests/ui/cast_ref_to_mut.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.stderr?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -0,0 +1,22 @@\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:18:9\n+   |\n+LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`\n+\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:19:9\n+   |\n+LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+  --> $DIR/cast_ref_to_mut.rs:20:9\n+   |\n+LL |         *(a as *const _ as *mut String) += \" world\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "a117ce5894b8536634c9e818ab6e4862497bff44", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -242,6 +242,34 @@ mod macros {\n     }\n }\n \n+mod nesting {\n+    struct Foo {}\n+    impl Foo {\n+        fn foo() {\n+            use self::Foo; // Can't use Self here\n+            struct Bar {\n+                foo: Foo, // Foo != Self\n+            }\n+\n+            impl Bar {\n+                fn bar() -> Bar {\n+                    Bar { foo: Foo {} }\n+                }\n+            }\n+        }\n+    }\n+\n+    enum Enum {\n+        A,\n+    }\n+    impl Enum {\n+        fn method() {\n+            use self::Enum::*; // Issue 3425\n+            static STATIC: Enum = Enum::A; // Can't use Self as type\n+        }\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;\n@@ -255,14 +283,3 @@ mod issue3410 {\n         fn a(_: Vec<A>) {}\n     }\n }\n-\n-mod issue3425 {\n-    enum Enum {\n-        A,\n-    }\n-    impl Enum {\n-        fn a() {\n-            use self::Enum::*;\n-        }\n-    }\n-}"}, {"sha": "72b60db7fd2de5e124e281b0a1c65aa4eaf41def", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7075015f311617710dcebfe6530bdca732287994/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=7075015f311617710dcebfe6530bdca732287994", "patch": "@@ -150,5 +150,17 @@ LL |                 Foo {}\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n-error: aborting due to 24 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:255:29\n+   |\n+LL |                 fn bar() -> Bar {\n+   |                             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:256:21\n+   |\n+LL |                     Bar { foo: Foo {} }\n+   |                     ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 26 previous errors\n "}]}