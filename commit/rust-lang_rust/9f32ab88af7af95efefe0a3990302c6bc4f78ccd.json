{"sha": "9f32ab88af7af95efefe0a3990302c6bc4f78ccd", "node_id": "C_kwDOAAsO6NoAKDlmMzJhYjg4YWY3YWY5NWVmZWZlMGEzOTkwMzAyYzZiYzRmNzhjY2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-10-09T15:08:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-09T15:08:41Z"}, "message": "Rollup merge of #89664 - timClicks:51430-document-boxed-conversions, r=m-ou-se\n\nAdd documentation to boxed conversions\n\nAmong other changes, documents whether allocations are necessary\nto complete the type conversion.\n\nPart of #51430, supersedes #89199", "tree": {"sha": "2afed7471e64bae4bc5a25369d57ca388b1d13fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2afed7471e64bae4bc5a25369d57ca388b1d13fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f32ab88af7af95efefe0a3990302c6bc4f78ccd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYbB5CRBK7hj4Ov3rIwAA4yAIACoe2iDaRd/XJdmAgAzsn4q2\nQ/y9dmZ1s7P1Cdb19ZVnaNG6aRLDU5iBN6hFg/yt3vNrqooB9JL6CfPeGsZNiM8/\nylm2yMYUYlmy+mD7eBUL09NyJp3kJBy+sjgAyPWpiDfJFHFYGBDr0M/fWYyqyZkp\nWrWffkybOTukhvWbuafY2+mHaNsrAhP6pJv5eqsAarKy89z9cj3jjWSYPChORiM6\n4o6pWy0DUxs8E+IIJSaY5xIbzmFZu8SU8rYLGVc3zEXfIG+gekDfLdJzUPl94D6N\nFNjwQezPSGniI22GYIsJPh81O3WwrCm+79Qt+J73JLhIS7W7xQ960YrtPLFUyGM=\n=NHEd\n-----END PGP SIGNATURE-----\n", "payload": "tree 2afed7471e64bae4bc5a25369d57ca388b1d13fc\nparent 21a5101e21a770a90f8e322569ac38717d48c0cb\nparent 020ec0a03967f16ca5a4ba2a33472a8da912986d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1633792121 +0200\ncommitter GitHub <noreply@github.com> 1633792121 +0200\n\nRollup merge of #89664 - timClicks:51430-document-boxed-conversions, r=m-ou-se\n\nAdd documentation to boxed conversions\n\nAmong other changes, documents whether allocations are necessary\nto complete the type conversion.\n\nPart of #51430, supersedes #89199\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f32ab88af7af95efefe0a3990302c6bc4f78ccd", "html_url": "https://github.com/rust-lang/rust/commit/9f32ab88af7af95efefe0a3990302c6bc4f78ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f32ab88af7af95efefe0a3990302c6bc4f78ccd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21a5101e21a770a90f8e322569ac38717d48c0cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/21a5101e21a770a90f8e322569ac38717d48c0cb", "html_url": "https://github.com/rust-lang/rust/commit/21a5101e21a770a90f8e322569ac38717d48c0cb"}, {"sha": "020ec0a03967f16ca5a4ba2a33472a8da912986d", "url": "https://api.github.com/repos/rust-lang/rust/commits/020ec0a03967f16ca5a4ba2a33472a8da912986d", "html_url": "https://github.com/rust-lang/rust/commit/020ec0a03967f16ca5a4ba2a33472a8da912986d"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "85f908a7f5c7b6cd49606661bf943a5d576695da", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9f32ab88af7af95efefe0a3990302c6bc4f78ccd/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f32ab88af7af95efefe0a3990302c6bc4f78ccd/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=9f32ab88af7af95efefe0a3990302c6bc4f78ccd", "patch": "@@ -1277,6 +1277,7 @@ impl<T> From<T> for Box<T> {\n     /// from the stack into it.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let x = 5;\n     /// let boxed = Box::new(5);\n@@ -1330,6 +1331,12 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl<T: Copy> From<Cow<'_, [T]>> for Box<[T]> {\n+    /// Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and copies the\n+    /// underlying slice. Otherwise, it will try to reuse the owned\n+    /// `Vec`'s allocation.\n     #[inline]\n     fn from(cow: Cow<'_, [T]>) -> Box<[T]> {\n         match cow {\n@@ -1348,6 +1355,7 @@ impl From<&str> for Box<str> {\n     /// and performs a copy of `s`.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<str> = Box::from(\"hello\");\n     /// println!(\"{}\", boxed);\n@@ -1361,6 +1369,29 @@ impl From<&str> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, str>> for Box<str> {\n+    /// Converts a `Cow<'_, str>` into a `Box<str>`\n+    ///\n+    /// When `cow` is the `Cow::Borrowed` variant, this\n+    /// conversion allocates on the heap and copies the\n+    /// underlying `str`. Otherwise, it will try to reuse the owned\n+    /// `String`'s allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let unboxed = Cow::Borrowed(\"hello\");\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let unboxed = Cow::Owned(\"hello\".to_string());\n+    /// let boxed: Box<str> = Box::from(unboxed);\n+    /// println!(\"{}\", boxed);\n+    /// ```\n     #[inline]\n     fn from(cow: Cow<'_, str>) -> Box<str> {\n         match cow {\n@@ -1403,6 +1434,7 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// This conversion moves the array to newly heap-allocated memory.\n     ///\n     /// # Examples\n+    ///\n     /// ```rust\n     /// let boxed: Box<[u8]> = Box::from([4, 2]);\n     /// println!(\"{:?}\", boxed);\n@@ -1416,6 +1448,15 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     type Error = Box<[T]>;\n \n+    /// Attempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n+    ///\n+    /// The conversion occurs in-place and does not require a\n+    /// new memory allocation.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns the old `Box<[T]>` in the `Err` variant if\n+    /// `boxed_slice.len()` does not equal `N`.\n     fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {\n         if boxed_slice.len() == N {\n             Ok(unsafe { Box::from_raw(Box::into_raw(boxed_slice) as *mut [T; N]) })"}]}