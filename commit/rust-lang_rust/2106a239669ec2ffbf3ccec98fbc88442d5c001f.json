{"sha": "2106a239669ec2ffbf3ccec98fbc88442d5c001f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMDZhMjM5NjY5ZWMyZmZiZjNjY2VjOThmYmM4ODQ0MmQ1YzAwMWY=", "commit": {"author": {"name": "Michael Zhang", "email": "hmperson1@gmail.com", "date": "2019-10-17T23:11:51Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2019-10-17T23:13:32Z"}, "message": "Update help text in `inefficient_to_string`\n\nCo-Authored-By: Manish Goregaokar <manishsmail@gmail.com>", "tree": {"sha": "2c1f9c9d5109d0bb59ebc36fc85f775fb26ed9ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1f9c9d5109d0bb59ebc36fc85f775fb26ed9ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2106a239669ec2ffbf3ccec98fbc88442d5c001f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAl2o9Z8UHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic4amAf+NQcjMYU4RVo2ijoH/3pq/xVLY7lb\nxOmP9/0bM/N8XSD/34IX9H1u41ywBAmJ7xIy0ppWmTJnk3mKqofum7Tpjq478/WA\nYlmVRxrcMJAQX3uv66bgRjw33nQOkJQDXeBiFXpkBxgu1S/AKw54rQFpRMfdHo8x\nzuoEJrcXZ5tEgXlbYW+yUMm2pycQ9FuwVurUJwy04b6BvtdBN/BBvJy6aG7/xU/t\n0IKRFQIPg0RFi5pk1n1le4+5PrONRpcrB/7O8OaZDsrgf2yp3p7r4/byUFCjHzhX\ne7eeZFZC49GxJgR1M4ig4VJrlfPipanXNw+uWxxp+D0yNU570cSWrKkq8w==\n=Lwwb\n-----END PGP SIGNATURE-----", "payload": "tree 2c1f9c9d5109d0bb59ebc36fc85f775fb26ed9ca\nparent ffb53e74571f4b179f265b846cfa443e527621fb\nauthor Michael Zhang <hmperson1@gmail.com> 1571353911 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1571354012 -0400\n\nUpdate help text in `inefficient_to_string`\n\nCo-Authored-By: Manish Goregaokar <manishsmail@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2106a239669ec2ffbf3ccec98fbc88442d5c001f", "html_url": "https://github.com/rust-lang/rust/commit/2106a239669ec2ffbf3ccec98fbc88442d5c001f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2106a239669ec2ffbf3ccec98fbc88442d5c001f/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb53e74571f4b179f265b846cfa443e527621fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb53e74571f4b179f265b846cfa443e527621fb", "html_url": "https://github.com/rust-lang/rust/commit/ffb53e74571f4b179f265b846cfa443e527621fb"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "9e87ab3ad3a99171656e40fdae94bdbcba0a3f2e", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2106a239669ec2ffbf3ccec98fbc88442d5c001f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2106a239669ec2ffbf3ccec98fbc88442d5c001f/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=2106a239669ec2ffbf3ccec98fbc88442d5c001f", "patch": "@@ -24,7 +24,7 @@ pub fn lint<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &hir::Expr, arg: &hir::Expr,\n                 &format!(\"calling `to_string` on `{}`\", arg_ty),\n                 |db| {\n                     db.help(&format!(\n-                        \"`{}` implements `ToString` through the blanket impl, but `{}` specializes `ToString` directly\",\n+                        \"`{}` implements `ToString` through a slower blanket impl, but `{}` has a fast specialization of `ToString`\",\n                         self_ty, deref_self_ty\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;"}, {"sha": "20788f6f6cc9ac439c8f1067c5993a654c41b55d", "filename": "tests/ui/inefficient_to_string.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2106a239669ec2ffbf3ccec98fbc88442d5c001f/tests%2Fui%2Finefficient_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2106a239669ec2ffbf3ccec98fbc88442d5c001f/tests%2Fui%2Finefficient_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finefficient_to_string.stderr?ref=2106a239669ec2ffbf3ccec98fbc88442d5c001f", "patch": "@@ -9,47 +9,47 @@ note: lint level defined here\n    |\n LL | #![deny(clippy::inefficient_to_string)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: `&str` implements `ToString` through the blanket impl, but `str` specializes `ToString` directly\n+   = help: `&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&str`\n   --> $DIR/inefficient_to_string.rs:13:21\n    |\n LL |     let _: String = rrrstr.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstr).to_string()`\n    |\n-   = help: `&&str` implements `ToString` through the blanket impl, but `str` specializes `ToString` directly\n+   = help: `&&str` implements `ToString` through a slower blanket impl, but `str` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&std::string::String`\n   --> $DIR/inefficient_to_string.rs:21:21\n    |\n LL |     let _: String = rrstring.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrstring).to_string()`\n    |\n-   = help: `&std::string::String` implements `ToString` through the blanket impl, but `std::string::String` specializes `ToString` directly\n+   = help: `&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&std::string::String`\n   --> $DIR/inefficient_to_string.rs:22:21\n    |\n LL |     let _: String = rrrstring.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrstring).to_string()`\n    |\n-   = help: `&&std::string::String` implements `ToString` through the blanket impl, but `std::string::String` specializes `ToString` directly\n+   = help: `&&std::string::String` implements `ToString` through a slower blanket impl, but `std::string::String` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:30:21\n    |\n LL |     let _: String = rrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(*rrcow).to_string()`\n    |\n-   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through the blanket impl, but `std::borrow::Cow<'_, str>` specializes `ToString` directly\n+   = help: `&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: calling `to_string` on `&&&std::borrow::Cow<'_, str>`\n   --> $DIR/inefficient_to_string.rs:31:21\n    |\n LL |     let _: String = rrrcow.to_string();\n    |                     ^^^^^^^^^^^^^^^^^^ help: try dereferencing the receiver: `(**rrrcow).to_string()`\n    |\n-   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through the blanket impl, but `std::borrow::Cow<'_, str>` specializes `ToString` directly\n+   = help: `&&std::borrow::Cow<'_, str>` implements `ToString` through a slower blanket impl, but `std::borrow::Cow<'_, str>` has a fast specialization of `ToString`\n \n error: aborting due to 6 previous errors\n "}]}