{"sha": "7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZTQ0Zjc3ZjQ1ODBiNjBjZjlmMjJlMGFiMzUxNTZjMGNlMTI4MjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-12-20T19:16:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-20T19:16:17Z"}, "message": "Rollup merge of #37761 - christophebiocca:borrow-stdlib-fn-refactor, r=alexcrichton\n\nUse Borrow for binary_search and contains methods in the standard library\n\nFixes all standard library methods in #32822 that can be fixed without backwards compatibility issues.", "tree": {"sha": "f6e5960fc1e9cb3610f4070eda309122324c6207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e5960fc1e9cb3610f4070eda309122324c6207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "html_url": "https://github.com/rust-lang/rust/commit/7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe44f77f4580b60cf9f22e0ab35156c0ce12824/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "html_url": "https://github.com/rust-lang/rust/commit/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a"}, {"sha": "c470d4a415fe6f091170cf7e55926e252252d0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c470d4a415fe6f091170cf7e55926e252252d0f9", "html_url": "https://github.com/rust-lang/rust/commit/c470d4a415fe6f091170cf7e55926e252252d0f9"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "e0a49e2ae45d0b895af72f3018d6276e00106125", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fe44f77f4580b60cf9f22e0ab35156c0ce12824/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe44f77f4580b60cf9f22e0ab35156c0ce12824/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=7fe44f77f4580b60cf9f22e0ab35156c0ce12824", "patch": "@@ -33,6 +33,7 @@\n // * The `raw` and `bytes` submodules.\n // * Boilerplate trait implementations.\n \n+use borrow::Borrow;\n use cmp::Ordering::{self, Less, Equal, Greater};\n use cmp;\n use fmt;\n@@ -100,15 +101,17 @@ pub trait SliceExt {\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn as_ptr(&self) -> *const Self::Item;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn binary_search(&self, x: &Self::Item) -> Result<usize, usize>\n-        where Self::Item: Ord;\n+    fn binary_search<Q: ?Sized>(&self, x: &Q) -> Result<usize, usize>\n+        where Self::Item: Borrow<Q>,\n+              Q: Ord;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn binary_search_by<'a, F>(&'a self, f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> Ordering;\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n-    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, f: F) -> Result<usize, usize>\n+    fn binary_search_by_key<'a, B, F, Q: ?Sized>(&'a self, b: &Q, f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> B,\n-              B: Ord;\n+              B: Borrow<Q>,\n+              Q: Ord;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn len(&self) -> usize;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -493,8 +496,8 @@ impl<T> SliceExt for [T] {\n         m >= n && needle == &self[m-n..]\n     }\n \n-    fn binary_search(&self, x: &T) -> Result<usize, usize> where T: Ord {\n-        self.binary_search_by(|p| p.cmp(x))\n+    fn binary_search<Q: ?Sized>(&self, x: &Q) -> Result<usize, usize> where T: Borrow<Q>, Q: Ord {\n+        self.binary_search_by(|p| p.borrow().cmp(x))\n     }\n \n     #[inline]\n@@ -522,11 +525,12 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>\n+    fn binary_search_by_key<'a, B, F, Q: ?Sized>(&'a self, b: &Q, mut f: F) -> Result<usize, usize>\n         where F: FnMut(&'a Self::Item) -> B,\n-              B: Ord\n+              B: Borrow<Q>,\n+              Q: Ord\n     {\n-        self.binary_search_by(|k| f(k).cmp(b))\n+        self.binary_search_by(|k| f(k).borrow().cmp(b))\n     }\n }\n "}]}