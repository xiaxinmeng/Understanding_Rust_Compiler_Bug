{"sha": "4af3494bb02e80badc978faa65e59625ade0c675", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjM0OTRiYjAyZTgwYmFkYzk3OGZhYTY1ZTU5NjI1YWRlMGM2NzU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-17T19:29:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-19T05:16:22Z"}, "message": "std: Stabilize std::fmt\n\nThis commit applies the stabilization of std::fmt as outlined in [RFC 380][rfc].\nThere are a number of breaking changes as a part of this commit which will need\nto be handled to migrated old code:\n\n* A number of formatting traits have been removed: String, Bool, Char, Unsigned,\n  Signed, and Float. It is recommended to instead use Show wherever possible or\n  to use adaptor structs to implement other methods of formatting.\n\n* The format specifier for Boolean has changed from `t` to `b`.\n\n* The enum `FormatError` has been renamed to `Error` as well as becoming a unit\n  struct instead of an enum. The `WriteError` variant no longer exists.\n\n* The `format_args_method!` macro has been removed with no replacement. Alter\n  code to use the `format_args!` macro instead.\n\n* The public fields of a `Formatter` have become read-only with no replacement.\n  Use a new formatting string to alter the formatting flags in combination with\n  the `write!` macro. The fields can be accessed through accessor methods on the\n  `Formatter` structure.\n\nOther than these breaking changes, the contents of std::fmt should now also all\ncontain stability markers. Most of them are still #[unstable] or #[experimental]\n\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/0380-stabilize-std-fmt.md\n[breaking-change]\n\nCloses #18904", "tree": {"sha": "566d9d1cce052d89b33ca69b1fe89e16c447b711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/566d9d1cce052d89b33ca69b1fe89e16c447b711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af3494bb02e80badc978faa65e59625ade0c675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af3494bb02e80badc978faa65e59625ade0c675", "html_url": "https://github.com/rust-lang/rust/commit/4af3494bb02e80badc978faa65e59625ade0c675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af3494bb02e80badc978faa65e59625ade0c675/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09d98603e608c9e47d4c89f7b4dca87a4b56da3", "html_url": "https://github.com/rust-lang/rust/commit/e09d98603e608c9e47d4c89f7b4dca87a4b56da3"}], "stats": {"total": 638, "additions": 291, "deletions": 347}, "files": [{"sha": "be8828b3ec833b6018ae09d9a70a20adde0e4877", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 67, "deletions": 82, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -12,8 +12,6 @@\n \n #![allow(unused_variables)]\n \n-pub use self::FormatError::*;\n-\n use any;\n use cell::{Cell, Ref, RefMut};\n use iter::{Iterator, range};\n@@ -23,10 +21,9 @@ use option::{Option, Some, None};\n use ops::Deref;\n use result::{Ok, Err};\n use result;\n-use slice::{AsSlice, SlicePrelude};\n+use slice::SlicePrelude;\n use slice;\n use str::StrPrelude;\n-use str;\n \n pub use self::num::radix;\n pub use self::num::Radix;\n@@ -36,18 +33,16 @@ mod num;\n mod float;\n pub mod rt;\n \n-pub type Result = result::Result<(), FormatError>;\n+#[experimental = \"core and I/O reconciliation may alter this definition\"]\n+pub type Result = result::Result<(), Error>;\n \n /// The error type which is returned from formatting a message into a stream.\n ///\n /// This type does not support transmission of an error other than that an error\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n-pub enum FormatError {\n-    /// A generic write error occurred during formatting, no other information\n-    /// is transmitted via this variant.\n-    WriteError,\n-}\n+#[experimental = \"core and I/O reconciliation may alter this definition\"]\n+pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream.\n ///\n@@ -58,6 +53,7 @@ pub enum FormatError {\n /// This trait should generally not be implemented by consumers of the standard\n /// library. The `write!` macro accepts an instance of `io::Writer`, and the\n /// `io::Writer` trait is favored over implementing this trait.\n+#[experimental = \"waiting for core and I/O reconciliation\"]\n pub trait FormatWriter {\n     /// Writes a slice of bytes into this writer, returning whether the write\n     /// succeeded.\n@@ -81,17 +77,13 @@ pub trait FormatWriter {\n /// A struct to represent both where to emit formatting strings to and how they\n /// should be formatted. A mutable version of this is passed to all formatting\n /// traits.\n+#[unstable = \"name may change and implemented traits are also unstable\"]\n pub struct Formatter<'a> {\n-    /// Flags for formatting (packed version of rt::Flag)\n-    pub flags: uint,\n-    /// Character used as 'fill' whenever there is alignment\n-    pub fill: char,\n-    /// Boolean indication of whether the output should be left-aligned\n-    pub align: rt::Alignment,\n-    /// Optionally specified integer width that the output should be\n-    pub width: Option<uint>,\n-    /// Optionally specified precision for numeric types\n-    pub precision: Option<uint>,\n+    flags: uint,\n+    fill: char,\n+    align: rt::Alignment,\n+    width: Option<uint>,\n+    precision: Option<uint>,\n \n     buf: &'a mut FormatWriter+'a,\n     curarg: slice::Items<'a, Argument<'a>>,\n@@ -104,6 +96,7 @@ enum Void {}\n /// family of functions. It contains a function to format the given value. At\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n+#[experimental = \"implementation detail of the `format_args!` macro\"]\n pub struct Argument<'a> {\n     formatter: extern \"Rust\" fn(&Void, &mut Formatter) -> Result,\n     value: &'a Void,\n@@ -115,6 +108,7 @@ impl<'a> Arguments<'a> {\n     /// which is valid because the compiler performs all necessary validation to\n     /// ensure that the resulting call to format/write would be safe.\n     #[doc(hidden)] #[inline]\n+    #[experimental = \"implementation detail of the `format_args!` macro\"]\n     pub unsafe fn new<'a>(pieces: &'static [&'static str],\n                           args: &'a [Argument<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -128,6 +122,7 @@ impl<'a> Arguments<'a> {\n     /// The `pieces` array must be at least as long as `fmt` to construct\n     /// a valid Arguments structure.\n     #[doc(hidden)] #[inline]\n+    #[experimental = \"implementation detail of the `format_args!` macro\"]\n     pub unsafe fn with_placeholders<'a>(pieces: &'static [&'static str],\n                                         fmt: &'static [rt::Argument<'static>],\n                                         args: &'a [Argument<'a>]) -> Arguments<'a> {\n@@ -148,6 +143,7 @@ impl<'a> Arguments<'a> {\n /// and pass it to a function or closure, passed as the first argument. The\n /// macro validates the format string at compile-time so usage of the `write`\n /// and `format` functions can be safely performed.\n+#[stable]\n pub struct Arguments<'a> {\n     // Format string pieces to print.\n     pieces: &'a [&'a str],\n@@ -169,84 +165,57 @@ impl<'a> Show for Arguments<'a> {\n /// When a format is not otherwise specified, types are formatted by ascribing\n /// to this trait. There is not an explicit way of selecting this trait to be\n /// used for formatting, it is only if no other format is specified.\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait Show for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `b` character\n-pub trait Bool for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n-/// Format trait for the `c` character\n-pub trait Char for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n-/// Format trait for the `i` and `d` characters\n-pub trait Signed for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n-/// Format trait for the `u` character\n-pub trait Unsigned for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n \n /// Format trait for the `o` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait Octal for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `t` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait Binary for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `x` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait LowerHex for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `X` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait UpperHex for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `s` character\n-pub trait String for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n /// Format trait for the `p` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait Pointer for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-/// Format trait for the `f` character\n-pub trait Float for Sized? {\n-    /// Formats the value using the given formatter.\n-    fn fmt(&self, &mut Formatter) -> Result;\n-}\n-\n /// Format trait for the `e` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait LowerExp for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n /// Format trait for the `E` character\n+#[unstable = \"I/O and core have yet to be reconciled\"]\n pub trait UpperExp for Sized? {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n@@ -271,6 +240,8 @@ static DEFAULT_ARGUMENT: rt::Argument<'static> = rt::Argument {\n ///\n ///   * output - the buffer to write output to\n ///   * args - the precompiled arguments generated by `format_args!`\n+#[experimental = \"libcore and I/O have yet to be reconciled, and this is an \\\n+                  implementation detail which should not otherwise be exported\"]\n pub fn write(output: &mut FormatWriter, args: &Arguments) -> Result {\n     let mut formatter = Formatter {\n         flags: 0,\n@@ -368,6 +339,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// This function will correctly account for the flags provided as well as\n     /// the minimum width. It will not take precision into account.\n+    #[unstable = \"definition may change slightly over time\"]\n     pub fn pad_integral(&mut self,\n                         is_positive: bool,\n                         prefix: &str,\n@@ -440,6 +412,7 @@ impl<'a> Formatter<'a> {\n     ///               is longer than this length\n     ///\n     /// Notably this function ignored the `flag` parameters\n+    #[unstable = \"definition may change slightly over time\"]\n     pub fn pad(&mut self, s: &str) -> Result {\n         // Make sure there's a fast path up front\n         if self.width.is_none() && self.precision.is_none() {\n@@ -516,19 +489,48 @@ impl<'a> Formatter<'a> {\n \n     /// Writes some data to the underlying buffer contained within this\n     /// formatter.\n+    #[unstable = \"reconciling core and I/O may alter this definition\"]\n     pub fn write(&mut self, data: &[u8]) -> Result {\n         self.buf.write(data)\n     }\n \n     /// Writes some formatted information into this instance\n+    #[unstable = \"reconciling core and I/O may alter this definition\"]\n     pub fn write_fmt(&mut self, fmt: &Arguments) -> Result {\n         write(self.buf, fmt)\n     }\n+\n+    /// Flags for formatting (packed version of rt::Flag)\n+    #[experimental = \"return type may change and method was just created\"]\n+    pub fn flags(&self) -> uint { self.flags }\n+\n+    /// Character used as 'fill' whenever there is alignment\n+    #[unstable = \"method was just created\"]\n+    pub fn fill(&self) -> char { self.fill }\n+\n+    /// Flag indicating what form of alignment was requested\n+    #[unstable = \"method was just created\"]\n+    pub fn align(&self) -> rt::Alignment { self.align }\n+\n+    /// Optionally specified integer width that the output should be\n+    #[unstable = \"method was just created\"]\n+    pub fn width(&self) -> Option<uint> { self.width }\n+\n+    /// Optionally specified precision for numeric types\n+    #[unstable = \"method was just created\"]\n+    pub fn precision(&self) -> Option<uint> { self.precision }\n+}\n+\n+impl Show for Error {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        \"an error occurred when formatting an argument\".fmt(f)\n+    }\n }\n \n /// This is a function which calls are emitted to by the compiler itself to\n /// create the Argument structures that are passed into the `format` function.\n #[doc(hidden)] #[inline]\n+#[experimental = \"implementation detail of the `format_args!` macro\"]\n pub fn argument<'a, T>(f: extern \"Rust\" fn(&T, &mut Formatter) -> Result,\n                        t: &'a T) -> Argument<'a> {\n     unsafe {\n@@ -542,15 +544,17 @@ pub fn argument<'a, T>(f: extern \"Rust\" fn(&T, &mut Formatter) -> Result,\n /// When the compiler determines that the type of an argument *must* be a string\n /// (such as for select), then it invokes this method.\n #[doc(hidden)] #[inline]\n+#[experimental = \"implementation detail of the `format_args!` macro\"]\n pub fn argumentstr<'a>(s: &'a &str) -> Argument<'a> {\n-    argument(String::fmt, s)\n+    argument(Show::fmt, s)\n }\n \n /// When the compiler determines that the type of an argument *must* be a uint\n /// (such as for plural), then it invokes this method.\n #[doc(hidden)] #[inline]\n+#[experimental = \"implementation detail of the `format_args!` macro\"]\n pub fn argumentuint<'a>(s: &'a uint) -> Argument<'a> {\n-    argument(Unsigned::fmt, s)\n+    argument(Show::fmt, s)\n }\n \n // Implementations of the core formatting traits\n@@ -565,32 +569,26 @@ impl<'a> Show for &'a Show+'a {\n     fn fmt(&self, f: &mut Formatter) -> Result { (*self).fmt(f) }\n }\n \n-impl Bool for bool {\n-    fn fmt(&self, f: &mut Formatter) -> Result {\n-        String::fmt(if *self { \"true\" } else { \"false\" }, f)\n-    }\n-}\n-\n-impl<T: str::Str> String for T {\n+impl Show for bool {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        f.pad(self.as_slice())\n+        Show::fmt(if *self { \"true\" } else { \"false\" }, f)\n     }\n }\n \n-impl String for str {\n+impl Show for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(self)\n     }\n }\n \n-impl Char for char {\n+impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::Char;\n \n         let mut utf8 = [0u8, ..4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n         let s: &str = unsafe { mem::transmute(utf8[..amt]) };\n-        String::fmt(s, f)\n+        Show::fmt(s, f)\n     }\n }\n \n@@ -620,7 +618,7 @@ impl<'a, T> Pointer for &'a mut T {\n }\n \n macro_rules! floating(($ty:ident) => {\n-    impl Float for $ty {\n+    impl Show for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n             use num::Float;\n \n@@ -688,19 +686,6 @@ floating!(f64)\n \n // Implementation of Show for various core types\n \n-macro_rules! delegate(($ty:ty to $other:ident) => {\n-    impl Show for $ty {\n-        fn fmt(&self, f: &mut Formatter) -> Result {\n-            $other::fmt(self, f)\n-        }\n-    }\n-})\n-delegate!(str to String)\n-delegate!(bool to Bool)\n-delegate!(char to Char)\n-delegate!(f32 to Float)\n-delegate!(f64 to Float)\n-\n impl<T> Show for *const T {\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }"}, {"sha": "1c856a6e20870cc18a280a830c83b93a51e90aaa", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -109,6 +109,7 @@ radix!(UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n \n /// A radix with in the range of `2..36`.\n #[deriving(Clone, PartialEq)]\n+#[unstable = \"may be renamed or move to a different module\"]\n pub struct Radix {\n     base: u8,\n }\n@@ -132,6 +133,7 @@ impl GenericRadix for Radix {\n }\n \n /// A helper type for formatting radixes.\n+#[unstable = \"may be renamed or move to a different module\"]\n pub struct RadixFmt<T, R>(T, R);\n \n /// Constructs a radix formatter in the range of `2..36`.\n@@ -142,6 +144,7 @@ pub struct RadixFmt<T, R>(T, R);\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55i, 36)), \"1j\".to_string());\n /// ```\n+#[unstable = \"may be renamed or move to a different module\"]\n pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n     RadixFmt(x, Radix::new(base))\n }\n@@ -167,15 +170,13 @@ macro_rules! int_base {\n macro_rules! integer {\n     ($Int:ident, $Uint:ident) => {\n         int_base!(Show     for $Int as $Int   -> Decimal)\n-        int_base!(Signed   for $Int as $Int   -> Decimal)\n         int_base!(Binary   for $Int as $Uint  -> Binary)\n         int_base!(Octal    for $Int as $Uint  -> Octal)\n         int_base!(LowerHex for $Int as $Uint  -> LowerHex)\n         int_base!(UpperHex for $Int as $Uint  -> UpperHex)\n         radix_fmt!($Int as $Int, fmt_int)\n \n         int_base!(Show     for $Uint as $Uint -> Decimal)\n-        int_base!(Unsigned for $Uint as $Uint -> Decimal)\n         int_base!(Binary   for $Uint as $Uint -> Binary)\n         int_base!(Octal    for $Uint as $Uint -> Octal)\n         int_base!(LowerHex for $Uint as $Uint -> LowerHex)"}, {"sha": "145e78dc668eeebc1f446a81e6d07d0512582d36", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -14,6 +14,8 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n+#![experimental = \"implementation detail of the `format_args!` macro\"]\n+\n pub use self::Alignment::*;\n pub use self::Count::*;\n pub use self::Position::*;"}, {"sha": "9016f40b1b8345a8cca9656e1cef3c812ca6c548", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -108,7 +108,10 @@ macro_rules! try(\n /// Writing a formatted string into a writer\n #[macro_export]\n macro_rules! write(\n-    ($dst:expr, $($arg:tt)*) => (format_args_method!($dst, write_fmt, $($arg)*))\n+    ($dst:expr, $($arg:tt)*) => ({\n+        let dst = &mut *$dst;\n+        format_args!(|args| { dst.write_fmt(args) }, $($arg)*)\n+    })\n )\n \n /// Writing a formatted string plus a newline into a writer\n@@ -119,15 +122,5 @@ macro_rules! writeln(\n     )\n )\n \n-/// Write some formatted data into a stream.\n-///\n-/// Identical to the macro in `std::macros`\n-#[macro_export]\n-macro_rules! write(\n-    ($dst:expr, $($arg:tt)*) => ({\n-        format_args_method!($dst, write_fmt, $($arg)*)\n-    })\n-)\n-\n #[macro_export]\n macro_rules! unreachable( () => (panic!(\"unreachable code\")) )"}, {"sha": "3b43d6ad33b4429c4b6b210938a2da05891eb020", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -21,16 +21,16 @@ fn test_format_int() {\n     assert!(format!(\"{}\", 1i16).as_slice() == \"1\");\n     assert!(format!(\"{}\", 1i32).as_slice() == \"1\");\n     assert!(format!(\"{}\", 1i64).as_slice() == \"1\");\n-    assert!(format!(\"{:d}\", -1i).as_slice() == \"-1\");\n-    assert!(format!(\"{:d}\", -1i8).as_slice() == \"-1\");\n-    assert!(format!(\"{:d}\", -1i16).as_slice() == \"-1\");\n-    assert!(format!(\"{:d}\", -1i32).as_slice() == \"-1\");\n-    assert!(format!(\"{:d}\", -1i64).as_slice() == \"-1\");\n-    assert!(format!(\"{:t}\", 1i).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1i8).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1i16).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1i32).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1i64).as_slice() == \"1\");\n+    assert!(format!(\"{}\", -1i).as_slice() == \"-1\");\n+    assert!(format!(\"{}\", -1i8).as_slice() == \"-1\");\n+    assert!(format!(\"{}\", -1i16).as_slice() == \"-1\");\n+    assert!(format!(\"{}\", -1i32).as_slice() == \"-1\");\n+    assert!(format!(\"{}\", -1i64).as_slice() == \"-1\");\n+    assert!(format!(\"{:b}\", 1i).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1i8).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1i16).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1i32).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1i64).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1i).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1i8).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1i16).as_slice() == \"1\");\n@@ -52,16 +52,11 @@ fn test_format_int() {\n     assert!(format!(\"{}\", 1u16).as_slice() == \"1\");\n     assert!(format!(\"{}\", 1u32).as_slice() == \"1\");\n     assert!(format!(\"{}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:u}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:u}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:u}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:u}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:u}\", 1u64).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1u).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1u8).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1u16).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1u32).as_slice() == \"1\");\n-    assert!(format!(\"{:t}\", 1u64).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1u).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1u8).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1u16).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1u32).as_slice() == \"1\");\n+    assert!(format!(\"{:b}\", 1u64).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1u).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1u8).as_slice() == \"1\");\n     assert!(format!(\"{:x}\", 1u16).as_slice() == \"1\");\n@@ -79,37 +74,35 @@ fn test_format_int() {\n     assert!(format!(\"{:o}\", 1u64).as_slice() == \"1\");\n \n     // Test a larger number\n-    assert!(format!(\"{:t}\", 55i).as_slice() == \"110111\");\n+    assert!(format!(\"{:b}\", 55i).as_slice() == \"110111\");\n     assert!(format!(\"{:o}\", 55i).as_slice() == \"67\");\n-    assert!(format!(\"{:d}\", 55i).as_slice() == \"55\");\n+    assert!(format!(\"{}\", 55i).as_slice() == \"55\");\n     assert!(format!(\"{:x}\", 55i).as_slice() == \"37\");\n     assert!(format!(\"{:X}\", 55i).as_slice() == \"37\");\n }\n \n #[test]\n fn test_format_int_zero() {\n     assert!(format!(\"{}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:d}\", 0i).as_slice() == \"0\");\n-    assert!(format!(\"{:t}\", 0i).as_slice() == \"0\");\n+    assert!(format!(\"{:b}\", 0i).as_slice() == \"0\");\n     assert!(format!(\"{:o}\", 0i).as_slice() == \"0\");\n     assert!(format!(\"{:x}\", 0i).as_slice() == \"0\");\n     assert!(format!(\"{:X}\", 0i).as_slice() == \"0\");\n \n     assert!(format!(\"{}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:u}\", 0u).as_slice() == \"0\");\n-    assert!(format!(\"{:t}\", 0u).as_slice() == \"0\");\n+    assert!(format!(\"{:b}\", 0u).as_slice() == \"0\");\n     assert!(format!(\"{:o}\", 0u).as_slice() == \"0\");\n     assert!(format!(\"{:x}\", 0u).as_slice() == \"0\");\n     assert!(format!(\"{:X}\", 0u).as_slice() == \"0\");\n }\n \n #[test]\n fn test_format_int_flags() {\n-    assert!(format!(\"{:3d}\", 1i).as_slice() == \"  1\");\n-    assert!(format!(\"{:>3d}\", 1i).as_slice() == \"  1\");\n-    assert!(format!(\"{:>+3d}\", 1i).as_slice() == \" +1\");\n-    assert!(format!(\"{:<3d}\", 1i).as_slice() == \"1  \");\n-    assert!(format!(\"{:#d}\", 1i).as_slice() == \"1\");\n+    assert!(format!(\"{:3}\", 1i).as_slice() == \"  1\");\n+    assert!(format!(\"{:>3}\", 1i).as_slice() == \"  1\");\n+    assert!(format!(\"{:>+3}\", 1i).as_slice() == \" +1\");\n+    assert!(format!(\"{:<3}\", 1i).as_slice() == \"1  \");\n+    assert!(format!(\"{:#}\", 1i).as_slice() == \"1\");\n     assert!(format!(\"{:#x}\", 10i).as_slice() == \"0xa\");\n     assert!(format!(\"{:#X}\", 10i).as_slice() == \"0xA\");\n     assert!(format!(\"{:#5x}\", 10i).as_slice() == \"  0xa\");\n@@ -119,25 +112,25 @@ fn test_format_int_flags() {\n     assert!(format!(\"{:<8x}\", 10i).as_slice() == \"a       \");\n     assert!(format!(\"{:>8x}\", 10i).as_slice() == \"       a\");\n     assert!(format!(\"{:#08x}\", 10i).as_slice() == \"0x00000a\");\n-    assert!(format!(\"{:08d}\", -10i).as_slice() == \"-0000010\");\n+    assert!(format!(\"{:08}\", -10i).as_slice() == \"-0000010\");\n     assert!(format!(\"{:x}\", -1u8).as_slice() == \"ff\");\n     assert!(format!(\"{:X}\", -1u8).as_slice() == \"FF\");\n-    assert!(format!(\"{:t}\", -1u8).as_slice() == \"11111111\");\n+    assert!(format!(\"{:b}\", -1u8).as_slice() == \"11111111\");\n     assert!(format!(\"{:o}\", -1u8).as_slice() == \"377\");\n     assert!(format!(\"{:#x}\", -1u8).as_slice() == \"0xff\");\n     assert!(format!(\"{:#X}\", -1u8).as_slice() == \"0xFF\");\n-    assert!(format!(\"{:#t}\", -1u8).as_slice() == \"0b11111111\");\n+    assert!(format!(\"{:#b}\", -1u8).as_slice() == \"0b11111111\");\n     assert!(format!(\"{:#o}\", -1u8).as_slice() == \"0o377\");\n }\n \n #[test]\n fn test_format_int_sign_padding() {\n-    assert!(format!(\"{:+5d}\", 1i).as_slice() == \"   +1\");\n-    assert!(format!(\"{:+5d}\", -1i).as_slice() == \"   -1\");\n-    assert!(format!(\"{:05d}\", 1i).as_slice() == \"00001\");\n-    assert!(format!(\"{:05d}\", -1i).as_slice() == \"-0001\");\n-    assert!(format!(\"{:+05d}\", 1i).as_slice() == \"+0001\");\n-    assert!(format!(\"{:+05d}\", -1i).as_slice() == \"-0001\");\n+    assert!(format!(\"{:+5}\", 1i).as_slice() == \"   +1\");\n+    assert!(format!(\"{:+5}\", -1i).as_slice() == \"   -1\");\n+    assert!(format!(\"{:05}\", 1i).as_slice() == \"00001\");\n+    assert!(format!(\"{:05}\", -1i).as_slice() == \"-0001\");\n+    assert!(format!(\"{:+05}\", 1i).as_slice() == \"+0001\");\n+    assert!(format!(\"{:+05}\", -1i).as_slice() == \"-0001\");\n }\n \n #[test]\n@@ -169,7 +162,7 @@ mod uint {\n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:t}\", rng.gen::<uint>()); })\n+        b.iter(|| { format!(\"{:b}\", rng.gen::<uint>()); })\n     }\n \n     #[bench]\n@@ -181,7 +174,7 @@ mod uint {\n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:u}\", rng.gen::<uint>()); })\n+        b.iter(|| { format!(\"{}\", rng.gen::<uint>()); })\n     }\n \n     #[bench]\n@@ -205,7 +198,7 @@ mod int {\n     #[bench]\n     fn format_bin(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:t}\", rng.gen::<int>()); })\n+        b.iter(|| { format!(\"{:b}\", rng.gen::<int>()); })\n     }\n \n     #[bench]\n@@ -217,7 +210,7 @@ mod int {\n     #[bench]\n     fn format_dec(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        b.iter(|| { format!(\"{:d}\", rng.gen::<int>()); })\n+        b.iter(|| { format!(\"{}\", rng.gen::<int>()); })\n     }\n \n     #[bench]"}, {"sha": "568210118a8ae0f0aa071ed84d3b4463a31e9312", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -130,7 +130,7 @@ mod tests {\n                    input.len());\n             let cmp = deflate_bytes(input.as_slice()).expect(\"deflation failed\");\n             let out = inflate_bytes(cmp.as_slice()).expect(\"inflation failed\");\n-            debug!(\"{} bytes deflated to {} ({:.1f}% size)\",\n+            debug!(\"{} bytes deflated to {} ({:.1}% size)\",\n                    input.len(), cmp.len(),\n                    100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n             assert_eq!(input.as_slice(), out.as_slice());"}, {"sha": "df8cdabbcaa43251641877346dcdba4735d79860", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -221,7 +221,7 @@ pub fn render_to<W:Writer>(output: &mut W) {\n impl<'a> dot::Labeller<'a, Nd<'a>, Ed<'a>> for Graph {\n     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example3\").unwrap() }\n     fn node_id(&'a self, n: &Nd<'a>) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{:u}\", n.val0())).unwrap()\n+        dot::Id::new(format!(\"N{}\", n.val0())).unwrap()\n     }\n     fn node_label<'a>(&'a self, n: &Nd<'a>) -> dot::LabelText<'a> {\n         let &(i, _) = n;\n@@ -635,7 +635,7 @@ mod tests {\n     }\n \n     fn id_name<'a>(n: &Node) -> Id<'a> {\n-        Id::new(format!(\"N{:u}\", *n)).unwrap()\n+        Id::new(format!(\"N{}\", *n)).unwrap()\n     }\n \n     impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraph {"}, {"sha": "fd2d97d4deb5c1d8e6186e2681fb2be6d62f60c3", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -241,13 +241,6 @@ impl fmt::Show for LogLevel {\n     }\n }\n \n-impl fmt::Signed for LogLevel {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let LogLevel(level) = *self;\n-        write!(fmt, \"{}\", level)\n-    }\n-}\n-\n impl Logger for DefaultLogger {\n     fn log(&mut self, record: &LogRecord) {\n         match writeln!(&mut self.handle,"}, {"sha": "d6a68dd07d76cfa08a90120bf925f8e8170d0267", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -237,7 +237,7 @@ pub trait Rng {\n     /// use std::rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n-    /// println!(\"{:b}\", rng.gen_weighted_bool(3));\n+    /// println!(\"{}\", rng.gen_weighted_bool(3));\n     /// ```\n     fn gen_weighted_bool(&mut self, n: uint) -> bool {\n         n == 0 || self.gen_range(0, n) == 0"}, {"sha": "62032beaacd806cd473505fa9b3df132c82909b7", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -102,7 +102,7 @@ pub fn check_crate(tcx: &ty::ctxt) {\n     fn make_stat(bccx: &BorrowckCtxt, stat: uint) -> String {\n         let total = bccx.stats.guaranteed_paths as f64;\n         let perc = if total == 0.0 { 0.0 } else { stat as f64 * 100.0 / total };\n-        format!(\"{} ({:.0f}%)\", stat, perc)\n+        format!(\"{} ({:.0}%)\", stat, perc)\n     }\n }\n "}, {"sha": "ba6dd2a5107a6c31f119d8c58a1691e7e86461b6", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n     fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(self.name.as_slice()).unwrap() }\n \n     fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{:u}\", i.node_id())).unwrap()\n+        dot::Id::new(format!(\"N{}\", i.node_id())).unwrap()\n     }\n \n     fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> {"}, {"sha": "6881f75ac18b060bfc632c4e7741ade32ea7a20e", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -81,8 +81,7 @@ impl<'a> fmt::Show for Matrix<'a> {\n             try!(write!(f, \"+\"));\n             for (column, pat_str) in row.into_iter().enumerate() {\n                 try!(write!(f, \" \"));\n-                f.width = Some(column_widths[column]);\n-                try!(f.pad(pat_str.as_slice()));\n+                try!(write!(f, \"{:1$}\", pat_str, column_widths[column]));\n                 try!(write!(f, \" +\"));\n             }\n             try!(write!(f, \"\\n\"));"}, {"sha": "141504cb6f7d50e530cd288a6986ef9001e0a258", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let words_per_id = (bits_per_id + uint::BITS - 1) / uint::BITS;\n         let num_nodes = cfg.graph.all_nodes().len();\n \n-        debug!(\"DataFlowContext::new(analysis_name: {:s}, id_range={}, \\\n+        debug!(\"DataFlowContext::new(analysis_name: {}, id_range={}, \\\n                                      bits_per_id={}, words_per_id={}) \\\n                                      num_nodes: {}\",\n                analysis_name, id_range, bits_per_id, words_per_id,\n@@ -223,7 +223,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n     pub fn add_gen(&mut self, id: ast::NodeId, bit: uint) {\n         //! Indicates that `id` generates `bit`\n-        debug!(\"{:s} add_gen(id={}, bit={})\",\n+        debug!(\"{} add_gen(id={}, bit={})\",\n                self.analysis_name, id, bit);\n         assert!(self.nodeid_to_index.contains_key(&id));\n         assert!(self.bits_per_id > 0);\n@@ -236,7 +236,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n     pub fn add_kill(&mut self, id: ast::NodeId, bit: uint) {\n         //! Indicates that `id` kills `bit`\n-        debug!(\"{:s} add_kill(id={}, bit={})\",\n+        debug!(\"{} add_kill(id={}, bit={})\",\n                self.analysis_name, id, bit);\n         assert!(self.nodeid_to_index.contains_key(&id));\n         assert!(self.bits_per_id > 0);\n@@ -249,7 +249,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n     fn apply_gen_kill(&self, cfgidx: CFGIndex, bits: &mut [uint]) {\n         //! Applies the gen and kill sets for `cfgidx` to `bits`\n-        debug!(\"{:s} apply_gen_kill(cfgidx={}, bits={}) [before]\",\n+        debug!(\"{} apply_gen_kill(cfgidx={}, bits={}) [before]\",\n                self.analysis_name, cfgidx, mut_bits_to_string(bits));\n         assert!(self.bits_per_id > 0);\n \n@@ -259,7 +259,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let kills = self.kills.slice(start, end);\n         bitwise(bits, kills, &Subtract);\n \n-        debug!(\"{:s} apply_gen_kill(cfgidx={}, bits={}) [after]\",\n+        debug!(\"{} apply_gen_kill(cfgidx={}, bits={}) [after]\",\n                self.analysis_name, cfgidx, mut_bits_to_string(bits));\n     }\n \n@@ -316,7 +316,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                 temp_bits.as_slice()\n             }\n         };\n-        debug!(\"{:s} each_bit_for_node({}, cfgidx={}) bits={}\",\n+        debug!(\"{} each_bit_for_node({}, cfgidx={}) bits={}\",\n                self.analysis_name, e, cfgidx, bits_to_string(slice));\n         self.each_bit(slice, f)\n     }\n@@ -337,7 +337,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         let cfgidx = to_cfgidx_or_die(id, &self.nodeid_to_index);\n         let (start, end) = self.compute_id_range(cfgidx);\n         let gens = self.gens.slice(start, end);\n-        debug!(\"{:s} each_gen_bit(id={}, gens={})\",\n+        debug!(\"{} each_gen_bit(id={}, gens={})\",\n                self.analysis_name, id, bits_to_string(gens));\n         self.each_bit(gens, f)\n     }\n@@ -385,7 +385,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n         //! This is usually called (if it is called at all), after\n         //! all add_gen and add_kill calls, but before propagate.\n \n-        debug!(\"{:s} add_kills_from_flow_exits\", self.analysis_name);\n+        debug!(\"{} add_kills_from_flow_exits\", self.analysis_name);\n         if self.bits_per_id == 0 {\n             // Skip the surprisingly common degenerate case.  (Note\n             // compute_id_range requires self.words_per_id > 0.)\n@@ -408,7 +408,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                         }\n                     }\n                     None => {\n-                        debug!(\"{:s} add_kills_from_flow_exits flow_exit={} \\\n+                        debug!(\"{} add_kills_from_flow_exits flow_exit={} \\\n                                 no cfg_idx for exiting_scope={}\",\n                                self.analysis_name, flow_exit, node_id);\n                     }\n@@ -417,10 +417,10 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n             if changed {\n                 let bits = self.kills.slice_mut(start, end);\n-                debug!(\"{:s} add_kills_from_flow_exits flow_exit={} bits={} [before]\",\n+                debug!(\"{} add_kills_from_flow_exits flow_exit={} bits={} [before]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n                 bits.clone_from_slice(orig_kills.as_slice());\n-                debug!(\"{:s} add_kills_from_flow_exits flow_exit={} bits={} [after]\",\n+                debug!(\"{} add_kills_from_flow_exits flow_exit={} bits={} [after]\",\n                        self.analysis_name, flow_exit, mut_bits_to_string(bits));\n             }\n             true\n@@ -453,7 +453,7 @@ impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> {\n             }\n         }\n \n-        debug!(\"Dataflow result for {:s}:\", self.analysis_name);\n+        debug!(\"Dataflow result for {}:\", self.analysis_name);\n         debug!(\"{}\", {\n             self.pretty_print_to(box io::stderr(), blk).unwrap();\n             \"\"\n@@ -474,7 +474,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n     fn walk_cfg(&mut self,\n                 cfg: &cfg::CFG,\n                 in_out: &mut [uint]) {\n-        debug!(\"DataFlowContext::walk_cfg(in_out={}) {:s}\",\n+        debug!(\"DataFlowContext::walk_cfg(in_out={}) {}\",\n                bits_to_string(in_out), self.dfcx.analysis_name);\n         assert!(self.dfcx.bits_per_id > 0);\n \n@@ -519,7 +519,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n                                          edge: &cfg::CFGEdge) {\n         let source = edge.source();\n         let cfgidx = edge.target();\n-        debug!(\"{:s} propagate_bits_into_entry_set_for(pred_bits={}, {} to {})\",\n+        debug!(\"{} propagate_bits_into_entry_set_for(pred_bits={}, {} to {})\",\n                self.dfcx.analysis_name, bits_to_string(pred_bits), source, cfgidx);\n         assert!(self.dfcx.bits_per_id > 0);\n \n@@ -530,7 +530,7 @@ impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> {\n             bitwise(on_entry, pred_bits, &self.dfcx.oper)\n         };\n         if changed {\n-            debug!(\"{:s} changed entry set for {} to {}\",\n+            debug!(\"{} changed entry set for {} to {}\",\n                    self.dfcx.analysis_name, cfgidx,\n                    bits_to_string(self.dfcx.on_entry.slice(start, end)));\n             self.changed = true;"}, {"sha": "ac132477b8772d4ab4899c35ac8bc53dac8e903d", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -36,7 +36,7 @@ be indexed by the direction (see the type `Direction`).\n \n #![allow(dead_code)] // still WIP\n \n-use std::fmt::{Formatter, FormatError, Show};\n+use std::fmt::{Formatter, Error, Show};\n use std::uint;\n \n pub struct Graph<N,E> {\n@@ -57,7 +57,7 @@ pub struct Edge<E> {\n }\n \n impl<E: Show> Show for Edge<E> {\n-    fn fmt(&self, f: &mut Formatter) -> Result<(), FormatError> {\n+    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {\n         write!(f, \"Edge {{ next_edge: [{}, {}], source: {}, target: {}, data: {} }}\",\n                self.next_edge[0], self.next_edge[1], self.source,\n                self.target, self.data)"}, {"sha": "70567f52c06f8d5400cdd943cd127be0fe97b707", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -2678,9 +2678,14 @@ impl ops::Sub<TypeContents,TypeContents> for TypeContents {\n }\n \n impl fmt::Show for TypeContents {\n+    #[cfg(stage0)]\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"TypeContents({:t})\", self.bits)\n     }\n+    #[cfg(not(stage0))]\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"TypeContents({:b})\", self.bits)\n+    }\n }\n \n pub fn type_interior_is_unsafe(cx: &ctxt, t: ty::t) -> bool {"}, {"sha": "dfc9f392452d2e8c680556e0b3e469720b5c6660", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n \n             let is_inferred;\n             macro_rules! cannot_happen { () => { {\n-                panic!(\"invalid parent: {:s} for {:s}\",\n+                panic!(\"invalid parent: {} for {}\",\n                       tcx.map.node_to_string(parent_id),\n                       tcx.map.node_to_string(param_id));\n             } } }"}, {"sha": "47bba3e4327c1e7c40895884b3099fd982a00e4c", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -368,7 +368,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: DiagnosticInfoRef, user: *mut c_vo\n \n             if enabled {\n                 let loc = llvm::debug_loc_to_string(llcx, opt.debug_loc);\n-                cgcx.handler.note(format!(\"optimization {:s} for {:s} at {:s}: {:s}\",\n+                cgcx.handler.note(format!(\"optimization {} for {} at {}: {}\",\n                                           opt.kind.describe(),\n                                           pass_name,\n                                           if loc.is_empty() { \"[unknown]\" } else { loc.as_slice() },"}, {"sha": "a73afdf68e33c5958092271b45832e1215c8bd19", "filename": "src/librustc_trans/driver/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fmod.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -224,13 +224,13 @@ Available lint options:\n     };\n \n     println!(\"Lint checks provided by rustc:\\n\");\n-    println!(\"    {}  {:7.7s}  {}\", padded(\"name\"), \"default\", \"meaning\");\n-    println!(\"    {}  {:7.7s}  {}\", padded(\"----\"), \"-------\", \"-------\");\n+    println!(\"    {}  {:7.7}  {}\", padded(\"name\"), \"default\", \"meaning\");\n+    println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n \n     let print_lints = |lints: Vec<&Lint>| {\n         for lint in lints.into_iter() {\n             let name = lint.name_lower().replace(\"_\", \"-\");\n-            println!(\"    {}  {:7.7s}  {}\",\n+            println!(\"    {}  {:7.7}  {}\",\n                      padded(name.as_slice()), lint.default_level.as_str(), lint.desc);\n         }\n         println!(\"\\n\");\n@@ -293,7 +293,7 @@ fn describe_debug_flags() {\n     for tuple in r.iter() {\n         match *tuple {\n             (ref name, ref desc, _) => {\n-                println!(\"    -Z {:>20s} -- {}\", *name, *desc);\n+                println!(\"    -Z {:>20} -- {}\", *name, *desc);\n             }\n         }\n     }\n@@ -306,7 +306,7 @@ fn describe_codegen_flags() {\n             Some(..) => (21, \"=val\"),\n             None => (25, \"\")\n         };\n-        println!(\"    -C {:>width$s}{} -- {}\", name.replace(\"_\", \"-\"),\n+        println!(\"    -C {:>width$}{} -- {}\", name.replace(\"_\", \"-\"),\n                  extra, desc, width=width);\n     }\n }"}, {"sha": "420a0ed5e8ac45ab0c76256e4540dfe359f695e6", "filename": "src/librustc_trans/driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -355,8 +355,8 @@ impl UserIdentifiedItem {\n     fn to_one_node_id(self, user_option: &str, sess: &Session, map: &ast_map::Map) -> ast::NodeId {\n         let fail_because = |is_wrong_because| -> ast::NodeId {\n             let message =\n-                format!(\"{:s} needs NodeId (int) or unique \\\n-                         path suffix (b::c::d); got {:s}, which {:s}\",\n+                format!(\"{} needs NodeId (int) or unique \\\n+                         path suffix (b::c::d); got {}, which {}\",\n                         user_option,\n                         self.reconstructed_input(),\n                         is_wrong_because);"}, {"sha": "98cdea73a990ac4433adee3b63700e66957f07f4", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -3135,7 +3135,7 @@ pub fn trans_crate<'tcx>(analysis: CrateAnalysis<'tcx>)\n     }\n     if shared_ccx.sess().count_llvm_insns() {\n         for (k, v) in shared_ccx.stats().llvm_insns.borrow().iter() {\n-            println!(\"{:7u} {}\", *v, *k);\n+            println!(\"{:7} {}\", *v, *k);\n         }\n     }\n "}, {"sha": "58c67c8c0914ba043b9b5ad635d191ea8d099372", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -67,7 +67,7 @@ pub enum CleanupScopeKind<'blk, 'tcx: 'blk> {\n }\n \n impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::FormatError> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             CustomScopeKind => write!(f, \"CustomScopeKind\"),\n             AstScopeKind(nid) => write!(f, \"AstScopeKind({})\", nid),"}, {"sha": "daa5f155d511e40cb23b4e9cdf155f860a051537", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -75,12 +75,6 @@ impl fmt::Show for ItemType {\n     }\n }\n \n-impl fmt::Unsigned for ItemType {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        (*self as uint).fmt(f)\n-    }\n-}\n-\n pub fn shortty(item: &clean::Item) -> ItemType {\n     match item.inner {\n         clean::ModuleItem(..)          => Module,"}, {"sha": "5e4ac259e718007d29869cc9f325fbde06ff2ae3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -437,8 +437,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n         if i > 0 {\n             try!(write!(&mut w, \",\"));\n         }\n-        try!(write!(&mut w, r#\"[{:u},\"{}\",\"{}\",{}\"#,\n-                    item.ty, item.name, path,\n+        try!(write!(&mut w, r#\"[{},\"{}\",\"{}\",{}\"#,\n+                    item.ty as uint, item.name, path,\n                     item.desc.to_json().to_string()));\n         match item.parent {\n             Some(nodeid) => {\n@@ -457,8 +457,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n         if i > 0 {\n             try!(write!(&mut w, \",\"));\n         }\n-        try!(write!(&mut w, r#\"[{:u},\"{}\"]\"#,\n-                    short, *fqp.last().unwrap()));\n+        try!(write!(&mut w, r#\"[{},\"{}\"]\"#,\n+                    short as uint, *fqp.last().unwrap()));\n     }\n \n     try!(write!(&mut w, \"]}};\"));\n@@ -2192,7 +2192,7 @@ impl<'a> fmt::Show for Source<'a> {\n         }\n         try!(write!(fmt, \"<pre class='line-numbers'>\"));\n         for i in range(1, lines + 1) {\n-            try!(write!(fmt, \"<span id='{0:u}'>{0:1$u}</span>\\n\", i, cols));\n+            try!(write!(fmt, \"<span id='{0}'>{0:1$}</span>\\n\", i, cols));\n         }\n         try!(write!(fmt, \"</pre>\"));\n         try!(write!(fmt, \"{}\", highlight::highlight(s.as_slice(), None, None)));"}, {"sha": "4a512ca33fc453d90c6944847583bc6f62b4155c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -168,11 +168,11 @@ pub fn main_args(args: &[String]) -> int {\n     if matches.opt_strs(\"passes\").as_slice() == &[\"list\".to_string()] {\n         println!(\"Available passes for running rustdoc:\");\n         for &(name, _, description) in PASSES.iter() {\n-            println!(\"{:>20s} - {}\", name, description);\n+            println!(\"{:>20} - {}\", name, description);\n         }\n         println!(\"{}\", \"\\nDefault passes for rustdoc:\"); // FIXME: #9970\n         for &name in DEFAULT_PASSES.iter() {\n-            println!(\"{:>20s}\", name);\n+            println!(\"{:>20}\", name);\n         }\n         return 0;\n     }"}, {"sha": "030ee1d4352b5d98fa96e8d4972d377bb668cd77", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -2403,7 +2403,7 @@ impl<A:ToJson> ToJson for Option<A> {\n impl fmt::Show for Json {\n     /// Encodes a json value into a string\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.to_writer(f).map_err(|_| fmt::WriteError)\n+        self.to_writer(f).map_err(|_| fmt::Error)\n     }\n }\n "}, {"sha": "2482fe63028d150e5612aa6b54ab021f072f1481", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -38,11 +38,11 @@ Some examples of the `format!` extension are:\n ```rust\n # fn main() {\n format!(\"Hello\");                  // => \"Hello\"\n-format!(\"Hello, {:s}!\", \"world\");  // => \"Hello, world!\"\n-format!(\"The number is {:d}\", 1i); // => \"The number is 1\"\n+format!(\"Hello, {}!\", \"world\");    // => \"Hello, world!\"\n+format!(\"The number is {}\", 1i);   // => \"The number is 1\"\n format!(\"{}\", (3i, 4i));           // => \"(3, 4)\"\n format!(\"{value}\", value=4i);      // => \"4\"\n-format!(\"{} {}\", 1i, 2i);          // => \"1 2\"\n+format!(\"{} {}\", 1i, 2u);          // => \"1 2\"\n # }\n ```\n \n@@ -94,9 +94,9 @@ For example, the following `format!` expressions all use named argument:\n \n ```rust\n # fn main() {\n-format!(\"{argument}\", argument = \"test\");        // => \"test\"\n-format!(\"{name} {}\", 1i, name = 2i);             // => \"2 1\"\n-format!(\"{a:s} {c:d} {b}\", a=\"a\", b=(), c=3i); // => \"a 3 ()\"\n+format!(\"{argument}\", argument = \"test\");   // => \"test\"\n+format!(\"{name} {}\", 1i, name = 2i);        // => \"2 1\"\n+format!(\"{a} {c} {b}\", a=\"a\", b=(), c=3i);  // => \"a 3 ()\"\n # }\n ```\n \n@@ -138,23 +138,16 @@ multiple actual types to be formatted via `{:d}` (like `i8` as well as `int`).\n The current mapping of types to traits is:\n \n * *nothing* \u21d2 `Show`\n-* `d` \u21d2 `Signed`\n-* `i` \u21d2 `Signed`\n-* `u` \u21d2 `Unsigned`\n-* `b` \u21d2 `Bool`\n-* `c` \u21d2 `Char`\n * `o` \u21d2 `Octal`\n * `x` \u21d2 `LowerHex`\n * `X` \u21d2 `UpperHex`\n-* `s` \u21d2 `String`\n * `p` \u21d2 `Pointer`\n-* `t` \u21d2 `Binary`\n-* `f` \u21d2 `Float`\n+* `b` \u21d2 `Binary`\n * `e` \u21d2 `LowerExp`\n * `E` \u21d2 `UpperExp`\n \n What this means is that any type of argument which implements the\n-`std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are\n+`std::fmt::Binary` trait can then be formatted with `{:b}`. Implementations are\n provided for these traits for a number of primitive types by the standard\n library as well. If no format is specified (as in `{}` or `{:6}`), then the\n format trait used is the `Show` trait. This is one of the more commonly\n@@ -216,7 +209,7 @@ impl fmt::Binary for Vector2D {\n         // Respect the formatting flags by using the helper method\n         // `pad_integral` on the Formatter object. See the method documentation\n         // for details, and the function `pad` can be used to pad strings.\n-        let decimals = f.precision.unwrap_or(3);\n+        let decimals = f.precision().unwrap_or(3);\n         let string = f64::to_str_exact(magnitude, decimals);\n         f.pad_integral(true, \"\", string.as_bytes())\n     }\n@@ -226,7 +219,7 @@ fn main() {\n     let myvector = Vector2D { x: 3, y: 4 };\n \n     println!(\"{}\", myvector);       // => \"(3, 4)\"\n-    println!(\"{:10.3t}\", myvector); // => \"     5.000\"\n+    println!(\"{:10.3b}\", myvector); // => \"     5.000\"\n }\n ```\n \n@@ -418,10 +411,10 @@ use string;\n use vec::Vec;\n \n pub use core::fmt::{Formatter, Result, FormatWriter, rt};\n-pub use core::fmt::{Show, Bool, Char, Signed, Unsigned, Octal, Binary};\n-pub use core::fmt::{LowerHex, UpperHex, String, Pointer};\n-pub use core::fmt::{Float, LowerExp, UpperExp};\n-pub use core::fmt::{FormatError, WriteError};\n+pub use core::fmt::{Show, Octal, Binary};\n+pub use core::fmt::{LowerHex, UpperHex, Pointer};\n+pub use core::fmt::{LowerExp, UpperExp};\n+pub use core::fmt::Error;\n pub use core::fmt::{Argument, Arguments, write, radix, Radix, RadixFmt};\n \n #[doc(hidden)]\n@@ -444,6 +437,8 @@ pub use core::fmt::{argument, argumentstr, argumentuint};\n /// let s = format_args!(fmt::format, \"Hello, {}!\", \"world\");\n /// assert_eq!(s, \"Hello, world!\".to_string());\n /// ```\n+#[experimental = \"this is an implementation detail of format! and should not \\\n+                  be called directly\"]\n pub fn format(args: &Arguments) -> string::String {\n     let mut output = Vec::new();\n     let _ = write!(&mut output as &mut Writer, \"{}\", args);\n@@ -454,7 +449,7 @@ impl<'a> Writer for Formatter<'a> {\n     fn write(&mut self, b: &[u8]) -> io::IoResult<()> {\n         match (*self).write(b) {\n             Ok(()) => Ok(()),\n-            Err(WriteError) => Err(io::standard_error(io::OtherIoError))\n+            Err(Error) => Err(io::standard_error(io::OtherIoError))\n         }\n     }\n }"}, {"sha": "681400e9db581f740d981fcdbca84920033a8ac3", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -1034,7 +1034,7 @@ pub trait Writer {\n                     Ok(()) => Ok(()),\n                     Err(e) => {\n                         self.error = Err(e);\n-                        Err(fmt::WriteError)\n+                        Err(fmt::Error)\n                     }\n                 }\n             }\n@@ -1081,13 +1081,13 @@ pub trait Writer {\n     /// Write the result of passing n through `int::to_str_bytes`.\n     #[inline]\n     fn write_int(&mut self, n: int) -> IoResult<()> {\n-        write!(self, \"{:d}\", n)\n+        write!(self, \"{}\", n)\n     }\n \n     /// Write the result of passing n through `uint::to_str_bytes`.\n     #[inline]\n     fn write_uint(&mut self, n: uint) -> IoResult<()> {\n-        write!(self, \"{:u}\", n)\n+        write!(self, \"{}\", n)\n     }\n \n     /// Write a little-endian uint (number of bytes depends on system).\n@@ -1896,10 +1896,8 @@ impl Default for FilePermission {\n }\n \n impl fmt::Show for FilePermission {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n-        formatter.fill = '0';\n-        formatter.width = Some(4);\n-        (&self.bits as &fmt::Octal).fmt(formatter)\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:04o}\", self.bits)\n     }\n }\n "}, {"sha": "4e5dd5d8818f4c29b9ad7b441ea38d3d9bb004a6", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -240,6 +240,7 @@ macro_rules! unimplemented(\n /// format!(\"x = {}, y = {y}\", 10i, y = 30i);\n /// ```\n #[macro_export]\n+#[stable]\n macro_rules! format(\n     ($($arg:tt)*) => (\n         format_args!(::std::fmt::format, $($arg)*)\n@@ -259,15 +260,18 @@ macro_rules! format(\n /// write!(&mut w, \"formatted {}\", \"arguments\");\n /// ```\n #[macro_export]\n+#[stable]\n macro_rules! write(\n     ($dst:expr, $($arg:tt)*) => ({\n-        format_args_method!($dst, write_fmt, $($arg)*)\n+        let dst = &mut *$dst;\n+        format_args!(|args| { dst.write_fmt(args) }, $($arg)*)\n     })\n )\n \n /// Equivalent to the `write!` macro, except that a newline is appended after\n /// the message is written.\n #[macro_export]\n+#[stable]\n macro_rules! writeln(\n     ($dst:expr, $fmt:expr $($arg:tt)*) => (\n         write!($dst, concat!($fmt, \"\\n\") $($arg)*)\n@@ -277,6 +281,7 @@ macro_rules! writeln(\n /// Equivalent to the `println!` macro except that a newline is not printed at\n /// the end of the message.\n #[macro_export]\n+#[stable]\n macro_rules! print(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::print_args, $($arg)*))\n )\n@@ -294,6 +299,7 @@ macro_rules! print(\n /// println!(\"format {} arguments\", \"some\");\n /// ```\n #[macro_export]\n+#[stable]\n macro_rules! println(\n     ($($arg:tt)*) => (format_args!(::std::io::stdio::println_args, $($arg)*))\n )"}, {"sha": "497a2d49faf201b7c72335748f4536df618a38f5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -95,7 +95,7 @@ impl Ident {\n     }\n \n     pub fn encode_with_hygiene(&self) -> String {\n-        format!(\"\\x00name_{:u},ctxt_{:u}\\x00\",\n+        format!(\"\\x00name_{},ctxt_{}\\x00\",\n                 self.name.uint(),\n                 self.ctxt)\n     }"}, {"sha": "8c70a95443bc92485d99594bf8c5988481fca90c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -361,9 +361,6 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"format_args\"),\n                             builtin_normal_expander(\n                                 ext::format::expand_format_args));\n-    syntax_expanders.insert(intern(\"format_args_method\"),\n-                            builtin_normal_expander(\n-                                ext::format::expand_format_args_method));\n     syntax_expanders.insert(intern(\"env\"),\n                             builtin_normal_expander(\n                                     ext::env::expand_env));"}, {"sha": "8fccb0755f438e79b98531c8b9f6204861cccd89", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -887,7 +887,7 @@ impl<'a> MethodDef<'a> {\n         // a series of let statements mapping each self_arg to a uint\n         // corresponding to its variant index.\n         let vi_idents: Vec<ast::Ident> = self_arg_names.iter()\n-            .map(|name| { let vi_suffix = format!(\"{:s}_vi\", name.as_slice());\n+            .map(|name| { let vi_suffix = format!(\"{}_vi\", name.as_slice());\n                           cx.ident_of(vi_suffix.as_slice()) })\n             .collect::<Vec<ast::Ident>>();\n "}, {"sha": "b04a800a32d2aace3c32eb1fb3a3a829a571d9fd", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         match arg {\n             Exact(arg) => {\n                 if self.args.len() <= arg {\n-                    let msg = format!(\"invalid reference to argument `{}` ({:s})\",\n+                    let msg = format!(\"invalid reference to argument `{}` ({})\",\n                                       arg, self.describe_num_args());\n \n                     self.ecx.span_err(self.fmtsp, msg.as_slice());\n@@ -670,17 +670,11 @@ impl<'a, 'b> Context<'a, 'b> {\n             Known(ref tyname) => {\n                 match tyname.as_slice() {\n                     \"\"  => \"Show\",\n-                    \"b\" => \"Bool\",\n-                    \"c\" => \"Char\",\n-                    \"d\" | \"i\" => \"Signed\",\n                     \"e\" => \"LowerExp\",\n                     \"E\" => \"UpperExp\",\n-                    \"f\" => \"Float\",\n                     \"o\" => \"Octal\",\n                     \"p\" => \"Pointer\",\n-                    \"s\" => \"String\",\n-                    \"t\" => \"Binary\",\n-                    \"u\" => \"Unsigned\",\n+                    \"b\" => \"Binary\",\n                     \"x\" => \"LowerHex\",\n                     \"X\" => \"UpperHex\",\n                     _ => {\n@@ -724,18 +718,6 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt, sp: Span,\n     }\n }\n \n-pub fn expand_format_args_method<'cx>(ecx: &'cx mut ExtCtxt, sp: Span,\n-                                      tts: &[ast::TokenTree]) -> Box<base::MacResult+'cx> {\n-\n-    match parse_args(ecx, sp, true, tts) {\n-        (invocation, Some((efmt, args, order, names))) => {\n-            MacExpr::new(expand_preparsed_format_args(ecx, sp, invocation, efmt,\n-                                                      args, order, names))\n-        }\n-        (_, None) => MacExpr::new(ecx.expr_uint(sp, 2))\n-    }\n-}\n-\n /// Take the various parts of `format_args!(extra, efmt, args...,\n /// name=names...)` and construct the appropriate formatting\n /// expression."}, {"sha": "2ddcab10cdafd7956888cdb465ae8fc0421a4b16", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -131,7 +131,7 @@ fn new_sctable_internal() -> SCTable {\n pub fn display_sctable(table: &SCTable) {\n     error!(\"SC table:\");\n     for (idx,val) in table.table.borrow().iter().enumerate() {\n-        error!(\"{:4u} : {}\",idx,val);\n+        error!(\"{:4} : {}\",idx,val);\n     }\n }\n "}, {"sha": "f910bfc5bd446099ac6e2fc432c36f5c9ee6eb3c", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -497,8 +497,8 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n     let mut s = match val {\n         Number(d) => {\n             let s = match (op, flags.sign) {\n-                (FormatDigit, true)  => format!(\"{:+d}\", d).into_bytes(),\n-                (FormatDigit, false) => format!(\"{:d}\", d).into_bytes(),\n+                (FormatDigit, true)  => format!(\"{:+}\", d).into_bytes(),\n+                (FormatDigit, false) => format!(\"{}\", d).into_bytes(),\n                 (FormatOctal, _)     => format!(\"{:o}\", d).into_bytes(),\n                 (FormatHex, _)       => format!(\"{:x}\", d).into_bytes(),\n                 (FormatHEX, _)       => format!(\"{:X}\", d).into_bytes(),"}, {"sha": "0ea8ca84ef8bd0f245e5f6525516f0da1d2465ee", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -687,14 +687,14 @@ impl<T: Writer> ConsoleTestState<T> {\n                     improved += 1;\n                     try!(self.write_plain(format!(\": {}\", *k).as_slice()));\n                     try!(self.write_improved());\n-                    try!(self.write_plain(format!(\" by {:.2f}%\\n\",\n+                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n                                                   pct as f64).as_slice()));\n                 }\n                 Regression(pct) => {\n                     regressed += 1;\n                     try!(self.write_plain(format!(\": {}\", *k).as_slice()));\n                     try!(self.write_regressed());\n-                    try!(self.write_plain(format!(\" by {:.2f}%\\n\",\n+                    try!(self.write_plain(format!(\" by {:.2}%\\n\",\n                                                   pct as f64).as_slice()));\n                 }\n             }"}, {"sha": "062035c23f9066eb2370ceb42fdba0a970d4e301", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -602,8 +602,8 @@ impl<'a> fmt::Show for TmFmt<'a> {\n \n             match ch {\n                 'G' => write!(fmt, \"{}\", year),\n-                'g' => write!(fmt, \"{:02d}\", (year % 100 + 100) % 100),\n-                'V' => write!(fmt, \"{:02d}\", days / 7 + 1),\n+                'g' => write!(fmt, \"{:02}\", (year % 100 + 100) % 100),\n+                'V' => write!(fmt, \"{:02}\", days / 7 + 1),\n                 _ => Ok(())\n             }\n         }\n@@ -663,7 +663,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                 11 => \"Dec\",\n                 _  => return die()\n               },\n-              'C' => return write!(fmt, \"{:02d}\", (tm.tm_year as int + 1900) / 100),\n+              'C' => return write!(fmt, \"{:02}\", (tm.tm_year as int + 1900) / 100),\n               'c' => {\n                     try!(parse_type(fmt, 'a', tm));\n                     try!(' '.fmt(fmt));\n@@ -682,9 +682,9 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                     try!('/'.fmt(fmt));\n                     return parse_type(fmt, 'y', tm);\n               }\n-              'd' => return write!(fmt, \"{:02d}\", tm.tm_mday),\n-              'e' => return write!(fmt, \"{:2d}\", tm.tm_mday),\n-              'f' => return write!(fmt, \"{:09d}\", tm.tm_nsec),\n+              'd' => return write!(fmt, \"{:02}\", tm.tm_mday),\n+              'e' => return write!(fmt, \"{:2}\", tm.tm_mday),\n+              'f' => return write!(fmt, \"{:09}\", tm.tm_nsec),\n               'F' => {\n                     try!(parse_type(fmt, 'Y', tm));\n                     try!('-'.fmt(fmt));\n@@ -694,23 +694,23 @@ impl<'a> fmt::Show for TmFmt<'a> {\n               }\n               'G' => return iso_week(fmt, 'G', tm),\n               'g' => return iso_week(fmt, 'g', tm),\n-              'H' => return write!(fmt, \"{:02d}\", tm.tm_hour),\n+              'H' => return write!(fmt, \"{:02}\", tm.tm_hour),\n               'I' => {\n                 let mut h = tm.tm_hour;\n                 if h == 0 { h = 12 }\n                 if h > 12 { h -= 12 }\n-                return write!(fmt, \"{:02d}\", h)\n+                return write!(fmt, \"{:02}\", h)\n               }\n-              'j' => return write!(fmt, \"{:03d}\", tm.tm_yday + 1),\n-              'k' => return write!(fmt, \"{:2d}\", tm.tm_hour),\n+              'j' => return write!(fmt, \"{:03}\", tm.tm_yday + 1),\n+              'k' => return write!(fmt, \"{:2}\", tm.tm_hour),\n               'l' => {\n                 let mut h = tm.tm_hour;\n                 if h == 0 { h = 12 }\n                 if h > 12 { h -= 12 }\n-                return write!(fmt, \"{:2d}\", h)\n+                return write!(fmt, \"{:2}\", h)\n               }\n-              'M' => return write!(fmt, \"{:02d}\", tm.tm_min),\n-              'm' => return write!(fmt, \"{:02d}\", tm.tm_mon + 1),\n+              'M' => return write!(fmt, \"{:02}\", tm.tm_min),\n+              'm' => return write!(fmt, \"{:02}\", tm.tm_mon + 1),\n               'n' => \"\\n\",\n               'P' => if (tm.tm_hour as int) < 12 { \"am\" } else { \"pm\" },\n               'p' => if (tm.tm_hour as int) < 12 { \"AM\" } else { \"PM\" },\n@@ -728,7 +728,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                     try!(' '.fmt(fmt));\n                     return parse_type(fmt, 'p', tm);\n               }\n-              'S' => return write!(fmt, \"{:02d}\", tm.tm_sec),\n+              'S' => return write!(fmt, \"{:02}\", tm.tm_sec),\n               's' => return write!(fmt, \"{}\", tm.to_timespec().sec),\n               'T' | 'X' => {\n                     try!(parse_type(fmt, 'H', tm));\n@@ -738,7 +738,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                     return parse_type(fmt, 'S', tm);\n               }\n               't' => \"\\t\",\n-              'U' => return write!(fmt, \"{:02d}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n+              'U' => return write!(fmt, \"{:02}\", (tm.tm_yday - tm.tm_wday + 7) / 7),\n               'u' => {\n                 let i = tm.tm_wday as int;\n                 return (if i == 0 { 7 } else { i }).fmt(fmt);\n@@ -752,19 +752,19 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                   return parse_type(fmt, 'Y', tm);\n               }\n               'W' => {\n-                  return write!(fmt, \"{:02d}\",\n+                  return write!(fmt, \"{:02}\",\n                                  (tm.tm_yday - (tm.tm_wday - 1 + 7) % 7 + 7) / 7)\n               }\n               'w' => return (tm.tm_wday as int).fmt(fmt),\n               'Y' => return (tm.tm_year as int + 1900).fmt(fmt),\n-              'y' => return write!(fmt, \"{:02d}\", (tm.tm_year as int + 1900) % 100),\n+              'y' => return write!(fmt, \"{:02}\", (tm.tm_year as int + 1900) % 100),\n               'Z' => if tm.tm_gmtoff == 0_i32 { \"GMT\"} else { \"\" }, // FIXME (#2350): support locale\n               'z' => {\n                 let sign = if tm.tm_gmtoff > 0_i32 { '+' } else { '-' };\n                 let mut m = tm.tm_gmtoff.abs() / 60_i32;\n                 let h = m / 60_i32;\n                 m -= h * 60_i32;\n-                return write!(fmt, \"{}{:02d}{:02d}\", sign, h, m);\n+                return write!(fmt, \"{}{:02}{:02}\", sign, h, m);\n               }\n               '+' => return tm.rfc3339().fmt(fmt),\n               '%' => \"%\",\n@@ -806,7 +806,7 @@ impl<'a> fmt::Show for TmFmt<'a> {\n                     let mut m = self.tm.tm_gmtoff.abs() / 60_i32;\n                     let h = m / 60_i32;\n                     m -= h * 60_i32;\n-                    write!(fmt, \"{}{}{:02d}:{:02d}\", s, sign, h as int, m as int)\n+                    write!(fmt, \"{}{}{:02}:{:02}\", s, sign, h as int, m as int)\n                 }\n             }\n         }"}, {"sha": "07300b73c85a7bcae3c1fbbbb2df63053f994528", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -148,7 +148,7 @@ fn write_header(header: &str) {\n }\n \n fn write_row(label: &str, value: Duration) {\n-    println!(\"{:30s} {} s\\n\", label, value);\n+    println!(\"{:30} {} s\\n\", label, value);\n }\n \n fn write_results(label: &str, results: &Results) {"}, {"sha": "419e39b53cf81bc39e8b7202e2bb3d589eca2a46", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -115,7 +115,7 @@ fn main() {\n     for y in range(0u, 256) {\n         for x in range(0u, 256) {\n             let idx = (pixels[y*256+x] / 0.2) as uint;\n-            print!(\"{:c}\", symbols[idx]);\n+            print!(\"{}\", symbols[idx]);\n         }\n         print!(\"\\n\");\n     }"}, {"sha": "4005c11e6b614a463d0570d9288e876fdd6ed5b9", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -63,7 +63,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n \n    let mut buffer = String::new();\n    for &(ref k, v) in pairs_sorted.iter() {\n-       buffer.push_str(format!(\"{} {:0.3f}\\n\",\n+       buffer.push_str(format!(\"{} {:0.3}\\n\",\n                                k.as_slice()\n                                .to_ascii()\n                                .to_uppercase()"}, {"sha": "b030e7bb93e87d71e5a929c4b59b2f3a0b50d046", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -266,7 +266,7 @@ fn print_frequencies(frequencies: &Table, frame: uint) {\n     }\n \n     for &(count, key) in vector.iter().rev() {\n-        println!(\"{} {:.3f}\",\n+        println!(\"{} {:.3}\",\n                  key.unpack(frame).as_slice(),\n                  (count as f32 * 100.0) / (total_count as f32));\n     }"}, {"sha": "b62504d7ba85d901c1c28a5b563037ab48a8b737", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -179,11 +179,11 @@ fn main() {\n     let mut bodies = BODIES;\n \n     offset_momentum(&mut bodies);\n-    println!(\"{:.9f}\", energy(&bodies));\n+    println!(\"{:.9}\", energy(&bodies));\n \n     advance(&mut bodies, 0.01, n);\n \n-    println!(\"{:.9f}\", energy(&bodies));\n+    println!(\"{:.9}\", energy(&bodies));\n }\n \n /// Pop a mutable reference off the head of a slice, mutating the slice to no"}, {"sha": "f76391b596bb3855021f9e2c7cd39df7f9a66bfc", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -59,7 +59,7 @@ fn main() {\n     } else {\n         from_str(args[1].as_slice()).unwrap()\n     });\n-    println!(\"{:.9f}\", answer);\n+    println!(\"{:.9}\", answer);\n }\n \n fn spectralnorm(n: uint) -> f64 {"}, {"sha": "db7f49272aac8495296f83518a3e9f6ed7ac1585", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -23,8 +23,8 @@ fn main() {\n     format!(\"{foo}\", 1, foo=2);        //~ ERROR: argument never used\n     format!(\"\", foo=2);                //~ ERROR: named argument never used\n \n-    format!(\"{0:d} {0:s}\", 1);         //~ ERROR: redeclared with type `s`\n-    format!(\"{foo:d} {foo:s}\", foo=1); //~ ERROR: redeclared with type `s`\n+    format!(\"{0:x} {0:X}\", 1);         //~ ERROR: redeclared with type `X`\n+    format!(\"{foo:x} {foo:X}\", foo=1); //~ ERROR: redeclared with type `X`\n \n     format!(\"{foo}\", foo=1, foo=2);    //~ ERROR: duplicate argument\n     format!(\"\", foo=1, 2);             //~ ERROR: positional arguments cannot follow"}, {"sha": "948040496bd392466bf689e266d3b7cce1688d1a", "filename": "src/test/compile-fail/ifmt-unimpl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    format!(\"{:d}\", \"3\");\n-    //~^ ERROR: the trait `core::fmt::Signed` is not implemented\n+    format!(\"{:X}\", \"3\");\n+    //~^ ERROR: the trait `core::fmt::UpperHex` is not implemented\n }"}, {"sha": "234fa85c89afd83db9115a77bf4e84a2be91dc5f", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -13,5 +13,5 @@\n fn foo(a: uint) -> uint { a }\n \n fn main() {\n-    println!(\"{:u}\", foo(10i)); //~ ERROR mismatched types\n+    println!(\"{}\", foo(10i)); //~ ERROR mismatched types\n }"}, {"sha": "6515b34d964e1051ee05dfc26336e3d8c483b823", "filename": "src/test/compile-fail/issue-14853.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -10,17 +10,18 @@\n \n use std::fmt::Show;\n \n+trait Str {}\n+\n trait Something {\n-    fn yay<T: Show>(_: Option<Self>, thing: &[T]) -> String {\n-    }\n+    fn yay<T: Show>(_: Option<Self>, thing: &[T]);\n }\n \n struct X { data: u32 }\n \n impl Something for X {\n-    fn yay<T: Str>(_:Option<X>, thing: &[T]) -> String {\n-//~^ ERROR in method `yay`, type parameter 0 requires bound `core::str::Str`, which is not required\n-        format!(\"{:s}\", thing[0])\n+    fn yay<T: Str>(_:Option<X>, thing: &[T]) {\n+//~^ ERROR in method `yay`, type parameter 0 requires bound `Str`, which is not required\n+\n     }\n }\n "}, {"sha": "b78371c51e432fde822d6031889459ba33a50a0b", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -22,12 +22,12 @@ struct A;\n struct B;\n struct C;\n \n-impl fmt::Signed for A {\n+impl fmt::LowerHex for A {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write(\"aloha\".as_bytes())\n     }\n }\n-impl fmt::Signed for B {\n+impl fmt::UpperHex for B {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write(\"adios\".as_bytes())\n     }\n@@ -55,71 +55,71 @@ pub fn main() {\n     t!(format!(\"{}\", 'a'), \"a\");\n \n     // At least exercise all the formats\n-    t!(format!(\"{:b}\", true), \"true\");\n-    t!(format!(\"{:c}\", '\u2603'), \"\u2603\");\n-    t!(format!(\"{:d}\", 10i), \"10\");\n-    t!(format!(\"{:i}\", 10i), \"10\");\n-    t!(format!(\"{:u}\", 10u), \"10\");\n+    t!(format!(\"{}\", true), \"true\");\n+    t!(format!(\"{}\", '\u2603'), \"\u2603\");\n+    t!(format!(\"{}\", 10i), \"10\");\n+    t!(format!(\"{}\", 10i), \"10\");\n+    t!(format!(\"{}\", 10u), \"10\");\n     t!(format!(\"{:o}\", 10u), \"12\");\n     t!(format!(\"{:x}\", 10u), \"a\");\n     t!(format!(\"{:X}\", 10u), \"A\");\n-    t!(format!(\"{:s}\", \"foo\"), \"foo\");\n-    t!(format!(\"{:s}\", \"foo\".to_string()), \"foo\");\n+    t!(format!(\"{}\", \"foo\"), \"foo\");\n+    t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n     t!(format!(\"{:p}\", 0x1234 as *const int), \"0x1234\");\n     t!(format!(\"{:p}\", 0x1234 as *mut int), \"0x1234\");\n-    t!(format!(\"{:d}\", A), \"aloha\");\n-    t!(format!(\"{:d}\", B), \"adios\");\n-    t!(format!(\"foo {:s} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n+    t!(format!(\"{:x}\", A), \"aloha\");\n+    t!(format!(\"{:X}\", B), \"adios\");\n+    t!(format!(\"foo {} \u2603\u2603\u2603\u2603\u2603\u2603\", \"bar\"), \"foo bar \u2603\u2603\u2603\u2603\u2603\u2603\");\n     t!(format!(\"{1} {0}\", 0i, 1i), \"1 0\");\n     t!(format!(\"{foo} {bar}\", foo=0i, bar=1i), \"0 1\");\n     t!(format!(\"{foo} {1} {bar} {0}\", 0i, 1i, foo=2i, bar=3i), \"2 1 3 0\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1i), \"1\");\n-    t!(format!(\"{:d}\", 5i + 5i), \"10\");\n+    t!(format!(\"{}\", 5i + 5i), \"10\");\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n \n     let a: &fmt::Show = &1i;\n     t!(format!(\"{}\", a), \"1\");\n \n     // Formatting strings and their arguments\n-    t!(format!(\"{:s}\", \"a\"), \"a\");\n-    t!(format!(\"{:4s}\", \"a\"), \"a   \");\n-    t!(format!(\"{:4s}\", \"\u2603\"), \"\u2603   \");\n-    t!(format!(\"{:>4s}\", \"a\"), \"   a\");\n-    t!(format!(\"{:<4s}\", \"a\"), \"a   \");\n-    t!(format!(\"{:^5s}\", \"a\"),  \"  a  \");\n-    t!(format!(\"{:^5s}\", \"aa\"), \" aa  \");\n-    t!(format!(\"{:^4s}\", \"a\"),  \" a  \");\n-    t!(format!(\"{:^4s}\", \"aa\"), \" aa \");\n-    t!(format!(\"{:.4s}\", \"a\"), \"a\");\n-    t!(format!(\"{:4.4s}\", \"a\"), \"a   \");\n-    t!(format!(\"{:4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:<4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:^4.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>10.4s}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:2.4s}\", \"aaaaa\"), \"aaaa\");\n-    t!(format!(\"{:2.4s}\", \"aaaa\"), \"aaaa\");\n-    t!(format!(\"{:2.4s}\", \"aaa\"), \"aaa\");\n-    t!(format!(\"{:2.4s}\", \"aa\"), \"aa\");\n-    t!(format!(\"{:2.4s}\", \"a\"), \"a \");\n-    t!(format!(\"{:0>2s}\", \"a\"), \"0a\");\n-    t!(format!(\"{:.*s}\", 4, \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:.1$s}\", \"aaaaaaaaaaaaaaaaaa\", 4), \"aaaa\");\n-    t!(format!(\"{:.a$s}\", \"aaaaaaaaaaaaaaaaaa\", a=4), \"aaaa\");\n-    t!(format!(\"{:1$s}\", \"a\", 4), \"a   \");\n-    t!(format!(\"{1:0$s}\", 4, \"a\"), \"a   \");\n-    t!(format!(\"{:a$s}\", \"a\", a=4), \"a   \");\n-    t!(format!(\"{:-#s}\", \"a\"), \"a\");\n-    t!(format!(\"{:+#s}\", \"a\"), \"a\");\n+    t!(format!(\"{}\", \"a\"), \"a\");\n+    t!(format!(\"{:4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:4}\", \"\u2603\"), \"\u2603   \");\n+    t!(format!(\"{:>4}\", \"a\"), \"   a\");\n+    t!(format!(\"{:<4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:^5}\", \"a\"),  \"  a  \");\n+    t!(format!(\"{:^5}\", \"aa\"), \" aa  \");\n+    t!(format!(\"{:^4}\", \"a\"),  \" a  \");\n+    t!(format!(\"{:^4}\", \"aa\"), \" aa \");\n+    t!(format!(\"{:.4}\", \"a\"), \"a\");\n+    t!(format!(\"{:4.4}\", \"a\"), \"a   \");\n+    t!(format!(\"{:4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:<4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:^4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaaaa\"), \"aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaaa\"), \"aaaa\");\n+    t!(format!(\"{:2.4}\", \"aaa\"), \"aaa\");\n+    t!(format!(\"{:2.4}\", \"aa\"), \"aa\");\n+    t!(format!(\"{:2.4}\", \"a\"), \"a \");\n+    t!(format!(\"{:0>2}\", \"a\"), \"0a\");\n+    t!(format!(\"{:.*}\", 4, \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:.1$}\", \"aaaaaaaaaaaaaaaaaa\", 4), \"aaaa\");\n+    t!(format!(\"{:.a$}\", \"aaaaaaaaaaaaaaaaaa\", a=4), \"aaaa\");\n+    t!(format!(\"{:1$}\", \"a\", 4), \"a   \");\n+    t!(format!(\"{1:0$}\", 4, \"a\"), \"a   \");\n+    t!(format!(\"{:a$}\", \"a\", a=4), \"a   \");\n+    t!(format!(\"{:-#}\", \"a\"), \"a\");\n+    t!(format!(\"{:+#}\", \"a\"), \"a\");\n \n     // Some float stuff\n-    t!(format!(\"{:f}\", 1.0f32), \"1\");\n-    t!(format!(\"{:f}\", 1.0f64), \"1\");\n-    t!(format!(\"{:.3f}\", 1.0f64), \"1.000\");\n-    t!(format!(\"{:10.3f}\", 1.0f64),   \"     1.000\");\n-    t!(format!(\"{:+10.3f}\", 1.0f64),  \"    +1.000\");\n-    t!(format!(\"{:+10.3f}\", -1.0f64), \"    -1.000\");\n+    t!(format!(\"{:}\", 1.0f32), \"1\");\n+    t!(format!(\"{:}\", 1.0f64), \"1\");\n+    t!(format!(\"{:.3}\", 1.0f64), \"1.000\");\n+    t!(format!(\"{:10.3}\", 1.0f64),   \"     1.000\");\n+    t!(format!(\"{:+10.3}\", 1.0f64),  \"    +1.000\");\n+    t!(format!(\"{:+10.3}\", -1.0f64), \"    -1.000\");\n \n     t!(format!(\"{:e}\", 1.2345e6f32), \"1.2345e6\");\n     t!(format!(\"{:e}\", 1.2345e6f64), \"1.2345e6\");\n@@ -164,7 +164,7 @@ fn test_write() {\n     {\n         let w = &mut buf as &mut io::Writer;\n         write!(w, \"{foo}\", foo=4i);\n-        write!(w, \"{:s}\", \"hello\");\n+        write!(w, \"{}\", \"hello\");\n         writeln!(w, \"{}\", \"line\");\n         writeln!(w, \"{foo}\", foo=\"bar\");\n     }"}, {"sha": "a29ed712d400bcb9a606fd0d73c51b0bf14f1402", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af3494bb02e80badc978faa65e59625ade0c675/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=4af3494bb02e80badc978faa65e59625ade0c675", "patch": "@@ -46,35 +46,35 @@ unsafe fn test_triangle() -> bool {\n     static PRINT : bool = false;\n \n     unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n-        if PRINT { println!(\"allocate(size={:u} align={:u})\", size, align); }\n+        if PRINT { println!(\"allocate(size={} align={})\", size, align); }\n \n         let ret = heap::allocate(size, align);\n         if ret.is_null() { alloc::oom() }\n \n-        if PRINT { println!(\"allocate(size={:u} align={:u}) ret: 0x{:010x}\",\n+        if PRINT { println!(\"allocate(size={} align={}) ret: 0x{:010x}\",\n                             size, align, ret as uint);\n         }\n \n         ret\n     }\n     unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) {\n-        if PRINT { println!(\"deallocate(ptr=0x{:010x} size={:u} align={:u})\",\n+        if PRINT { println!(\"deallocate(ptr=0x{:010x} size={} align={})\",\n                             ptr as uint, size, align);\n         }\n \n         heap::deallocate(ptr, size, align);\n     }\n     unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n         if PRINT {\n-            println!(\"reallocate(ptr=0x{:010x} old_size={:u} size={:u} align={:u})\",\n+            println!(\"reallocate(ptr=0x{:010x} old_size={} size={} align={})\",\n                      ptr as uint, old_size, size, align);\n         }\n \n         let ret = heap::reallocate(ptr, old_size, size, align);\n         if ret.is_null() { alloc::oom() }\n \n         if PRINT {\n-            println!(\"reallocate(ptr=0x{:010x} old_size={:u} size={:u} align={:u}) \\\n+            println!(\"reallocate(ptr=0x{:010x} old_size={} size={} align={}) \\\n                       ret: 0x{:010x}\",\n                      ptr as uint, old_size, size, align, ret as uint);\n         }"}]}