{"sha": "4a2094c9f61836214d9e37fa042761948483c2d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMjA5NGM5ZjYxODM2MjE0ZDllMzdmYTA0Mjc2MTk0ODQ4M2MyZDk=", "commit": {"author": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-08-27T22:44:11Z"}, "committer": {"name": "Dario Gonzalez", "email": "dario.gonzalez@fortanix.com", "date": "2019-09-04T16:24:33Z"}, "message": "address rebase changes", "tree": {"sha": "710e73dc1913cb676d512a6a2b87af31394845b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/710e73dc1913cb676d512a6a2b87af31394845b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2094c9f61836214d9e37fa042761948483c2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2094c9f61836214d9e37fa042761948483c2d9", "html_url": "https://github.com/rust-lang/rust/commit/4a2094c9f61836214d9e37fa042761948483c2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2094c9f61836214d9e37fa042761948483c2d9/comments", "author": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Goirad", "id": 20523291, "node_id": "MDQ6VXNlcjIwNTIzMjkx", "avatar_url": "https://avatars.githubusercontent.com/u/20523291?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Goirad", "html_url": "https://github.com/Goirad", "followers_url": "https://api.github.com/users/Goirad/followers", "following_url": "https://api.github.com/users/Goirad/following{/other_user}", "gists_url": "https://api.github.com/users/Goirad/gists{/gist_id}", "starred_url": "https://api.github.com/users/Goirad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Goirad/subscriptions", "organizations_url": "https://api.github.com/users/Goirad/orgs", "repos_url": "https://api.github.com/users/Goirad/repos", "events_url": "https://api.github.com/users/Goirad/events{/privacy}", "received_events_url": "https://api.github.com/users/Goirad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14110ebd936747eff905ec4e444a02a4a74f6e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/14110ebd936747eff905ec4e444a02a4a74f6e11", "html_url": "https://github.com/rust-lang/rust/commit/14110ebd936747eff905ec4e444a02a4a74f6e11"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "57b016a08c2fe2031799c0c6c055c96f4f3731ba", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4a2094c9f61836214d9e37fa042761948483c2d9", "patch": "@@ -293,7 +293,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         }\n     }).collect();\n \n-    let host_triple = TargetTriple::from_triple(config::host_triple());\n     let crate_types = if proc_macro_crate {\n         vec![config::CrateType::ProcMacro]\n     } else {"}, {"sha": "b06b368469fc1f55be780056efbb0037c90198ea", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=4a2094c9f61836214d9e37fa042761948483c2d9", "patch": "@@ -143,7 +143,8 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> i32 {\n     opts.no_crate_inject = true;\n     opts.display_warnings = options.display_warnings;\n     let mut collector = Collector::new(options.input.display().to_string(), options.clone(),\n-                                       true, opts, None, Some(options.input));\n+                                       true, opts, None, Some(options.input),\n+                                       options.enable_per_target_ignores);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n "}, {"sha": "aefe4d3ea3f43aa8dc2d1e3307a5eee20826b205", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2094c9f61836214d9e37fa042761948483c2d9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4a2094c9f61836214d9e37fa042761948483c2d9", "patch": "@@ -45,7 +45,7 @@ pub fn run(options: Options) -> i32 {\n         vec![config::CrateType::Dylib]\n     };\n \n-    let mut sessopts = config::Options {\n+    let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n         crate_types,\n@@ -84,13 +84,15 @@ pub fn run(options: Options) -> i32 {\n \n         let mut opts = scrape_test_config(lower_to_hir.peek().0.borrow().krate());\n         opts.display_warnings |= options.display_warnings;\n+        let enable_per_target_ignores = options.enable_per_target_ignores;\n         let mut collector = Collector::new(\n             compiler.crate_name()?.peek().to_string(),\n             options,\n             false,\n             opts,\n             Some(compiler.source_map().clone()),\n             None,\n+            enable_per_target_ignores,\n         );\n \n         let mut global_ctxt = compiler.global_ctxt()?.take();\n@@ -275,6 +277,7 @@ fn run_test(\n     if no_run {\n         compiler.arg(\"--emit=metadata\");\n     }\n+    compiler.arg(\"--target\").arg(target.to_string());\n \n     compiler.arg(\"-\");\n     compiler.stdin(Stdio::piped());\n@@ -616,6 +619,7 @@ pub struct Collector {\n \n     options: Options,\n     use_headers: bool,\n+    enable_per_target_ignores: bool,\n     cratename: String,\n     opts: TestOptions,\n     position: Span,\n@@ -625,12 +629,14 @@ pub struct Collector {\n \n impl Collector {\n     pub fn new(cratename: String, options: Options, use_headers: bool, opts: TestOptions,\n-               source_map: Option<Lrc<SourceMap>>, filename: Option<PathBuf>,) -> Collector {\n+               source_map: Option<Lrc<SourceMap>>, filename: Option<PathBuf>,\n+               enable_per_target_ignores: bool) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n             options,\n             use_headers,\n+            enable_per_target_ignores,\n             cratename,\n             opts,\n             position: DUMMY_SP,\n@@ -674,13 +680,9 @@ impl Tester for Collector {\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition.clone());\n         let options = self.options.clone();\n-        let maybe_sysroot = self.maybe_sysroot.clone();\n-        let linker = self.linker.clone();\n-        let edition = config.edition.unwrap_or(self.edition);\n-        let persist_doctests = self.persist_doctests.clone();\n-        let runtool = self.runtool.clone();\n-        let runtool_args = self.runtool_args.clone();\n-        let target = self.target.clone();\n+        let runtool = self.options.runtool.clone();\n+        let runtool_args = self.options.runtool_args.clone();\n+        let target = self.options.target.clone();\n         let target_str = target.to_string();\n \n         debug!(\"creating test {}: {}\", name, test);"}]}