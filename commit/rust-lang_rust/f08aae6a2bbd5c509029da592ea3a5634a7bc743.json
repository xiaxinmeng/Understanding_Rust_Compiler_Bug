{"sha": "f08aae6a2bbd5c509029da592ea3a5634a7bc743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOGFhZTZhMmJiZDVjNTA5MDI5ZGE1OTJlYTNhNTYzNGE3YmM3NDM=", "commit": {"author": {"name": "1011X", "email": "1011XXXXX@gmail.com", "date": "2020-07-04T02:11:10Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-07-18T19:14:32Z"}, "message": "impl Index<RangeFrom<usize>> for CStr", "tree": {"sha": "5b080ab9dcd0056238fe0854386bd818d2633f50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b080ab9dcd0056238fe0854386bd818d2633f50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08aae6a2bbd5c509029da592ea3a5634a7bc743", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl8TSh0ACgkQ+boUO5X/\nbYL9OQ/8D7FKHD/eHwtTEXiKXwEuiaAS4hoqvzItIqQzGV7DUYOQL9g570URRUSY\nGyeq1hEH8kLvTeeMqWItZA1H7k8j+dYF+kLxD6cpB7Yl1DDJHAZFofjSYICGr1sr\nbeDKMasZumAod/EQ4rWNG6kJ2OpK1lzbMwQef6PtgeT9BCA1CXT7iIKAPWQMVFav\nOW6FPA9QtijeMTMILhpUlizd2U1gCAW3a1tnuFiRJwG9nAIc8FxRzD/Z8s5vYoDU\nqjsgePAq1JMPOhRnWuUs55Qvbk0qp5tH1wBiKpcVWdWsX6wxvwVk+xAHC9gr/IG/\n/7YEHhwukJzhHRgDVrn60LGZxdpxdRuV4UvIscOsqTSke37ZL/IP8WHodkHTPMeb\nGIcwyhF40rrKL7DyeVmRCdouI7O23Ogw51/NPx1Q45WE+E6ibkOzWstW2lCSA3EG\nlPyujSvIB/X2wXNdSIj1YPxEPdupngePOVJbDR8NokzE4OF9jkySTrWYHJJaDfgh\nvhTQDGfW+y2m7nfqYVYYUwUujat+9i0X4EvcJzk5gXe9dYl/XTbmATda2XDP7it1\nCNgz3eneHsuenDiK7htPbZJahduNFQ6ICBscM6HbSpKt6BPoFgJQe5q3mlq+dIMA\nKQvE4QkzzDmwYAvsH5jMW1ufOj6XTw7KRJpOCxgFm5559uMGxTk=\n=KBGo\n-----END PGP SIGNATURE-----", "payload": "tree 5b080ab9dcd0056238fe0854386bd818d2633f50\nparent 9a13ef2251531d5856ca62dd8822c9b8139f479a\nauthor 1011X <1011XXXXX@gmail.com> 1593828670 -0400\ncommitter David Tolnay <dtolnay@gmail.com> 1595099672 -0700\n\nimpl Index<RangeFrom<usize>> for CStr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08aae6a2bbd5c509029da592ea3a5634a7bc743", "html_url": "https://github.com/rust-lang/rust/commit/f08aae6a2bbd5c509029da592ea3a5634a7bc743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08aae6a2bbd5c509029da592ea3a5634a7bc743/comments", "author": {"login": "1011X", "id": 1851619, "node_id": "MDQ6VXNlcjE4NTE2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1851619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1011X", "html_url": "https://github.com/1011X", "followers_url": "https://api.github.com/users/1011X/followers", "following_url": "https://api.github.com/users/1011X/following{/other_user}", "gists_url": "https://api.github.com/users/1011X/gists{/gist_id}", "starred_url": "https://api.github.com/users/1011X/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1011X/subscriptions", "organizations_url": "https://api.github.com/users/1011X/orgs", "repos_url": "https://api.github.com/users/1011X/repos", "events_url": "https://api.github.com/users/1011X/events{/privacy}", "received_events_url": "https://api.github.com/users/1011X/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a13ef2251531d5856ca62dd8822c9b8139f479a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a13ef2251531d5856ca62dd8822c9b8139f479a", "html_url": "https://github.com/rust-lang/rust/commit/9a13ef2251531d5856ca62dd8822c9b8139f479a"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "ce254f73619aad3a143b340ae1710c64fb445490", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f08aae6a2bbd5c509029da592ea3a5634a7bc743/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08aae6a2bbd5c509029da592ea3a5634a7bc743/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=f08aae6a2bbd5c509029da592ea3a5634a7bc743", "patch": "@@ -1551,6 +1551,27 @@ impl ops::Index<ops::RangeFull> for CString {\n     }\n }\n \n+#[stable(feature = \"cstr_range_from\", since = \"1.45.0\")]\n+impl ops::Index<ops::RangeFrom<usize>> for CStr {\n+    type Output = CStr;\n+\n+    fn index(&self, index: ops::RangeFrom<usize>) -> &CStr {\n+        let bytes = self.to_bytes_with_nul();\n+        // we need to manually check the starting index to account for the null\n+        // byte, since otherwise we could get an empty string that doesn't end\n+        // in a null.\n+        if index.start < bytes.len() {\n+            unsafe { CStr::from_bytes_with_nul_unchecked(&bytes[index.start..]) }\n+        } else {\n+            panic!(\n+                \"index out of bounds: the len is {} but the index is {}\",\n+                bytes.len(),\n+                index.start\n+            );\n+        }\n+    }\n+}\n+\n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl AsRef<CStr> for CStr {\n     #[inline]\n@@ -1747,4 +1768,21 @@ mod tests {\n \n         assert_eq!(CSTR.to_str().unwrap(), \"Hello, world!\");\n     }\n+\n+    #[test]\n+    fn cstr_index_from() {\n+        let original = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(original).unwrap();\n+        let result = CStr::from_bytes_with_nul(&original[7..]).unwrap();\n+\n+        assert_eq!(&cstr[7..], result);\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn cstr_index_from_empty() {\n+        let original = b\"Hello, world!\\0\";\n+        let cstr = CStr::from_bytes_with_nul(original).unwrap();\n+        let _ = &cstr[original.len()..];\n+    }\n }"}]}