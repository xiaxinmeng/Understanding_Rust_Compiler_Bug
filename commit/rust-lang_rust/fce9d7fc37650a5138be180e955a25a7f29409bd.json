{"sha": "fce9d7fc37650a5138be180e955a25a7f29409bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTlkN2ZjMzc2NTBhNTEzOGJlMTgwZTk1NWEyNWE3ZjI5NDA5YmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-30T00:04:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-30T00:06:55Z"}, "message": "rt: Remove array_list.h", "tree": {"sha": "ca97b39a6c8776277312de62fbf334062fc1390b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca97b39a6c8776277312de62fbf334062fc1390b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce9d7fc37650a5138be180e955a25a7f29409bd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce9d7fc37650a5138be180e955a25a7f29409bd", "html_url": "https://github.com/rust-lang/rust/commit/fce9d7fc37650a5138be180e955a25a7f29409bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce9d7fc37650a5138be180e955a25a7f29409bd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a318d6e0f632d1915e4475325ededb94f6eb42c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a318d6e0f632d1915e4475325ededb94f6eb42c", "html_url": "https://github.com/rust-lang/rust/commit/4a318d6e0f632d1915e4475325ededb94f6eb42c"}], "stats": {"total": 149, "additions": 0, "deletions": 149}, "files": [{"sha": "0852cf9497e2bd79ea734641fc022c3e54deecd5", "filename": "src/rt/util/array_list.h", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/4a318d6e0f632d1915e4475325ededb94f6eb42c/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/4a318d6e0f632d1915e4475325ededb94f6eb42c/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=4a318d6e0f632d1915e4475325ededb94f6eb42c", "patch": "@@ -1,149 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef ARRAY_LIST_H\n-#define ARRAY_LIST_H\n-\n-#include <inttypes.h>\n-#include <stddef.h>\n-#include <new>\n-\n-/**\n- * A simple, resizable array list. Note that this only works with POD types\n- * (because data is grown via realloc).\n- */\n-template<typename T> class array_list {\n-    static const size_t INITIAL_CAPACITY = 8;\n-    size_t _size;\n-    T * _data;\n-    size_t _capacity;\n-private:\n-    // private and left undefined to disable copying\n-    array_list(const array_list& rhs);\n-    array_list& operator=(const array_list& rhs);\n-public:\n-    array_list();\n-    ~array_list();\n-    size_t size() const;\n-    int32_t append(T value);\n-    int32_t push(T value);\n-    void pop(T *value);\n-    bool replace(T old_value, T new_value);\n-    int32_t index_of(T value) const;\n-    bool is_empty() const;\n-    T* data();\n-    const T* data() const;\n-    T & operator[](size_t index);\n-    const T & operator[](size_t index) const;\n-};\n-\n-template<typename T>\n-array_list<T>::array_list() {\n-    _size = 0;\n-    _capacity = INITIAL_CAPACITY;\n-    _data = (T *) malloc(sizeof(T) * _capacity);\n-}\n-\n-template<typename T>\n-array_list<T>::~array_list() {\n-    free(_data);\n-}\n-\n-template<typename T> size_t\n-array_list<T>::size() const {\n-    return _size;\n-}\n-\n-template<typename T> int32_t\n-array_list<T>::append(T value) {\n-    return push(value);\n-}\n-\n-template<typename T> int32_t\n-array_list<T>::push(T value) {\n-    if (_size == _capacity) {\n-        size_t new_capacity = _capacity * 2;\n-        void* buffer = realloc(_data, new_capacity * sizeof(T));\n-        if (buffer == NULL) {\n-            fprintf(stderr,\n-                    \"array_list::push> \"\n-                    \"Out of memory allocating %ld bytes\",\n-                    (long int) (new_capacity * sizeof(T)));\n-            abort();\n-        }\n-        _data = (T *) buffer;\n-        _capacity = new_capacity;\n-    }\n-    _data[_size ++] = value;\n-    return _size - 1;\n-}\n-\n-template<typename T> void\n-array_list<T>::pop(T *value) {\n-    assert(_size > 0);\n-    if (value != NULL) {\n-        *value = _data[-- _size];\n-    } else {\n-        -- _size;\n-    }\n-}\n-\n-/**\n- * Replaces the old_value in the list with the new_value.\n- * Returns the true if the replacement succeeded, or false otherwise.\n- */\n-template<typename T> bool\n-array_list<T>::replace(T old_value, T new_value) {\n-    int index = index_of(old_value);\n-    if (index < 0) {\n-        return false;\n-    }\n-    _data[index] = new_value;\n-    return true;\n-}\n-\n-template<typename T> int32_t\n-array_list<T>::index_of(T value) const {\n-    for (size_t i = 0; i < _size; i++) {\n-        if (_data[i] == value) {\n-            return i;\n-        }\n-    }\n-    return -1;\n-}\n-\n-template<typename T> T &\n-array_list<T>::operator[](size_t index) {\n-    assert(index < size());\n-    return _data[index];\n-}\n-\n-template<typename T> const T &\n-array_list<T>::operator[](size_t index) const {\n-    assert(index < size());\n-    return _data[index];\n-}\n-\n-template<typename T> bool\n-array_list<T>::is_empty() const {\n-    return _size == 0;\n-}\n-\n-template<typename T> T*\n-array_list<T>::data() {\n-    return _data;\n-}\n-\n-template<typename T> const T*\n-array_list<T>::data() const {\n-    return _data;\n-}\n-\n-#endif /* ARRAY_LIST_H */"}]}