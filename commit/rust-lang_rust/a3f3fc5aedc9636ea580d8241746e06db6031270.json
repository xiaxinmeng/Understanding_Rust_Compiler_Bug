{"sha": "a3f3fc5aedc9636ea580d8241746e06db6031270", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjNmYzVhZWRjOTYzNmVhNTgwZDgyNDE3NDZlMDZkYjYwMzEyNzA=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:21:51Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved SetLenOnDrop to set_len_on_drop", "tree": {"sha": "c02fdad89da26f96e47514ade8684e030090fde1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02fdad89da26f96e47514ade8684e030090fde1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f3fc5aedc9636ea580d8241746e06db6031270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f3fc5aedc9636ea580d8241746e06db6031270", "html_url": "https://github.com/rust-lang/rust/commit/a3f3fc5aedc9636ea580d8241746e06db6031270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f3fc5aedc9636ea580d8241746e06db6031270/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c", "html_url": "https://github.com/rust-lang/rust/commit/a2f4bc0d181f6aaee7b43fc37e7f16bd400d6b2c"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "62ca5b950ce8489f5821936aea4621b3efbf9e12", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a3f3fc5aedc9636ea580d8241746e06db6031270/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f3fc5aedc9636ea580d8241746e06db6031270/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a3f3fc5aedc9636ea580d8241746e06db6031270", "patch": "@@ -109,6 +109,10 @@ use self::spec_from_elem::SpecFromElem;\n \n mod spec_from_elem;\n \n+use self::set_len_on_drop::SetLenOnDrop;\n+\n+mod set_len_on_drop;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -1911,35 +1915,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     }\n }\n \n-// Set the length of the vec when the `SetLenOnDrop` value goes out of scope.\n-//\n-// The idea is: The length field in SetLenOnDrop is a local variable\n-// that the optimizer will see does not alias with any stores through the Vec's data\n-// pointer. This is a workaround for alias analysis issue #32155\n-struct SetLenOnDrop<'a> {\n-    len: &'a mut usize,\n-    local_len: usize,\n-}\n-\n-impl<'a> SetLenOnDrop<'a> {\n-    #[inline]\n-    fn new(len: &'a mut usize) -> Self {\n-        SetLenOnDrop { local_len: *len, len }\n-    }\n-\n-    #[inline]\n-    fn increment_len(&mut self, increment: usize) {\n-        self.local_len += increment;\n-    }\n-}\n-\n-impl Drop for SetLenOnDrop<'_> {\n-    #[inline]\n-    fn drop(&mut self) {\n-        *self.len = self.local_len;\n-    }\n-}\n-\n impl<T: PartialEq, A: Allocator> Vec<T, A> {\n     /// Removes consecutive repeated elements in the vector according to the\n     /// [`PartialEq`] trait implementation."}, {"sha": "8b66bc812129694e4976f140a1e18afed0c1aee1", "filename": "library/alloc/src/vec/set_len_on_drop.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a3f3fc5aedc9636ea580d8241746e06db6031270/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f3fc5aedc9636ea580d8241746e06db6031270/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs?ref=a3f3fc5aedc9636ea580d8241746e06db6031270", "patch": "@@ -0,0 +1,28 @@\n+// Set the length of the vec when the `SetLenOnDrop` value goes out of scope.\n+//\n+// The idea is: The length field in SetLenOnDrop is a local variable\n+// that the optimizer will see does not alias with any stores through the Vec's data\n+// pointer. This is a workaround for alias analysis issue #32155\n+pub(super) struct SetLenOnDrop<'a> {\n+    len: &'a mut usize,\n+    local_len: usize,\n+}\n+\n+impl<'a> SetLenOnDrop<'a> {\n+    #[inline]\n+    pub(super) fn new(len: &'a mut usize) -> Self {\n+        SetLenOnDrop { local_len: *len, len }\n+    }\n+\n+    #[inline]\n+    pub(super) fn increment_len(&mut self, increment: usize) {\n+        self.local_len += increment;\n+    }\n+}\n+\n+impl Drop for SetLenOnDrop<'_> {\n+    #[inline]\n+    fn drop(&mut self) {\n+        *self.len = self.local_len;\n+    }\n+}"}]}