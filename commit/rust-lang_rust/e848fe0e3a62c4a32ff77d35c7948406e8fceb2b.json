{"sha": "e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDhmZTBlM2E2MmM0YTMyZmY3N2QzNWM3OTQ4NDA2ZThmY2ViMmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-07T14:32:07Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-19T17:38:37Z"}, "message": "Refactor: Replace anonymous-tuple with tuple struct as prep for adding more fields in future.", "tree": {"sha": "445e8ff283a9c4e7257f8288bafad090d3be3110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/445e8ff283a9c4e7257f8288bafad090d3be3110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "html_url": "https://github.com/rust-lang/rust/commit/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac61267a75e190accfc278be8fab31556e75d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac61267a75e190accfc278be8fab31556e75d41", "html_url": "https://github.com/rust-lang/rust/commit/cac61267a75e190accfc278be8fab31556e75d41"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "e04e04c9f56fda7a373baf71ad6193d59e9751cb", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e848fe0e3a62c4a32ff77d35c7948406e8fceb2b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e848fe0e3a62c4a32ff77d35c7948406e8fceb2b", "patch": "@@ -70,11 +70,11 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some((liberated_closure_env_ty(tcx, id, body_id), None))\n+                    Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None))\n                 }\n                 ty::TyGenerator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n-                    Some((gen_ty, None))\n+                    Some(ArgInfo(gen_ty, None))\n                 }\n                 _ => None,\n             };\n@@ -91,7 +91,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     .iter()\n                     .enumerate()\n                     .map(|(index, arg)| {\n-                        (fn_sig.inputs()[index], Some(&*arg.pat))\n+                        ArgInfo(fn_sig.inputs()[index], Some(&*arg.pat))\n                     });\n \n             let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n@@ -433,6 +433,8 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n+struct ArgInfo<'gcx>(Ty<'gcx>, Option<&'gcx hir::Pat>);\n+\n fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    fn_id: ast::NodeId,\n                                    arguments: A,\n@@ -442,7 +444,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                    yield_ty: Option<Ty<'gcx>>,\n                                    body: &'gcx hir::Body)\n                                    -> Mir<'tcx>\n-    where A: Iterator<Item=(Ty<'gcx>, Option<&'gcx hir::Pat>)>\n+    where A: Iterator<Item=ArgInfo<'gcx>>\n {\n     let arguments: Vec<_> = arguments.collect();\n \n@@ -642,13 +644,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn args_and_body(&mut self,\n                      mut block: BasicBlock,\n-                     arguments: &[(Ty<'gcx>, Option<&'gcx hir::Pat>)],\n+                     arguments: &[ArgInfo<'gcx>],\n                      argument_scope: region::Scope,\n                      ast_body: &'gcx hir::Expr)\n                      -> BlockAnd<()>\n     {\n         // Allocate locals for the function arguments\n-        for &(ty, pattern) in arguments.iter() {\n+        for &ArgInfo(ty, pattern) in arguments.iter() {\n             // If this is a simple binding pattern, give the local a nice name for debuginfo.\n             let mut name = None;\n             if let Some(pat) = pattern {\n@@ -674,7 +676,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let mut scope = None;\n         // Bind the argument patterns\n-        for (index, &(ty, pattern)) in arguments.iter().enumerate() {\n+        for (index, &ArgInfo(ty, pattern)) in arguments.iter().enumerate() {\n             // Function arguments always get the first Local indices after the return place\n             let local = Local::new(index + 1);\n             let place = Place::Local(local);"}]}