{"sha": "98d1724cb0e4445c7b16a1fca909c83f539c8a72", "node_id": "C_kwDOAAsO6NoAKDk4ZDE3MjRjYjBlNDQ0NWM3YjE2YTFmY2E5MDljODNmNTM5YzhhNzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-22T14:58:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-22T14:58:17Z"}, "message": "Merge #11786\n\n11786: fix: fill_match_arms doesn't add wildcard pat for local enums r=Veykril a=OleStrohm\n\nFix #11783 \r\n\r\nThis adds similar logic to non_exhaustive as is currently on doc(hidden)\n\nCo-authored-by: Ole Strohm <strohm99@gmail.com>", "tree": {"sha": "f4d5ea237b64329cb5dd5e9802ae72bf74505467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d5ea237b64329cb5dd5e9802ae72bf74505467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d1724cb0e4445c7b16a1fca909c83f539c8a72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOeQJCRBK7hj4Ov3rIwAA8YYIALKk373vsxX2ZRh0zPDT5Yhb\n8rWmMk3+LhRPqoQWuTWmbfmP3j8N6DCMtZUUCIRj3ExKxHplwn8BhvX2rZ4UBeu0\nlGnpyVKUFXdKP8bY+otIkpQ6aGXzLeBduOz8kChQSHI32xdgL/Z1lOz4+jfGBC2Z\nW1SIX01qczyZn/idPW86Qc/Q39fG864HBcBv64dSkqdrNUQ26vDbOzT3Ya5aDZEN\nHZUdmtK5oByi++qLfwaja84hbc1VcaSOkapaYr0A35exejzDQYr5wb/vifzvMsFl\nw0EMEaGYEBuNqwhZHmFTkSrv2RdTfFhr/YAPgk2gAuVfPfbHyFfTWe+9HW3YI7g=\n=TvFx\n-----END PGP SIGNATURE-----\n", "payload": "tree f4d5ea237b64329cb5dd5e9802ae72bf74505467\nparent 5d2cd18765abb681cacc2a57aebde13fa1dc32c1\nparent b3bd547dda70d2e1574a6896deb84c85866adf76\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647961097 +0000\ncommitter GitHub <noreply@github.com> 1647961097 +0000\n\nMerge #11786\n\n11786: fix: fill_match_arms doesn't add wildcard pat for local enums r=Veykril a=OleStrohm\n\nFix #11783 \r\n\r\nThis adds similar logic to non_exhaustive as is currently on doc(hidden)\n\nCo-authored-by: Ole Strohm <strohm99@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d1724cb0e4445c7b16a1fca909c83f539c8a72", "html_url": "https://github.com/rust-lang/rust/commit/98d1724cb0e4445c7b16a1fca909c83f539c8a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d1724cb0e4445c7b16a1fca909c83f539c8a72/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2cd18765abb681cacc2a57aebde13fa1dc32c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2cd18765abb681cacc2a57aebde13fa1dc32c1", "html_url": "https://github.com/rust-lang/rust/commit/5d2cd18765abb681cacc2a57aebde13fa1dc32c1"}, {"sha": "b3bd547dda70d2e1574a6896deb84c85866adf76", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bd547dda70d2e1574a6896deb84c85866adf76", "html_url": "https://github.com/rust-lang/rust/commit/b3bd547dda70d2e1574a6896deb84c85866adf76"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "0dc67ede36e7a20841c90a734041a5812da65b7e", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/98d1724cb0e4445c7b16a1fca909c83f539c8a72/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d1724cb0e4445c7b16a1fca909c83f539c8a72/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=98d1724cb0e4445c7b16a1fca909c83f539c8a72", "patch": "@@ -78,7 +78,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         Peekable<Box<dyn Iterator<Item = (ast::Pat, bool)>>>,\n         bool,\n     ) = if let Some(enum_def) = resolve_enum_def(&ctx.sema, &expr) {\n-        let is_non_exhaustive = enum_def.is_non_exhaustive(ctx.db());\n+        let is_non_exhaustive = enum_def.is_non_exhaustive(ctx.db(), module.krate());\n \n         let variants = enum_def.variants(ctx.db());\n \n@@ -104,7 +104,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         (missing_pats.peekable(), is_non_exhaustive)\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n         let is_non_exhaustive =\n-            enum_defs.iter().any(|enum_def| enum_def.is_non_exhaustive(ctx.db()));\n+            enum_defs.iter().any(|enum_def| enum_def.is_non_exhaustive(ctx.db(), module.krate()));\n \n         let mut n_arms = 1;\n         let variants_of_enums: Vec<Vec<ExtendedVariant>> = enum_defs\n@@ -301,9 +301,11 @@ fn lift_enum(e: hir::Enum) -> ExtendedEnum {\n }\n \n impl ExtendedEnum {\n-    fn is_non_exhaustive(self, db: &RootDatabase) -> bool {\n+    fn is_non_exhaustive(self, db: &RootDatabase, krate: Crate) -> bool {\n         match self {\n-            ExtendedEnum::Enum(e) => e.attrs(db).by_key(\"non_exhaustive\").exists(),\n+            ExtendedEnum::Enum(e) => {\n+                e.attrs(db).by_key(\"non_exhaustive\").exists() && e.module(db).krate() != krate\n+            }\n             _ => false,\n         }\n     }\n@@ -1657,8 +1659,32 @@ fn foo(t: E) {\n     }\n \n     #[test]\n-    fn ignores_doc_hidden_for_crate_local_enums_but_not_non_exhaustive() {\n-        cov_mark::check!(added_wildcard_pattern);\n+    fn ignores_non_exhaustive_for_crate_local_enums() {\n+        check_assist(\n+            add_missing_match_arms,\n+            r#\"\n+#[non_exhaustive]\n+enum E { A, B, }\n+\n+fn foo(t: E) {\n+    match $0t {\n+    }\n+}\"#,\n+            r#\"\n+#[non_exhaustive]\n+enum E { A, B, }\n+\n+fn foo(t: E) {\n+    match t {\n+        $0E::A => todo!(),\n+        E::B => todo!(),\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn ignores_doc_hidden_and_non_exhaustive_for_crate_local_enums() {\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n@@ -1677,7 +1703,6 @@ fn foo(t: E) {\n     match t {\n         $0E::A => todo!(),\n         E::B => todo!(),\n-        _ => todo!(),\n     }\n }\"#,\n         );"}]}