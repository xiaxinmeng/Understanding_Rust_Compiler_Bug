{"sha": "41807a30943b2459c8a8e2accfbbead8959490d4", "node_id": "C_kwDOAAsO6NoAKDQxODA3YTMwOTQzYjI0NTljOGE4ZTJhY2NmYmJlYWQ4OTU5NDkwZDQ", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-04T02:46:40Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-05-04T02:46:40Z"}, "message": "Support more SIMD intrinsics", "tree": {"sha": "efc7374d55a8657c78a65662a8bbaa56dcfbcab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc7374d55a8657c78a65662a8bbaa56dcfbcab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41807a30943b2459c8a8e2accfbbead8959490d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41807a30943b2459c8a8e2accfbbead8959490d4", "html_url": "https://github.com/rust-lang/rust/commit/41807a30943b2459c8a8e2accfbbead8959490d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41807a30943b2459c8a8e2accfbbead8959490d4/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b40ac790da69d99028324540fa84404096f04ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b40ac790da69d99028324540fa84404096f04ab", "html_url": "https://github.com/rust-lang/rust/commit/4b40ac790da69d99028324540fa84404096f04ab"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "1b089f08f764a066127b5669de791d39a466e047", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41807a30943b2459c8a8e2accfbbead8959490d4/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41807a30943b2459c8a8e2accfbbead8959490d4/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=41807a30943b2459c8a8e2accfbbead8959490d4", "patch": "@@ -107,24 +107,24 @@ pub fn adjust_intrinsic_arguments<'a, 'b, 'gcc, 'tcx>(builder: &Builder<'a, 'gcc\n \n                         args = new_args.into();\n                     },\n-                    \"__builtin_ia32_subps512_mask\" | \"__builtin_ia32_subpd512_mask\"\n+                    \"__builtin_ia32_addps512_mask\" | \"__builtin_ia32_addpd512_mask\"\n+                        | \"__builtin_ia32_subps512_mask\" | \"__builtin_ia32_subpd512_mask\"\n                         | \"__builtin_ia32_mulps512_mask\" | \"__builtin_ia32_mulpd512_mask\"\n-                        | \"__builtin_ia32_divps512_mask\" | \"__builtin_ia32_divpd512_mask\"\n-                        | \"__builtin_ia32_vfmaddsubps512_mask\" | \"__builtin_ia32_vfmaddsubpd512_mask\" => {\n+                        | \"__builtin_ia32_divps512_mask\" | \"__builtin_ia32_divpd512_mask\" => {\n                         let mut new_args = args.to_vec();\n                         let last_arg = new_args.pop().expect(\"last arg\");\n+                        let arg3_type = gcc_func.get_param_type(2);\n+                        let undefined = builder.current_func().new_local(None, arg3_type, \"undefined_for_intrinsic\").to_rvalue();\n+                        new_args.push(undefined);\n                         let arg4_type = gcc_func.get_param_type(3);\n                         let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n                         new_args.push(minus_one);\n                         new_args.push(last_arg);\n                         args = new_args.into();\n                     },\n-                    \"__builtin_ia32_addps512_mask\" | \"__builtin_ia32_addpd512_mask\" => {\n+                    \"__builtin_ia32_vfmaddsubps512_mask\" | \"__builtin_ia32_vfmaddsubpd512_mask\" => {\n                         let mut new_args = args.to_vec();\n                         let last_arg = new_args.pop().expect(\"last arg\");\n-                        let arg3_type = gcc_func.get_param_type(2);\n-                        let undefined = builder.current_func().new_local(None, arg3_type, \"undefined_for_intrinsic\").to_rvalue();\n-                        new_args.push(undefined);\n                         let arg4_type = gcc_func.get_param_type(3);\n                         let minus_one = builder.context.new_rvalue_from_int(arg4_type, -1);\n                         new_args.push(minus_one);\n@@ -154,7 +154,10 @@ pub fn ignore_arg_cast(func_name: &str, index: usize, args_len: usize) -> bool {\n                     return true;\n                 }\n             },\n-        \"__builtin_ia32_vfmaddps512_mask\" => {\n+        \"__builtin_ia32_vfmaddps512_mask\" | \"__builtin_ia32_vfmaddpd512_mask\" => {\n+            // Since there are two LLVM intrinsics that map to each of these GCC builtins and only\n+            // one of them has a missing parameter before the last one, we check the number of\n+            // arguments to distinguish those cases.\n             if args_len == 4 && index == args_len - 1 {\n                 return true;\n             }\n@@ -217,6 +220,7 @@ pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function\n         \"llvm.x86.avx512.div.ps.512\" => \"__builtin_ia32_divps512_mask\",\n         \"llvm.x86.avx512.div.pd.512\" => \"__builtin_ia32_divpd512_mask\",\n         \"llvm.x86.avx512.vfmadd.ps.512\" => \"__builtin_ia32_vfmaddps512_mask\",\n+        \"llvm.x86.avx512.vfmadd.pd.512\" => \"__builtin_ia32_vfmaddpd512_mask\",\n \n         // The above doc points to unknown builtins for the following, so override them:\n         \"llvm.x86.avx2.gather.d.d\" => \"__builtin_ia32_gathersiv4si\","}]}