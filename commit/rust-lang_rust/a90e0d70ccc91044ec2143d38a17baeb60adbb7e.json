{"sha": "a90e0d70ccc91044ec2143d38a17baeb60adbb7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MGUwZDcwY2NjOTEwNDRlYzIxNDNkMzhhMTdiYWViNjBhZGJiN2U=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:08:28Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-12-05T18:08:28Z"}, "message": "rollup merge of #19534: scialex/liballoc-cfg\n\nAdds the ability to use a custom allocator heap by passing either --cfg\nexternal_crate and --extern external=<allocator_crate_name> or --cfg\nexternal_funcs and defining the allocator functions prefixed by 'rust_'\nsomewhere.\n\nThis is useful for many applications including OS/embedded development,\nand allocator development and testing.", "tree": {"sha": "e1a7bb124e02dc5f1275aad360cea86c133db663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a7bb124e02dc5f1275aad360cea86c133db663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90e0d70ccc91044ec2143d38a17baeb60adbb7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90e0d70ccc91044ec2143d38a17baeb60adbb7e", "html_url": "https://github.com/rust-lang/rust/commit/a90e0d70ccc91044ec2143d38a17baeb60adbb7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90e0d70ccc91044ec2143d38a17baeb60adbb7e/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8eaf7bc8abb1de149723abd1c1b6e636c9b0046", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8eaf7bc8abb1de149723abd1c1b6e636c9b0046", "html_url": "https://github.com/rust-lang/rust/commit/b8eaf7bc8abb1de149723abd1c1b6e636c9b0046"}, {"sha": "87235687a13f3fca2e300674997880f0f9ba12a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/87235687a13f3fca2e300674997880f0f9ba12a7", "html_url": "https://github.com/rust-lang/rust/commit/87235687a13f3fca2e300674997880f0f9ba12a7"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "067c235c9ae493a3c17ac452b00fbd05547c0757", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a90e0d70ccc91044ec2143d38a17baeb60adbb7e/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90e0d70ccc91044ec2143d38a17baeb60adbb7e/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=a90e0d70ccc91044ec2143d38a17baeb60adbb7e", "patch": "@@ -123,7 +123,59 @@ const MIN_ALIGN: uint = 8;\n           target_arch = \"x86_64\"))]\n const MIN_ALIGN: uint = 16;\n \n-#[cfg(jemalloc)]\n+#[cfg(external_funcs)]\n+mod imp {\n+    extern {\n+        fn rust_allocate(size: uint, align: uint) -> *mut u8;\n+        fn rust_deallocate(ptr: *mut u8, old_size: uint, align: uint);\n+        fn rust_reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8;\n+        fn rust_reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n+                                   align: uint) -> uint;\n+        fn rust_usable_size(size: uint, align: uint) -> uint;\n+        fn rust_stats_print();\n+    }\n+\n+    #[inline]\n+    pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n+        rust_allocate(size, align)\n+    }\n+\n+    #[inline]\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n+                                     align: uint) -> uint {\n+        rust_reallocate_inplace(ptr, old_size, size, align)\n+    }\n+\n+    #[inline]\n+    pub unsafe fn deallocate(ptr: *mut u8, old_size: uint, align: uint) {\n+        rust_deallocate(ptr, old_size, align)\n+    }\n+\n+    #[inline]\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n+                                     align: uint) -> uint {\n+        rust_reallocate_inplace(ptr, old_size, size, align)\n+    }\n+\n+    #[inline]\n+    pub fn usable_size(size: uint, align: uint) -> uint {\n+        unsafe { rust_usable_size(size, align) }\n+    }\n+\n+    #[inline]\n+    pub fn stats_print() {\n+        unsafe { rust_stats_print() }\n+    }\n+}\n+\n+#[cfg(external_crate)]\n+mod imp {\n+    extern crate external;\n+    pub use self::external::{allocate, deallocate, reallocate_inplace, reallocate};\n+    pub use self::external::{usable_size, stats_print};\n+}\n+\n+#[cfg(all(not(external_funcs), not(external_crate), jemalloc))]\n mod imp {\n     use core::option::{None, Option};\n     use core::ptr::{null_mut, null};\n@@ -199,7 +251,7 @@ mod imp {\n     }\n }\n \n-#[cfg(all(not(jemalloc), unix))]\n+#[cfg(all(not(external_funcs), not(external_crate), not(jemalloc), unix))]\n mod imp {\n     use core::cmp;\n     use core::ptr;\n@@ -260,7 +312,7 @@ mod imp {\n     pub fn stats_print() {}\n }\n \n-#[cfg(all(not(jemalloc), windows))]\n+#[cfg(all(not(external_funcs), not(external_crate), not(jemalloc), windows))]\n mod imp {\n     use libc::{c_void, size_t};\n     use libc;"}]}