{"sha": "c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NmJmZTdlMmQ0NDY1NjUzZmU2YjBlZmYwNTNmMGRmYjQ4MzEzZmE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-11-11T20:00:31Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2018-11-11T20:00:31Z"}, "message": "Split string lexing and run rustfmt", "tree": {"sha": "93c56d8301131a01de13b73010f615291eb1d6d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c56d8301131a01de13b73010f615291eb1d6d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "html_url": "https://github.com/rust-lang/rust/commit/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30cd4d5acb7dfd40cea264a926d1c89f0c3522c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/30cd4d5acb7dfd40cea264a926d1c89f0c3522c3", "html_url": "https://github.com/rust-lang/rust/commit/30cd4d5acb7dfd40cea264a926d1c89f0c3522c3"}], "stats": {"total": 1069, "additions": 548, "deletions": 521}, "files": [{"sha": "d253c97e7736e3f7f2dd8e10cbb6de680401dbc2", "filename": "crates/ra_syntax/src/string_lexing.rs", "status": "removed", "additions": 0, "deletions": 513, "changes": 513, "blob_url": "https://github.com/rust-lang/rust/blob/30cd4d5acb7dfd40cea264a926d1c89f0c3522c3/crates%2Fra_syntax%2Fsrc%2Fstring_lexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cd4d5acb7dfd40cea264a926d1c89f0c3522c3/crates%2Fra_syntax%2Fsrc%2Fstring_lexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing.rs?ref=30cd4d5acb7dfd40cea264a926d1c89f0c3522c3", "patch": "@@ -1,513 +0,0 @@\n-use self::CharComponentKind::*;\n-use rowan::{TextRange, TextUnit};\n-\n-pub fn parse_byte_string_literal(src: &str) -> ByteStringComponentIterator {\n-    ByteStringComponentIterator {\n-        parser: Parser::new(src),\n-        has_closing_quote: false,\n-    }\n-}\n-\n-pub struct ByteStringComponentIterator<'a> {\n-    parser: Parser<'a>,\n-    pub has_closing_quote: bool,\n-}\n-\n-impl<'a> Iterator for ByteStringComponentIterator<'a> {\n-    type Item = StringComponent;\n-    fn next(&mut self) -> Option<StringComponent> {\n-        if self.parser.pos == 0 {\n-            assert!(\n-                self.parser.advance() == 'b',\n-                \"byte string literal should start with a `b`\"\n-            );\n-\n-            assert!(\n-                self.parser.advance() == '\"',\n-                \"byte string literal should start with a `b`, followed by double quotes\"\n-            );\n-        }\n-\n-        if let Some(component) = self.parser.parse_string_component() {\n-            return Some(component);\n-        }\n-\n-        // We get here when there are no char components left to parse\n-        if self.parser.peek() == Some('\"') {\n-            self.parser.advance();\n-            self.has_closing_quote = true;\n-        }\n-\n-        assert!(\n-            self.parser.peek() == None,\n-            \"byte string literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n-            self.parser.src,\n-            self.parser.pos,\n-            self.parser.src.len()\n-        );\n-\n-        None\n-    }\n-}\n-\n-pub fn parse_string_literal(src: &str) -> StringComponentIterator {\n-    StringComponentIterator {\n-        parser: Parser::new(src),\n-        has_closing_quote: false,\n-    }\n-}\n-\n-#[derive(Debug, Eq, PartialEq, Clone)]\n-pub struct StringComponent {\n-    pub range: TextRange,\n-    pub kind: StringComponentKind,\n-}\n-\n-impl StringComponent {\n-    fn new(range: TextRange, kind: StringComponentKind) -> StringComponent {\n-        StringComponent { range, kind }\n-    }\n-}\n-\n-#[derive(Debug, Eq, PartialEq, Clone)]\n-pub enum StringComponentKind {\n-    IgnoreNewline,\n-    Char(CharComponentKind),\n-}\n-\n-pub struct StringComponentIterator<'a> {\n-    parser: Parser<'a>,\n-    pub has_closing_quote: bool,\n-}\n-\n-impl<'a> Iterator for StringComponentIterator<'a> {\n-    type Item = StringComponent;\n-    fn next(&mut self) -> Option<StringComponent> {\n-        if self.parser.pos == 0 {\n-            assert!(\n-                self.parser.advance() == '\"',\n-                \"string literal should start with double quotes\"\n-            );\n-        }\n-\n-        if let Some(component) = self.parser.parse_string_component() {\n-            return Some(component);\n-        }\n-\n-        // We get here when there are no char components left to parse\n-        if self.parser.peek() == Some('\"') {\n-            self.parser.advance();\n-            self.has_closing_quote = true;\n-        }\n-\n-        assert!(\n-            self.parser.peek() == None,\n-            \"string literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n-            self.parser.src,\n-            self.parser.pos,\n-            self.parser.src.len()\n-        );\n-\n-        None\n-    }\n-}\n-\n-pub fn parse_byte_literal(src: &str) -> ByteComponentIterator {\n-    ByteComponentIterator {\n-        parser: Parser::new(src),\n-        has_closing_quote: false,\n-    }\n-}\n-\n-pub struct ByteComponentIterator<'a> {\n-    parser: Parser<'a>,\n-    pub has_closing_quote: bool,\n-}\n-\n-impl<'a> Iterator for ByteComponentIterator<'a> {\n-    type Item = CharComponent;\n-    fn next(&mut self) -> Option<CharComponent> {\n-        if self.parser.pos == 0 {\n-            assert!(\n-                self.parser.advance() == 'b',\n-                \"Byte literal should start with a `b`\"\n-            );\n-\n-            assert!(\n-                self.parser.advance() == '\\'',\n-                \"Byte literal should start with a `b`, followed by a quote\"\n-            );\n-        }\n-\n-\n-        if let Some(component) = self.parser.parse_char_component() {\n-            return Some(component);\n-        }\n-\n-        // We get here when there are no char components left to parse\n-        if self.parser.peek() == Some('\\'') {\n-            self.parser.advance();\n-            self.has_closing_quote = true;\n-        }\n-\n-        assert!(\n-            self.parser.peek() == None,\n-            \"byte literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n-            self.parser.src,\n-            self.parser.pos,\n-            self.parser.src.len()\n-        );\n-\n-        None\n-    }\n-}\n-\n-pub fn parse_char_literal(src: &str) -> CharComponentIterator {\n-    CharComponentIterator {\n-        parser: Parser::new(src),\n-        has_closing_quote: false,\n-    }\n-}\n-\n-#[derive(Debug, Eq, PartialEq, Clone)]\n-pub struct CharComponent {\n-    pub range: TextRange,\n-    pub kind: CharComponentKind,\n-}\n-\n-impl CharComponent {\n-    fn new(range: TextRange, kind: CharComponentKind) -> CharComponent {\n-        CharComponent { range, kind }\n-    }\n-}\n-\n-#[derive(Debug, Eq, PartialEq, Clone)]\n-pub enum CharComponentKind {\n-    CodePoint,\n-    AsciiEscape,\n-    AsciiCodeEscape,\n-    UnicodeEscape,\n-}\n-\n-pub struct CharComponentIterator<'a> {\n-    parser: Parser<'a>,\n-    pub has_closing_quote: bool,\n-}\n-\n-impl<'a> Iterator for CharComponentIterator<'a> {\n-    type Item = CharComponent;\n-    fn next(&mut self) -> Option<CharComponent> {\n-        if self.parser.pos == 0 {\n-            assert!(\n-                self.parser.advance() == '\\'',\n-                \"char literal should start with a quote\"\n-            );\n-        }\n-\n-        if let Some(component) = self.parser.parse_char_component() {\n-            return Some(component);\n-        }\n-\n-        // We get here when there are no char components left to parse\n-        if self.parser.peek() == Some('\\'') {\n-            self.parser.advance();\n-            self.has_closing_quote = true;\n-        }\n-\n-        assert!(\n-            self.parser.peek() == None,\n-            \"char literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n-            self.parser.src,\n-            self.parser.pos,\n-            self.parser.src.len()\n-        );\n-\n-        None\n-    }\n-}\n-\n-pub struct Parser<'a> {\n-    src: &'a str,\n-    pos: usize,\n-}\n-\n-impl<'a> Parser<'a> {\n-    pub fn new(src: &'a str) -> Parser<'a> {\n-        Parser { src, pos: 0 }\n-    }\n-\n-    // Utility methods\n-\n-    pub fn peek(&self) -> Option<char> {\n-        if self.pos == self.src.len() {\n-            return None;\n-        }\n-\n-        self.src[self.pos..].chars().next()\n-    }\n-\n-    pub fn advance(&mut self) -> char {\n-        let next = self\n-            .peek()\n-            .expect(\"cannot advance if end of input is reached\");\n-        self.pos += next.len_utf8();\n-        next\n-    }\n-\n-    pub fn skip_whitespace(&mut self) {\n-        while self.peek().map(|c| c.is_whitespace()) == Some(true) {\n-            self.advance();\n-        }\n-    }\n-\n-    pub fn get_pos(&self) -> TextUnit {\n-        (self.pos as u32).into()\n-    }\n-\n-    // Char parsing methods\n-\n-    fn parse_unicode_escape(&mut self, start: TextUnit) -> CharComponent {\n-        match self.peek() {\n-            Some('{') => {\n-                self.advance();\n-\n-                // Parse anything until we reach `}`\n-                while let Some(next) = self.peek() {\n-                    self.advance();\n-                    if next == '}' {\n-                        break;\n-                    }\n-                }\n-\n-                let end = self.get_pos();\n-                CharComponent::new(TextRange::from_to(start, end), UnicodeEscape)\n-            }\n-            Some(_) | None => {\n-                let end = self.get_pos();\n-                CharComponent::new(TextRange::from_to(start, end), UnicodeEscape)\n-            }\n-        }\n-    }\n-\n-    fn parse_ascii_code_escape(&mut self, start: TextUnit) -> CharComponent {\n-        let code_start = self.get_pos();\n-        while let Some(next) = self.peek() {\n-            if next == '\\'' || (self.get_pos() - code_start == 2.into()) {\n-                break;\n-            }\n-\n-            self.advance();\n-        }\n-\n-        let end = self.get_pos();\n-        CharComponent::new(TextRange::from_to(start, end), AsciiCodeEscape)\n-    }\n-\n-    fn parse_escape(&mut self, start: TextUnit) -> CharComponent {\n-        if self.peek().is_none() {\n-            return CharComponent::new(TextRange::from_to(start, start), AsciiEscape);\n-        }\n-\n-        let next = self.advance();\n-        let end = self.get_pos();\n-        let range = TextRange::from_to(start, end);\n-        match next {\n-            'x' => self.parse_ascii_code_escape(start),\n-            'u' => self.parse_unicode_escape(start),\n-            _ => CharComponent::new(range, AsciiEscape),\n-        }\n-    }\n-\n-    pub fn parse_char_component(&mut self) -> Option<CharComponent> {\n-        let next = self.peek()?;\n-\n-        // Ignore character close\n-        if next == '\\'' {\n-            return None;\n-        }\n-\n-        let start = self.get_pos();\n-        self.advance();\n-\n-        if next == '\\\\' {\n-            Some(self.parse_escape(start))\n-        } else {\n-            let end = self.get_pos();\n-            Some(CharComponent::new(\n-                TextRange::from_to(start, end),\n-                CodePoint,\n-            ))\n-        }\n-    }\n-\n-    pub fn parse_ignore_newline(&mut self, start: TextUnit) -> Option<StringComponent> {\n-        // In string literals, when a `\\` occurs immediately before the newline, the `\\`,\n-        // the newline, and all whitespace at the beginning of the next line are ignored\n-        match self.peek() {\n-            Some('\\n') | Some('\\r') => {\n-                self.skip_whitespace();\n-                Some(StringComponent::new(\n-                    TextRange::from_to(start, self.get_pos()),\n-                    StringComponentKind::IgnoreNewline,\n-                ))\n-            }\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn parse_string_component(&mut self) -> Option<StringComponent> {\n-        let next = self.peek()?;\n-\n-        // Ignore string close\n-        if next == '\"' {\n-            return None;\n-        }\n-\n-        let start = self.get_pos();\n-        self.advance();\n-\n-        if next == '\\\\' {\n-            // Strings can use `\\` to ignore newlines, so we first try to parse one of those\n-            // before falling back to parsing char escapes\n-            self.parse_ignore_newline(start).or_else(|| {\n-                let char_component = self.parse_escape(start);\n-                Some(StringComponent::new(\n-                    char_component.range,\n-                    StringComponentKind::Char(char_component.kind),\n-                ))\n-            })\n-        } else {\n-            let end = self.get_pos();\n-            Some(StringComponent::new(\n-                TextRange::from_to(start, end),\n-                StringComponentKind::Char(CodePoint),\n-            ))\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    fn parse(src: &str) -> (bool, Vec<CharComponent>) {\n-        let component_iterator = &mut super::parse_char_literal(src);\n-        let components: Vec<_> = component_iterator.collect();\n-        (component_iterator.has_closing_quote, components)\n-    }\n-\n-    fn unclosed_char_component(src: &str) -> CharComponent {\n-        let (has_closing_quote, components) = parse(src);\n-        assert!(!has_closing_quote, \"char should not have closing quote\");\n-        assert!(components.len() == 1);\n-        components[0].clone()\n-    }\n-\n-    fn closed_char_component(src: &str) -> CharComponent {\n-        let (has_closing_quote, components) = parse(src);\n-        assert!(has_closing_quote, \"char should have closing quote\");\n-        assert!(\n-            components.len() == 1,\n-            \"Literal: {}\\nComponents: {:#?}\",\n-            src,\n-            components\n-        );\n-        components[0].clone()\n-    }\n-\n-    fn closed_char_components(src: &str) -> Vec<CharComponent> {\n-        let (has_closing_quote, components) = parse(src);\n-        assert!(has_closing_quote, \"char should have closing quote\");\n-        components\n-    }\n-\n-    fn range_closed(src: &str) -> TextRange {\n-        TextRange::from_to(1.into(), (src.len() as u32 - 1).into())\n-    }\n-\n-    fn range_unclosed(src: &str) -> TextRange {\n-        TextRange::from_to(1.into(), (src.len() as u32).into())\n-    }\n-\n-    #[test]\n-    fn test_unicode_escapes() {\n-        let unicode_escapes = &[r\"{DEAD}\", \"{BEEF}\", \"{FF}\", \"{}\", \"\"];\n-        for escape in unicode_escapes {\n-            let escape_sequence = format!(r\"'\\u{}'\", escape);\n-            let component = closed_char_component(&escape_sequence);\n-            let expected_range = range_closed(&escape_sequence);\n-            assert_eq!(component.kind, CharComponentKind::UnicodeEscape);\n-            assert_eq!(component.range, expected_range);\n-        }\n-    }\n-\n-    #[test]\n-    fn test_unicode_escapes_unclosed() {\n-        let unicode_escapes = &[\"{DEAD\", \"{BEEF\", \"{FF\"];\n-        for escape in unicode_escapes {\n-            let escape_sequence = format!(r\"'\\u{}'\", escape);\n-            let component = unclosed_char_component(&escape_sequence);\n-            let expected_range = range_unclosed(&escape_sequence);\n-            assert_eq!(component.kind, CharComponentKind::UnicodeEscape);\n-            assert_eq!(component.range, expected_range);\n-        }\n-    }\n-\n-    #[test]\n-    fn test_empty_char() {\n-        let (has_closing_quote, components) = parse(\"''\");\n-        assert!(has_closing_quote, \"char should have closing quote\");\n-        assert!(components.len() == 0);\n-    }\n-\n-    #[test]\n-    fn test_unclosed_char() {\n-        let component = unclosed_char_component(\"'a\");\n-        assert!(component.kind == CodePoint);\n-        assert!(component.range == TextRange::from_to(1.into(), 2.into()));\n-    }\n-\n-    #[test]\n-    fn test_digit_escapes() {\n-        let literals = &[r\"\", r\"5\", r\"55\"];\n-\n-        for literal in literals {\n-            let lit_text = format!(r\"'\\x{}'\", literal);\n-            let component = closed_char_component(&lit_text);\n-            assert!(component.kind == CharComponentKind::AsciiCodeEscape);\n-            assert!(component.range == range_closed(&lit_text));\n-        }\n-\n-        // More than 2 digits starts a new codepoint\n-        let components = closed_char_components(r\"'\\x555'\");\n-        assert!(components.len() == 2);\n-        assert!(components[1].kind == CharComponentKind::CodePoint);\n-    }\n-\n-    #[test]\n-    fn test_ascii_escapes() {\n-        let literals = &[\n-            r\"\\'\", \"\\\\\\\"\", // equivalent to \\\"\n-            r\"\\n\", r\"\\r\", r\"\\t\", r\"\\\\\", r\"\\0\",\n-        ];\n-\n-        for literal in literals {\n-            let lit_text = format!(\"'{}'\", literal);\n-            let component = closed_char_component(&lit_text);\n-            assert!(component.kind == CharComponentKind::AsciiEscape);\n-            assert!(component.range == range_closed(&lit_text));\n-        }\n-    }\n-\n-    #[test]\n-    fn test_no_escapes() {\n-        let literals = &['\"', 'n', 'r', 't', '0', 'x', 'u'];\n-\n-        for &literal in literals {\n-            let lit_text = format!(\"'{}'\", literal);\n-            let component = closed_char_component(&lit_text);\n-            assert!(component.kind == CharComponentKind::CodePoint);\n-            assert!(component.range == range_closed(&lit_text));\n-        }\n-    }\n-}"}, {"sha": "24424349caf11b26963e0455483fc8baac673761", "filename": "crates/ra_syntax/src/string_lexing/byte.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,51 @@\n+use super::parser::Parser;\n+use super::CharComponent;\n+\n+pub fn parse_byte_literal(src: &str) -> ByteComponentIterator {\n+    ByteComponentIterator {\n+        parser: Parser::new(src),\n+        has_closing_quote: false,\n+    }\n+}\n+\n+pub struct ByteComponentIterator<'a> {\n+    parser: Parser<'a>,\n+    pub has_closing_quote: bool,\n+}\n+\n+impl<'a> Iterator for ByteComponentIterator<'a> {\n+    type Item = CharComponent;\n+    fn next(&mut self) -> Option<CharComponent> {\n+        if self.parser.pos == 0 {\n+            assert!(\n+                self.parser.advance() == 'b',\n+                \"Byte literal should start with a `b`\"\n+            );\n+\n+            assert!(\n+                self.parser.advance() == '\\'',\n+                \"Byte literal should start with a `b`, followed by a quote\"\n+            );\n+        }\n+\n+        if let Some(component) = self.parser.parse_char_component() {\n+            return Some(component);\n+        }\n+\n+        // We get here when there are no char components left to parse\n+        if self.parser.peek() == Some('\\'') {\n+            self.parser.advance();\n+            self.has_closing_quote = true;\n+        }\n+\n+        assert!(\n+            self.parser.peek() == None,\n+            \"byte literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n+            self.parser.src,\n+            self.parser.pos,\n+            self.parser.src.len()\n+        );\n+\n+        None\n+    }\n+}"}, {"sha": "5b6dda7605818704d3e7275e771b0e2ba3e92b28", "filename": "crates/ra_syntax/src/string_lexing/byte_string.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fbyte_string.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,51 @@\n+use super::parser::Parser;\n+use super::StringComponent;\n+\n+pub fn parse_byte_string_literal(src: &str) -> ByteStringComponentIterator {\n+    ByteStringComponentIterator {\n+        parser: Parser::new(src),\n+        has_closing_quote: false,\n+    }\n+}\n+\n+pub struct ByteStringComponentIterator<'a> {\n+    parser: Parser<'a>,\n+    pub has_closing_quote: bool,\n+}\n+\n+impl<'a> Iterator for ByteStringComponentIterator<'a> {\n+    type Item = StringComponent;\n+    fn next(&mut self) -> Option<StringComponent> {\n+        if self.parser.pos == 0 {\n+            assert!(\n+                self.parser.advance() == 'b',\n+                \"byte string literal should start with a `b`\"\n+            );\n+\n+            assert!(\n+                self.parser.advance() == '\"',\n+                \"byte string literal should start with a `b`, followed by double quotes\"\n+            );\n+        }\n+\n+        if let Some(component) = self.parser.parse_string_component() {\n+            return Some(component);\n+        }\n+\n+        // We get here when there are no char components left to parse\n+        if self.parser.peek() == Some('\"') {\n+            self.parser.advance();\n+            self.has_closing_quote = true;\n+        }\n+\n+        assert!(\n+            self.parser.peek() == None,\n+            \"byte string literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n+            self.parser.src,\n+            self.parser.pos,\n+            self.parser.src.len()\n+        );\n+\n+        None\n+    }\n+}"}, {"sha": "885c03b14a9faf37e27656f2e0a665c822640319", "filename": "crates/ra_syntax/src/string_lexing/char.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fchar.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,176 @@\n+use super::parser::Parser;\n+use super::CharComponent;\n+\n+pub fn parse_char_literal(src: &str) -> CharComponentIterator {\n+    CharComponentIterator {\n+        parser: Parser::new(src),\n+        has_closing_quote: false,\n+    }\n+}\n+\n+pub struct CharComponentIterator<'a> {\n+    parser: Parser<'a>,\n+    pub has_closing_quote: bool,\n+}\n+\n+impl<'a> Iterator for CharComponentIterator<'a> {\n+    type Item = CharComponent;\n+    fn next(&mut self) -> Option<CharComponent> {\n+        if self.parser.pos == 0 {\n+            assert!(\n+                self.parser.advance() == '\\'',\n+                \"char literal should start with a quote\"\n+            );\n+        }\n+\n+        if let Some(component) = self.parser.parse_char_component() {\n+            return Some(component);\n+        }\n+\n+        // We get here when there are no char components left to parse\n+        if self.parser.peek() == Some('\\'') {\n+            self.parser.advance();\n+            self.has_closing_quote = true;\n+        }\n+\n+        assert!(\n+            self.parser.peek() == None,\n+            \"char literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n+            self.parser.src,\n+            self.parser.pos,\n+            self.parser.src.len()\n+        );\n+\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use rowan::TextRange;\n+    use crate::string_lexing::{\n+        CharComponent,\n+        CharComponentKind::*,\n+};\n+\n+    fn parse(src: &str) -> (bool, Vec<CharComponent>) {\n+        let component_iterator = &mut super::parse_char_literal(src);\n+        let components: Vec<_> = component_iterator.collect();\n+        (component_iterator.has_closing_quote, components)\n+    }\n+\n+    fn unclosed_char_component(src: &str) -> CharComponent {\n+        let (has_closing_quote, components) = parse(src);\n+        assert!(!has_closing_quote, \"char should not have closing quote\");\n+        assert!(components.len() == 1);\n+        components[0].clone()\n+    }\n+\n+    fn closed_char_component(src: &str) -> CharComponent {\n+        let (has_closing_quote, components) = parse(src);\n+        assert!(has_closing_quote, \"char should have closing quote\");\n+        assert!(\n+            components.len() == 1,\n+            \"Literal: {}\\nComponents: {:#?}\",\n+            src,\n+            components\n+        );\n+        components[0].clone()\n+    }\n+\n+    fn closed_char_components(src: &str) -> Vec<CharComponent> {\n+        let (has_closing_quote, components) = parse(src);\n+        assert!(has_closing_quote, \"char should have closing quote\");\n+        components\n+    }\n+\n+    fn range_closed(src: &str) -> TextRange {\n+        TextRange::from_to(1.into(), (src.len() as u32 - 1).into())\n+    }\n+\n+    fn range_unclosed(src: &str) -> TextRange {\n+        TextRange::from_to(1.into(), (src.len() as u32).into())\n+    }\n+\n+    #[test]\n+    fn test_unicode_escapes() {\n+        let unicode_escapes = &[r\"{DEAD}\", \"{BEEF}\", \"{FF}\", \"{}\", \"\"];\n+        for escape in unicode_escapes {\n+            let escape_sequence = format!(r\"'\\u{}'\", escape);\n+            let component = closed_char_component(&escape_sequence);\n+            let expected_range = range_closed(&escape_sequence);\n+            assert_eq!(component.kind, UnicodeEscape);\n+            assert_eq!(component.range, expected_range);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_unicode_escapes_unclosed() {\n+        let unicode_escapes = &[\"{DEAD\", \"{BEEF\", \"{FF\"];\n+        for escape in unicode_escapes {\n+            let escape_sequence = format!(r\"'\\u{}'\", escape);\n+            let component = unclosed_char_component(&escape_sequence);\n+            let expected_range = range_unclosed(&escape_sequence);\n+            assert_eq!(component.kind, UnicodeEscape);\n+            assert_eq!(component.range, expected_range);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_empty_char() {\n+        let (has_closing_quote, components) = parse(\"''\");\n+        assert!(has_closing_quote, \"char should have closing quote\");\n+        assert!(components.len() == 0);\n+    }\n+\n+    #[test]\n+    fn test_unclosed_char() {\n+        let component = unclosed_char_component(\"'a\");\n+        assert!(component.kind == CodePoint);\n+        assert!(component.range == TextRange::from_to(1.into(), 2.into()));\n+    }\n+\n+    #[test]\n+    fn test_digit_escapes() {\n+        let literals = &[r\"\", r\"5\", r\"55\"];\n+\n+        for literal in literals {\n+            let lit_text = format!(r\"'\\x{}'\", literal);\n+            let component = closed_char_component(&lit_text);\n+            assert!(component.kind == AsciiCodeEscape);\n+            assert!(component.range == range_closed(&lit_text));\n+        }\n+\n+        // More than 2 digits starts a new codepoint\n+        let components = closed_char_components(r\"'\\x555'\");\n+        assert!(components.len() == 2);\n+        assert!(components[1].kind == CodePoint);\n+    }\n+\n+    #[test]\n+    fn test_ascii_escapes() {\n+        let literals = &[\n+            r\"\\'\", \"\\\\\\\"\", // equivalent to \\\"\n+            r\"\\n\", r\"\\r\", r\"\\t\", r\"\\\\\", r\"\\0\",\n+        ];\n+\n+        for literal in literals {\n+            let lit_text = format!(\"'{}'\", literal);\n+            let component = closed_char_component(&lit_text);\n+            assert!(component.kind == AsciiEscape);\n+            assert!(component.range == range_closed(&lit_text));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_no_escapes() {\n+        let literals = &['\"', 'n', 'r', 't', '0', 'x', 'u'];\n+\n+        for &literal in literals {\n+            let lit_text = format!(\"'{}'\", literal);\n+            let component = closed_char_component(&lit_text);\n+            assert!(component.kind == CodePoint);\n+            assert!(component.range == range_closed(&lit_text));\n+        }\n+    }\n+}"}, {"sha": "94853331f2e89417b4767bbfddaec0b104cd01cf", "filename": "crates/ra_syntax/src/string_lexing/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fmod.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,13 @@\n+mod parser;\n+mod byte;\n+mod byte_string;\n+mod char;\n+mod string;\n+\n+pub use self::{\n+    byte::parse_byte_literal,\n+    byte_string::parse_byte_string_literal,\n+    char::parse_char_literal,\n+    parser::{CharComponent, CharComponentKind, StringComponent, StringComponentKind},\n+    string::parse_string_literal,\n+};"}, {"sha": "4a6d5bc935233ac96c479b6d4d748fbba930e2ed", "filename": "crates/ra_syntax/src/string_lexing/parser.rs", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fparser.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,201 @@\n+use rowan::{TextRange, TextUnit};\n+\n+use self::CharComponentKind::*;\n+\n+pub struct Parser<'a> {\n+    pub(super) src: &'a str,\n+    pub(super) pos: usize,\n+}\n+\n+impl<'a> Parser<'a> {\n+    pub fn new(src: &'a str) -> Parser<'a> {\n+        Parser { src, pos: 0 }\n+    }\n+\n+    // Utility methods\n+\n+    pub fn peek(&self) -> Option<char> {\n+        if self.pos == self.src.len() {\n+            return None;\n+        }\n+\n+        self.src[self.pos..].chars().next()\n+    }\n+\n+    pub fn advance(&mut self) -> char {\n+        let next = self\n+            .peek()\n+            .expect(\"cannot advance if end of input is reached\");\n+        self.pos += next.len_utf8();\n+        next\n+    }\n+\n+    pub fn skip_whitespace(&mut self) {\n+        while self.peek().map(|c| c.is_whitespace()) == Some(true) {\n+            self.advance();\n+        }\n+    }\n+\n+    pub fn get_pos(&self) -> TextUnit {\n+        (self.pos as u32).into()\n+    }\n+\n+    // Char parsing methods\n+\n+    fn parse_unicode_escape(&mut self, start: TextUnit) -> CharComponent {\n+        match self.peek() {\n+            Some('{') => {\n+                self.advance();\n+\n+                // Parse anything until we reach `}`\n+                while let Some(next) = self.peek() {\n+                    self.advance();\n+                    if next == '}' {\n+                        break;\n+                    }\n+                }\n+\n+                let end = self.get_pos();\n+                CharComponent::new(TextRange::from_to(start, end), UnicodeEscape)\n+            }\n+            Some(_) | None => {\n+                let end = self.get_pos();\n+                CharComponent::new(TextRange::from_to(start, end), UnicodeEscape)\n+            }\n+        }\n+    }\n+\n+    fn parse_ascii_code_escape(&mut self, start: TextUnit) -> CharComponent {\n+        let code_start = self.get_pos();\n+        while let Some(next) = self.peek() {\n+            if next == '\\'' || (self.get_pos() - code_start == 2.into()) {\n+                break;\n+            }\n+\n+            self.advance();\n+        }\n+\n+        let end = self.get_pos();\n+        CharComponent::new(TextRange::from_to(start, end), AsciiCodeEscape)\n+    }\n+\n+    fn parse_escape(&mut self, start: TextUnit) -> CharComponent {\n+        if self.peek().is_none() {\n+            return CharComponent::new(TextRange::from_to(start, start), AsciiEscape);\n+        }\n+\n+        let next = self.advance();\n+        let end = self.get_pos();\n+        let range = TextRange::from_to(start, end);\n+        match next {\n+            'x' => self.parse_ascii_code_escape(start),\n+            'u' => self.parse_unicode_escape(start),\n+            _ => CharComponent::new(range, AsciiEscape),\n+        }\n+    }\n+\n+    pub fn parse_char_component(&mut self) -> Option<CharComponent> {\n+        let next = self.peek()?;\n+\n+        // Ignore character close\n+        if next == '\\'' {\n+            return None;\n+        }\n+\n+        let start = self.get_pos();\n+        self.advance();\n+\n+        if next == '\\\\' {\n+            Some(self.parse_escape(start))\n+        } else {\n+            let end = self.get_pos();\n+            Some(CharComponent::new(\n+                TextRange::from_to(start, end),\n+                CodePoint,\n+            ))\n+        }\n+    }\n+\n+    pub fn parse_ignore_newline(&mut self, start: TextUnit) -> Option<StringComponent> {\n+        // In string literals, when a `\\` occurs immediately before the newline, the `\\`,\n+        // the newline, and all whitespace at the beginning of the next line are ignored\n+        match self.peek() {\n+            Some('\\n') | Some('\\r') => {\n+                self.skip_whitespace();\n+                Some(StringComponent::new(\n+                    TextRange::from_to(start, self.get_pos()),\n+                    StringComponentKind::IgnoreNewline,\n+                ))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn parse_string_component(&mut self) -> Option<StringComponent> {\n+        let next = self.peek()?;\n+\n+        // Ignore string close\n+        if next == '\"' {\n+            return None;\n+        }\n+\n+        let start = self.get_pos();\n+        self.advance();\n+\n+        if next == '\\\\' {\n+            // Strings can use `\\` to ignore newlines, so we first try to parse one of those\n+            // before falling back to parsing char escapes\n+            self.parse_ignore_newline(start).or_else(|| {\n+                let char_component = self.parse_escape(start);\n+                Some(StringComponent::new(\n+                    char_component.range,\n+                    StringComponentKind::Char(char_component.kind),\n+                ))\n+            })\n+        } else {\n+            let end = self.get_pos();\n+            Some(StringComponent::new(\n+                TextRange::from_to(start, end),\n+                StringComponentKind::Char(CodePoint),\n+            ))\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone)]\n+pub struct StringComponent {\n+    pub range: TextRange,\n+    pub kind: StringComponentKind,\n+}\n+\n+impl StringComponent {\n+    fn new(range: TextRange, kind: StringComponentKind) -> StringComponent {\n+        StringComponent { range, kind }\n+    }\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone)]\n+pub enum StringComponentKind {\n+    IgnoreNewline,\n+    Char(CharComponentKind),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone)]\n+pub struct CharComponent {\n+    pub range: TextRange,\n+    pub kind: CharComponentKind,\n+}\n+\n+impl CharComponent {\n+    fn new(range: TextRange, kind: CharComponentKind) -> CharComponent {\n+        CharComponent { range, kind }\n+    }\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone)]\n+pub enum CharComponentKind {\n+    CodePoint,\n+    AsciiEscape,\n+    AsciiCodeEscape,\n+    UnicodeEscape,\n+}"}, {"sha": "1b23029c64e4332696093b1ac344cf6e587c702c", "filename": "crates/ra_syntax/src/string_lexing/string.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fstring_lexing%2Fstring.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -0,0 +1,46 @@\n+use super::parser::Parser;\n+use super::StringComponent;\n+\n+pub fn parse_string_literal(src: &str) -> StringComponentIterator {\n+    StringComponentIterator {\n+        parser: Parser::new(src),\n+        has_closing_quote: false,\n+    }\n+}\n+\n+pub struct StringComponentIterator<'a> {\n+    parser: Parser<'a>,\n+    pub has_closing_quote: bool,\n+}\n+\n+impl<'a> Iterator for StringComponentIterator<'a> {\n+    type Item = StringComponent;\n+    fn next(&mut self) -> Option<StringComponent> {\n+        if self.parser.pos == 0 {\n+            assert!(\n+                self.parser.advance() == '\"',\n+                \"string literal should start with double quotes\"\n+            );\n+        }\n+\n+        if let Some(component) = self.parser.parse_string_component() {\n+            return Some(component);\n+        }\n+\n+        // We get here when there are no char components left to parse\n+        if self.parser.peek() == Some('\"') {\n+            self.parser.advance();\n+            self.has_closing_quote = true;\n+        }\n+\n+        assert!(\n+            self.parser.peek() == None,\n+            \"string literal should leave no unparsed input: src = {}, pos = {}, length = {}\",\n+            self.parser.src,\n+            self.parser.pos,\n+            self.parser.src.len()\n+        );\n+\n+        None\n+    }\n+}"}, {"sha": "43c0d7edda55b91e09b87a769c78e6f8dd64fbef", "filename": "crates/ra_syntax/src/validation/byte.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fbyte.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -48,7 +48,10 @@ pub(super) fn validate_byte_component(\n         AsciiCodeEscape => validate_byte_code_escape(text, range, errors),\n         UnicodeEscape => errors.push(SyntaxError::new(UnicodeEscapeForbidden, range)),\n         CodePoint => {\n-            let c = text.chars().next().expect(\"Code points should be one character long\");\n+            let c = text\n+                .chars()\n+                .next()\n+                .expect(\"Code points should be one character long\");\n \n             // These bytes must always be escaped\n             if c == '\\t' || c == '\\r' || c == '\\n' {\n@@ -148,9 +151,7 @@ mod test {\n \n     #[test]\n     fn test_valid_byte_escape() {\n-        let valid = [\n-            r\"\\'\", \"\\\"\", \"\\\\\\\\\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\",\n-        ];\n+        let valid = [r\"\\'\", \"\\\"\", \"\\\\\\\\\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\"];\n         for c in &valid {\n             assert_valid_byte(c);\n         }"}, {"sha": "4728c85e6fd1f5a12b91bbceeda6a054a6758772", "filename": "crates/ra_syntax/src/validation/char.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fchar.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -213,9 +213,7 @@ mod test {\n \n     #[test]\n     fn test_valid_ascii_escape() {\n-        let valid = [\n-            r\"\\'\", \"\\\"\", \"\\\\\\\\\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\",\n-        ];\n+        let valid = [r\"\\'\", \"\\\"\", \"\\\\\\\\\", \"\\\\\\\"\", r\"\\n\", r\"\\r\", r\"\\t\", r\"\\0\"];\n         for c in &valid {\n             assert_valid_char(c);\n         }"}, {"sha": "c32ee650dd880ea75bd65694e94ef2ba7130e710", "filename": "crates/ra_syntax/src/yellow/syntax_error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c96bfe7e2d4465653fe6b0eff053f0dfb48313fa/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fsyntax_error.rs?ref=c96bfe7e2d4465653fe6b0eff053f0dfb48313fa", "patch": "@@ -117,7 +117,10 @@ impl fmt::Display for SyntaxErrorKind {\n             InvalidByteEscape => write!(f, \"Invalid escape sequence\"),\n             TooShortByteCodeEscape => write!(f, \"Escape sequence should have two digits\"),\n             MalformedByteCodeEscape => write!(f, \"Escape sequence should be a hexadecimal number\"),\n-            UnicodeEscapeForbidden => write!(f, \"Unicode escapes are not allowed in byte literals or byte strings\"),\n+            UnicodeEscapeForbidden => write!(\n+                f,\n+                \"Unicode escapes are not allowed in byte literals or byte strings\"\n+            ),\n             TooShortAsciiCodeEscape => write!(f, \"Escape sequence should have two digits\"),\n             AsciiCodeEscapeOutOfRange => {\n                 write!(f, \"Escape sequence should be between \\\\x00 and \\\\x7F\")"}]}