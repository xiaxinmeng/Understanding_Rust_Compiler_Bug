{"sha": "6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDdiNjhmNWU5NWRlYmViZTM5ODNmOGIyZDliZmJjMmFmYmU5NzA=", "commit": {"author": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-27T02:46:28Z"}, "committer": {"name": "Nikita Baksalyar", "email": "nikita.baksalyar@gmail.com", "date": "2016-01-31T15:57:30Z"}, "message": "Fix problems with f64 and DirEntry on Illumos", "tree": {"sha": "e62f7a00cd3d0aaeda86c09ae8b8ac2d5821e1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62f7a00cd3d0aaeda86c09ae8b8ac2d5821e1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWri7qAAoJED7qN4oOp1jadKgIAJme1IsQt0svtTxRbIzWvuAU\nXUicactaafv0WdhCIqApvSwOgkwNesbAIA+2a3f4w7wz+YFKegdaSbA6cbb0xVzc\nInxPqzDWOV0Mo3T9vgPr+hM9GaRJcALmtvjV0C3OI9EgUxhAy2zD5q2ZPStPSHRQ\nr676BGQbry/aIp87Xd2AZYqX1ACTtRTWObiIpOQ4hSOamP2IFs6j0xpJPtUtQeBY\nxl9ef3b6X4JdvCl9t+CxAQRE+13KCFKBKB1g7P4LaMNgrGO4lDKgXxaiGYGNcbs3\ndVWuQqFZzA5L+Ddsk1rwuFYU/WNLHE3WAt6cm6kLWadOsTZ8x6dDDvK7ajz7j6w=\n=6RU4\n-----END PGP SIGNATURE-----", "payload": "tree e62f7a00cd3d0aaeda86c09ae8b8ac2d5821e1ba\nparent ebab24059a2b85cf6167c589c40a265f815d9f45\nauthor Nikita Baksalyar <nikita.baksalyar@gmail.com> 1453862788 +0300\ncommitter Nikita Baksalyar <nikita.baksalyar@gmail.com> 1454255850 +0300\n\nFix problems with f64 and DirEntry on Illumos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "html_url": "https://github.com/rust-lang/rust/commit/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970/comments", "author": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbaksalyar", "id": 217316, "node_id": "MDQ6VXNlcjIxNzMxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/217316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbaksalyar", "html_url": "https://github.com/nbaksalyar", "followers_url": "https://api.github.com/users/nbaksalyar/followers", "following_url": "https://api.github.com/users/nbaksalyar/following{/other_user}", "gists_url": "https://api.github.com/users/nbaksalyar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbaksalyar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbaksalyar/subscriptions", "organizations_url": "https://api.github.com/users/nbaksalyar/orgs", "repos_url": "https://api.github.com/users/nbaksalyar/repos", "events_url": "https://api.github.com/users/nbaksalyar/events{/privacy}", "received_events_url": "https://api.github.com/users/nbaksalyar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebab24059a2b85cf6167c589c40a265f815d9f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebab24059a2b85cf6167c589c40a265f815d9f45", "html_url": "https://github.com/rust-lang/rust/commit/ebab24059a2b85cf6167c589c40a265f815d9f45"}], "stats": {"total": 104, "additions": 37, "deletions": 67}, "files": [{"sha": "ed047caa0a3d1c53c404680307d1b278d8006eec", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 28, "deletions": 64, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "patch": "@@ -511,28 +511,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f64 {\n-        if !cfg!(target_os = \"sunos\") {\n-            unsafe { intrinsics::logf64(self) }\n-        } else {\n-            // Illumos requires a wrapper around log, log2, and log10 functions\n-            // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n-            // of expected NaN).\n-            if self.is_finite() {\n-                if self > 0.0 {\n-                    unsafe { intrinsics::logf64(self) }\n-                } else if self == 0.0 {\n-                    NEG_INFINITY // log(0) = -Inf\n-                } else {\n-                    NAN // log(-n) = NaN\n-                }\n-            } else if self.is_nan() {\n-                self // log(NaN) = NaN\n-            } else if self > 0.0 {\n-                self // log(Inf) = Inf\n-            } else {\n-                NAN // log(-Inf) = NaN\n-            }\n-        }\n+        self.log_wrapper(|n| { unsafe { intrinsics::logf64(n) } })\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -567,27 +546,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log2(self) -> f64 {\n-        if !cfg!(target_os = \"sunos\") {\n-            unsafe { intrinsics::log2f64(self) }\n-        } else {\n-            // Illumos requires a wrapper around the log2 function because of\n-            // its non-standard behavior\n-            if self.is_finite() {\n-                if self > 0.0 {\n-                    unsafe { intrinsics::log2f64(self) }\n-                } else if self == 0.0 {\n-                    NEG_INFINITY // log2(0) = -Inf\n-                } else {\n-                    NAN // log2(-n) = NaN\n-                }\n-            } else if self.is_nan() {\n-                self // log2(NaN) = NaN\n-            } else if self > 0.0 {\n-                self // log2(Inf) = Inf\n-            } else {\n-                NAN // log2(-Inf) = NaN\n-            }\n-        }\n+        self.log_wrapper(|n| { unsafe { intrinsics::log2f64(n) } })\n     }\n \n     /// Returns the base 10 logarithm of the number.\n@@ -603,27 +562,7 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f64 {\n-        if !cfg!(target_os = \"sunos\") {\n-            unsafe { intrinsics::log10f64(self) }\n-        } else {\n-            // Illumos requires a wrapper around the log10 function because of\n-            // its non-standard behavior.\n-            if self.is_finite() {\n-                if self > 0.0 {\n-                    unsafe { intrinsics::log10f64(self) }\n-                } else if self == 0.0 {\n-                    NEG_INFINITY // log10(0) = -Inf\n-                } else {\n-                    NAN // log10(-n) = NaN\n-                }\n-            } else if self.is_nan() {\n-                self // log10(NaN) = NaN\n-            } else if self > 0.0 {\n-                self // log10(Inf) = Inf\n-            } else {\n-                NAN // log10(-Inf) = NaN\n-            }\n-        }\n+        self.log_wrapper(|n| { unsafe { intrinsics::log10f64(n) } })\n     }\n \n     /// Converts radians to degrees.\n@@ -1126,6 +1065,31 @@ impl f64 {\n     pub fn atanh(self) -> f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n+\n+    // Illumos requires a wrapper around log, log2, and log10 functions\n+    // because of their non-standard behavior (e.g. log(-n) returns -Inf instead\n+    // of expected NaN).\n+    fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n+        if !cfg!(target_os = \"sunos\") {\n+            log_fn(self)\n+        } else {\n+            if self.is_finite() {\n+                if self > 0.0 {\n+                    log_fn(self)\n+                } else if self == 0.0 {\n+                    NEG_INFINITY // log(0) = -Inf\n+                } else {\n+                    NAN // log(-n) = NaN\n+                }\n+            } else if self.is_nan() {\n+                self // log(NaN) = NaN\n+            } else if self > 0.0 {\n+                self // log(Inf) = Inf\n+            } else {\n+                NAN // log(-Inf) = NaN\n+            }\n+        }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "3e6242f636731bac40921bf7d9689ba93c907b27", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d07b68f5e95debebe3983f8b2d9bfbc2afbe970/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=6d07b68f5e95debebe3983f8b2d9bfbc2afbe970", "patch": "@@ -26,6 +26,8 @@ use sys_common::{AsInner, FromInner};\n use vec::Vec;\n #[cfg(target_os = \"sunos\")]\n use core_collections::borrow::ToOwned;\n+#[cfg(target_os = \"sunos\")]\n+use boxed::Box;\n \n pub struct File(FileDesc);\n \n@@ -52,7 +54,7 @@ pub struct DirEntry {\n     // store the name, b) its lifetime between readdir calls\n     // is not guaranteed.\n     #[cfg(target_os = \"sunos\")]\n-    name: Arc<Vec<u8>>\n+    name: Box<[u8]>\n }\n \n #[derive(Clone)]\n@@ -143,6 +145,10 @@ impl Iterator for ReadDir {\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         unsafe {\n             loop {\n+                // Although readdir_r(3) would be a correct function to use here because\n+                // of the thread safety, on Illumos the readdir(3C) function is safe to use\n+                // in threaded applications and it is generally preferred over the\n+                // readdir_r(3C) function.\n                 let entry_ptr = libc::readdir(self.dirp.0);\n                 if entry_ptr.is_null() {\n                     return None\n@@ -153,8 +159,8 @@ impl Iterator for ReadDir {\n \n                 let ret = DirEntry {\n                     entry: *entry_ptr,\n-                    name: Arc::new(::slice::from_raw_parts(name as *const u8,\n-                                                           namelen as usize).to_owned()),\n+                    name: ::slice::from_raw_parts(name as *const u8,\n+                                                  namelen as usize).to_owned().into_boxed_slice(),\n                     root: self.root.clone()\n                 };\n                 if ret.name_bytes() != b\".\" && ret.name_bytes() != b\"..\" {"}]}