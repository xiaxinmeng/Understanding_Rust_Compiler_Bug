{"sha": "28d0312b7d47b8bc8fcb4888ca627231715db3cd", "node_id": "C_kwDOAAsO6NoAKDI4ZDAzMTJiN2Q0N2I4YmM4ZmNiNDg4OGNhNjI3MjMxNzE1ZGIzY2Q", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2022-10-11T16:17:59Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2022-10-20T08:25:31Z"}, "message": "Implement assertions and fixes to not emit empty spans without suggestions", "tree": {"sha": "a97b118b19593206ce32ee95aa57c5ab53ae00b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a97b118b19593206ce32ee95aa57c5ab53ae00b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28d0312b7d47b8bc8fcb4888ca627231715db3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28d0312b7d47b8bc8fcb4888ca627231715db3cd", "html_url": "https://github.com/rust-lang/rust/commit/28d0312b7d47b8bc8fcb4888ca627231715db3cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28d0312b7d47b8bc8fcb4888ca627231715db3cd/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8f4319954ff2642690b9e5cbe4af352d095bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8f4319954ff2642690b9e5cbe4af352d095bf6", "html_url": "https://github.com/rust-lang/rust/commit/4b8f4319954ff2642690b9e5cbe4af352d095bf6"}], "stats": {"total": 198, "additions": 81, "deletions": 117}, "files": [{"sha": "a63fc0ca285da41c3a4bcd20cac3e8ae514936d7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -567,6 +567,11 @@ impl Diagnostic {\n         style: SuggestionStyle,\n     ) -> &mut Self {\n         assert!(!suggestion.is_empty());\n+        debug_assert!(\n+            !(suggestion.iter().any(|(sp, text)| sp.is_empty() && text.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: suggestion\n@@ -644,6 +649,10 @@ impl Diagnostic {\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n+        debug_assert!(\n+            !(sp.is_empty() && suggestion.to_string().is_empty()),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart { snippet: suggestion.to_string(), span: sp }],\n@@ -684,6 +693,12 @@ impl Diagnostic {\n     ) -> &mut Self {\n         let mut suggestions: Vec<_> = suggestions.collect();\n         suggestions.sort();\n+\n+        debug_assert!(\n+            !(sp.is_empty() && suggestions.iter().any(|suggestion| suggestion.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         let substitutions = suggestions\n             .into_iter()\n             .map(|snippet| Substitution { parts: vec![SubstitutionPart { snippet, span: sp }] })\n@@ -705,8 +720,18 @@ impl Diagnostic {\n         suggestions: impl Iterator<Item = Vec<(Span, String)>>,\n         applicability: Applicability,\n     ) -> &mut Self {\n+        let suggestions: Vec<_> = suggestions.collect();\n+        debug_assert!(\n+            !(suggestions\n+                .iter()\n+                .flat_map(|suggs| suggs)\n+                .any(|(sp, suggestion)| sp.is_empty() && suggestion.is_empty())),\n+            \"Span must not be empty and have no suggestion\"\n+        );\n+\n         self.push_suggestion(CodeSuggestion {\n             substitutions: suggestions\n+                .into_iter()\n                 .map(|sugg| Substitution {\n                     parts: sugg\n                         .into_iter()"}, {"sha": "052ca229f0127571e9a324f30dcfcd414b25da7a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -22,7 +22,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{FileName, Span, DUMMY_SP};\n+use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;\n@@ -1228,8 +1228,9 @@ pub fn expr_to_spanned_string<'a>(\n             ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n             ast::LitKind::ByteStr(_) => {\n                 let mut err = cx.struct_span_err(l.span, err_msg);\n+                let span = expr.span.shrink_to_lo();\n                 err.span_suggestion(\n-                    expr.span.shrink_to_lo(),\n+                    span.with_hi(span.lo() + BytePos(1)),\n                     \"consider removing the leading `b`\",\n                     \"\",\n                     Applicability::MaybeIncorrect,"}, {"sha": "a8f70ba2b378067e2a73d556c438f8ad1288bf6a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -3051,24 +3051,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .map_or(false, |s| s.trim_end().ends_with('<'));\n \n             let is_global = poly_trait_ref.trait_ref.path.is_global();\n-            let sugg = Vec::from_iter([\n-                (\n-                    self_ty.span.shrink_to_lo(),\n-                    format!(\n-                        \"{}dyn {}\",\n-                        if needs_bracket { \"<\" } else { \"\" },\n-                        if is_global { \"(\" } else { \"\" },\n-                    ),\n+\n+            let mut sugg = Vec::from_iter([(\n+                self_ty.span.shrink_to_lo(),\n+                format!(\n+                    \"{}dyn {}\",\n+                    if needs_bracket { \"<\" } else { \"\" },\n+                    if is_global { \"(\" } else { \"\" },\n                 ),\n-                (\n+            )]);\n+\n+            if is_global || needs_bracket {\n+                sugg.push((\n                     self_ty.span.shrink_to_hi(),\n                     format!(\n                         \"{}{}\",\n                         if is_global { \")\" } else { \"\" },\n                         if needs_bracket { \">\" } else { \"\" },\n                     ),\n-                ),\n-            ]);\n+                ));\n+            }\n+\n             if self_ty.span.edition() >= Edition::Edition2021 {\n                 let msg = \"trait objects must include the `dyn` keyword\";\n                 let label = \"add `dyn` keyword before this trait\";"}, {"sha": "7e11ca57cebdad6b271efb01a5f4f6c0f5d0743c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -1374,9 +1374,17 @@ impl<'a> Parser<'a> {\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),\n     ) -> MultiSugg {\n+        let mut patches = Vec::new();\n+\n+        if !pre_span.is_empty() {\n+            patches.push((pre_span, String::new()));\n+        }\n+\n+        patches.push((post_span, format!(\" {}= 1\", kind.op.chr())));\n+\n         MultiSugg {\n             msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n-            patches: vec![(pre_span, String::new()), (post_span, format!(\" {}= 1\", kind.op.chr()))],\n+            patches,\n             applicability: Applicability::MachineApplicable,\n         }\n     }"}, {"sha": "b8ed9b9ec18f718b0cc56160b0966a9e0cf220a5", "filename": "src/tools/clippy/clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_assert.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -69,11 +69,13 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n                     \"only a `panic!` in `if`-then statement\",\n                     |diag| {\n                         // comments can be noisy, do not show them to the user\n-                        diag.tool_only_span_suggestion(\n-                                    expr.span.shrink_to_lo(),\n-                                    \"add comments back\",\n-                                    comments,\n-                                    applicability);\n+                        if !comments.is_empty() {\n+                            diag.tool_only_span_suggestion(\n+                                        expr.span.shrink_to_lo(),\n+                                        \"add comments back\",\n+                                        comments,\n+                                        applicability);\n+                        }\n                         diag.span_suggestion(\n                                     expr.span,\n                                     \"try instead\","}, {"sha": "67debe7e08af6008c7ddf474c37a3c7a59e02614", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -180,10 +180,13 @@ fn assignment_suggestions<'tcx>(\n     let suggestions = assignments\n         .iter()\n         .flat_map(|assignment| {\n-            [\n-                assignment.span.until(assignment.rhs_span),\n-                assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()),\n-            ]\n+            let mut spans = vec![assignment.span.until(assignment.rhs_span)];\n+\n+            if assignment.rhs_span.hi() != assignment.span.hi() {\n+                spans.push(assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()));\n+            }\n+\n+            spans\n         })\n         .map(|span| (span, String::new()))\n         .collect::<Vec<(Span, String)>>();"}, {"sha": "237638ee1344c60274bb31c1accbcf7f7456cee3", "filename": "src/tools/clippy/tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2018.stderr?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -4,104 +4,65 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qwqwq\");\n-   |\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!b.is_empty(), \"panic1\");\n-   |\n+   | |_____^ help: try instead: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n-   |\n+   | |_____^ help: try instead: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:73:5"}, {"sha": "237638ee1344c60274bb31c1accbcf7f7456cee3", "filename": "src/tools/clippy/tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28d0312b7d47b8bc8fcb4888ca627231715db3cd/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_assert.edition2021.stderr?ref=28d0312b7d47b8bc8fcb4888ca627231715db3cd", "patch": "@@ -4,104 +4,65 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n-   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:34:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(a.is_empty(), \"qwqwq\");\n-   |\n+   | |_____^ help: try instead: `assert!(a.is_empty(), \"qwqwq\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:51:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!b.is_empty(), \"panic1\");\n-   |\n+   | |_____^ help: try instead: `assert!(!b.is_empty(), \"panic1\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:54:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:57:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:60:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:63:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n-   |\n+   | |_____^ help: try instead: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:66:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^\n-   |\n-help: try instead\n-   |\n-LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n-   |\n+   | |_____^ help: try instead: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:73:5"}]}