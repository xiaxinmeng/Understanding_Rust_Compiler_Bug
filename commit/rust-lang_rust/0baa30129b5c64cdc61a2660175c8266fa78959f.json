{"sha": "0baa30129b5c64cdc61a2660175c8266fa78959f", "node_id": "C_kwDOAAsO6NoAKDBiYWEzMDEyOWI1YzY0Y2RjNjFhMjY2MDE3NWM4MjY2ZmE3ODk1OWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-06-01T05:39:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-01T05:39:42Z"}, "message": "Rollup merge of #108459 - benediktwerner:rustdoc-fix-link-match, r=GuillaumeGomez\n\nrustdoc: Fix LinkReplacer link matching\n\nIt currently just uses the first link with the same href which might not necessarily be the matching one.\n\nThis fixes replacements when there are several links to the same item but with different text (e.g. `[X] and [struct@X]`). It also fixes replacements in summaries since those use a links list with empty hrefs, so currently all links would always match the first link by href but then not match its text. This could also lead to a panic in the `original_lext[1..len() - 1]` part when the first link only has a single character, which is why the new code uses `.get(..)` instead.", "tree": {"sha": "a7b3da88056e4599c98af5b51f79cf23c8c4c660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b3da88056e4599c98af5b51f79cf23c8c4c660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0baa30129b5c64cdc61a2660175c8266fa78959f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkeC8eCRBK7hj4Ov3rIwAADP8IAIPypUPJY99CRbvynLcgFUOd\ntI0oPQLjDwHLvNkY4rblKMkHXMO5KU9auLZ4QyuSgyFG6UC942+2b8RDJHKmSC7j\nToItZLm3NTPSnTLZfx+1PgDy1Ft10k9PJSJNDeWJw2c1ec6x0/VEJ+w8GKZxvmY7\nQqdmn8n4Bc6iAB5s6aCygE8lbNTP3oCDFyCN67a13a2dDwwOaRKInv47sUsvrMDt\noEdWLmxAB1sVNqddLCAcmlphT5Y/o1D+OxWGNb0WEp3mDxo5MrciPRQcc/H+60js\nB9bWyYX4NlLAd5TQdKWhGKnFeRzzf2I/Hel4SGB5cHURe0zhsJiUQ+GpDIZ1vPE=\n=7Yap\n-----END PGP SIGNATURE-----\n", "payload": "tree a7b3da88056e4599c98af5b51f79cf23c8c4c660\nparent ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba\nparent 9968f3ce55d83baf916d55920b721d737581efc7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1685597982 +0530\ncommitter GitHub <noreply@github.com> 1685597982 +0530\n\nRollup merge of #108459 - benediktwerner:rustdoc-fix-link-match, r=GuillaumeGomez\n\nrustdoc: Fix LinkReplacer link matching\n\nIt currently just uses the first link with the same href which might not necessarily be the matching one.\n\nThis fixes replacements when there are several links to the same item but with different text (e.g. `[X] and [struct@X]`). It also fixes replacements in summaries since those use a links list with empty hrefs, so currently all links would always match the first link by href but then not match its text. This could also lead to a panic in the `original_lext[1..len() - 1]` part when the first link only has a single character, which is why the new code uses `.get(..)` instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0baa30129b5c64cdc61a2660175c8266fa78959f", "html_url": "https://github.com/rust-lang/rust/commit/0baa30129b5c64cdc61a2660175c8266fa78959f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0baa30129b5c64cdc61a2660175c8266fa78959f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba", "html_url": "https://github.com/rust-lang/rust/commit/ba1690bedd6ada4e8d91bfecb3d0ccc2b6de85ba"}, {"sha": "9968f3ce55d83baf916d55920b721d737581efc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9968f3ce55d83baf916d55920b721d737581efc7", "html_url": "https://github.com/rust-lang/rust/commit/9968f3ce55d83baf916d55920b721d737581efc7"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "1c27320024a9f5d3e3347d7ca5cf66058e5376e4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0baa30129b5c64cdc61a2660175c8266fa78959f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baa30129b5c64cdc61a2660175c8266fa78959f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=0baa30129b5c64cdc61a2660175c8266fa78959f", "patch": "@@ -381,7 +381,6 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n             Some(Event::Code(text)) => {\n                 trace!(\"saw code {}\", text);\n                 if let Some(link) = self.shortcut_link {\n-                    trace!(\"original text was {}\", link.original_text);\n                     // NOTE: this only replaces if the code block is the *entire* text.\n                     // If only part of the link has code highlighting, the disambiguator will not be removed.\n                     // e.g. [fn@`f`]\n@@ -390,8 +389,11 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n                     // So we could never be sure we weren't replacing too much:\n                     // [fn@my_`f`unc] is treated the same as [my_func()] in that pass.\n                     //\n-                    // NOTE: &[1..len() - 1] is to strip the backticks\n-                    if **text == link.original_text[1..link.original_text.len() - 1] {\n+                    // NOTE: .get(1..len() - 1) is to strip the backticks\n+                    if let Some(link) = self.links.iter().find(|l| {\n+                        l.href == link.href\n+                            && Some(&**text) == l.original_text.get(1..l.original_text.len() - 1)\n+                    }) {\n                         debug!(\"replacing {} with {}\", text, link.new_text);\n                         *text = CowStr::Borrowed(&link.new_text);\n                     }\n@@ -402,9 +404,12 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n             Some(Event::Text(text)) => {\n                 trace!(\"saw text {}\", text);\n                 if let Some(link) = self.shortcut_link {\n-                    trace!(\"original text was {}\", link.original_text);\n                     // NOTE: same limitations as `Event::Code`\n-                    if **text == *link.original_text {\n+                    if let Some(link) = self\n+                        .links\n+                        .iter()\n+                        .find(|l| l.href == link.href && **text == *l.original_text)\n+                    {\n                         debug!(\"replacing {} with {}\", text, link.new_text);\n                         *text = CowStr::Borrowed(&link.new_text);\n                     }"}, {"sha": "eb1c7a05e54097098212a322763d475a010d5267", "filename": "tests/rustdoc/intra-doc/issue-108459.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0baa30129b5c64cdc61a2660175c8266fa78959f/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baa30129b5c64cdc61a2660175c8266fa78959f/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fissue-108459.rs?ref=0baa30129b5c64cdc61a2660175c8266fa78959f", "patch": "@@ -0,0 +1,37 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+pub struct S;\n+pub mod char {}\n+\n+// Ensure this doesn't ICE due to trying to slice off non-existent backticks from \"S\"\n+\n+/// See [S] and [`S`]\n+pub struct MyStruct1;\n+\n+// Ensure that link texts are replaced correctly even if there are multiple links with\n+// the same target but different text\n+\n+/// See also [crate::char] and [mod@char] and [prim@char]\n+// @has issue_108459/struct.MyStruct2.html '//*[@href=\"char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct2;\n+\n+/// See also [mod@char] and [prim@char] and [crate::char]\n+// @has issue_108459/struct.MyStruct3.html '//*[@href=\"char/index.html\"]' 'crate::char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct3;\n+\n+// Ensure that links are correct even if there are multiple links with the same text but\n+// different targets\n+\n+/// See also [char][mod@char] and [char][prim@char]\n+// @has issue_108459/struct.MyStruct4.html '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct4;\n+\n+/// See also [char][prim@char] and [char][crate::char]\n+// @has issue_108459/struct.MyStruct5.html '//*[@href=\"char/index.html\"]' 'char'\n+// @has - '//*[@href=\"{{channel}}/std/primitive.char.html\"]' 'char'\n+pub struct MyStruct5;"}, {"sha": "c5a64e42a01248001d5b11eba64c6745307398eb", "filename": "tests/rustdoc/intra-doc/prim-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0baa30129b5c64cdc61a2660175c8266fa78959f/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baa30129b5c64cdc61a2660175c8266fa78959f/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-precedence.rs?ref=0baa30129b5c64cdc61a2660175c8266fa78959f", "patch": "@@ -12,5 +12,5 @@ pub struct MyString;\n \n /// See also [crate::char] and [mod@char]\n // @has prim_precedence/struct.MyString2.html '//*[@href=\"char/index.html\"]' 'crate::char'\n-// @has - '//*[@href=\"char/index.html\"]' 'mod@char'\n+// @has - '//*[@href=\"char/index.html\"]' 'char'\n pub struct MyString2;"}]}