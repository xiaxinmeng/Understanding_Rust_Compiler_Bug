{"sha": "02ec39b2ff69ce3275724e234ebcb72d310766ca", "node_id": "C_kwDOAAsO6NoAKDAyZWMzOWIyZmY2OWNlMzI3NTcyNGUyMzRlYmNiNzJkMzEwNzY2Y2E", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-11T15:52:23Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-11T15:52:23Z"}, "message": "Stop using in_band_lifetimes", "tree": {"sha": "1b8fb16e1a753a510aec5f63ae32fba5bab27342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b8fb16e1a753a510aec5f63ae32fba5bab27342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ec39b2ff69ce3275724e234ebcb72d310766ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ec39b2ff69ce3275724e234ebcb72d310766ca", "html_url": "https://github.com/rust-lang/rust/commit/02ec39b2ff69ce3275724e234ebcb72d310766ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ec39b2ff69ce3275724e234ebcb72d310766ca/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccf07bae582fe2640971f5cc4cb358d8c7d36aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccf07bae582fe2640971f5cc4cb358d8c7d36aa", "html_url": "https://github.com/rust-lang/rust/commit/fccf07bae582fe2640971f5cc4cb358d8c7d36aa"}], "stats": {"total": 405, "additions": 216, "deletions": 189}, "files": [{"sha": "c50e214be288dd4a9389ad67d254bd9be3153a67", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -42,7 +42,7 @@ fn is_bool_lit(e: &Expr<'_>) -> bool {\n     ) && !e.span.from_expansion()\n }\n \n-fn is_impl_not_trait_with_bool_out(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+fn is_impl_not_trait_with_bool_out(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(e);\n \n     cx.tcx"}, {"sha": "e8f39cd37090d2f14fd64fedb0ae629ae19eb942", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -67,7 +67,7 @@ fn check_case_sensitive_file_extension_comparison(ctx: &LateContext<'_>, expr: &\n     None\n }\n \n-impl LateLintPass<'tcx> for CaseSensitiveFileExtensionComparisons {\n+impl<'tcx> LateLintPass<'tcx> for CaseSensitiveFileExtensionComparisons {\n     fn check_expr(&mut self, ctx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if let Some(span) = check_case_sensitive_file_extension_comparison(ctx, expr) {\n             span_lint_and_help("}, {"sha": "b9de5510455b9e7bdb3351b8e61c7bf27514d990", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n \n use super::CAST_PTR_ALIGNMENT;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if let ExprKind::Cast(cast_expr, cast_to) = expr.kind {\n         if is_hir_ty_cfg_dependant(cx, cast_to) {\n             return;"}, {"sha": "15f2f81f4079e5b2e88b66809e797f845249c3d1", "filename": "clippy_lints/src/casts/cast_ref_to_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty;\n \n use super::CAST_REF_TO_MUT;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n         if let ExprKind::Cast(e, t) = &e.kind;"}, {"sha": "7cc406018dbe0ab7c3395959899a63567c1a8c33", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::{self, UintTy};\n \n use super::CHAR_LIT_AS_U8;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Cast(e, _) = &expr.kind;\n         if let ExprKind::Lit(l) = &e.kind;"}, {"sha": "fb04f93fbcf9774190153ab78751a369d15a3408", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -12,7 +12,7 @@ use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: &Option<RustcVersion>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n     if !meets_msrv(msrv.as_ref(), &msrvs::POINTER_CAST) {\n         return;\n     }"}, {"sha": "73ce656ad151437d490bf435e525c9d8c1797258", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -316,7 +316,7 @@ struct BlockEqual {\n \n /// This function can also trigger the `IF_SAME_THEN_ELSE` in which case it'll return `None` to\n /// abort any further processing and avoid duplicate lint triggers.\n-fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<BlockEqual> {\n+fn scan_block_for_eq(cx: &LateContext<'_>, blocks: &[&Block<'_>]) -> Option<BlockEqual> {\n     let mut start_eq = usize::MAX;\n     let mut end_eq = usize::MAX;\n     let mut expr_eq = true;\n@@ -385,11 +385,7 @@ fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> Option<\n     })\n }\n \n-fn check_for_warn_of_moved_symbol(\n-    cx: &LateContext<'tcx>,\n-    symbols: &FxHashSet<Symbol>,\n-    if_expr: &'tcx Expr<'_>,\n-) -> bool {\n+fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &FxHashSet<Symbol>, if_expr: &Expr<'_>) -> bool {\n     get_enclosing_block(cx, if_expr.hir_id).map_or(false, |block| {\n         let ignore_span = block.span.shrink_to_lo().to(if_expr.span);\n \n@@ -419,13 +415,13 @@ fn check_for_warn_of_moved_symbol(\n }\n \n fn emit_branches_sharing_code_lint(\n-    cx: &LateContext<'tcx>,\n+    cx: &LateContext<'_>,\n     start_stmts: usize,\n     end_stmts: usize,\n     lint_end: bool,\n     warn_about_moved_symbol: bool,\n-    blocks: &[&Block<'tcx>],\n-    if_expr: &'tcx Expr<'_>,\n+    blocks: &[&Block<'_>],\n+    if_expr: &Expr<'_>,\n ) {\n     if start_stmts == 0 && !lint_end {\n         return;"}, {"sha": "4274943a3d16afd6238b9f73aa520b9806500d8a", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -77,7 +77,7 @@ pub struct Default {\n \n impl_lint_pass!(Default => [DEFAULT_TRAIT_ACCESS, FIELD_REASSIGN_WITH_DEFAULT]);\n \n-impl LateLintPass<'_> for Default {\n+impl<'tcx> LateLintPass<'tcx> for Default {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n@@ -110,7 +110,7 @@ impl LateLintPass<'_> for Default {\n     }\n \n     #[allow(clippy::too_many_lines)]\n-    fn check_block<'tcx>(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n         // start from the `let mut _ = _::default();` and look at all the following\n         // statements, see if they re-assign the fields of the binding\n         let stmts_head = match block.stmts {"}, {"sha": "e5131c497aeebd3b6e9dd58f454988ab9087fe66", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -54,7 +54,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(DefaultNumericFallback => [DEFAULT_NUMERIC_FALLBACK]);\n \n-impl LateLintPass<'_> for DefaultNumericFallback {\n+impl<'tcx> LateLintPass<'tcx> for DefaultNumericFallback {\n     fn check_body(&mut self, cx: &LateContext<'tcx>, body: &'tcx Body<'_>) {\n         let mut visitor = NumericFallbackVisitor::new(cx);\n         visitor.visit_body(body);"}, {"sha": "bf077a212fd0fcfadc1a78b6f9dfbd86af1a1e59", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -355,7 +355,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n     }\n }\n \n-fn try_parse_ref_op(\n+fn try_parse_ref_op<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     typeck: &'tcx TypeckResults<'_>,\n     expr: &'tcx Expr<'_>,\n@@ -387,7 +387,7 @@ fn try_parse_ref_op(\n \n // Checks whether the type for a deref call actually changed the type, not just the mutability of\n // the reference.\n-fn deref_method_same_type(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n+fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n         (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => TyS::same_type(result_ty, arg_ty),\n \n@@ -457,7 +457,7 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n }\n \n /// Adjustments are sometimes made in the parent block rather than the expression itself.\n-fn find_adjustments(\n+fn find_adjustments<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     typeck: &'tcx TypeckResults<'_>,\n     expr: &'tcx Expr<'_>,\n@@ -499,7 +499,7 @@ fn find_adjustments(\n }\n \n #[allow(clippy::needless_pass_by_value)]\n-fn report(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data: StateData) {\n+fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {\n             ty_changed_count,\n@@ -568,7 +568,7 @@ fn report(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data: Stat\n }\n \n impl Dereferencing {\n-    fn check_local_usage(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, local: HirId) {\n+    fn check_local_usage(&mut self, cx: &LateContext<'_>, e: &Expr<'_>, local: HirId) {\n         if let Some(outer_pat) = self.ref_locals.get_mut(&local) {\n             if let Some(pat) = outer_pat {\n                 // Check for auto-deref"}, {"sha": "3ce239273e2529cd3f10d875493b54468e76771f", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -233,7 +233,7 @@ struct ContainsExpr<'tcx> {\n     key: &'tcx Expr<'tcx>,\n     call_ctxt: SyntaxContext,\n }\n-fn try_parse_contains(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(MapType, ContainsExpr<'tcx>)> {\n+fn try_parse_contains<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(MapType, ContainsExpr<'tcx>)> {\n     let mut negated = false;\n     let expr = peel_hir_expr_while(expr, |e| match e.kind {\n         ExprKind::Unary(UnOp::Not, e) => {\n@@ -280,7 +280,7 @@ struct InsertExpr<'tcx> {\n     key: &'tcx Expr<'tcx>,\n     value: &'tcx Expr<'tcx>,\n }\n-fn try_parse_insert(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<InsertExpr<'tcx>> {\n+fn try_parse_insert<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<InsertExpr<'tcx>> {\n     if let ExprKind::MethodCall(_, _, [map, key, value], _) = expr.kind {\n         let id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;\n         if match_def_path(cx, id, &paths::BTREEMAP_INSERT) || match_def_path(cx, id, &paths::HASHMAP_INSERT) {\n@@ -301,7 +301,7 @@ enum Edit<'tcx> {\n     /// An insertion into the map.\n     Insertion(Insertion<'tcx>),\n }\n-impl Edit<'tcx> {\n+impl<'tcx> Edit<'tcx> {\n     fn as_insertion(self) -> Option<Insertion<'tcx>> {\n         if let Self::Insertion(i) = self { Some(i) } else { None }\n     }\n@@ -532,7 +532,7 @@ struct InsertSearchResults<'tcx> {\n     allow_insert_closure: bool,\n     is_single_insert: bool,\n }\n-impl InsertSearchResults<'tcx> {\n+impl<'tcx> InsertSearchResults<'tcx> {\n     fn as_single_insertion(&self) -> Option<Insertion<'tcx>> {\n         self.is_single_insert.then(|| self.edits[0].as_insertion().unwrap())\n     }\n@@ -633,7 +633,7 @@ impl InsertSearchResults<'tcx> {\n     }\n }\n \n-fn find_insert_calls(\n+fn find_insert_calls<'tcx>(\n     cx: &LateContext<'tcx>,\n     contains_expr: &ContainsExpr<'tcx>,\n     expr: &'tcx Expr<'_>,"}, {"sha": "cf47e581ccb48f26166502236527f0004983f6b2", "filename": "clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -56,7 +56,7 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n     }\n }\n \n-fn is_structural_partial_eq(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx>) -> bool {\n+fn is_structural_partial_eq<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, other: Ty<'tcx>) -> bool {\n     if let Some(def_id) = cx.tcx.lang_items().eq_trait() {\n         implements_trait(cx, ty, def_id, &[other.into()])\n     } else {"}, {"sha": "c1a84973c42114945130d4c5e9fbeeba75042efd", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -50,13 +50,19 @@ impl<'tcx> LateLintPass<'tcx> for ErasingOp {\n     }\n }\n \n-fn different_types(tck: &TypeckResults<'tcx>, input: &'tcx Expr<'_>, output: &'tcx Expr<'_>) -> bool {\n+fn different_types(tck: &TypeckResults<'_>, input: &Expr<'_>, output: &Expr<'_>) -> bool {\n     let input_ty = tck.expr_ty(input).peel_refs();\n     let output_ty = tck.expr_ty(output).peel_refs();\n     !same_type_and_consts(input_ty, output_ty)\n }\n \n-fn check(cx: &LateContext<'cx>, tck: &TypeckResults<'cx>, op: &Expr<'cx>, other: &Expr<'cx>, parent: &Expr<'cx>) {\n+fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    tck: &TypeckResults<'tcx>,\n+    op: &Expr<'tcx>,\n+    other: &Expr<'tcx>,\n+    parent: &Expr<'tcx>,\n+) {\n     if constant_simple(cx, tck, op) == Some(Constant::Int(0)) {\n         if different_types(tck, other, parent) {\n             return;"}, {"sha": "5ece2cc5ac4f7dd3b509a1dc262b5b1df53f5eae", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -53,7 +53,7 @@ impl FromOverInto {\n \n impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n-impl LateLintPass<'_> for FromOverInto {\n+impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if !meets_msrv(self.msrv.as_ref(), &msrvs::RE_REBALANCING_COHERENCE) {\n             return;"}, {"sha": "57b0751320521b5bab69b34e34a0196e6517213a", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(FromStrRadix10 => [FROM_STR_RADIX_10]);\n \n-impl LateLintPass<'tcx> for FromStrRadix10 {\n+impl<'tcx> LateLintPass<'tcx> for FromStrRadix10 {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, exp: &Expr<'tcx>) {\n         if_chain! {\n             if let ExprKind::Call(maybe_path, arguments) = &exp.kind;"}, {"sha": "f2b4aefaead5284124e845c8847e79eecff5fedd", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -18,7 +18,7 @@ use clippy_utils::{match_def_path, must_use_attr, return_ty, trait_ref_of_method\n \n use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n-pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = must_use_attr(attrs);\n     if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n@@ -40,7 +40,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     }\n }\n \n-pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n+pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -62,7 +62,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<\n     }\n }\n \n-pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n+pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());"}, {"sha": "6d829a18b2e0927a0ef6ae95bf186fa15797b952", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -9,7 +9,7 @@ use clippy_utils::{iter_input_pats, path_to_local};\n \n use super::NOT_UNSAFE_PTR_ARG_DEREF;\n \n-pub(super) fn check_fn(\n+pub(super) fn check_fn<'tcx>(\n     cx: &LateContext<'tcx>,\n     kind: intravisit::FnKind<'tcx>,\n     decl: &'tcx hir::FnDecl<'tcx>,\n@@ -25,14 +25,14 @@ pub(super) fn check_fn(\n     check_raw_ptr(cx, unsafety, decl, body, cx.tcx.hir().local_def_id(hir_id));\n }\n \n-pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n+pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(eid)) = item.kind {\n         let body = cx.tcx.hir().body(eid);\n         check_raw_ptr(cx, sig.header.unsafety, sig.decl, body, item.def_id);\n     }\n }\n \n-fn check_raw_ptr(\n+fn check_raw_ptr<'tcx>(\n     cx: &LateContext<'tcx>,\n     unsafety: hir::Unsafety,\n     decl: &'tcx hir::FnDecl<'tcx>,"}, {"sha": "73f08a04989734eb2168c63bd3f34c39a34d5c6f", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -13,7 +13,7 @@ use clippy_utils::ty::is_type_diagnostic_item;\n \n use super::RESULT_UNIT_ERR;\n \n-pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+pub(super) fn check_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n     if let hir::ItemKind::Fn(ref sig, ref _generics, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -23,7 +23,7 @@ pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     }\n }\n \n-pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n+pub(super) fn check_impl_item(cx: &LateContext<'_>, item: &hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -33,7 +33,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<\n     }\n }\n \n-pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n+pub(super) fn check_trait_item(cx: &LateContext<'_>, item: &hir::TraitItem<'_>) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());"}, {"sha": "3af960491ed01d5872a0df98cba836829cadd303", "filename": "clippy_lints/src/functions/too_many_arguments.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_arguments.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -9,9 +9,9 @@ use clippy_utils::is_trait_impl_item;\n use super::TOO_MANY_ARGUMENTS;\n \n pub(super) fn check_fn(\n-    cx: &LateContext<'tcx>,\n-    kind: intravisit::FnKind<'tcx>,\n-    decl: &'tcx hir::FnDecl<'_>,\n+    cx: &LateContext<'_>,\n+    kind: intravisit::FnKind<'_>,\n+    decl: &hir::FnDecl<'_>,\n     span: Span,\n     hir_id: hir::HirId,\n     too_many_arguments_threshold: u64,\n@@ -39,11 +39,7 @@ pub(super) fn check_fn(\n     }\n }\n \n-pub(super) fn check_trait_item(\n-    cx: &LateContext<'tcx>,\n-    item: &'tcx hir::TraitItem<'_>,\n-    too_many_arguments_threshold: u64,\n-) {\n+pub(super) fn check_trait_item(cx: &LateContext<'_>, item: &hir::TraitItem<'_>, too_many_arguments_threshold: u64) {\n     if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n         // don't lint extern functions decls, it's not their fault\n         if sig.header.abi == Abi::Rust {"}, {"sha": "54bdea7ea25d634bde692af85f925652f9ca4d64", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -11,9 +11,9 @@ use super::TOO_MANY_LINES;\n \n pub(super) fn check_fn(\n     cx: &LateContext<'_>,\n-    kind: FnKind<'tcx>,\n+    kind: FnKind<'_>,\n     span: Span,\n-    body: &'tcx hir::Body<'_>,\n+    body: &hir::Body<'_>,\n     too_many_lines_threshold: u64,\n ) {\n     // Closures must be contained in a parent body, which will be checked for `too_many_lines`."}, {"sha": "9525c163ece17a7b04a1e4a8e5c2ce50c343612e", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -55,7 +55,7 @@ impl IfThenSomeElseNone {\n \n impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n-impl LateLintPass<'_> for IfThenSomeElseNone {\n+impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n         if !meets_msrv(self.msrv.as_ref(), &msrvs::BOOL_THEN) {\n             return;"}, {"sha": "d650d6e9a85871881a680e755c6fc7def02fb345", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -94,8 +94,8 @@ fn get_call_site(span: Span, ctxt: SyntaxContext) -> Option<Span> {\n }\n \n fn lint_implicit_returns(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'_>,\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n     // The context of the function body.\n     ctxt: SyntaxContext,\n     // Whether the expression is from a macro expansion."}, {"sha": "9e03065e7fbfe47a11780916cec77ec9ad27601a", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(InconsistentStructConstructor => [INCONSISTENT_STRUCT_CONSTRUCTOR]);\n \n-impl LateLintPass<'_> for InconsistentStructConstructor {\n+impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();"}, {"sha": "073313e2bad4e2e40648ea921fb8538e1f6a00ba", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -69,7 +69,7 @@ impl IndexRefutableSlice {\n \n impl_lint_pass!(IndexRefutableSlice => [INDEX_REFUTABLE_SLICE]);\n \n-impl LateLintPass<'_> for IndexRefutableSlice {\n+impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion() || is_expn_of(expr.span, \"if_chain\").is_some();"}, {"sha": "d3bdc819a9f2b48e277d9dd5aaca17859e3d1782", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -39,7 +39,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n-impl LateLintPass<'_> for IterNotReturningIterator {\n+impl<'tcx> LateLintPass<'tcx> for IterNotReturningIterator {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         let name = item.ident.name.as_str();\n         if matches!(name, \"iter\" | \"iter_mut\") {"}, {"sha": "265c24b1c976d500fa4c2f57df2c1af41c2e0130", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -245,7 +245,7 @@ enum LenOutput<'tcx> {\n     Option(DefId),\n     Result(DefId, Ty<'tcx>),\n }\n-fn parse_len_output(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenOutput<'tcx>> {\n+fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenOutput<'tcx>> {\n     match *sig.output().kind() {\n         ty::Int(_) | ty::Uint(_) => Some(LenOutput::Integral),\n         ty::Adt(adt, subs) if cx.tcx.is_diagnostic_item(sym::Option, adt.did) => {"}, {"sha": "175a35e7994c1e6c149f4d527c656104a2173c7b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -4,7 +4,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n-#![feature(in_band_lifetimes)]\n #![feature(iter_intersperse)]\n #![feature(let_else)]\n #![feature(once_cell)]"}, {"sha": "823cf0f43221ca644030184f2b1b35ff96aa58e4", "filename": "clippy_lints/src/loops/empty_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_in_panic_handler, is_no_std_crate};\n use rustc_hir::{Block, Expr};\n use rustc_lint::LateContext;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, loop_block: &Block<'_>) {\n     if loop_block.stmts.is_empty() && loop_block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n         let msg = \"empty `loop {}` wastes CPU cycles\";\n         let help = if is_no_std_crate(cx) {"}, {"sha": "17246cc5426ae1ef638fc0ec546959ba9a8d0f7e", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n use rustc_span::symbol::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, self_arg: &'hir Expr<'hir>, call_expr: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n     if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {"}, {"sha": "c439f701da1b89c083edd15151508132fdd6cdaf", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -203,7 +203,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n #[derive(Clone)]\n struct MinifyingSugg<'a>(Sugg<'a>);\n \n-impl Display for MinifyingSugg<'a> {\n+impl<'a> Display for MinifyingSugg<'a> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         self.0.fmt(f)\n     }"}, {"sha": "37a57d8feb1d33bc432c0a5f067da1f03baf818c", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -147,7 +147,7 @@ impl BreakAfterExprVisitor {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n+impl<'tcx> intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "6248680aa621663e4dc5528816578b3054c133a5", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -339,8 +339,8 @@ fn detect_iter_and_into_iters<'tcx: 'a, 'a>(\n     }\n }\n \n-fn get_captured_ids(cx: &LateContext<'tcx>, ty: &'_ TyS<'_>) -> HirIdSet {\n-    fn get_captured_ids_recursive(cx: &LateContext<'tcx>, ty: &'_ TyS<'_>, set: &mut HirIdSet) {\n+fn get_captured_ids(cx: &LateContext<'_>, ty: &'_ TyS<'_>) -> HirIdSet {\n+    fn get_captured_ids_recursive(cx: &LateContext<'_>, ty: &'_ TyS<'_>, set: &mut HirIdSet) {\n         match ty.kind() {\n             ty::Adt(_, generics) => {\n                 for generic in *generics {"}, {"sha": "bb1b3e2a1ec6ae9ab437f86bbd670e524a946579", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -10,8 +10,8 @@ use rustc_span::Span;\n use std::iter::{once, Iterator};\n \n pub(super) fn check(\n-    cx: &LateContext<'tcx>,\n-    block: &'tcx Block<'_>,\n+    cx: &LateContext<'_>,\n+    block: &Block<'_>,\n     loop_id: HirId,\n     span: Span,\n     for_loop: Option<&ForLoop<'_>>,"}, {"sha": "8f57df0be6bd47563a82e932f9fe5bcda0946aea", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{Block, Expr, ExprKind, MatchSource, Pat, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     // extract the expression from the first statement (if any) in a block\n     let inner_stmt_expr = extract_expr_from_first_stmt(loop_block);\n     // or extract the first expression (if any) from the block"}, {"sha": "750328d1d01a5b4385b2b08bfc2c30e4f0b16eb8", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -13,7 +13,7 @@ use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n \n-pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n     let (scrutinee_expr, iter_expr_struct, iter_expr, some_pat, loop_expr) = if_chain! {\n         if let Some(higher::WhileLet { if_then, let_pat, let_expr }) = higher::WhileLet::hir(expr);\n         // check for `Some(..)` pattern\n@@ -191,7 +191,7 @@ fn is_expr_same_child_or_parent_field(cx: &LateContext<'_>, expr: &Expr<'_>, fie\n \n /// Strips off all field and path expressions. This will return true if a field or path has been\n /// skipped. Used to skip them after failing to check for equality.\n-fn skip_fields_and_path(expr: &'tcx Expr<'_>) -> (Option<&'tcx Expr<'tcx>>, bool) {\n+fn skip_fields_and_path<'tcx>(expr: &'tcx Expr<'_>) -> (Option<&'tcx Expr<'tcx>>, bool) {\n     let mut e = expr;\n     let e = loop {\n         match e.kind {\n@@ -204,13 +204,13 @@ fn skip_fields_and_path(expr: &'tcx Expr<'_>) -> (Option<&'tcx Expr<'tcx>>, bool\n }\n \n /// Checks if the given expression uses the iterator.\n-fn uses_iter(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tcx Expr<'_>) -> bool {\n+fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tcx Expr<'_>) -> bool {\n     struct V<'a, 'b, 'tcx> {\n         cx: &'a LateContext<'tcx>,\n         iter_expr: &'b IterExpr,\n         uses_iter: bool,\n     }\n-    impl Visitor<'tcx> for V<'_, '_, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for V<'_, '_, 'tcx> {\n         type Map = ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -245,15 +245,15 @@ fn uses_iter(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tcx Expr\n }\n \n #[allow(clippy::too_many_lines)]\n-fn needs_mutable_borrow(cx: &LateContext<'tcx>, iter_expr: &IterExpr, loop_expr: &'tcx Expr<'_>) -> bool {\n+fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &Expr<'_>) -> bool {\n     struct AfterLoopVisitor<'a, 'b, 'tcx> {\n         cx: &'a LateContext<'tcx>,\n         iter_expr: &'b IterExpr,\n         loop_id: HirId,\n         after_loop: bool,\n         used_iter: bool,\n     }\n-    impl Visitor<'tcx> for AfterLoopVisitor<'_, '_, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for AfterLoopVisitor<'_, '_, 'tcx> {\n         type Map = ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -292,7 +292,7 @@ fn needs_mutable_borrow(cx: &LateContext<'tcx>, iter_expr: &IterExpr, loop_expr:\n         found_local: bool,\n         used_after: bool,\n     }\n-    impl Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n+    impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n         type Map = ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "26b53ab5d683739b5e5b7d7df594be12f808575c", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ManualAssert => [MANUAL_ASSERT]);\n \n-impl LateLintPass<'_> for ManualAssert {\n+impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'tcx>) {\n         if_chain! {\n             if let ExprKind::If(cond, then, None) = expr.kind;"}, {"sha": "8475e367b09fe3c4a14bad23f8f29357e64e3d32", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ManualMap => [MANUAL_MAP]);\n \n-impl LateLintPass<'_> for ManualMap {\n+impl<'tcx> LateLintPass<'tcx> for ManualMap {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let (scrutinee, then_pat, then_body, else_pat, else_body) = match IfLetOrMatch::parse(cx, expr) {\n@@ -219,7 +219,7 @@ impl LateLintPass<'_> for ManualMap {\n \n // Checks whether the expression could be passed as a function, or whether a closure is needed.\n // Returns the function to be passed to `map` if it exists.\n-fn can_pass_as_func(cx: &LateContext<'tcx>, binding: HirId, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+fn can_pass_as_func<'tcx>(cx: &LateContext<'tcx>, binding: HirId, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(func, [arg])\n             if path_to_local_id(arg, binding)\n@@ -251,8 +251,13 @@ struct SomeExpr<'tcx> {\n \n // Try to parse into a recognized `Option` pattern.\n // i.e. `_`, `None`, `Some(..)`, or a reference to any of those.\n-fn try_parse_pattern(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ctxt: SyntaxContext) -> Option<OptionPat<'tcx>> {\n-    fn f(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ref_count: usize, ctxt: SyntaxContext) -> Option<OptionPat<'tcx>> {\n+fn try_parse_pattern<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ctxt: SyntaxContext) -> Option<OptionPat<'tcx>> {\n+    fn f<'tcx>(\n+        cx: &LateContext<'tcx>,\n+        pat: &'tcx Pat<'_>,\n+        ref_count: usize,\n+        ctxt: SyntaxContext,\n+    ) -> Option<OptionPat<'tcx>> {\n         match pat.kind {\n             PatKind::Wild => Some(OptionPat::Wild),\n             PatKind::Ref(pat, _) => f(cx, pat, ref_count + 1, ctxt),\n@@ -269,7 +274,7 @@ fn try_parse_pattern(cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>, ctxt: SyntaxCon\n }\n \n // Checks for an expression wrapped by the `Some` constructor. Returns the contained expression.\n-fn get_some_expr(\n+fn get_some_expr<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n     needs_unsafe_block: bool,\n@@ -306,6 +311,6 @@ fn get_some_expr(\n }\n \n // Checks for the `None` value.\n-fn is_none_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+fn is_none_expr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     matches!(peel_blocks(expr).kind, ExprKind::Path(ref qpath) if is_lang_ctor(cx, qpath, OptionNone))\n }"}, {"sha": "bd083e3e9e2012d8a766aae6e46e67cf8dfaca65", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -40,7 +40,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ManualOkOr => [MANUAL_OK_OR]);\n \n-impl LateLintPass<'_> for ManualOkOr {\n+impl<'tcx> LateLintPass<'tcx> for ManualOkOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'tcx>) {\n         if in_external_macro(cx.sess(), scrutinee.span) {\n             return;"}, {"sha": "b3a91d9f18f5d94ff4d782900996310d161ed6f9", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n \n-impl LateLintPass<'_> for ManualUnwrapOr {\n+impl<'tcx> LateLintPass<'tcx> for ManualUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if in_external_macro(cx.sess(), expr.span) || in_constant(cx, expr.hir_id) {\n             return;"}, {"sha": "1fc7eb72142843fdfd9b6f2aac5170034d9f3ef1", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -55,7 +55,7 @@ enum CaseMethod {\n     AsciiUppercase,\n }\n \n-impl LateLintPass<'_> for MatchStrCaseMismatch {\n+impl<'tcx> LateLintPass<'tcx> for MatchStrCaseMismatch {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, expr.span);"}, {"sha": "66c1886710f158e8a25b27c7067bfc1cf8ac4757", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -999,7 +999,7 @@ enum CommonPrefixSearcher<'a> {\n     Path(&'a [PathSegment<'a>]),\n     Mixed,\n }\n-impl CommonPrefixSearcher<'a> {\n+impl<'a> CommonPrefixSearcher<'a> {\n     fn with_path(&mut self, path: &'a [PathSegment<'a>]) {\n         match path {\n             [path @ .., _] => self.with_prefix(path),\n@@ -1804,11 +1804,15 @@ mod redundant_pattern_match {\n     /// Checks if the drop order for a type matters. Some std types implement drop solely to\n     /// deallocate memory. For these types, and composites containing them, changing the drop order\n     /// won't result in any observable side effects.\n-    fn type_needs_ordered_drop(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    fn type_needs_ordered_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         type_needs_ordered_drop_inner(cx, ty, &mut FxHashSet::default())\n     }\n \n-    fn type_needs_ordered_drop_inner(cx: &LateContext<'tcx>, ty: Ty<'tcx>, seen: &mut FxHashSet<Ty<'tcx>>) -> bool {\n+    fn type_needs_ordered_drop_inner<'tcx>(\n+        cx: &LateContext<'tcx>,\n+        ty: Ty<'tcx>,\n+        seen: &mut FxHashSet<Ty<'tcx>>,\n+    ) -> bool {\n         if !seen.insert(ty) {\n             return false;\n         }\n@@ -1870,7 +1874,7 @@ mod redundant_pattern_match {\n \n     // Checks if there are any temporaries created in the given expression for which drop order\n     // matters.\n-    fn temporaries_need_ordered_drop(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n+    fn temporaries_need_ordered_drop<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n         struct V<'a, 'tcx> {\n             cx: &'a LateContext<'tcx>,\n             res: bool,"}, {"sha": "0f39470f34262d2fc95718ea5f143b21e3ea7628", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -14,7 +14,7 @@ use super::EXPECT_FUN_CALL;\n \n /// Checks for the `EXPECT_FUN_CALL` lint.\n #[allow(clippy::too_many_lines)]\n-pub(super) fn check(\n+pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &hir::Expr<'_>,\n     method_span: Span,"}, {"sha": "6436e28a63c521cb5d3af2f21a89c4fa45ba224e", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -37,7 +37,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Exp\n     }\n }\n \n-fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -> String {\n+fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'_>) -> String {\n     fn strip_angle_brackets(s: &str) -> Option<&str> {\n         s.strip_prefix('<')?.strip_suffix('>')\n     }"}, {"sha": "514bdadc442e3ac33263bf9bd202102216f4619e", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -124,7 +124,7 @@ struct IterUsage {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn parse_iter_usage(\n+fn parse_iter_usage<'tcx>(\n     cx: &LateContext<'tcx>,\n     ctxt: SyntaxContext,\n     mut iter: impl Iterator<Item = (HirId, Node<'tcx>)>,\n@@ -281,7 +281,7 @@ pub(super) fn check_needless_splitn(\n     }\n }\n \n-fn check_iter(\n+fn check_iter<'tcx>(\n     cx: &LateContext<'tcx>,\n     ctxt: SyntaxContext,\n     mut iter: impl Iterator<Item = (HirId, Node<'tcx>)>,"}, {"sha": "5999245ea7d0001e8262c0072ac262f7bd6c624f", "filename": "clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -12,7 +12,7 @@ use rustc_span::{sym, Symbol};\n \n use super::UNNECESSARY_TO_OWNED;\n \n-pub fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol, receiver: &'tcx Expr<'tcx>) -> bool {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol, receiver: &Expr<'_>) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let Some(callee_def_id) = fn_def_id(cx, parent);\n@@ -30,10 +30,10 @@ pub fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol\n /// include this code directly is so that it can be called from\n /// `unnecessary_into_owned::check_into_iter_call_arg`.\n pub fn check_for_loop_iter(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n     method_name: Symbol,\n-    receiver: &'tcx Expr<'tcx>,\n+    receiver: &Expr<'_>,\n     cloned_before_iter: bool,\n ) -> bool {\n     if_chain! {\n@@ -101,7 +101,7 @@ pub fn check_for_loop_iter(\n \n /// The core logic of `check_for_loop_iter` above, this function wraps a use of\n /// `CloneOrCopyVisitor`.\n-fn clone_or_copy_needed(\n+fn clone_or_copy_needed<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &Pat<'tcx>,\n     body: &'tcx Expr<'tcx>,"}, {"sha": "e5b6d296b2d2519a320636db919465f54a7bf21f", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -16,7 +16,7 @@ use std::cmp::max;\n \n use super::UNNECESSARY_TO_OWNED;\n \n-pub fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol, args: &'tcx [Expr<'tcx>]) {\n+pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol, args: &'tcx [Expr<'tcx>]) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let [receiver] = args;\n@@ -44,11 +44,11 @@ pub fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, method_name: Symbol\n /// call of a `to_owned`-like function is unnecessary.\n #[allow(clippy::too_many_lines)]\n fn check_addr_of_expr(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n     method_name: Symbol,\n     method_def_id: DefId,\n-    receiver: &'tcx Expr<'tcx>,\n+    receiver: &Expr<'_>,\n ) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n@@ -171,12 +171,7 @@ fn check_addr_of_expr(\n \n /// Checks whether `expr` is an argument in an `into_iter` call and, if so, determines whether its\n /// call of a `to_owned`-like function is unnecessary.\n-fn check_into_iter_call_arg(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx Expr<'tcx>,\n-    method_name: Symbol,\n-    receiver: &'tcx Expr<'tcx>,\n-) -> bool {\n+fn check_into_iter_call_arg(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol, receiver: &Expr<'_>) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let Some(callee_def_id) = fn_def_id(cx, parent);\n@@ -221,7 +216,7 @@ fn check_into_iter_call_arg(\n \n /// Checks whether `expr` is an argument in a function call and, if so, determines whether its call\n /// of a `to_owned`-like function is unnecessary.\n-fn check_other_call_arg(\n+fn check_other_call_arg<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n     method_name: Symbol,\n@@ -287,7 +282,7 @@ fn check_other_call_arg(\n \n /// Walks an expression's ancestors until it finds a non-`AddrOf` expression. Returns the first such\n /// expression found (if any) along with the immediately prior expression.\n-fn skip_addr_of_ancestors(\n+fn skip_addr_of_ancestors<'tcx>(\n     cx: &LateContext<'tcx>,\n     mut expr: &'tcx Expr<'tcx>,\n ) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)> {\n@@ -303,7 +298,7 @@ fn skip_addr_of_ancestors(\n \n /// Checks whether an expression is a function or method call and, if so, returns its `DefId`,\n /// `Substs`, and arguments.\n-fn get_callee_substs_and_args(\n+fn get_callee_substs_and_args<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n ) -> Option<(DefId, SubstsRef<'tcx>, &'tcx [Expr<'tcx>])> {\n@@ -328,7 +323,7 @@ fn get_callee_substs_and_args(\n }\n \n /// Returns the `TraitPredicate`s and `ProjectionPredicate`s for a function's input type.\n-fn get_input_traits_and_projections(\n+fn get_input_traits_and_projections<'tcx>(\n     cx: &LateContext<'tcx>,\n     callee_def_id: DefId,\n     input: Ty<'tcx>,\n@@ -368,7 +363,11 @@ fn get_input_traits_and_projections(\n }\n \n /// Composes two substitutions by applying the latter to the types of the former.\n-fn compose_substs(cx: &LateContext<'tcx>, left: &[GenericArg<'tcx>], right: SubstsRef<'tcx>) -> Vec<GenericArg<'tcx>> {\n+fn compose_substs<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    left: &[GenericArg<'tcx>],\n+    right: SubstsRef<'tcx>,\n+) -> Vec<GenericArg<'tcx>> {\n     left.iter()\n         .map(|arg| {\n             if let GenericArgKind::Type(arg_ty) = arg.unpack() {"}, {"sha": "21b3f81d5d981978df903b8e2251eeac41c681ed", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -717,7 +717,7 @@ fn check_cast(cx: &LateContext<'_>, span: Span, e: &Expr<'_>, ty: &hir::Ty<'_>)\n     }\n }\n \n-fn check_binary(\n+fn check_binary<'a>(\n     cx: &LateContext<'a>,\n     expr: &Expr<'_>,\n     cmp: &rustc_span::source_map::Spanned<rustc_hir::BinOpKind>,"}, {"sha": "19d58f7474b0ad548cd50622fd03ecd109de91d8", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -48,7 +48,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(NeedlessForEach => [NEEDLESS_FOR_EACH]);\n \n-impl LateLintPass<'_> for NeedlessForEach {\n+impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         let expr = match stmt.kind {\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr,"}, {"sha": "9957afcbf04aaee1d7daaa305f1a89e797d335e9", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -330,7 +330,7 @@ fn check<'tcx>(\n     Some(())\n }\n \n-impl LateLintPass<'tcx> for NeedlessLateInit {\n+impl<'tcx> LateLintPass<'tcx> for NeedlessLateInit {\n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         let mut parents = cx.tcx.hir().parent_iter(local.hir_id);\n "}, {"sha": "5bf8a1ba1ca3010258ed4d12afe881b5cf88ea7d", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for NoEffect {\n     }\n }\n \n-fn check_no_effect(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> bool {\n+fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n     if let StmtKind::Semi(expr) = stmt.kind {\n         if has_no_effect(cx, expr) {\n             span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n@@ -155,7 +155,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     }\n }\n \n-fn check_unnecessary_operation(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n+fn check_unnecessary_operation(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n     if_chain! {\n         if let StmtKind::Semi(expr) = stmt.kind;\n         if let Some(reduced) = reduce_expression(cx, expr);"}, {"sha": "e46fee4cac5eefd90aeabbe06886950848938107", "filename": "clippy_lints/src/non_octal_unix_permissions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_octal_unix_permissions.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -40,7 +40,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(NonOctalUnixPermissions => [NON_OCTAL_UNIX_PERMISSIONS]);\n \n-impl LateLintPass<'_> for NonOctalUnixPermissions {\n+impl<'tcx> LateLintPass<'tcx> for NonOctalUnixPermissions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         match &expr.kind {\n             ExprKind::MethodCall(path, _, [func, param], _) => {"}, {"sha": "e0da12f77fcc79693641f7b08ffe05bbd9bae7c7", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n declare_lint_pass!(OctalEscapes => [OCTAL_ESCAPES]);\n \n impl EarlyLintPass for OctalEscapes {\n-    fn check_expr(&mut self, cx: &EarlyContext<'tcx>, expr: &Expr) {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n@@ -65,7 +65,7 @@ impl EarlyLintPass for OctalEscapes {\n     }\n }\n \n-fn check_lit(cx: &EarlyContext<'tcx>, lit: &Lit, span: Span, is_string: bool) {\n+fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n     let contents = lit.symbol.as_str();\n     let mut iter = contents.char_indices().peekable();\n     let mut found = vec![];"}, {"sha": "2bec93ac606057e22c483777f9a9a546d332a787", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(PtrEq => [PTR_EQ]);\n \n static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n \n-impl LateLintPass<'_> for PtrEq {\n+impl<'tcx> LateLintPass<'tcx> for PtrEq {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if expr.span.from_expansion() {\n             return;"}, {"sha": "7c88b42ea3199a771b40f5692f95923cf6928fa6", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -42,7 +42,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(RedundantSlicing => [REDUNDANT_SLICING]);\n \n-impl LateLintPass<'_> for RedundantSlicing {\n+impl<'tcx> LateLintPass<'tcx> for RedundantSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if expr.span.from_expansion() {\n             return;"}, {"sha": "5dafd08cf3be0e754b8d9e1d29b4076a2a5c5448", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -66,7 +66,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ReturnSelfNotMustUse => [RETURN_SELF_NOT_MUST_USE]);\n \n-fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n+fn check_method(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_def: LocalDefId, span: Span, hir_id: HirId) {\n     if_chain! {\n         // If it comes from an external macro, better ignore it.\n         if !in_external_macro(cx.sess(), span);"}, {"sha": "729694da46d5c2ee6a3098d2b9000495cf4a753d", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SemicolonIfNothingReturned => [SEMICOLON_IF_NOTHING_RETURNED]);\n \n-impl LateLintPass<'_> for SemicolonIfNothingReturned {\n+impl<'tcx> LateLintPass<'tcx> for SemicolonIfNothingReturned {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n         if_chain! {\n             if !block.span.from_expansion();"}, {"sha": "9b195f3c0a228d1edefd01abad488e6347f6b334", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(SizeOfInElementCount => [SIZE_OF_IN_ELEMENT_COUNT]);\n \n-fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool) -> Option<Ty<'tcx>> {\n+fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool) -> Option<Ty<'tcx>> {\n     match expr.kind {\n         ExprKind::Call(count_func, _func_args) => {\n             if_chain! {\n@@ -64,7 +64,10 @@ fn get_size_of_ty(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, inverted: bool)\n     }\n }\n \n-fn get_pointee_ty_and_count_expr(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n+fn get_pointee_ty_and_count_expr<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+) -> Option<(Ty<'tcx>, &'tcx Expr<'tcx>)> {\n     const FUNCTIONS: [&[&str]; 8] = [\n         &paths::PTR_COPY_NONOVERLAPPING,\n         &paths::PTR_COPY,"}, {"sha": "b4a71aefd437ff7b6c1a186467242b7cf3c0fa08", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -381,7 +381,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(StrToString => [STR_TO_STRING]);\n \n-impl LateLintPass<'_> for StrToString {\n+impl<'tcx> LateLintPass<'tcx> for StrToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;\n@@ -431,7 +431,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(StringToString => [STRING_TO_STRING]);\n \n-impl LateLintPass<'_> for StringToString {\n+impl<'tcx> LateLintPass<'tcx> for StringToString {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(path, _, [self_arg, ..], _) = &expr.kind;"}, {"sha": "d6e948a75607bff1bfcb4da6ab50708febce40db", "filename": "clippy_lints/src/strlen_on_c_strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrlen_on_c_strings.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -39,7 +39,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(StrlenOnCStrings => [STRLEN_ON_C_STRINGS]);\n \n-impl LateLintPass<'tcx> for StrlenOnCStrings {\n+impl<'tcx> LateLintPass<'tcx> for StrlenOnCStrings {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();"}, {"sha": "ca725918e873e3d8269bbf2a978379fe0c259ca1", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -355,7 +355,7 @@ struct BinaryOp<'exprs> {\n     right: &'exprs Expr,\n }\n \n-impl BinaryOp<'exprs> {\n+impl<'exprs> BinaryOp<'exprs> {\n     fn new(op: BinOpKind, span: Span, (left, right): (&'exprs Expr, &'exprs Expr)) -> Self {\n         Self { op, span, left, right }\n     }\n@@ -419,7 +419,7 @@ fn chained_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n     }\n }\n \n-fn chained_binops_helper(left_outer: &'expr Expr, right_outer: &'expr Expr) -> Option<Vec<BinaryOp<'expr>>> {\n+fn chained_binops_helper<'expr>(left_outer: &'expr Expr, right_outer: &'expr Expr) -> Option<Vec<BinaryOp<'expr>>> {\n     match (&left_outer.kind, &right_outer.kind) {\n         (\n             ExprKind::Paren(ref left_e) | ExprKind::Unary(_, ref left_e),"}, {"sha": "bf1cbf4f6929d4c1bcd3ab144391638dea7811b2", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for TrailingEmptyArray {\n     }\n }\n \n-fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n     if_chain! {\n         // First check if last field is an array\n         if let ItemKind::Struct(data, _) = &item.kind;"}, {"sha": "697ed267e2f357309961ac1642e4509c00e505a7", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -113,8 +113,8 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n     }\n }\n \n-impl<'hir> Visitor<'hir> for UndocumentedUnsafeBlocks {\n-    type Map = Map<'hir>;\n+impl<'v> Visitor<'v> for UndocumentedUnsafeBlocks {\n+    type Map = Map<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "7557e14d11f526917b8faa0da05a3e941c829896", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n \n-impl LateLintPass<'tcx> for UndroppedManuallyDrops {\n+impl<'tcx> LateLintPass<'tcx> for UndroppedManuallyDrops {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let Some([arg_0, ..]) = match_function_call(cx, expr, &paths::DROP) {\n             let ty = cx.typeck_results().expr_ty(arg_0);"}, {"sha": "2ffaf24f942ae705dbd72cf3098b15c73030c6ee", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for UninitVec {\n     }\n }\n \n-fn handle_uninit_vec_pair(\n+fn handle_uninit_vec_pair<'tcx>(\n     cx: &LateContext<'tcx>,\n     maybe_init_or_reserve: &'tcx Stmt<'tcx>,\n     maybe_set_len: &'tcx Expr<'tcx>,\n@@ -196,7 +196,7 @@ fn is_reserve(cx: &LateContext<'_>, path: &PathSegment<'_>, self_expr: &Expr<'_>\n }\n \n /// Returns self if the expression is `Vec::set_len()`\n-fn extract_set_len_self(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(&'tcx Expr<'tcx>, Span)> {\n+fn extract_set_len_self<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'_>) -> Option<(&'tcx Expr<'tcx>, Span)> {\n     // peel unsafe blocks in `unsafe { vec.set_len() }`\n     let expr = peel_hir_expr_while(expr, |e| {\n         if let ExprKind::Block(block, _) = e.kind {"}, {"sha": "dcf8a9d7c84d39416926d2e4f7f30dd4aa1bb3b3", "filename": "clippy_lints/src/unit_hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Funit_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Funit_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_hash.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(UnitHash => [UNIT_HASH]);\n \n-impl LateLintPass<'tcx> for UnitHash {\n+impl<'tcx> LateLintPass<'tcx> for UnitHash {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n             if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;"}, {"sha": "4e46d79dc087047aca119d05c2d603a53b8b10bf", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -577,7 +577,7 @@ fn get_lint_version(cx: &LateContext<'_>, item: &Item<'_>) -> String {\n fn get_lint_group_and_level_or_lint(\n     cx: &LateContext<'_>,\n     lint_name: &str,\n-    item: &'hir Item<'_>,\n+    item: &Item<'_>,\n ) -> Option<(String, &'static str)> {\n     let result = cx\n         .lint_store\n@@ -696,20 +696,20 @@ fn extract_emission_info<'hir>(\n }\n \n /// Resolves the possible lints that this expression could reference\n-fn resolve_lints(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Vec<String> {\n+fn resolve_lints<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Vec<String> {\n     let mut resolver = LintResolver::new(cx);\n     resolver.visit_expr(expr);\n     resolver.lints\n }\n \n /// This function tries to resolve the linked applicability to the given expression.\n-fn resolve_applicability(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Option<usize> {\n+fn resolve_applicability<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Option<usize> {\n     let mut resolver = ApplicabilityResolver::new(cx);\n     resolver.visit_expr(expr);\n     resolver.complete()\n }\n \n-fn check_is_multi_part(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n+fn check_is_multi_part<'hir>(cx: &LateContext<'hir>, closure_expr: &'hir hir::Expr<'hir>) -> bool {\n     if let ExprKind::Closure(_, _, body_id, _, _) = closure_expr.kind {\n         let mut scanner = IsMultiSpanScanner::new(cx);\n         intravisit::walk_body(&mut scanner, cx.tcx.hir().body(body_id));\n@@ -824,7 +824,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n }\n \n /// This returns the parent local node if the expression is a reference one\n-fn get_parent_local(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Option<&'hir hir::Local<'hir>> {\n+fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Option<&'hir hir::Local<'hir>> {\n     if let ExprKind::Path(QPath::Resolved(_, path)) = expr.kind {\n         if let hir::def::Res::Local(local_hir) = path.res {\n             return get_parent_local_hir_id(cx, local_hir);\n@@ -834,7 +834,7 @@ fn get_parent_local(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -> Opti\n     None\n }\n \n-fn get_parent_local_hir_id(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n+fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n     match map.find(map.get_parent_node(hir_id)) {"}, {"sha": "43474da3450e2bd1e7641ed96d743c73f28439db", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -77,7 +77,7 @@ impl VecPushSearcher {\n     }\n }\n \n-impl LateLintPass<'_> for VecInitThenPush {\n+impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n     fn check_block(&mut self, _: &LateContext<'tcx>, _: &'tcx Block<'tcx>) {\n         self.searcher = None;\n     }"}, {"sha": "34c5af848a6dbe1bfaa92ec1efbfae3e4b4624bf", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -223,7 +223,7 @@ pub fn constant_simple<'tcx>(\n     constant(lcx, typeck_results, e).and_then(|(cst, res)| if res { None } else { Some(cst) })\n }\n \n-pub fn constant_full_int(\n+pub fn constant_full_int<'tcx>(\n     lcx: &LateContext<'tcx>,\n     typeck_results: &ty::TypeckResults<'tcx>,\n     e: &Expr<'_>,"}, {"sha": "c3936ec95d46dc077edb1a1e6d251005be252142", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -45,7 +45,12 @@ impl ops::BitOrAssign for EagernessSuggestion {\n }\n \n /// Determine the eagerness of the given function call.\n-fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx [Expr<'_>]) -> EagernessSuggestion {\n+fn fn_eagerness<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    fn_id: DefId,\n+    name: Symbol,\n+    args: &'tcx [Expr<'_>],\n+) -> EagernessSuggestion {\n     use EagernessSuggestion::{Eager, Lazy, NoChange};\n     let name = name.as_str();\n \n@@ -92,7 +97,7 @@ fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx\n }\n \n #[allow(clippy::too_many_lines)]\n-fn expr_eagerness(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n+fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,\n         eagerness: EagernessSuggestion,\n@@ -225,11 +230,11 @@ fn expr_eagerness(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggest\n }\n \n /// Whether the given expression should be changed to evaluate eagerly\n-pub fn switch_to_eager_eval(cx: &'_ LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+pub fn switch_to_eager_eval<'tcx>(cx: &'_ LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n     expr_eagerness(cx, expr) == EagernessSuggestion::Eager\n }\n \n /// Whether the given expression should be changed to evaluate lazily\n-pub fn switch_to_lazy_eval(cx: &'_ LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n+pub fn switch_to_lazy_eval<'tcx>(cx: &'_ LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n     expr_eagerness(cx, expr) == EagernessSuggestion::Lazy\n }"}, {"sha": "9f2018385f38025f0841636620b0fe3b57a9df87", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -1,6 +1,5 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n@@ -128,7 +127,7 @@ macro_rules! extract_msrv_attr {\n         extract_msrv_attr!(@EarlyContext);\n     };\n     (@$context:ident$(, $call:tt)?) => {\n-        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'tcx>, attrs: &'tcx [rustc_ast::ast::Attribute]) {\n+        fn enter_lint_attrs(&mut self, cx: &rustc_lint::$context<'_>, attrs: &[rustc_ast::ast::Attribute]) {\n             use $crate::get_unique_inner_attr;\n             match get_unique_inner_attr(cx.sess$($call)?, attrs, \"msrv\") {\n                 Some(msrv_attr) => {\n@@ -277,7 +276,11 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n }\n \n /// Checks if the first type parameter is a lang item.\n-pub fn is_ty_param_lang_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: LangItem) -> Option<&'tcx hir::Ty<'tcx>> {\n+pub fn is_ty_param_lang_item<'tcx>(\n+    cx: &LateContext<'_>,\n+    qpath: &QPath<'tcx>,\n+    item: LangItem,\n+) -> Option<&'tcx hir::Ty<'tcx>> {\n     let ty = get_qpath_generic_tys(qpath).next()?;\n \n     if let TyKind::Path(qpath) = &ty.kind {\n@@ -293,7 +296,7 @@ pub fn is_ty_param_lang_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: La\n }\n \n /// Checks if the first type parameter is a diagnostic item.\n-pub fn is_ty_param_diagnostic_item(\n+pub fn is_ty_param_diagnostic_item<'tcx>(\n     cx: &LateContext<'_>,\n     qpath: &QPath<'tcx>,\n     item: Symbol,\n@@ -370,15 +373,15 @@ pub fn last_path_segment<'tcx>(path: &QPath<'tcx>) -> &'tcx PathSegment<'tcx> {\n     }\n }\n \n-pub fn get_qpath_generics(path: &QPath<'tcx>) -> Option<&'tcx GenericArgs<'tcx>> {\n+pub fn get_qpath_generics<'tcx>(path: &QPath<'tcx>) -> Option<&'tcx GenericArgs<'tcx>> {\n     match path {\n         QPath::Resolved(_, p) => p.segments.last().and_then(|s| s.args),\n         QPath::TypeRelative(_, s) => s.args,\n         QPath::LangItem(..) => None,\n     }\n }\n \n-pub fn get_qpath_generic_tys(path: &QPath<'tcx>) -> impl Iterator<Item = &'tcx hir::Ty<'tcx>> {\n+pub fn get_qpath_generic_tys<'tcx>(path: &QPath<'tcx>) -> impl Iterator<Item = &'tcx hir::Ty<'tcx>> {\n     get_qpath_generics(path)\n         .map_or([].as_ref(), |a| a.args)\n         .iter()\n@@ -767,7 +770,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n ///\n /// Note that this check is not recursive, so passing the `if` expression will always return true\n /// even though sub-expressions might return false.\n-pub fn can_move_expr_to_closure_no_visit(\n+pub fn can_move_expr_to_closure_no_visit<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n     loop_ids: &[HirId],\n@@ -842,7 +845,7 @@ impl std::ops::BitOrAssign for CaptureKind {\n /// Note as this will walk up to parent expressions until the capture can be determined it should\n /// only be used while making a closure somewhere a value is consumed. e.g. a block, match arm, or\n /// function argument (other than a receiver).\n-pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind {\n+pub fn capture_local_usage<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind {\n     fn pat_capture_kind(cx: &LateContext<'_>, pat: &Pat<'_>) -> CaptureKind {\n         let mut capture = CaptureKind::Ref(Mutability::Not);\n         pat.each_binding_or_first(&mut |_, id, span, _| match cx\n@@ -942,7 +945,7 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n \n /// Checks if the expression can be moved into a closure as is. This will return a list of captures\n /// if so, otherwise, `None`.\n-pub fn can_move_expr_to_closure(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<HirIdMap<CaptureKind>> {\n+pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<HirIdMap<CaptureKind>> {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,\n         // Stack of potential break targets contained in the expression.\n@@ -955,7 +958,7 @@ pub fn can_move_expr_to_closure(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) ->\n         /// mutable reference.\n         captures: HirIdMap<CaptureKind>,\n     }\n-    impl Visitor<'tcx> for V<'_, 'tcx> {\n+    impl<'tcx> Visitor<'tcx> for V<'_, 'tcx> {\n         type Map = ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -1212,7 +1215,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n }\n \n /// Gets the loop or closure enclosing the given expression, if any.\n-pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+pub fn get_enclosing_loop_or_closure<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n@@ -1720,7 +1723,7 @@ pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,\n-pub fn get_async_fn_body(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n+pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if let ExprKind::Call(\n         _,\n         &[\n@@ -1824,7 +1827,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n }\n \n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n-pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n+pub fn get_expr_use_or_unification_node<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n     let mut child_id = expr.hir_id;\n     let mut iter = tcx.hir().parent_iter(child_id);\n     loop {\n@@ -2030,8 +2033,8 @@ where\n \n /// Peels off all references on the pattern. Returns the underlying pattern and the number of\n /// references removed.\n-pub fn peel_hir_pat_refs(pat: &'a Pat<'a>) -> (&'a Pat<'a>, usize) {\n-    fn peel(pat: &'a Pat<'a>, count: usize) -> (&'a Pat<'a>, usize) {\n+pub fn peel_hir_pat_refs<'a>(pat: &'a Pat<'a>) -> (&'a Pat<'a>, usize) {\n+    fn peel<'a>(pat: &'a Pat<'a>, count: usize) -> (&'a Pat<'a>, usize) {\n         if let PatKind::Ref(pat, _) = pat.kind {\n             peel(pat, count + 1)\n         } else {\n@@ -2054,7 +2057,7 @@ pub fn peel_hir_expr_while<'tcx>(\n \n /// Peels off up to the given number of references on the expression. Returns the underlying\n /// expression and the number of references removed.\n-pub fn peel_n_hir_expr_refs(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'a>, usize) {\n+pub fn peel_n_hir_expr_refs<'a>(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'a>, usize) {\n     let mut remaining = count;\n     let e = peel_hir_expr_while(expr, |e| match e.kind {\n         ExprKind::AddrOf(ast::BorrowKind::Ref, _, e) if remaining != 0 => {\n@@ -2068,7 +2071,7 @@ pub fn peel_n_hir_expr_refs(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'a>,\n \n /// Peels off all references on the expression. Returns the underlying expression and the number of\n /// references removed.\n-pub fn peel_hir_expr_refs(expr: &'a Expr<'a>) -> (&'a Expr<'a>, usize) {\n+pub fn peel_hir_expr_refs<'a>(expr: &'a Expr<'a>) -> (&'a Expr<'a>, usize) {\n     let mut count = 0;\n     let e = peel_hir_expr_while(expr, |e| match e.kind {\n         ExprKind::AddrOf(ast::BorrowKind::Ref, _, e) => {\n@@ -2151,7 +2154,7 @@ impl<'hir> ItemLikeVisitor<'hir> for TestItemNamesVisitor<'hir> {\n \n static TEST_ITEM_NAMES_CACHE: SyncOnceCell<Mutex<FxHashMap<LocalDefId, Vec<Symbol>>>> = SyncOnceCell::new();\n \n-fn with_test_item_names(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n+fn with_test_item_names<'tcx>(tcx: TyCtxt<'tcx>, module: LocalDefId, f: impl Fn(&[Symbol]) -> bool) -> bool {\n     let cache = TEST_ITEM_NAMES_CACHE.get_or_init(|| Mutex::new(FxHashMap::default()));\n     let mut map: MutexGuard<'_, FxHashMap<LocalDefId, Vec<Symbol>>> = cache.lock().unwrap();\n     match map.entry(module) {"}, {"sha": "a3e336d701cabe265f39a55d478f400fd313ce53", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -283,7 +283,7 @@ fn find_assert_within_debug_assert<'a>(\n     found\n }\n \n-fn is_assert_arg(cx: &LateContext<'_>, expr: &'a Expr<'a>, assert_expn: ExpnId) -> bool {\n+fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) -> bool {\n     if !expr.span.from_expansion() {\n         return true;\n     }\n@@ -322,7 +322,7 @@ pub struct FormatArgsExpn<'tcx> {\n     pub specs: Vec<&'tcx Expr<'tcx>>,\n }\n \n-impl FormatArgsExpn<'tcx> {\n+impl<'tcx> FormatArgsExpn<'tcx> {\n     /// Parses an expanded `format_args!` or `format_args_nl!` invocation\n     pub fn parse(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         macro_backtrace(expr.span).find(|macro_call| {"}, {"sha": "d6d43e93e7a418172006b3ef15b055f8ba8bf0fb", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -19,7 +19,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -85,7 +85,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&Ru\n     Ok(())\n }\n \n-fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n+fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n     for arg in ty.walk(tcx) {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n@@ -133,7 +133,13 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n     Ok(())\n }\n \n-fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rvalue<'tcx>, span: Span) -> McfResult {\n+fn check_rvalue<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    def_id: DefId,\n+    rvalue: &Rvalue<'tcx>,\n+    span: Span,\n+) -> McfResult {\n     match rvalue {\n         Rvalue::ThreadLocalRef(_) => Err((span, \"cannot access thread local storage in const fn\".into())),\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => check_operand(tcx, operand, span, body),\n@@ -211,7 +217,12 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n     }\n }\n \n-fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statement: &Statement<'tcx>) -> McfResult {\n+fn check_statement<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    def_id: DefId,\n+    statement: &Statement<'tcx>,\n+) -> McfResult {\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(box (place, rval)) => {\n@@ -240,7 +251,7 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n     }\n }\n \n-fn check_operand(tcx: TyCtxt<'tcx>, operand: &Operand<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n+fn check_operand<'tcx>(tcx: TyCtxt<'tcx>, operand: &Operand<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => check_place(tcx, *place, span, body),\n         Operand::Constant(c) => match c.check_static_ptr(tcx) {\n@@ -250,7 +261,7 @@ fn check_operand(tcx: TyCtxt<'tcx>, operand: &Operand<'tcx>, span: Span, body: &\n     }\n }\n \n-fn check_place(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n+fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'tcx>) -> McfResult {\n     let mut cursor = place.projection.as_ref();\n     while let [ref proj_base @ .., elem] = *cursor {\n         cursor = proj_base;\n@@ -275,7 +286,7 @@ fn check_place(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &Body<'t\n     Ok(())\n }\n \n-fn check_terminator(\n+fn check_terminator<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     terminator: &Terminator<'tcx>,"}, {"sha": "dbad607c58ea34dfee9b37780b166824cd0f2efc", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -281,7 +281,7 @@ pub fn snippet_block_with_applicability<'a, T: LintContext>(\n /// correctly get a snippet of `vec![]`.\n ///\n /// This will also return whether or not the snippet is a macro call.\n-pub fn snippet_with_context(\n+pub fn snippet_with_context<'a>(\n     cx: &LateContext<'_>,\n     span: Span,\n     outer: SyntaxContext,"}, {"sha": "87bc8232dde3a6e2501e1fdc0ae2f73584091e8d", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -461,7 +461,7 @@ impl Neg for Sugg<'_> {\n     }\n }\n \n-impl Not for Sugg<'a> {\n+impl<'a> Not for Sugg<'a> {\n     type Output = Sugg<'a>;\n     fn not(self) -> Sugg<'a> {\n         use AssocOp::{Equal, Greater, GreaterEqual, Less, LessEqual, NotEqual};\n@@ -846,7 +846,7 @@ struct DerefDelegate<'a, 'tcx> {\n     applicability: Applicability,\n }\n \n-impl DerefDelegate<'_, 'tcx> {\n+impl<'tcx> DerefDelegate<'_, 'tcx> {\n     /// build final suggestion:\n     /// - create the ending part of suggestion\n     /// - concatenate starting and ending parts"}, {"sha": "72317447159a96ee4f16041df51eb2f22ca716ee", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -25,7 +25,7 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n /// Checks whether a type can be partially moved.\n-pub fn can_partially_move_ty(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     if has_drop(cx, ty) || is_copy(cx, ty) {\n         return false;\n     }\n@@ -366,7 +366,7 @@ pub fn walk_ptrs_ty_depth(ty: Ty<'_>) -> (Ty<'_>, usize) {\n \n /// Returns `true` if types `a` and `b` are same types having same `Const` generic args,\n /// otherwise returns `false`\n-pub fn same_type_and_consts(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n+pub fn same_type_and_consts<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n     match (&a.kind(), &b.kind()) {\n         (&ty::Adt(did_a, substs_a), &ty::Adt(did_b, substs_b)) => {\n             if did_a != did_b {"}, {"sha": "b60cd4736f32ac1d9bdeb9c16337d113679a26a7", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -173,7 +173,7 @@ pub trait Visitable<'tcx> {\n }\n macro_rules! visitable_ref {\n     ($t:ident, $f:ident) => {\n-        impl Visitable<'tcx> for &'tcx $t<'tcx> {\n+        impl<'tcx> Visitable<'tcx> for &'tcx $t<'tcx> {\n             fn visit<V: Visitor<'tcx>>(self, visitor: &mut V) {\n                 visitor.$f(self);\n             }\n@@ -217,7 +217,7 @@ pub fn is_res_used(cx: &LateContext<'_>, res: Res, body: BodyId) -> bool {\n }\n \n /// Checks if the given local is used.\n-pub fn is_local_used(cx: &LateContext<'tcx>, visitable: impl Visitable<'tcx>, id: HirId) -> bool {\n+pub fn is_local_used<'tcx>(cx: &LateContext<'tcx>, visitable: impl Visitable<'tcx>, id: HirId) -> bool {\n     let mut is_used = false;\n     let mut visitor = expr_visitor(cx, |expr| {\n         if !is_used {\n@@ -231,7 +231,7 @@ pub fn is_local_used(cx: &LateContext<'tcx>, visitable: impl Visitable<'tcx>, id\n }\n \n /// Checks if the given expression is a constant.\n-pub fn is_const_evaluatable(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+pub fn is_const_evaluatable<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n     struct V<'a, 'tcx> {\n         cx: &'a LateContext<'tcx>,\n         is_const: bool,\n@@ -321,7 +321,7 @@ pub fn is_const_evaluatable(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n }\n \n /// Checks if the given expression performs an unsafe operation outside of an unsafe block.\n-pub fn is_expr_unsafe(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+pub fn is_expr_unsafe<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n     struct V<'a, 'tcx> {\n         cx: &'a LateContext<'tcx>,\n         is_unsafe: bool,"}, {"sha": "207b0be15488561da7a76d9f1ad4933dc9fde58f", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02ec39b2ff69ce3275724e234ebcb72d310766ca/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/02ec39b2ff69ce3275724e234ebcb72d310766ca/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=02ec39b2ff69ce3275724e234ebcb72d310766ca", "patch": "@@ -60,7 +60,7 @@ Two noticeable items here:\n Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n \n ```rust\n-impl LateLintPass<'_> for MyStructLint {\n+impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             // Check our expr is calling a method"}]}