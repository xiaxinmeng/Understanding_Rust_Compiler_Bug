{"sha": "c774bc650a6b19e6ca6b970dda294ba8937a6548", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzRiYzY1MGE2YjE5ZTZjYTZiOTcwZGRhMjk0YmE4OTM3YTY1NDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T19:54:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-19T19:54:31Z"}, "message": "examples", "tree": {"sha": "db99d5722fe424a43c8ef142610a6b71d0fffd76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db99d5722fe424a43c8ef142610a6b71d0fffd76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c774bc650a6b19e6ca6b970dda294ba8937a6548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c774bc650a6b19e6ca6b970dda294ba8937a6548", "html_url": "https://github.com/rust-lang/rust/commit/c774bc650a6b19e6ca6b970dda294ba8937a6548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c774bc650a6b19e6ca6b970dda294ba8937a6548/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30403802068b920eb3b3f6ffbc1e89068de43292", "url": "https://api.github.com/repos/rust-lang/rust/commits/30403802068b920eb3b3f6ffbc1e89068de43292", "html_url": "https://github.com/rust-lang/rust/commit/30403802068b920eb3b3f6ffbc1e89068de43292"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "a142fd811ad8ef17fe96ddc04c03df11b4496f18", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c774bc650a6b19e6ca6b970dda294ba8937a6548/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c774bc650a6b19e6ca6b970dda294ba8937a6548/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=c774bc650a6b19e6ca6b970dda294ba8937a6548", "patch": "@@ -36,7 +36,9 @@\n //!\n //! However, these restrictions are usually not necessary. Many types are always freely\n //! movable, even when pinned, because they do not rely on having a stable address.\n-//! These types implement the [`Unpin`] auto-trait, which\n+//! This includes all the basic types (`bool`, `i32` and friends, references)\n+//! as well as types consisting solely of these types.\n+//! Types that do not care about pinning implement the [`Unpin`] auto-trait, which\n //! nullifies the effect of [`Pin`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function\n //! identically, as do `Pin<&mut T>` and `&mut T`.\n //!"}]}