{"sha": "31a61ccc38201a13c2549b20772daf15ce0e0309", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTYxY2NjMzgyMDFhMTNjMjU0OWIyMDc3MmRhZjE1Y2UwZTAzMDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-30T17:48:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-06T22:29:22Z"}, "message": "Move rustc_mir::borrow_check to new crate rustc_borrowck.", "tree": {"sha": "f9baddd165b05723592499259b86f7947344ca3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9baddd165b05723592499259b86f7947344ca3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a61ccc38201a13c2549b20772daf15ce0e0309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a61ccc38201a13c2549b20772daf15ce0e0309", "html_url": "https://github.com/rust-lang/rust/commit/31a61ccc38201a13c2549b20772daf15ce0e0309", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a61ccc38201a13c2549b20772daf15ce0e0309/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ceea01bb442b9746a51b062ce25abbf46d866b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ceea01bb442b9746a51b062ce25abbf46d866b2", "html_url": "https://github.com/rust-lang/rust/commit/8ceea01bb442b9746a51b062ce25abbf46d866b2"}], "stats": {"total": 687, "additions": 372, "deletions": 315}, "files": [{"sha": "81549bd1d2055c178e30554ad36f5050d98b60f4", "filename": "Cargo.lock", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -3598,6 +3598,32 @@ dependencies = [\n  \"rustc_span\",\n ]\n \n+[[package]]\n+name = \"rustc_borrowck\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"either\",\n+ \"itertools 0.9.0\",\n+ \"polonius-engine\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_graphviz\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_infer\",\n+ \"rustc_lexer\",\n+ \"rustc_middle\",\n+ \"rustc_mir\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"rustc_trait_selection\",\n+ \"rustc_traits\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_builtin_macros\"\n version = \"0.0.0\"\n@@ -3888,6 +3914,7 @@ dependencies = [\n  \"rustc_ast_lowering\",\n  \"rustc_ast_passes\",\n  \"rustc_attr\",\n+ \"rustc_borrowck\",\n  \"rustc_builtin_macros\",\n  \"rustc_codegen_llvm\",\n  \"rustc_codegen_ssa\",\n@@ -4059,15 +4086,13 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n- \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n- \"rustc_traits\",\n  \"smallvec\",\n  \"tracing\",\n ]"}, {"sha": "e919c2cbc4f15523634bb4148005d2b306118216", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -0,0 +1,30 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_borrowck\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+either = \"1.5.0\"\n+itertools = \"0.9\"\n+tracing = \"0.1\"\n+polonius-engine = \"0.13.0\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_infer = { path = \"../rustc_infer\" }\n+rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_mir = { path = \"../rustc_mir\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_traits = { path = \"../rustc_traits\" }\n+rustc_span = { path = \"../rustc_span\" }"}, {"sha": "eb4d815bfc3ca3947941f0d3b3d1720f763d78ed", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,14 +1,14 @@\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::borrow_check::path_utils::allow_two_phase_borrow;\n-use crate::borrow_check::place_ext::PlaceExt;\n-use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::MoveData;\n+use crate::nll::ToRegionVid;\n+use crate::path_utils::allow_two_phase_borrow;\n+use crate::place_ext::PlaceExt;\n+use crate::BorrowIndex;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n+use rustc_mir::dataflow::move_paths::MoveData;\n use std::fmt;\n use std::ops::Index;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/borrow_set.rs"}, {"sha": "5702203d7c4ffba938aea53c89e71a1dbf7ba9bf", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -2,7 +2,7 @@ use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n \n-impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_move_when_borrowed(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(self, span, E0505, \"cannot move out of {} because it is borrowed\", desc,)\n     }", "previous_filename": "compiler/rustc_mir/src/util/borrowck_errors.rs"}, {"sha": "a40f148cdf88c02a32706c7aeac8080a0f53314b", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, RegionVid, Ty};\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, nll::ToRegionVid,\n     places_conflict, region_infer::values::LivenessValues,\n };", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraint_generation.rs"}, {"sha": "cb9e0234c49ffa5a5a7edc3e653817563f93ee5e", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use rustc_span::DUMMY_SP;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraintIndex,\n     constraints::{OutlivesConstraint, OutlivesConstraintSet},\n     type_check::Locations,", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraints/graph.rs"}, {"sha": "98378a98684e2f0ff2589631a42988a14bcc598a", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use std::fmt;\n use std::ops::Index;\n \n-use crate::borrow_check::type_check::Locations;\n+use crate::type_check::Locations;\n \n crate mod graph;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/constraints/mod.rs"}, {"sha": "f6e4e3888418fb22d848f7b63f1ebf6a7b13a5ec", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/consumers.rs"}, {"sha": "cb440b2cbb9f4ed582fad09018ffa3551ebb0d97", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "renamed", "additions": 101, "deletions": 8, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,17 +1,110 @@\n-use rustc_middle::mir::{self, Body, Location, Place};\n-use rustc_middle::ty::RegionVid;\n-use rustc_middle::ty::TyCtxt;\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::{self, BasicBlock, Body, Location, Place};\n+use rustc_middle::ty::RegionVid;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_mir::dataflow::impls::{EverInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir::dataflow::ResultsVisitable;\n+use rustc_mir::dataflow::{self, fmt::DebugWithContext, GenKill};\n+use rustc_mir::dataflow::{Analysis, Direction, Results};\n+use std::fmt;\n+use std::iter;\n \n-use crate::borrow_check::{\n+use crate::{\n     places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext, ToRegionVid,\n };\n-use crate::dataflow::{self, fmt::DebugWithContext, GenKill};\n \n-use std::fmt;\n-use std::iter;\n+/// A tuple with named fields that can hold either the results or the transient state of the\n+/// dataflow analyses used by the borrow checker.\n+#[derive(Debug)]\n+pub struct BorrowckAnalyses<B, U, E> {\n+    pub borrows: B,\n+    pub uninits: U,\n+    pub ever_inits: E,\n+}\n+\n+/// The results of the dataflow analyses used by the borrow checker.\n+pub type BorrowckResults<'mir, 'tcx> = BorrowckAnalyses<\n+    Results<'tcx, Borrows<'mir, 'tcx>>,\n+    Results<'tcx, MaybeUninitializedPlaces<'mir, 'tcx>>,\n+    Results<'tcx, EverInitializedPlaces<'mir, 'tcx>>,\n+>;\n+\n+/// The transient state of the dataflow analyses used by the borrow checker.\n+pub type BorrowckFlowState<'mir, 'tcx> =\n+    <BorrowckResults<'mir, 'tcx> as ResultsVisitable<'tcx>>::FlowState;\n+\n+macro_rules! impl_visitable {\n+    ( $(\n+        $T:ident { $( $field:ident : $A:ident ),* $(,)? }\n+    )* ) => { $(\n+        impl<'tcx, $($A),*, D: Direction> ResultsVisitable<'tcx> for $T<$( Results<'tcx, $A> ),*>\n+        where\n+            $( $A: Analysis<'tcx, Direction = D>, )*\n+        {\n+            type Direction = D;\n+            type FlowState = $T<$( $A::Domain ),*>;\n+\n+            fn new_flow_state(&self, body: &mir::Body<'tcx>) -> Self::FlowState {\n+                $T {\n+                    $( $field: self.$field.analysis.bottom_value(body) ),*\n+                }\n+            }\n+\n+            fn reset_to_block_entry(\n+                &self,\n+                state: &mut Self::FlowState,\n+                block: BasicBlock,\n+            ) {\n+                $( state.$field.clone_from(&self.$field.entry_set_for_block(block)); )*\n+            }\n+\n+            fn reconstruct_before_statement_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                stmt: &mir::Statement<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_before_statement_effect(&mut state.$field, stmt, loc); )*\n+            }\n+\n+            fn reconstruct_statement_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                stmt: &mir::Statement<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_statement_effect(&mut state.$field, stmt, loc); )*\n+            }\n+\n+            fn reconstruct_before_terminator_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                term: &mir::Terminator<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_before_terminator_effect(&mut state.$field, term, loc); )*\n+            }\n+\n+            fn reconstruct_terminator_effect(\n+                &self,\n+                state: &mut Self::FlowState,\n+                term: &mir::Terminator<'tcx>,\n+                loc: Location,\n+            ) {\n+                $( self.$field.analysis\n+                    .apply_terminator_effect(&mut state.$field, term, loc); )*\n+            }\n+        }\n+    )* }\n+}\n+\n+impl_visitable! {\n+    BorrowckAnalyses { borrows: B, uninits: U, ever_inits: E }\n+}\n \n rustc_index::newtype_index! {\n     pub struct BorrowIndex {", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs"}, {"sha": "689ec249a2fb4f5c708fc3ffa1e244483a3fe97c", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/def_use.rs"}, {"sha": "76e779bfec608d25279bd40f4912cedb0e530332", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -14,8 +14,8 @@ use rustc_traits::{type_op_ascribe_user_type_with_span, type_op_prove_predicate_\n use std::fmt;\n use std::rc::Rc;\n \n-use crate::borrow_check::region_infer::values::RegionElement;\n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::region_infer::values::RegionElement;\n+use crate::MirBorrowckCtxt;\n \n #[derive(Clone)]\n crate struct UniverseInfo<'tcx>(UniverseInfoInner<'tcx>);", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/bound_region_errors.rs"}, {"sha": "8f6181f410df46e2c255ee34f9c5a32628cdbca7", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -15,11 +15,11 @@ use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n-use crate::dataflow::drop_flag_effects;\n-use crate::dataflow::indexes::{MoveOutIndex, MovePathIndex};\n-use crate::util::borrowck_errors;\n+use crate::borrowck_errors;\n+use rustc_mir::dataflow::drop_flag_effects;\n+use rustc_mir::dataflow::move_paths::{MoveOutIndex, MovePathIndex};\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n     InitializationRequiringAction, MirBorrowckCtxt, PrefixSet, WriteKind,\n };\n@@ -49,7 +49,7 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(in crate::borrow_check) fn report_use_of_moved_or_uninitialized(\n+    pub(crate) fn report_use_of_moved_or_uninitialized(\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n@@ -441,7 +441,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    pub(in crate::borrow_check) fn report_move_out_while_borrowed(\n+    pub(crate) fn report_move_out_while_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    pub(in crate::borrow_check) fn report_use_while_mutably_borrowed(\n+    pub(crate) fn report_use_while_mutably_borrowed(\n         &mut self,\n         location: Location,\n         (place, _span): (Place<'tcx>, Span),\n@@ -535,7 +535,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(in crate::borrow_check) fn report_conflicting_borrow(\n+    pub(crate) fn report_conflicting_borrow(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -798,7 +798,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n     /// mutable (via `a.u.s.b`) [E0502]\n     /// ```\n-    pub(in crate::borrow_check) fn describe_place_for_conflicting_borrow(\n+    pub(crate) fn describe_place_for_conflicting_borrow(\n         &self,\n         first_borrowed_place: Place<'tcx>,\n         second_borrowed_place: Place<'tcx>,\n@@ -875,7 +875,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// short a lifetime. (But sometimes it is more useful to report\n     /// it as a more direct conflict between the execution of a\n     /// `Drop::drop` with an aliasing borrow.)\n-    pub(in crate::borrow_check) fn report_borrowed_value_does_not_live_long_enough(\n+    pub(crate) fn report_borrowed_value_does_not_live_long_enough(\n         &mut self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n@@ -1634,7 +1634,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         (result, reinits_reachable)\n     }\n \n-    pub(in crate::borrow_check) fn report_illegal_mutation_of_borrowed(\n+    pub(crate) fn report_illegal_mutation_of_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -1695,7 +1695,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some((method_did, method_substs)),\n         ) = (\n             &self.body[loan.reserve_location.block].terminator,\n-            crate::util::find_self_call(\n+            rustc_mir::util::find_self_call(\n                 tcx,\n                 self.body,\n                 loan.assigned_place.local,\n@@ -1726,7 +1726,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// assigned; `err_place` is a place providing a reason why\n     /// `place` is not mutable (e.g., the non-`mut` local `x` in an\n     /// assignment to `x.f`).\n-    pub(in crate::borrow_check) fn report_illegal_reassignment(\n+    pub(crate) fn report_illegal_reassignment(\n         &mut self,\n         _location: Location,\n         (place, span): (Place<'tcx>, Span),\n@@ -2226,7 +2226,7 @@ enum AnnotatedBorrowFnSignature<'tcx> {\n impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n     /// Annotate the provided diagnostic with information about borrow from the fn signature that\n     /// helps explain.\n-    pub(in crate::borrow_check) fn emit(\n+    pub(crate) fn emit(\n         &self,\n         cx: &mut MirBorrowckCtxt<'_, 'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs"}, {"sha": "2d12a682e7ae6d9c5c598fa1834b4b4b75f6b2e4", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -15,16 +15,16 @@ use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n-use crate::borrow_check::region_infer::BlameConstraint;\n-use crate::borrow_check::{\n+use crate::region_infer::BlameConstraint;\n+use crate::{\n     borrow_set::BorrowData, nll::ConstraintDescription, region_infer::Cause, MirBorrowckCtxt,\n     WriteKind,\n };\n \n use super::{find_use, RegionName, UseSpans};\n \n #[derive(Debug)]\n-pub(in crate::borrow_check) enum BorrowExplanation {\n+pub(crate) enum BorrowExplanation {\n     UsedLater(LaterUseKind, Span, Option<Span>),\n     UsedLaterInLoop(LaterUseKind, Span, Option<Span>),\n     UsedLaterWhenDropped {\n@@ -43,7 +43,7 @@ pub(in crate::borrow_check) enum BorrowExplanation {\n }\n \n #[derive(Clone, Copy, Debug)]\n-pub(in crate::borrow_check) enum LaterUseKind {\n+pub(crate) enum LaterUseKind {\n     TraitCapture,\n     ClosureCapture,\n     Call,\n@@ -52,13 +52,13 @@ pub(in crate::borrow_check) enum LaterUseKind {\n }\n \n impl BorrowExplanation {\n-    pub(in crate::borrow_check) fn is_explained(&self) -> bool {\n+    pub(crate) fn is_explained(&self) -> bool {\n         match self {\n             BorrowExplanation::Unexplained => false,\n             _ => true,\n         }\n     }\n-    pub(in crate::borrow_check) fn add_explanation_to_diagnostic<'tcx>(\n+    pub(crate) fn add_explanation_to_diagnostic<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n@@ -267,7 +267,7 @@ impl BorrowExplanation {\n             _ => {}\n         }\n     }\n-    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic(\n+    pub(crate) fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         category: &ConstraintCategory,\n@@ -326,7 +326,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///   - second half is the place being accessed\n     ///\n     /// [d]: https://rust-lang.github.io/rfcs/2094-nll.html#leveraging-intuition-framing-errors-in-terms-of-points\n-    pub(in crate::borrow_check) fn explain_why_borrow_contains_point(\n+    pub(crate) fn explain_why_borrow_contains_point(\n         &self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs"}, {"sha": "ab4536f00fc4289d702989625a8ff46b44b60b5c", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n use std::rc::Rc;\n \n-use crate::borrow_check::{\n+use crate::{\n     def_use::{self, DefUse},\n     nll::ToRegionVid,\n     region_infer::{Cause, RegionInferenceContext},", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/find_use.rs"}, {"sha": "980894d6b4d0f5ee26d79f605107e47324b6abbd", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n+use rustc_mir::dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::{\n     hygiene::{DesugaringKind, ForLoopLoc},\n     symbol::sym,\n@@ -21,7 +22,6 @@ use rustc_target::abi::VariantIdx;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n-use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n mod find_use;\n mod outlives_suggestion;\n@@ -899,9 +899,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             kind: TerminatorKind::Call { fn_span, from_hir_call, .. }, ..\n         }) = &self.body[location.block].terminator\n         {\n-            let (method_did, method_substs) = if let Some(info) =\n-                crate::util::find_self_call(self.infcx.tcx, &self.body, target_temp, location.block)\n-            {\n+            let (method_did, method_substs) = if let Some(info) = rustc_mir::util::find_self_call(\n+                self.infcx.tcx,\n+                &self.body,\n+                target_temp,\n+                location.block,\n+            ) {\n                 info\n             } else {\n                 return normal_ret;", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs"}, {"sha": "dd4886312da37a85c5b4371d361743b9f02d9016", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -2,16 +2,16 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n+use rustc_mir::dataflow::move_paths::{\n+    IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n+};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n-use crate::borrow_check::diagnostics::UseSpans;\n-use crate::borrow_check::prefixes::PrefixSet;\n-use crate::borrow_check::MirBorrowckCtxt;\n-use crate::dataflow::move_paths::{\n-    IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n-};\n+use crate::diagnostics::UseSpans;\n+use crate::prefixes::PrefixSet;\n+use crate::MirBorrowckCtxt;\n \n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs"}, {"sha": "b3578afbbb6354dbc9573e471b76039ad8884c3d", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -14,10 +14,10 @@ use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n \n-use crate::borrow_check::diagnostics::BorrowedContentSource;\n-use crate::borrow_check::MirBorrowckCtxt;\n-use crate::util::collect_writes::FindAssignments;\n+use crate::diagnostics::BorrowedContentSource;\n+use crate::MirBorrowckCtxt;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_mir::util::collect_writes::FindAssignments;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs"}, {"sha": "9de0c62f186c0f70ebb64880577e7fb55d39091c", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,16 +1,14 @@\n //! Contains utilities for generating suggestions for borrowck errors related to unsatisfied\n //! outlives constraints.\n \n-use std::collections::BTreeMap;\n-\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use rustc_middle::ty::RegionVid;\n-use tracing::debug;\n-\n use smallvec::SmallVec;\n+use std::collections::BTreeMap;\n+use tracing::debug;\n \n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::MirBorrowckCtxt;\n \n use super::{ErrorConstraintInfo, RegionName, RegionNameSource};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/outlives_suggestion.rs"}, {"sha": "57d2a3c5ce91bba441d81ad723ddcc02f02788fb", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -11,10 +11,10 @@ use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{BytePos, Span};\n \n-use crate::util::borrowck_errors;\n+use crate::borrowck_errors;\n \n-use crate::borrow_check::region_infer::BlameConstraint;\n-use crate::borrow_check::{\n+use crate::region_infer::BlameConstraint;\n+use crate::{\n     nll::ConstraintDescription,\n     region_infer::{values::RegionElement, TypeTest},\n     universal_regions::DefiningTy,\n@@ -152,7 +152,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     }\n \n     /// Produces nice borrowck error diagnostics for all the errors collected in `nll_errors`.\n-    pub(in crate::borrow_check) fn report_region_errors(&mut self, nll_errors: RegionErrors<'tcx>) {\n+    pub(crate) fn report_region_errors(&mut self, nll_errors: RegionErrors<'tcx>) {\n         // Iterate through all the errors, producing a diagnostic for each one. The diagnostics are\n         // buffered in the `MirBorrowckCtxt`.\n \n@@ -265,7 +265,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// Here we would be invoked with `fr = 'a` and `outlived_fr = `'b`.\n-    pub(in crate::borrow_check) fn report_region_error(\n+    pub(crate) fn report_region_error(\n         &mut self,\n         fr: RegionVid,\n         fr_origin: NllRegionVariableOrigin,", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs"}, {"sha": "5edb52b0b650dca370cbced4b8c34a86a2d9def3", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n-use crate::borrow_check::{nll::ToRegionVid, universal_regions::DefiningTy, MirBorrowckCtxt};\n+use crate::{nll::ToRegionVid, universal_regions::DefiningTy, MirBorrowckCtxt};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs"}, {"sha": "00f62806753556f477aec00a6280a662d27ba28b", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,5 +1,5 @@\n-use crate::borrow_check::Upvar;\n-use crate::borrow_check::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n+use crate::Upvar;\n+use crate::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/borrow_check/diagnostics/var_name.rs"}, {"sha": "ed3f846e4adc9d5024c63435294783b8c5b06c24", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "renamed", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,10 +1,11 @@\n-use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::{BorrowIndex, MovePathIndex};\n+use crate::location::{LocationIndex, LocationTable};\n+use crate::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusFacts;\n use polonius_engine::Atom;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::Local;\n use rustc_middle::ty::{RegionVid, TyCtxt};\n+use rustc_mir::dataflow::move_paths::MovePathIndex;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};\n@@ -100,12 +101,6 @@ impl Atom for LocationIndex {\n     }\n }\n \n-impl Atom for MovePathIndex {\n-    fn index(self) -> usize {\n-        Idx::index(self)\n-    }\n-}\n-\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,", "previous_filename": "compiler/rustc_mir/src/borrow_check/facts.rs"}, {"sha": "016fe0bb6dedffbe9ff419991993903f2c5cbde4", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -7,12 +7,10 @@ use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n use std::iter;\n \n-use crate::dataflow::indexes::BorrowIndex;\n-\n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, path_utils::*, AccessDepth,\n-    Activation, ArtificialField, Deep, JustWrite, LocalMutationIsAllowed, MutateMode, Read,\n-    ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteAndRead, WriteKind,\n+    Activation, ArtificialField, BorrowIndex, Deep, JustWrite, LocalMutationIsAllowed, MutateMode,\n+    Read, ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteAndRead, WriteKind,\n };\n \n pub(super) fn generate_invalidates<'tcx>(", "previous_filename": "compiler/rustc_mir/src/borrow_check/invalidation.rs"}, {"sha": "9fe3d79e4ed09582f27a1045e4b050118112cffa", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "renamed", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,5 +1,22 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n+#![feature(bool_to_option)]\n+#![feature(box_patterns)]\n+#![feature(const_panic)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(min_specialization)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n+\n+#[macro_use]\n+extern crate rustc_middle;\n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n@@ -29,14 +46,13 @@ use std::iter;\n use std::mem;\n use std::rc::Rc;\n \n-use crate::dataflow;\n-use crate::dataflow::impls::{\n-    Borrows, EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n+use rustc_mir::dataflow::impls::{\n+    EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n };\n-use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n-use crate::dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{Analysis, BorrowckFlowState as Flows, BorrowckResults};\n+use rustc_mir::dataflow::move_paths::{InitIndex, MoveOutIndex, MovePathIndex};\n+use rustc_mir::dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n+use rustc_mir::dataflow::Analysis;\n+use rustc_mir::dataflow::MoveDataParamEnv;\n \n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n@@ -47,9 +63,10 @@ use facts::AllFacts;\n use self::path_utils::*;\n \n mod borrow_set;\n+mod borrowck_errors;\n mod constraint_generation;\n mod constraints;\n-pub mod consumers;\n+mod dataflow;\n mod def_use;\n mod diagnostics;\n mod facts;\n@@ -67,15 +84,19 @@ mod type_check;\n mod universal_regions;\n mod used_muts;\n \n-crate use borrow_set::{BorrowData, BorrowSet};\n-crate use nll::{PoloniusOutput, ToRegionVid};\n-crate use place_ext::PlaceExt;\n-crate use places_conflict::{places_conflict, PlaceConflictBias};\n-crate use region_infer::RegionInferenceContext;\n+// A public API provided for the Rust compiler consumers.\n+pub mod consumers;\n+\n+use borrow_set::{BorrowData, BorrowSet};\n+use dataflow::{BorrowIndex, BorrowckFlowState as Flows, BorrowckResults, Borrows};\n+use nll::{PoloniusOutput, ToRegionVid};\n+use place_ext::PlaceExt;\n+use places_conflict::{places_conflict, PlaceConflictBias};\n+use region_infer::RegionInferenceContext;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n-crate struct Upvar<'tcx> {\n+struct Upvar<'tcx> {\n     place: CapturedPlace<'tcx>,\n \n     /// If true, the capture is behind a reference.\n@@ -352,7 +373,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     mbcx.report_move_errors(move_errors);\n \n-    dataflow::visit_results(\n+    rustc_mir::dataflow::visit_results(\n         &body,\n         traversal::reverse_postorder(&body).map(|(bb, _)| bb),\n         &results,\n@@ -495,8 +516,8 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n     pub location_table: LocationTable,\n }\n \n-crate struct MirBorrowckCtxt<'cx, 'tcx> {\n-    crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n+struct MirBorrowckCtxt<'cx, 'tcx> {\n+    infcx: &'cx InferCtxt<'cx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     body: &'cx Body<'tcx>,\n     move_data: &'cx MoveData<'tcx>,\n@@ -594,7 +615,7 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> rustc_mir::dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn visit_statement_before_primary_effect(\n@@ -2344,7 +2365,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n+    fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n }", "previous_filename": "compiler/rustc_mir/src/borrow_check/mod.rs"}, {"sha": "d378a2cbea3e19dedeb5c1aead21582dab987dd5", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/location.rs"}, {"sha": "2e2578df01146aca4fce8335ac4dc3bd10e58be3", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/member_constraints.rs"}, {"sha": "d40990d4676bcf4ad9e38ae8d1f0160cae1795a8", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -20,13 +20,13 @@ use std::str::FromStr;\n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::{InitKind, InitLocation, MoveData};\n-use crate::dataflow::ResultsCursor;\n-use crate::util as mir_util;\n-use crate::util::pretty;\n+use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir::dataflow::move_paths::{InitKind, InitLocation, MoveData};\n+use rustc_mir::dataflow::ResultsCursor;\n+use rustc_mir::util as mir_util;\n+use rustc_mir::util::pretty;\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet,\n     constraint_generation,\n     diagnostics::RegionErrors,\n@@ -56,7 +56,7 @@ crate struct NllOutput<'tcx> {\n /// Rewrites the regions in the MIR to use NLL variables, also scraping out the set of universal\n /// regions (e.g., region parameters) declared on the function. That set will need to be given to\n /// `compute_regions`.\n-pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n+pub(crate) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n@@ -155,7 +155,7 @@ fn populate_polonius_move_facts(\n /// Computes the (non-lexical) regions from the input MIR.\n ///\n /// This may result in errors being reported.\n-pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n+pub(crate) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,", "previous_filename": "compiler/rustc_mir/src/borrow_check/nll.rs"}, {"sha": "d5d00b467eeed2bab3184a8724821b470edd9902", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,8 +1,8 @@\n-use crate::borrow_check::borrow_set::{BorrowData, BorrowSet, TwoPhaseActivation};\n-use crate::borrow_check::places_conflict;\n-use crate::borrow_check::AccessDepth;\n-use crate::borrow_check::Upvar;\n-use crate::dataflow::indexes::BorrowIndex;\n+use crate::borrow_set::{BorrowData, BorrowSet, TwoPhaseActivation};\n+use crate::places_conflict;\n+use crate::AccessDepth;\n+use crate::BorrowIndex;\n+use crate::Upvar;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::BorrowKind;\n use rustc_middle::mir::{BasicBlock, Body, Field, Location, Place, PlaceRef, ProjectionElem};", "previous_filename": "compiler/rustc_mir/src/borrow_check/path_utils.rs"}, {"sha": "83ff1595b0be44031dd044b5c2ba6d50dc372a22", "filename": "compiler/rustc_borrowck/src/place_ext.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,4 +1,4 @@\n-use crate::borrow_check::borrow_set::LocalsStateAtExit;\n+use crate::borrow_set::LocalsStateAtExit;\n use rustc_hir as hir;\n use rustc_middle::mir::ProjectionElem;\n use rustc_middle::mir::{Body, Mutability, Place};", "previous_filename": "compiler/rustc_mir/src/borrow_check/place_ext.rs"}, {"sha": "773e9e90b0c6be85cfeebb0a2f788c1c17b3c30d", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,6 +1,6 @@\n-use crate::borrow_check::ArtificialField;\n-use crate::borrow_check::Overlap;\n-use crate::borrow_check::{AccessDepth, Deep, Shallow};\n+use crate::ArtificialField;\n+use crate::Overlap;\n+use crate::{AccessDepth, Deep, Shallow};\n use rustc_hir as hir;\n use rustc_middle::mir::{Body, BorrowKind, Local, Place, PlaceElem, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/borrow_check/places_conflict.rs"}, {"sha": "bdf2becb711264eff522a8cbe962ea5db3888cc1", "filename": "compiler/rustc_borrowck/src/prefixes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/prefixes.rs"}, {"sha": "cfd3acb6bdebdf78a5b875ad7f9443ce6d438a08", "filename": "compiler/rustc_borrowck/src/region_infer/dump_mir.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -4,7 +4,7 @@\n //! context internal state.\n \n use super::{OutlivesConstraint, RegionInferenceContext};\n-use crate::borrow_check::type_check::Locations;\n+use crate::type_check::Locations;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::TyCtxt;\n use std::io::{self, Write};", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/dump_mir.rs"}, {"sha": "95048d50f117f733e4072615efc1ca3e740cd13c", "filename": "compiler/rustc_borrowck/src/region_infer/graphviz.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -6,7 +6,7 @@ use std::borrow::Cow;\n use std::io::{self, Write};\n \n use super::*;\n-use crate::borrow_check::constraints::OutlivesConstraint;\n+use crate::constraints::OutlivesConstraint;\n use rustc_graphviz as dot;\n \n impl<'tcx> RegionInferenceContext<'tcx> {", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/graphviz.rs"}, {"sha": "48e45a9b1ce72e7f1559df69e847f627d7bb4e0c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::{\n         graph::NormalConstraintGraph, ConstraintSccIndex, OutlivesConstraint, OutlivesConstraintSet,\n     },\n@@ -132,33 +132,33 @@ pub(crate) struct AppliedMemberConstraint {\n     ///\n     /// The vector if `AppliedMemberConstraint` elements is kept sorted\n     /// by this field.\n-    pub(in crate::borrow_check) member_region_scc: ConstraintSccIndex,\n+    pub(crate) member_region_scc: ConstraintSccIndex,\n \n     /// The \"best option\" that `apply_member_constraint` found -- this was\n     /// added as an \"ad-hoc\" lower-bound to `member_region_scc`.\n-    pub(in crate::borrow_check) min_choice: ty::RegionVid,\n+    pub(crate) min_choice: ty::RegionVid,\n \n     /// The \"member constraint index\" -- we can find out details about\n     /// the constraint from\n     /// `set.member_constraints[member_constraint_index]`.\n-    pub(in crate::borrow_check) member_constraint_index: NllMemberConstraintIndex,\n+    pub(crate) member_constraint_index: NllMemberConstraintIndex,\n }\n \n pub(crate) struct RegionDefinition<'tcx> {\n     /// What kind of variable is this -- a free region? existential\n     /// variable? etc. (See the `NllRegionVariableOrigin` for more\n     /// info.)\n-    pub(in crate::borrow_check) origin: NllRegionVariableOrigin,\n+    pub(crate) origin: NllRegionVariableOrigin,\n \n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n     /// forall-quantifiers like `for<'a> { 'a = 'b }`, we would create\n     /// the variable for `'a` in a fresh universe that extends ROOT.\n-    pub(in crate::borrow_check) universe: ty::UniverseIndex,\n+    pub(crate) universe: ty::UniverseIndex,\n \n     /// If this is 'static or an early-bound region, then this is\n     /// `Some(X)` where `X` is the name of the region.\n-    pub(in crate::borrow_check) external_name: Option<ty::Region<'tcx>>,\n+    pub(crate) external_name: Option<ty::Region<'tcx>>,\n }\n \n /// N.B., the variants in `Cause` are intentionally ordered. Lower\n@@ -245,7 +245,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// The `outlives_constraints` and `type_tests` are an initial set\n     /// of constraints produced by the MIR type check.\n-    pub(in crate::borrow_check) fn new(\n+    pub(crate) fn new(\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n@@ -534,7 +534,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Once region solving has completed, this function will return\n     /// the member constraints that were applied to the value of a given\n     /// region `r`. See `AppliedMemberConstraint`.\n-    pub(in crate::borrow_check) fn applied_member_constraints(\n+    pub(crate) fn applied_member_constraints(\n         &self,\n         r: impl ToRegionVid,\n     ) -> &[AppliedMemberConstraint] {\n@@ -1088,7 +1088,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///   include the CFG anyhow.\n     /// - For each `end('x)` element in `'r`, compute the mutual LUB, yielding\n     ///   a result `'y`.\n-    pub(in crate::borrow_check) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    pub(crate) fn universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(\"universal_upper_bound(r={:?}={})\", r, self.region_value_str(r));\n \n         // Find the smallest universal region that contains all other\n@@ -1115,7 +1115,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Therefore, this method should only be used in diagnostic code,\n     /// where displaying *some* named universal region is better than\n     /// falling back to 'static.\n-    pub(in crate::borrow_check) fn approx_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n+    pub(crate) fn approx_universal_upper_bound(&self, r: RegionVid) -> RegionVid {\n         debug!(\"approx_universal_upper_bound(r={:?}={})\", r, self.region_value_str(r));\n \n         // Find the smallest universal region that contains all other", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs"}, {"sha": "39b83e5043101bbde09f54f02f7f1862dc3c7b43", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// which has no `external_name` in which case we use `'empty` as the\n     /// region to pass to `infer_opaque_definition_from_instantiation`.\n     #[instrument(skip(self, infcx))]\n-    pub(in crate::borrow_check) fn infer_opaque_types(\n+    pub(crate) fn infer_opaque_types(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n@@ -105,7 +105,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// that the regions produced are in fact equal to the named region they are\n     /// replaced with. This is fine because this function is only to improve the\n     /// region names in error messages.\n-    pub(in crate::borrow_check) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n+    pub(crate) fn name_regions<T>(&self, tcx: TyCtxt<'tcx>, ty: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs"}, {"sha": "056907dcb16563a5daf40ddffa64485e97d96a3d", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,5 +1,5 @@\n-use crate::borrow_check::constraints::ConstraintSccIndex;\n-use crate::borrow_check::RegionInferenceContext;\n+use crate::constraints::ConstraintSccIndex;\n+use crate::RegionInferenceContext;\n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::vec_graph::VecGraph;", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/reverse_sccs.rs"}, {"sha": "2864abde0022c15e2c54e60ce4d80e9bcfd66699", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/region_infer/values.rs"}, {"sha": "9377473befe32c011b7c92d8374972222ae3c666", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "previous_filename": "compiler/rustc_mir/src/borrow_check/renumber.rs"}, {"sha": "7a8c0a3da1f1f4854370e6982b9243463fe3a69a", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -8,7 +8,7 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOpOutput};\n use rustc_trait_selection::traits::query::Fallible;\n \n-use crate::borrow_check::diagnostics::{ToUniverseInfo, UniverseInfo};\n+use crate::diagnostics::{ToUniverseInfo, UniverseInfo};\n \n use super::{Locations, NormalizeLocation, TypeChecker};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/canonical.rs"}, {"sha": "b020746848535899733852039c543ac07d71164c", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::DUMMY_SP;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraint,\n     nll::ToRegionVid,\n     region_infer::TypeTest,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/constraint_conversion.rs"}, {"sha": "e1e8f6a61adb817038607d3c103394d97c29e531", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -13,7 +13,7 @@ use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n \n-use crate::borrow_check::{\n+use crate::{\n     nll::ToRegionVid,\n     type_check::constraint_conversion,\n     type_check::{Locations, MirTypeckRegionConstraints},\n@@ -55,7 +55,7 @@ type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n type NormalizedInputsAndOutput<'tcx> = Vec<Ty<'tcx>>;\n \n crate struct CreateResult<'tcx> {\n-    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n+    crate universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate region_bound_pairs: RegionBoundPairs<'tcx>,\n     crate normalized_inputs_and_output: NormalizedInputsAndOutput<'tcx>,\n }", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/free_region_relations.rs"}, {"sha": "9d6f6f60a94f91976edabb4f5c5174614750cb49", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -7,16 +7,15 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n+use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::{self, Ty};\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n-\n-use rustc_index::vec::Idx;\n use rustc_span::Span;\n+use rustc_trait_selection::traits::query::normalize::AtExt;\n \n-use crate::borrow_check::universal_regions::UniversalRegions;\n+use crate::universal_regions::UniversalRegions;\n \n use super::{Locations, TypeChecker};\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs"}, {"sha": "8b74abd94c07711ee3f6a541e8bb546a35ecd274", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -3,8 +3,8 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location};\n \n-use crate::borrow_check::def_use::{self, DefUse};\n-use crate::borrow_check::region_infer::values::{PointIndex, RegionValueElements};\n+use crate::def_use::{self, DefUse};\n+use crate::region_infer::values::{PointIndex, RegionValueElements};\n \n /// A map that cross references each local with the locations where it\n /// is defined (assigned), used, or dropped. Used during liveness", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/local_use_map.rs"}, {"sha": "265c14bb28676c961685e00811f33f0c4e475696", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -3,11 +3,11 @@ use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::rc::Rc;\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::ResultsCursor;\n+use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir::dataflow::move_paths::MoveData;\n+use rustc_mir::dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     constraints::OutlivesConstraintSet,\n     facts::{AllFacts, AllFactsExt},\n     location::LocationTable,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/mod.rs"}, {"sha": "7c087d38eb748d1095ad352383b17065fdc86d5e", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,10 +1,9 @@\n-use crate::borrow_check::def_use::{self, DefUse};\n-use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::MovePathIndex;\n-use crate::dataflow::move_paths::{LookupResult, MoveData};\n+use crate::def_use::{self, DefUse};\n+use crate::location::{LocationIndex, LocationTable};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location, Place};\n use rustc_middle::ty::subst::GenericArg;\n+use rustc_mir::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n \n use super::TypeChecker;\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/polonius.rs"}, {"sha": "c7d776bfde0d4b552eff940998580f4d76bc4317", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -8,12 +8,11 @@ use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use std::rc::Rc;\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::indexes::MovePathIndex;\n-use crate::dataflow::move_paths::{HasMoveData, MoveData};\n-use crate::dataflow::ResultsCursor;\n+use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir::dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex};\n+use rustc_mir::dataflow::ResultsCursor;\n \n-use crate::borrow_check::{\n+use crate::{\n     region_infer::values::{self, PointIndex, RegionValueElements},\n     type_check::liveness::local_use_map::LocalUseMap,\n     type_check::liveness::polonius,", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/trace.rs"}, {"sha": "63075d066a6dc8718ef526e0dd8bbb98b152f26d", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -41,14 +41,14 @@ use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::Fallible;\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations};\n \n-use crate::dataflow::impls::MaybeInitializedPlaces;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::ResultsCursor;\n-use crate::transform::{\n+use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir::dataflow::move_paths::MoveData;\n+use rustc_mir::dataflow::ResultsCursor;\n+use rustc_mir::transform::{\n     check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n };\n \n-use crate::borrow_check::{\n+use crate::{\n     borrow_set::BorrowSet,\n     constraints::{OutlivesConstraint, OutlivesConstraintSet},\n     diagnostics::UniverseInfo,\n@@ -68,7 +68,7 @@ use crate::borrow_check::{\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n-        $crate::borrow_check::type_check::mirbug(\n+        $crate::type_check::mirbug(\n             $context.tcx(),\n             $context.last_span,\n             &format!(\n@@ -887,7 +887,7 @@ struct BorrowCheckContext<'a, 'tcx> {\n \n crate struct MirTypeckResults<'tcx> {\n     crate constraints: MirTypeckRegionConstraints<'tcx>,\n-    pub(in crate::borrow_check) universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n+    crate universal_region_relations: Frozen<UniversalRegionRelations<'tcx>>,\n     crate opaque_type_values: VecMap<OpaqueTypeKey<'tcx>, Ty<'tcx>>,\n }\n ", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs"}, {"sha": "0b9c33ccb775a96ad7fe411259aaa6ba7bbd609e", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -5,9 +5,9 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n-use crate::borrow_check::constraints::OutlivesConstraint;\n-use crate::borrow_check::diagnostics::UniverseInfo;\n-use crate::borrow_check::type_check::{BorrowCheckContext, Locations};\n+use crate::constraints::OutlivesConstraint;\n+use crate::diagnostics::UniverseInfo;\n+use crate::type_check::{BorrowCheckContext, Locations};\n \n /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n ///", "previous_filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs"}, {"sha": "bebd19370299d00cdf360796c578638612f80312", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n use std::iter;\n \n-use crate::borrow_check::nll::ToRegionVid;\n+use crate::nll::ToRegionVid;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {", "previous_filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs"}, {"sha": "6022a9809502b2fc79b1e98f77f80884f657526c", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,11 +1,10 @@\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n     Local, Location, Place, Statement, StatementKind, Terminator, TerminatorKind,\n };\n \n-use rustc_data_structures::fx::FxHashSet;\n-\n-use crate::borrow_check::MirBorrowckCtxt;\n+use crate::MirBorrowckCtxt;\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Walks the MIR adding to the set of `used_mut` locals that will be ignored for the purposes", "previous_filename": "compiler/rustc_mir/src/borrow_check/used_muts.rs"}, {"sha": "970267d626cd82cca970e9f71be23c0b6ecd8cfc", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -14,6 +14,7 @@ rayon = { version = \"0.3.1\", package = \"rustc-rayon\" }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n+rustc_borrowck = { path = \"../rustc_borrowck\" }\n rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_parse = { path = \"../rustc_parse\" }"}, {"sha": "df03ff59f461ac2b129f489c5243a70f0c7c5c2c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -4,6 +4,7 @@ use crate::util;\n \n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n+use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n@@ -739,6 +740,7 @@ pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     proc_macro_decls::provide(providers);\n     rustc_middle::hir::provide(providers);\n     mir::provide(providers);\n+    mir_borrowck::provide(providers);\n     mir_build::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);"}, {"sha": "43c7b681e05f2209b6d47a951ea9a70f4a77ccee", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -8,30 +8,28 @@ doctest = false\n \n [dependencies]\n either = \"1.5.0\"\n-rustc_graphviz = { path = \"../rustc_graphviz\" }\n gsgdt = \"0.1.2\"\n itertools = \"0.9\"\n-tracing = \"0.1\"\n polonius-engine = \"0.13.0\"\n regex = \"1\"\n-rustc_middle = { path = \"../rustc_middle\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_apfloat = { path = \"../rustc_apfloat\" }\n+rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n-rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n-rustc_traits = { path = \"../rustc_traits\" }\n-rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_apfloat = { path = \"../rustc_apfloat\" }\n-smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n \n [dev-dependencies]\n coverage_test_macros = { path = \"src/transform/coverage/test_macros\" }"}, {"sha": "d4f8f994ae90414eecd838c3270574e5b8ecebd0", "filename": "compiler/rustc_mir/src/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fdrop_flag_effects.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -204,7 +204,7 @@ pub(crate) fn drop_flag_effects_for_location<'tcx, F>(\n     for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));\n }\n \n-pub(crate) fn for_location_inits<'tcx, F>(\n+pub fn for_location_inits<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     move_data: &MoveData<'tcx>,"}, {"sha": "0bf62db1adac9339af42840e17d841026b438356", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -50,8 +50,7 @@ pub use self::cursor::{ResultsCursor, ResultsRefCursor};\n pub use self::direction::{Backward, Direction, Forward};\n pub use self::engine::{Engine, Results};\n pub use self::lattice::{JoinSemiLattice, MeetSemiLattice};\n-pub use self::visitor::{visit_results, ResultsVisitor};\n-pub use self::visitor::{BorrowckFlowState, BorrowckResults};\n+pub use self::visitor::{visit_results, ResultsVisitable, ResultsVisitor};\n \n /// Define the domain of a dataflow problem.\n ///"}, {"sha": "84136c4d78cf1e495bd739b48b181a88936d6882", "filename": "compiler/rustc_mir/src/dataflow/framework/visitor.rs", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fvisitor.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,7 +1,6 @@\n use rustc_middle::mir::{self, BasicBlock, Location};\n \n use super::{Analysis, Direction, Results};\n-use crate::dataflow::impls::{borrows::Borrows, EverInitializedPlaces, MaybeUninitializedPlaces};\n \n /// Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the\n /// dataflow state at that location.\n@@ -186,95 +185,3 @@ where\n         self.analysis.apply_terminator_effect(state, term, loc);\n     }\n }\n-\n-/// A tuple with named fields that can hold either the results or the transient state of the\n-/// dataflow analyses used by the borrow checker.\n-#[derive(Debug)]\n-pub struct BorrowckAnalyses<B, U, E> {\n-    pub borrows: B,\n-    pub uninits: U,\n-    pub ever_inits: E,\n-}\n-\n-/// The results of the dataflow analyses used by the borrow checker.\n-pub type BorrowckResults<'mir, 'tcx> = BorrowckAnalyses<\n-    Results<'tcx, Borrows<'mir, 'tcx>>,\n-    Results<'tcx, MaybeUninitializedPlaces<'mir, 'tcx>>,\n-    Results<'tcx, EverInitializedPlaces<'mir, 'tcx>>,\n->;\n-\n-/// The transient state of the dataflow analyses used by the borrow checker.\n-pub type BorrowckFlowState<'mir, 'tcx> =\n-    <BorrowckResults<'mir, 'tcx> as ResultsVisitable<'tcx>>::FlowState;\n-\n-macro_rules! impl_visitable {\n-    ( $(\n-        $T:ident { $( $field:ident : $A:ident ),* $(,)? }\n-    )* ) => { $(\n-        impl<'tcx, $($A),*, D: Direction> ResultsVisitable<'tcx> for $T<$( Results<'tcx, $A> ),*>\n-        where\n-            $( $A: Analysis<'tcx, Direction = D>, )*\n-        {\n-            type Direction = D;\n-            type FlowState = $T<$( $A::Domain ),*>;\n-\n-            fn new_flow_state(&self, body: &mir::Body<'tcx>) -> Self::FlowState {\n-                $T {\n-                    $( $field: self.$field.analysis.bottom_value(body) ),*\n-                }\n-            }\n-\n-            fn reset_to_block_entry(\n-                &self,\n-                state: &mut Self::FlowState,\n-                block: BasicBlock,\n-            ) {\n-                $( state.$field.clone_from(&self.$field.entry_set_for_block(block)); )*\n-            }\n-\n-            fn reconstruct_before_statement_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                stmt: &mir::Statement<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_before_statement_effect(&mut state.$field, stmt, loc); )*\n-            }\n-\n-            fn reconstruct_statement_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                stmt: &mir::Statement<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_statement_effect(&mut state.$field, stmt, loc); )*\n-            }\n-\n-            fn reconstruct_before_terminator_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                term: &mir::Terminator<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_before_terminator_effect(&mut state.$field, term, loc); )*\n-            }\n-\n-            fn reconstruct_terminator_effect(\n-                &self,\n-                state: &mut Self::FlowState,\n-                term: &mir::Terminator<'tcx>,\n-                loc: Location,\n-            ) {\n-                $( self.$field.analysis\n-                    .apply_terminator_effect(&mut state.$field, term, loc); )*\n-            }\n-        }\n-    )* }\n-}\n-\n-impl_visitable! {\n-    BorrowckAnalyses { borrows: B, uninits: U, ever_inits: E }\n-}"}, {"sha": "020a7b188fd1339d64cd33388954ac4dd5ac8a77", "filename": "compiler/rustc_mir/src/dataflow/impls/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -21,13 +21,11 @@ use crate::dataflow::drop_flag_effects;\n use crate::dataflow::framework::SwitchIntEdgeEffects;\n \n mod borrowed_locals;\n-pub(super) mod borrows;\n mod init_locals;\n mod liveness;\n mod storage_liveness;\n \n pub use self::borrowed_locals::{MaybeBorrowedLocals, MaybeMutBorrowedLocals};\n-pub use self::borrows::Borrows;\n pub use self::init_locals::MaybeInitializedLocals;\n pub use self::liveness::MaybeLiveLocals;\n pub use self::storage_liveness::{MaybeRequiresStorage, MaybeStorageLive};"}, {"sha": "bb38f90a3ba63557266b2e610dc3986fbdb0a18d", "filename": "compiler/rustc_mir/src/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -5,9 +5,9 @@ use rustc_span::symbol::{sym, Symbol};\n \n pub(crate) use self::drop_flag_effects::*;\n pub use self::framework::{\n-    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, BorrowckFlowState,\n-    BorrowckResults, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results,\n-    ResultsCursor, ResultsRefCursor, ResultsVisitor, SwitchIntEdgeEffects,\n+    fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine, Forward,\n+    GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n+    ResultsVisitable, ResultsVisitor,\n };\n \n use self::move_paths::MoveData;\n@@ -18,15 +18,12 @@ pub mod impls;\n pub mod move_paths;\n \n pub(crate) mod indexes {\n-    pub(crate) use super::{\n-        impls::borrows::BorrowIndex,\n-        move_paths::{InitIndex, MoveOutIndex, MovePathIndex},\n-    };\n+    pub(crate) use super::move_paths::MovePathIndex;\n }\n \n pub struct MoveDataParamEnv<'tcx> {\n-    pub(crate) move_data: MoveData<'tcx>,\n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n+    pub move_data: MoveData<'tcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n }\n \n pub(crate) fn has_rustc_mir_with("}, {"sha": "699ec4bbff80fa788ad305ada8cc0c4c4f25c9ca", "filename": "compiler/rustc_mir/src/dataflow/move_paths/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -19,6 +19,12 @@ rustc_index::newtype_index! {\n     }\n }\n \n+impl polonius_engine::Atom for MovePathIndex {\n+    fn index(self) -> usize {\n+        rustc_index::vec::Idx::index(self)\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     pub struct MoveOutIndex {\n         DEBUG_FORMAT = \"mo{}\"\n@@ -276,7 +282,7 @@ impl fmt::Debug for Init {\n }\n \n impl Init {\n-    crate fn span<'tcx>(&self, body: &Body<'tcx>) -> Span {\n+    pub fn span<'tcx>(&self, body: &Body<'tcx>) -> Span {\n         match self.location {\n             InitLocation::Argument(local) => body.local_decls[local].source_info.span,\n             InitLocation::Statement(location) => body.source_info(location).span,\n@@ -338,12 +344,12 @@ impl MovePathLookup {\n \n #[derive(Debug)]\n pub struct IllegalMoveOrigin<'tcx> {\n-    pub(crate) location: Location,\n-    pub(crate) kind: IllegalMoveOriginKind<'tcx>,\n+    pub location: Location,\n+    pub kind: IllegalMoveOriginKind<'tcx>,\n }\n \n #[derive(Debug)]\n-pub(crate) enum IllegalMoveOriginKind<'tcx> {\n+pub enum IllegalMoveOriginKind<'tcx> {\n     /// Illegal move due to attempt to move from behind a reference.\n     BorrowedContent {\n         /// The place the reference refers to: if erroneous code was trying to"}, {"sha": "16dddc949df31e971fb456f67fd90a8c6c7278a3", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -4,40 +4,35 @@ Rust MIR: a lowered representation of Rust.\n \n */\n \n-#![feature(nll)]\n-#![feature(in_band_lifetimes)]\n #![feature(array_windows)]\n #![feature(assert_matches)]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n+#![feature(associated_type_defaults)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n+#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![feature(format_args_capture)]\n+#![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n-#![feature(never_type)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n-#![feature(trusted_len)]\n-#![feature(try_blocks)]\n-#![feature(associated_type_defaults)]\n-#![feature(stmt_expr_attributes)]\n-#![feature(trait_alias)]\n #![feature(option_get_or_insert_default)]\n #![feature(once_cell)]\n-#![feature(control_flow_enum)]\n-#![feature(try_reserve)]\n-#![feature(try_reserve_kind)]\n-#![recursion_limit = \"256\"]\n+#![feature(never_type)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(trait_alias)]\n+#![feature(trusted_len)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n \n #[macro_use]\n extern crate tracing;\n #[macro_use]\n extern crate rustc_middle;\n \n-mod borrow_check;\n pub mod const_eval;\n pub mod dataflow;\n pub mod interpret;\n@@ -46,13 +41,9 @@ mod shim;\n pub mod transform;\n pub mod util;\n \n-// A public API provided for the Rust compiler consumers.\n-pub use self::borrow_check::consumers;\n-\n use rustc_middle::ty::query::Providers;\n \n pub fn provide(providers: &mut Providers) {\n-    borrow_check::provide(providers);\n     const_eval::provide(providers);\n     shim::provide(providers);\n     transform::provide(providers);"}, {"sha": "6822ad2d7b5dd0d3e02f0f9a2029b407bd249839", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1058,7 +1058,7 @@ pub fn promote_candidates<'tcx>(\n \n /// This function returns `true` if the function being called in the array\n /// repeat expression is a `const` function.\n-crate fn is_const_fn_in_array_repeat_expression<'tcx>(\n+pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n     ccx: &ConstCx<'_, 'tcx>,\n     place: &Place<'tcx>,\n     body: &Body<'tcx>,"}, {"sha": "9c56fd722bda619d9da2c54104acf74999b2949b", "filename": "compiler/rustc_mir/src/util/collect_writes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fcollect_writes.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::mir::visit::PlaceContext;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{Body, Local, Location};\n \n-crate trait FindAssignments {\n+pub trait FindAssignments {\n     // Finds all statements that assign directly to local (i.e., X = ...)\n     // and returns their locations.\n     fn find_assignments(&self, local: Local) -> Vec<Location>;"}, {"sha": "8f9db6daba7336e0e161734d384f04e71d8954bc", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -1,5 +1,4 @@\n pub mod aggregate;\n-pub mod borrowck_errors;\n pub mod elaborate_drops;\n pub mod patch;\n pub mod storage;\n@@ -10,7 +9,7 @@ mod find_self_call;\n mod generic_graph;\n pub(crate) mod generic_graphviz;\n mod graphviz;\n-pub(crate) mod pretty;\n+pub mod pretty;\n pub(crate) mod spanview;\n \n pub use self::aggregate::expand_aggregate;"}, {"sha": "ec1aa5b476bb7df8c8ca723f3befb991d42b8b0d", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a61ccc38201a13c2549b20772daf15ce0e0309/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=31a61ccc38201a13c2549b20772daf15ce0e0309", "patch": "@@ -250,7 +250,7 @@ fn create_dump_file_with_basename(\n /// bit of MIR-related data. Used by `mir-dump`, but also by other\n /// bits of code (e.g., NLL inference) that dump graphviz data or\n /// other things, and hence takes the extension as an argument.\n-pub(crate) fn create_dump_file(\n+pub fn create_dump_file(\n     tcx: TyCtxt<'_>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,"}]}