{"sha": "10c50b140aa67f74a135e7a48ff6d954cc757cb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzUwYjE0MGFhNjdmNzRhMTM1ZTdhNDhmZjZkOTU0Y2M3NTdjYjg=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-16T04:52:40Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-30T08:10:24Z"}, "message": "Format & replace todos with 'fixme'", "tree": {"sha": "2dddde4014e887ef57a4be68f8c00a2816c22ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dddde4014e887ef57a4be68f8c00a2816c22ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c50b140aa67f74a135e7a48ff6d954cc757cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c50b140aa67f74a135e7a48ff6d954cc757cb8", "html_url": "https://github.com/rust-lang/rust/commit/10c50b140aa67f74a135e7a48ff6d954cc757cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c50b140aa67f74a135e7a48ff6d954cc757cb8/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9893d370c4c3b015698169d27d2833742441560", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9893d370c4c3b015698169d27d2833742441560", "html_url": "https://github.com/rust-lang/rust/commit/f9893d370c4c3b015698169d27d2833742441560"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "839eb475ee652dda617b7c617adb3c07670dbc0e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=10c50b140aa67f74a135e7a48ff6d954cc757cb8", "patch": "@@ -192,11 +192,11 @@ impl ModuleDef {\n             ModuleDef::Function(m) => Some(m.name(db)),\n             ModuleDef::Adt(m) => Some(m.name(db)),\n             ModuleDef::EnumVariant(m) => Some(m.name(db)),\n-            ModuleDef::Const(m) => {m.name(db)},\n-            ModuleDef::Static(m) => {m.name(db)},\n-            ModuleDef::Trait(m) => {Some(m.name(db))},\n-            ModuleDef::TypeAlias(m) => {Some(m.name(db))},\n-            ModuleDef::BuiltinType(m) => {Some(m.as_name())}\n+            ModuleDef::Const(m) => m.name(db),\n+            ModuleDef::Static(m) => m.name(db),\n+            ModuleDef::Trait(m) => Some(m.name(db)),\n+            ModuleDef::TypeAlias(m) => Some(m.name(db)),\n+            ModuleDef::BuiltinType(m) => Some(m.as_name()),\n         }\n     }\n \n@@ -205,13 +205,17 @@ impl ModuleDef {\n             ModuleDef::Module(m) => Into::<ModuleId>::into(m.clone()).resolver(db),\n             ModuleDef::Function(f) => Into::<FunctionId>::into(f.clone()).resolver(db),\n             ModuleDef::Adt(adt) => Into::<AdtId>::into(adt.clone()).resolver(db),\n-            ModuleDef::EnumVariant(ev) => Into::<GenericDefId>::into(Into::<GenericDef>::into(ev.clone())).resolver(db),\n-            ModuleDef::Const(c) => Into::<GenericDefId>::into(Into::<GenericDef>::into(c.clone())).resolver(db),\n+            ModuleDef::EnumVariant(ev) => {\n+                Into::<GenericDefId>::into(Into::<GenericDef>::into(ev.clone())).resolver(db)\n+            }\n+            ModuleDef::Const(c) => {\n+                Into::<GenericDefId>::into(Into::<GenericDef>::into(c.clone())).resolver(db)\n+            }\n             ModuleDef::Static(s) => Into::<StaticId>::into(s.clone()).resolver(db),\n             ModuleDef::Trait(t) => Into::<TraitId>::into(t.clone()).resolver(db),\n             ModuleDef::TypeAlias(t) => Into::<ModuleId>::into(t.module(db)).resolver(db),\n-            // TODO: This should be a resolver relative to `std`\n-            ModuleDef::BuiltinType(_t) => None?\n+            // FIXME: This should be a resolver relative to `std/core`\n+            ModuleDef::BuiltinType(_t) => None?,\n         })\n     }\n }"}, {"sha": "18513925050403891261f15f65b7b5ac933fab36", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=10c50b140aa67f74a135e7a48ff6d954cc757cb8", "patch": "@@ -540,14 +540,14 @@ fn try_resolve_intra(\n \n     let resolved = resolver.resolve_module_path_in_items(db, &modpath);\n     let (defid, namespace) = match namespace {\n-        // TODO: .or(resolved.macros)\n+        // FIXME: .or(resolved.macros)\n         None => resolved\n             .types\n             .map(|t| (t.0, Namespace::Types))\n             .or(resolved.values.map(|t| (t.0, Namespace::Values)))?,\n         Some(ns @ Namespace::Types) => (resolved.types?.0, ns),\n         Some(ns @ Namespace::Values) => (resolved.values?.0, ns),\n-        // TODO:\n+        // FIXME:\n         Some(Namespace::Macros) => None?,\n     };\n \n@@ -558,7 +558,7 @@ fn try_resolve_intra(\n     let ns = match namespace {\n         Namespace::Types => ItemInNs::Types(defid),\n         Namespace::Values => ItemInNs::Values(defid),\n-        // TODO:\n+        // FIXME:\n         Namespace::Macros => None?,\n     };\n     let import_map = db.import_map(krate.into());\n@@ -603,7 +603,7 @@ fn try_resolve_path(db: &RootDatabase, definition: &Definition, link: &str) -> O\n }\n \n /// Try to get the root URL of the documentation of a crate.\n-// TODO: Special case standard, core, alloc libraries\n+// FIXME: Special case standard, core, alloc libraries\n fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n     // Look for #![doc(html_root_url = \"...\")]\n     let attrs = db.attrs(AttrDef::from(krate.root_module(db)?).into());\n@@ -621,7 +621,7 @@ fn get_doc_url(db: &RootDatabase, krate: &Crate) -> Option<Url> {\n         }).next()\n     } else {\n         // Fallback to docs.rs\n-        // TODO: Specify an exact version here (from Cargo.lock)\n+        // FIXME: Specify an exact version here (from Cargo.lock)\n         Some(format!(\"https://docs.rs/{}/*\", krate.display_name(db)?))\n     };\n \n@@ -648,7 +648,6 @@ fn get_symbol_filename(db: &RootDatabase, definition: &Definition) -> Option<Str\n                 format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n             }\n             ModuleDef::Const(c) => format!(\"const.{}.html\", c.name(db)?),\n-            // TODO: Check this is the right prefix\n             ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n         },\n         Definition::Macro(m) => format!(\"macro.{}.html\", m.name(db)?),"}, {"sha": "b07395a645abc1e9d8d65e1fb24739252dd4b00b", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=10c50b140aa67f74a135e7a48ff6d954cc757cb8", "patch": "@@ -6,8 +6,9 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n+    db::{DefDatabase, HirDatabase},\n     Field, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n-    Semantics, TypeParam, Visibility, db::{DefDatabase, HirDatabase},\n+    Semantics, TypeParam, Visibility,\n };\n use ra_prof::profile;\n use ra_syntax::{\n@@ -16,7 +17,7 @@ use ra_syntax::{\n };\n \n use crate::RootDatabase;\n-use ra_hir_def::resolver::{Resolver, HasResolver};\n+use ra_hir_def::resolver::{HasResolver, Resolver};\n \n // FIXME: a more precise name would probably be `Symbol`?\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n@@ -83,12 +84,14 @@ impl Definition {\n         use ra_hir_def::*;\n         Some(match self {\n             Definition::ModuleDef(def) => def.resolver(db)?,\n-            Definition::Field(field) => Into::<VariantId>::into(Into::<VariantDef>::into(field.parent_def(db))).resolver(db),\n+            Definition::Field(field) => {\n+                Into::<VariantId>::into(Into::<VariantDef>::into(field.parent_def(db))).resolver(db)\n+            }\n             Definition::Macro(m) => Into::<ModuleId>::into(m.module(db)?).resolver(db),\n             Definition::SelfType(imp) => Into::<ImplId>::into(imp.clone()).resolver(db),\n             // it's possible, read probable, that other arms of this are also unreachable\n             Definition::Local(_local) => unreachable!(),\n-            Definition::TypeParam(tp) => Into::<ModuleId>::into(tp.module(db)).resolver(db)\n+            Definition::TypeParam(tp) => Into::<ModuleId>::into(tp.module(db)).resolver(db),\n         })\n     }\n }"}, {"sha": "bd83eb2d2cdfbf03870dfba73b0cddc0bb6fa9d8", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=10c50b140aa67f74a135e7a48ff6d954cc757cb8", "patch": "@@ -47,7 +47,7 @@ use crate::syntax_node::GreenNode;\n pub use crate::{\n     algo::InsertPosition,\n     ast::{AstNode, AstToken},\n-    parsing::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token, parse_text},\n+    parsing::{lex_single_syntax_kind, lex_single_valid_syntax_kind, parse_text, tokenize, Token},\n     ptr::{AstPtr, SyntaxNodePtr},\n     syntax_error::SyntaxError,\n     syntax_node::{"}, {"sha": "e35a5e846a348cab8910099c0617797b440cd6b0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c50b140aa67f74a135e7a48ff6d954cc757cb8/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=10c50b140aa67f74a135e7a48ff6d954cc757cb8", "patch": "@@ -4,7 +4,7 @@\n \n use std::{\n     io::Write as _,\n-    process::{self, Stdio}\n+    process::{self, Stdio},\n };\n \n use lsp_server::ErrorCode;"}]}