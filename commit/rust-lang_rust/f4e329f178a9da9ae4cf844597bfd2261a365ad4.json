{"sha": "f4e329f178a9da9ae4cf844597bfd2261a365ad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTMyOWYxNzhhOWRhOWFlNGNmODQ0NTk3YmZkMjI2MWEzNjVhZDQ=", "commit": {"author": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2017-05-17T15:15:28Z"}, "committer": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2017-07-17T16:01:01Z"}, "message": "Make compiletest set cwd before running js tests", "tree": {"sha": "c86c39f5e2412bf7bc2c9cc7a49fb64a6b7d59c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c86c39f5e2412bf7bc2c9cc7a49fb64a6b7d59c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e329f178a9da9ae4cf844597bfd2261a365ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e329f178a9da9ae4cf844597bfd2261a365ad4", "html_url": "https://github.com/rust-lang/rust/commit/f4e329f178a9da9ae4cf844597bfd2261a365ad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e329f178a9da9ae4cf844597bfd2261a365ad4/comments", "author": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5803f99bd4c53c3f469df26513ffa2e058094c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/5803f99bd4c53c3f469df26513ffa2e058094c53", "html_url": "https://github.com/rust-lang/rust/commit/5803f99bd4c53c3f469df26513ffa2e058094c53"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "c44095df4001f216c10e2e3243fc95afc44bd015", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=f4e329f178a9da9ae4cf844597bfd2261a365ad4", "patch": "@@ -18,6 +18,8 @@ pub fn target() -> Result<Target, String> {\n                           vec![\"-s\".to_string(),\n                                \"BINARYEN=1\".to_string(),\n                                \"-s\".to_string(),\n+                               \"BINARYEN_METHOD='native-wasm,interpret-binary'\".to_string(),\n+                               \"-s\".to_string(),\n                                \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n \n     let opts = TargetOptions {"}, {"sha": "0ad52de6175a625ff08bfdf28a474300a6a467a1", "filename": "src/tools/compiletest/src/procsrv.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fprocsrv.rs?ref=f4e329f178a9da9ae4cf844597bfd2261a365ad4", "patch": "@@ -53,7 +53,8 @@ pub fn run(lib_path: &str,\n            aux_path: Option<&str>,\n            args: &[String],\n            env: Vec<(String, String)>,\n-           input: Option<String>)\n+           input: Option<String>,\n+           current_dir: Option<String>)\n            -> io::Result<Result> {\n \n     let mut cmd = Command::new(prog);\n@@ -66,6 +67,9 @@ pub fn run(lib_path: &str,\n     for (key, val) in env {\n         cmd.env(&key, &val);\n     }\n+    if let Some(cwd) = current_dir {\n+        cmd.current_dir(cwd);\n+    }\n \n     let mut process = cmd.spawn()?;\n     if let Some(input) = input {\n@@ -85,7 +89,8 @@ pub fn run_background(lib_path: &str,\n                       aux_path: Option<&str>,\n                       args: &[String],\n                       env: Vec<(String, String)>,\n-                      input: Option<String>)\n+                      input: Option<String>,\n+                      current_dir: Option<String>)\n                       -> io::Result<Child> {\n \n     let mut cmd = Command::new(prog);\n@@ -96,6 +101,9 @@ pub fn run_background(lib_path: &str,\n     for (key, val) in env {\n         cmd.env(&key, &val);\n     }\n+    if let Some(cwd) = current_dir {\n+        cmd.current_dir(cwd);\n+    }\n \n     let mut process = cmd.spawn()?;\n     if let Some(input) = input {"}, {"sha": "0664525221fd27be07bb22bf28d8363dcc75494a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e329f178a9da9ae4cf844597bfd2261a365ad4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f4e329f178a9da9ae4cf844597bfd2261a365ad4", "patch": "@@ -509,6 +509,7 @@ actual:\\n\\\n                                  self.config.adb_test_dir.clone()\n                              ],\n                              Vec::new(),\n+                             None,\n                              None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -521,6 +522,7 @@ actual:\\n\\\n                                  \"tcp:5039\".to_owned()\n                              ],\n                              Vec::new(),\n+                             None,\n                              None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -543,6 +545,7 @@ actual:\\n\\\n                                                               adb_arg.clone()\n                                                           ],\n                                                           Vec::new(),\n+                                                          None,\n                                                           None)\n                     .expect(&format!(\"failed to exec `{:?}`\", self.config.adb_path));\n \n@@ -579,6 +582,7 @@ actual:\\n\\\n                                  None,\n                                  &debugger_opts,\n                                  Vec::new(),\n+                                 None,\n                                  None)\n                     .expect(&format!(\"failed to exec `{:?}`\", gdb_path));\n                 let cmdline = {\n@@ -1542,6 +1546,12 @@ actual:\\n\\\n             logv(self.config, format!(\"executing {}\", cmdline));\n             cmdline\n         };\n+        let working_dir = if self.config.target.contains(\"emscripten\") {\n+            Some(self.output_base_name().parent().unwrap().to_str().unwrap().to_owned())\n+        } else {\n+            None\n+        };\n+\n         let procsrv::Result {\n             out,\n             err,\n@@ -1551,7 +1561,8 @@ actual:\\n\\\n                          aux_path,\n                          &args,\n                          env,\n-                         input).expect(&format!(\"failed to exec `{}`\", prog));\n+                         input,\n+                         working_dir).expect(&format!(\"failed to exec `{}`\", prog));\n         self.dump_output(&out, &err);\n         ProcRes {\n             status: status,"}]}