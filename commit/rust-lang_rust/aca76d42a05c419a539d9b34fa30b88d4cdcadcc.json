{"sha": "aca76d42a05c419a539d9b34fa30b88d4cdcadcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTc2ZDQyYTA1YzQxOWE1MzlkOWIzNGZhMzBiODhkNGNkY2FkY2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-04T10:55:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-04T10:55:39Z"}, "message": "test for offset and alignment of the sized part, instead of field count", "tree": {"sha": "259f58deb5cf342a9221879558259f432d6a34c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/259f58deb5cf342a9221879558259f432d6a34c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca76d42a05c419a539d9b34fa30b88d4cdcadcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca76d42a05c419a539d9b34fa30b88d4cdcadcc", "html_url": "https://github.com/rust-lang/rust/commit/aca76d42a05c419a539d9b34fa30b88d4cdcadcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca76d42a05c419a539d9b34fa30b88d4cdcadcc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e753d2105159397eff162aa3f1f7715f96b5772d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e753d2105159397eff162aa3f1f7715f96b5772d", "html_url": "https://github.com/rust-lang/rust/commit/e753d2105159397eff162aa3f1f7715f96b5772d"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c1c2efdae751673b03cf8caa00fbc3d23d51bb78", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aca76d42a05c419a539d9b34fa30b88d4cdcadcc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca76d42a05c419a539d9b34fa30b88d4cdcadcc/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=aca76d42a05c419a539d9b34fa30b88d4cdcadcc", "patch": "@@ -374,13 +374,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                 let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, field)? {\n                     Some(size_and_align) => size_and_align,\n                     None => {\n-                        // A field with extern type.  If this is the only field,\n-                        // we treat this struct just the same.  Else, this is an error\n-                        // (for now).\n-                        if layout.fields.count() == 1 {\n+                        // A field with extern type.  If this field is at offset 0 and the sized\n+                        // part makes no alignment constraints, we behave like the underlying\n+                        // extern type.\n+                        if sized_size == Size::ZERO && sized_align.abi() == 1 {\n                             return Ok(None)\n                         } else {\n-                            bug!(\"Fields cannot be extern types, unless they are the only field\")\n+                            bug!(\"Fields cannot be extern types, unless they are at offset 0\")\n                         }\n                     }\n                 };"}]}