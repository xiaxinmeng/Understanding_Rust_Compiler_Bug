{"sha": "bc355244df5ae74eaabe9a1e19200b9160010505", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMzU1MjQ0ZGY1YWU3NGVhYWJlOWExZTE5MjAwYjkxNjAwMTA1MDU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-23T10:17:34Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-02T20:21:41Z"}, "message": "Make `ast::Visibility` non-copyable", "tree": {"sha": "cab5dddff11c110cc554b8fe91e293a3a08461f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab5dddff11c110cc554b8fe91e293a3a08461f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc355244df5ae74eaabe9a1e19200b9160010505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc355244df5ae74eaabe9a1e19200b9160010505", "html_url": "https://github.com/rust-lang/rust/commit/bc355244df5ae74eaabe9a1e19200b9160010505", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc355244df5ae74eaabe9a1e19200b9160010505/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74240b22d92bbbdf4afac8cf14f81fd337b97a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/74240b22d92bbbdf4afac8cf14f81fd337b97a46", "html_url": "https://github.com/rust-lang/rust/commit/74240b22d92bbbdf4afac8cf14f81fd337b97a46"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "3636953cb05951113b74e67344b3554be599c8aa", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -761,7 +761,7 @@ pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         defaultness: lower_defaultness(lctx, i.defaultness),\n         node: match i.node {\n             ImplItemKind::Const(ref ty, ref expr) => {\n@@ -839,7 +839,7 @@ pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item {\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n         node: node,\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         span: i.span,\n     }\n }\n@@ -857,7 +857,7 @@ pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::Forei\n                 hir::ForeignItemStatic(lower_ty(lctx, t), m)\n             }\n         },\n-        vis: lower_visibility(lctx, i.vis),\n+        vis: lower_visibility(lctx, &i.vis),\n         span: i.span,\n     }\n }\n@@ -1706,8 +1706,8 @@ pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::Captu\n     }\n }\n \n-pub fn lower_visibility(_lctx: &LoweringContext, v: Visibility) -> hir::Visibility {\n-    match v {\n+pub fn lower_visibility(_lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n+    match *v {\n         Visibility::Public => hir::Public,\n         Visibility::Inherited => hir::Inherited,\n     }"}, {"sha": "30dc3d00c182b70025ea92bbd5dafa61747f22ec", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -1868,7 +1868,7 @@ pub struct PolyTraitRef {\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -1893,7 +1893,7 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n@@ -1908,9 +1908,9 @@ impl StructFieldKind {\n         }\n     }\n \n-    pub fn visibility(&self) -> Visibility {\n+    pub fn visibility(&self) -> &Visibility {\n         match *self {\n-            NamedField(_, vis) | UnnamedField(vis) => vis\n+            NamedField(_, ref vis) | UnnamedField(ref vis) => vis\n         }\n     }\n }"}, {"sha": "852b153044fea95e4649b22d101062cc0d653007", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n             FnKind::ItemFn(_, generics, _, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, ref sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n             FnKind::Closure => {}"}, {"sha": "1c0fc5fda2514fe3e06ccc4f6fa054958c618735", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -4952,7 +4952,7 @@ impl<'a> Parser<'a> {\n             self.commit_expr_expecting(&expr, token::Semi)?;\n             (name, ast::ImplItemKind::Const(typ, expr))\n         } else {\n-            let (name, inner_attrs, node) = self.parse_impl_method(vis)?;\n+            let (name, inner_attrs, node) = self.parse_impl_method(&vis)?;\n             attrs.extend(inner_attrs);\n             (name, node)\n         };\n@@ -4968,8 +4968,8 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n-        match visa {\n+    fn complain_if_pub_macro(&mut self, visa: &Visibility, span: Span) {\n+        match *visa {\n             Visibility::Public => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n@@ -4993,7 +4993,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a method or a macro invocation in a trait impl.\n-    fn parse_impl_method(&mut self, vis: Visibility)\n+    fn parse_impl_method(&mut self, vis: &Visibility)\n                          -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if !self.token.is_any_keyword()\n@@ -5003,7 +5003,7 @@ impl<'a> Parser<'a> {\n             // method macro.\n \n             let last_span = self.last_span;\n-            self.complain_if_pub_macro(vis, last_span);\n+            self.complain_if_pub_macro(&vis, last_span);\n \n             let lo = self.span.lo;\n             let pth = self.parse_path(NoTypesAllowed)?;\n@@ -6045,7 +6045,7 @@ impl<'a> Parser<'a> {\n             // MACRO INVOCATION ITEM\n \n             let last_span = self.last_span;\n-            self.complain_if_pub_macro(visibility, last_span);\n+            self.complain_if_pub_macro(&visibility, last_span);\n \n             let mac_lo = self.span.lo;\n "}, {"sha": "83f4d78cb191133053bb6353bf28cceb8d35ea93", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -388,7 +388,7 @@ pub fn fun_to_string(decl: &ast::FnDecl,\n     to_string(|s| {\n         s.head(\"\")?;\n         s.print_fn(decl, unsafety, constness, Abi::Rust, Some(name),\n-                   generics, opt_explicit_self, ast::Visibility::Inherited)?;\n+                   generics, opt_explicit_self, &ast::Visibility::Inherited)?;\n         s.end()?; // Close the head box\n         s.end() // Close the outer box\n     })\n@@ -432,8 +432,8 @@ pub fn mac_to_string(arg: &ast::Mac) -> String {\n     to_string(|s| s.print_mac(arg, ::parse::token::Paren))\n }\n \n-pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n-    match vis {\n+pub fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n+    match *vis {\n         ast::Visibility::Public => format!(\"pub {}\", s),\n         ast::Visibility::Inherited => s.to_string()\n     }\n@@ -1052,13 +1052,13 @@ impl<'a> State<'a> {\n                 self.print_fn(decl, ast::Unsafety::Normal,\n                               ast::Constness::NotConst,\n                               Abi::Rust, Some(item.ident),\n-                              generics, None, item.vis)?;\n+                              generics, None, &item.vis)?;\n                 self.end()?; // end head-ibox\n                 word(&mut self.s, \";\")?;\n                 self.end() // end the outer fn box\n             }\n             ast::ForeignItemKind::Static(ref t, m) => {\n-                self.head(&visibility_qualified(item.vis, \"static\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"static\"))?;\n                 if m {\n                     self.word_space(\"mut\")?;\n                 }\n@@ -1076,7 +1076,7 @@ impl<'a> State<'a> {\n                               ident: ast::Ident,\n                               ty: &ast::Ty,\n                               default: Option<&ast::Expr>,\n-                              vis: ast::Visibility)\n+                              vis: &ast::Visibility)\n                               -> io::Result<()>\n     {\n         word(&mut self.s, &visibility_qualified(vis, \"\"))?;\n@@ -1118,7 +1118,7 @@ impl<'a> State<'a> {\n         self.ann.pre(self, NodeItem(item))?;\n         match item.node {\n             ast::ItemKind::ExternCrate(ref optional_path) => {\n-                self.head(&visibility_qualified(item.vis, \"extern crate\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"extern crate\"))?;\n                 if let Some(p) = *optional_path {\n                     let val = p.as_str();\n                     if val.contains(\"-\") {\n@@ -1136,14 +1136,14 @@ impl<'a> State<'a> {\n                 self.end()?; // end outer head-block\n             }\n             ast::ItemKind::Use(ref vp) => {\n-                self.head(&visibility_qualified(item.vis, \"use\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"use\"))?;\n                 self.print_view_path(&vp)?;\n                 word(&mut self.s, \";\")?;\n                 self.end()?; // end inner head-block\n                 self.end()?; // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, m, ref expr) => {\n-                self.head(&visibility_qualified(item.vis, \"static\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"static\"))?;\n                 if m == ast::Mutability::Mutable {\n                     self.word_space(\"mut\")?;\n                 }\n@@ -1159,7 +1159,7 @@ impl<'a> State<'a> {\n                 self.end()?; // end the outer cbox\n             }\n             ast::ItemKind::Const(ref ty, ref expr) => {\n-                self.head(&visibility_qualified(item.vis, \"const\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"const\"))?;\n                 self.print_ident(item.ident)?;\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n@@ -1181,13 +1181,13 @@ impl<'a> State<'a> {\n                     Some(item.ident),\n                     typarams,\n                     None,\n-                    item.vis\n+                    &item.vis\n                 )?;\n                 word(&mut self.s, \" \")?;\n                 self.print_block_with_attrs(&body, &item.attrs)?;\n             }\n             ast::ItemKind::Mod(ref _mod) => {\n-                self.head(&visibility_qualified(item.vis, \"mod\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"mod\"))?;\n                 self.print_ident(item.ident)?;\n                 self.nbsp()?;\n                 self.bopen()?;\n@@ -1204,7 +1204,7 @@ impl<'a> State<'a> {\n             ast::ItemKind::Ty(ref ty, ref params) => {\n                 self.ibox(INDENT_UNIT)?;\n                 self.ibox(0)?;\n-                self.word_nbsp(&visibility_qualified(item.vis, \"type\"))?;\n+                self.word_nbsp(&visibility_qualified(&item.vis, \"type\"))?;\n                 self.print_ident(item.ident)?;\n                 self.print_generics(params)?;\n                 self.end()?; // end the inner ibox\n@@ -1222,17 +1222,17 @@ impl<'a> State<'a> {\n                     params,\n                     item.ident,\n                     item.span,\n-                    item.vis\n+                    &item.vis\n                 )?;\n             }\n             ast::ItemKind::Struct(ref struct_def, ref generics) => {\n-                self.head(&visibility_qualified(item.vis,\"struct\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"struct\"))?;\n                 self.print_struct(&struct_def, generics, item.ident, item.span, true)?;\n             }\n \n             ast::ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n                 self.print_trait_ref(trait_ref)?;\n@@ -1249,7 +1249,7 @@ impl<'a> State<'a> {\n                           ref ty,\n                           ref impl_items) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"impl\")?;\n \n@@ -1287,7 +1287,7 @@ impl<'a> State<'a> {\n             }\n             ast::ItemKind::Trait(unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_ident(item.ident)?;\n@@ -1312,7 +1312,7 @@ impl<'a> State<'a> {\n                 self.bclose(item.span)?;\n             }\n             ast::ItemKind::Mac(codemap::Spanned { ref node, .. }) => {\n-                self.print_visibility(item.vis)?;\n+                self.print_visibility(&item.vis)?;\n                 self.print_path(&node.path, false, 0)?;\n                 word(&mut self.s, \"! \")?;\n                 self.print_ident(item.ident)?;\n@@ -1355,7 +1355,7 @@ impl<'a> State<'a> {\n     pub fn print_enum_def(&mut self, enum_definition: &ast::EnumDef,\n                           generics: &ast::Generics, ident: ast::Ident,\n                           span: codemap::Span,\n-                          visibility: ast::Visibility) -> io::Result<()> {\n+                          visibility: &ast::Visibility) -> io::Result<()> {\n         self.head(&visibility_qualified(visibility, \"enum\"))?;\n         self.print_ident(ident)?;\n         self.print_generics(generics)?;\n@@ -1381,8 +1381,8 @@ impl<'a> State<'a> {\n         self.bclose(span)\n     }\n \n-    pub fn print_visibility(&mut self, vis: ast::Visibility) -> io::Result<()> {\n-        match vis {\n+    pub fn print_visibility(&mut self, vis: &ast::Visibility) -> io::Result<()> {\n+        match *vis {\n             ast::Visibility::Public => self.word_nbsp(\"pub\"),\n             ast::Visibility::Inherited => Ok(())\n         }\n@@ -1404,7 +1404,7 @@ impl<'a> State<'a> {\n                     |s, field| {\n                         match field.node.kind {\n                             ast::NamedField(..) => panic!(\"unexpected named field\"),\n-                            ast::UnnamedField(vis) => {\n+                            ast::UnnamedField(ref vis) => {\n                                 s.print_visibility(vis)?;\n                                 s.maybe_print_comment(field.span.lo)?;\n                                 s.print_type(&field.node.ty)\n@@ -1429,7 +1429,7 @@ impl<'a> State<'a> {\n             for field in struct_def.fields() {\n                 match field.node.kind {\n                     ast::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    ast::NamedField(ident, visibility) => {\n+                    ast::NamedField(ident, ref visibility) => {\n                         self.hardbreak_if_not_bol()?;\n                         self.maybe_print_comment(field.span.lo)?;\n                         self.print_outer_attributes(&field.node.attrs)?;\n@@ -1528,7 +1528,7 @@ impl<'a> State<'a> {\n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n                             m: &ast::MethodSig,\n-                            vis: ast::Visibility)\n+                            vis: &ast::Visibility)\n                             -> io::Result<()> {\n         self.print_fn(&m.decl,\n                       m.unsafety,\n@@ -1550,13 +1550,13 @@ impl<'a> State<'a> {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n                 self.print_associated_const(ti.ident, &ty,\n                                             default.as_ref().map(|expr| &**expr),\n-                                            ast::Visibility::Inherited)?;\n+                                            &ast::Visibility::Inherited)?;\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     self.head(\"\")?;\n                 }\n-                self.print_method_sig(ti.ident, sig, ast::Visibility::Inherited)?;\n+                self.print_method_sig(ti.ident, sig, &ast::Visibility::Inherited)?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n                     self.print_block_with_attrs(body, &ti.attrs)?;\n@@ -1582,11 +1582,11 @@ impl<'a> State<'a> {\n         }\n         match ii.node {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n-                self.print_associated_const(ii.ident, &ty, Some(&expr), ii.vis)?;\n+                self.print_associated_const(ii.ident, &ty, Some(&expr), &ii.vis)?;\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.ident, sig, ii.vis)?;\n+                self.print_method_sig(ii.ident, sig, &ii.vis)?;\n                 self.nbsp()?;\n                 self.print_block_with_attrs(body, &ii.attrs)?;\n             }\n@@ -2655,7 +2655,7 @@ impl<'a> State<'a> {\n                     name: Option<ast::Ident>,\n                     generics: &ast::Generics,\n                     opt_explicit_self: Option<&ast::SelfKind>,\n-                    vis: ast::Visibility) -> io::Result<()> {\n+                    vis: &ast::Visibility) -> io::Result<()> {\n         self.print_fn_header_info(unsafety, constness, abi, vis)?;\n \n         if let Some(name) = name {\n@@ -3037,7 +3037,7 @@ impl<'a> State<'a> {\n                       name,\n                       &generics,\n                       opt_explicit_self,\n-                      ast::Visibility::Inherited)?;\n+                      &ast::Visibility::Inherited)?;\n         self.end()\n     }\n \n@@ -3112,7 +3112,7 @@ impl<'a> State<'a> {\n                                 unsafety: ast::Unsafety,\n                                 constness: ast::Constness,\n                                 abi: Abi,\n-                                vis: ast::Visibility) -> io::Result<()> {\n+                                vis: &ast::Visibility) -> io::Result<()> {\n         word(&mut self.s, &visibility_qualified(vis, \"\"))?;\n \n         match constness {"}, {"sha": "f0eb42d1741e4236febdd3696ef976618a822431", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc355244df5ae74eaabe9a1e19200b9160010505/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bc355244df5ae74eaabe9a1e19200b9160010505", "patch": "@@ -31,10 +31,10 @@ use codemap::Span;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n+    ItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, &'a Visibility),\n \n     /// fn foo(&self)\n-    Method(Ident, &'a MethodSig, Option<Visibility>),\n+    Method(Ident, &'a MethodSig, Option<&'a Visibility>),\n \n     /// |x, y| {}\n     Closure,\n@@ -260,7 +260,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemKind::Fn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n-                                            constness, abi, item.vis),\n+                                            constness, abi, &item.vis),\n                              declaration,\n                              body,\n                              item.span,\n@@ -546,7 +546,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V,\n         FnKind::ItemFn(_, generics, _, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, _) => {\n+        FnKind::Method(_, ref sig, _) => {\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n@@ -597,7 +597,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(impl_item.vis)), &sig.decl,\n+            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)), &sig.decl,\n                              body, impl_item.span, impl_item.id);\n         }\n         ImplItemKind::Type(ref ty) => {"}]}