{"sha": "a731f165df26cb7575133d549ffd2f548bb3de99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MzFmMTY1ZGYyNmNiNzU3NTEzM2Q1NDlmZmQyZjU0OGJiM2RlOTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T01:20:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-06T01:20:59Z"}, "message": "test: Test hitting the dynamic linker in the red zone", "tree": {"sha": "1576ba5f9bbbb493b45a3ac0a72ff5980fa5faf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1576ba5f9bbbb493b45a3ac0a72ff5980fa5faf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a731f165df26cb7575133d549ffd2f548bb3de99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a731f165df26cb7575133d549ffd2f548bb3de99", "html_url": "https://github.com/rust-lang/rust/commit/a731f165df26cb7575133d549ffd2f548bb3de99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a731f165df26cb7575133d549ffd2f548bb3de99/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8bfaf5343dd13839df465cde6a4df50136ff03", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8bfaf5343dd13839df465cde6a4df50136ff03", "html_url": "https://github.com/rust-lang/rust/commit/3b8bfaf5343dd13839df465cde6a4df50136ff03"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "dd5831c2917391a7e3eac73d906e6bac1310c04f", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a731f165df26cb7575133d549ffd2f548bb3de99", "patch": "@@ -273,6 +273,12 @@ debug_ptrcast(type_desc *from_ty,\n     return ptr;\n }\n \n+extern \"C\" CDECL void *\n+debug_get_stk_seg() {\n+    rust_task *task = rust_scheduler::get_task();\n+    return task->stk;\n+}\n+\n extern \"C\" CDECL rust_vec*\n rust_list_files(rust_str *path) {\n     rust_task *task = rust_scheduler::get_task();"}, {"sha": "f202cd1fd6745238f6f29c3de31fa30df35ba6d3", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a731f165df26cb7575133d549ffd2f548bb3de99", "patch": "@@ -222,7 +222,7 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n     // FIXME (1226) - The shim functions generated by rustc contain the\n     // morestack prologue, so we need to let them know they have enough\n     // stack.\n-    //record_sp(0);\n+    record_sp(0);\n \n     rust_scheduler *sched = task->sched;\n     try {\n@@ -232,8 +232,8 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n         //task->record_stack_limit();\n         throw;\n     }\n-    //task = rust_scheduler::get_task();\n-    //task->record_stack_limit();\n+    task = rust_scheduler::get_task();\n+    task->record_stack_limit();\n }\n \n struct rust_new_stack2_args {"}, {"sha": "ba1a9c1403da482c06e05066a9fb875607fabbb2", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a731f165df26cb7575133d549ffd2f548bb3de99", "patch": "@@ -8,6 +8,7 @@ del_port\n debug_ptrcast\n debug_tag\n debug_tydesc\n+debug_get_stk_seg\n do_gc\n drop_task\n get_port_id"}, {"sha": "ef1a87aeea6e837dbe17c74f32f418137f9b999b", "filename": "src/test/run-pass/morestack6.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a731f165df26cb7575133d549ffd2f548bb3de99/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=a731f165df26cb7575133d549ffd2f548bb3de99", "patch": "@@ -0,0 +1,81 @@\n+// xfail-test\n+// compile-flags:--stack-growth\n+\n+// This test attempts to force the dynamic linker to resolve\n+// external symbols as close to the red zone as possible.\n+\n+use std;\n+import std::task;\n+import std::rand;\n+\n+native mod rustrt {\n+    fn set_min_stack(size: uint);\n+    fn debug_get_stk_seg() -> *u8;\n+\n+    fn unsupervise();\n+    fn last_os_error() -> str;\n+    fn rust_getcwd() -> str;\n+    fn refcount(box: @int);\n+    fn do_gc();\n+    fn pin_task();\n+    fn unpin_task();\n+    fn get_task_id();\n+    fn sched_threads();\n+    fn rust_get_task();\n+}\n+\n+fn calllink01() { rustrt::unsupervise(); }\n+fn calllink02() { rustrt::last_os_error(); }\n+fn calllink03() { rustrt::rust_getcwd(); }\n+fn calllink04() { rustrt::refcount(@0); }\n+fn calllink05() { rustrt::do_gc(); }\n+fn calllink06() { rustrt::pin_task(); }\n+fn calllink07() { rustrt::unpin_task(); }\n+fn calllink08() { rustrt::get_task_id(); }\n+fn calllink09() { rustrt::sched_threads(); }\n+fn calllink10() { rustrt::rust_get_task(); }\n+\n+fn runtest(&&args:(fn(), u32)) {\n+    let (f, frame_backoff) = args;\n+    runtest2(f, frame_backoff, 0 as *u8);\n+}\n+\n+fn runtest2(f: fn(), frame_backoff: u32, last_stk: *u8) -> u32 {\n+    let curr_stk = rustrt::debug_get_stk_seg();\n+    if (last_stk != curr_stk && last_stk != 0 as *u8) {\n+        // We switched stacks, go back and try to hit the dynamic linker\n+        frame_backoff\n+    } else {\n+        let frame_backoff = runtest2(f, frame_backoff, curr_stk);\n+        if frame_backoff > 1u32 {\n+            frame_backoff - 1u32\n+        } else if frame_backoff == 1u32 {\n+            f();\n+            0u32\n+        } else {\n+            0u32\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let fns = [\n+        calllink01,\n+        calllink02,\n+        calllink03,\n+        calllink04,\n+        calllink05,\n+        calllink06,\n+        calllink07,\n+        calllink08,\n+        calllink09,\n+        calllink10\n+    ];\n+    let rng = rand::mk_rng();\n+    for f in fns {\n+        let sz = rng.next() % 256u32 + 256u32;\n+        let frame_backoff = rng.next() % 10u32 + 1u32;\n+        rustrt::set_min_stack(sz as uint);\n+        task::join(task::spawn_joinable((f, frame_backoff), runtest));\n+    }\n+}\n\\ No newline at end of file"}]}