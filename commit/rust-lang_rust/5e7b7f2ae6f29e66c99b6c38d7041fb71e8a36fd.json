{"sha": "5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2I3ZjJhZTZmMjllNjZjOTliNmMzOGQ3MDQxZmI3MWU4YTM2ZmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T02:39:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T02:39:42Z"}, "message": "make PhantomData #[structural_match].", "tree": {"sha": "5ac6ed81913d24e8fdba9a039bf1c4ac5a56c978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac6ed81913d24e8fdba9a039bf1c4ac5a56c978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "html_url": "https://github.com/rust-lang/rust/commit/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a50c29f6c5c386fba6ab685818755ac55152e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a50c29f6c5c386fba6ab685818755ac55152e5", "html_url": "https://github.com/rust-lang/rust/commit/36a50c29f6c5c386fba6ab685818755ac55152e5"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "b55ec67b0cca471eeef004d566ada0bece10fe75", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "patch": "@@ -129,6 +129,7 @@\n #![feature(const_transmute)]\n #![feature(reverse_bits)]\n #![feature(non_exhaustive)]\n+#![feature(structural_match)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "3bcdfabbb245e6f29c4882fddeeb674329ee914b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "patch": "@@ -578,6 +578,7 @@ macro_rules! impls{\n ///\n /// [drop check]: ../../nomicon/dropck.html\n #[lang = \"phantom_data\"]\n+#[structural_match]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;\n "}, {"sha": "af025b9bbbf76c0fc4e2aac1bcf37078fd50b579", "filename": "src/test/ui/rfc1445/phantom-data-is-structurally-matchable.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs?ref=5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+\n+// This file checks that `PhantomData` is considered structurally matchable.\n+\n+use std::marker::PhantomData;\n+\n+fn main() {\n+    let mut count = 0;\n+\n+    // A type which is not structurally matchable:\n+    struct NotSM;\n+\n+    // And one that is:\n+    #[derive(PartialEq, Eq)]\n+    struct SM;\n+\n+    // Check that SM is #[structural_match]:\n+    const CSM: SM = SM;\n+    match SM {\n+        CSM => count += 1,\n+    };\n+\n+    // Check that PhantomData<T> is #[structural_match] even if T is not.\n+    const CPD1: PhantomData<NotSM> = PhantomData;\n+    match PhantomData {\n+        CPD1 => count += 1,\n+    };\n+\n+    // Check that PhantomData<T> is #[structural_match] when T is.\n+    const CPD2: PhantomData<SM> = PhantomData;\n+    match PhantomData {\n+        CPD2 => count += 1,\n+    };\n+\n+    // Check that a type which has a PhantomData is `#[structural_match]`.\n+    #[derive(PartialEq, Eq, Default)]\n+    struct Foo {\n+        alpha: PhantomData<NotSM>,\n+        beta: PhantomData<SM>,\n+    }\n+\n+    const CFOO: Foo = Foo {\n+        alpha: PhantomData,\n+        beta: PhantomData,\n+    };\n+\n+    match Foo::default() {\n+        CFOO => count += 1,\n+    };\n+\n+    // Final count must be 4 now if all\n+    assert_eq!(count, 4);\n+}"}]}