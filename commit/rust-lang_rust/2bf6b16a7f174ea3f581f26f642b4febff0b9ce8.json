{"sha": "2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZjZiMTZhN2YxNzRlYTNmNTgxZjI2ZjY0MmI0ZmViZmYwYjljZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-17T22:11:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T18:28:27Z"}, "message": "Server side of SnippetTextEdit", "tree": {"sha": "148ebef7bcd3b5957155c6928287c7d5644817b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148ebef7bcd3b5957155c6928287c7d5644817b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "html_url": "https://github.com/rust-lang/rust/commit/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a752853350639a915178ea900a51f3c45443795e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a752853350639a915178ea900a51f3c45443795e", "html_url": "https://github.com/rust-lang/rust/commit/a752853350639a915178ea900a51f3c45443795e"}], "stats": {"total": 319, "additions": 200, "deletions": 119}, "files": [{"sha": "0dcd9df61fbf6cec7da3be9402acb07f207f5eab", "filename": "crates/ra_assists/src/assist_context.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Fra_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_context.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -208,16 +208,6 @@ impl AssistBuilder {\n     pub(crate) fn replace(&mut self, range: TextRange, replace_with: impl Into<String>) {\n         self.edit.replace(range, replace_with.into())\n     }\n-    /// Append specified `text` at the given `offset`\n-    pub(crate) fn replace_snippet(\n-        &mut self,\n-        _cap: SnippetCap,\n-        range: TextRange,\n-        replace_with: impl Into<String>,\n-    ) {\n-        self.is_snippet = true;\n-        self.edit.replace(range, replace_with.into())\n-    }\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n         algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n     }"}, {"sha": "25856c5436b47d12a5ac141d62cf63b7eb61cb7c", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -3,9 +3,11 @@ pub(crate) mod to_proto;\n \n use std::{collections::HashMap, sync::Arc};\n \n-use lsp_types::{CodeActionOrCommand, Diagnostic, Range};\n+use lsp_types::{Diagnostic, Range};\n use ra_ide::FileId;\n \n+use crate::lsp_ext;\n+\n pub type CheckFixes = Arc<HashMap<FileId, Vec<Fix>>>;\n \n #[derive(Debug, Default, Clone)]\n@@ -18,13 +20,13 @@ pub struct DiagnosticCollection {\n #[derive(Debug, Clone)]\n pub struct Fix {\n     pub range: Range,\n-    pub action: CodeActionOrCommand,\n+    pub action: lsp_ext::CodeAction,\n }\n \n #[derive(Debug)]\n pub enum DiagnosticTask {\n     ClearCheck,\n-    AddCheck(FileId, Diagnostic, Vec<CodeActionOrCommand>),\n+    AddCheck(FileId, Diagnostic, Vec<lsp_ext::CodeAction>),\n     SetNative(FileId, Vec<Diagnostic>),\n }\n \n@@ -38,7 +40,7 @@ impl DiagnosticCollection {\n         &mut self,\n         file_id: FileId,\n         diagnostic: Diagnostic,\n-        fixes: Vec<CodeActionOrCommand>,\n+        fixes: Vec<lsp_ext::CodeAction>,\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {"}, {"sha": "96466b5c90b3002efd484f20078bb512445c02cb", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_multi_line_fix.snap?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -68,9 +68,9 @@ expression: diag\n                 kind: Some(\n                     \"quickfix\",\n                 ),\n-                diagnostics: None,\n+                command: None,\n                 edit: Some(\n-                    WorkspaceEdit {\n+                    SnippetWorkspaceEdit {\n                         changes: Some(\n                             {\n                                 \"file:///test/src/main.rs\": [\n@@ -106,8 +106,6 @@ expression: diag\n                         document_changes: None,\n                     },\n                 ),\n-                command: None,\n-                is_preferred: None,\n             },\n         ],\n     },"}, {"sha": "8f962277f079c0e399b3aaa9bf6597b2beacbc3a", "filename": "crates/rust-analyzer/src/diagnostics/snapshots/rust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fsnapshots%2Frust_analyzer__diagnostics__to_proto__tests__snap_rustc_unused_variable.snap?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -53,9 +53,9 @@ expression: diag\n                 kind: Some(\n                     \"quickfix\",\n                 ),\n-                diagnostics: None,\n+                command: None,\n                 edit: Some(\n-                    WorkspaceEdit {\n+                    SnippetWorkspaceEdit {\n                         changes: Some(\n                             {\n                                 \"file:///test/driver/subcommand/repl.rs\": [\n@@ -78,8 +78,6 @@ expression: diag\n                         document_changes: None,\n                     },\n                 ),\n-                command: None,\n-                is_preferred: None,\n             },\n         ],\n     },"}, {"sha": "afea595254622ed66178a03dca41115c67c787b0", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -7,13 +7,13 @@ use std::{\n };\n \n use lsp_types::{\n-    CodeAction, Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag,\n-    Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n+    Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, Location,\n+    NumberOrString, Position, Range, TextEdit, Url,\n };\n use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n use stdx::format_to;\n \n-use crate::Result;\n+use crate::{lsp_ext, Result};\n \n /// Converts a Rust level string to a LSP severity\n fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n@@ -110,7 +110,7 @@ fn is_deprecated(rd: &ra_flycheck::Diagnostic) -> bool {\n \n enum MappedRustChildDiagnostic {\n     Related(DiagnosticRelatedInformation),\n-    SuggestedFix(CodeAction),\n+    SuggestedFix(lsp_ext::CodeAction),\n     MessageLine(String),\n }\n \n@@ -143,13 +143,15 @@ fn map_rust_child_diagnostic(\n             message: rd.message.clone(),\n         })\n     } else {\n-        MappedRustChildDiagnostic::SuggestedFix(CodeAction {\n+        MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n             title: rd.message.clone(),\n             kind: Some(\"quickfix\".to_string()),\n-            diagnostics: None,\n-            edit: Some(WorkspaceEdit::new(edit_map)),\n+            edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                // FIXME: there's no good reason to use edit_map here....\n+                changes: Some(edit_map),\n+                document_changes: None,\n+            }),\n             command: None,\n-            is_preferred: None,\n         })\n     }\n }\n@@ -158,7 +160,7 @@ fn map_rust_child_diagnostic(\n pub(crate) struct MappedRustDiagnostic {\n     pub location: Location,\n     pub diagnostic: Diagnostic,\n-    pub fixes: Vec<CodeAction>,\n+    pub fixes: Vec<lsp_ext::CodeAction>,\n }\n \n /// Converts a Rust root diagnostic to LSP form"}, {"sha": "c7a3a6911496f400d98581e5d34d00acc1ca688c", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -1,6 +1,6 @@\n //! rust-analyzer extensions to the LSP.\n \n-use std::path::PathBuf;\n+use std::{collections::HashMap, path::PathBuf};\n \n use lsp_types::request::Request;\n use lsp_types::{Location, Position, Range, TextDocumentIdentifier};\n@@ -137,7 +137,7 @@ pub struct Runnable {\n #[serde(rename_all = \"camelCase\")]\n pub struct SourceChange {\n     pub label: String,\n-    pub workspace_edit: lsp_types::WorkspaceEdit,\n+    pub workspace_edit: SnippetWorkspaceEdit,\n     pub cursor_position: Option<lsp_types::TextDocumentPositionParams>,\n }\n \n@@ -183,3 +183,52 @@ pub struct SsrParams {\n     pub query: String,\n     pub parse_only: bool,\n }\n+\n+pub enum CodeActionRequest {}\n+\n+impl Request for CodeActionRequest {\n+    type Params = lsp_types::CodeActionParams;\n+    type Result = Option<Vec<CodeAction>>;\n+    const METHOD: &'static str = \"textDocument/codeAction\";\n+}\n+\n+#[derive(Debug, PartialEq, Clone, Default, Deserialize, Serialize)]\n+pub struct CodeAction {\n+    pub title: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub kind: Option<String>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub command: Option<lsp_types::Command>,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub edit: Option<SnippetWorkspaceEdit>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetWorkspaceEdit {\n+    pub changes: Option<HashMap<lsp_types::Url, Vec<lsp_types::TextEdit>>>,\n+    pub document_changes: Option<Vec<SnippetDocumentChangeOperation>>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(untagged, rename_all = \"lowercase\")]\n+pub enum SnippetDocumentChangeOperation {\n+    Op(lsp_types::ResourceOp),\n+    Edit(SnippetTextDocumentEdit),\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetTextDocumentEdit {\n+    pub text_document: lsp_types::VersionedTextDocumentIdentifier,\n+    pub edits: Vec<SnippetTextEdit>,\n+}\n+\n+#[derive(Debug, Eq, PartialEq, Clone, Default, Deserialize, Serialize)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct SnippetTextEdit {\n+    pub range: Range,\n+    pub new_text: String,\n+    #[serde(skip_serializing_if = \"Option::is_none\")]\n+    pub insert_text_format: Option<lsp_types::InsertTextFormat>,\n+}"}, {"sha": "87795fffbd6742189c164dcccd9165304f161ccd", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -518,14 +518,14 @@ fn on_request(\n         .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)?\n         .on::<lsp_ext::Runnables>(handlers::handle_runnables)?\n         .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)?\n+        .on::<lsp_ext::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?\n         .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)?\n         .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)?\n         .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)?\n         .on::<lsp_types::request::Completion>(handlers::handle_completion)?\n-        .on::<lsp_types::request::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)?\n         .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)?\n         .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)?"}, {"sha": "4ff8fa69e92b916ca12bb9d1c0f443fb82fd0f8a", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 27, "deletions": 55, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -11,12 +11,11 @@ use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeAction, CodeActionResponse, CodeLens, Command, CompletionItem, Diagnostic,\n-    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n-    Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n-    Range, RenameParams, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, Url, WorkspaceEdit,\n+    CodeLens, Command, CompletionItem, Diagnostic, DocumentFormattingParams, DocumentHighlight,\n+    DocumentSymbol, FoldingRange, FoldingRangeParams, Hover, HoverContents, Location,\n+    MarkupContent, MarkupKind, Position, PrepareRenameResponse, Range, RenameParams,\n+    SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n+    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, Url, WorkspaceEdit,\n };\n use ra_ide::{\n     Assist, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n@@ -585,9 +584,8 @@ pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Optio\n         None => return Ok(None),\n         Some(it) => it.info,\n     };\n-\n-    let source_change = to_proto::source_change(&world, source_change)?;\n-    Ok(Some(source_change.workspace_edit))\n+    let workspace_edit = to_proto::workspace_edit(&world, source_change)?;\n+    Ok(Some(workspace_edit))\n }\n \n pub fn handle_references(\n@@ -696,14 +694,21 @@ pub fn handle_formatting(\n pub fn handle_code_action(\n     world: WorldSnapshot,\n     params: lsp_types::CodeActionParams,\n-) -> Result<Option<CodeActionResponse>> {\n+) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n     let _p = profile(\"handle_code_action\");\n+    // We intentionally don't support command-based actions, as those either\n+    // requires custom client-code anyway, or requires server-initiated edits.\n+    // Server initiated edits break causality, so we avoid those as well.\n+    if !world.config.client_caps.code_action_literals {\n+        return Ok(None);\n+    }\n+\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.range);\n \n     let diagnostics = world.analysis().diagnostics(file_id)?;\n-    let mut res = CodeActionResponse::default();\n+    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n@@ -713,22 +718,9 @@ pub fn handle_code_action(\n \n     for source_edit in fixes_from_diagnostics {\n         let title = source_edit.label.clone();\n-        let edit = to_proto::source_change(&world, source_edit)?;\n-\n-        let command = Command {\n-            title,\n-            command: \"rust-analyzer.applySourceChange\".to_string(),\n-            arguments: Some(vec![to_value(edit).unwrap()]),\n-        };\n-        let action = CodeAction {\n-            title: command.title.clone(),\n-            kind: None,\n-            diagnostics: None,\n-            edit: None,\n-            command: Some(command),\n-            is_preferred: None,\n-        };\n-        res.push(action.into());\n+        let edit = to_proto::snippet_workspace_edit(&world, source_edit)?;\n+        let action = lsp_ext::CodeAction { title, kind: None, edit: Some(edit), command: None };\n+        res.push(action);\n     }\n \n     for fix in world.check_fixes.get(&file_id).into_iter().flatten() {\n@@ -748,8 +740,13 @@ pub fn handle_code_action(\n                 .entry(label.to_owned())\n                 .or_insert_with(|| {\n                     let idx = res.len();\n-                    let dummy = Command::new(String::new(), String::new(), None);\n-                    res.push(dummy.into());\n+                    let dummy = lsp_ext::CodeAction {\n+                        title: String::new(),\n+                        kind: None,\n+                        command: None,\n+                        edit: None,\n+                    };\n+                    res.push(dummy);\n                     (idx, Vec::new())\n                 })\n                 .1\n@@ -777,35 +774,10 @@ pub fn handle_code_action(\n                 command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n                 arguments: Some(vec![serde_json::Value::Array(arguments)]),\n             });\n-            res[idx] = CodeAction {\n-                title,\n-                kind: None,\n-                diagnostics: None,\n-                edit: None,\n-                command,\n-                is_preferred: None,\n-            }\n-            .into();\n+            res[idx] = lsp_ext::CodeAction { title, kind: None, edit: None, command };\n         }\n     }\n \n-    // If the client only supports commands then filter the list\n-    // and remove and actions that depend on edits.\n-    if !world.config.client_caps.code_action_literals {\n-        // FIXME: use drain_filter once it hits stable.\n-        res = res\n-            .into_iter()\n-            .filter_map(|it| match it {\n-                cmd @ lsp_types::CodeActionOrCommand::Command(_) => Some(cmd),\n-                lsp_types::CodeActionOrCommand::CodeAction(action) => match action.command {\n-                    Some(cmd) if action.edit.is_none() => {\n-                        Some(lsp_types::CodeActionOrCommand::Command(cmd))\n-                    }\n-                    _ => None,\n-                },\n-            })\n-            .collect();\n-    }\n     Ok(Some(res))\n }\n "}, {"sha": "2b1a3378f8ac1384b48a7915a414a6733256b1d7", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 100, "deletions": 30, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "patch": "@@ -112,6 +112,22 @@ pub(crate) fn text_edit(\n     lsp_types::TextEdit { range, new_text }\n }\n \n+pub(crate) fn snippet_text_edit(\n+    line_index: &LineIndex,\n+    line_endings: LineEndings,\n+    is_snippet: bool,\n+    indel: Indel,\n+) -> lsp_ext::SnippetTextEdit {\n+    let text_edit = text_edit(line_index, line_endings, indel);\n+    let insert_text_format =\n+        if is_snippet { Some(lsp_types::InsertTextFormat::Snippet) } else { None };\n+    lsp_ext::SnippetTextEdit {\n+        range: text_edit.range,\n+        new_text: text_edit.new_text,\n+        insert_text_format,\n+    }\n+}\n+\n pub(crate) fn text_edit_vec(\n     line_index: &LineIndex,\n     line_endings: LineEndings,\n@@ -441,20 +457,21 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n-pub(crate) fn text_document_edit(\n+pub(crate) fn snippet_text_document_edit(\n     world: &WorldSnapshot,\n+    is_snippet: bool,\n     source_file_edit: SourceFileEdit,\n-) -> Result<lsp_types::TextDocumentEdit> {\n+) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = versioned_text_document_identifier(world, source_file_edit.file_id, None)?;\n     let line_index = world.analysis().file_line_index(source_file_edit.file_id)?;\n     let line_endings = world.file_line_endings(source_file_edit.file_id);\n     let edits = source_file_edit\n         .edit\n         .as_indels()\n         .iter()\n-        .map(|it| text_edit(&line_index, line_endings, it.clone()))\n+        .map(|it| snippet_text_edit(&line_index, line_endings, is_snippet, it.clone()))\n         .collect();\n-    Ok(lsp_types::TextDocumentEdit { text_document, edits })\n+    Ok(lsp_ext::SnippetTextDocumentEdit { text_document, edits })\n }\n \n pub(crate) fn resource_op(\n@@ -500,20 +517,70 @@ pub(crate) fn source_change(\n             })\n         }\n     };\n-    let mut document_changes: Vec<lsp_types::DocumentChangeOperation> = Vec::new();\n+    let label = source_change.label.clone();\n+    let workspace_edit = self::snippet_workspace_edit(world, source_change)?;\n+    Ok(lsp_ext::SourceChange { label, workspace_edit, cursor_position })\n+}\n+\n+pub(crate) fn snippet_workspace_edit(\n+    world: &WorldSnapshot,\n+    source_change: SourceChange,\n+) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n+    let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n     for op in source_change.file_system_edits {\n         let op = resource_op(&world, op)?;\n-        document_changes.push(lsp_types::DocumentChangeOperation::Op(op));\n+        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Op(op));\n     }\n     for edit in source_change.source_file_edits {\n-        let edit = text_document_edit(&world, edit)?;\n-        document_changes.push(lsp_types::DocumentChangeOperation::Edit(edit));\n+        let edit = snippet_text_document_edit(&world, source_change.is_snippet, edit)?;\n+        document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n+    }\n+    let workspace_edit =\n+        lsp_ext::SnippetWorkspaceEdit { changes: None, document_changes: Some(document_changes) };\n+    Ok(workspace_edit)\n+}\n+\n+pub(crate) fn workspace_edit(\n+    world: &WorldSnapshot,\n+    source_change: SourceChange,\n+) -> Result<lsp_types::WorkspaceEdit> {\n+    assert!(!source_change.is_snippet);\n+    snippet_workspace_edit(world, source_change).map(|it| it.into())\n+}\n+\n+impl From<lsp_ext::SnippetWorkspaceEdit> for lsp_types::WorkspaceEdit {\n+    fn from(snippet_workspace_edit: lsp_ext::SnippetWorkspaceEdit) -> lsp_types::WorkspaceEdit {\n+        lsp_types::WorkspaceEdit {\n+            changes: None,\n+            document_changes: snippet_workspace_edit.document_changes.map(|changes| {\n+                lsp_types::DocumentChanges::Operations(\n+                    changes\n+                        .into_iter()\n+                        .map(|change| match change {\n+                            lsp_ext::SnippetDocumentChangeOperation::Op(op) => {\n+                                lsp_types::DocumentChangeOperation::Op(op)\n+                            }\n+                            lsp_ext::SnippetDocumentChangeOperation::Edit(edit) => {\n+                                lsp_types::DocumentChangeOperation::Edit(\n+                                    lsp_types::TextDocumentEdit {\n+                                        text_document: edit.text_document,\n+                                        edits: edit\n+                                            .edits\n+                                            .into_iter()\n+                                            .map(|edit| lsp_types::TextEdit {\n+                                                range: edit.range,\n+                                                new_text: edit.new_text,\n+                                            })\n+                                            .collect(),\n+                                    },\n+                                )\n+                            }\n+                        })\n+                        .collect(),\n+                )\n+            }),\n+        }\n     }\n-    let workspace_edit = lsp_types::WorkspaceEdit {\n-        changes: None,\n-        document_changes: Some(lsp_types::DocumentChanges::Operations(document_changes)),\n-    };\n-    Ok(lsp_ext::SourceChange { label: source_change.label, workspace_edit, cursor_position })\n }\n \n pub fn call_hierarchy_item(\n@@ -571,22 +638,25 @@ fn main() <fold>{\n     }\n }\n \n-pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_types::CodeAction> {\n-    let source_change = source_change(&world, assist.source_change)?;\n-    let arg = serde_json::to_value(source_change)?;\n-    let title = assist.label;\n-    let command = lsp_types::Command {\n-        title: title.clone(),\n-        command: \"rust-analyzer.applySourceChange\".to_string(),\n-        arguments: Some(vec![arg]),\n-    };\n+pub(crate) fn code_action(world: &WorldSnapshot, assist: Assist) -> Result<lsp_ext::CodeAction> {\n+    let res = if assist.source_change.is_snippet {\n+        lsp_ext::CodeAction {\n+            title: assist.label,\n+            kind: Some(String::new()),\n+            edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n+            command: None,\n+        }\n+    } else {\n+        let source_change = source_change(&world, assist.source_change)?;\n+        let arg = serde_json::to_value(source_change)?;\n+        let title = assist.label;\n+        let command = lsp_types::Command {\n+            title: title.clone(),\n+            command: \"rust-analyzer.applySourceChange\".to_string(),\n+            arguments: Some(vec![arg]),\n+        };\n \n-    Ok(lsp_types::CodeAction {\n-        title,\n-        kind: Some(String::new()),\n-        diagnostics: None,\n-        edit: None,\n-        command: Some(command),\n-        is_preferred: None,\n-    })\n+        lsp_ext::CodeAction { title, kind: Some(String::new()), edit: None, command: Some(command) }\n+    };\n+    Ok(res)\n }"}]}