{"sha": "4810cf1d1b27377e9c3633e4c1e820e197b270ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MTBjZjFkMWIyNzM3N2U5YzM2MzNlNGMxZTgyMGUxOTdiMjcwYWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T10:54:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T10:54:47Z"}, "message": "rustc_mir: don't hardcode InstanceDef::VtableShim behavior to Adjustment::DerefMove.", "tree": {"sha": "64b9a4ee28498ec45259f0b74089ca05a09ac93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b9a4ee28498ec45259f0b74089ca05a09ac93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4810cf1d1b27377e9c3633e4c1e820e197b270ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4810cf1d1b27377e9c3633e4c1e820e197b270ac", "html_url": "https://github.com/rust-lang/rust/commit/4810cf1d1b27377e9c3633e4c1e820e197b270ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4810cf1d1b27377e9c3633e4c1e820e197b270ac/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552ea447e48264036f7e67159358dec855e9c9ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/552ea447e48264036f7e67159358dec855e9c9ba", "html_url": "https://github.com/rust-lang/rust/commit/552ea447e48264036f7e67159358dec855e9c9ba"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "fc606db98be0c07bae05c16da53ac06ae260fd7f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4810cf1d1b27377e9c3633e4c1e820e197b270ac/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4810cf1d1b27377e9c3633e4c1e820e197b270ac/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=4810cf1d1b27377e9c3633e4c1e820e197b270ac", "patch": "@@ -35,7 +35,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         ty::InstanceDef::VtableShim(def_id) => {\n             build_call_shim(\n                 tcx,\n-                def_id,\n+                instance,\n                 Adjustment::DerefMove,\n                 CallKind::Direct(def_id),\n                 None,\n@@ -60,7 +60,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n             build_call_shim(\n                 tcx,\n-                def_id,\n+                instance,\n                 adjustment,\n                 CallKind::Indirect,\n                 Some(arg_tys)\n@@ -74,13 +74,13 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         ty::InstanceDef::ReifyShim(def_id) => {\n             build_call_shim(\n                 tcx,\n-                def_id,\n+                instance,\n                 Adjustment::Identity,\n                 CallKind::Direct(def_id),\n                 None\n             )\n         }\n-        ty::InstanceDef::ClosureOnceShim { call_once } => {\n+        ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n             let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n@@ -89,7 +89,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n             build_call_shim(\n                 tcx,\n-                call_once,\n+                instance,\n                 Adjustment::RefMut,\n                 CallKind::Direct(call_mut),\n                 None\n@@ -697,25 +697,38 @@ impl CloneShimBuilder<'tcx> {\n     }\n }\n \n-/// Builds a \"call\" shim for `def_id`. The shim calls the\n+/// Builds a \"call\" shim for `instance`. The shim calls the\n /// function specified by `call_kind`, first adjusting its first\n /// argument according to `rcvr_adjustment`.\n ///\n /// If `untuple_args` is a vec of types, the second argument of the\n /// function will be untupled as these types.\n fn build_call_shim<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    instance: ty::InstanceDef<'tcx>,\n     rcvr_adjustment: Adjustment,\n     call_kind: CallKind,\n     untuple_args: Option<&[Ty<'tcx>]>,\n ) -> BodyCache<'tcx> {\n-    debug!(\"build_call_shim(def_id={:?}, rcvr_adjustment={:?}, \\\n+    debug!(\"build_call_shim(instance={:?}, rcvr_adjustment={:?}, \\\n             call_kind={:?}, untuple_args={:?})\",\n-           def_id, rcvr_adjustment, call_kind, untuple_args);\n+           instance, rcvr_adjustment, call_kind, untuple_args);\n \n+    let def_id = instance.def_id();\n     let sig = tcx.fn_sig(def_id);\n-    let sig = tcx.erase_late_bound_regions(&sig);\n+    let mut sig = tcx.erase_late_bound_regions(&sig);\n+\n+    // FIXME(eddyb) avoid having this snippet both here and in\n+    // `Instance::fn_sig` (introduce `InstanceDef::fn_sig`?).\n+    if let ty::InstanceDef::VtableShim(..) = instance {\n+        // Modify fn(self, ...) to fn(self: *mut Self, ...)\n+        let mut inputs_and_output = sig.inputs_and_output.to_vec();\n+        let self_arg = &mut inputs_and_output[0];\n+        debug_assert!(tcx.generics_of(def_id).has_self && *self_arg == tcx.types.self_param);\n+        *self_arg = tcx.mk_mut_ptr(*self_arg);\n+        sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);\n+    }\n+\n     let span = tcx.def_span(def_id);\n \n     debug!(\"build_call_shim: sig={:?}\", sig);\n@@ -730,14 +743,7 @@ fn build_call_shim<'tcx>(\n     let rcvr = match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_l),\n         Adjustment::Deref => Operand::Copy(tcx.mk_place_deref(rcvr_l)),\n-        Adjustment::DerefMove => {\n-            // fn(Self, ...) -> fn(*mut Self, ...)\n-            let arg_ty = local_decls[rcvr_arg].ty;\n-            debug_assert!(tcx.generics_of(def_id).has_self && arg_ty == tcx.types.self_param);\n-            local_decls[rcvr_arg].ty = tcx.mk_mut_ptr(arg_ty);\n-\n-            Operand::Move(tcx.mk_place_deref(rcvr_l))\n-        }\n+        Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_l)),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n             let ref_rcvr = local_decls.push(temp_decl("}]}