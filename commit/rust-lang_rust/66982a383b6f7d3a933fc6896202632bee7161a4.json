{"sha": "66982a383b6f7d3a933fc6896202632bee7161a4", "node_id": "C_kwDOAAsO6NoAKDY2OTgyYTM4M2I2ZjdkM2E5MzNmYzY4OTYyMDI2MzJiZWU3MTYxYTQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-10T11:33:44Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-11T14:35:09Z"}, "message": "Prevent insta-stable no alloc shim support\n\nYou will need to add the following as replacement for the old __rust_*\ndefinitions when not using the alloc shim.\n\n    #[no_mangle]\n    static __rust_no_alloc_shim_is_unstable: u8 = 0;", "tree": {"sha": "ed731f72cfa4b15ef644e34a1bca986a580a588a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed731f72cfa4b15ef644e34a1bca986a580a588a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66982a383b6f7d3a933fc6896202632bee7161a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66982a383b6f7d3a933fc6896202632bee7161a4", "html_url": "https://github.com/rust-lang/rust/commit/66982a383b6f7d3a933fc6896202632bee7161a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66982a383b6f7d3a933fc6896202632bee7161a4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "145b0574efd63603f35beda4d6b69933c8a01c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/145b0574efd63603f35beda4d6b69933c8a01c1f", "html_url": "https://github.com/rust-lang/rust/commit/145b0574efd63603f35beda4d6b69933c8a01c1f"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "e87f6e820a1fcae6feeb67959990f25ab60cd7e0", "filename": "compiler/rustc_ast/src/expand/allocator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fexpand%2Fallocator.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -21,6 +21,8 @@ pub fn alloc_error_handler_name(alloc_error_handler_kind: AllocatorKind) -> &'st\n     }\n }\n \n+pub const NO_ALLOC_SHIM_IS_UNSTABLE: &str = \"__rust_no_alloc_shim_is_unstable\";\n+\n pub enum AllocatorTy {\n     Layout,\n     Ptr,"}, {"sha": "d4b1ae2b61383e655bf1cc832f853769187711e2", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -5,7 +5,7 @@ use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{\n     alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n-    ALLOCATOR_METHODS,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n };\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n@@ -94,4 +94,11 @@ fn codegen_inner(\n     let val = oom_strategy.should_panic();\n     data_ctx.define(Box::new([val]));\n     module.define_data(data_id, &data_ctx).unwrap();\n+\n+    let data_id =\n+        module.declare_data(NO_ALLOC_SHIM_IS_UNSTABLE, Linkage::Export, false, false).unwrap();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.set_align(1);\n+    data_ctx.define(Box::new([0]));\n+    module.define_data(data_id, &data_ctx).unwrap();\n }"}, {"sha": "13f88192bbc9005e9665ac0851dded4ac581e0ec", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -3,7 +3,7 @@ use gccjit::FnAttribute;\n use gccjit::{FunctionType, GlobalKind, ToRValue};\n use rustc_ast::expand::allocator::{\n     alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n-    ALLOCATOR_METHODS,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n };\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n@@ -127,4 +127,9 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let value = tcx.sess.opts.unstable_opts.oom.should_panic();\n     let value = context.new_rvalue_from_int(i8, value as i32);\n     global.global_set_initializer_rvalue(value);\n+\n+    let name = NO_ALLOC_SHIM_IS_UNSTABLE.to_string();\n+    let global = context.new_global(None, GlobalKind::Exported, i8, name);\n+    let value = context.new_rvalue_from_int(i8, 0);\n+    global.global_set_initializer_rvalue(value);\n }"}, {"sha": "a57508815d6f81ac9fdc5e61d4eddbb3d2b2b3a5", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -2,7 +2,7 @@ use crate::attributes;\n use libc::c_uint;\n use rustc_ast::expand::allocator::{\n     alloc_error_handler_name, default_fn_name, global_fn_name, AllocatorKind, AllocatorTy,\n-    ALLOCATOR_METHODS,\n+    ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE,\n };\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n@@ -161,6 +161,14 @@ pub(crate) unsafe fn codegen(\n     let llval = llvm::LLVMConstInt(i8, val as u64, False);\n     llvm::LLVMSetInitializer(ll_g, llval);\n \n+    let name = NO_ALLOC_SHIM_IS_UNSTABLE;\n+    let ll_g = llvm::LLVMRustGetOrInsertGlobal(llmod, name.as_ptr().cast(), name.len(), i8);\n+    if tcx.sess.target.default_hidden_visibility {\n+        llvm::LLVMRustSetVisibility(ll_g, llvm::Visibility::Hidden);\n+    }\n+    let llval = llvm::LLVMConstInt(i8, 0, False);\n+    llvm::LLVMSetInitializer(ll_g, llval);\n+\n     if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let dbg_cx = debuginfo::CodegenUnitDebugContext::new(llmod);\n         debuginfo::metadata::build_compile_unit_di_node(tcx, module_name, &dbg_cx);"}, {"sha": "23c531a22663e7c2b1ea1521921154184a6c80b6", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -2,7 +2,7 @@ use crate::base::allocator_kind_for_codegen;\n \n use std::collections::hash_map::Entry::*;\n \n-use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n+use rustc_ast::expand::allocator::{ALLOCATOR_METHODS, NO_ALLOC_SHIM_IS_UNSTABLE};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -241,6 +241,17 @@ fn exported_symbols_provider_local(\n                 used: false,\n             },\n         ));\n+\n+        let exported_symbol =\n+            ExportedSymbol::NoDefId(SymbolName::new(tcx, NO_ALLOC_SHIM_IS_UNSTABLE));\n+        symbols.push((\n+            exported_symbol,\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::Rust,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n+        ))\n     }\n \n     if tcx.sess.instrument_coverage() || tcx.sess.opts.cg.profile_generate.enabled() {"}, {"sha": "01d1fdc9b2a5530ac03e1e829fd4d4713f8c6908", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -37,6 +37,9 @@ extern \"Rust\" {\n     #[rustc_allocator_zeroed]\n     #[rustc_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n+\n+    #[cfg(not(bootstrap))]\n+    static __rust_no_alloc_shim_is_unstable: u8;\n }\n \n /// The global memory allocator.\n@@ -90,7 +93,14 @@ pub use std::alloc::Global;\n #[must_use = \"losing the pointer will leak memory\"]\n #[inline]\n pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n-    unsafe { __rust_alloc(layout.size(), layout.align()) }\n+    unsafe {\n+        // Make sure we don't accidentally allow omitting the allocator shim in\n+        // stable code until it is actually stabilized.\n+        #[cfg(not(bootstrap))]\n+        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);\n+\n+        __rust_alloc(layout.size(), layout.align())\n+    }\n }\n \n /// Deallocate memory with the global allocator."}, {"sha": "f88d695d87e1e57d40dbab9202a4559f3eba40be", "filename": "tests/codegen/alloc-optimisation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/tests%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/tests%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Falloc-optimisation.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -1,12 +1,13 @@\n //\n // no-system-llvm\n // compile-flags: -O\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n #[no_mangle]\n pub fn alloc_test(data: u32) {\n     // CHECK-LABEL: @alloc_test\n     // CHECK-NEXT: start:\n+    // CHECK-NEXT: {{.*}} load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1\n     // CHECK-NEXT: ret void\n     let x = Box::new(data);\n     drop(x);"}, {"sha": "6f477a796b65d6b1af2746bb28b747511a168d26", "filename": "tests/codegen/vec-optimizes-away.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66982a383b6f7d3a933fc6896202632bee7161a4/tests%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66982a383b6f7d3a933fc6896202632bee7161a4/tests%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-optimizes-away.rs?ref=66982a383b6f7d3a933fc6896202632bee7161a4", "patch": "@@ -1,12 +1,13 @@\n // ignore-debug: the debug assertions get in the way\n // no-system-llvm\n // compile-flags: -O\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n #[no_mangle]\n pub fn sum_me() -> i32 {\n     // CHECK-LABEL: @sum_me\n     // CHECK-NEXT: {{^.*:$}}\n+    // CHECK-NEXT: {{.*}} load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1\n     // CHECK-NEXT: ret i32 6\n     vec![1, 2, 3].iter().sum::<i32>()\n }"}]}