{"sha": "3c56a65bc42fa83edbcdfdb5357e99c5557755cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNTZhNjViYzQyZmE4M2VkYmNkZmRiNTM1N2U5OWM1NTU3NzU1Y2I=", "commit": {"author": {"name": "king6cong", "email": "king6cong@gmail.com", "date": "2019-12-24T03:59:57Z"}, "committer": {"name": "king6cong", "email": "king6cong@gmail.com", "date": "2019-12-24T04:44:05Z"}, "message": "reuse `capacity` variable in slice::repeat", "tree": {"sha": "3b5365ca7d6685d267a7b8c7c0552b21a69f2b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b5365ca7d6685d267a7b8c7c0552b21a69f2b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c56a65bc42fa83edbcdfdb5357e99c5557755cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c56a65bc42fa83edbcdfdb5357e99c5557755cb", "html_url": "https://github.com/rust-lang/rust/commit/3c56a65bc42fa83edbcdfdb5357e99c5557755cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c56a65bc42fa83edbcdfdb5357e99c5557755cb/comments", "author": {"login": "king6cong", "id": 302560, "node_id": "MDQ6VXNlcjMwMjU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/302560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/king6cong", "html_url": "https://github.com/king6cong", "followers_url": "https://api.github.com/users/king6cong/followers", "following_url": "https://api.github.com/users/king6cong/following{/other_user}", "gists_url": "https://api.github.com/users/king6cong/gists{/gist_id}", "starred_url": "https://api.github.com/users/king6cong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/king6cong/subscriptions", "organizations_url": "https://api.github.com/users/king6cong/orgs", "repos_url": "https://api.github.com/users/king6cong/repos", "events_url": "https://api.github.com/users/king6cong/events{/privacy}", "received_events_url": "https://api.github.com/users/king6cong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "king6cong", "id": 302560, "node_id": "MDQ6VXNlcjMwMjU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/302560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/king6cong", "html_url": "https://github.com/king6cong", "followers_url": "https://api.github.com/users/king6cong/followers", "following_url": "https://api.github.com/users/king6cong/following{/other_user}", "gists_url": "https://api.github.com/users/king6cong/gists{/gist_id}", "starred_url": "https://api.github.com/users/king6cong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/king6cong/subscriptions", "organizations_url": "https://api.github.com/users/king6cong/orgs", "repos_url": "https://api.github.com/users/king6cong/repos", "events_url": "https://api.github.com/users/king6cong/events{/privacy}", "received_events_url": "https://api.github.com/users/king6cong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cd03dee2b57216b5c95084a0b46de130946ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cd03dee2b57216b5c95084a0b46de130946ad7", "html_url": "https://github.com/rust-lang/rust/commit/a4cd03dee2b57216b5c95084a0b46de130946ad7"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7b83658fca60d03ad6e54c63ed6665adc5c262ec", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c56a65bc42fa83edbcdfdb5357e99c5557755cb/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c56a65bc42fa83edbcdfdb5357e99c5557755cb/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=3c56a65bc42fa83edbcdfdb5357e99c5557755cb", "patch": "@@ -450,7 +450,8 @@ impl<T> [T] {\n         // and `rem` is the remaining part of `n`.\n \n         // Using `Vec` to access `set_len()`.\n-        let mut buf = Vec::with_capacity(self.len().checked_mul(n).expect(\"capacity overflow\"));\n+        let capacity = self.len().checked_mul(n).expect(\"capacity overflow\");\n+        let mut buf = Vec::with_capacity(capacity);\n \n         // `2^expn` repetition is done by doubling `buf` `expn`-times.\n         buf.extend(self);\n@@ -476,7 +477,7 @@ impl<T> [T] {\n \n         // `rem` (`= n - 2^expn`) repetition is done by copying\n         // first `rem` repetitions from `buf` itself.\n-        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        let rem_len = capacity - buf.len(); // `self.len() * rem`\n         if rem_len > 0 {\n             // `buf.extend(buf[0 .. rem_len])`:\n             unsafe {\n@@ -487,8 +488,7 @@ impl<T> [T] {\n                     rem_len,\n                 );\n                 // `buf.len() + rem_len` equals to `buf.capacity()` (`= self.len() * n`).\n-                let buf_cap = buf.capacity();\n-                buf.set_len(buf_cap);\n+                buf.set_len(capacity);\n             }\n         }\n         buf"}]}