{"sha": "8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "node_id": "C_kwDOAAsO6NoAKDhjOTA0MGNlYWE3ZWUzMmU3N2M4ZThlYjgwMDIwODdhY2NiMTNhMzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T10:01:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T10:01:20Z"}, "message": "Auto merge of #9329 - xphoniex:fix-#9317, r=flip1995\n\nSkip `unnecessary_to_owned` when `t != t.to_string()`\n\nFixes #9317\n\nchangelog: [`unnecessary_to_owned`]: none", "tree": {"sha": "08f80e6d0e9941c50d44bae19bfc4f8acb84737a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f80e6d0e9941c50d44bae19bfc4f8acb84737a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "html_url": "https://github.com/rust-lang/rust/commit/8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679fa9f2bfbdb65f0eb7732fa20043fd0f6813a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/679fa9f2bfbdb65f0eb7732fa20043fd0f6813a8", "html_url": "https://github.com/rust-lang/rust/commit/679fa9f2bfbdb65f0eb7732fa20043fd0f6813a8"}, {"sha": "1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2aaf68de4989eaacf5b669da00b50dca8b41e0", "html_url": "https://github.com/rust-lang/rust/commit/1a2aaf68de4989eaacf5b669da00b50dca8b41e0"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "99b56da7a50c9786d0cfcde6729d3cb5e5040d39", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "patch": "@@ -3,7 +3,8 @@ use super::unnecessary_iter_cloned::{self, is_into_iter};\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{\n-    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, peel_mid_ty_refs,\n+    contains_ty, get_associated_type, get_iterator_item_ty, implements_trait, is_copy, is_type_diagnostic_item,\n+    peel_mid_ty_refs,\n };\n use clippy_utils::{meets_msrv, msrvs};\n \n@@ -279,7 +280,19 @@ fn check_other_call_arg<'tcx>(\n                 &trait_predicate.trait_ref.substs.iter().skip(1).collect::<Vec<_>>()[..],\n                 call_substs,\n             );\n-            implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n+            // if `expr` is a `String` and generic target is [u8], skip\n+            // (https://github.com/rust-lang/rust-clippy/issues/9317).\n+            if let [subst] = composed_substs[..]\n+                && let GenericArgKind::Type(arg_ty) = subst.unpack()\n+                && arg_ty.is_slice()\n+                && let inner_ty = arg_ty.builtin_index().unwrap()\n+                && let ty::Uint(ty::UintTy::U8) = inner_ty.kind()\n+                && let self_ty = cx.typeck_results().expr_ty(expr).peel_refs()\n+                && is_type_diagnostic_item(cx, self_ty, sym::String) {\n+                false\n+            } else {\n+                implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n+            }\n         } else {\n             false\n         };"}, {"sha": "9cd5bc73b1ec51852af3c2bbeae84cb5ddf05594", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "patch": "@@ -329,3 +329,31 @@ mod issue_8759_variant {\n         rw.set_view(&rw.default_view().to_owned());\n     }\n }\n+\n+mod issue_9317 {\n+    #![allow(dead_code)]\n+\n+    struct Bytes {}\n+\n+    impl ToString for Bytes {\n+        fn to_string(&self) -> String {\n+            \"123\".to_string()\n+        }\n+    }\n+\n+    impl AsRef<[u8]> for Bytes {\n+        fn as_ref(&self) -> &[u8] {\n+            &[1, 2, 3]\n+        }\n+    }\n+\n+    fn consume<C: AsRef<[u8]>>(c: C) {\n+        let _ = c;\n+    }\n+\n+    pub fn main() {\n+        let b = Bytes {};\n+        // Should not lint.\n+        consume(b.to_string());\n+    }\n+}"}, {"sha": "7f62ba3ab5d559ea0d8a60da23f977389044f054", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c9040ceaa7ee32e77c8e8eb8002087accb13a38/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=8c9040ceaa7ee32e77c8e8eb8002087accb13a38", "patch": "@@ -329,3 +329,31 @@ mod issue_8759_variant {\n         rw.set_view(&rw.default_view().to_owned());\n     }\n }\n+\n+mod issue_9317 {\n+    #![allow(dead_code)]\n+\n+    struct Bytes {}\n+\n+    impl ToString for Bytes {\n+        fn to_string(&self) -> String {\n+            \"123\".to_string()\n+        }\n+    }\n+\n+    impl AsRef<[u8]> for Bytes {\n+        fn as_ref(&self) -> &[u8] {\n+            &[1, 2, 3]\n+        }\n+    }\n+\n+    fn consume<C: AsRef<[u8]>>(c: C) {\n+        let _ = c;\n+    }\n+\n+    pub fn main() {\n+        let b = Bytes {};\n+        // Should not lint.\n+        consume(b.to_string());\n+    }\n+}"}]}