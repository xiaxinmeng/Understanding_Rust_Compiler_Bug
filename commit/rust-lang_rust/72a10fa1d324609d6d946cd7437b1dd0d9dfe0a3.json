{"sha": "72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTEwZmExZDMyNDYwOWQ2ZDk0NmNkNzQzN2IxZGQwZDlkZmUwYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-18T18:51:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-18T18:51:04Z"}, "message": "Auto merge of #28442 - nagisa:remove-enum-vis-field, r=alexcrichton\n\nFollowup on #28440 \r\n\r\nDo not merge before the referenced PR is merged. I will fix the PR once that is merged (or close if it is not)", "tree": {"sha": "1772b465abffb822364a3b7257f282911de80fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1772b465abffb822364a3b7257f282911de80fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "html_url": "https://github.com/rust-lang/rust/commit/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1c7975b015c14d4c26f2b07ab2b64f5fc66d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1c7975b015c14d4c26f2b07ab2b64f5fc66d3c", "html_url": "https://github.com/rust-lang/rust/commit/dc1c7975b015c14d4c26f2b07ab2b64f5fc66d3c"}, {"sha": "a9cb51cf0cf8adc8188097c019daeaf10822d20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb51cf0cf8adc8188097c019daeaf10822d20f", "html_url": "https://github.com/rust-lang/rust/commit/a9cb51cf0cf8adc8188097c019daeaf10822d20f"}], "stats": {"total": 66, "additions": 15, "deletions": 51}, "files": [{"sha": "1371799a051e2140be029e73b3bbd483bd5139cf", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -415,7 +415,7 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr, vis}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n@@ -430,7 +430,6 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n                 }\n             },\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            vis: vis,\n         },\n         span: fld.new_span(span),\n     })"}, {"sha": "c6426807db45bcf09c035149243d084a1c88e946", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1052,7 +1052,6 @@ pub struct Variant_ {\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n-    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;"}, {"sha": "f7f938eb92482bf85e01d4b582abc520eb6dd0af", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -147,7 +147,6 @@ pub fn lower_variant(v: &Variant) -> P<hir::Variant> {\n                 }\n             },\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(e)),\n-            vis: lower_visibility(v.node.vis),\n         },\n         span: v.span,\n     })"}, {"sha": "3930eec7561300ae9a9d74f2dcec0a3bb95c1cff", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -944,7 +944,6 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n-        try!(self.print_visibility(v.node.vis));\n         match v.node.kind {\n             hir::TupleVariantKind(ref args) => {\n                 try!(self.print_ident(v.node.name));"}, {"sha": "0384e7b693245e3025a6f4b2b6c412f0b518f265", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1075,20 +1075,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                                  instead\");\n             }\n \n-            hir::ItemEnum(ref def, _) => {\n-                for v in &def.variants {\n-                    match v.node.vis {\n-                        hir::Public => {\n-                            if item.vis == hir::Public {\n-                                span_err!(tcx.sess, v.span, E0448,\n-                                          \"unnecessary `pub` visibility\");\n-                            }\n-                        }\n-                        hir::Inherited => {}\n-                    }\n-                }\n-            }\n-\n+            hir::ItemEnum(..) |\n             hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemStruct(..) |\n             hir::ItemFn(..) | hir::ItemMod(..) | hir::ItemTy(..) |\n@@ -1131,14 +1118,10 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                     check_inherited(tcx, i.span, i.vis);\n                 }\n             }\n-            hir::ItemEnum(ref def, _) => {\n-                for v in &def.variants {\n-                    check_inherited(tcx, v.span, v.node.vis);\n-                }\n-            }\n \n             hir::ItemStruct(ref def, _) => check_struct(&**def),\n \n+            hir::ItemEnum(..) |\n             hir::ItemExternCrate(_) | hir::ItemUse(_) |\n             hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n             hir::ItemStatic(..) | hir::ItemConst(..) |"}, {"sha": "7ed572d7caa7df73e1fc475e4110261aec0fd9f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1850,7 +1850,7 @@ impl Clean<Item> for doctree::Variant {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: self.vis.clean(cx),\n+            visibility: None,\n             stability: self.stab.clean(cx),\n             def_id: DefId::local(self.id),\n             inner: VariantItem(Variant {"}, {"sha": "e2286ca819a00ed16e07f376d1cfff935d8853d8", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -121,7 +121,6 @@ pub struct Variant {\n     pub attrs: Vec<ast::Attribute>,\n     pub kind: hir::VariantKind,\n     pub id: ast::NodeId,\n-    pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,\n }"}, {"sha": "1a20a31560bd749b29d7b11bce65a55e1c7c06c0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -109,7 +109,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n-                vis: v.node.vis,\n                 stab: self.stability(v.node.id),\n                 id: v.node.id,\n                 kind: v.node.kind.clone(),"}, {"sha": "58d92f5001aaeffbc9d2c6c5df4382a384529864", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1614,7 +1614,6 @@ pub struct Variant_ {\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n-    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;"}, {"sha": "889a0d7e440e1e3d0e887aa2581aadbe6fec82bf", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -141,7 +141,7 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                     None\n                 } else {\n                     Some(v.map(|Spanned {node: ast::Variant_ {id, name, attrs, kind,\n-                                                              disr_expr, vis}, span}| {\n+                                                              disr_expr}, span}| {\n                         Spanned {\n                             node: ast::Variant_ {\n                                 id: id,\n@@ -154,7 +154,6 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                                     }\n                                 },\n                                 disr_expr: disr_expr,\n-                                vis: vis\n                             },\n                             span: span\n                         }"}, {"sha": "f8beb0e36e2c34ee869ffd40694260b458bc0090", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1013,7 +1013,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                    kind: ast::TupleVariantKind(args),\n                    id: ast::DUMMY_NODE_ID,\n                    disr_expr: None,\n-                   vis: ast::Public\n                })\n     }\n "}, {"sha": "a73cc420eeb04af11d89c517d0f4fb7911a0727c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -450,7 +450,7 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr, vis}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n@@ -465,7 +465,6 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n                 }\n             },\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            vis: vis,\n         },\n         span: fld.new_span(span),\n     })"}, {"sha": "87500142ccdf06207b6432f4ccccf495d53e5f9b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -5185,13 +5185,10 @@ impl<'a> Parser<'a> {\n             let variant_attrs = self.parse_outer_attributes();\n             let vlo = self.span.lo;\n \n-            let vis = try!(self.parse_visibility());\n-\n-            let ident;\n             let kind;\n             let mut args = Vec::new();\n             let mut disr_expr = None;\n-            ident = try!(self.parse_ident());\n+            let ident = try!(self.parse_ident());\n             if try!(self.eat(&token::OpenDelim(token::Brace)) ){\n                 // Parse a struct variant.\n                 all_nullary = false;\n@@ -5233,7 +5230,6 @@ impl<'a> Parser<'a> {\n                 kind: kind,\n                 id: ast::DUMMY_NODE_ID,\n                 disr_expr: disr_expr,\n-                vis: vis,\n             };\n             variants.push(P(spanned(vlo, self.last_span.hi, vr)));\n "}, {"sha": "6de6d32dfb32809569ee4068088cec8507878769", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1507,7 +1507,6 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> {\n-        try!(self.print_visibility(v.node.vis));\n         match v.node.kind {\n             ast::TupleVariantKind(ref args) => {\n                 try!(self.print_ident(v.node.name));\n@@ -3139,11 +3138,10 @@ mod tests {\n             kind: ast::TupleVariantKind(Vec::new()),\n             id: 0,\n             disr_expr: None,\n-            vis: ast::Public,\n         });\n \n         let varstr = variant_to_string(&var);\n-        assert_eq!(varstr, \"pub principal_skinner\");\n+        assert_eq!(varstr, \"principal_skinner\");\n     }\n \n     #[test]"}, {"sha": "3ca2213087d1f543f3608c1b3fd02274c3fab1c9", "filename": "src/test/compile-fail/issue-28433.rs", "status": "renamed", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::bird::{duck, goose};\n-\n-mod zoo {\n-    pub enum bird {\n-        pub duck, //~ ERROR: unnecessary `pub` visibility\n-        goose\n-    }\n+enum bird {\n+    pub duck,\n+    //~^ ERROR: expected identifier, found keyword `pub`\n+    //~^^ ERROR: expected\n+    goose\n }\n \n \n fn main() {\n-    let y = goose;\n+    let y = bird::goose;\n }", "previous_filename": "src/test/compile-fail/issue-3993-2.rs"}, {"sha": "fb6cdf7fa592442b53113eb782444b053ed7885b", "filename": "src/test/compile-fail/useless-pub.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs?ref=72a10fa1d324609d6d946cd7437b1dd0d9dfe0a3", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n struct A { pub i: isize }\n-pub enum C { pub Variant }      //~ ERROR: unnecessary `pub`\n \n pub trait E {\n     fn foo(&self);", "previous_filename": "src/test/compile-fail/useless-priv.rs"}]}