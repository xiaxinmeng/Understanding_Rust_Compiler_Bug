{"sha": "8829214764cf67c3184d8dbbeff4225292471f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjkyMTQ3NjRjZjY3YzMxODRkOGRiYmVmZjQyMjUyOTI0NzFmMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T05:33:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-03T05:33:03Z"}, "message": "Auto merge of #5994 - taiki-e:useless_attribute, r=phansch\n\nuseless_attribute: Permit wildcard_imports and enum_glob_use\n\nFixes #5918\n\nchangelog: `useless_attribute`: Permit `wildcard_imports` and `enum_glob_use` on `use` items", "tree": {"sha": "9ef0166a517e96708d780c44dd3159de106b8976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef0166a517e96708d780c44dd3159de106b8976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8829214764cf67c3184d8dbbeff4225292471f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8829214764cf67c3184d8dbbeff4225292471f0d", "html_url": "https://github.com/rust-lang/rust/commit/8829214764cf67c3184d8dbbeff4225292471f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8829214764cf67c3184d8dbbeff4225292471f0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31216b7036bd91e98dc16fe227eca574097d113", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31216b7036bd91e98dc16fe227eca574097d113", "html_url": "https://github.com/rust-lang/rust/commit/a31216b7036bd91e98dc16fe227eca574097d113"}, {"sha": "2e4b4cebbbb37efa5dc69dd2616f3b7a288b92aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4b4cebbbb37efa5dc69dd2616f3b7a288b92aa", "html_url": "https://github.com/rust-lang/rust/commit/2e4b4cebbbb37efa5dc69dd2616f3b7a288b92aa"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "c8f153e7201cb12988e0030f928446f7490bcda2", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8829214764cf67c3184d8dbbeff4225292471f0d/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8829214764cf67c3184d8dbbeff4225292471f0d/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=8829214764cf67c3184d8dbbeff4225292471f0d", "patch": "@@ -71,8 +71,9 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `extern crate` and `use` items annotated with\n     /// lint attributes.\n     ///\n-    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]` and\n-    /// `#[allow(unreachable_pub)]` on `use` items and `#[allow(unused_imports)]` on\n+    /// This lint permits `#[allow(unused_imports)]`, `#[allow(deprecated)]`,\n+    /// `#[allow(unreachable_pub)]`, `#[allow(clippy::wildcard_imports)]` and\n+    /// `#[allow(clippy::enum_glob_use)]` on `use` items and `#[allow(unused_imports)]` on\n     /// `extern crate` items with a `#[macro_use]` attribute.\n     ///\n     /// **Why is this bad?** Lint attributes have no effect on crate imports. Most\n@@ -318,7 +319,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                         if let Some(ident) = attr.ident() {\n                             match &*ident.as_str() {\n                                 \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                                    // permit `unused_imports`, `deprecated` and `unreachable_pub` for `use` items\n+                                    // permit `unused_imports`, `deprecated`, `unreachable_pub`,\n+                                    // `clippy::wildcard_imports`, and `clippy::enum_glob_use` for `use` items\n                                     // and `unused_imports` for `extern crate` items with `macro_use`\n                                     for lint in lint_list {\n                                         match item.kind {\n@@ -327,6 +329,9 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                                     || is_word(lint, sym!(deprecated))\n                                                     || is_word(lint, sym!(unreachable_pub))\n                                                     || is_word(lint, sym!(unused))\n+                                                    || extract_clippy_lint(lint)\n+                                                        .map_or(false, |s| s == \"wildcard_imports\")\n+                                                    || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n                                                 {\n                                                     return;\n                                                 }\n@@ -387,24 +392,25 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n }\n \n-fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n-    fn extract_name(lint: &NestedMetaItem) -> Option<SymbolStr> {\n-        if_chain! {\n-            if let Some(meta_item) = lint.meta_item();\n-            if meta_item.path.segments.len() > 1;\n-            if let tool_name = meta_item.path.segments[0].ident;\n-            if tool_name.as_str() == \"clippy\";\n-            let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            then {\n-                return Some(lint_name.as_str());\n-            }\n+/// Returns the lint name if it is clippy lint.\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+    if_chain! {\n+        if let Some(meta_item) = lint.meta_item();\n+        if meta_item.path.segments.len() > 1;\n+        if let tool_name = meta_item.path.segments[0].ident;\n+        if tool_name.as_str() == \"clippy\";\n+        let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n+        then {\n+            return Some(lint_name.as_str());\n         }\n-        None\n     }\n+    None\n+}\n \n+fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMetaItem]) {\n     let lint_store = cx.lints();\n     for lint in items {\n-        if let Some(lint_name) = extract_name(lint) {\n+        if let Some(lint_name) = extract_clippy_lint(lint) {\n             if let CheckLintNameResult::Tool(Err((None, _))) =\n                 lint_store.check_lint_name(&lint_name, Some(sym!(clippy)))\n             {"}, {"sha": "a5fcde768f18344ed7684116e0ce5f9aeeb52ee5", "filename": "tests/ui/useless_attribute.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.fixed?ref=8829214764cf67c3184d8dbbeff4225292471f0d", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #![allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "0396d39e3d54eff2151a4d43964c70cac8d86051", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=8829214764cf67c3184d8dbbeff4225292471f0d", "patch": "@@ -49,6 +49,14 @@ mod a {\n     pub use self::b::C;\n }\n \n+// don't lint on clippy::wildcard_imports for `use` items\n+#[allow(clippy::wildcard_imports)]\n+pub use std::io::prelude::*;\n+\n+// don't lint on clippy::enum_glob_use for `use` items\n+#[allow(clippy::enum_glob_use)]\n+pub use std::cmp::Ordering::*;\n+\n fn test_indented_attr() {\n     #[allow(clippy::almost_swapped)]\n     use std::collections::HashSet;"}, {"sha": "d0194e4bbbe5b0a3133c130a8ccd30a80402fd59", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8829214764cf67c3184d8dbbeff4225292471f0d/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=8829214764cf67c3184d8dbbeff4225292471f0d", "patch": "@@ -13,7 +13,7 @@ LL | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code)`\n \n error: useless lint attribute\n-  --> $DIR/useless_attribute.rs:53:5\n+  --> $DIR/useless_attribute.rs:61:5\n    |\n LL |     #[allow(clippy::almost_swapped)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![allow(clippy::almost_swapped)]`"}]}