{"sha": "c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "node_id": "C_kwDOAAsO6NoAKGMwYzY2MDNjNzkyODBjMzRhZWJhMTRmZWExYTVjZDNkMGU4Mjc1ZWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-17T02:22:06Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "Deduplicate errors that come from places like normalization, sized", "tree": {"sha": "719cd7bbe8870e1878aec6087757cb22534b6801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/719cd7bbe8870e1878aec6087757cb22534b6801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "html_url": "https://github.com/rust-lang/rust/commit/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24559ce2fedcda97c3273804dc8eb0bf756566eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24559ce2fedcda97c3273804dc8eb0bf756566eb", "html_url": "https://github.com/rust-lang/rust/commit/24559ce2fedcda97c3273804dc8eb0bf756566eb"}], "stats": {"total": 205, "additions": 53, "deletions": 152}, "files": [{"sha": "7c4d812a1b615cfcf2492a42e2a29241f02b689c", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -15,6 +15,7 @@ use crate::check::{\n use crate::structured_errors::StructuredDiagnostic;\n \n use rustc_ast as ast;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -1612,24 +1613,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n     ) {\n+        let mut remap_cause = FxHashSet::default();\n+        let mut not_adjusted = vec![];\n+\n         for error in errors {\n-            self.adjust_fulfillment_error_for_expr_obligation(error);\n+            let before_span = error.obligation.cause.span;\n+            if self.adjust_fulfillment_error_for_expr_obligation(error) {\n+                remap_cause.insert((\n+                    before_span,\n+                    error.obligation.predicate,\n+                    error.obligation.cause.clone(),\n+                ));\n+                remap_cause.insert((\n+                    before_span,\n+                    error.obligation.predicate.without_const(self.tcx),\n+                    error.obligation.cause.clone(),\n+                ));\n+            } else {\n+                not_adjusted.push(error);\n+            }\n+        }\n+\n+        for error in not_adjusted {\n+            for (span, predicate, cause) in &remap_cause {\n+                if *predicate == error.obligation.predicate\n+                    && span.contains(error.obligation.cause.span)\n+                {\n+                    error.obligation.cause = cause.clone();\n+                    continue;\n+                }\n+            }\n         }\n     }\n \n     fn adjust_fulfillment_error_for_expr_obligation(\n         &self,\n         error: &mut traits::FulfillmentError<'tcx>,\n-    ) {\n+    ) -> bool {\n         let (traits::ExprItemObligation(def_id, hir_id, idx) | traits::ExprBindingObligation(def_id, _, hir_id, idx))\n-            = *error.obligation.cause.code().peel_derives() else { return; };\n+            = *error.obligation.cause.code().peel_derives() else { return false; };\n \n         // Skip over mentioning async lang item\n         if Some(def_id) == self.tcx.lang_items().from_generator_fn()\n             && error.obligation.cause.span.desugaring_kind()\n                 == Some(rustc_span::DesugaringKind::Async)\n         {\n-            return;\n+            return false;\n         }\n         // Skip over closure arg mismatch, which has a better heuristic\n         // to determine what span to point at.\n@@ -1638,11 +1667,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ) = error.code\n             && let ty::Closure(..) | ty::Generator(..) = expected.skip_binder().self_ty().kind()\n         {\n-            return;\n+            return false;\n         }\n \n         let Some(unsubstituted_pred) =\n-            self.tcx.predicates_of(def_id).instantiate_identity(self.tcx).predicates.into_iter().nth(idx) else { return; };\n+            self.tcx.predicates_of(def_id).instantiate_identity(self.tcx).predicates.into_iter().nth(idx)\n+            else { return false; };\n \n         let generics = self.tcx.generics_of(def_id);\n         let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n@@ -1709,67 +1739,69 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     if let Some(param_to_point_at) = param_to_point_at\n                         && self.point_at_args_if_possible(error, def_id, param_to_point_at, *call_hir_id, callee.span, args) {\n-                        return;\n+                        return true;\n                     }\n \n                     if let Some(fallback_param_to_point_at) = fallback_param_to_point_at\n                         && self.point_at_args_if_possible(error, def_id, fallback_param_to_point_at, *call_hir_id, callee.span, args)\n                     {\n-                        return;\n+                        return true;\n                     }\n \n                     if let Some(self_param_to_point_at) = self_param_to_point_at\n                         && self.point_at_args_if_possible(error, def_id, self_param_to_point_at, *call_hir_id, callee.span, args)\n                     {\n-                        return;\n+                        return true;\n                     }\n \n                     if let hir::QPath::Resolved(_, path) = qpath\n                         && let Some(param_to_point_at) = param_to_point_at\n                         && let Some(segment) = path.segments.last()\n                         && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n                     {\n-                        return;\n+                        return true;\n                     }\n \n                     if let hir::QPath::TypeRelative(_, segment) = qpath\n                         && let Some(param_to_point_at) = param_to_point_at\n                         && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n                     {\n-                        return;\n+                        return true;\n                     }\n                 }\n             }\n             hir::Node::Expr(hir::Expr { kind: hir::ExprKind::MethodCall(segment, args, ..), .. }) => {\n                 if let Some(param_to_point_at) = param_to_point_at\n                     && self.point_at_args_if_possible(error, def_id, param_to_point_at, hir_id, segment.ident.span, args)\n                 {\n-                    return;\n+                    return true;\n                 }\n \n                 if let Some(fallback_param_to_point_at) = fallback_param_to_point_at\n                     && self.point_at_args_if_possible(error, def_id, fallback_param_to_point_at, hir_id, segment.ident.span, args)\n                 {\n-                    return;\n+                    return true;\n                 }\n \n                 if let Some(self_param_to_point_at) = self_param_to_point_at\n                     && self.point_at_args_if_possible(error, def_id, self_param_to_point_at, hir_id, segment.ident.span, args)\n                 {\n-                    return;\n+                    return true;\n                 }\n \n                 if let Some(param_to_point_at) = param_to_point_at\n                     && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n                 {\n-                    return;\n+                    return true;\n                 }\n             }\n             hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Struct(..), .. }) => {\n                 // fixme\n             }\n             _ => {}\n         }\n+\n+        false\n     }\n \n     fn find_ambiguous_parameter_in<T: TypeVisitable<'tcx>>("}, {"sha": "53b610c172392f2bed4cb7831c47c1ac15023012", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -8,14 +8,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:2:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:5:14\n    |\n@@ -35,14 +27,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:8:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:17:28\n    |\n@@ -53,14 +37,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:17:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:20:28\n    |\n@@ -71,14 +47,6 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:20:13\n-   |\n-LL |     let _ = Iterator::next(&mut ());\n-   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:23:14\n    |\n@@ -88,6 +56,6 @@ LL |     for _ in false {}\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required for `bool` to implement `IntoIterator`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d47a398412fe4e7b37ffe5db36e74818506f83ea", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -11,17 +11,6 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/multiple-impls.rs:33:5\n-   |\n-LL |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ trait message\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:35:33\n    |\n@@ -35,17 +24,6 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:35:5\n-   |\n-LL |     Index::index(&[] as &[i32], Foo(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Foo\n-   |\n-   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:37:33\n    |\n@@ -59,17 +37,6 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:37:5\n-   |\n-LL |     Index::index(&[] as &[i32], Bar(2u32));\n-   |     ^^^^^^^^^^^^ on impl for Bar\n-   |\n-   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = help: the following other types implement trait `Index<Idx>`:\n-             <[i32] as Index<Bar<usize>>>\n-             <[i32] as Index<Foo<usize>>>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "01315b854098ee4dee9d1c06703ce4cc3477dfac", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -9,15 +9,6 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n    = help: the trait `Index<usize>` is implemented for `[i32]`\n \n-error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n-  --> $DIR/on-impl.rs:22:5\n-   |\n-LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n-   |\n-   = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = help: the trait `Index<usize>` is implemented for `[i32]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "019305def2932ec3ce768e2895b19d86cf07cccb", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -28,17 +28,6 @@ note: required by a bound in `core::str::<impl str>::get`\n LL |     pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n-error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:4:15\n-   |\n-LL |     let _ = s.get(4);\n-   |               ^^^ string indices are ranges of `usize`\n-   |\n-   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n-   = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n-   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n    |\n@@ -57,17 +46,6 @@ note: required by a bound in `core::str::<impl str>::get_unchecked`\n LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n-error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-idx.rs:5:15\n-   |\n-LL |     let _ = s.get_unchecked(4);\n-   |               ^^^^^^^^^^^^^ string indices are ranges of `usize`\n-   |\n-   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n-   = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n-   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-\n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:19\n    |\n@@ -77,6 +55,6 @@ LL |     let _: u8 = s['c'];\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required for `str` to implement `Index<char>`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "b165c482590a253babc0ea50d99126542b863e65", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -52,17 +52,6 @@ note: required by a bound in `core::str::<impl str>::get_mut`\n LL |     pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n-error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-mut-idx.rs:9:7\n-   |\n-LL |     s.get_mut(1);\n-   |       ^^^^^^^ string indices are ranges of `usize`\n-   |\n-   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n-   = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n-   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n    |\n@@ -81,17 +70,6 @@ note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n-error[E0277]: the type `str` cannot be indexed by `{integer}`\n-  --> $DIR/str-mut-idx.rs:11:7\n-   |\n-LL |     s.get_unchecked_mut(1);\n-   |       ^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n-   |\n-   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n-   = note: you can use `.chars().nth()` or `.bytes().nth()`\n-           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n-   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n-\n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:7\n    |\n@@ -101,6 +79,6 @@ LL |     s['c'];\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required for `str` to implement `Index<char>`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d121932c842e35324a8a8f1060e4713f8dd8ab0c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0c6603c79280c34aeba14fea1a5cd3d0e8275eb/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=c0c6603c79280c34aeba14fea1a5cd3d0e8275eb", "patch": "@@ -13,19 +13,6 @@ note: required by a bound in `BufWriter::<W>::new`\n LL | impl<W: Write> BufWriter<W> {\n    |         ^^^^^ required by this bound in `BufWriter::<W>::new`\n \n-error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n-   |\n-LL |     let fp = BufWriter::new(fp);\n-   |              ^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n-   |\n-   = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n-note: required by a bound in `BufWriter`\n-  --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n-   |\n-LL | pub struct BufWriter<W: Write> {\n-   |                         ^^^^^ required by this bound in `BufWriter`\n-\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n@@ -55,7 +42,7 @@ LL | pub struct BufWriter<W: Write> {\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0599.\n For more information about an error, try `rustc --explain E0277`."}]}