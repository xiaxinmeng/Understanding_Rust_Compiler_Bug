{"sha": "4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTNiNWM0MmJhZjQ5OGIwZGQ4YWRiZTU5YWFlNjQ4YTJjZjZjMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T21:54:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-16T21:54:53Z"}, "message": "Auto merge of #60888 - Manishearth:rollup-oihtoyq, r=Manishearth\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #60207 (Outdent example, preserving nested fence)\n - #60278 (Document the `html_root_url` doc attribute value.)\n - #60597 (Do some simple constant propagation in the ConstProp pass)\n - #60837 (Update release notes for 1.35.0)\n - #60887 (Update clippy)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8051dc091599c2ee7c60d00488e02e4683020a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8051dc091599c2ee7c60d00488e02e4683020a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "html_url": "https://github.com/rust-lang/rust/commit/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5aa43325ad7629766b1183011f5bf5b2a1ea26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5aa43325ad7629766b1183011f5bf5b2a1ea26", "html_url": "https://github.com/rust-lang/rust/commit/7d5aa43325ad7629766b1183011f5bf5b2a1ea26"}, {"sha": "b80a906011e9a1c5d641af71db7a012da3700568", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80a906011e9a1c5d641af71db7a012da3700568", "html_url": "https://github.com/rust-lang/rust/commit/b80a906011e9a1c5d641af71db7a012da3700568"}], "stats": {"total": 333, "additions": 312, "deletions": 21}, "files": [{"sha": "4185961187b395d277272a31763c25d22662df16", "filename": "RELEASES.md", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -1,10 +1,108 @@\n+Version 1.35.0 (2019-05-23)\n+==========================\n+\n+Language\n+--------\n+- [`FnOnce`, `FnMut`, and the `Fn` traits are now implemented for `Box<FnOnce>`,\n+  `Box<FnMut>`, and `Box<Fn>` respectively.][59500]\n+- [You can now coerce closures into unsafe function pointers.][59580] e.g.\n+  ```rust\n+  unsafe fn call_unsafe(func: unsafe fn()) {\n+      func()\n+  }\n+\n+  pub fn main() {\n+      unsafe { call_unsafe(|| {}); }\n+  }\n+  ```\n+\n+\n+Compiler\n+--------\n+- [Added the `armv6-unknown-freebsd-gnueabihf` and\n+  `armv7-unknown-freebsd-gnueabihf` targets.][58080]\n+- [Added the `wasm32-unknown-wasi` target.][59464]\n+\n+\n+Libraries\n+---------\n+- [`Thread` will now show its ID in `Debug` output.][59460]\n+- [`StdinLock`, `StdoutLock`, and `StderrLock` now implement `AsRawFd`.][59512]\n+- [`alloc::System` now implements `Default`.][59451]\n+- [Expanded `Debug` output (`{:#?}`) for structs now has a trailing comma on the\n+  last field.][59076]\n+- [`char::{ToLowercase, ToUppercase}` now\n+  implement `ExactSizeIterator`.][58778]\n+- [All `NonZero` numeric types now implement `FromStr`.][58717]\n+- [Removed the `Read` trait bounds\n+  on the `BufReader::{get_ref, get_mut, into_inner}` methods.][58423]\n+- [You can now call the `dbg!` macro without any parameters to print the file\n+  and line where it is called.][57847]\n+- [In place ASCII case conversions are now up to 4\u00d7 faster.][59283]\n+  e.g. `str::make_ascii_lowercase`\n+- [`hash_map::{OccupiedEntry, VacantEntry}` now implement `Sync`\n+  and `Send`.][58369]\n+\n+Stabilized APIs\n+---------------\n+- [`f32::copysign`]\n+- [`f64::copysign`]\n+- [`RefCell::replace_with`]\n+- [`RefCell::map_split`]\n+- [`ptr::hash`]\n+- [`Range::contains`]\n+- [`RangeFrom::contains`]\n+- [`RangeTo::contains`]\n+- [`RangeInclusive::contains`]\n+- [`RangeToInclusive::contains`]\n+- [`Option::copied`]\n+\n+Cargo\n+-----\n+- [You can now set `cargo:rustc-cdylib-link-arg` at build time to pass custom\n+  linker arguments when building a `cdylib`.][cargo/6298] Its usage is highly\n+  platform specific.\n+  \n+Misc\n+----\n+- [The Rust toolchain is now available natively for musl based distros.][58575]\n+\n+[59460]: https://github.com/rust-lang/rust/pull/59460/\n+[59464]: https://github.com/rust-lang/rust/pull/59464/\n+[59500]: https://github.com/rust-lang/rust/pull/59500/\n+[59512]: https://github.com/rust-lang/rust/pull/59512/\n+[59580]: https://github.com/rust-lang/rust/pull/59580/\n+[59283]: https://github.com/rust-lang/rust/pull/59283/\n+[59451]: https://github.com/rust-lang/rust/pull/59451/\n+[59076]: https://github.com/rust-lang/rust/pull/59076/\n+[58778]: https://github.com/rust-lang/rust/pull/58778/\n+[58717]: https://github.com/rust-lang/rust/pull/58717/\n+[58369]: https://github.com/rust-lang/rust/pull/58369/\n+[58423]: https://github.com/rust-lang/rust/pull/58423/\n+[58080]: https://github.com/rust-lang/rust/pull/58080/\n+[57847]: https://github.com/rust-lang/rust/pull/57847/\n+[58575]: https://github.com/rust-lang/rust/pull/58575\n+[cargo/6298]: https://github.com/rust-lang/cargo/pull/6298/\n+[`f32::copysign`]: https://doc.rust-lang.org/stable/std/primitive.f32.html#method.copysign\n+[`f64::copysign`]: https://doc.rust-lang.org/stable/std/primitive.f64.html#method.copysign\n+[`RefCell::replace_with`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.replace_with\n+[`RefCell::map_split`]: https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html#method.map_split\n+[`ptr::hash`]: https://doc.rust-lang.org/stable/std/ptr/fn.hash.html\n+[`Range::contains`]: https://doc.rust-lang.org/std/ops/struct.Range.html#method.contains\n+[`RangeFrom::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeFrom.html#method.contains\n+[`RangeTo::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeTo.html#method.contains\n+[`RangeInclusive::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html#method.contains\n+[`RangeToInclusive::contains`]: https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html#method.contains\n+[`Option::copied`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.copied\n+\n Version 1.34.2 (2019-05-14)\n ===========================\n \n * [Destabilize the `Error::type_id` function due to a security\n-   vulnerability][60785]\n+   vulnerability][60785] ([CVE-2019-12083])\n \n [60785]: https://github.com/rust-lang/rust/pull/60785\n+[CVE-2019-12083]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12083\n \n Version 1.34.1 (2019-04-25)\n ==========================="}, {"sha": "b165c5a6b3b937fa6cd3ca1c5925e15cad6b06ef", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -92,6 +92,21 @@ the tracking issue.\n #![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n ```\n \n+### `html_root_url`\n+\n+The `#[doc(html_root_url = \"\u2026\")]` attribute value indicates the URL for\n+generating links to external crates. When rustdoc needs to generate a link to\n+an item in an external crate, it will first check if the extern crate has been\n+documented locally on-disk, and if so link directly to it. Failing that, it\n+will use the URL given by the `--extern-html-root-url` command-line flag if\n+available. If that is not available, then it will use the `html_root_url`\n+value in the extern crate if it is available. If that is not available, then\n+the extern items will not be linked.\n+\n+```rust,ignore\n+#![doc(html_root_url = \"https://docs.rs/serde/1.0\")]\n+```\n+\n ### `html_no_source`\n \n By default, `rustdoc` will include the source code of your program, with links"}, {"sha": "bbcacb7f3d5d9b05111fb1e2a1c52e105e2111c5", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -98,21 +98,21 @@ documentation for them as well!\n `rustdoc` can also generate HTML from standalone Markdown files. Let's\n give it a try: create a `README.md` file with these contents:\n \n-```text\n-    # Docs\n+````text\n+# Docs\n \n-    This is a project to test out `rustdoc`.\n+This is a project to test out `rustdoc`.\n \n-    [Here is a link!](https://www.rust-lang.org)\n+[Here is a link!](https://www.rust-lang.org)\n \n-    ## Subheading\n+## Subheading\n \n-    ```rust\n-    fn foo() -> i32 {\n-        1 + 1\n-    }\n-    ```\n+```rust\n+fn foo() -> i32 {\n+    1 + 1\n+}\n ```\n+````\n \n And call `rustdoc` on it:\n "}, {"sha": "4e214c3c7253ee71d8455d5e0cf5d6367a895041", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -3,23 +3,25 @@\n \n use rustc::hir::def::DefKind;\n use rustc::mir::{\n-    Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n     NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n };\n-use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n+use rustc::mir::visit::{\n+    Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n+};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n-use syntax::source_map::DUMMY_SP;\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError,\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use crate::interpret::{InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n+use crate::interpret::{self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n };\n@@ -497,6 +499,53 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             },\n         }\n     }\n+\n+    fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>, span: Span) -> Operand<'tcx> {\n+        Operand::Constant(Box::new(\n+            Constant {\n+                span,\n+                ty,\n+                user_ty: None,\n+                literal: self.tcx.mk_const(ty::Const::from_scalar(\n+                    scalar,\n+                    ty,\n+                ))\n+            }\n+        ))\n+    }\n+\n+    fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+        self.ecx.validate_operand(\n+            value,\n+            vec![],\n+            None,\n+            true,\n+        ).expect(\"value should already be a valid const\");\n+\n+        if let interpret::Operand::Immediate(im) = *value {\n+            match im {\n+                interpret::Immediate::Scalar(ScalarMaybeUndef::Scalar(scalar)) => {\n+                    *rval = Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, span));\n+                },\n+                Immediate::ScalarPair(\n+                    ScalarMaybeUndef::Scalar(one),\n+                    ScalarMaybeUndef::Scalar(two)\n+                ) => {\n+                    let ty = &value.layout.ty.sty;\n+                    if let ty::Tuple(substs) = ty {\n+                        *rval = Rvalue::Aggregate(\n+                            Box::new(AggregateKind::Tuple),\n+                            vec![\n+                                self.operand_from_scalar(one, substs[0].expect_ty(), span),\n+                                self.operand_from_scalar(two, substs[1].expect_ty(), span),\n+                            ],\n+                        );\n+                    }\n+                },\n+                _ => { }\n+            }\n+        }\n+    }\n }\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -560,10 +609,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     }\n }\n \n-impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n+impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     fn visit_constant(\n         &mut self,\n-        constant: &Constant<'tcx>,\n+        constant: &mut Constant<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_constant: {:?}\", constant);\n@@ -573,11 +622,11 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_statement(\n         &mut self,\n-        statement: &Statement<'tcx>,\n+        statement: &mut Statement<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n-        if let StatementKind::Assign(ref place, ref rval) = statement.kind {\n+        if let StatementKind::Assign(ref place, ref mut rval) = statement.kind {\n             let place_ty: Ty<'tcx> = place\n                 .ty(&self.local_decls, self.tcx)\n                 .ty;\n@@ -589,6 +638,10 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n                             assert!(self.places[local].is_none());\n                             self.places[local] = Some(value);\n+\n+                            if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n+                                self.replace_with_const(rval, value, statement.source_info.span);\n+                            }\n                         }\n                     }\n                 }\n@@ -599,7 +652,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_terminator(\n         &mut self,\n-        terminator: &Terminator<'tcx>,\n+        terminator: &mut Terminator<'tcx>,\n         location: Location,\n     ) {\n         self.super_terminator(terminator, location);"}, {"sha": "4b97af68ff08af727a4f923e58c95e9ed4e4bedf", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -0,0 +1,33 @@\n+fn main() {\n+    let x: u32 = [0, 1, 2, 3][2];\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = [const 0u32, const 1u32, const 2u32, const 3u32];\n+//      ...\n+//      _3 = const 2usize;\n+//      _4 = const 4usize;\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _1 = _2[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _5 = const true;\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _1 = _2[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "0718316307c5edbb5dda0f88983a9c33196079d8", "filename": "src/test/mir-opt/const_prop/checked_add.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.rs?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -C overflow-checks=on\n+\n+fn main() {\n+    let x: u32 = 1 + 1;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = CheckedAdd(const 1u32, const 1u32);\n+//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _2 = (const 2u32, const false);\n+//      assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "97d3abdcc6cbf758ad88867eecad57a2e79b7000", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -0,0 +1,34 @@\n+#[inline(never)]\n+fn read(_: usize) { }\n+\n+fn main() {\n+    const FOO: &i32 = &1;\n+    let x = FOO as *const i32 as usize;\n+    read(x);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = _4;\n+//      _2 = move _3 as *const i32 (Misc);\n+//      ...\n+//      _1 = move _2 as usize (Misc);\n+//      ...\n+//      _6 = _1;\n+//      _5 = const read(move _6) -> bb1;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = _4;\n+//      _2 = move _3 as *const i32 (Misc);\n+//      ...\n+//      _1 = move _2 as usize (Misc);\n+//      ...\n+//      _6 = _1;\n+//      _5 = const read(move _6) -> bb1;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "3435ca07f4cd8414c8c6894be6619bd9e1a5a3fb", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f53b5c42baf498b0dd8adbe59aae648a2cf6c14/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -0,0 +1,37 @@\n+fn test() -> &'static [u32] {\n+    &[1, 2]\n+}\n+\n+fn main() {\n+    let x = test()[0];\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb1: {\n+//      ...\n+//      _3 = const 0usize;\n+//      _4 = Len((*_2));\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//  }\n+//  bb2: {\n+//      _1 = (*_2)[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const 0usize;\n+//      _4 = Len((*_2));\n+//      _5 = Lt(_3, _4);\n+//      assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb2;\n+//  }\n+//  bb2: {\n+//      _1 = (*_2)[_3];\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "11194e3d050f45ff002a775f451ff6222fcd5b2c", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=4f53b5c42baf498b0dd8adbe59aae648a2cf6c14", "patch": "@@ -1 +1 @@\n-Subproject commit ad3269c4b510b94b7c0082f4bb341bee6ed1eca4\n+Subproject commit 11194e3d050f45ff002a775f451ff6222fcd5b2c"}]}