{"sha": "3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmIzMWUzZDZjMjVlNjdlMDE4ZTExNDY0YzM3NDhiZTlkMWVhZDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-12T03:42:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-12T03:42:16Z"}, "message": "Rollup merge of #58105 - Centril:libarena-trans-2018, r=oli-obk\n\nlibarena => 2018\n\nTransitions `libarena` to Rust 2018; cc https://github.com/rust-lang/rust/issues/58099\n\nr? @oli-obk", "tree": {"sha": "1618b206a1730b78a9baa40f722fad055bfb7fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1618b206a1730b78a9baa40f722fad055bfb7fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYkCZCRBK7hj4Ov3rIwAAdHIIAJSNWXKmBsImc2vQkB+7DWh3\n8jxtFMBk6VX6naNMrHoxicdt8cS4/LVGDmJ+WzzrKyYI3bIuuvyn3wdbdg+tmBV1\nnCFjlVHx7jxE6MU9F7Ysy0OURxI6ePTa5qsdEeebQOi4DDR4p4Sa1IGT8qfYzDc7\ndzwfft08hfTJpUYAhVXDi0Ppk/I8XzaOQ6VgUCiYj1T2vnm/OCr9ns2RqqyRG2MP\nctRa3LO4BWjFvhtysHH0gaTP8s3ixAgDWw0E6TduPanoexfDECfRGvzIxJuPG+VZ\nBEywZZkdHaewzmADtP2UtAamykkqCrNRIsnDV9cMiHwUfSm8WSWyEtHVh7jcmnA=\n=L4Gi\n-----END PGP SIGNATURE-----\n", "payload": "tree 1618b206a1730b78a9baa40f722fad055bfb7fce\nparent 16ca0b9f6335db824e44629be1cafb6e3fcc4628\nparent f996e2b6dc6768c4866b814d5c81a9972a240d10\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549942936 +0100\ncommitter GitHub <noreply@github.com> 1549942936 +0100\n\nRollup merge of #58105 - Centril:libarena-trans-2018, r=oli-obk\n\nlibarena => 2018\n\nTransitions `libarena` to Rust 2018; cc https://github.com/rust-lang/rust/issues/58099\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "html_url": "https://github.com/rust-lang/rust/commit/3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb31e3d6c25e67e018e11464c3748be9d1ead3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ca0b9f6335db824e44629be1cafb6e3fcc4628", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca0b9f6335db824e44629be1cafb6e3fcc4628", "html_url": "https://github.com/rust-lang/rust/commit/16ca0b9f6335db824e44629be1cafb6e3fcc4628"}, {"sha": "f996e2b6dc6768c4866b814d5c81a9972a240d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f996e2b6dc6768c4866b814d5c81a9972a240d10", "html_url": "https://github.com/rust-lang/rust/commit/f996e2b6dc6768c4866b814d5c81a9972a240d10"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "82fc64ba64e331645d075fbd879a6696e04cf523", "filename": "src/libarena/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb31e3d6c25e67e018e11464c3748be9d1ead3/src%2Flibarena%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb31e3d6c25e67e018e11464c3748be9d1ead3/src%2Flibarena%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2FCargo.toml?ref=3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "patch": "@@ -2,11 +2,12 @@\n authors = [\"The Rust Project Developers\"]\n name = \"arena\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"arena\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n\\ No newline at end of file\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "8ae046c0796bc53e8f57eaa413af43a7e1bad17e", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb31e3d6c25e67e018e11464c3748be9d1ead3/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb31e3d6c25e67e018e11464c3748be9d1ead3/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=3dbb31e3d6c25e67e018e11464c3748be9d1ead3", "patch": "@@ -11,17 +11,17 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(no_crate_inject, attr(deny(warnings))))]\n \n+#![deny(rust_2018_idioms)]\n+\n #![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![feature(nll)]\n #![feature(raw_vec_internals)]\n #![cfg_attr(test, feature(test))]\n \n #![allow(deprecated)]\n \n extern crate alloc;\n-extern crate rustc_data_structures;\n \n use rustc_data_structures::sync::MTLock;\n \n@@ -476,7 +476,7 @@ impl SyncDroplessArena {\n #[cfg(test)]\n mod tests {\n     extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n     use super::TypedArena;\n     use std::cell::Cell;\n \n@@ -511,15 +511,15 @@ mod tests {\n \n         impl<'a> Wrap<'a> {\n             fn alloc_inner<F: Fn() -> Inner>(&self, f: F) -> &Inner {\n-                let r: &EI = self.0.alloc(EI::I(f()));\n+                let r: &EI<'_> = self.0.alloc(EI::I(f()));\n                 if let &EI::I(ref i) = r {\n                     i\n                 } else {\n                     panic!(\"mismatch\");\n                 }\n             }\n-            fn alloc_outer<F: Fn() -> Outer<'a>>(&self, f: F) -> &Outer {\n-                let r: &EI = self.0.alloc(EI::O(f()));\n+            fn alloc_outer<F: Fn() -> Outer<'a>>(&self, f: F) -> &Outer<'_> {\n+                let r: &EI<'_> = self.0.alloc(EI::O(f()));\n                 if let &EI::O(ref o) = r {\n                     o\n                 } else {\n@@ -609,7 +609,7 @@ mod tests {\n         count: &'a Cell<u32>,\n     }\n \n-    impl<'a> Drop for DropCounter<'a> {\n+    impl Drop for DropCounter<'_> {\n         fn drop(&mut self) {\n             self.count.set(self.count.get() + 1);\n         }\n@@ -619,7 +619,7 @@ mod tests {\n     fn test_typed_arena_drop_count() {\n         let counter = Cell::new(0);\n         {\n-            let arena: TypedArena<DropCounter> = TypedArena::default();\n+            let arena: TypedArena<DropCounter<'_>> = TypedArena::default();\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak.\n                 arena.alloc(DropCounter { count: &counter });\n@@ -631,7 +631,7 @@ mod tests {\n     #[test]\n     fn test_typed_arena_drop_on_clear() {\n         let counter = Cell::new(0);\n-        let mut arena: TypedArena<DropCounter> = TypedArena::default();\n+        let mut arena: TypedArena<DropCounter<'_>> = TypedArena::default();\n         for i in 0..10 {\n             for _ in 0..100 {\n                 // Allocate something with drop glue to make sure it doesn't leak."}]}