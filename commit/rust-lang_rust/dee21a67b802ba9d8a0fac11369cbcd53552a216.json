{"sha": "dee21a67b802ba9d8a0fac11369cbcd53552a216", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTIxYTY3YjgwMmJhOWQ4YTBmYWMxMTM2OWNiY2Q1MzU1MmEyMTY=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-26T20:05:45Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-27T05:52:30Z"}, "message": "syntax: `Mod` records the span for inner contents.\n\nthis is useful when the module item and module contents are defined\nfrom different files (like rustdoc). in most cases the original span\nfor the module item would be used; in other cases, the span for\nmodule contents is available separately at the `inner` field.", "tree": {"sha": "7ac97ed73d4e5aab30fdaa5411ef8f802982e6cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac97ed73d4e5aab30fdaa5411ef8f802982e6cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee21a67b802ba9d8a0fac11369cbcd53552a216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee21a67b802ba9d8a0fac11369cbcd53552a216", "html_url": "https://github.com/rust-lang/rust/commit/dee21a67b802ba9d8a0fac11369cbcd53552a216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee21a67b802ba9d8a0fac11369cbcd53552a216/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a692e9b1234ff6573b0cfbc39394d9222eb38f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a692e9b1234ff6573b0cfbc39394d9222eb38f81", "html_url": "https://github.com/rust-lang/rust/commit/a692e9b1234ff6573b0cfbc39394d9222eb38f81"}], "stats": {"total": 44, "additions": 34, "deletions": 10}, "files": [{"sha": "4fc33c2ad9b14036b8427b1daaf90190088aa24f", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -70,6 +70,7 @@ fn fold_mod(cx: &mut Context, m: &ast::Mod) -> ast::Mod {\n         filter_view_item(cx, a).map(|x| cx.fold_view_item(x))\n     }).collect();\n     ast::Mod {\n+        inner: m.inner,\n         view_items: filtered_view_items,\n         items: flattened_items\n     }"}, {"sha": "685714cd74a5a8f2fb00312984f52ed62eca4699", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -143,6 +143,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         }\n \n         let mod_nomain = ast::Mod {\n+            inner: m.inner,\n             view_items: m.view_items.clone(),\n             items: m.items.iter().map(|i| nomain(&self.cx, *i)).collect(),\n         };\n@@ -335,6 +336,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::Item {\n     )).unwrap();\n \n     let testmod = ast::Mod {\n+        inner: DUMMY_SP,\n         view_items: view_items,\n         items: vec!(mainfn, tests),\n     };"}, {"sha": "3afc4b0e118bcddfbbecc9fbe273492a7fb14581", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -921,8 +921,12 @@ pub struct Method {\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct Mod {\n-    pub view_items: Vec<ViewItem> ,\n-    pub items: Vec<@Item> ,\n+    /// A span from the first token past `{` to the last token until `}`.\n+    /// For `mod foo;`, the inner span ranges from the first token\n+    /// to the last token in the external file.\n+    pub inner: Span,\n+    pub view_items: Vec<ViewItem>,\n+    pub items: Vec<@Item>,\n }\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n@@ -1165,7 +1169,15 @@ mod test {\n     fn check_asts_encodable() {\n         use std::io;\n         let e = Crate {\n-            module: Mod {view_items: Vec::new(), items: Vec::new()},\n+            module: Mod {\n+                inner: Span {\n+                    lo: BytePos(11),\n+                    hi: BytePos(19),\n+                    expn_info: None,\n+                },\n+                view_items: Vec::new(),\n+                items: Vec::new(),\n+            },\n             attrs: Vec::new(),\n             config: Vec::new(),\n             span: Span {"}, {"sha": "7e084ac263de40cd8c7166fac520a221b6fb52fd", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -220,7 +220,7 @@ pub trait AstBuilder {\n                         generics: Generics) -> @ast::Item;\n     fn item_struct(&self, span: Span, name: Ident, struct_def: ast::StructDef) -> @ast::Item;\n \n-    fn item_mod(&self, span: Span,\n+    fn item_mod(&self, span: Span, inner_span: Span,\n                 name: Ident, attrs: Vec<ast::Attribute> ,\n                 vi: Vec<ast::ViewItem> , items: Vec<@ast::Item> ) -> @ast::Item;\n \n@@ -898,7 +898,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item(span, name, Vec::new(), ast::ItemStruct(@struct_def, generics))\n     }\n \n-    fn item_mod(&self, span: Span, name: Ident,\n+    fn item_mod(&self, span: Span, inner_span: Span, name: Ident,\n                 attrs: Vec<ast::Attribute> ,\n                 vi: Vec<ast::ViewItem> ,\n                 items: Vec<@ast::Item> ) -> @ast::Item {\n@@ -907,6 +907,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             name,\n             attrs,\n             ast::ItemMod(ast::Mod {\n+                inner: inner_span,\n                 view_items: vi,\n                 items: items,\n             })"}, {"sha": "1e21c0d09869cd4b5a685cba4804a0feb0b30a2a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -654,6 +654,7 @@ pub fn noop_fold_type_method<T: Folder>(m: &TypeMethod, fld: &mut T) -> TypeMeth\n \n pub fn noop_fold_mod<T: Folder>(m: &Mod, folder: &mut T) -> Mod {\n     ast::Mod {\n+        inner: folder.new_span(m.inner),\n         view_items: m.view_items\n                      .iter()\n                      .map(|x| folder.fold_view_item(x)).collect(),"}, {"sha": "68dd38604d847f5bff6cd586ee91e9cb34b3e890", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee21a67b802ba9d8a0fac11369cbcd53552a216/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dee21a67b802ba9d8a0fac11369cbcd53552a216", "patch": "@@ -4036,7 +4036,8 @@ impl<'a> Parser<'a> {\n     // attributes (of length 0 or 1), parse all of the items in a module\n     fn parse_mod_items(&mut self,\n                        term: token::Token,\n-                       first_item_attrs: Vec<Attribute> )\n+                       first_item_attrs: Vec<Attribute>,\n+                       inner_lo: BytePos)\n                        -> Mod {\n         // parse all of the items up to closing or an attribute.\n         // view items are legal here.\n@@ -4081,7 +4082,11 @@ impl<'a> Parser<'a> {\n             self.span_err(self.last_span, \"expected item after attributes\");\n         }\n \n-        ast::Mod { view_items: view_items, items: items }\n+        ast::Mod {\n+            inner: mk_sp(inner_lo, self.span.lo),\n+            view_items: view_items,\n+            items: items\n+        }\n     }\n \n     fn parse_item_const(&mut self) -> ItemInfo {\n@@ -4107,8 +4112,9 @@ impl<'a> Parser<'a> {\n         } else {\n             self.push_mod_path(id, outer_attrs);\n             self.expect(&token::LBRACE);\n+            let mod_inner_lo = self.span.lo;\n             let (inner, next) = self.parse_inner_attrs_and_next();\n-            let m = self.parse_mod_items(token::RBRACE, next);\n+            let m = self.parse_mod_items(token::RBRACE, next, mod_inner_lo);\n             self.expect(&token::RBRACE);\n             self.pop_mod_path();\n             (id, ItemMod(m), Some(inner))\n@@ -4197,10 +4203,11 @@ impl<'a> Parser<'a> {\n                                      self.cfg.clone(),\n                                      &path,\n                                      id_sp);\n+        let mod_inner_lo = p0.span.lo;\n         let (inner, next) = p0.parse_inner_attrs_and_next();\n         let mod_attrs = outer_attrs.append(inner.as_slice());\n         let first_item_outer_attrs = next;\n-        let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n+        let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs, mod_inner_lo);\n         self.sess.included_mod_stack.borrow_mut().pop();\n         return (ast::ItemMod(m0), mod_attrs);\n     }\n@@ -5061,7 +5068,7 @@ impl<'a> Parser<'a> {\n         let (inner, next) = self.parse_inner_attrs_and_next();\n         let first_item_outer_attrs = next;\n         // parse the items inside the crate:\n-        let m = self.parse_mod_items(token::EOF, first_item_outer_attrs);\n+        let m = self.parse_mod_items(token::EOF, first_item_outer_attrs, lo);\n \n         ast::Crate {\n             module: m,"}]}