{"sha": "481c9bad80754670197cf28d8c6d43825d4404f0", "node_id": "C_kwDOAAsO6NoAKDQ4MWM5YmFkODA3NTQ2NzAxOTdjZjI4ZDhjNmQ0MzgyNWQ0NDA0ZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T01:45:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-03T01:45:33Z"}, "message": "Auto merge of #106386 - compiler-errors:rollup-dxjv18b, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #95985 (Add PhantomData marker to Context to make Context !Send and !Sync)\n - #104298 (Add notes and examples about non-intuitive `PathBuf::set_extension` behavior)\n - #105558 (Reduce HIR debug output)\n - #106315 (Cleanup `mingw-tidy` docker job)\n - #106354 (Rustdoc-Json: Report discriminant on all kinds of enum variant.)\n - #106366 (Fix rustdoc ICE on bad typedef with mismatching types)\n - #106376 (Update books)\n - #106383 (Document some of the AST nodes)\n\nFailed merges:\n\n - #106356 (clean: Remove `ctor_kind` from `VariantStruct`.)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "167683988db3fd23fc0934e428ea1236c6a6a176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/167683988db3fd23fc0934e428ea1236c6a6a176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481c9bad80754670197cf28d8c6d43825d4404f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481c9bad80754670197cf28d8c6d43825d4404f0", "html_url": "https://github.com/rust-lang/rust/commit/481c9bad80754670197cf28d8c6d43825d4404f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481c9bad80754670197cf28d8c6d43825d4404f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d16171d7eebc08057a46aeed887252e7cc286b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d16171d7eebc08057a46aeed887252e7cc286b", "html_url": "https://github.com/rust-lang/rust/commit/67d16171d7eebc08057a46aeed887252e7cc286b"}, {"sha": "d4cf00f03d35c651b7853935309342a4905943f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4cf00f03d35c651b7853935309342a4905943f4", "html_url": "https://github.com/rust-lang/rust/commit/d4cf00f03d35c651b7853935309342a4905943f4"}], "stats": {"total": 1083, "additions": 853, "deletions": 230}, "files": [{"sha": "c1b26ca0925380293e9fca902bf60119b53d4dcf", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -2743,8 +2743,19 @@ impl Item {\n /// `extern` qualifier on a function item or function type.\n #[derive(Clone, Copy, Encodable, Decodable, Debug)]\n pub enum Extern {\n+    /// No explicit extern keyword was used\n+    ///\n+    /// E.g. `fn foo() {}`\n     None,\n+    /// An explicit extern keyword was used, but with implicit ABI\n+    ///\n+    /// E.g. `extern fn foo() {}`\n+    ///\n+    /// This is just `extern \"C\"` (see `rustc_target::spec::abi::Abi::FALLBACK`)\n     Implicit(Span),\n+    /// An explicit extern keyword was used with an explicit ABI\n+    ///\n+    /// E.g. `extern \"C\" fn foo() {}`\n     Explicit(StrLit, Span),\n }\n \n@@ -2763,9 +2774,13 @@ impl Extern {\n /// included in this struct (e.g., `async unsafe fn` or `const extern \"C\" fn`).\n #[derive(Clone, Copy, Encodable, Decodable, Debug)]\n pub struct FnHeader {\n+    /// The `unsafe` keyword, if any\n     pub unsafety: Unsafe,\n+    /// The `async` keyword, if any\n     pub asyncness: Async,\n+    /// The `const` keyword, if any\n     pub constness: Const,\n+    /// The `extern` keyword and corresponding ABI string, if any\n     pub ext: Extern,\n }\n "}, {"sha": "c63caa06818f26e2f3f263d778c140ae5fc588aa", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,6 +1,7 @@\n use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n+use std::fmt::Debug;\n use std::mem;\n use std::ops::{Bound, Index, IndexMut, RangeBounds};\n \n@@ -16,7 +17,7 @@ pub use index_map::SortedIndexMultiMap;\n /// stores data in a more compact way. It also supports accessing contiguous\n /// ranges of elements as a slice, and slices of already sorted elements can be\n /// inserted efficiently.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub struct SortedMap<K, V> {\n     data: Vec<(K, V)>,\n }\n@@ -314,5 +315,11 @@ impl<K: HashStable<CTX> + StableOrd, V: HashStable<CTX>, CTX> HashStable<CTX> fo\n     }\n }\n \n+impl<K: Debug, V: Debug> Debug for SortedMap<K, V> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        f.debug_map().entries(self.data.iter().map(|(a, b)| (a, b))).finish()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "034f06bb889b61f47022102f0fcfe8abe9d5d5cc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -854,7 +854,11 @@ impl fmt::Debug for OwnerNodes<'_> {\n                 &self\n                     .nodes\n                     .iter_enumerated()\n-                    .map(|(id, parented_node)| (id, parented_node.as_ref().map(|node| node.parent)))\n+                    .map(|(id, parented_node)| {\n+                        let parented_node = parented_node.as_ref().map(|node| node.parent);\n+\n+                        debug_fn(move |f| write!(f, \"({id:?}, {parented_node:?})\"))\n+                    })\n                     .collect::<Vec<_>>(),\n             )\n             .field(\"bodies\", &self.bodies)\n@@ -3615,3 +3619,13 @@ mod size_asserts {\n     static_assert_size!(TyKind<'_>, 32);\n     // tidy-alphabetical-end\n }\n+\n+fn debug_fn(f: impl Fn(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n+    struct DebugFn<F>(F);\n+    impl<F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n+        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            (self.0)(fmt)\n+        }\n+    }\n+    DebugFn(f)\n+}"}, {"sha": "5d05adfb55654efb9184d872b62427aea6eefef3", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,14 +1,21 @@\n use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_ID};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableOrd, ToStableHashKey};\n use rustc_span::{def_id::DefPathHash, HashStableContext};\n-use std::fmt;\n+use std::fmt::{self, Debug};\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[derive(Encodable, Decodable)]\n pub struct OwnerId {\n     pub def_id: LocalDefId,\n }\n \n+impl Debug for OwnerId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Example: DefId(0:1 ~ aa[7697]::{use#0})\n+        Debug::fmt(&self.def_id, f)\n+    }\n+}\n+\n impl From<OwnerId> for HirId {\n     fn from(owner: OwnerId) -> HirId {\n         HirId { owner, local_id: ItemLocalId::from_u32(0) }\n@@ -60,14 +67,22 @@ impl<CTX: HashStableContext> ToStableHashKey<CTX> for OwnerId {\n /// the `local_id` part of the `HirId` changing, which is a very useful property in\n /// incremental compilation where we have to persist things through changes to\n /// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n #[rustc_pass_by_value]\n pub struct HirId {\n     pub owner: OwnerId,\n     pub local_id: ItemLocalId,\n }\n \n+impl Debug for HirId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Example: HirId(DefId(0:1 ~ aa[7697]::{use#0}).10)\n+        // Don't use debug_tuple to always keep this on one line.\n+        write!(f, \"HirId({:?}.{:?})\", self.owner, self.local_id)\n+    }\n+}\n+\n impl HirId {\n     /// Signal local id which should never be used.\n     pub const INVALID: HirId ="}, {"sha": "a4425fd234a4e22ad79ee3dfd4418464d80723ae", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -181,6 +181,9 @@ pub struct Context<'a> {\n     // are contravariant while return-position lifetimes are\n     // covariant).\n     _marker: PhantomData<fn(&'a ()) -> &'a ()>,\n+    // Ensure `Context` is `!Send` and `!Sync` in order to allow\n+    // for future `!Send` and / or `!Sync` fields.\n+    _marker2: PhantomData<*mut ()>,\n }\n \n impl<'a> Context<'a> {\n@@ -190,7 +193,7 @@ impl<'a> Context<'a> {\n     #[must_use]\n     #[inline]\n     pub const fn from_waker(waker: &'a Waker) -> Self {\n-        Context { waker, _marker: PhantomData }\n+        Context { waker, _marker: PhantomData, _marker2: PhantomData }\n     }\n \n     /// Returns a reference to the [`Waker`] for the current task."}, {"sha": "163b34c9648529463304ec451c8cbff083d2159c", "filename": "library/core/tests/task.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fcore%2Ftests%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fcore%2Ftests%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftask.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,4 +1,4 @@\n-use core::task::{Context, Poll, RawWaker, RawWakerVTable, Waker};\n+use core::task::{Poll, RawWaker, RawWakerVTable, Waker};\n \n #[test]\n fn poll_const() {\n@@ -21,9 +21,5 @@ fn waker_const() {\n \n     static WAKER: Waker = unsafe { Waker::from_raw(VOID_WAKER) };\n \n-    static CONTEXT: Context<'static> = Context::from_waker(&WAKER);\n-\n-    static WAKER_REF: &'static Waker = CONTEXT.waker();\n-\n-    WAKER_REF.wake_by_ref();\n+    WAKER.wake_by_ref();\n }"}, {"sha": "19d8f1edaf4c91087036159194f1c6f8b67034c0", "filename": "library/std/src/path.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1414,14 +1414,29 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates [`self.extension`] to `extension`.\n+    /// Updates [`self.extension`] to `Some(extension)` or to `None` if\n+    /// `extension` is empty.\n     ///\n     /// Returns `false` and does nothing if [`self.file_name`] is [`None`],\n     /// returns `true` and updates the extension otherwise.\n     ///\n     /// If [`self.extension`] is [`None`], the extension is added; otherwise\n     /// it is replaced.\n     ///\n+    /// If `extension` is the empty string, [`self.extension`] will be [`None`]\n+    /// afterwards, not `Some(\"\")`.\n+    ///\n+    /// # Caveats\n+    ///\n+    /// The new `extension` may contain dots and will be used in its entirety,\n+    /// but only the part after the final dot will be reflected in\n+    /// [`self.extension`].\n+    ///\n+    /// If the file stem contains internal dots and `extension` is empty, part\n+    /// of the old file stem will be considered the new [`self.extension`].\n+    ///\n+    /// See the examples below.\n+    ///\n     /// [`self.file_name`]: Path::file_name\n     /// [`self.extension`]: Path::extension\n     ///\n@@ -1435,8 +1450,20 @@ impl PathBuf {\n     /// p.set_extension(\"force\");\n     /// assert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n     ///\n-    /// p.set_extension(\"dark_side\");\n-    /// assert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());\n+    /// p.set_extension(\"dark.side\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.side\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"cookie\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.cookie\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {"}, {"sha": "dc0e591cad6f6f9aec51a1ab2eec129f01e9988b", "filename": "src/ci/docker/host-x86_64/mingw-check-tidy/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check-tidy%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check-tidy%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check-tidy%2FDockerfile?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -32,5 +32,4 @@ RUN pip3 install --no-deps --no-cache-dir --require-hashes -r /tmp/reuse-require\n COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n COPY host-x86_64/mingw-check/validate-error-codes.sh /scripts/\n \n-ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n ENV SCRIPT python3 ../x.py test --stage 0 src/tools/tidy tidyselftest"}, {"sha": "0db9c993eecb407f2fd72cb4a3a0a76ef3535cb4", "filename": "src/ci/run.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -184,11 +184,11 @@ if [ \"$RUN_CHECK_WITH_PARALLEL_QUERIES\" != \"\" ]; then\n   $SRC/configure --set rust.parallel-compiler\n \n   # Save the build metrics before we wipe the directory\n-  if [ $HAS_METRICS = 1 ]; then\n+  if [ \"$HAS_METRICS\" = 1 ]; then\n     mv build/metrics.json .\n   fi\n   rm -rf build\n-  if [ $HAS_METRICS = 1 ]; then\n+  if [ \"$HAS_METRICS\" = 1 ]; then\n     mkdir build\n     mv metrics.json build\n   fi"}, {"sha": "2bd5d42c9956369132228da6409f0e68da56c51a", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1 +1 @@\n-Subproject commit a60f4316ec923a5ac2ed6a2eba6960edb832d855\n+Subproject commit 2bd5d42c9956369132228da6409f0e68da56c51a"}, {"sha": "8ca261268068d80c0969260fff15199bad87b587", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1 +1 @@\n-Subproject commit dd37e21ccee43918ed18a71581bb2af537ffe4fc\n+Subproject commit 8ca261268068d80c0969260fff15199bad87b587"}, {"sha": "8888f9428fe9a48f31de6bd2cef9b9bf80791edc", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1 +1 @@\n-Subproject commit 995df09b65c582eb6290ab7ea5d9485983eb4c37\n+Subproject commit 8888f9428fe9a48f31de6bd2cef9b9bf80791edc"}, {"sha": "b3e2a6e6c8a3aae5b5d950c63046f23bae07096d", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1 +1 @@\n-Subproject commit 8b42eb5f57d3d8ed2257a22d0e850d9db52afed3\n+Subproject commit b3e2a6e6c8a3aae5b5d950c63046f23bae07096d"}, {"sha": "07a9c48365f446852ed5490e79902dfba0970f94", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1853,7 +1853,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Placeholder(..) => panic!(\"Placeholder\"),\n         ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n         ty::Infer(..) => panic!(\"Infer\"),\n-        ty::Error(_) => panic!(\"Error\"),\n+        ty::Error(_) => rustc_errors::FatalError.raise(),\n     }\n }\n \n@@ -1949,40 +1949,52 @@ pub(crate) fn clean_field_with_def_id(\n }\n \n pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n+    let discriminant = match variant.discr {\n+        ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n+        ty::VariantDiscr::Relative(_) => None,\n+    };\n+\n     let kind = match variant.ctor_kind() {\n-        Some(CtorKind::Const) => Variant::CLike(match variant.discr {\n-            ty::VariantDiscr::Explicit(def_id) => Some(Discriminant { expr: None, value: def_id }),\n-            ty::VariantDiscr::Relative(_) => None,\n-        }),\n-        Some(CtorKind::Fn) => Variant::Tuple(\n+        Some(CtorKind::Const) => VariantKind::CLike,\n+        Some(CtorKind::Fn) => VariantKind::Tuple(\n             variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         ),\n-        None => Variant::Struct(VariantStruct {\n+        None => VariantKind::Struct(VariantStruct {\n             ctor_kind: None,\n             fields: variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n         }),\n     };\n-    Item::from_def_id_and_parts(variant.def_id, Some(variant.name), VariantItem(kind), cx)\n+\n+    Item::from_def_id_and_parts(\n+        variant.def_id,\n+        Some(variant.name),\n+        VariantItem(Variant { kind, discriminant }),\n+        cx,\n+    )\n }\n \n fn clean_variant_data<'tcx>(\n     variant: &hir::VariantData<'tcx>,\n     disr_expr: &Option<hir::AnonConst>,\n     cx: &mut DocContext<'tcx>,\n ) -> Variant {\n-    match variant {\n-        hir::VariantData::Struct(..) => Variant::Struct(VariantStruct {\n+    let discriminant = disr_expr.map(|disr| Discriminant {\n+        expr: Some(disr.body),\n+        value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n+    });\n+\n+    let kind = match variant {\n+        hir::VariantData::Struct(..) => VariantKind::Struct(VariantStruct {\n             ctor_kind: None,\n             fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }),\n         hir::VariantData::Tuple(..) => {\n-            Variant::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n+            VariantKind::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n         }\n-        hir::VariantData::Unit(..) => Variant::CLike(disr_expr.map(|disr| Discriminant {\n-            expr: Some(disr.body),\n-            value: cx.tcx.hir().local_def_id(disr.hir_id).to_def_id(),\n-        })),\n-    }\n+        hir::VariantData::Unit(..) => VariantKind::CLike,\n+    };\n+\n+    Variant { discriminant, kind }\n }\n \n fn clean_path<'tcx>(path: &hir::Path<'tcx>, cx: &mut DocContext<'tcx>) -> Path {"}, {"sha": "77ec024262123ebb9dc6aa08ab721162c2a6431e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -807,8 +807,11 @@ impl ItemKind {\n         match self {\n             StructItem(s) => s.fields.iter(),\n             UnionItem(u) => u.fields.iter(),\n-            VariantItem(Variant::Struct(v)) => v.fields.iter(),\n-            VariantItem(Variant::Tuple(v)) => v.iter(),\n+            VariantItem(v) => match &v.kind {\n+                VariantKind::CLike => [].iter(),\n+                VariantKind::Tuple(t) => t.iter(),\n+                VariantKind::Struct(s) => s.fields.iter(),\n+            },\n             EnumItem(e) => e.variants.iter(),\n             TraitItem(t) => t.items.iter(),\n             ImplItem(i) => i.items.iter(),\n@@ -824,7 +827,6 @@ impl ItemKind {\n             | TyMethodItem(_)\n             | MethodItem(_, _)\n             | StructFieldItem(_)\n-            | VariantItem(_)\n             | ForeignFunctionItem(_)\n             | ForeignStaticItem(_)\n             | ForeignTypeItem\n@@ -2136,17 +2138,23 @@ impl Enum {\n }\n \n #[derive(Clone, Debug)]\n-pub(crate) enum Variant {\n-    CLike(Option<Discriminant>),\n+pub(crate) struct Variant {\n+    pub kind: VariantKind,\n+    pub discriminant: Option<Discriminant>,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub(crate) enum VariantKind {\n+    CLike,\n     Tuple(Vec<Item>),\n     Struct(VariantStruct),\n }\n \n impl Variant {\n     pub(crate) fn has_stripped_entries(&self) -> Option<bool> {\n-        match *self {\n-            Self::Struct(ref struct_) => Some(struct_.has_stripped_entries()),\n-            Self::CLike(..) | Self::Tuple(_) => None,\n+        match &self.kind {\n+            VariantKind::Struct(struct_) => Some(struct_.has_stripped_entries()),\n+            VariantKind::CLike | VariantKind::Tuple(_) => None,\n         }\n     }\n }"}, {"sha": "656aeefb01a4a807ea8aa8b418957544a28c356c", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -37,17 +37,21 @@ pub(crate) trait DocFolder: Sized {\n                 i.items = i.items.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 ImplItem(i)\n             }\n-            VariantItem(i) => match i {\n-                Variant::Struct(mut j) => {\n-                    j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    VariantItem(Variant::Struct(j))\n-                }\n-                Variant::Tuple(fields) => {\n-                    let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    VariantItem(Variant::Tuple(fields))\n-                }\n-                Variant::CLike(disr) => VariantItem(Variant::CLike(disr)),\n-            },\n+            VariantItem(Variant { kind, discriminant }) => {\n+                let kind = match kind {\n+                    VariantKind::Struct(mut j) => {\n+                        j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                        VariantKind::Struct(j)\n+                    }\n+                    VariantKind::Tuple(fields) => {\n+                        let fields = fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                        VariantKind::Tuple(fields)\n+                    }\n+                    VariantKind::CLike => VariantKind::CLike,\n+                };\n+\n+                VariantItem(Variant { kind, discriminant })\n+            }\n             ExternCrateItem { src: _ }\n             | ImportItem(_)\n             | FunctionItem(_)"}, {"sha": "40dfb06975067c7e149777f78bada90384203553", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1220,15 +1220,15 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                     w.write_str(\"    \");\n                     let name = v.name.unwrap();\n                     match *v.kind {\n-                        clean::VariantItem(ref var) => match var {\n-                            // FIXME(#101337): Show discriminant\n-                            clean::Variant::CLike(..) => write!(w, \"{}\", name),\n-                            clean::Variant::Tuple(ref s) => {\n+                        // FIXME(#101337): Show discriminant\n+                        clean::VariantItem(ref var) => match var.kind {\n+                            clean::VariantKind::CLike => write!(w, \"{}\", name),\n+                            clean::VariantKind::Tuple(ref s) => {\n                                 write!(w, \"{}(\", name);\n                                 print_tuple_struct_fields(w, cx, s);\n                                 w.write_str(\")\");\n                             }\n-                            clean::Variant::Struct(ref s) => {\n+                            clean::VariantKind::Struct(ref s) => {\n                                 render_struct(\n                                     w,\n                                     v,\n@@ -1286,25 +1286,28 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 \" rightside\",\n             );\n             write!(w, \"<h3 class=\\\"code-header\\\">{name}\", name = variant.name.unwrap());\n-            if let clean::VariantItem(clean::Variant::Tuple(ref s)) = *variant.kind {\n+\n+            let clean::VariantItem(variant_data) = &*variant.kind else { unreachable!() };\n+\n+            if let clean::VariantKind::Tuple(ref s) = variant_data.kind {\n                 w.write_str(\"(\");\n                 print_tuple_struct_fields(w, cx, s);\n                 w.write_str(\")\");\n             }\n             w.write_str(\"</h3></section>\");\n \n-            use crate::clean::Variant;\n-\n-            let heading_and_fields = match &*variant.kind {\n-                clean::VariantItem(Variant::Struct(s)) => Some((\"Fields\", &s.fields)),\n-                // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n-                // the section if at least one field is documented.\n-                clean::VariantItem(Variant::Tuple(fields))\n-                    if fields.iter().any(|f| f.doc_value().is_some()) =>\n-                {\n-                    Some((\"Tuple Fields\", fields))\n+            let heading_and_fields = match &variant_data.kind {\n+                clean::VariantKind::Struct(s) => Some((\"Fields\", &s.fields)),\n+                clean::VariantKind::Tuple(fields) => {\n+                    // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n+                    // the section if at least one field is documented.\n+                    if fields.iter().any(|f| f.doc_value().is_some()) {\n+                        Some((\"Tuple Fields\", fields))\n+                    } else {\n+                        None\n+                    }\n                 }\n-                _ => None,\n+                clean::VariantKind::CLike => None,\n             };\n \n             if let Some((heading, fields)) = heading_and_fields {"}, {"sha": "84af194904d1bca771e5b84fcb718180fa5d9943", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -646,15 +646,20 @@ impl FromWithTcx<clean::Enum> for Enum {\n \n impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n-        use clean::Variant::*;\n-        match variant {\n-            CLike(disr) => Variant::Plain(disr.map(|disr| disr.into_tcx(tcx))),\n-            Tuple(fields) => Variant::Tuple(ids_keeping_stripped(fields, tcx)),\n-            Struct(s) => Variant::Struct {\n+        use clean::VariantKind::*;\n+\n+        let discriminant = variant.discriminant.map(|d| d.into_tcx(tcx));\n+\n+        let kind = match variant.kind {\n+            CLike => VariantKind::Plain,\n+            Tuple(fields) => VariantKind::Tuple(ids_keeping_stripped(fields, tcx)),\n+            Struct(s) => VariantKind::Struct {\n                 fields_stripped: s.has_stripped_entries(),\n                 fields: ids(s.fields, tcx),\n             },\n-        }\n+        };\n+\n+        Variant { kind, discriminant }\n     }\n }\n "}, {"sha": "bf111133b9f7f5f85ef2fdbfdebe54843d422802", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -132,7 +132,10 @@ impl<'a, 'tcx> DocFolder for Stripper<'a, 'tcx> {\n             // implementations of traits are always public.\n             clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n             // Variant fields have inherited visibility\n-            clean::VariantItem(clean::Variant::Struct(..) | clean::Variant::Tuple(..)) => true,\n+            clean::VariantItem(clean::Variant {\n+                kind: clean::VariantKind::Struct(..) | clean::VariantKind::Tuple(..),\n+                ..\n+            }) => true,\n             _ => false,\n         };\n "}, {"sha": "390b9436121951206463db0210b4f407609c1c2d", "filename": "src/librustdoc/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Flibrustdoc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -17,10 +17,10 @@ pub(crate) trait DocVisitor: Sized {\n             EnumItem(i) => i.variants.iter().for_each(|x| self.visit_item(x)),\n             TraitItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n             ImplItem(i) => i.items.iter().for_each(|x| self.visit_item(x)),\n-            VariantItem(i) => match i {\n-                Variant::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n-                Variant::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n-                Variant::CLike(_) => {}\n+            VariantItem(i) => match &i.kind {\n+                VariantKind::Struct(j) => j.fields.iter().for_each(|x| self.visit_item(x)),\n+                VariantKind::Tuple(fields) => fields.iter().for_each(|x| self.visit_item(x)),\n+                VariantKind::CLike => {}\n             },\n             ExternCrateItem { src: _ }\n             | ImportItem(_)"}, {"sha": "387d5787dfcb25fe0348bd0daf998796595c5359", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 23;\n+pub const FORMAT_VERSION: u32 = 24;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -333,19 +333,26 @@ pub struct Enum {\n     pub impls: Vec<Id>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct Variant {\n+    /// Whether the variant is plain, a tuple-like, or struct-like. Contains the fields.\n+    pub kind: VariantKind,\n+    /// The discriminant, if explicitly specified.\n+    pub discriminant: Option<Discriminant>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n-#[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n-pub enum Variant {\n-    /// A variant with no parentheses, and possible discriminant.\n+pub enum VariantKind {\n+    /// A variant with no parentheses\n     ///\n     /// ```rust\n     /// enum Demo {\n     ///     PlainVariant,\n     ///     PlainWithDiscriminant = 1,\n     /// }\n     /// ```\n-    Plain(Option<Discriminant>),\n+    Plain,\n     /// A variant with unnamed fields.\n     ///\n     /// Unlike most of json, `#[doc(hidden)]` fields will be given as `None`"}, {"sha": "06906df3b2c64abed8e5e711db781e987d32d270", "filename": "src/test/rustdoc-json/enums/discriminant/basic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fbasic.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,12 +1,12 @@\n #[repr(i8)]\n pub enum Ordering {\n-    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.expr\" '\"-1\"'\n-    // @is \"$.index[*][?(@.name=='Less')].inner.variant_inner.value\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.expr\" '\"-1\"'\n+    // @is \"$.index[*][?(@.name=='Less')].inner.discriminant.value\" '\"-1\"'\n     Less = -1,\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.expr\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Equal')].inner.variant_inner.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Equal')].inner.discriminant.value\" '\"0\"'\n     Equal = 0,\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.expr\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Greater')].inner.variant_inner.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.expr\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Greater')].inner.discriminant.value\" '\"1\"'\n     Greater = 1,\n }"}, {"sha": "e639965e79b428e180ed94a959dd3d5219e10365", "filename": "src/test/rustdoc-json/enums/discriminant/expr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fexpr.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,30 +1,30 @@\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Addition')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Addition')].inner.discriminant.expr\" '\"{ _ }\"'\n     Addition = 0 + 0,\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.value\" '\"1\"'\n-    // @is \"$.index[*][?(@.name=='Bin')].inner.variant_inner.expr\" '\"0b1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.value\" '\"1\"'\n+    // @is \"$.index[*][?(@.name=='Bin')].inner.discriminant.expr\" '\"0b1\"'\n     Bin = 0b1,\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.value\" '\"2\"'\n-    // @is \"$.index[*][?(@.name=='Oct')].inner.variant_inner.expr\" '\"0o2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.value\" '\"2\"'\n+    // @is \"$.index[*][?(@.name=='Oct')].inner.discriminant.expr\" '\"0o2\"'\n     Oct = 0o2,\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.value\" '\"3\"'\n-    // @is \"$.index[*][?(@.name=='PubConst')].inner.variant_inner.expr\" '\"THREE\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.value\" '\"3\"'\n+    // @is \"$.index[*][?(@.name=='PubConst')].inner.discriminant.expr\" '\"THREE\"'\n     PubConst = THREE,\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.value\" '\"4\"'\n-    // @is \"$.index[*][?(@.name=='Hex')].inner.variant_inner.expr\" '\"0x4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.value\" '\"4\"'\n+    // @is \"$.index[*][?(@.name=='Hex')].inner.discriminant.expr\" '\"0x4\"'\n     Hex = 0x4,\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.value\" '\"5\"'\n-    // @is \"$.index[*][?(@.name=='Cast')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.value\" '\"5\"'\n+    // @is \"$.index[*][?(@.name=='Cast')].inner.discriminant.expr\" '\"{ _ }\"'\n     Cast = 5 as isize,\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.value\" '\"6\"'\n-    // @is \"$.index[*][?(@.name=='PubCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.value\" '\"6\"'\n+    // @is \"$.index[*][?(@.name=='PubCall')].inner.discriminant.expr\" '\"{ _ }\"'\n     PubCall = six(),\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.value\" '\"7\"'\n-    // @is \"$.index[*][?(@.name=='PrivCall')].inner.variant_inner.expr\" '\"{ _ }\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.value\" '\"7\"'\n+    // @is \"$.index[*][?(@.name=='PrivCall')].inner.discriminant.expr\" '\"{ _ }\"'\n     PrivCall = seven(),\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.value\" '\"8\"'\n-    // @is \"$.index[*][?(@.name=='PrivConst')].inner.variant_inner.expr\" '\"EIGHT\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.value\" '\"8\"'\n+    // @is \"$.index[*][?(@.name=='PrivConst')].inner.discriminant.expr\" '\"EIGHT\"'\n     PrivConst = EIGHT,\n }\n "}, {"sha": "e56d5594f2fc915730be2531d85e2f47e43fa20d", "filename": "src/test/rustdoc-json/enums/discriminant/limits.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Flimits.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -4,40 +4,40 @@\n \n #[repr(u64)]\n pub enum U64 {\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U64Min')].inner.variant_inner.expr\" '\"u64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U64Min')].inner.discriminant.expr\" '\"u64::MIN\"'\n     U64Min = u64::MIN,\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.value\" '\"18446744073709551615\"'\n-    // @is \"$.index[*][?(@.name=='U64Max')].inner.variant_inner.expr\" '\"u64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.value\" '\"18446744073709551615\"'\n+    // @is \"$.index[*][?(@.name=='U64Max')].inner.discriminant.expr\" '\"u64::MAX\"'\n     U64Max = u64::MAX,\n }\n \n #[repr(i64)]\n pub enum I64 {\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.value\" '\"-9223372036854775808\"'\n-    // @is \"$.index[*][?(@.name=='I64Min')].inner.variant_inner.expr\" '\"i64::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.value\" '\"-9223372036854775808\"'\n+    // @is \"$.index[*][?(@.name=='I64Min')].inner.discriminant.expr\" '\"i64::MIN\"'\n     I64Min = i64::MIN,\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.value\" '\"9223372036854775807\"'\n-    // @is \"$.index[*][?(@.name=='I64Max')].inner.variant_inner.expr\" '\"i64::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.value\" '\"9223372036854775807\"'\n+    // @is \"$.index[*][?(@.name=='I64Max')].inner.discriminant.expr\" '\"i64::MAX\"'\n     I64Max = i64::MAX,\n }\n \n #[repr(u128)]\n pub enum U128 {\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='U128Min')].inner.variant_inner.expr\" '\"u128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='U128Min')].inner.discriminant.expr\" '\"u128::MIN\"'\n     U128Min = u128::MIN,\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.value\" '\"340282366920938463463374607431768211455\"'\n-    // @is \"$.index[*][?(@.name=='U128Max')].inner.variant_inner.expr\" '\"u128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.value\" '\"340282366920938463463374607431768211455\"'\n+    // @is \"$.index[*][?(@.name=='U128Max')].inner.discriminant.expr\" '\"u128::MAX\"'\n     U128Max = u128::MAX,\n }\n \n #[repr(i128)]\n pub enum I128 {\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.value\" '\"-170141183460469231731687303715884105728\"'\n-    // @is \"$.index[*][?(@.name=='I128Min')].inner.variant_inner.expr\" '\"i128::MIN\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.value\" '\"-170141183460469231731687303715884105728\"'\n+    // @is \"$.index[*][?(@.name=='I128Min')].inner.discriminant.expr\" '\"i128::MIN\"'\n     I128Min = i128::MIN,\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.value\" '\"170141183460469231731687303715884105727\"'\n-    // @is \"$.index[*][?(@.name=='I128Max')].inner.variant_inner.expr\" '\"i128::MAX\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.value\" '\"170141183460469231731687303715884105727\"'\n+    // @is \"$.index[*][?(@.name=='I128Max')].inner.discriminant.expr\" '\"i128::MAX\"'\n     I128Max = i128::MAX,\n }"}, {"sha": "6889b305ffb41b32c475100bfe62afd7ad5b86ad", "filename": "src/test/rustdoc-json/enums/discriminant/num_underscore_and_suffix.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fnum_underscore_and_suffix.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,15 +1,15 @@\n #[repr(u32)]\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.value\" '\"0\"'\n-    // @is \"$.index[*][?(@.name=='Basic')].inner.variant_inner.expr\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.value\" '\"0\"'\n+    // @is \"$.index[*][?(@.name=='Basic')].inner.discriminant.expr\" '\"0\"'\n     Basic = 0,\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.value\" '\"10\"'\n-    // @is \"$.index[*][?(@.name=='Suffix')].inner.variant_inner.expr\" '\"10u32\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.value\" '\"10\"'\n+    // @is \"$.index[*][?(@.name=='Suffix')].inner.discriminant.expr\" '\"10u32\"'\n     Suffix = 10u32,\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.value\" '\"100\"'\n-    // @is \"$.index[*][?(@.name=='Underscore')].inner.variant_inner.expr\" '\"1_0_0\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.value\" '\"100\"'\n+    // @is \"$.index[*][?(@.name=='Underscore')].inner.discriminant.expr\" '\"1_0_0\"'\n     Underscore = 1_0_0,\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.value\" '\"1000\"'\n-    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.variant_inner.expr\" '\"1_0_0_0u32\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.value\" '\"1000\"'\n+    // @is \"$.index[*][?(@.name=='SuffixUnderscore')].inner.discriminant.expr\" '\"1_0_0_0u32\"'\n     SuffixUnderscore = 1_0_0_0u32,\n }"}, {"sha": "6a4f54de617454a7528bc299db0e0edf81439d6c", "filename": "src/test/rustdoc-json/enums/discriminant/only_some_have_discriminant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fonly_some_have_discriminant.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,10 +1,10 @@\n pub enum Foo {\n-    // @is \"$.index[*][?(@.name=='Has')].inner.variant_inner\" '{\"expr\":\"0\", \"value\":\"0\"}'\n+    // @is \"$.index[*][?(@.name=='Has')].inner.discriminant\" '{\"expr\":\"0\", \"value\":\"0\"}'\n     Has = 0,\n-    // @is \"$.index[*][?(@.name=='Doesnt')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='Doesnt')].inner.discriminant\" null\n     Doesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='AlsoDoesnt')].inner.discriminant\" null\n     AlsoDoesnt,\n-    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.variant_inner\" '{\"expr\":\"44\", \"value\":\"44\"}'\n+    // @is \"$.index[*][?(@.name=='AlsoHas')].inner.discriminant\" '{\"expr\":\"44\", \"value\":\"44\"}'\n     AlsoHas = 44,\n }"}, {"sha": "e91a632a3b38e8a1ca4d7a61d6f58ea6bb22ac1d", "filename": "src/test/rustdoc-json/enums/discriminant/struct.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Fstruct.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+\n+#[repr(i32)]\n+// @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(i32)]\"]'\n+pub enum Foo {\n+    // @is    \"$.index[*][?(@.name=='Struct')].inner.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Struct')].inner.kind.struct.fields[*]\" 0\n+    Struct {},\n+    // @is    \"$.index[*][?(@.name=='StructWithDiscr')].inner.discriminant\" '{\"expr\": \"42\", \"value\": \"42\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithDiscr')].inner.kind.struct.fields[*]\" 1\n+    StructWithDiscr { x: i32 } = 42,\n+    // @is    \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.discriminant\"  '{\"expr\": \"0x42\", \"value\": \"66\"}'\n+    // @count \"$.index[*][?(@.name=='StructWithHexDiscr')].inner.kind.struct.fields[*]\" 2\n+    StructWithHexDiscr { x: i32, y: bool } = 0x42,\n+}"}, {"sha": "b94d5739eabcb2990715abbc313125c7fd8277c3", "filename": "src/test/rustdoc-json/enums/discriminant/tuple.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fdiscriminant%2Ftuple.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+\n+#[repr(u32)]\n+// @is \"$.index[*][?(@.name=='Foo')].attrs\" '[\"#[repr(u32)]\"]'\n+pub enum Foo {\n+    // @is    \"$.index[*][?(@.name=='Tuple')].inner.discriminant\" null\n+    // @count \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple[*]\" 0\n+    Tuple(),\n+    // @is    \"$.index[*][?(@.name=='TupleWithDiscr')].inner.discriminant\" '{\"expr\": \"1\", \"value\": \"1\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithDiscr')].inner.kind.tuple[*]\" 1\n+    TupleWithDiscr(i32) = 1,\n+    // @is    \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.discriminant\" '{\"expr\": \"0b10\", \"value\": \"2\"}'\n+    // @count \"$.index[*][?(@.name=='TupleWithBinDiscr')].inner.kind.tuple[*]\" 2\n+    TupleWithBinDiscr(i32, i32) = 0b10,\n+}"}, {"sha": "78a05431472cb8874cc80439fbc0e973ab18d506", "filename": "src/test/rustdoc-json/enums/field_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Ffield_hidden.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -5,8 +5,8 @@\n \n // @has \"$.index[*][?(@.name=='ParseError')]\"\n // @has \"$.index[*][?(@.name=='UnexpectedEndTag')]\"\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_kind\" '\"tuple\"'\n-// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.variant_inner\" [null]\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.kind.tuple\" [null]\n+// @is \"$.index[*][?(@.name=='UnexpectedEndTag')].inner.discriminant\" null\n \n pub enum ParseError {\n     UnexpectedEndTag(#[doc(hidden)] u32),"}, {"sha": "1787a859c8b37c8fb4afb11d80e25dca246f960e", "filename": "src/test/rustdoc-json/enums/kind.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fkind.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -5,27 +5,22 @@\n \n pub enum Foo {\n     // @set Unit = \"$.index[*][?(@.name=='Unit')].id\"\n-    // @is \"$.index[*][?(@.name=='Unit')].inner.variant_kind\" '\"plain\"'\n-    // @is \"$.index[*][?(@.name=='Unit')].inner.variant_inner\" null\n+    // @is \"$.index[*][?(@.name=='Unit')].inner.kind\" '\"plain\"'\n     Unit,\n     // @set Named = \"$.index[*][?(@.name=='Named')].id\"\n-    // @is \"$.index[*][?(@.name=='Named')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='Named')].inner.variant_inner\" '{\"fields\": [], \"fields_stripped\": false}'\n+    // @is \"$.index[*][?(@.name=='Named')].inner.kind.struct\" '{\"fields\": [], \"fields_stripped\": false}'\n     Named {},\n     // @set Tuple = \"$.index[*][?(@.name=='Tuple')].id\"\n-    // @is \"$.index[*][?(@.name=='Tuple')].inner.variant_kind\" '\"tuple\"'\n-    // @is \"$.index[*][?(@.name=='Tuple')].inner.variant_inner\" []\n+    // @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" []\n     Tuple(),\n     // @set NamedField = \"$.index[*][?(@.name=='NamedField')].id\"\n     // @set x = \"$.index[*][?(@.name=='x' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_inner.fields[*]\" $x\n-    // @is \"$.index[*][?(@.name=='NamedField')].inner.variant_inner.fields_stripped\" false\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields[*]\" $x\n+    // @is \"$.index[*][?(@.name=='NamedField')].inner.kind.struct.fields_stripped\" false\n     NamedField { x: i32 },\n     // @set TupleField = \"$.index[*][?(@.name=='TupleField')].id\"\n-    // @is \"$.index[*][?(@.name=='TupleField')].inner.variant_kind\" '\"tuple\"'\n     // @set tup_field = \"$.index[*][?(@.name=='0' && @.kind=='struct_field')].id\"\n-    // @is \"$.index[*][?(@.name=='TupleField')].inner.variant_inner[*]\" $tup_field\n+    // @is \"$.index[*][?(@.name=='TupleField')].inner.kind.tuple[*]\" $tup_field\n     TupleField(i32),\n }\n "}, {"sha": "de939cde2e7b34b990736d3664a39dca6202e0b8", "filename": "src/test/rustdoc-json/enums/struct_field_hidden.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fstruct_field_hidden.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -9,9 +9,8 @@ pub enum Foo {\n         // @set y = \"$.index[*][?(@.name=='y')].id\"\n         y: i32,\n     },\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_kind\" '\"struct\"'\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields_stripped\" true\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[0]\" $b\n-    // @is \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[1]\" $y\n-    // @count \"$.index[*][?(@.name=='Variant')].inner.variant_inner.fields[*]\" 2\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields_stripped\" true\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[0]\" $b\n+    // @is \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[1]\" $y\n+    // @count \"$.index[*][?(@.name=='Variant')].inner.kind.struct.fields[*]\" 2\n }"}, {"sha": "70bfbb81826bee450acfcc2018d34da3661e449a", "filename": "src/test/rustdoc-json/enums/tuple_fields_hidden.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Ftuple_fields_hidden.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -14,61 +14,50 @@\n // @set 3.3.1 = \"$.index[*][?(@.docs=='3.3.1')].id\"\n \n pub enum EnumWithStrippedTupleVariants {\n-    // @is    \"$.index[*][?(@.name=='None')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='None')].inner.variant_inner[*]\" 0\n+    // @count \"$.index[*][?(@.name=='None')].inner.kind.tuple[*]\" 0\n     None(),\n \n-    // @is    \"$.index[*][?(@.name=='One')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='One')].inner.variant_inner[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='One')].inner.variant_inner[0]\" $1.1.0\n+    // @count \"$.index[*][?(@.name=='One')].inner.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='One')].inner.kind.tuple[0]\" $1.1.0\n     One(/** 1.1.0*/ bool),\n-    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='OneHidden')].inner.variant_inner[*]\" 1\n-    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.variant_inner[0]\" null\n+    // @count \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[*]\" 1\n+    // @is    \"$.index[*][?(@.name=='OneHidden')].inner.kind.tuple[0]\" null\n     OneHidden(#[doc(hidden)] bool),\n \n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Two')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_inner[0]\" $2.1.0\n-    // @is    \"$.index[*][?(@.name=='Two')].inner.variant_inner[1]\" $2.1.1\n+    // @count \"$.index[*][?(@.name=='Two')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[0]\" $2.1.0\n+    // @is    \"$.index[*][?(@.name=='Two')].inner.kind.tuple[1]\" $2.1.1\n     Two(/** 2.1.0*/ bool, /** 2.1.1*/ bool),\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.variant_inner[1]\" $2.2.1\n+    // @count \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoLeftHidden')].inner.kind.tuple[1]\" $2.2.1\n     TwoLeftHidden(#[doc(hidden)] bool, /** 2.2.1*/ bool),\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[0]\" $2.3.0\n-    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.variant_inner[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[0]\" $2.3.0\n+    // @is    \"$.index[*][?(@.name=='TwoRightHidden')].inner.kind.tuple[1]\" null\n     TwoRightHidden(/** 2.3.0*/ bool, #[doc(hidden)] bool),\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[*]\" 2\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.variant_inner[1]\" null\n+    // @count \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[*]\" 2\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='TwoBothHidden')].inner.kind.tuple[1]\" null\n     TwoBothHidden(#[doc(hidden)] bool, #[doc(hidden)] bool),\n \n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three1')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[0]\" null\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[1]\" $3.1.1\n-    // @is    \"$.index[*][?(@.name=='Three1')].inner.variant_inner[2]\" $3.1.2\n+    // @count \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[0]\" null\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[1]\" $3.1.1\n+    // @is    \"$.index[*][?(@.name=='Three1')].inner.kind.tuple[2]\" $3.1.2\n     Three1(#[doc(hidden)] bool, /** 3.1.1*/ bool, /** 3.1.2*/ bool),\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three2')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[0]\" $3.2.0\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[1]\" null\n-    // @is    \"$.index[*][?(@.name=='Three2')].inner.variant_inner[2]\" $3.2.2\n+    // @count \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[0]\" $3.2.0\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[1]\" null\n+    // @is    \"$.index[*][?(@.name=='Three2')].inner.kind.tuple[2]\" $3.2.2\n     Three2(/** 3.2.0*/ bool, #[doc(hidden)] bool, /** 3.2.2*/ bool),\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_kind\" '\"tuple\"'\n-    // @count \"$.index[*][?(@.name=='Three3')].inner.variant_inner[*]\" 3\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[0]\" $3.3.0\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[1]\" $3.3.1\n-    // @is    \"$.index[*][?(@.name=='Three3')].inner.variant_inner[2]\" null\n+    // @count \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[*]\" 3\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[0]\" $3.3.0\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[1]\" $3.3.1\n+    // @is    \"$.index[*][?(@.name=='Three3')].inner.kind.tuple[2]\" null\n     Three3(/** 3.3.0*/ bool, /** 3.3.1*/ bool, #[doc(hidden)] bool),\n }\n \n-\n // @is \"$.index[*][?(@.docs=='1.1.0')].name\" '\"0\"'\n // @is \"$.index[*][?(@.docs=='2.1.0')].name\" '\"0\"'\n // @is \"$.index[*][?(@.docs=='2.1.1')].name\" '\"1\"'"}, {"sha": "bc870c502a0112b0f801495c15ac061b9ae83870", "filename": "src/test/rustdoc-json/enums/variant_struct.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_struct.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,11 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumStruct')].visibility\" \\\"public\\\"\n // @is \"$.index[*][?(@.name=='EnumStruct')].kind\" \\\"enum\\\"\n pub enum EnumStruct {\n-    // @is \"$.index[*][?(@.name=='VariantS')].inner.variant_kind\" \\\"struct\\\"\n     // @is \"$.index[*][?(@.name=='x')].kind\" \\\"struct_field\\\"\n+    // @set x = \"$.index[*][?(@.name=='x')].id\"\n     // @is \"$.index[*][?(@.name=='y')].kind\" \\\"struct_field\\\"\n-    VariantS {\n-        x: u32,\n-        y: String,\n-    },\n+    // @set y = \"$.index[*][?(@.name=='y')].id\"\n+    // @ismany \"$.index[*][?(@.name=='VariantS')].inner.kind.struct.fields[*]\" $x $y\n+    VariantS { x: u32, y: String },\n }"}, {"sha": "d1207bbfb18da6213394c8f8712c63affd83332a", "filename": "src/test/rustdoc-json/enums/variant_tuple_struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fenums%2Fvariant_tuple_struct.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -1,8 +1,10 @@\n // @is \"$.index[*][?(@.name=='EnumTupleStruct')].visibility\" \\\"public\\\"\n // @is \"$.index[*][?(@.name=='EnumTupleStruct')].kind\" \\\"enum\\\"\n pub enum EnumTupleStruct {\n-    // @is \"$.index[*][?(@.name=='VariantA')].inner.variant_kind\" \\\"tuple\\\"\n     // @is \"$.index[*][?(@.name=='0')].kind\" \\\"struct_field\\\"\n+    // @set f0 = \"$.index[*][?(@.name=='0')].id\"\n     // @is \"$.index[*][?(@.name=='1')].kind\" \\\"struct_field\\\"\n+    // @set f1 = \"$.index[*][?(@.name=='1')].id\"\n+    // @ismany \"$.index[*][?(@.name=='VariantA')].inner.kind.tuple[*]\" $f0 $f1\n     VariantA(u32, String),\n }"}, {"sha": "ee1adc6a02914e0767f5f1a0ee9a09b8d9fdca60", "filename": "src/test/rustdoc-ui/issue-105334.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105334.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,2 @@\n+impl Vec< br##\"*..\"## > {}\n+//~^ ERROR"}, {"sha": "e163bb4db9ee609a3941feadec49b01cb213e8ce", "filename": "src/test/rustdoc-ui/issue-105334.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105334.stderr?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/issue-105334.rs:1:11\n+   |\n+LL | impl Vec< br##\"*..\"## > {}\n+   |           ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "154f069d8ffac43fbdfc70ac4e8bbd94db90d758", "filename": "src/test/rustdoc-ui/issue-105737.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105737.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,4 @@\n+impl Vec<lol> {}\n+//~^ ERROR\n+\n+pub fn lol() {}"}, {"sha": "2dd9beb17da9b4853b983ffda6c9ddab1c9aad1e", "filename": "src/test/rustdoc-ui/issue-105737.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105737.stderr?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,12 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/issue-105737.rs:1:10\n+   |\n+LL | impl Vec<lol> {}\n+   |          ^^^\n+   |\n+   = help: `lol` is a function item, not a type\n+   = help: function item types cannot be named directly\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "cb1de7433cfaa4d33ef9cbc4ab31cb78cbe653cb", "filename": "src/test/rustdoc-ui/issue-105742.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,40 @@\n+// compile-flags: -Znormalize-docs\n+\n+use std::ops::Index;\n+\n+pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+    let _ = s;\n+}\n+\n+pub trait SVec: Index<\n+    <Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Index<<Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Self as SVec>::Item> as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+//~^^^^^ ERROR\n+//~^^^^^^ ERROR\n+//~^^^^^^^ ERROR\n+//~^^^^^^^^ ERROR\n+> {\n+    type Item<'a, T>;\n+\n+    fn len(&self) -> <Self as SVec>::Item;\n+    //~^ ERROR\n+    //~^^ ERROR\n+    //~^^^ ERROR\n+    //~^^^^ ERROR\n+}"}, {"sha": "cc101b7ff37577a2f75554ecf6a965d92e6dbbb6", "filename": "src/test/rustdoc-ui/issue-105742.stderr", "status": "added", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,385 @@\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n+   |                                        ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n+   |                                        ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0038]: the trait `SVec` cannot be made into an object\n+  --> $DIR/issue-105742.rs:5:31\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-105742.rs:12:17\n+   |\n+LL |    pub trait SVec: Index<\n+   |  ____________----__^\n+   | |            |\n+   | |            this trait cannot be made into an object...\n+LL | |      <Self as SVec>::Item,\n+LL | |\n+LL | |\n+...  |\n+LL | |/     Output = <Index<<Self as SVec>::Item,\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n+   | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n+...  |\n+LL | |\n+LL | |  > {\n+   | |__^ ...because it uses `Self` as a type parameter\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error: aborting due to 23 previous errors\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "71b497a9adc7312f5a0871523d6ce21cd6b6e1f0", "filename": "src/test/rustdoc-ui/issue-106226.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-106226.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,3 @@\n+// This is a regression test for <https://github.com/rust-lang/rust/issues/106226>.\n+type F = [_; ()];\n+//~^ ERROR"}, {"sha": "2beffbc125bd46b260a23e73845c44c8fc93f944", "filename": "src/test/rustdoc-ui/issue-106226.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-106226.stderr?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106226.rs:2:14\n+   |\n+LL | type F = [_; ()];\n+   |              ^^ expected `usize`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8d8b4456e633504a168f0cd72a4450e6f2fe61fc", "filename": "src/test/rustdoc-ui/issue-96287.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-96287.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait TraitWithAssoc {\n+    type Assoc;\n+}\n+\n+pub type Foo<V> = impl Trait<V::Assoc>;\n+//~^ ERROR\n+//~^^ ERROR\n+\n+pub trait Trait<U> {}\n+\n+impl<W> Trait<W> for () {}\n+\n+pub fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T> {\n+    ()\n+}"}, {"sha": "0236b9fe647759a012ac0318511e1a08cb7b0439", "filename": "src/test/rustdoc-ui/issue-96287.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-96287.stderr?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -0,0 +1,15 @@\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/issue-96287.rs:7:33\n+   |\n+LL | pub type Foo<V> = impl Trait<V::Assoc>;\n+   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n+\n+error[E0220]: associated type `Assoc` not found for `V`\n+  --> $DIR/issue-96287.rs:7:33\n+   |\n+LL | pub type Foo<V> = impl Trait<V::Assoc>;\n+   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "4b6915f77152678f063ffca2141578bf963acfa8", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -32,12 +32,7 @@ Thir {\n             kind: Scope {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n-                    HirId {\n-                        owner: OwnerId {\n-                            def_id: DefId(0:3 ~ thir_tree[8f1d]::main),\n-                        },\n-                        local_id: 2,\n-                    },\n+                    HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2),\n                 ),\n                 value: e0,\n             },"}, {"sha": "291d02d67bd626afa78205c86d432c6d41adc6c2", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481c9bad80754670197cf28d8c6d43825d4404f0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=481c9bad80754670197cf28d8c6d43825d4404f0", "patch": "@@ -5,7 +5,7 @@ use rustdoc_json_types::{\n     Constant, Crate, DynTrait, Enum, FnDecl, Function, FunctionPointer, GenericArg, GenericArgs,\n     GenericBound, GenericParamDef, Generics, Id, Impl, Import, ItemEnum, Module, OpaqueTy, Path,\n     Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n-    TypeBindingKind, Typedef, Union, Variant, WherePredicate,\n+    TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n \n use crate::{item_kind::Kind, Error, ErrorKind};\n@@ -140,24 +140,24 @@ impl<'a> Validator<'a> {\n     }\n \n     fn check_variant(&mut self, x: &'a Variant, id: &'a Id) {\n-        match x {\n-            Variant::Plain(discr) => {\n-                if let Some(discr) = discr {\n-                    if let (Err(_), Err(_)) =\n-                        (discr.value.parse::<i128>(), discr.value.parse::<u128>())\n-                    {\n-                        self.fail(\n-                            id,\n-                            ErrorKind::Custom(format!(\n-                                \"Failed to parse discriminant value `{}`\",\n-                                discr.value\n-                            )),\n-                        );\n-                    }\n-                }\n+        let Variant { kind, discriminant } = x;\n+\n+        if let Some(discr) = discriminant {\n+            if let (Err(_), Err(_)) = (discr.value.parse::<i128>(), discr.value.parse::<u128>()) {\n+                self.fail(\n+                    id,\n+                    ErrorKind::Custom(format!(\n+                        \"Failed to parse discriminant value `{}`\",\n+                        discr.value\n+                    )),\n+                );\n             }\n-            Variant::Tuple(tys) => tys.iter().flatten().for_each(|t| self.add_field_id(t)),\n-            Variant::Struct { fields, fields_stripped: _ } => {\n+        }\n+\n+        match kind {\n+            VariantKind::Plain => {}\n+            VariantKind::Tuple(tys) => tys.iter().flatten().for_each(|t| self.add_field_id(t)),\n+            VariantKind::Struct { fields, fields_stripped: _ } => {\n                 fields.iter().for_each(|f| self.add_field_id(f))\n             }\n         }"}]}