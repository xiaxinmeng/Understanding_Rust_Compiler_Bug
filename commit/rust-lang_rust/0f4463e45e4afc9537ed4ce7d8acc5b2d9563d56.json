{"sha": "0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNDQ2M2U0NWU0YWZjOTUzN2VkNGNlN2Q4YWNjNWIyZDk1NjNkNTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T12:41:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-14T12:42:14Z"}, "message": "fix source_to_def trying to use attribute macro calls as containers", "tree": {"sha": "55370537331eb5396bc2df110368e6da2673ab66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55370537331eb5396bc2df110368e6da2673ab66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "html_url": "https://github.com/rust-lang/rust/commit/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e489185f6dba33d04f2127c0ee3f5875555b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e489185f6dba33d04f2127c0ee3f5875555b2c", "html_url": "https://github.com/rust-lang/rust/commit/d1e489185f6dba33d04f2127c0ee3f5875555b2c"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "1aa0d61fe6123fd1a0a4c55cca769f471beff2a4", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "patch": "@@ -569,7 +569,6 @@ impl<'db> SemanticsImpl<'db> {\n         node: &SyntaxNode,\n         offset: TextSize,\n     ) -> impl Iterator<Item = impl Iterator<Item = SyntaxNode> + '_> + '_ {\n-        // Handle macro token cases\n         node.token_at_offset(offset)\n             .map(move |token| self.descend_into_macros(token))\n             .map(|descendants| {"}, {"sha": "723c7a1727b2f65ca9bd628dd06d2200a95514a5", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "patch": "@@ -131,8 +131,12 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n         let _p = profile::span(\"module_to_def\");\n-        let parent_declaration =\n-            src.syntax().cloned().ancestors_with_macros(self.db.upcast()).skip(1).find_map(|it| {\n+        let parent_declaration = src\n+            .syntax()\n+            .cloned()\n+            .ancestors_with_macros_skip_attr_item(self.db.upcast())\n+            .skip(1)\n+            .find_map(|it| {\n                 let m = ast::Module::cast(it.value.clone())?;\n                 Some(it.with_value(m))\n             });\n@@ -306,7 +310,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             if let Some(res) = self.container_to_def(container) {\n                 return Some(res);\n             }\n@@ -370,7 +375,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_generic_param_container(&mut self, src: InFile<&SyntaxNode>) -> Option<GenericDefId> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n@@ -388,7 +394,8 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     fn find_pat_or_label_container(&mut self, src: InFile<&SyntaxNode>) -> Option<DefWithBodyId> {\n-        for container in src.cloned().ancestors_with_macros(self.db.upcast()).skip(1) {\n+        for container in src.cloned().ancestors_with_macros_skip_attr_item(self.db.upcast()).skip(1)\n+        {\n             let res: DefWithBodyId = match_ast! {\n                 match (container.value) {\n                     ast::Const(it) => self.const_to_def(container.with_value(it))?.into(),"}, {"sha": "8bb56e0700dbc247b4adf6cf5a031541cbb57321", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "patch": "@@ -186,6 +186,17 @@ impl HirFileId {\n         }\n     }\n \n+    /// Return whether this file is an include macro\n+    pub fn is_attr_macro(&self, db: &dyn db::AstDatabase) -> bool {\n+        match self.0 {\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                matches!(loc.kind, MacroCallKind::Attr { .. })\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_macro(self) -> bool {\n         matches!(self.0, HirFileIdRepr::MacroFile(_))\n     }\n@@ -534,6 +545,26 @@ impl InFile<SyntaxNode> {\n             }\n         })\n     }\n+\n+    /// Skips the attributed item that caused the macro invocation we are climbing up\n+    pub fn ancestors_with_macros_skip_attr_item(\n+        self,\n+        db: &dyn db::AstDatabase,\n+    ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n+        iter::successors(Some(self), move |node| match node.value.parent() {\n+            Some(parent) => Some(node.with_value(parent)),\n+            None => {\n+                let parent_node = node.file_id.call_node(db)?;\n+                if node.file_id.is_attr_macro(db) {\n+                    // macro call was an attributed item, skip it\n+                    // FIXME: does this fail if this is a direct expansion of another macro?\n+                    parent_node.map(|node| node.parent()).transpose()\n+                } else {\n+                    Some(parent_node)\n+                }\n+            }\n+        })\n+    }\n }\n \n impl<'a> InFile<&'a SyntaxNode> {"}, {"sha": "448b30aa849ff37358c888afd009e3755da000aa", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=0f4463e45e4afc9537ed4ce7d8acc5b2d9563d56", "patch": "@@ -52,7 +52,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"module attribute\">proc_macros</span><span class=\"operator attribute\">::</span><span class=\"builtin_attr attribute\">identity</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">ops</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n "}]}