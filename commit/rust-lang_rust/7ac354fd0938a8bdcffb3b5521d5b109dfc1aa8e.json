{"sha": "7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzM1NGZkMDkzOGE4YmRjZmZiM2I1NTIxZDViMTA5ZGZjMWFhOGU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-04-11T18:45:47Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-04-11T18:45:47Z"}, "message": "Don't be so aggressie about line-breaking strings (#911)\n\nWe will no longer break in the middle of words, only at whitespace or punctuation.\r\n\r\nThis means we sometimes over-run, but that seems better than some of the bad splits we see.\r\n\r\nCloses #369", "tree": {"sha": "3d8c3c5ede64be963699cb6bfdc51e36b1744513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d8c3c5ede64be963699cb6bfdc51e36b1744513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "html_url": "https://github.com/rust-lang/rust/commit/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19849fea15badfb96539034b4dd646eb2d3a551d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19849fea15badfb96539034b4dd646eb2d3a551d", "html_url": "https://github.com/rust-lang/rust/commit/19849fea15badfb96539034b4dd646eb2d3a551d"}], "stats": {"total": 179, "additions": 80, "deletions": 99}, "files": [{"sha": "9b64e3f134599c34b404742125d9e9c72734867d", "filename": "src/comment.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -102,7 +102,7 @@ pub fn rewrite_comment(orig: &str,\n         }\n \n         if config.wrap_comments && line.len() > max_chars {\n-            let rewrite = try_opt!(rewrite_string(line, &fmt));\n+            let rewrite = rewrite_string(line, &fmt).unwrap_or(line.to_owned());\n             result.push_str(&rewrite);\n         } else {\n             if line.len() == 0 {\n@@ -672,27 +672,36 @@ mod test {\n     fn format_comments() {\n         let mut config: ::config::Config = Default::default();\n         config.wrap_comments = true;\n-        assert_eq!(\"/* test */\", rewrite_comment(\" //test\", true, 100, Indent::new(0, 100),\n-                                                 &config).unwrap());\n-        assert_eq!(\"// comment\\n// on a\", rewrite_comment(\"// comment on a\", false, 10,\n-                                                          Indent::empty(), &config).unwrap());\n-\n-        assert_eq!(\"//  A multi line comment\\n            // between args.\",\n-                   rewrite_comment(\"//  A multi line comment\\n             // between args.\",\n-                                   false,\n-                                   60,\n-                                   Indent::new(0, 12),\n-                                   &config).unwrap());\n+\n+        let comment = rewrite_comment(\" //test\", true, 100, Indent::new(0, 100), &config).unwrap();\n+        assert_eq!(\"/* test */\", comment);\n+\n+        let comment = rewrite_comment(\"// comment on a\",\n+                                      false,\n+                                      10,\n+                                      Indent::empty(),\n+                                      &config).unwrap();\n+        assert_eq!(\"// comment\\n// on a\", comment);\n+\n+        let comment = rewrite_comment(\"//  A multi line comment\\n             // between args.\",\n+                                      false,\n+                                      60,\n+                                      Indent::new(0, 12),\n+                                      &config).unwrap();\n+        assert_eq!(\"//  A multi line comment\\n            // between args.\", comment);\n \n         let input = \"// comment\";\n         let expected =\n-            \"/* com\\n                                                                      \\\n-             * men\\n                                                                      \\\n-             * t */\";\n-        assert_eq!(expected, rewrite_comment(input, true, 9, Indent::new(0, 69), &config).unwrap());\n-\n-        assert_eq!(\"/* trimmed */\", rewrite_comment(\"/*   trimmed    */\", true, 100,\n-                                                    Indent::new(0, 100), &config).unwrap());\n+            \"/* comment */\";\n+        let comment = rewrite_comment(input, true, 9, Indent::new(0, 69), &config).unwrap();\n+        assert_eq!(expected, comment);\n+\n+        let comment = rewrite_comment(\"/*   trimmed    */\",\n+                                      true,\n+                                      100,\n+                                      Indent::new(0, 100),\n+                                      &config).unwrap();\n+        assert_eq!(\"/* trimmed */\", comment);\n     }\n \n     // This is probably intended to be a non-test fn, but it is not used. I'm"}, {"sha": "bccf39deb9238bc85393bc56afee2264c8d7747e", "filename": "src/string.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -39,6 +39,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     let indent = fmt.offset.to_string(fmt.config);\n     let punctuation = \":,;.\";\n \n+    // `cur_start` is the position in `orig` of the start of the current line.\n     let mut cur_start = 0;\n     let mut result = String::with_capacity(stripped_str.len()\n                                                        .checked_next_power_of_two()\n@@ -50,30 +51,43 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n     // succeed.\n     let max_chars = try_opt!(fmt.width.checked_sub(fmt.opener.len() + ender_length + 1)) + 1;\n \n-    loop {\n+    // Snip a line at a time from `orig` until it is used up. Push the snippet\n+    // onto result.\n+    'outer: loop {\n+        // `cur_end` will be where we break the line, as an offset into `orig`.\n+        // Initialised to the maximum it could be (which may be beyond `orig`).\n         let mut cur_end = cur_start + max_chars;\n \n+        // We can fit the rest of the string on this line, so we're done.\n         if cur_end >= graphemes.len() {\n             let line = &graphemes[cur_start..].join(\"\");\n             result.push_str(line);\n-            break;\n+            break 'outer;\n         }\n \n-        // Push cur_end left until we reach whitespace.\n+        // Push cur_end left until we reach whitespace (or the line is too small).\n         while !graphemes[cur_end - 1].trim().is_empty() {\n             cur_end -= 1;\n-            if cur_end - cur_start < MIN_STRING {\n+            if cur_end < cur_start + MIN_STRING {\n+                // We couldn't find whitespace before the string got too small.\n+                // So start again at the max length and look for punctuation.\n                 cur_end = cur_start + max_chars;\n-                // Look for punctuation to break on.\n-                while (!punctuation.contains(graphemes[cur_end - 1])) && cur_end > 1 {\n+                while !punctuation.contains(graphemes[cur_end - 1]) {\n                     cur_end -= 1;\n-                }\n-                // We can't break at whitespace or punctuation, fall back to splitting\n-                // anywhere that doesn't break an escape sequence.\n-                if cur_end < cur_start + MIN_STRING {\n-                    cur_end = cur_start + max_chars;\n-                    while graphemes[cur_end - 1] == \"\\\\\" && cur_end > 1 {\n-                        cur_end -= 1;\n+\n+                    // If we can't break at whitespace or punctuation, grow the string instead.\n+                    if cur_end < cur_start + MIN_STRING {\n+                        cur_end = cur_start + max_chars;\n+                        while !(punctuation.contains(graphemes[cur_end - 1]) ||\n+                                graphemes[cur_end - 1].trim().is_empty()) {\n+                            if cur_end >= graphemes.len() {\n+                                let line = &graphemes[cur_start..].join(\"\");\n+                                result.push_str(line);\n+                                break 'outer;\n+                            }\n+                            cur_end += 1;\n+                        }\n+                        break;\n                     }\n                 }\n                 break;\n@@ -83,12 +97,13 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n         while cur_end < stripped_str.len() && graphemes[cur_end].trim().is_empty() {\n             cur_end += 1;\n         }\n+\n+        // Make the current line and add it on to result.\n         let raw_line = graphemes[cur_start..cur_end].join(\"\");\n         let line = if fmt.trim_end {\n             raw_line.trim()\n         } else {\n-            // FIXME: use as_str once it's stable.\n-            &*raw_line\n+            raw_line.as_str()\n         };\n \n         result.push_str(line);\n@@ -97,10 +112,11 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n         result.push_str(&indent);\n         result.push_str(fmt.line_start);\n \n+        // The next line starts where the current line ends.\n         cur_start = cur_end;\n     }\n-    result.push_str(fmt.closer);\n \n+    result.push_str(fmt.closer);\n     Some(result)\n }\n "}, {"sha": "ae1bc4bc2761fbb3ae83e873beb30a4cd9b31bac", "filename": "tests/target/enum.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -51,8 +51,7 @@ enum X {\n     CreateWebGLPaintTask(Size2D<i32>,\n                          GLContextAttributes,\n                          IpcSender<Result<(IpcSender<CanvasMsg>, usize), String>>), /* This is\n-                                                                                     * a post c\n-                                                                                     * omment */\n+                                                                                     * a post comment */\n }\n \n pub enum EnumWithAttributes {\n@@ -68,8 +67,7 @@ pub enum EnumWithAttributes {\n     ItemStruct {\n         x: usize,\n         y: usize,\n-    }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n-        * AAAAAAAAAAAAAAAAAAA */\n+    }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n     // And another\n     ForcedPreflight, /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n                       * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n@@ -79,8 +77,7 @@ pub enum SingleTuple {\n     // Pre Comment AAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     // AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     Match(usize, usize, String), /* Post-comment\n-                                  * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n-                                  * A */\n+                                  * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n }\n \n pub enum SingleStruct {"}, {"sha": "cd694099d95254378b8b0c1f367f9bd837b779fe", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -26,8 +26,7 @@ fn main() {\n \t       a: i32) {\n \t}\n \n-\tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAA\\\n-\t           AAAAAAAAAAAAaAa\";\n+\tlet str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n \n \tif let (some_very_large,\n \t        tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {"}, {"sha": "c636f878ef123ea71c0a71cb59de8e6bdf996902", "filename": "tests/target/string-lit-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring-lit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring-lit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit-2.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -10,6 +10,5 @@ fn main() -> &'static str {\n     // Crappy formatting :-(\n     let change_me = \"sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n                      \\\n-                     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\\\n-                     j\";\n+                     jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\";\n }"}, {"sha": "1d4d21ff73e97763f03144798b5456ef16c5d7c6", "filename": "tests/target/string-lit.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -4,22 +4,16 @@\n fn main() -> &'static str {\n     let str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAaAA \\\n                AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n-    let str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAA\\\n-               AAAAAAAAAAAAaAa\";\n+    let str = \"AAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAa\";\n     let str = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n \n     let too_many_lines = \"Hello\";\n \n     // Make sure we don't break after an escape character.\n-    let odd_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\n-                           \\n\\n\\n\";\n-    let even_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\n-                            \\n\\n\\n\";\n+    let odd_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n+    let even_length_name = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n \n-    let really_long_variable_name = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\n-                                     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\n-                                     AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\n-                                     AA\";\n+    let really_long_variable_name = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n \n     let raw_string = r#\"Do\n not\n@@ -28,16 +22,12 @@ formatting\"#;\n \n     filename.replace(\" \", \"\\\\\");\n \n-    let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = funktion(\"yyyyyyyyyyyyyyyyyyyyy\\\n-                                                                            yyyyyyyyyyyyyyyyyyyyy\\\n-                                                                            yyyyyyyyyyyyyyyyyyyyy\\\n-                                                                            yyyyyyyyyy\");\n+    let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = funktion(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\");\n \n     let unicode = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n     let unicode2 = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     let unicode3 = \"\u4e2d\u534eVi\u1ec7t Nam\";\n-    let unicode4 = \"\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\\\n-                    \u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\";\n+    let unicode4 = \"\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\";\n \n     \"stuffin'\"\n }"}, {"sha": "1acad4043572fa77fef76d708a26eb1aed8c1151", "filename": "tests/target/string_punctuation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring_punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstring_punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring_punctuation.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -1,8 +1,7 @@\n fn main() {\n     println!(\"ThisIsAReallyLongStringWithNoSpaces.It_should_prefer_to_break_onpunctuation:\\\n               Likethisssssssssssss\");\n-    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColo\\\n-             nsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",\n+    format!(\"{}__{}__{}ItShouldOnlyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyNoticeSemicolonsPeriodsColonsAndCommasAndResortToMid-CharBreaksAfterPunctuation{}{}\",\n             x,\n             y,\n             z,"}, {"sha": "3a3aa35bb16a80f825718e6fe73eb870843b7a5a", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -16,24 +16,10 @@ fn main() {\n \n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: f(), b: b() };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Commen\n-                                                                                        // t\n-                                                                                        a: foo(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */\n-                                                                                        // Commen\n-                                                                                        // t\n-                                                                                        b: bar(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */ };\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n+                                                                                        a: foo(), /* Comment */\n+                                                                                        // Comment\n+                                                                                        b: bar(), /* Comment */ };\n \n     Foo { a: Bar, b: f() };\n "}, {"sha": "f233b24c213d30b0e59e072b5ba60f5c733cf31f", "filename": "tests/target/struct_lits_visual_multiline.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual_multiline.rs?ref=7ac354fd0938a8bdcffb3b5521d5b109dfc1aa8e", "patch": "@@ -18,24 +18,10 @@ fn main() {\n     Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n                                                                                b: bar(), };\n \n-    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Commen\n-                                                                                        // t\n-                                                                                        a: foo(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */\n-                                                                                        // Commen\n-                                                                                        // t\n-                                                                                        b: bar(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */ };\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n+                                                                                        a: foo(), /* Comment */\n+                                                                                        // Comment\n+                                                                                        b: bar(), /* Comment */ };\n \n     Foo { a: Bar,\n           b: foo(), };"}]}