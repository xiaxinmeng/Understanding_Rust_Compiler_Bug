{"sha": "cc6eee1b609db61935466a857ae6e577c359d0dc", "node_id": "C_kwDOAAsO6NoAKGNjNmVlZTFiNjA5ZGI2MTkzNTQ2NmE4NTdhZTZlNTc3YzM1OWQwZGM", "commit": {"author": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T12:36:37Z"}, "committer": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T12:36:37Z"}, "message": "cosmetics", "tree": {"sha": "9f03a3d832308f5b901c9799bae0c0fdeb290823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f03a3d832308f5b901c9799bae0c0fdeb290823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6eee1b609db61935466a857ae6e577c359d0dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6eee1b609db61935466a857ae6e577c359d0dc", "html_url": "https://github.com/rust-lang/rust/commit/cc6eee1b609db61935466a857ae6e577c359d0dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6eee1b609db61935466a857ae6e577c359d0dc/comments", "author": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25b20e48d42f49f027f458d695a4176b2c104a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25b20e48d42f49f027f458d695a4176b2c104a2", "html_url": "https://github.com/rust-lang/rust/commit/e25b20e48d42f49f027f458d695a4176b2c104a2"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "6dc438063d91f57a6cb591ae3da1a01a8f6ce8c9", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc6eee1b609db61935466a857ae6e577c359d0dc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6eee1b609db61935466a857ae6e577c359d0dc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=cc6eee1b609db61935466a857ae6e577c359d0dc", "patch": "@@ -5,7 +5,7 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n-use syntax::ast::{self, AstNode, HasName, MatchArm, MatchArmList, MatchExpr, Pat, make};\n+use syntax::ast::{self, make, AstNode, HasName, MatchArm, MatchArmList, MatchExpr, Pat};\n use syntax::TextRange;\n \n use crate::{\n@@ -40,9 +40,9 @@ use crate::{\n pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let match_expr = ctx.find_node_at_offset_with_descend::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n-    let target_range : TextRange;\n+    let target_range: TextRange;\n \n-    if let None = trivial_match_arm_list_at_cursor(&ctx, &match_expr, &match_arm_list) {\n+    if let None = cursor_at_trivial_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n         target_range = TextRange::new(\n             ctx.sema.original_range(match_expr.syntax()).range.start(),\n             ctx.sema.original_range(match_arm_list.syntax()).range.start(),\n@@ -52,8 +52,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         if !cursor_in_range {\n             return None;\n         }\n-    }\n-    else {\n+    } else {\n         target_range = ctx.sema.original_range(match_expr.syntax()).range;\n     }\n \n@@ -193,7 +192,11 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     )\n }\n \n-fn trivial_match_arm_list_at_cursor(ctx: &AssistContext, match_expr : &MatchExpr, match_arm_list : &MatchArmList) -> Option<()> {\n+fn cursor_at_trivial_match_arm_list(\n+    ctx: &AssistContext,\n+    match_expr: &MatchExpr,\n+    match_arm_list: &MatchArmList,\n+) -> Option<()> {\n     // match x { $0 }\n     if match_arm_list.arms().next() == None {\n         return Some(());\n@@ -204,7 +207,7 @@ fn trivial_match_arm_list_at_cursor(ctx: &AssistContext, match_expr : &MatchExpr\n     let arm = wild_pat.syntax().parent().and_then(ast::MatchArm::cast)?;\n     let arm_match_expr = arm.syntax().ancestors().nth(2).and_then(ast::MatchExpr::cast)?;\n     if arm_match_expr == *match_expr {\n-        return Some(())\n+        return Some(());\n     }\n \n     None\n@@ -975,7 +978,6 @@ fn main() {\n         );\n     }\n \n-\n     #[test]\n     fn wildcard_inside_expression_not_applicable() {\n         check_assist_not_applicable("}]}