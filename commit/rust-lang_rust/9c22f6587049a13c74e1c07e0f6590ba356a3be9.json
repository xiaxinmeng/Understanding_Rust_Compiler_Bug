{"sha": "9c22f6587049a13c74e1c07e0f6590ba356a3be9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMjJmNjU4NzA0OWExM2M3NGUxYzA3ZTBmNjU5MGJhMzU2YTNiZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-15T12:01:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-15T12:01:19Z"}, "message": "auto merge of #7799 : blake2-ppc/rust/eq-default, r=sanxiyn\n\nLet Eq::ne be implemented to the inverse of eq by default.", "tree": {"sha": "36c0f14677d327512f4e1f0f299b0c3dbaddc3aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36c0f14677d327512f4e1f0f299b0c3dbaddc3aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c22f6587049a13c74e1c07e0f6590ba356a3be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c22f6587049a13c74e1c07e0f6590ba356a3be9", "html_url": "https://github.com/rust-lang/rust/commit/9c22f6587049a13c74e1c07e0f6590ba356a3be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c22f6587049a13c74e1c07e0f6590ba356a3be9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60d5bb941324f1c1faee9ff60360e169a410e87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60d5bb941324f1c1faee9ff60360e169a410e87b", "html_url": "https://github.com/rust-lang/rust/commit/60d5bb941324f1c1faee9ff60360e169a410e87b"}, {"sha": "6999b5332f845292c4fdab824ae0fe2e3bf53421", "url": "https://api.github.com/repos/rust-lang/rust/commits/6999b5332f845292c4fdab824ae0fe2e3bf53421", "html_url": "https://github.com/rust-lang/rust/commit/6999b5332f845292c4fdab824ae0fe2e3bf53421"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "8a13cab28c3bf782afa38b5a4c73e2fbda2fe7e6", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c22f6587049a13c74e1c07e0f6590ba356a3be9/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c22f6587049a13c74e1c07e0f6590ba356a3be9/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=9c22f6587049a13c74e1c07e0f6590ba356a3be9", "patch": "@@ -21,6 +21,7 @@ and `Eq` to overload the `==` and `!=` operators.\n */\n \n #[allow(missing_doc)];\n+#[allow(default_methods)]; // NOTE: Remove when allowed in stage0\n \n /**\n * Trait for values that can be compared for equality and inequality.\n@@ -29,12 +30,14 @@ and `Eq` to overload the `==` and `!=` operators.\n * unequal. For example, with the built-in floating-point types `a == b` and `a != b` will both\n * evaluate to false if either `a` or `b` is NaN (cf. IEEE 754-2008 section 5.11).\n *\n+* Eq only requires the `eq` method to be implemented; `ne` is its negation by default.\n+*\n * Eventually, this will be implemented by default for types that implement `TotalEq`.\n */\n #[lang=\"eq\"]\n pub trait Eq {\n     fn eq(&self, other: &Self) -> bool;\n-    fn ne(&self, other: &Self) -> bool;\n+    fn ne(&self, other: &Self) -> bool { !self.eq(other) }\n }\n \n /// Trait for equality comparisons where `a == b` and `a != b` are strict inverses.\n@@ -164,7 +167,6 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n * for compatibility with floating-point NaN semantics\n * (cf. IEEE 754-2008 section 5.11).\n */\n-#[allow(default_methods)] // NOTE: Remove when allowed in stage0\n #[lang=\"ord\"]\n pub trait Ord {\n     fn lt(&self, other: &Self) -> bool;"}, {"sha": "92b14dc64b8cf8b808dbaf0815fd3920ca561895", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c22f6587049a13c74e1c07e0f6590ba356a3be9/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c22f6587049a13c74e1c07e0f6590ba356a3be9/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=9c22f6587049a13c74e1c07e0f6590ba356a3be9", "patch": "@@ -8,8 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test default methods in Ord\n+// Test default methods in Ord and Eq\n //\n+struct Fool(bool);\n+\n+impl Eq for Fool {\n+    fn eq(&self, other: &Fool) -> bool {\n+        **self != **other\n+    }\n+}\n+\n struct Int(int);\n \n impl Ord for Int {\n@@ -40,4 +48,9 @@ pub fn main() {\n     assert!(RevInt(1) >  RevInt(2));\n     assert!(RevInt(1) >= RevInt(2));\n     assert!(RevInt(1) >= RevInt(1));\n+\n+    assert!(Fool(true)  == Fool(false));\n+    assert!(Fool(true)  != Fool(true));\n+    assert!(Fool(false) != Fool(false));\n+    assert!(Fool(false) == Fool(true));\n }"}]}