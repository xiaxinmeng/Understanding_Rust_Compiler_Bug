{"sha": "4b6010cbb70bb903c0d69cddaa27e262cef15761", "node_id": "C_kwDOAAsO6NoAKDRiNjAxMGNiYjcwYmI5MDNjMGQ2OWNkZGFhMjdlMjYyY2VmMTU3NjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-05T19:43:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-05T19:43:41Z"}, "message": "Rollup merge of #104952 - jyn514:setup, r=Mark-Simulacrum\n\nStreamline the user experience for `x.py setup`\n\n## Don't update submodules for x setup\n\nBefore, the submodule handling was very jank and would update *between two interactive prompts*:\n```\n; x setup\nBuilding rustbuild\n    Finished dev [unoptimized] target(s) in 0.05s\nWelcome to the Rust project! What do you want to do with x.py?\na) library: Contribute to the standard library\nPlease choose one (a/b/c/d/e): a\nUpdating submodule library/backtrace\nSubmodule 'library/backtrace' (https://github.com/rust-lang/backtrace-rs.git) registered for path 'library/backtrace'\nerror: you asked `x.py` to setup a new config file, but one already exists at `config.toml`\nBuild completed unsuccessfully in 0:00:02\n```\n\nThat's not a great user experience because you need to wait a long time between prompts.\nIt would be possible to move the submodule handling either before or after the prompt, but it seems\nbetter to just not require submodules to be checked out at all, to minimize the time spend waiting\njust to create a new configuration.\n\n## Revamp the order setup executes\n\n- Create `config.toml` last. It's the most likely to error, and used to stop later steps from executing\n- Don't print an error message + exit if the git hook already exists; that's expected", "tree": {"sha": "5c2afbbb1d8d8a70a48ba7f97aadfc29c735d272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c2afbbb1d8d8a70a48ba7f97aadfc29c735d272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b6010cbb70bb903c0d69cddaa27e262cef15761", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjkntCRBK7hj4Ov3rIwAANsQIAJbXazep72gA2uG/XePeC/J7\nCKuRtlkoKqItB7hvzZs0mOVWE897s9mI3DzDgYMF9sbsH+YbHL2ZVX1NI6/hC6Fz\nNp02DayWKWFmAl09vjqSU+4WytDG23YymGNj4Sx95Rm2jSDbS1UQv3twtukLdUUF\nmehuprgbBPvz4yedtahKmmnF0nKYBOmFTziVWxUztbgiEf/0aBfSdKLrSCjbUvBx\njUsCU5+44FpmZDgTra2DUHcUERpOn3RtcbIq7KZ+OU3LKkT4liC/9dr1RJ/qBvAn\n8KRqsELUrINmTl+41g+tKuSmcsdDrbdJatAO9F3jU3hgRE0lasFxPO+tdB96cys=\n=sMuR\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c2afbbb1d8d8a70a48ba7f97aadfc29c735d272\nparent 8ad447c4791807a096b575ccba9baec2e4ec937d\nparent b771d901f735aa6d4078aed92b03e30eba35bf5a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670269421 +0100\ncommitter GitHub <noreply@github.com> 1670269421 +0100\n\nRollup merge of #104952 - jyn514:setup, r=Mark-Simulacrum\n\nStreamline the user experience for `x.py setup`\n\n## Don't update submodules for x setup\n\nBefore, the submodule handling was very jank and would update *between two interactive prompts*:\n```\n; x setup\nBuilding rustbuild\n    Finished dev [unoptimized] target(s) in 0.05s\nWelcome to the Rust project! What do you want to do with x.py?\na) library: Contribute to the standard library\nPlease choose one (a/b/c/d/e): a\nUpdating submodule library/backtrace\nSubmodule 'library/backtrace' (https://github.com/rust-lang/backtrace-rs.git) registered for path 'library/backtrace'\nerror: you asked `x.py` to setup a new config file, but one already exists at `config.toml`\nBuild completed unsuccessfully in 0:00:02\n```\n\nThat's not a great user experience because you need to wait a long time between prompts.\nIt would be possible to move the submodule handling either before or after the prompt, but it seems\nbetter to just not require submodules to be checked out at all, to minimize the time spend waiting\njust to create a new configuration.\n\n## Revamp the order setup executes\n\n- Create `config.toml` last. It's the most likely to error, and used to stop later steps from executing\n- Don't print an error message + exit if the git hook already exists; that's expected\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6010cbb70bb903c0d69cddaa27e262cef15761", "html_url": "https://github.com/rust-lang/rust/commit/4b6010cbb70bb903c0d69cddaa27e262cef15761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b6010cbb70bb903c0d69cddaa27e262cef15761/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad447c4791807a096b575ccba9baec2e4ec937d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad447c4791807a096b575ccba9baec2e4ec937d", "html_url": "https://github.com/rust-lang/rust/commit/8ad447c4791807a096b575ccba9baec2e4ec937d"}, {"sha": "b771d901f735aa6d4078aed92b03e30eba35bf5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b771d901f735aa6d4078aed92b03e30eba35bf5a", "html_url": "https://github.com/rust-lang/rust/commit/b771d901f735aa6d4078aed92b03e30eba35bf5a"}], "stats": {"total": 144, "additions": 77, "deletions": 67}, "files": [{"sha": "37a8eb884efb02beba7ca57c462108a1bca96ae1", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4b6010cbb70bb903c0d69cddaa27e262cef15761", "patch": "@@ -143,7 +143,7 @@ pub enum Subcommand {\n         args: Vec<String>,\n     },\n     Setup {\n-        profile: Profile,\n+        profile: Option<Profile>,\n     },\n }\n \n@@ -628,14 +628,15 @@ Arguments:\n                         |path| format!(\"{} is not a valid UTF8 string\", path.to_string_lossy())\n                     ));\n \n-                    profile_string.parse().unwrap_or_else(|err| {\n+                    let profile = profile_string.parse().unwrap_or_else(|err| {\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n                         eprint!(\"{}\", Profile::all_for_help(\"- \"));\n                         crate::detail_exit(1);\n-                    })\n+                    });\n+                    Some(profile)\n                 } else {\n-                    t!(crate::setup::interactive_path())\n+                    None\n                 };\n                 Subcommand::Setup { profile }\n             }"}, {"sha": "8454abd71425935cb5b67f4c2fe68cd114ac7842", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4b6010cbb70bb903c0d69cddaa27e262cef15761", "patch": "@@ -542,16 +542,6 @@ impl Build {\n             metrics: metrics::BuildMetrics::init(),\n         };\n \n-        build.verbose(\"finding compilers\");\n-        cc_detect::find(&mut build);\n-        // When running `setup`, the profile is about to change, so any requirements we have now may\n-        // be different on the next invocation. Don't check for them until the next time x.py is\n-        // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n-        if !matches!(build.config.cmd, Subcommand::Setup { .. }) {\n-            build.verbose(\"running sanity check\");\n-            sanity::check(&mut build);\n-        }\n-\n         // If local-rust is the same major.minor as the current version, then force a\n         // local-rebuild\n         let local_version_verbose =\n@@ -567,16 +557,32 @@ impl Build {\n             build.local_rebuild = true;\n         }\n \n-        // Make sure we update these before gathering metadata so we don't get an error about missing\n-        // Cargo.toml files.\n-        let rust_submodules =\n-            [\"src/tools/rust-installer\", \"src/tools/cargo\", \"library/backtrace\", \"library/stdarch\"];\n-        for s in rust_submodules {\n-            build.update_submodule(Path::new(s));\n-        }\n+        build.verbose(\"finding compilers\");\n+        cc_detect::find(&mut build);\n+        // When running `setup`, the profile is about to change, so any requirements we have now may\n+        // be different on the next invocation. Don't check for them until the next time x.py is\n+        // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n+        //\n+        // Similarly, for `setup` we don't actually need submodules or cargo metadata.\n+        if !matches!(build.config.cmd, Subcommand::Setup { .. }) {\n+            build.verbose(\"running sanity check\");\n+            sanity::check(&mut build);\n \n-        build.verbose(\"learning about cargo\");\n-        metadata::build(&mut build);\n+            // Make sure we update these before gathering metadata so we don't get an error about missing\n+            // Cargo.toml files.\n+            let rust_submodules = [\n+                \"src/tools/rust-installer\",\n+                \"src/tools/cargo\",\n+                \"library/backtrace\",\n+                \"library/stdarch\",\n+            ];\n+            for s in rust_submodules {\n+                build.update_submodule(Path::new(s));\n+            }\n+\n+            build.verbose(\"learning about cargo\");\n+            metadata::build(&mut build);\n+        }\n \n         build\n     }"}, {"sha": "c7f98a7d0d149ae28c21ad6dadb109034e9bbff6", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 47, "deletions": 44, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b6010cbb70bb903c0d69cddaa27e262cef15761/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=4b6010cbb70bb903c0d69cddaa27e262cef15761", "patch": "@@ -1,15 +1,13 @@\n+use crate::Config;\n use crate::{t, VERSION};\n-use crate::{Config, TargetSelection};\n use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n use std::fs::File;\n+use std::io::Write;\n use std::path::{Path, PathBuf, MAIN_SEPARATOR};\n use std::process::Command;\n use std::str::FromStr;\n-use std::{\n-    env, fmt, fs,\n-    io::{self, Write},\n-};\n+use std::{fmt, fs, io};\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n pub enum Profile {\n@@ -81,38 +79,10 @@ impl fmt::Display for Profile {\n     }\n }\n \n-pub fn setup(config: &Config, profile: Profile) {\n-    let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n-\n-    if path.exists() {\n-        eprintln!(\n-            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n-            path.display()\n-        );\n-        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n-        eprintln!(\n-            \"note: this will use the configuration in {}\",\n-            profile.include_path(&config.src).display()\n-        );\n-        crate::detail_exit(1);\n-    }\n-\n-    let settings = format!(\n-        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n-    profile = \\\"{}\\\"\\n\\\n-    changelog-seen = {}\\n\",\n-        profile, VERSION\n-    );\n-    t!(fs::write(path, settings));\n-\n-    let include_path = profile.include_path(&config.src);\n-    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n-\n-    let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+pub fn setup(config: &Config, profile: Option<Profile>) {\n+    let profile = profile.unwrap_or_else(|| t!(interactive_path()));\n     let stage_path =\n-        [\"build\", build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n-\n-    println!();\n+        [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n \n     if !rustup_installed() && profile != Profile::User {\n         eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n@@ -134,8 +104,6 @@ pub fn setup(config: &Config, profile: Profile) {\n         Profile::User => &[\"dist\", \"build\"],\n     };\n \n-    println!();\n-\n     t!(install_git_hook_maybe(&config));\n \n     println!();\n@@ -150,6 +118,36 @@ pub fn setup(config: &Config, profile: Profile) {\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );\n     }\n+\n+    let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n+    setup_config_toml(path, profile, config);\n+}\n+\n+fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n+    if path.exists() {\n+        eprintln!();\n+        eprintln!(\n+            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n+            path.display()\n+        );\n+        eprintln!(\"help: try adding `profile = \\\"{}\\\"` at the top of {}\", profile, path.display());\n+        eprintln!(\n+            \"note: this will use the configuration in {}\",\n+            profile.include_path(&config.src).display()\n+        );\n+        crate::detail_exit(1);\n+    }\n+\n+    let settings = format!(\n+        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n+    profile = \\\"{}\\\"\\n\\\n+    changelog-seen = {}\\n\",\n+        profile, VERSION\n+    );\n+    t!(fs::write(path, settings));\n+\n+    let include_path = profile.include_path(&config.src);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n }\n \n fn rustup_installed() -> bool {\n@@ -303,7 +301,18 @@ pub fn interactive_path() -> io::Result<Profile> {\n \n // install a git hook to automatically run tidy --bless, if they want\n fn install_git_hook_maybe(config: &Config) -> io::Result<()> {\n+    let git = t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n+        assert!(output.status.success(), \"failed to run `git`\");\n+        PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n+    }));\n+    let dst = git.join(\"hooks\").join(\"pre-push\");\n+    if dst.exists() {\n+        // The git hook has already been set up, or the user already has a custom hook.\n+        return Ok(());\n+    }\n+\n     let mut input = String::new();\n+    println!();\n     println!(\n         \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n If you'd like, x.py can install a git hook for you that will automatically run `tidy --bless` before\n@@ -329,12 +338,6 @@ undesirable, simply delete the `pre-push` file from .git/hooks.\"\n \n     if should_install {\n         let src = config.src.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n-        let git =\n-            t!(config.git().args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(|output| {\n-                assert!(output.status.success(), \"failed to run `git`\");\n-                PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n-            }));\n-        let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n             Err(e) => eprintln!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\","}]}