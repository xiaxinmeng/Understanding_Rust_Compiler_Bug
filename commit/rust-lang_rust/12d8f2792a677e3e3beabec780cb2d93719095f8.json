{"sha": "12d8f2792a677e3e3beabec780cb2d93719095f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZDhmMjc5MmE2NzdlM2UzYmVhYmVjNzgwY2IyZDkzNzE5MDk1Zjg=", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-07-29T04:35:52Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2018-07-29T04:35:52Z"}, "message": "review update", "tree": {"sha": "0437312df72962c6e105db0bd44dc32b60bdb76e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0437312df72962c6e105db0bd44dc32b60bdb76e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12d8f2792a677e3e3beabec780cb2d93719095f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJbXUQoAAoJEBOpOZ+3fjNcsdIP/jUMUt1DOjL8fLNWlYBTQS9F\nDCQTPmdVcayTQwIJwdqYCdXscyb8dxvyexRD5OyprU/3l2mAb+jglfrHFdnelxUw\nwkeBxWeNNxE5boaCWZDQuzugp2+76MxDSAIy9mwIbrqNT+Ig1SQgrt+QeEjiFo1L\nARgefkwjRgNcHKBscuu9Avk9MIzkNfMhPI8wW9F97Wu/LivcHQCWkqo7Fh2+hQwm\n7nDQ3Wvcn2Ubb+aTkAey4TEc97XHETvhsZHGkZUAb8m7AGBF+QRaqJv1ZZ3R7i1r\n/f9sDt7BCxTEIHfvq/rHzE/udTglPqCH1KBqi11/ETC4S03avPcylXdww+FZtbnv\nMJQHUPsgD36pAElWDpuP6K8/kEOP2R5xOMr7PbElaqsOj4uZFl28h3vtU12dFm2s\ngwapGNpf57NcHpPpFvzBbKT4LNa8jKc9btwTZluQet2d9mDbu1sgPyhbU20CaqJ3\noFgawRAJS8SuWWy6mH19wVu4023WjHX9dRhhlYsCW+g6mxEZXRt86GHrhHvqgCJV\nUUUT/9WerzH/U2wY+cLyNwRP61Hnic1vssiGt9LVTeDRzoBPDCEiR6DAGG9Nx/oQ\nZcmShkp+ysMZvW/zsJdl8Cgn32XqpoPgczznGzAz46rwAb1YrEX8FGGD9uXf4vlK\nxZAAUiiZ3UHmSv6JG7QA\n=B2JJ\n-----END PGP SIGNATURE-----", "payload": "tree 0437312df72962c6e105db0bd44dc32b60bdb76e\nparent c24fb126e7cdd73163af67c264bf626aebbeee84\nauthor \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1532838952 +0300\ncommitter \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1532838952 +0300\n\nreview update\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12d8f2792a677e3e3beabec780cb2d93719095f8", "html_url": "https://github.com/rust-lang/rust/commit/12d8f2792a677e3e3beabec780cb2d93719095f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12d8f2792a677e3e3beabec780cb2d93719095f8/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24fb126e7cdd73163af67c264bf626aebbeee84", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24fb126e7cdd73163af67c264bf626aebbeee84", "html_url": "https://github.com/rust-lang/rust/commit/c24fb126e7cdd73163af67c264bf626aebbeee84"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "56e45146f5911961b9947b83a83eae9f3a8969ed", "filename": "src/libcore/time.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12d8f2792a677e3e3beabec780cb2d93719095f8/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12d8f2792a677e3e3beabec780cb2d93719095f8/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=12d8f2792a677e3e3beabec780cb2d93719095f8", "patch": "@@ -21,10 +21,9 @@\n //! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n //! ```\n \n-use fmt;\n+use {fmt, u64};\n use iter::Sum;\n use ops::{Add, Sub, Mul, Div, AddAssign, SubAssign, MulAssign, DivAssign};\n-use {u64, u128};\n \n const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;\n@@ -517,22 +516,20 @@ impl Mul<f64> for Duration {\n \n     fn mul(self, rhs: f64) -> Duration {\n         const NPS: f64 = NANOS_PER_SEC as f64;\n+        if rhs.is_sign_negative() {\n+            panic!(\"duration can not be multiplied by negative float\");\n+        }\n         let nanos_f64 = rhs * (NPS * (self.secs as f64) + (self.nanos as f64));\n         if !nanos_f64.is_finite() {\n             panic!(\"got non-finite value when multiplying duration by float\");\n         }\n-        if nanos_f64 > (u128::MAX as f64) {\n+        if nanos_f64 > ((u64::MAX as u128)*(NANOS_PER_SEC as u128)) as f64 {\n             panic!(\"overflow when multiplying duration by float\");\n         };\n         let nanos_u128 = nanos_f64 as u128;\n-        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n-        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n-        if secs > (u64::MAX as u128) {\n-            panic!(\"overflow when multiplying duration by float\");\n-        }\n         Duration {\n-            secs: secs as u64,\n-            nanos: nanos as u32,\n+            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n         }\n     }\n }\n@@ -543,22 +540,20 @@ impl Mul<Duration> for f64 {\n \n     fn mul(self, rhs: Duration) -> Duration {\n         const NPS: f64 = NANOS_PER_SEC as f64;\n+        if self.is_sign_negative() {\n+            panic!(\"duration can not be multiplied by negative float\");\n+        }\n         let nanos_f64 = self * (NPS * (rhs.secs as f64) + (rhs.nanos as f64));\n         if !nanos_f64.is_finite() {\n             panic!(\"got non-finite value when multiplying float by duration\");\n         }\n-        if nanos_f64 > (u128::MAX as f64) {\n+        if nanos_f64 > ((u64::MAX as u128)*(NANOS_PER_SEC as u128)) as f64 {\n             panic!(\"overflow when multiplying float by duration\");\n         };\n         let nanos_u128 = nanos_f64 as u128;\n-        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n-        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n-        if secs > (u64::MAX as u128) {\n-            panic!(\"overflow when multiplying float by duration\");\n-        }\n         Duration {\n-            secs: secs as u64,\n-            nanos: nanos as u32,\n+            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n         }\n     }\n }\n@@ -592,22 +587,20 @@ impl Div<f64> for Duration {\n \n     fn div(self, rhs: f64) -> Duration {\n         const NPS: f64 = NANOS_PER_SEC as f64;\n+        if rhs.is_sign_negative() {\n+            panic!(\"duration can not be divided by negative float\");\n+        }\n         let nanos_f64 = (NPS * (self.secs as f64) + (self.nanos as f64)) / rhs;\n         if !nanos_f64.is_finite() {\n             panic!(\"got non-finite value when dividing duration by float\");\n         }\n-        if nanos_f64 > (u128::MAX as f64) {\n+        if nanos_f64 > ((u64::MAX as u128)*(NANOS_PER_SEC as u128)) as f64 {\n             panic!(\"overflow when dividing duration by float\");\n         };\n         let nanos_u128 = nanos_f64 as u128;\n-        let secs = nanos_u128 / (NANOS_PER_SEC as u128);\n-        let nanos = nanos_u128 % (NANOS_PER_SEC as u128);\n-        if secs > (u64::MAX as u128) {\n-            panic!(\"overflow when dividing duration by float\");\n-        }\n         Duration {\n-            secs: secs as u64,\n-            nanos: nanos as u32,\n+            secs: (nanos_u128 / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos_u128 % (NANOS_PER_SEC as u128)) as u32,\n         }\n     }\n }"}]}