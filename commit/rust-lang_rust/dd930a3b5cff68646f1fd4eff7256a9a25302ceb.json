{"sha": "dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "node_id": "C_kwDOAAsO6NoAKGRkOTMwYTNiNWNmZjY4NjQ2ZjFmZDRlZmY3MjU2YTlhMjUzMDJjZWI", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-10-14T01:24:58Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:19:57Z"}, "message": "Rewrite implementation of `#[alloc_error_handler]`\n\nThe new implementation doesn't use weak lang items and instead changes\n`#[alloc_error_handler]` to an attribute macro just like\n`#[global_allocator]`.\n\nThe attribute will generate the `__rg_oom` function which is called by\nthe compiler-generated `__rust_alloc_error_handler`. If no `__rg_oom`\nfunction is defined in any crate then the compiler shim will call\n`__rdl_oom` in the alloc crate which will simply panic.\n\nThis also fixes link errors with `-C link-dead-code` with\n`default_alloc_error_handler`: `__rg_oom` was previously defined in the\nalloc crate and would attempt to reference the `oom` lang item, even if\nit didn't exist. This worked as long as `__rg_oom` was excluded from\nlinking since it was not called.\n\nThis is a prerequisite for the stabilization of\n`default_alloc_error_handler` (#102318).", "tree": {"sha": "f9e56729c28af2e02e0946051062bf358a026631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e56729c28af2e02e0946051062bf358a026631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "html_url": "https://github.com/rust-lang/rust/commit/dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd930a3b5cff68646f1fd4eff7256a9a25302ceb/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0a6e610e5ff15cc1a8c0e4d731083405b5da87", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0a6e610e5ff15cc1a8c0e4d731083405b5da87", "html_url": "https://github.com/rust-lang/rust/commit/4c0a6e610e5ff15cc1a8c0e4d731083405b5da87"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "4bad33ee879ee4f1c27ba1c2e1352f98c483d9e1", "filename": "src/allocator.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd930a3b5cff68646f1fd4eff7256a9a25302ceb/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd930a3b5cff68646f1fd4eff7256a9a25302ceb/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n \n use crate::GccContext;\n \n-pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) {\n+pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) {\n     let context = &mods.context;\n     let usize =\n         match tcx.sess.target.pointer_width {\n@@ -99,14 +99,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n         func.add_attribute(FnAttribute::Visibility(gccjit::Visibility::Hidden));\n     }\n \n-    let kind =\n-        if has_alloc_error_handler {\n-            AllocatorKind::Global\n-        }\n-        else {\n-            AllocatorKind::Default\n-        };\n-    let callee = kind.fn_name(sym::oom);\n+    let callee = alloc_error_handler_kind.fn_name(sym::oom);\n     let args: Vec<_> = types.iter().enumerate()\n         .map(|(index, typ)| context.new_parameter(None, *typ, &format!(\"param{}\", index)))\n         .collect();"}, {"sha": "1261eb4aaa4a696b18d5ae1efe5999c419572c64", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd930a3b5cff68646f1fd4eff7256a9a25302ceb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd930a3b5cff68646f1fd4eff7256a9a25302ceb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dd930a3b5cff68646f1fd4eff7256a9a25302ceb", "patch": "@@ -155,11 +155,11 @@ impl CodegenBackend for GccCodegenBackend {\n }\n \n impl ExtraBackendMethods for GccCodegenBackend {\n-    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, has_alloc_error_handler: bool) -> Self::Module {\n+    fn codegen_allocator<'tcx>(&self, tcx: TyCtxt<'tcx>, module_name: &str, kind: AllocatorKind, alloc_error_handler_kind: AllocatorKind) -> Self::Module {\n         let mut mods = GccContext {\n             context: Context::default(),\n         };\n-        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, has_alloc_error_handler); }\n+        unsafe { allocator::codegen(tcx, &mut mods, module_name, kind, alloc_error_handler_kind); }\n         mods\n     }\n "}]}