{"sha": "a29ceb9f51390293e0833f763b7490e70da255c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOWNlYjlmNTEzOTAyOTNlMDgzM2Y3NjNiNzQ5MGU3MGRhMjU1YzU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T14:11:59Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:49Z"}, "message": "hir: remove NodeId from ImplItem", "tree": {"sha": "5cfcfa303544f239da0a817dd78856d7039d8bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cfcfa303544f239da0a817dd78856d7039d8bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a29ceb9f51390293e0833f763b7490e70da255c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a29ceb9f51390293e0833f763b7490e70da255c5", "html_url": "https://github.com/rust-lang/rust/commit/a29ceb9f51390293e0833f763b7490e70da255c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a29ceb9f51390293e0833f763b7490e70da255c5/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0", "html_url": "https://github.com/rust-lang/rust/commit/c2e517e0c4eabda5f71bec1124ed5bb746c39eb0"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "85549bc667f9d9516bb03f87c7720eae015129f6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -878,7 +878,6 @@ pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref:\n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n     let ImplItem {\n-        id: _,\n         hir_id: _,\n         ident,\n         ref vis,"}, {"sha": "856550aa018b23da9eae8cdb31605a5a291c4c46", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -3426,7 +3426,6 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::ImplItem {\n-            id: node_id,\n             hir_id,\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),"}, {"sha": "0425d5a5023849e6eff623bb1a2a9c805f118825", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -398,7 +398,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_impl_item(&mut self, ii: &'hir ImplItem) {\n         debug_assert_eq!(ii.hir_id.owner,\n-                         self.definitions.opt_def_index(ii.id).unwrap());\n+                         self.definitions.opt_def_index(self.hir_to_node_id[&ii.hir_id]).unwrap());\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this| {\n             this.insert(ii.span, ii.hir_id, Node::ImplItem(ii));\n "}, {"sha": "66e814f06609cf636ee94bd4623360528da63c92", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -357,7 +357,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Node::ImplItem(item) => {\n-                let def_id = self.local_def_id(item.id);\n+                let def_id = self.local_def_id_from_hir_id(item.hir_id);\n                 match item.node {\n                     ImplItemKind::Const(..) => Some(Def::AssociatedConst(def_id)),\n                     ImplItemKind::Method(..) => Some(Def::Method(def_id)),"}, {"sha": "1a95d567c721b849a23434e53b74f18d25c822c9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1710,7 +1710,6 @@ pub struct ImplItemId {\n /// Represents anything within an `impl` block\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItem {\n-    pub id: NodeId,\n     pub ident: Ident,\n     pub hir_id: HirId,\n     pub vis: Visibility,"}, {"sha": "5774b1049141ce0af0094ef86036a2dac7b4bfe1", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -703,7 +703,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         let hir::ImplItem {\n-            id: _,\n             hir_id: _,\n             ident,\n             ref vis,"}, {"sha": "cffbc2eaa40ce7a2168b90e35d817d9daf14bb87", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -48,7 +48,7 @@ fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      impl_item: &hir::ImplItem,\n                                      impl_src: DefId) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner_def_id());\n-    let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.id));\n+    let generics = tcx.generics_of(tcx.hir().local_def_id_from_hir_id(impl_item.hir_id));\n     if codegen_fn_attrs.requests_inline() || generics.requires_monomorphization(tcx) {\n         return true\n     }"}, {"sha": "3c1b49e2dde6c29740d9a16210b718b71201315e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -355,7 +355,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n-        let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent(ii.id));\n+        let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(\n+            self.tcx.hir().get_parent_item(ii.hir_id));\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n             self.check_missing_stability(ii.hir_id, ii.span, \"item\");\n         }"}, {"sha": "4d484a64f47df3fc9df1e44490f4e800582b700d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1112,11 +1112,12 @@ impl LintPass for UnreachablePub {\n }\n \n impl UnreachablePub {\n-    fn perform_lint(&self, cx: &LateContext<'_, '_>, what: &str, id: ast::NodeId,\n+    fn perform_lint(&self, cx: &LateContext<'_, '_>, what: &str, id: hir::HirId,\n                     vis: &hir::Visibility, span: Span, exportable: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n+        let node_id = cx.tcx.hir().hir_to_node_id(id);\n         match vis.node {\n-            hir::VisibilityKind::Public if !cx.access_levels.is_reachable(id) => {\n+            hir::VisibilityKind::Public if !cx.access_levels.is_reachable(node_id) => {\n                 if span.ctxt().outer().expn_info().is_some() {\n                     applicability = Applicability::MaybeIncorrect;\n                 }\n@@ -1148,20 +1149,20 @@ impl UnreachablePub {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n-        self.perform_lint(cx, \"item\", item.id, &item.vis, item.span, true);\n+        self.perform_lint(cx, \"item\", item.hir_id, &item.vis, item.span, true);\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, foreign_item: &hir::ForeignItem) {\n-        self.perform_lint(cx, \"item\", foreign_item.id, &foreign_item.vis,\n+        self.perform_lint(cx, \"item\", foreign_item.hir_id, &foreign_item.vis,\n                           foreign_item.span, true);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n-        self.perform_lint(cx, \"field\", field.id, &field.vis, field.span, false);\n+        self.perform_lint(cx, \"field\", field.hir_id, &field.vis, field.span, false);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_, '_>, impl_item: &hir::ImplItem) {\n-        self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n+        self.perform_lint(cx, \"item\", impl_item.hir_id, &impl_item.vis, impl_item.span, false);\n     }\n }\n "}, {"sha": "a58c69f636d41886292ff989d06282289bfad361", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1006,7 +1006,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.node {\n             hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n-                let def_id = self.tcx.hir().local_def_id(ii.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }\n             _ => { /* Nothing to do here */ }"}, {"sha": "4a73f86ef6fe9dd25e08afef0215a8cac8962724", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1318,7 +1318,9 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                      match impl_item.node {\n                                          hir::ImplItemKind::Const(..) |\n                                          hir::ImplItemKind::Method(..) => {\n-                                             self.access_levels.is_reachable(impl_item.id)\n+                                             let node_id = self.tcx.hir().hir_to_node_id(\n+                                                impl_item.hir_id);\n+                                             self.access_levels.is_reachable(node_id)\n                                          }\n                                          hir::ImplItemKind::Existential(..) |\n                                          hir::ImplItemKind::Type(_) => false,\n@@ -1340,10 +1342,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 // don't erroneously report errors for private\n                                 // types in private items.\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n+                                let node_id = self.tcx.hir().hir_to_node_id(impl_item.hir_id);\n                                 match impl_item.node {\n                                     hir::ImplItemKind::Const(..) |\n                                     hir::ImplItemKind::Method(..)\n-                                        if self.item_is_public(&impl_item.id, &impl_item.vis) =>\n+                                        if self.item_is_public(&node_id, &impl_item.vis) =>\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }"}, {"sha": "80ffe441561013c5553f9ac483d9532c0b64046f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1554,7 +1554,8 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Check existing impl methods to see if they are both present in trait\n     // and compatible with trait signature\n     for impl_item in impl_items() {\n-        let ty_impl_item = tcx.associated_item(tcx.hir().local_def_id(impl_item.id));\n+        let ty_impl_item = tcx.associated_item(\n+            tcx.hir().local_def_id_from_hir_id(impl_item.hir_id));\n         let ty_trait_item = tcx.associated_items(impl_trait_ref.def_id)\n             .find(|ac| Namespace::from(&impl_item.node) == Namespace::from(ac.kind) &&\n                        tcx.hygienic_eq(ty_impl_item.ident, ac.ident, impl_trait_ref.def_id))"}, {"sha": "b7c862a89a1b4d8cc29f3bb2e3c6370c650294a5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -1030,7 +1030,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n-        let def_id = self.tcx.hir().local_def_id(impl_item.id);\n+        let def_id = self.tcx.hir().local_def_id_from_hir_id(impl_item.hir_id);\n         self.tcx.ensure().check_impl_item_well_formed(def_id);\n     }\n }"}, {"sha": "16102ad4cde30703d8715138d4bfcc32651fabaf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -157,7 +157,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        convert_impl_item(self.tcx, impl_item.id);\n+        convert_impl_item(self.tcx, impl_item.hir_id);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }\n@@ -500,12 +500,12 @@ fn convert_trait_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trait_item_id: hir:\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_item_id: ast::NodeId) {\n-    let def_id = tcx.hir().local_def_id(impl_item_id);\n+fn convert_impl_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_item_id: hir::HirId) {\n+    let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n     tcx.predicates_of(def_id);\n-    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item(impl_item_id).node {\n+    if let hir::ImplItemKind::Method(..) = tcx.hir().expect_impl_item_by_hir_id(impl_item_id).node {\n         tcx.fn_sig(def_id);\n     }\n }\n@@ -1485,7 +1485,7 @@ fn find_existential_constraints<'a, 'tcx>(\n             }\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem) {\n-            let def_id = self.tcx.hir().local_def_id(it.id);\n+            let def_id = self.tcx.hir().local_def_id_from_hir_id(it.hir_id);\n             // the existential type itself or its children are not within its reveal scope\n             if def_id != self.def_id {\n                 self.check(def_id);"}, {"sha": "d88d0dab4f0ebb5bfd2950eba7e1621ce1fb9a70", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29ceb9f51390293e0833f763b7490e70da255c5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a29ceb9f51390293e0833f763b7490e70da255c5", "patch": "@@ -2055,14 +2055,15 @@ impl Clean<Item> for hir::ImplItem {\n                 generics: Generics::default(),\n             }, true),\n         };\n+        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n             source: self.span.clean(cx),\n             attrs: self.attrs.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            def_id: local_did,\n             visibility: self.vis.clean(cx),\n-            stability: get_stability(cx, cx.tcx.hir().local_def_id(self.id)),\n-            deprecation: get_deprecation(cx, cx.tcx.hir().local_def_id(self.id)),\n+            stability: get_stability(cx, local_did),\n+            deprecation: get_deprecation(cx, local_did),\n             inner,\n         }\n     }"}]}