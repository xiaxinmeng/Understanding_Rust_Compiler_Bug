{"sha": "81fa794af9c515eb07a1b6956dc048473770b8ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZmE3OTRhZjljNTE1ZWIwN2ExYjY5NTZkYzA0ODQ3Mzc3MGI4YWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-28T19:12:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-03T17:19:29Z"}, "message": "Specify tuple element in lint message", "tree": {"sha": "50c2dd927ce76626fd5a28c63f7641c1c2925a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50c2dd927ce76626fd5a28c63f7641c1c2925a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81fa794af9c515eb07a1b6956dc048473770b8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81fa794af9c515eb07a1b6956dc048473770b8ae", "html_url": "https://github.com/rust-lang/rust/commit/81fa794af9c515eb07a1b6956dc048473770b8ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81fa794af9c515eb07a1b6956dc048473770b8ae/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058551c4fdb067a642e096e7c50ea82e3fd09e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/058551c4fdb067a642e096e7c50ea82e3fd09e7c", "html_url": "https://github.com/rust-lang/rust/commit/058551c4fdb067a642e096e7c50ea82e3fd09e7c"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "d540b3f7e40a3c38ea251897a07ad11ab10e1a89", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=81fa794af9c515eb07a1b6956dc048473770b8ae", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\");\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -133,6 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n+            descr_post_path: &str,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), ty)\n@@ -141,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             }\n \n             match ty.sty {\n-                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", \"\"),\n+                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", descr_post_path),\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n@@ -178,7 +179,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                         vec![]\n                     };\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n-                        if check_must_use_ty(cx, ty, expr, *spans.get(i).unwrap_or(&span)) {\n+                        let descr_post_path = &format!(\" in tuple element {}\", i);\n+                        let span = *spans.get(i).unwrap_or(&span);\n+                        if check_must_use_ty(cx, ty, expr, span, descr_post_path) {\n                             has_emitted = true;\n                         }\n                     }"}, {"sha": "efbe0ff9c6c9d8a85f34a3d6da54a24c0bdfd6e0", "filename": "src/test/ui/lint/must_use-tuple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.rs?ref=81fa794af9c515eb07a1b6956dc048473770b8ae", "patch": "@@ -1,15 +1,15 @@\n #![deny(unused_must_use)]\n \n-fn foo() -> Result<(), ()> {\n-    Ok::<(), ()>(())\n+fn foo() -> (Result<(), ()>, ()) {\n+    (Ok::<(), ()>(()), ())\n }\n \n fn main() {\n-    (Ok::<(), ()>(()),); //~ ERROR unused `std::result::Result` that must be used\n+    (Ok::<(), ()>(()),); //~ ERROR unused `std::result::Result`\n \n     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n-    //~^ ERROR unused `std::result::Result` that must be used\n-    //~^^ ERROR unused `std::result::Result` that must be used\n+    //~^ ERROR unused `std::result::Result`\n+    //~^^ ERROR unused `std::result::Result`\n \n-    foo(); //~ ERROR unused `std::result::Result` that must be used\n+    foo(); //~ ERROR unused `std::result::Result`\n }"}, {"sha": "4efcb8703aaa68419e5ac75153a0733a13d3cf51", "filename": "src/test/ui/lint/must_use-tuple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81fa794af9c515eb07a1b6956dc048473770b8ae/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-tuple.stderr?ref=81fa794af9c515eb07a1b6956dc048473770b8ae", "patch": "@@ -1,4 +1,4 @@\n-error: unused `std::result::Result` that must be used\n+error: unused `std::result::Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:8:6\n    |\n LL |     (Ok::<(), ()>(()),);\n@@ -11,23 +11,23 @@ LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` that must be used\n+error: unused `std::result::Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:10:6\n    |\n LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n    |      ^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` that must be used\n+error: unused `std::result::Result` in tuple element 2 that must be used\n   --> $DIR/must_use-tuple.rs:10:27\n    |\n LL |     (Ok::<(), ()>(()), 0, Ok::<(), ()>(()), 5);\n    |                           ^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n-error: unused `std::result::Result` that must be used\n+error: unused `std::result::Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:14:5\n    |\n LL |     foo();"}]}