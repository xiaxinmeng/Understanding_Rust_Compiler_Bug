{"sha": "5c8cb56506646637e45a646657baf12fa9a8f49a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOGNiNTY1MDY2NDY2MzdlNDVhNjQ2NjU3YmFmMTJmYTlhOGY0OWE=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-16T13:39:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:36:58Z"}, "message": "move rename to a new mod", "tree": {"sha": "132edba357d82b4f011ea580c7e73e36c7cde02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132edba357d82b4f011ea580c7e73e36c7cde02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8cb56506646637e45a646657baf12fa9a8f49a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8cb56506646637e45a646657baf12fa9a8f49a", "html_url": "https://github.com/rust-lang/rust/commit/5c8cb56506646637e45a646657baf12fa9a8f49a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8cb56506646637e45a646657baf12fa9a8f49a/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0f79f74ad0ab4f663b94772ccbfabed1de625e", "html_url": "https://github.com/rust-lang/rust/commit/bc0f79f74ad0ab4f663b94772ccbfabed1de625e"}], "stats": {"total": 338, "additions": 233, "deletions": 105}, "files": [{"sha": "be82d804a5c77c37776a96f120b3749e1d61dec0", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -35,14 +35,9 @@ pub fn module_from_declaration(\n     let parent_module = module_from_file_id(db, file_id);\n     let child_name = decl.name();\n     match (parent_module, child_name) {\n-        (Some(parent_module), Some(child_name)) => {\n-            if let Some(child) = parent_module.child(db, &child_name.as_name()) {\n-                return Some(child);\n-            }\n-        }\n-        _ => (),\n+        (Some(parent_module), Some(child_name)) => parent_module.child(db, &child_name.as_name()),\n+        _ => None,\n     }\n-    None\n }\n \n /// Locates the module by position in the source code."}, {"sha": "4d4bfbc4da0182a3ccdebb25edd879e8fa388b82", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -1,7 +1,6 @@\n use ra_db::{SyntaxDatabase};\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc,\n-    ast::self,\n+    AstNode, SyntaxNode, TreeArc, ast,\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n "}, {"sha": "b52a3f4d5d91b2765d8efb26db679e90c0d214ff", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 5, "deletions": 90, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -1,10 +1,7 @@\n use std::sync::Arc;\n \n use hir::{\n-    self, Problem, source_binder::{\n-        self,\n-        module_from_declaration\n-    }, ModuleSource,\n+    self, Problem, source_binder\n };\n use ra_db::{\n     FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase,\n@@ -22,6 +19,7 @@ use crate::{\n     CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, RootChange, SourceChange, SourceFileEdit,\n     symbol_index::{FileSymbol, LibrarySymbolsQuery},\n+    rename::rename\n };\n \n impl db::RootDatabase {\n@@ -234,94 +232,11 @@ impl db::RootDatabase {\n             .collect()\n     }\n \n-<<<<<<< HEAD\n-    pub(crate) fn rename(&self, position: FilePosition, new_name: &str) -> Vec<SourceFileEdit> {\n-        self.find_all_refs(position)\n-            .iter()\n-            .map(|(file_id, text_range)| SourceFileEdit {\n-                file_id: *file_id,\n-=======\n-    pub(crate) fn rename(\n-        &self,\n-        position: FilePosition,\n-        new_name: &str,\n-    ) -> Cancelable<Option<SourceChange>> {\n-        let mut source_file_edits = Vec::new();\n-        let mut file_system_edits = Vec::new();\n-\n-        let source_file = self.source_file(position.file_id);\n-        let syntax = source_file.syntax();\n-        // We are rename a mod\n-        if let (Some(ast_module), Some(name)) = (\n-            find_node_at_offset::<ast::Module>(syntax, position.offset),\n-            find_node_at_offset::<ast::Name>(syntax, position.offset),\n-        ) {\n-            if let Some(module) = module_from_declaration(self, position.file_id, &ast_module)? {\n-                let (file_id, module_source) = module.definition_source(self)?;\n-                match module_source {\n-                    ModuleSource::SourceFile(..) => {\n-                        let move_file = FileSystemEdit::MoveFile {\n-                            src: file_id,\n-                            dst_source_root: self.file_source_root(position.file_id),\n-                            dst_path: self\n-                                .file_relative_path(file_id)\n-                                .with_file_name(new_name)\n-                                .with_extension(\"rs\"),\n-                        };\n-                        file_system_edits.push(move_file);\n-                    }\n-                    ModuleSource::Module(..) => {}\n-                }\n-            }\n-\n-            let edit = SourceFileEdit {\n-                file_id: position.file_id,\n->>>>>>> rename mod\n-                edit: {\n-                    let mut builder = ra_text_edit::TextEditBuilder::default();\n-                    builder.replace(name.syntax().range(), new_name.into());\n-                    builder.finish()\n-                },\n-<<<<<<< HEAD\n-            })\n-            .collect::<Vec<_>>()\n+    pub(crate) fn rename(&self, position: FilePosition, new_name: &str) -> Option<SourceChange> {\n+        rename(self, position, new_name)\n     }\n-    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n-=======\n-            };\n-            source_file_edits.push(edit);\n-        }\n-        // rename references\n-        else {\n-            let edit = self\n-                .find_all_refs(position)?\n-                .iter()\n-                .map(|(file_id, text_range)| SourceFileEdit {\n-                    file_id: *file_id,\n-                    edit: {\n-                        let mut builder = ra_text_edit::TextEditBuilder::default();\n-                        builder.replace(*text_range, new_name.into());\n-                        builder.finish()\n-                    },\n-                })\n-                .collect::<Vec<_>>();\n-            if edit.is_empty() {\n-                return Ok(None);\n-            }\n \n-            source_file_edits = edit;\n-        }\n-\n-        return Ok(Some(SourceChange {\n-            label: \"rename\".to_string(),\n-            source_file_edits,\n-            file_system_edits,\n-            cursor_position: None,\n-        }));\n-    }\n-\n-    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Cancelable<Vec<FileSymbol>> {\n->>>>>>> rename mod\n+    pub(crate) fn index_resolve(&self, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n         let name = name_ref.text();\n         let mut query = Query::new(name.to_string());\n         query.exact();"}, {"sha": "1845bf4430b2b3cafe69973b1d553e0a19e3a788", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -23,6 +23,7 @@ mod hover;\n mod call_info;\n mod syntax_highlighting;\n mod parent_module;\n+mod rename;\n \n use std::{fmt, sync::Arc};\n \n@@ -464,7 +465,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         new_name: &str,\n-    ) -> Cancelable<Vec<SourceFileEdit>> {\n+    ) -> Cancelable<Option<SourceChange>> {\n         self.with_db(|db| db.rename(position, new_name))\n     }\n "}, {"sha": "9f8a00ae7503f523251d8a922ed53c28567b4b69", "filename": "crates/ra_ide_api/src/rename.rs", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frename.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -0,0 +1,136 @@\n+use relative_path::RelativePathBuf;\n+\n+use hir::{\n+    self, ModuleSource, source_binder::module_from_declaration,\n+};\n+use ra_syntax::{\n+    algo::find_node_at_offset,\n+    ast,\n+    AstNode,\n+    SyntaxNode\n+};\n+\n+use crate::{\n+    db::RootDatabase,\n+    FilePosition,\n+    FileSystemEdit,\n+    SourceChange,\n+    SourceFileEdit,\n+};\n+use ra_db::{FilesDatabase, SyntaxDatabase};\n+use relative_path::RelativePath;\n+\n+pub(crate) fn rename(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    new_name: &str,\n+) -> Option<SourceChange> {\n+    let source_file = db.source_file(position.file_id);\n+    let syntax = source_file.syntax();\n+\n+    if let Some((ast_name, ast_module)) = find_name_and_module_at_offset(syntax, position) {\n+        rename_mod(db, ast_name, ast_module, position, new_name)\n+    } else {\n+        rename_reference(db, position, new_name)\n+    }\n+}\n+\n+fn find_name_and_module_at_offset(\n+    syntax: &SyntaxNode,\n+    position: FilePosition,\n+) -> Option<(&ast::Name, &ast::Module)> {\n+    let ast_name = find_node_at_offset::<ast::Name>(syntax, position.offset);\n+    let ast_name_parent = ast_name\n+        .and_then(|n| n.syntax().parent())\n+        .and_then(|p| ast::Module::cast(p));\n+\n+    if let (Some(ast_module), Some(name)) = (ast_name_parent, ast_name) {\n+        return Some((name, ast_module));\n+    }\n+    None\n+}\n+\n+fn rename_mod(\n+    db: &RootDatabase,\n+    ast_name: &ast::Name,\n+    ast_module: &ast::Module,\n+    position: FilePosition,\n+    new_name: &str,\n+) -> Option<SourceChange> {\n+    let mut source_file_edits = Vec::new();\n+    let mut file_system_edits = Vec::new();\n+\n+    if let Some(module) = module_from_declaration(db, position.file_id, &ast_module) {\n+        let (file_id, module_source) = module.definition_source(db);\n+        match module_source {\n+            ModuleSource::SourceFile(..) => {\n+                let mod_path: RelativePathBuf = db.file_relative_path(file_id);\n+                // mod is defined in path/to/dir/mod.rs\n+                let dst_path = if mod_path.file_stem() == Some(\"mod\") {\n+                    mod_path\n+                        .parent()\n+                        .and_then(|p| p.parent())\n+                        .or_else(|| Some(RelativePath::new(\"\")))\n+                        .map(|p| p.join(new_name).join(\"mod.rs\"))\n+                } else {\n+                    Some(mod_path.with_file_name(new_name).with_extension(\"rs\"))\n+                };\n+                if let Some(path) = dst_path {\n+                    let move_file = FileSystemEdit::MoveFile {\n+                        src: file_id,\n+                        dst_source_root: db.file_source_root(position.file_id),\n+                        dst_path: path,\n+                    };\n+                    file_system_edits.push(move_file);\n+                }\n+            }\n+            ModuleSource::Module(..) => {}\n+        }\n+    }\n+\n+    let edit = SourceFileEdit {\n+        file_id: position.file_id,\n+        edit: {\n+            let mut builder = ra_text_edit::TextEditBuilder::default();\n+            builder.replace(ast_name.syntax().range(), new_name.into());\n+            builder.finish()\n+        },\n+    };\n+    source_file_edits.push(edit);\n+\n+    return Some(SourceChange {\n+        label: \"rename\".to_string(),\n+        source_file_edits,\n+        file_system_edits,\n+        cursor_position: None,\n+    });\n+}\n+\n+fn rename_reference(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+    new_name: &str,\n+) -> Option<SourceChange> {\n+    let edit = db\n+        .find_all_refs(position)\n+        .iter()\n+        .map(|(file_id, text_range)| SourceFileEdit {\n+            file_id: *file_id,\n+            edit: {\n+                let mut builder = ra_text_edit::TextEditBuilder::default();\n+                builder.replace(*text_range, new_name.into());\n+                builder.finish()\n+            },\n+        })\n+        .collect::<Vec<_>>();\n+    if edit.is_empty() {\n+        return None;\n+    }\n+\n+    return Some(SourceChange {\n+        label: \"rename\".to_string(),\n+        source_file_edits: edit,\n+        file_system_edits: Vec::new(),\n+        cursor_position: None,\n+    });\n+}"}, {"sha": "2077a89ce10087adf2b49933e31309635c9621cc", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -7,8 +7,6 @@ use ra_syntax::TextRange;\n use test_utils::assert_eq_text;\n use insta::assert_debug_snapshot_matches;\n \n-mod runnables;\n-\n #[test]\n fn test_unresolved_module_diagnostic() {\n     let (analysis, file_id) = single_file(\"mod foo;\");\n@@ -182,10 +180,22 @@ fn test_rename_mod() {\n     );\n     let new_name = \"foo2\";\n     let source_change = analysis.rename(position, new_name).unwrap();\n-    assert_eq_dbg(\n-        r#\"Some(SourceChange { label: \"rename\", source_file_edits: [SourceFileEdit { file_id: FileId(1), edit: TextEdit { atoms: [AtomTextEdit { delete: [4; 7), insert: \"foo2\" }] } }], file_system_edits: [MoveFile { src: FileId(2), dst_source_root: SourceRootId(0), dst_path: \"bar/foo2.rs\" }], cursor_position: None })\"#,\n-        &source_change,\n+    assert_debug_snapshot_matches!(\"rename_mod\", &source_change);\n+}\n+\n+#[test]\n+fn test_rename_mod_in_dir() {\n+    let (analysis, position) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod fo<|>o;\n+        //- /foo/mod.rs\n+        // emtpy\n+    \",\n     );\n+    let new_name = \"foo2\";\n+    let source_change = analysis.rename(position, new_name).unwrap();\n+    assert_debug_snapshot_matches!(\"rename_mod_in_dir\", &source_change);\n }\n \n fn test_rename(text: &str, new_name: &str, expected: &str) {"}, {"sha": "54f622b95d49b5e39c47eb9c3314fd303a9f3390", "filename": "crates/ra_ide_api/tests/test/snapshots/test__rename_mod.snap", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod.snap?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -0,0 +1,36 @@\n+Created: 2019-01-16T14:12:39.379431+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/tests/test/main.rs\n+\n+Some(\n+    SourceChange {\n+        label: \"rename\",\n+        source_file_edits: [\n+            SourceFileEdit {\n+                file_id: FileId(\n+                    1\n+                ),\n+                edit: TextEdit {\n+                    atoms: [\n+                        AtomTextEdit {\n+                            delete: [4; 7),\n+                            insert: \"foo2\"\n+                        }\n+                    ]\n+                }\n+            }\n+        ],\n+        file_system_edits: [\n+            MoveFile {\n+                src: FileId(\n+                    2\n+                ),\n+                dst_source_root: SourceRootId(\n+                    0\n+                ),\n+                dst_path: \"bar/foo2.rs\"\n+            }\n+        ],\n+        cursor_position: None\n+    }\n+)"}, {"sha": "aac30e89fe34cb20a651794380574a99afadf0d0", "filename": "crates/ra_ide_api/tests/test/snapshots/test__rename_mod_in_dir.snap", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod_in_dir.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5c8cb56506646637e45a646657baf12fa9a8f49a/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod_in_dir.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fsnapshots%2Ftest__rename_mod_in_dir.snap?ref=5c8cb56506646637e45a646657baf12fa9a8f49a", "patch": "@@ -0,0 +1,36 @@\n+Created: 2019-01-16T14:12:39.379358+00:00\n+Creator: insta@0.1.4\n+Source: crates/ra_ide_api/tests/test/main.rs\n+\n+Some(\n+    SourceChange {\n+        label: \"rename\",\n+        source_file_edits: [\n+            SourceFileEdit {\n+                file_id: FileId(\n+                    1\n+                ),\n+                edit: TextEdit {\n+                    atoms: [\n+                        AtomTextEdit {\n+                            delete: [4; 7),\n+                            insert: \"foo2\"\n+                        }\n+                    ]\n+                }\n+            }\n+        ],\n+        file_system_edits: [\n+            MoveFile {\n+                src: FileId(\n+                    2\n+                ),\n+                dst_source_root: SourceRootId(\n+                    0\n+                ),\n+                dst_path: \"foo2/mod.rs\"\n+            }\n+        ],\n+        cursor_position: None\n+    }\n+)"}]}