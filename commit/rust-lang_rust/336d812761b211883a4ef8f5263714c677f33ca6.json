{"sha": "336d812761b211883a4ef8f5263714c677f33ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNmQ4MTI3NjFiMjExODgzYTRlZjhmNTI2MzcxNGM2NzdmMzNjYTY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:31:24Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-06-04T15:31:24Z"}, "message": "Revert \"Add some more comments\"\n\nThis reverts commit 1a19c1da735eb1cb574ab55a3568e8c13498c490.", "tree": {"sha": "75a198a46584898ab0ceab3dc653e4b4f602568d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a198a46584898ab0ceab3dc653e4b4f602568d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336d812761b211883a4ef8f5263714c677f33ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336d812761b211883a4ef8f5263714c677f33ca6", "html_url": "https://github.com/rust-lang/rust/commit/336d812761b211883a4ef8f5263714c677f33ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336d812761b211883a4ef8f5263714c677f33ca6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c0f0599d71118acd9a7c1648f585b9a4516857", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c0f0599d71118acd9a7c1648f585b9a4516857", "html_url": "https://github.com/rust-lang/rust/commit/34c0f0599d71118acd9a7c1648f585b9a4516857"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "cf4d84f8fda7f857dfb1ad8a7d2ab0ccf0baf190", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/336d812761b211883a4ef8f5263714c677f33ca6/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336d812761b211883a4ef8f5263714c677f33ca6/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=336d812761b211883a4ef8f5263714c677f33ca6", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     literal: method,\n                 }),\n                 args: vec![val, expect],\n-                destination: Some((eq_result, eq_block)),\n+                destination: Some((eq_result.clone(), eq_block)),\n                 cleanup: None,\n                 from_hir_call: false,\n             },"}, {"sha": "295497f37b545d6709cb447386abed0d9c93c495", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/336d812761b211883a4ef8f5263714c677f33ca6/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336d812761b211883a4ef8f5263714c677f33ca6/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=336d812761b211883a4ef8f5263714c677f33ca6", "patch": "@@ -237,9 +237,6 @@ trait DropTreeBuilder<'tcx> {\n \n impl DropTree {\n     fn new() -> Self {\n-        // The root node of the tree doesn't represent a drop, but instead\n-        // represents the block in the tree that should be jumped to once all\n-        // of the required drops have been performed.\n         let fake_source_info = SourceInfo::outermost(DUMMY_SP);\n         let fake_data =\n             DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };\n@@ -261,10 +258,6 @@ impl DropTree {\n         self.entry_points.push((to, from));\n     }\n \n-    /// Builds the MIR for a given drop tree.\n-    ///\n-    /// `blocks` should have the same length as `self.drops`, and may have its\n-    /// first value set to some already existing block.\n     fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(\n         &mut self,\n         cfg: &mut CFG<'tcx>,\n@@ -1351,16 +1344,10 @@ impl<'tcx> DropTreeBuilder<'tcx> for GeneratorDrop {\n         cfg.start_new_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = cfg.block_data_mut(from).terminator_mut();\n-        if let TerminatorKind::Yield { ref mut drop, .. } = term.kind {\n+        let kind = &mut cfg.block_data_mut(from).terminator_mut().kind;\n+        if let TerminatorKind::Yield { drop, .. } = kind {\n             *drop = Some(to);\n-        } else {\n-            span_bug!(\n-                term.source_info.span,\n-                \"cannot enter generator drop tree from {:?}\",\n-                term.kind\n-            )\n-        }\n+        };\n     }\n }\n \n@@ -1371,8 +1358,8 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n         cfg.start_new_cleanup_block()\n     }\n     fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {\n-        let term = &mut cfg.block_data_mut(from).terminator_mut();\n-        match &mut term.kind {\n+        let term = &mut cfg.block_data_mut(from).terminator_mut().kind;\n+        match term {\n             TerminatorKind::Drop { unwind, .. }\n             | TerminatorKind::DropAndReplace { unwind, .. }\n             | TerminatorKind::FalseUnwind { unwind, .. }"}]}