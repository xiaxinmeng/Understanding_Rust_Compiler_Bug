{"sha": "b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxY2Q3NjkwNmE0YzdlNDBlM2ViMzU2OTQ1MGQyZGJkM2JlOWZjYWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-02-14T21:10:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-02-14T21:10:19Z"}, "message": "Fix the fallout", "tree": {"sha": "6baeb7435c09f6d648d9fb2fa42a1210a16fe489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6baeb7435c09f6d648d9fb2fa42a1210a16fe489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "html_url": "https://github.com/rust-lang/rust/commit/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09f53fd45c14a9fb796eca54a8954e943bf09477", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f53fd45c14a9fb796eca54a8954e943bf09477", "html_url": "https://github.com/rust-lang/rust/commit/09f53fd45c14a9fb796eca54a8954e943bf09477"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "8e09e52daee198cff18f31a26433f173e4ad5d14", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -53,7 +53,7 @@ pub enum SignFormat {\n     SignNeg\n }\n \n-static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11;\n+static DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n \n /// Converts a number to its string representation as a byte vector.\n /// This is meant to be a common base implementation for all numeric string\n@@ -87,7 +87,7 @@ static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11;\n ///   between digit and exponent sign `'p'`.\n pub fn float_to_str_bytes_common<T: Float, U, F>(\n     num: T,\n-    radix: uint,\n+    radix: u32,\n     negative_zero: bool,\n     sign: SignFormat,\n     digits: SignificantDigits,\n@@ -156,7 +156,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         deccum = deccum / radix_gen;\n         deccum = deccum.trunc();\n \n-        let c = char::from_digit(current_digit.to_int().unwrap() as uint, radix);\n+        let c = char::from_digit(current_digit.to_int().unwrap() as u32, radix);\n         buf[end] = c.unwrap() as u8;\n         end += 1;\n \n@@ -211,7 +211,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n             // See note in first loop.\n             let current_digit = deccum.trunc().abs();\n \n-            let c = char::from_digit(current_digit.to_int().unwrap() as uint,\n+            let c = char::from_digit(current_digit.to_int().unwrap() as u32,\n                                      radix);\n             buf[end] = c.unwrap() as u8;\n             end += 1;\n@@ -228,7 +228,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n             let ascii2value = |chr: u8| {\n                 (chr as char).to_digit(radix).unwrap()\n             };\n-            let value2ascii = |val: uint| {\n+            let value2ascii = |val: u32| {\n                 char::from_digit(val, radix).unwrap() as u8\n             };\n "}, {"sha": "d6c01ddc74acbb657e48c722a24dfeec650930e4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -1432,12 +1432,12 @@ pub trait Float\n #[unstable(feature = \"core\", reason = \"needs reevaluation\")]\n pub trait FromStrRadix {\n     type Err;\n-    fn from_str_radix(str: &str, radix: uint) -> Result<Self, Self::Err>;\n+    fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::Err>;\n }\n \n /// A utility function that just calls FromStrRadix::from_str_radix.\n #[unstable(feature = \"core\", reason = \"needs reevaluation\")]\n-pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint)\n+pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: u32)\n                                        -> Result<T, T::Err> {\n     FromStrRadix::from_str_radix(str, radix)\n }\n@@ -1501,7 +1501,7 @@ macro_rules! from_str_radix_float_impl {\n             /// `None` if the string did not represent a valid number.\n             /// Otherwise, `Some(n)` where `n` is the floating-point number\n             /// represented by `src`.\n-            fn from_str_radix(src: &str, radix: uint)\n+            fn from_str_radix(src: &str, radix: u32)\n                               -> Result<$T, ParseFloatError> {\n                 use self::FloatErrorKind::*;\n                 use self::ParseFloatError as PFE;\n@@ -1661,7 +1661,7 @@ macro_rules! from_str_radix_int_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl FromStrRadix for $T {\n             type Err = ParseIntError;\n-            fn from_str_radix(src: &str, radix: uint)\n+            fn from_str_radix(src: &str, radix: u32)\n                               -> Result<$T, ParseIntError> {\n                 use self::IntErrorKind::*;\n                 use self::ParseIntError as PIE;"}, {"sha": "baad31a61e105817916cd12ed9708afa4b61a683", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -422,7 +422,7 @@ impl<'a> Parser<'a> {\n                 Some((_, c)) => {\n                     match c.to_digit(10) {\n                         Some(i) => {\n-                            cur = cur * 10 + i;\n+                            cur = cur * 10 + i as usize;\n                             found = true;\n                             self.cur.next();\n                         }"}, {"sha": "62ed824c3ba9e54183fe54cc8ce58ba3f593ff09", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -369,7 +369,7 @@ impl Float for f32 {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_string(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigAll, ExpNone, false);\n+        num, 10, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -382,7 +382,7 @@ pub fn to_string(num: f32) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_hex(num: f32) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 16u, true, SignNeg, DigAll, ExpNone, false);\n+        num, 16, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -395,7 +395,7 @@ pub fn to_str_hex(num: f32) -> String {\n /// * radix - The base to use\n #[inline]\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n-pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n+pub fn to_str_radix_special(num: f32, rdx: u32) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n \n@@ -410,7 +410,7 @@ pub fn to_str_radix_special(num: f32, rdx: uint) -> (String, bool) {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exact(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n+        num, 10, true, SignNeg, DigExact(dig), ExpNone, false);\n     r\n }\n \n@@ -425,7 +425,7 @@ pub fn to_str_exact(num: f32, dig: uint) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_digits(num: f32, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n+        num, 10, true, SignNeg, DigMax(dig), ExpNone, false);\n     r\n }\n \n@@ -441,7 +441,7 @@ pub fn to_str_digits(num: f32, dig: uint) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n+        num, 10, true, SignNeg, DigExact(dig), ExpDec, upper);\n     r\n }\n \n@@ -457,7 +457,7 @@ pub fn to_str_exp_exact(num: f32, dig: uint, upper: bool) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);\n+        num, 10, true, SignNeg, DigMax(dig), ExpDec, upper);\n     r\n }\n "}, {"sha": "0e2ac97ca01eae9c881c96723b92f610c08c0d63", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -378,7 +378,7 @@ impl Float for f64 {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_string(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigAll, ExpNone, false);\n+        num, 10, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -391,7 +391,7 @@ pub fn to_string(num: f64) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_hex(num: f64) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 16u, true, SignNeg, DigAll, ExpNone, false);\n+        num, 16, true, SignNeg, DigAll, ExpNone, false);\n     r\n }\n \n@@ -404,7 +404,7 @@ pub fn to_str_hex(num: f64) -> String {\n /// * radix - The base to use\n #[inline]\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n-pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n+pub fn to_str_radix_special(num: f64, rdx: u32) -> (String, bool) {\n     strconv::float_to_str_common(num, rdx, true, SignNeg, DigAll, ExpNone, false)\n }\n \n@@ -419,7 +419,7 @@ pub fn to_str_radix_special(num: f64, rdx: uint) -> (String, bool) {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exact(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigExact(dig), ExpNone, false);\n+        num, 10, true, SignNeg, DigExact(dig), ExpNone, false);\n     r\n }\n \n@@ -434,7 +434,7 @@ pub fn to_str_exact(num: f64, dig: uint) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_digits(num: f64, dig: uint) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigMax(dig), ExpNone, false);\n+        num, 10, true, SignNeg, DigMax(dig), ExpNone, false);\n     r\n }\n \n@@ -450,7 +450,7 @@ pub fn to_str_digits(num: f64, dig: uint) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigExact(dig), ExpDec, upper);\n+        num, 10, true, SignNeg, DigExact(dig), ExpDec, upper);\n     r\n }\n \n@@ -466,7 +466,7 @@ pub fn to_str_exp_exact(num: f64, dig: uint, upper: bool) -> String {\n #[unstable(feature = \"std_misc\", reason = \"may be removed or relocated\")]\n pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n     let (r, _) = strconv::float_to_str_common(\n-        num, 10u, true, SignNeg, DigMax(dig), ExpDec, upper);\n+        num, 10, true, SignNeg, DigMax(dig), ExpDec, upper);\n     r\n }\n "}, {"sha": "cf5e1eb0eb7ca4095ef85c2df69faa54a28f7398", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -182,7 +182,7 @@ fn int_to_str_bytes_common<T, F>(num: T, radix: uint, sign: SignFormat, mut f: F\n /// - Panics if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n ///   between digit and exponent sign `'p'`.\n pub fn float_to_str_bytes_common<T: Float>(\n-        num: T, radix: uint, negative_zero: bool,\n+        num: T, radix: u32, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits, exp_format: ExponentFormat, exp_upper: bool\n         ) -> (Vec<u8>, bool) {\n     assert!(2 <= radix && radix <= 36);\n@@ -253,7 +253,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n         deccum = deccum / radix_gen;\n         deccum = deccum.trunc();\n \n-        buf.push(char::from_digit(current_digit.to_int().unwrap() as uint, radix)\n+        buf.push(char::from_digit(current_digit.to_int().unwrap() as u32, radix)\n              .unwrap() as u8);\n \n         // No more digits to calculate for the non-fractional part -> break\n@@ -310,7 +310,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n             let current_digit = deccum.trunc().abs();\n \n             buf.push(char::from_digit(\n-                current_digit.to_int().unwrap() as uint, radix).unwrap() as u8);\n+                current_digit.to_int().unwrap() as u32, radix).unwrap() as u8);\n \n             // Decrease the deccumulator one fractional digit at a time\n             deccum = deccum.fract();\n@@ -324,7 +324,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n             let ascii2value = |chr: u8| {\n                 (chr as char).to_digit(radix).unwrap()\n             };\n-            let value2ascii = |val: uint| {\n+            let value2ascii = |val: u32| {\n                 char::from_digit(val, radix).unwrap() as u8\n             };\n \n@@ -412,7 +412,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n /// `to_str_bytes_common()`, for details see there.\n #[inline]\n pub fn float_to_str_common<T: Float>(\n-        num: T, radix: uint, negative_zero: bool,\n+        num: T, radix: u32, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits, exp_format: ExponentFormat, exp_capital: bool\n         ) -> (String, bool) {\n     let (bytes, special) = float_to_str_bytes_common(num, radix,\n@@ -422,8 +422,8 @@ pub fn float_to_str_common<T: Float>(\n \n // Some constants for from_str_bytes_common's input validation,\n // they define minimum radix values for which the character is a valid digit.\n-static DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n-static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n+static DIGIT_P_RADIX: u32 = ('p' as u32) - ('a' as u32) + 11;\n+static DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n \n #[cfg(test)]\n mod tests {"}, {"sha": "cfd80b6755cf95a767279441407c40f5345a0333", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -645,7 +645,7 @@ impl<'a> StringReader<'a> {\n \n     /// Scan through any digits (base `radix`) or underscores, and return how\n     /// many digits there were.\n-    fn scan_digits(&mut self, radix: usize) -> usize {\n+    fn scan_digits(&mut self, radix: u32) -> usize {\n         let mut len = 0;\n         loop {\n             let c = self.curr;"}, {"sha": "82b5ec11d95d1dd8aef5c9f990ade25c9a950d27", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -297,7 +297,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n             PushParam => {\n                 // params are 1-indexed\n                 stack.push(mparams[match cur.to_digit(10) {\n-                    Some(d) => d - 1,\n+                    Some(d) => d as usize - 1,\n                     None => return Err(\"bad param number\".to_string())\n                 }].clone());\n             },"}, {"sha": "bfe22712de8c3b2e0b4e5b2092fd6854b8a8b1da", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=b1cd76906a4c7e40e3eb3569450d2dbd3be9fcab", "patch": "@@ -19,18 +19,18 @@ macro_rules! t {\n \n pub fn main() {\n     // Basic usage\n-    t!(to_string(1.2345678e-5f64, 10u, true, SignNeg, DigMax(6), ExpDec, false),\n+    t!(to_string(1.2345678e-5f64, 10, true, SignNeg, DigMax(6), ExpDec, false),\n              \"1.234568e-5\");\n \n     // Hexadecimal output\n-    t!(to_string(7.281738281250e+01f64, 16u, true, SignAll, DigMax(6), ExpBin, false),\n+    t!(to_string(7.281738281250e+01f64, 16, true, SignAll, DigMax(6), ExpBin, false),\n               \"+1.2345p+6\");\n-    t!(to_string(-1.777768135071e-02f64, 16u, true, SignAll, DigMax(6), ExpBin, false),\n+    t!(to_string(-1.777768135071e-02f64, 16, true, SignAll, DigMax(6), ExpBin, false),\n              \"-1.2345p-6\");\n \n     // Some denormals\n-    t!(to_string(4.9406564584124654e-324f64, 10u, true, SignNeg, DigMax(6), ExpBin, false),\n+    t!(to_string(4.9406564584124654e-324f64, 10, true, SignNeg, DigMax(6), ExpBin, false),\n              \"1p-1074\");\n-    t!(to_string(2.2250738585072009e-308f64, 10u, true, SignNeg, DigMax(6), ExpBin, false),\n+    t!(to_string(2.2250738585072009e-308f64, 10, true, SignNeg, DigMax(6), ExpBin, false),\n              \"1p-1022\");\n }"}]}