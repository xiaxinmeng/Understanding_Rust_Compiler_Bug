{"sha": "2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNmU2NjBhZTE3ZjM5OWQ5M2FkOTEwNGQ4YjlhNjA3NWQyZTg0Y2U=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-24T12:28:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T12:28:43Z"}, "message": "Rollup merge of #73652 - da-x:add-reexported-to-use-suggestions, r=petrochenkov\n\nAdd re-exports to use suggestions\n\nIn the following example, an inaccessible path is suggested via `use foo::bar::X;` whereas an accessible public exported path can be suggested instead.\n\n```rust\nmod foo {\n    mod bar {\n        pub struct X;\n    }\n    pub use self::bar::X;\n}\n\nfn main() { X; }\n```\n\nThis fixes the issue.", "tree": {"sha": "f7b1d9c43b177a27909559293dd96ca22249e5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b1d9c43b177a27909559293dd96ca22249e5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe80b8CRBK7hj4Ov3rIwAAdHIIACV2THJlDo4L1gfu50wJ4W5C\nt4v3HZbq3Krk47O7V5OgXI0cQDoj/CVu6krF/yQUtKI0v9vdIMnV7j3MhlIuDbTG\nYoJ8dyRnsa3e5dJ7Zunwnir6wXU/Oml0+zkV8jVq1IWqHS9zK+McwTtRtpAZiPHP\n/1cDSlQSPZqYZ7LPgtR98zyu8BjLUyQ///5xTkuFbMFoRzKg61yZFD4pIvdRSP1U\n6SVdzKaixvlwKPHfJ25gEXMAbs7m6ZhEvZwslRW/2fRwQDC7Ivx2bCo/n1TNSYvC\nJHb4n13UziBTMIIYF8+CKLwVFyq7Zjl4pf1iX1JUOl+MrJjGAFOO1+inEpT/VV0=\n=4fUr\n-----END PGP SIGNATURE-----\n", "payload": "tree f7b1d9c43b177a27909559293dd96ca22249e5f1\nparent 45de677b1e2a95f14fd9bce030c8fc60bdf5642f\nparent 037e930df7983577a2093732de0bd2c1252a4e37\nauthor Dylan DPC <dylan.dpc@gmail.com> 1593001723 +0200\ncommitter GitHub <noreply@github.com> 1593001723 +0200\n\nRollup merge of #73652 - da-x:add-reexported-to-use-suggestions, r=petrochenkov\n\nAdd re-exports to use suggestions\n\nIn the following example, an inaccessible path is suggested via `use foo::bar::X;` whereas an accessible public exported path can be suggested instead.\n\n```rust\nmod foo {\n    mod bar {\n        pub struct X;\n    }\n    pub use self::bar::X;\n}\n\nfn main() { X; }\n```\n\nThis fixes the issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "html_url": "https://github.com/rust-lang/rust/commit/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "url": "https://api.github.com/repos/rust-lang/rust/commits/45de677b1e2a95f14fd9bce030c8fc60bdf5642f", "html_url": "https://github.com/rust-lang/rust/commit/45de677b1e2a95f14fd9bce030c8fc60bdf5642f"}, {"sha": "037e930df7983577a2093732de0bd2c1252a4e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/037e930df7983577a2093732de0bd2c1252a4e37", "html_url": "https://github.com/rust-lang/rust/commit/037e930df7983577a2093732de0bd2c1252a4e37"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "2854683b61bab30919de6906f8f421150d5f0dc4", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -643,18 +643,18 @@ impl<'a> Resolver<'a> {\n         let not_local_module = crate_name.name != kw::Crate;\n         let mut worklist =\n             vec![(start_module, Vec::<ast::PathSegment>::new(), true, not_local_module)];\n+        let mut worklist_via_import = vec![];\n \n-        while let Some((in_module, path_segments, accessible, in_module_is_extern)) = worklist.pop()\n+        while let Some((in_module, path_segments, accessible, in_module_is_extern)) =\n+            match worklist.pop() {\n+                None => worklist_via_import.pop(),\n+                Some(x) => Some(x),\n+            }\n         {\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n-                // avoid imports entirely\n-                if name_binding.is_import() && !name_binding.is_extern_crate() {\n-                    return;\n-                }\n-\n-                // avoid non-importable candidates as well\n+                // avoid non-importable candidates\n                 if !name_binding.is_importable() {\n                     return;\n                 }\n@@ -667,6 +667,17 @@ impl<'a> Resolver<'a> {\n                     return;\n                 }\n \n+                let via_import = name_binding.is_import() && !name_binding.is_extern_crate();\n+\n+                // There is an assumption elsewhere that paths of variants are in the enum's\n+                // declaration and not imported. With this assumption, the variant component is\n+                // chopped and the rest of the path is assumed to be the enum's own path. For\n+                // errors where a variant is used as the type instead of the enum, this causes\n+                // funny looking invalid suggestions, i.e `foo` instead of `foo::MyEnum`.\n+                if via_import && name_binding.is_possibly_imported_variant() {\n+                    return;\n+                }\n+\n                 // collect results based on the filter function\n                 // avoid suggesting anything from the same module in which we are resolving\n                 if ident.name == lookup_ident.name\n@@ -724,7 +735,8 @@ impl<'a> Resolver<'a> {\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {\n-                            worklist.push((module, path_segments, child_accessible, is_extern));\n+                            if via_import { &mut worklist_via_import } else { &mut worklist }\n+                                .push((module, path_segments, child_accessible, is_extern));\n                         }\n                     }\n                 }"}, {"sha": "9ddcf9e1de7d191dabb0db017b6eeef9f83ac653", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -703,6 +703,13 @@ impl<'a> NameBinding<'a> {\n             }\n     }\n \n+    fn is_possibly_imported_variant(&self) -> bool {\n+        match self.kind {\n+            NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),\n+            _ => self.is_variant(),\n+        }\n+    }\n+\n     // We sometimes need to treat variants as `pub` for backwards compatibility.\n     fn pseudo_vis(&self) -> ty::Visibility {\n         if self.is_variant() && self.res().def_id().is_local() {"}, {"sha": "32660fdb41876158f95f34860e837cefd8c052cc", "filename": "src/test/ui/glob-resolve1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.rs?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -29,3 +29,7 @@ fn main() {\n     foo::<C>(); //~ ERROR: cannot find type `C` in this scope\n     foo::<D>(); //~ ERROR: cannot find type `D` in this scope\n }\n+\n+mod other {\n+    pub fn import() {}\n+}"}, {"sha": "3c818f3ae48ea4634db7720946b065247e97b3a5", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -42,6 +42,11 @@ error[E0425]: cannot find function `import` in this scope\n    |\n LL |     import();\n    |     ^^^^^^ not found in this scope\n+   |\n+help: consider importing this function\n+   |\n+LL | use other::import;\n+   |\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/glob-resolve1.rs:28:11"}, {"sha": "ee730910ee44153be90e0c503aaa40b825cfacd0", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -16,7 +16,7 @@ help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n-LL | use namespace_mix::xm2::S;\n+LL | use xm2::S;\n    |\n \n error[E0423]: expected value, found type alias `xm1::S`\n@@ -39,7 +39,7 @@ help: consider importing one of these items instead\n    |\n LL | use m2::S;\n    |\n-LL | use namespace_mix::xm2::S;\n+LL | use xm2::S;\n    |\n \n error[E0423]: expected value, found struct variant `m7::V`\n@@ -61,7 +61,7 @@ help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n-LL | use namespace_mix::xm8::V;\n+LL | use xm8::V;\n    |\n \n error[E0423]: expected value, found struct variant `xm7::V`\n@@ -83,7 +83,7 @@ help: consider importing one of these items instead\n    |\n LL | use m8::V;\n    |\n-LL | use namespace_mix::xm8::V;\n+LL | use xm8::V;\n    |\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied"}, {"sha": "d4fd7cb1257e051469f95a879c2fd1ab4e1f7547", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -4,7 +4,9 @@ error[E0405]: cannot find trait `T` in this scope\n LL | impl T for Foo { }\n    |      ^ not found in this scope\n    |\n-help: consider importing this trait\n+help: consider importing one of these items\n+   |\n+LL | use baz::T;\n    |\n LL | use foo::bar::T;\n    |"}, {"sha": "16baa6c9b623311e58b0b4b6168b412118466e8c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a6e660ae17f399d93ad9104d8b9a6075d2e84ce/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=2a6e660ae17f399d93ad9104d8b9a6075d2e84ce", "patch": "@@ -132,7 +132,7 @@ LL |     let _: E = m::n::Z;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0423]: expected value, found enum `m::n::Z`\n@@ -165,7 +165,7 @@ LL |     let _: E = m::n::Z::Fn;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0412]: cannot find type `Z` in this scope\n@@ -183,7 +183,7 @@ LL |     let _: E = m::n::Z::Struct;\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n@@ -212,7 +212,7 @@ LL |     let _: E = m::n::Z::Unit {};\n    |            ^\n help: consider importing this enum\n    |\n-LL | use m::n::Z;\n+LL | use m::Z;\n    |\n \n error[E0603]: enum `Z` is private"}]}