{"sha": "f7da074d2ac5302f3c6af882efca2d73c8ec006c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZGEwNzRkMmFjNTMwMmYzYzZhZjg4MmVmY2EyZDczYzhlYzAwNmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-12T09:55:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-12T09:55:09Z"}, "message": "Rollup merge of #57459 - varkor:E0202-issue-reference, r=petrochenkov\n\nReference tracking issue for inherent associated types in diagnostic\n\nThis makes it clearer that associated types in inherent impls are an intended feature, like the diagnostic for equality constraints in where clauses. (This is more helpful, because the lack of associated types is a confusing omission and it lets users more easily track the state of the feature.)", "tree": {"sha": "786a8d4274fec8ea4a460d14f87c2c9435439d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786a8d4274fec8ea4a460d14f87c2c9435439d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7da074d2ac5302f3c6af882efca2d73c8ec006c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcObl+CRBK7hj4Ov3rIwAAdHIIADCN5P6SduPa4GE+e/R7bMy2\n4AtAMlwnzkZMKlzwMlyqj97ERGnG+GoDPJOcNjIymrvhszczj91c9bYzi56OJrRe\n2wmbVmIsa1yW2hdspw2L4mkCbOXsaTsyMdTfPQlin9vAWud5E5/FCh+/0VZuAij+\n9jEd6jMsajkI+HuKz80nf7eciVMEuRbUNnTcFNbxFXdmdUH0sqN6pOjOr782kbUF\nRTQfwFV72YNnyFRgP4ivH2RiaUMNXStVloaJDQgDOjh3Jrfwf8DRvfy1biVhFtla\n+rrCcUg69bIqjSJpJWparnGVGb8M95j9GJs7zpg4YKnHQ+juROBSP4W7B+CSo98=\n=Y9oW\n-----END PGP SIGNATURE-----\n", "payload": "tree 786a8d4274fec8ea4a460d14f87c2c9435439d2d\nparent 0b1427eeb8193a47c2194f1478a784864d5a3197\nparent ac4a4547ba674b6d9d0e3b3e018be94d32766faa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547286909 +0100\ncommitter GitHub <noreply@github.com> 1547286909 +0100\n\nRollup merge of #57459 - varkor:E0202-issue-reference, r=petrochenkov\n\nReference tracking issue for inherent associated types in diagnostic\n\nThis makes it clearer that associated types in inherent impls are an intended feature, like the diagnostic for equality constraints in where clauses. (This is more helpful, because the lack of associated types is a confusing omission and it lets users more easily track the state of the feature.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7da074d2ac5302f3c6af882efca2d73c8ec006c", "html_url": "https://github.com/rust-lang/rust/commit/f7da074d2ac5302f3c6af882efca2d73c8ec006c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7da074d2ac5302f3c6af882efca2d73c8ec006c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1427eeb8193a47c2194f1478a784864d5a3197", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1427eeb8193a47c2194f1478a784864d5a3197", "html_url": "https://github.com/rust-lang/rust/commit/0b1427eeb8193a47c2194f1478a784864d5a3197"}, {"sha": "ac4a4547ba674b6d9d0e3b3e018be94d32766faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4a4547ba674b6d9d0e3b3e018be94d32766faa", "html_url": "https://github.com/rust-lang/rust/commit/ac4a4547ba674b6d9d0e3b3e018be94d32766faa"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "3d0e46d998622e2791e6f8ba093b2843b3bc91de", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f7da074d2ac5302f3c6af882efca2d73c8ec006c", "patch": "@@ -438,8 +438,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n-                self.err_handler().span_err(predicate.span, \"equality constraints are not yet \\\n-                                                             supported in where clauses (#20041)\");\n+                self.err_handler()\n+                    .span_err(predicate.span, \"equality constraints are not yet \\\n+                                               supported in where clauses (see #20041)\");\n             }\n         }\n         visit::walk_generics(self, generics)"}, {"sha": "be5f398e31f0527d66590268a178ef5d0ee86e5e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f7da074d2ac5302f3c6af882efca2d73c8ec006c", "patch": "@@ -1108,7 +1108,7 @@ fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span:\n         tcx.sess,\n         span,\n         E0202,\n-        \"associated types are not allowed in inherent impls\"\n+        \"associated types are not yet supported in inherent impls (see #8995)\"\n     );\n }\n "}, {"sha": "05329a2714257bed0eaa05d6c11f7c38a09ab84d", "filename": "src/test/ui/assoc-inherent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=f7da074d2ac5302f3c6af882efca2d73c8ec006c", "patch": "@@ -1,9 +1,9 @@\n-// Test associated types are forbidden in inherent impls.\n+// Test associated types are, until #8995 is implemented, forbidden in inherent impls.\n \n struct Foo;\n \n impl Foo {\n-    type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n+    type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n }\n \n fn main() {}"}, {"sha": "f438ac8df4a090a0d639684ca3089c603895c415", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=f7da074d2ac5302f3c6af882efca2d73c8ec006c", "patch": "@@ -1,7 +1,7 @@\n-error[E0202]: associated types are not allowed in inherent impls\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n   --> $DIR/assoc-inherent.rs:6:5\n    |\n-LL |     type Bar = isize; //~ERROR associated types are not allowed in inherent impls\n+LL |     type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n    |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "220447079c629f88ed84f6d0d838963c312abbca", "filename": "src/test/ui/where-clauses/where-equality-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7da074d2ac5302f3c6af882efca2d73c8ec006c/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-equality-constraints.stderr?ref=f7da074d2ac5302f3c6af882efca2d73c8ec006c", "patch": "@@ -1,10 +1,10 @@\n-error: equality constraints are not yet supported in where clauses (#20041)\n+error: equality constraints are not yet supported in where clauses (see #20041)\n   --> $DIR/where-equality-constraints.rs:1:14\n    |\n LL | fn f() where u8 = u16 {}\n    |              ^^^^^^^^\n \n-error: equality constraints are not yet supported in where clauses (#20041)\n+error: equality constraints are not yet supported in where clauses (see #20041)\n   --> $DIR/where-equality-constraints.rs:3:14\n    |\n LL | fn g() where for<'a> &'static (u8,) == u16, {}"}]}