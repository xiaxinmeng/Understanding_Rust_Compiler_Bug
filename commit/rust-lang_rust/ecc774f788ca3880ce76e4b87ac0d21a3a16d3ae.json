{"sha": "ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYzc3NGY3ODhjYTM4ODBjZTc2ZTRiODdhYzBkMjFhM2ExNmQzYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-11T20:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-11T20:46:45Z"}, "message": "auto merge of #13395 : Ryman/rust/bytecontainer_impl_container, r=alexcrichton\n\nAlso some minor cleanup in Path related to this.", "tree": {"sha": "359321a6aa1fb979c5b0804697c891cef2a6c1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/359321a6aa1fb979c5b0804697c891cef2a6c1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "html_url": "https://github.com/rust-lang/rust/commit/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e93067732ac1398a74958a3b1b0f6fa72fee8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e93067732ac1398a74958a3b1b0f6fa72fee8d", "html_url": "https://github.com/rust-lang/rust/commit/b7e93067732ac1398a74958a3b1b0f6fa72fee8d"}, {"sha": "9b9ad9b741bcab9669b9a64dd8004382290dfa47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9ad9b741bcab9669b9a64dd8004382290dfa47", "html_url": "https://github.com/rust-lang/rust/commit/9b9ad9b741bcab9669b9a64dd8004382290dfa47"}], "stats": {"total": 78, "additions": 32, "deletions": 46}, "files": [{"sha": "660f92d8f7b929b406c88fae6e15380cb49e0b5d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "patch": "@@ -158,15 +158,15 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// See individual Path impls for additional restrictions.\n     #[inline]\n     fn new<T: BytesContainer>(path: T) -> Self {\n-        assert!(!contains_nul(path.container_as_bytes()));\n+        assert!(!contains_nul(&path));\n         unsafe { GenericPathUnsafe::new_unchecked(path) }\n     }\n \n     /// Creates a new Path from a byte vector or string, if possible.\n     /// The resulting Path will always be normalized.\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Self> {\n-        if contains_nul(path.container_as_bytes()) {\n+        if contains_nul(&path) {\n             None\n         } else {\n             Some(unsafe { GenericPathUnsafe::new_unchecked(path) })\n@@ -274,7 +274,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Fails the task if the filename contains a NUL.\n     #[inline]\n     fn set_filename<T: BytesContainer>(&mut self, filename: T) {\n-        assert!(!contains_nul(filename.container_as_bytes()));\n+        assert!(!contains_nul(&filename));\n         unsafe { self.set_filename_unchecked(filename) }\n     }\n     /// Replaces the extension with the given byte vector or string.\n@@ -286,43 +286,30 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     ///\n     /// Fails the task if the extension contains a NUL.\n     fn set_extension<T: BytesContainer>(&mut self, extension: T) {\n-        assert!(!contains_nul(extension.container_as_bytes()));\n-        // borrowck causes problems here too\n-        let val = {\n-            match self.filename() {\n-                None => None,\n-                Some(name) => {\n-                    let dot = '.' as u8;\n-                    match name.rposition_elem(&dot) {\n-                        None | Some(0) => {\n-                            if extension.container_as_bytes().is_empty() {\n-                                None\n-                            } else {\n-                                let mut v;\n-                                let extension = extension.container_as_bytes();\n-                                v = slice::with_capacity(name.len() + extension.len() + 1);\n-                                v.push_all(name);\n-                                v.push(dot);\n-                                v.push_all(extension);\n-                                Some(v)\n-                            }\n-                        }\n-                        Some(idx) => {\n-                            if extension.container_as_bytes().is_empty() {\n-                                Some(name.slice_to(idx).to_owned())\n-                            } else {\n-                                let mut v;\n-                                let extension = extension.container_as_bytes();\n-                                v = slice::with_capacity(idx + extension.len() + 1);\n-                                v.push_all(name.slice_to(idx+1));\n-                                v.push_all(extension);\n-                                Some(v)\n-                            }\n-                        }\n-                    }\n+        assert!(!contains_nul(&extension));\n+\n+        let val = self.filename().and_then(|name| {\n+            let dot = '.' as u8;\n+            let extlen = extension.container_as_bytes().len();\n+            match (name.rposition_elem(&dot), extlen) {\n+                (None, 0) | (Some(0), 0) => None,\n+                (Some(idx), 0) => Some(name.slice_to(idx).to_owned()),\n+                (idx, extlen) => {\n+                    let idx = match idx {\n+                        None | Some(0) => name.len(),\n+                        Some(val) => val\n+                    };\n+\n+                    let mut v;\n+                    v = slice::with_capacity(idx + extlen + 1);\n+                    v.push_all(name.slice_to(idx));\n+                    v.push(dot);\n+                    v.push_all(extension.container_as_bytes());\n+                    Some(v)\n                 }\n             }\n-        };\n+        });\n+\n         match val {\n             None => (),\n             Some(v) => unsafe { self.set_filename_unchecked(v) }\n@@ -376,7 +363,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Fails the task if the path contains a NUL.\n     #[inline]\n     fn push<T: BytesContainer>(&mut self, path: T) {\n-        assert!(!contains_nul(path.container_as_bytes()));\n+        assert!(!contains_nul(&path));\n         unsafe { self.push_unchecked(path) }\n     }\n     /// Pushes multiple paths (as byte vectors or strings) onto `self`.\n@@ -589,8 +576,8 @@ impl<'a> BytesContainer for str::MaybeOwned<'a> {\n }\n \n #[inline(always)]\n-fn contains_nul(v: &[u8]) -> bool {\n-    v.iter().any(|&x| x == 0)\n+fn contains_nul<T: BytesContainer>(v: &T) -> bool {\n+    v.container_as_bytes().iter().any(|&x| x == 0)\n }\n \n #[cfg(test)]"}, {"sha": "93d8d9e3eb4168d1c0a35e05cc805b4830e04374", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ecc774f788ca3880ce76e4b87ac0d21a3a16d3ae", "patch": "@@ -306,14 +306,13 @@ impl GenericPathUnsafe for Path {\n impl GenericPath for Path {\n     #[inline]\n     fn new_opt<T: BytesContainer>(path: T) -> Option<Path> {\n-        let s = path.container_as_str();\n-        match s {\n+        match path.container_as_str() {\n             None => None,\n-            Some(s) => {\n-                if contains_nul(s.as_bytes()) {\n+            Some(ref s) => {\n+                if contains_nul(s) {\n                     None\n                 } else {\n-                    Some(unsafe { GenericPathUnsafe::new_unchecked(s) })\n+                    Some(unsafe { GenericPathUnsafe::new_unchecked(*s) })\n                 }\n             }\n         }"}]}