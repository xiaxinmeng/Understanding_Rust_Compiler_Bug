{"sha": "8183b949c49cfdd5889859162e82fab4c8e64065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxODNiOTQ5YzQ5Y2ZkZDU4ODk4NTkxNjJlODJmYWI0YzhlNjQwNjU=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-09T07:20:38Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-02-09T07:20:38Z"}, "message": "cargo fmt", "tree": {"sha": "93dec1f5bf8b2a6d2fd7804c46d6926d4b40bba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93dec1f5bf8b2a6d2fd7804c46d6926d4b40bba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8183b949c49cfdd5889859162e82fab4c8e64065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8183b949c49cfdd5889859162e82fab4c8e64065", "html_url": "https://github.com/rust-lang/rust/commit/8183b949c49cfdd5889859162e82fab4c8e64065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8183b949c49cfdd5889859162e82fab4c8e64065/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb90f5cc8e0347534436612f45a3c22c7e265bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb90f5cc8e0347534436612f45a3c22c7e265bb", "html_url": "https://github.com/rust-lang/rust/commit/4bb90f5cc8e0347534436612f45a3c22c7e265bb"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "3873671781cf6483dd16a25475b68756d419fc32", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -16,7 +16,6 @@\n use cargo_metadata;\n use getopts;\n \n-\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;"}, {"sha": "6686211632357117abc9720215b53fd464ee31a4", "filename": "src/chains.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -84,7 +84,11 @@ use crate::utils::{\n     trimmed_last_line_width, wrap_str,\n };\n \n-pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+pub fn rewrite_chain(\n+    expr: &ast::Expr,\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+) -> Option<String> {\n     let chain = Chain::from_ast(expr, context);\n     debug!(\"rewrite_chain {:?} {:?}\", chain, shape);\n \n@@ -419,8 +423,12 @@ impl Rewrite for Chain {\n         debug!(\"rewrite chain {:?} {:?}\", self, shape);\n \n         let mut formatter = match context.config.indent_style() {\n-            IndentStyle::Block => Box::new(ChainFormatterBlock::new(self)) as Box<dyn ChainFormatter>,\n-            IndentStyle::Visual => Box::new(ChainFormatterVisual::new(self)) as Box<dyn ChainFormatter>,\n+            IndentStyle::Block => {\n+                Box::new(ChainFormatterBlock::new(self)) as Box<dyn ChainFormatter>\n+            }\n+            IndentStyle::Visual => {\n+                Box::new(ChainFormatterVisual::new(self)) as Box<dyn ChainFormatter>\n+            }\n         };\n \n         formatter.format_root(&self.parent, context, shape)?;"}, {"sha": "5b59a5114b513cd8a2ecf8624a53d7625009a2c7", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -590,7 +590,11 @@ impl Rewrite for ast::Stmt {\n }\n \n // Rewrite condition if the given expression has one.\n-pub fn rewrite_cond(context: &RewriteContext<'_>, expr: &ast::Expr, shape: Shape) -> Option<String> {\n+pub fn rewrite_cond(\n+    context: &RewriteContext<'_>,\n+    expr: &ast::Expr,\n+    shape: Shape,\n+) -> Option<String> {\n     match expr.node {\n         ast::ExprKind::Match(ref cond, _) => {\n             // `match `cond` {`\n@@ -1337,7 +1341,11 @@ pub fn is_every_expr_simple(lists: &[OverflowableItem<'_>]) -> bool {\n     lists.iter().all(OverflowableItem::is_simple)\n }\n \n-pub fn can_be_overflowed_expr(context: &RewriteContext<'_>, expr: &ast::Expr, args_len: usize) -> bool {\n+pub fn can_be_overflowed_expr(\n+    context: &RewriteContext<'_>,\n+    expr: &ast::Expr,\n+    args_len: usize,\n+) -> bool {\n     match expr.node {\n         ast::ExprKind::Match(..) => {\n             (context.use_block_indent() && args_len == 1)"}, {"sha": "a18cba69d6564184fffca77d21dce52cfb8766df", "filename": "src/items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -998,7 +998,11 @@ fn format_struct(\n     }\n }\n \n-pub fn format_trait(context: &RewriteContext<'_>, item: &ast::Item, offset: Indent) -> Option<String> {\n+pub fn format_trait(\n+    context: &RewriteContext<'_>,\n+    item: &ast::Item,\n+    offset: Indent,\n+) -> Option<String> {\n     if let ast::ItemKind::Trait(\n         is_auto,\n         unsafety,\n@@ -1172,7 +1176,11 @@ pub fn format_trait_alias(\n     rewrite_assign_rhs(context, lhs, generic_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n }\n \n-fn format_unit_struct(context: &RewriteContext<'_>, p: &StructParts<'_>, offset: Indent) -> Option<String> {\n+fn format_unit_struct(\n+    context: &RewriteContext<'_>,\n+    p: &StructParts<'_>,\n+    offset: Indent,\n+) -> Option<String> {\n     let header_str = format_header(context, p.prefix, p.ident, p.vis);\n     let generics_str = if let Some(generics) = p.generics {\n         let hi = if generics.where_clause.predicates.is_empty() {"}, {"sha": "47985a4d6c0780c39e1570f5f4c9a51b203f5003", "filename": "src/macros.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -1027,7 +1027,11 @@ fn wrap_macro_args_inner(\n //\n // We always try and format on one line.\n // FIXME: Use multi-line when every thing does not fit on one line.\n-fn format_macro_args(context: &RewriteContext<'_>, toks: TokenStream, shape: Shape) -> Option<String> {\n+fn format_macro_args(\n+    context: &RewriteContext<'_>,\n+    toks: TokenStream,\n+    shape: Shape,\n+) -> Option<String> {\n     if !context.config.format_macro_matchers() {\n         let token_stream: TokenStream = toks.into();\n         let span = span_for_token_stream(&token_stream);\n@@ -1340,7 +1344,11 @@ impl MacroBranch {\n ///     [pub] static ref NAME_N: TYPE_N = EXPR_N;\n /// }\n /// ```\n-fn format_lazy_static(context: &RewriteContext<'_>, shape: Shape, ts: &TokenStream) -> Option<String> {\n+fn format_lazy_static(\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    ts: &TokenStream,\n+) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n     let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n     let nested_shape = shape"}, {"sha": "3bd57711be9eefaeee6aaa5245e96099373b151b", "filename": "src/overflow.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -758,7 +758,10 @@ fn no_long_items(list: &[ListItem]) -> bool {\n }\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout.\n-pub fn maybe_get_args_offset(callee_str: &str, args: &[OverflowableItem<'_>]) -> Option<(bool, usize)> {\n+pub fn maybe_get_args_offset(\n+    callee_str: &str,\n+    args: &[OverflowableItem<'_>],\n+) -> Option<(bool, usize)> {\n     if let Some(&(_, num_args_before)) = args\n         .get(0)?\n         .whitelist()"}, {"sha": "956ce56bdf1e1d17189cb3bf98956d26df5dbef9", "filename": "src/patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8183b949c49cfdd5889859162e82fab4c8e64065/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=8183b949c49cfdd5889859162e82fab4c8e64065", "patch": "@@ -288,7 +288,11 @@ impl<'a> Spanned for TuplePatField<'a> {\n     }\n }\n \n-pub fn can_be_overflowed_pat(context: &RewriteContext<'_>, pat: &TuplePatField<'_>, len: usize) -> bool {\n+pub fn can_be_overflowed_pat(\n+    context: &RewriteContext<'_>,\n+    pat: &TuplePatField<'_>,\n+    len: usize,\n+) -> bool {\n     match *pat {\n         TuplePatField::Pat(pat) => match pat.node {\n             ast::PatKind::Path(..)"}]}