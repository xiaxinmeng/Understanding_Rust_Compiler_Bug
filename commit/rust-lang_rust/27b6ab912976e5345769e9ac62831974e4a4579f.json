{"sha": "27b6ab912976e5345769e9ac62831974e4a4579f", "node_id": "C_kwDOAAsO6NoAKDI3YjZhYjkxMjk3NmU1MzQ1NzY5ZTlhYzYyODMxOTc0ZTRhNDU3OWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-08T02:10:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T03:17:20Z"}, "message": "Remove some more usages of guess_head_span", "tree": {"sha": "94798ce79054a06752b2578309ea953c6a78f04c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94798ce79054a06752b2578309ea953c6a78f04c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b6ab912976e5345769e9ac62831974e4a4579f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b6ab912976e5345769e9ac62831974e4a4579f", "html_url": "https://github.com/rust-lang/rust/commit/27b6ab912976e5345769e9ac62831974e4a4579f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b6ab912976e5345769e9ac62831974e4a4579f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f7618f628e3028a301a8308c71ee7d49707d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f7618f628e3028a301a8308c71ee7d49707d22", "html_url": "https://github.com/rust-lang/rust/commit/57f7618f628e3028a301a8308c71ee7d49707d22"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "ad42bcbda024e11577c635d057c9abe23790b50c", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -18,20 +18,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         trait_item_def_id: DefId,\n         requirement: &dyn fmt::Display,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let msg = \"impl has stricter requirements than trait\";\n-        let sp = self.tcx.sess.source_map().guess_head_span(error_span);\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            error_span,\n+            E0276,\n+            \"impl has stricter requirements than trait\"\n+        );\n \n-        let mut err = struct_span_err!(self.tcx.sess, sp, E0276, \"{}\", msg);\n-\n-        if trait_item_def_id.is_local() {\n+        if let Some(span) = self.tcx.hir().span_if_local(trait_item_def_id) {\n             let item_name = self.tcx.item_name(impl_item_def_id.to_def_id());\n             err.span_label(\n-                self.tcx.def_span(trait_item_def_id),\n+                span,\n                 format!(\"definition of `{}` from trait\", item_name),\n             );\n         }\n \n-        err.span_label(sp, format!(\"impl has extra requirement {}\", requirement));\n+        err.span_label(error_span, format!(\"impl has extra requirement {}\", requirement));\n \n         err\n     }\n@@ -48,7 +50,6 @@ pub fn report_object_safety_error<'tcx>(\n         hir::Node::Item(item) => Some(item.ident.span),\n         _ => None,\n     });\n-    let span = tcx.sess.source_map().guess_head_span(span);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,"}, {"sha": "50e9383cacc12519dc4b6198b3f446b1901fc267", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -694,9 +694,8 @@ pub trait LintContext: Sized {\n                     }\n \n                     if let Some(span) = in_test_module {\n-                        let def_span = self.sess().source_map().guess_head_span(span);\n                         db.span_help(\n-                            span.shrink_to_lo().to(def_span),\n+                            self.sess().source_map().guess_head_span(span),\n                             \"consider adding a `#[cfg(test)]` to the containing module\",\n                         );\n                     }"}, {"sha": "72d68903874044b2c4f3d53287efb42811266dd2", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -139,13 +139,8 @@ impl<'tcx> ObligationCause<'tcx> {\n         ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: Default::default() }\n     }\n \n-    pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {\n+    pub fn span(&self, _tcx: TyCtxt<'tcx>) -> Span {\n         match *self.code() {\n-            ObligationCauseCode::CompareImplMethodObligation { .. }\n-            | ObligationCauseCode::MainFunctionType\n-            | ObligationCauseCode::StartFunctionType => {\n-                tcx.sess.source_map().guess_head_span(self.span)\n-            }\n             ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 arm_span,\n                 .."}, {"sha": "5b21c0466477437ad543054e5b265ea477080e59", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -1759,8 +1759,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n                 let descr = descr.to_string();\n-                let vis_span =\n-                    self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n+                let vis_span = self.tcx.def_span(def_id);\n                 if kind == \"trait\" {\n                     self.tcx.sess.emit_err(InPublicInterfaceTraits {\n                         span,"}, {"sha": "247c34379ec7d673796549f564d66e21deb87272", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -953,7 +953,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let found_span = found_did\n                     .and_then(|did| self.tcx.hir().span_if_local(did))\n-                    .map(|sp| self.tcx.sess.source_map().guess_head_span(sp)); // the sp could be an fn def\n+                    .map(|sp| self.tcx.sess.source_map().guess_head_span(sp)); // the sp could be a closure\n \n                 if self.reported_closure_mismatch.borrow().contains(&(span, found_span)) {\n                     // We check closures twice, with obligations flowing in different directions,\n@@ -1089,7 +1089,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }),\n                 ..\n             }) => (\n-                sm.guess_head_span(fn_decl_span),\n+                fn_decl_span,\n                 hir.body(body)\n                     .params\n                     .iter()"}, {"sha": "6d141a58ef953651f814fc6af964afcaf758c583", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27b6ab912976e5345769e9ac62831974e4a4579f/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27b6ab912976e5345769e9ac62831974e4a4579f/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=27b6ab912976e5345769e9ac62831974e4a4579f", "patch": "@@ -31,8 +31,12 @@ LL | trait Trait: Sized {}\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n-LL |     let t: &dyn Trait = match opt() {\n-   |                         ^^^^^^^^^^^ `Trait` cannot be made into an object\n+LL |       let t: &dyn Trait = match opt() {\n+   |  _________________________^\n+LL | |         Some(()) => &S,\n+LL | |         None => &R,\n+LL | |     };\n+   | |_____^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-unsafe-trait-obj-match.rs:6:14"}]}