{"sha": "e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YWUzZjU0OTFlNmIyZDc4MGUxMThmNGJmMGQzOTc3MDFmZTgxMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T13:17:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-05T13:17:02Z"}, "message": "Auto merge of #7629 - mikerite:fix-7623-2, r=xFrednet\n\nMake `approx_const` MSRV aware\n\nchangelog: [`approx_const`]: Add MRSV checks for LOG10_2 and LOG2_10.\n\nFixes #7623", "tree": {"sha": "1d297fe271f606a8c9ae1cd5b5e99063ae345f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d297fe271f606a8c9ae1cd5b5e99063ae345f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "html_url": "https://github.com/rust-lang/rust/commit/e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c269ad50f99635dbbe67cc78e0c045b9f95a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c269ad50f99635dbbe67cc78e0c045b9f95a3d", "html_url": "https://github.com/rust-lang/rust/commit/a8c269ad50f99635dbbe67cc78e0c045b9f95a3d"}, {"sha": "19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267", "html_url": "https://github.com/rust-lang/rust/commit/19d8a3e53c77a51f691f61e1d4eb0ae2d0c94267"}], "stats": {"total": 227, "additions": 145, "deletions": 82}, "files": [{"sha": "a57d8b67ed37d33c3f8668507f7d810477f4cc8f", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 69, "deletions": 54, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -1,8 +1,10 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{meets_msrv, msrvs};\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol;\n use std::f64::consts as f64;\n \n@@ -36,68 +38,81 @@ declare_clippy_lint! {\n     \"the approximate of a known float constant (in `std::fXX::consts`)\"\n }\n \n-// Tuples are of the form (constant, name, min_digits)\n-const KNOWN_CONSTS: [(f64, &str, usize); 18] = [\n-    (f64::E, \"E\", 4),\n-    (f64::FRAC_1_PI, \"FRAC_1_PI\", 4),\n-    (f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\", 5),\n-    (f64::FRAC_2_PI, \"FRAC_2_PI\", 5),\n-    (f64::FRAC_2_SQRT_PI, \"FRAC_2_SQRT_PI\", 5),\n-    (f64::FRAC_PI_2, \"FRAC_PI_2\", 5),\n-    (f64::FRAC_PI_3, \"FRAC_PI_3\", 5),\n-    (f64::FRAC_PI_4, \"FRAC_PI_4\", 5),\n-    (f64::FRAC_PI_6, \"FRAC_PI_6\", 5),\n-    (f64::FRAC_PI_8, \"FRAC_PI_8\", 5),\n-    (f64::LN_10, \"LN_10\", 5),\n-    (f64::LN_2, \"LN_2\", 5),\n-    (f64::LOG10_E, \"LOG10_E\", 5),\n-    (f64::LOG2_E, \"LOG2_E\", 5),\n-    (f64::LOG2_10, \"LOG2_10\", 5),\n-    (f64::LOG10_2, \"LOG10_2\", 5),\n-    (f64::PI, \"PI\", 3),\n-    (f64::SQRT_2, \"SQRT_2\", 5),\n+// Tuples are of the form (constant, name, min_digits, msrv)\n+const KNOWN_CONSTS: [(f64, &str, usize, Option<RustcVersion>); 18] = [\n+    (f64::E, \"E\", 4, None),\n+    (f64::FRAC_1_PI, \"FRAC_1_PI\", 4, None),\n+    (f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\", 5, None),\n+    (f64::FRAC_2_PI, \"FRAC_2_PI\", 5, None),\n+    (f64::FRAC_2_SQRT_PI, \"FRAC_2_SQRT_PI\", 5, None),\n+    (f64::FRAC_PI_2, \"FRAC_PI_2\", 5, None),\n+    (f64::FRAC_PI_3, \"FRAC_PI_3\", 5, None),\n+    (f64::FRAC_PI_4, \"FRAC_PI_4\", 5, None),\n+    (f64::FRAC_PI_6, \"FRAC_PI_6\", 5, None),\n+    (f64::FRAC_PI_8, \"FRAC_PI_8\", 5, None),\n+    (f64::LN_2, \"LN_2\", 5, None),\n+    (f64::LN_10, \"LN_10\", 5, None),\n+    (f64::LOG2_10, \"LOG2_10\", 5, Some(msrvs::LOG2_10)),\n+    (f64::LOG2_E, \"LOG2_E\", 5, None),\n+    (f64::LOG10_2, \"LOG10_2\", 5, Some(msrvs::LOG10_2)),\n+    (f64::LOG10_E, \"LOG10_E\", 5, None),\n+    (f64::PI, \"PI\", 3, None),\n+    (f64::SQRT_2, \"SQRT_2\", 5, None),\n ];\n \n-declare_lint_pass!(ApproxConstant => [APPROX_CONSTANT]);\n+pub struct ApproxConstant {\n+    msrv: Option<RustcVersion>,\n+}\n \n-impl<'tcx> LateLintPass<'tcx> for ApproxConstant {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        if let ExprKind::Lit(lit) = &e.kind {\n-            check_lit(cx, &lit.node, e);\n+impl ApproxConstant {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+\n+    fn check_lit(&self, cx: &LateContext<'_>, lit: &LitKind, e: &Expr<'_>) {\n+        match *lit {\n+            LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n+                FloatTy::F32 => self.check_known_consts(cx, e, s, \"f32\"),\n+                FloatTy::F64 => self.check_known_consts(cx, e, s, \"f64\"),\n+            },\n+            LitKind::Float(s, LitFloatType::Unsuffixed) => self.check_known_consts(cx, e, s, \"f{32, 64}\"),\n+            _ => (),\n         }\n     }\n-}\n \n-fn check_lit(cx: &LateContext<'_>, lit: &LitKind, e: &Expr<'_>) {\n-    match *lit {\n-        LitKind::Float(s, LitFloatType::Suffixed(fty)) => match fty {\n-            FloatTy::F32 => check_known_consts(cx, e, s, \"f32\"),\n-            FloatTy::F64 => check_known_consts(cx, e, s, \"f64\"),\n-        },\n-        LitKind::Float(s, LitFloatType::Unsuffixed) => check_known_consts(cx, e, s, \"f{32, 64}\"),\n-        _ => (),\n+    fn check_known_consts(&self, cx: &LateContext<'_>, e: &Expr<'_>, s: symbol::Symbol, module: &str) {\n+        let s = s.as_str();\n+        if s.parse::<f64>().is_ok() {\n+            for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n+                if is_approx_const(constant, &s, min_digits)\n+                    && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n+                {\n+                    span_lint_and_help(\n+                        cx,\n+                        APPROX_CONSTANT,\n+                        e.span,\n+                        &format!(\"approximate value of `{}::consts::{}` found\", module, &name),\n+                        None,\n+                        \"consider using the constant directly\",\n+                    );\n+                    return;\n+                }\n+            }\n+        }\n     }\n }\n \n-fn check_known_consts(cx: &LateContext<'_>, e: &Expr<'_>, s: symbol::Symbol, module: &str) {\n-    let s = s.as_str();\n-    if s.parse::<f64>().is_ok() {\n-        for &(constant, name, min_digits) in &KNOWN_CONSTS {\n-            if is_approx_const(constant, &s, min_digits) {\n-                span_lint(\n-                    cx,\n-                    APPROX_CONSTANT,\n-                    e.span,\n-                    &format!(\n-                        \"approximate value of `{}::consts::{}` found. \\\n-                         Consider using it directly\",\n-                        module, &name\n-                    ),\n-                );\n-                return;\n-            }\n+impl_lint_pass!(ApproxConstant => [APPROX_CONSTANT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ApproxConstant {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Lit(lit) = &e.kind {\n+            self.check_lit(cx, &lit.node, e);\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }\n \n /// Returns `false` if the number of significant figures in `value` are"}, {"sha": "77ebc6a7d75768e5b71f6547d0374be679a22322", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -1869,7 +1869,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n     store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n-    store.register_late_pass(|| Box::new(approx_const::ApproxConstant));\n     store.register_late_pass(|| Box::new(misc::MiscLints));\n     store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n@@ -1898,6 +1897,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n \n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || Box::new(approx_const::ApproxConstant::new(msrv)));\n     store.register_late_pass(move || Box::new(methods::Methods::new(avoid_breaking_exported_api, msrv)));\n     store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustive::new(msrv)));"}, {"sha": "8651fa6fcf9eaddeee67be294468d6b9afd573f9", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -132,7 +132,7 @@ define_Conf! {\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),\n-    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE.\n+    /// Lint: MANUAL_SPLIT_ONCE, MANUAL_STR_REPEAT, CLONED_INSTEAD_OF_COPIED, REDUNDANT_FIELD_NAMES, REDUNDANT_STATIC_LIFETIMES, FILTER_MAP_NEXT, CHECKED_CONVERSIONS, MANUAL_RANGE_CONTAINS, USE_SELF, MEM_REPLACE_WITH_DEFAULT, MANUAL_NON_EXHAUSTIVE, OPTION_AS_REF_DEREF, MAP_UNWRAP_OR, MATCH_LIKE_MATCHES_MACRO, MANUAL_STRIP, MISSING_CONST_FOR_FN, UNNESTED_OR_PATTERNS, FROM_OVER_INTO, PTR_AS_PTR, IF_THEN_SOME_ELSE_NONE, APPROX_CONSTANT.\n     ///\n     /// The minimum rust version that the project supports\n     (msrv: Option<String> = None),"}, {"sha": "6fab17f07fe0b4d5060b91290bbaa6f4993a81dc", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -17,6 +17,7 @@ msrv_aliases! {\n     1,50,0 { BOOL_THEN }\n     1,46,0 { CONST_IF_MATCH }\n     1,45,0 { STR_STRIP_PREFIX }\n+    1,43,0 { LOG2_10, LOG10_2 }\n     1,42,0 { MATCHES_MACRO }\n     1,41,0 { RE_REBALANCING_COHERENCE, RESULT_MAP_OR_ELSE }\n     1,40,0 { MEM_TAKE, NON_EXHAUSTIVE, OPTION_AS_DEREF }"}, {"sha": "a49fd40bf337a5bb5012877d554e30919c6657dc", "filename": "tests/ui/approx_const.stderr", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -1,130 +1,171 @@\n-error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::E` found\n   --> $DIR/approx_const.rs:4:16\n    |\n LL |     let my_e = 2.7182;\n    |                ^^^^^^\n    |\n    = note: `-D clippy::approx-constant` implied by `-D warnings`\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::E` found\n   --> $DIR/approx_const.rs:5:20\n    |\n LL |     let almost_e = 2.718;\n    |                    ^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found\n   --> $DIR/approx_const.rs:8:24\n    |\n LL |     let my_1_frac_pi = 0.3183;\n    |                        ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n   --> $DIR/approx_const.rs:11:28\n    |\n LL |     let my_frac_1_sqrt_2 = 0.70710678;\n    |                            ^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n   --> $DIR/approx_const.rs:12:32\n    |\n LL |     let almost_frac_1_sqrt_2 = 0.70711;\n    |                                ^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found\n   --> $DIR/approx_const.rs:15:24\n    |\n LL |     let my_frac_2_pi = 0.63661977;\n    |                        ^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found\n   --> $DIR/approx_const.rs:18:27\n    |\n LL |     let my_frac_2_sq_pi = 1.128379;\n    |                           ^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found\n   --> $DIR/approx_const.rs:21:24\n    |\n LL |     let my_frac_pi_2 = 1.57079632679;\n    |                        ^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found\n   --> $DIR/approx_const.rs:24:24\n    |\n LL |     let my_frac_pi_3 = 1.04719755119;\n    |                        ^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found\n   --> $DIR/approx_const.rs:27:24\n    |\n LL |     let my_frac_pi_4 = 0.785398163397;\n    |                        ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found\n   --> $DIR/approx_const.rs:30:24\n    |\n LL |     let my_frac_pi_6 = 0.523598775598;\n    |                        ^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found\n   --> $DIR/approx_const.rs:33:24\n    |\n LL |     let my_frac_pi_8 = 0.3926990816987;\n    |                        ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LN_10` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LN_10` found\n   --> $DIR/approx_const.rs:36:20\n    |\n LL |     let my_ln_10 = 2.302585092994046;\n    |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LN_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LN_2` found\n   --> $DIR/approx_const.rs:39:19\n    |\n LL |     let my_ln_2 = 0.6931471805599453;\n    |                   ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG10_E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG10_E` found\n   --> $DIR/approx_const.rs:42:22\n    |\n LL |     let my_log10_e = 0.4342944819032518;\n    |                      ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG2_E` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG2_E` found\n   --> $DIR/approx_const.rs:45:21\n    |\n LL |     let my_log2_e = 1.4426950408889634;\n    |                     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG2_10` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG2_10` found\n   --> $DIR/approx_const.rs:48:19\n    |\n LL |     let log2_10 = 3.321928094887362;\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::LOG10_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::LOG10_2` found\n   --> $DIR/approx_const.rs:51:19\n    |\n LL |     let log10_2 = 0.301029995663981;\n    |                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/approx_const.rs:54:17\n    |\n LL |     let my_pi = 3.1415;\n    |                 ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/approx_const.rs:55:21\n    |\n LL |     let almost_pi = 3.14;\n    |                     ^^^^\n+   |\n+   = help: consider using the constant directly\n \n-error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::SQRT_2` found\n   --> $DIR/approx_const.rs:58:18\n    |\n LL |     let my_sq2 = 1.4142;\n    |                  ^^^^^^\n+   |\n+   = help: consider using the constant directly\n \n error: aborting due to 21 previous errors\n "}, {"sha": "8d9fc5a864d751bf30b27da1990348ab0eb5c205", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -4,6 +4,11 @@\n \n use std::ops::{Deref, RangeFrom};\n \n+fn approx_const() {\n+    let log2_10 = 3.321928094887362;\n+    let log10_2 = 0.301029995663981;\n+}\n+\n fn cloned_instead_of_copied() {\n     let _ = [1].iter().cloned();\n }"}, {"sha": "360dcfb230c6563a6c5de5d5b6e322f70473dac5", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:160:24\n+  --> $DIR/min_rust_version_attr.rs:165:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:159:9\n+  --> $DIR/min_rust_version_attr.rs:164:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL ~             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:172:24\n+  --> $DIR/min_rust_version_attr.rs:177:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:171:9\n+  --> $DIR/min_rust_version_attr.rs:176:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "48fd58c9a49332cef60a8961fea442a958846978", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5ae3f5491e6b2d780e118f4bf0d397701fe8138/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=e5ae3f5491e6b2d780e118f4bf0d397701fe8138", "patch": "@@ -1,10 +1,11 @@\n-error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+error: approximate value of `f{32, 64}::consts::PI` found\n   --> $DIR/proc_macro.rs:10:14\n    |\n LL |     let _x = 3.14;\n    |              ^^^^\n    |\n    = note: `#[deny(clippy::approx_constant)]` on by default\n+   = help: consider using the constant directly\n \n error: aborting due to previous error\n "}]}