{"sha": "541c4999a9e878f26ada62bc9a82f088a8f2fad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MWM0OTk5YTllODc4ZjI2YWRhNjJiYzlhODJmMDg4YThmMmZhZDI=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-03-10T11:52:30Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-03-30T21:37:02Z"}, "message": "Remove redundant imports", "tree": {"sha": "e9f5d510663e3b2d41daf259d6088ee5f1a195fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f5d510663e3b2d41daf259d6088ee5f1a195fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/541c4999a9e878f26ada62bc9a82f088a8f2fad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/541c4999a9e878f26ada62bc9a82f088a8f2fad2", "html_url": "https://github.com/rust-lang/rust/commit/541c4999a9e878f26ada62bc9a82f088a8f2fad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/541c4999a9e878f26ada62bc9a82f088a8f2fad2/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d68edc6e1d4f5e6d1599202e3af38080840977", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d68edc6e1d4f5e6d1599202e3af38080840977", "html_url": "https://github.com/rust-lang/rust/commit/29d68edc6e1d4f5e6d1599202e3af38080840977"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "05d80f9203f140cee6bff4a178686b5f41c06f9c", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -777,7 +777,6 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n                                                  value: &V)\n                                                  -> Result<(), E::Error>\n     {\n-        use crate::ty::codec::TyEncoder;\n         let start_pos = self.position();\n \n         tag.encode(self)?;"}, {"sha": "f6956bd5736ebf33ab8ca32545ba4a8bfa81f0aa", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -372,7 +372,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // Returns a Value of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     fn eh_unwind_resume(&self) -> &'ll Value {\n-        use crate::attributes;\n         let unwresume = &self.eh_unwind_resume;\n         if let Some(llfn) = unwresume.get() {\n             return llfn;"}, {"sha": "fc4f6b83247872a6a02e7b413d6afae5b57329b5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -732,7 +732,6 @@ fn cast_int_to_float<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         // All inputs greater or equal to (f32::MAX + 0.5 ULP) are rounded to infinity,\n         // and for everything else LLVM's uitofp works just fine.\n         use rustc_apfloat::ieee::Single;\n-        use rustc_apfloat::Float;\n         const MAX_F32_PLUS_HALF_ULP: u128 = ((1 << (Single::PRECISION + 1)) - 1)\n                                             << (Single::MAX_EXP - Single::PRECISION as i16);\n         let max = bx.cx().const_uint_big(int_ty, MAX_F32_PLUS_HALF_ULP);"}, {"sha": "ebbc5a3d3a340a30c139b2ff4a5a2cb9defffcb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -155,7 +155,7 @@ impl CodeSuggestion {\n     /// Returns the assembled code suggestions and whether they should be shown with an underline.\n     pub fn splice_lines(&self, cm: &SourceMapperDyn)\n                         -> Vec<(String, Vec<SubstitutionPart>)> {\n-        use syntax_pos::{CharPos, Loc, Pos};\n+        use syntax_pos::{CharPos, Pos};\n \n         fn push_trailing(buf: &mut String,\n                          line_opt: Option<&Cow<'_, str>>,"}, {"sha": "2e71d46f4154c6384c5f1a0768df2761b0ba0be6", "filename": "src/librustc_interface/profile/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fprofile%2Fmod.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -62,7 +62,6 @@ fn total_duration(traces: &[trace::Rec]) -> Duration {\n fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n     use self::trace::*;\n     use std::fs::File;\n-    use std::time::{Instant};\n \n     let mut profq_msgs: Vec<ProfileQueriesMsg> = vec![];\n     let mut frame: StackFrame = StackFrame { parse_st: ParseState::Clear, traces: vec![] };"}, {"sha": "622cf00ed86e741458de5b7c04e9c211c7788e8b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -427,7 +427,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n-                        use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n                             self.tcx,\n                             lo,"}, {"sha": "488f81d8f740ec776ff4897ffd1620a0fe0f7299", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -331,8 +331,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         val: ImmTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::mir::UnOp::*;\n-        use rustc_apfloat::ieee::{Single, Double};\n-        use rustc_apfloat::Float;\n \n         let layout = val.layout;\n         let val = val.to_scalar()?;"}, {"sha": "3703ea08b6253245d93aa1350bd61fc87b9f93a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -1738,7 +1738,6 @@ impl<'a> Resolver<'a> {\n     /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<hir::Path, ()> {\n-        use std::iter;\n         let mut errored = false;\n \n         let path = if path_str.starts_with(\"::\") {"}, {"sha": "eb47892ea4103d281e632dcf2b04e71b8b42105f", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -164,7 +164,7 @@ crate fn environment<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId\n ) -> Environment<'tcx> {\n-    use super::{Lower, IntoFromEnvGoal};\n+    use super::IntoFromEnvGoal;\n     use rustc::hir::{Node, TraitItemKind, ImplItemKind, ItemKind, ForeignItemKind};\n \n     debug!(\"environment(def_id = {:?})\", def_id);"}, {"sha": "3579810b8d75f68abd472aa63bb8306144d00e8d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/541c4999a9e878f26ada62bc9a82f088a8f2fad2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=541c4999a9e878f26ada62bc9a82f088a8f2fad2", "patch": "@@ -420,9 +420,6 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     def_id: DefId,\n     return_ty: Option<Ty<'tcx>>,\n ) {\n-    use ty::subst::Subst;\n-    use rustc::ty::TypeFoldable;\n-\n     let predicates = fcx.tcx.predicates_of(def_id);\n \n     let generics = tcx.generics_of(def_id);\n@@ -1010,8 +1007,6 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n     span: Span,\n     id: hir::HirId)\n {\n-    use rustc::ty::TypeFoldable;\n-\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);"}]}