{"sha": "5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzJmYTQyZDQzNGU5MmU1ZmJiOWZiZDNiMDk5NWNjOTM2ZGRjYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T08:51:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T08:51:21Z"}, "message": "Auto merge of #27309 - eddyb:snapshot-infdef, r=alexcrichton\n\nFreeBSD i386 snapshot is missing, failed tests (possibly spurious).\r\nr? @alexcrichton", "tree": {"sha": "5e0ce03e0e08c453eb3c8c8f470553c6cda98263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0ce03e0e08c453eb3c8c8f470553c6cda98263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "html_url": "https://github.com/rust-lang/rust/commit/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d5fefa2508212ec2cc46c1069819a988f23598", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d5fefa2508212ec2cc46c1069819a988f23598", "html_url": "https://github.com/rust-lang/rust/commit/79d5fefa2508212ec2cc46c1069819a988f23598"}, {"sha": "cc09b1a08cc61dd3f485308adf3a5a252c718861", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc09b1a08cc61dd3f485308adf3a5a252c718861", "html_url": "https://github.com/rust-lang/rust/commit/cc09b1a08cc61dd3f485308adf3a5a252c718861"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "d5a177d3ee5d7adab0d198ddc9d133fb88138aaf", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -300,7 +300,7 @@ impl<T: Clone> Clone for Box<T> {\n     /// let y = x.clone();\n     /// ```\n     #[inline]\n-    fn clone(&self) -> Box<T> { box (HEAP) {(**self).clone()} }\n+    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n     /// Copies `source`'s contents into `self` without creating a new allocation.\n     ///\n     /// # Examples"}, {"sha": "fce327398e38daa348687e257a68a88df0a150c1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -70,8 +70,6 @@\n        test(no_crate_inject))]\n #![no_std]\n \n-// SNAP d4432b3\n-#![allow(unused_features)] // until feature(placement_in_syntax) is in snap\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]"}, {"sha": "80b7587ed36435a696a727e9cd074b601cc3fcbf", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -184,19 +184,11 @@ extern \"rust-intrinsic\" {\n     /// elements.\n     pub fn size_of<T>() -> usize;\n \n-    #[cfg(not(stage0))]\n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n-    // SNAP d4432b3\n-    #[cfg(stage0)]\n-    /// Moves a value to an uninitialized memory location.\n-    ///\n-    /// Drop glue is not run on the destination.\n-    pub fn move_val_init<T>(dst: &mut T, src: T);\n-\n     pub fn min_align_of<T>() -> usize;\n     pub fn pref_align_of<T>() -> usize;\n \n@@ -614,6 +606,5 @@ extern \"rust-intrinsic\" {\n     /// Rust's \"try catch\" construct which invokes the function pointer `f` with\n     /// the data pointer `data`, returning the exception payload if an exception\n     /// is thrown (aka the thread panics).\n-    #[cfg(not(stage0))]\n     pub fn try(f: fn(*mut u8), data: *mut u8) -> *mut u8;\n }"}, {"sha": "3d3a46e61d5460f66db64fa8e21008e2424362d8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -203,7 +203,6 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![cfg_attr(stage0, allow(unused_features))]\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]"}, {"sha": "23e10ee6c39e3b318fafb0df514c025c222002d0", "filename": "src/libstd/rt/unwind/gcc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fgcc.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -115,7 +115,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         _version: c_int,\n@@ -168,7 +168,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         _version: c_int,\n@@ -218,7 +218,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         state: uw::_Unwind_State,\n@@ -307,7 +307,7 @@ pub mod eabi {\n         }\n     }\n \n-    #[cfg_attr(not(stage0), lang = \"eh_personality_catch\")]\n+    #[lang = \"eh_personality_catch\"]\n     #[no_mangle]\n     pub extern fn rust_eh_personality_catch(\n         exceptionRecord: *mut EXCEPTION_RECORD,"}, {"sha": "60eced014de1b27aa4311d34a39dc199847684ac", "filename": "src/libstd/rt/unwind/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibstd%2Frt%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fmod.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -139,7 +139,6 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     // `dllexport`, but it's easier to not have conditional `src/rt/rust_try.ll`\n     // files and instead just have this non-generic shim the compiler can take\n     // care of exposing correctly.\n-    #[cfg(not(stage0))]\n     unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n                         -> Result<(), Box<Any + Send>> {\n         let prev = PANICKING.with(|s| s.get());\n@@ -152,11 +151,6 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n             Err(imp::cleanup(ep))\n         }\n     }\n-    #[cfg(stage0)]\n-    unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n-                        -> Result<(), Box<Any + Send>> {\n-        Ok(f(data))\n-    }\n \n     fn try_fn<F: FnOnce()>(opt_closure: *mut u8) {\n         let opt_closure = opt_closure as *mut Option<F>;"}, {"sha": "80a10b2463f015d3f2c6c4b371f8d0af9c9099ec", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -2637,19 +2637,15 @@ impl<'a> Parser<'a> {\n             //\n             // ... but for now: check for a place: `box(PLACE) EXPR`.\n \n-            if try!(self.eat(&token::OpenDelim(token::Paren)) ){\n-                // SNAP d4432b3\n-                // Enable this warning after snapshot ...\n-                //\n-                // let box_span = mk_sp(lo, self.last_span.hi);\n-                // self.span_warn(\n-                //     box_span,\n-                //     \"deprecated syntax; use the `in` keyword now \\\n-                //            (e.g. change `box (<expr>) <expr>` to \\\n-                //                         `in <expr> { <expr> }`)\");\n+            if try!(self.eat(&token::OpenDelim(token::Paren))) {\n+                let box_span = mk_sp(lo, self.last_span.hi);\n+                self.span_warn(box_span,\n+                    \"deprecated syntax; use the `in` keyword now \\\n+                           (e.g. change `box (<expr>) <expr>` to \\\n+                                        `in <expr> { <expr> }`)\");\n \n                 // Continue supporting `box () EXPR` (temporarily)\n-                if !try!(self.eat(&token::CloseDelim(token::Paren)) ){\n+                if !try!(self.eat(&token::CloseDelim(token::Paren))) {\n                     let place = try!(self.parse_expr_nopanic());\n                     try!(self.expect(&token::CloseDelim(token::Paren)));\n                     // Give a suggestion to use `box()` when a parenthesised expression is used"}, {"sha": "d317b5be4c101c8e0c7acaecd3f85e040ea4285c", "filename": "src/snapshots.txt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -1,3 +1,13 @@\n+S 2015-07-26 a5c12f4\n+  bitrig-x86_64 8734eb41ffbe6ddc1120aa2910db4162ec9cf270\n+  freebsd-x86_64 bc50b0f8d7f6d62f4f5ffa136f5387f5bf6524fd\n+  linux-i386 3459275cdf3896f678e225843fa56f0d9fdbabe8\n+  linux-x86_64 e451e3bd6e5fcef71e41ae6f3da9fb1cf0e13a0c\n+  macos-i386 428944a7984c0988e77909d82ca2ef77d96a1fbd\n+  macos-x86_64 b0515bb7d2892b9a58282fc865fee11a885406d6\n+  winnt-i386 22286e815372c3e03729853af48a2f6d538ed086\n+  winnt-x86_64 f13aa3c02a15f8e794b9e180487bdf04378f8f04\n+\n S 2015-07-17 d4432b3\n   bitrig-x86_64 af77768e0eb0f4c7ec5a8e36047a08053b54b230\n   freebsd-i386 b049325e5b2efe5f4884f3dafda448c1dac49b4f"}, {"sha": "a0a6e54e942b0a87a43d6ecd22fa96d6d34cc683", "filename": "src/test/compile-fail/borrowck-lend-flow-if.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-if.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -24,6 +24,7 @@ fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n+    //~^ WARN deprecated syntax\n }\n \n fn pre_freeze_cond() {"}, {"sha": "9356eeda60503f536b504d05af9553e069d1460d", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -23,6 +23,7 @@ fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n+    //~^ WARN deprecated syntax\n }\n \n fn loop_overarching_alias_mut() {"}, {"sha": "c3dcddf858724c3f020207ee8d149d175f409a09", "filename": "src/test/compile-fail/borrowck-lend-flow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -24,6 +24,7 @@ fn produce<T>() -> T { panic!(); }\n \n fn inc(v: &mut Box<isize>) {\n     *v = box() (**v + 1);\n+    //~^ WARN deprecated syntax\n }\n \n fn pre_freeze() {"}, {"sha": "558475c28d7014192b0c7e73811ba4a34e227992", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -23,6 +23,7 @@ impl Add for foo {\n         let foo(box i) = self;\n         let foo(box j) = f;\n         foo(box() (i + j))\n+        //~^ WARN deprecated syntax\n     }\n }\n "}, {"sha": "ace1b399662898d469d7e710c087d35c9543041a", "filename": "src/test/compile-fail/feature-gate-box-expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-box-expr.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -21,5 +21,6 @@ fn main() {\n     println!(\"x: {}\", x);\n \n     let x = box () 'c'; //~ ERROR box expression syntax is experimental\n+    //~^ WARN deprecated syntax\n     println!(\"x: {}\", x);\n }"}, {"sha": "7c75605d57d329e685f689094c182f22bf6fa64f", "filename": "src/test/compile-fail/feature-gate-placement-expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-placement-expr.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -20,6 +20,7 @@ fn main() {\n     use std::boxed::HEAP;\n \n     let x = box (HEAP) 'c'; //~ ERROR placement-in expression syntax is experimental\n+    //~^ WARN deprecated syntax\n     println!(\"x: {}\", x);\n \n     let x = in HEAP { 'c' }; //~ ERROR placement-in expression syntax is experimental"}, {"sha": "b33a6767274ea6f32c5677734e17fcd07adfcfc1", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -15,4 +15,5 @@ fn main() {\n     box ( () ) 0;\n     //~^ ERROR: the trait `core::ops::Placer<_>` is not implemented\n     //~| ERROR: the trait `core::ops::Placer<_>` is not implemented\n+    //~| WARN deprecated syntax\n }"}, {"sha": "e1d462d1700029432450a5f37b03d5a986d9fbff", "filename": "src/test/compile-fail/moves-based-on-type-tuple.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-tuple.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -10,7 +10,10 @@\n \n #![feature(box_syntax)]\n \n-fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> { box() (x, x) } //~ ERROR use of moved value\n+fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n+    box() (x, x) //~ ERROR use of moved value\n+    //~^ WARN deprecated syntax\n+}\n fn main() {\n     dup(box 3);\n }"}, {"sha": "3cf3685d5bd0413c78f2b918428c9e2cb960573a", "filename": "src/test/parse-fail/parenthesized-box-expr-message.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs?ref=5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "patch": "@@ -14,5 +14,6 @@ fn main() {\n     box (1 + 1)\n     //~^ HELP try using `box ()` instead:\n     //~| SUGGESTION box () (1 + 1)\n+    //~| WARN deprecated syntax\n     ; //~ ERROR expected expression, found `;`\n }"}]}