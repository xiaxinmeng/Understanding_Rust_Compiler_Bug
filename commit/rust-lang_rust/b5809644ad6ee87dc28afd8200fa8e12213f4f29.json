{"sha": "b5809644ad6ee87dc28afd8200fa8e12213f4f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ODA5NjQ0YWQ2ZWU4N2RjMjhhZmQ4MjAwZmE4ZTEyMjEzZjRmMjk=", "commit": {"author": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-19T07:21:01Z"}, "committer": {"name": "mdinger", "email": "mdinger.bugzilla@gmail.com", "date": "2014-04-19T07:21:01Z"}, "message": "Give more explanation when introducing closures", "tree": {"sha": "fb100c4b6a7d4162e2a7c6c810acdee7b2587a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb100c4b6a7d4162e2a7c6c810acdee7b2587a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5809644ad6ee87dc28afd8200fa8e12213f4f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5809644ad6ee87dc28afd8200fa8e12213f4f29", "html_url": "https://github.com/rust-lang/rust/commit/b5809644ad6ee87dc28afd8200fa8e12213f4f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5809644ad6ee87dc28afd8200fa8e12213f4f29/comments", "author": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mdinger", "id": 4156987, "node_id": "MDQ6VXNlcjQxNTY5ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/4156987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mdinger", "html_url": "https://github.com/mdinger", "followers_url": "https://api.github.com/users/mdinger/followers", "following_url": "https://api.github.com/users/mdinger/following{/other_user}", "gists_url": "https://api.github.com/users/mdinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/mdinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mdinger/subscriptions", "organizations_url": "https://api.github.com/users/mdinger/orgs", "repos_url": "https://api.github.com/users/mdinger/repos", "events_url": "https://api.github.com/users/mdinger/events{/privacy}", "received_events_url": "https://api.github.com/users/mdinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad0cdd7081bf78c4b7a00344f6f2b2f113cf0957", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0cdd7081bf78c4b7a00344f6f2b2f113cf0957", "html_url": "https://github.com/rust-lang/rust/commit/ad0cdd7081bf78c4b7a00344f6f2b2f113cf0957"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "ed70df7f3d37ee7ca6992402e9bb4a43ed6949e1", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b5809644ad6ee87dc28afd8200fa8e12213f4f29/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5809644ad6ee87dc28afd8200fa8e12213f4f29/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=b5809644ad6ee87dc28afd8200fa8e12213f4f29", "patch": "@@ -1719,19 +1719,41 @@ environment). For example, you couldn't write the following:\n ~~~~ {.ignore}\n let foo = 10;\n \n-fn bar() -> int {\n-   return foo; // `bar` cannot refer to `foo`\n-}\n+// `bar` cannot refer to `foo`\n+fn bar() -> () { println!(\"{}\", foo); }\n ~~~~\n \n Rust also supports _closures_, functions that can access variables in\n-the enclosing scope.\n+the enclosing scope.  Compare `foo` in these:\n+\n+~~~~\n+fn            bar() -> () { println!(\"{}\", foo) }; // cannot reach enclosing scope\n+let closure = |foo| -> () { println!(\"{}\", foo) }; // can reach enclosing scope\n+~~~~\n+\n+Closures can be utilized in this fashion:\n \n ~~~~\n-fn call_closure_with_ten(b: |int|) { b(10); }\n+// Create a nameless function and assign it to `closure`.\n+// It's sole argument is a yet unknown `foo` to be supplied\n+// by the caller.\n+let closure = |foo| -> () { println!(\"{}\", foo) };\n+\n+// Define `call_closure_with_ten` to take one argument and return null `()`.\n+// `fun` is a function which takes one `int` argument `|int|` and also returns\n+// null `()`.  `|int|` defines the `fun` to be of type _closure_\n+fn call_closure_with_ten(fun: |int| -> ()) -> () { fun(10); }\n \n-let captured_var = 20;\n-let closure = |arg| println!(\"captured_var={}, arg={}\", captured_var, arg);\n+// The caller supplies `10` to the closure\n+// which prints out the value\n+call_closure_with_ten(closure);\n+~~~~\n+\n+This can be simplified by removing null arguments:\n+\n+~~~~\n+let closure = |foo| println!(\"{}\", foo);\n+fn call_closure_with_ten(fun: |int|) { fun(10); }\n \n call_closure_with_ten(closure);\n ~~~~"}]}