{"sha": "ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMjk3ZmFmYmZiOWFmNDdiYzc1YmM3ZWFjOWZmNzZkODNmZGQ0OWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-18T23:15:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-12T00:05:18Z"}, "message": "Make suggestion have a more targetted underline", "tree": {"sha": "de6829375f03899ead62aa89e6cbaee03c083ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de6829375f03899ead62aa89e6cbaee03c083ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "html_url": "https://github.com/rust-lang/rust/commit/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9133b9c336e55d12bd5da1c610949473844dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9133b9c336e55d12bd5da1c610949473844dcf", "html_url": "https://github.com/rust-lang/rust/commit/fd9133b9c336e55d12bd5da1c610949473844dcf"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "fe53ccdbad50c9e43912f1003b48f951d43e722e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "patch": "@@ -70,7 +70,7 @@ use rustc_middle::ty::{\n     subst::{Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{DesugaringKind, Pos, Span};\n+use rustc_span::{BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::{cmp, fmt};\n \n@@ -731,16 +731,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         return_sp: Span,\n         arm_spans: impl Iterator<Item = Span>,\n     ) {\n-        let snippet = self\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(return_sp)\n-            .unwrap_or_else(|_| \"dyn Trait\".to_string());\n-        err.span_suggestion_verbose(\n-            return_sp,\n+        err.multipart_suggestion(\n             \"you could change the return type to be a boxed trait object\",\n-            format!(\"Box<dyn {}>\", &snippet[5..]),\n+            vec![\n+                (return_sp.with_hi(return_sp.lo() + BytePos(4)), \"Box<dyn\".to_string()),\n+                (return_sp.shrink_to_hi(), \">\".to_string()),\n+            ],\n             Applicability::MaybeIncorrect,\n         );\n         let sugg = arm_spans"}, {"sha": "b669476483b101b1131f157b9a849a7ea7287305", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "patch": "@@ -51,7 +51,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n-use rustc_span::{self, Span};\n+use rustc_span::{self, BytePos, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n@@ -1523,10 +1523,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         };\n         if has_impl {\n             if is_object_safe {\n-                err.span_suggestion_verbose(\n-                    return_sp,\n+                err.multipart_suggestion(\n                     \"you could change the return type to be a boxed trait object\",\n-                    format!(\"Box<dyn {}>\", &snippet[5..]),\n+                    vec![\n+                        (return_sp.with_hi(return_sp.lo() + BytePos(4)), \"Box<dyn\".to_string()),\n+                        (return_sp.shrink_to_hi(), \">\".to_string()),\n+                    ],\n                     Applicability::MachineApplicable,\n                 );\n             } else {"}, {"sha": "9abebeff95a87a97b05974e01b8e2cd253fbbf7d", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "patch": "@@ -35,7 +35,7 @@ LL |     B\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn ObjectSafe> {\n-   |             ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^           ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "66d9ff307d98f1c035f95a9936b805bfa99dd639", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=ff297fafbfb9af47bc75bc7eac9ff76d83fdd49c", "patch": "@@ -17,7 +17,7 @@ LL |     1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn foo() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n@@ -38,7 +38,7 @@ LL |         return 1u32;\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bar() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:20:9\n@@ -59,7 +59,7 @@ LL |         1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn baz() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -76,7 +76,7 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn qux() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n help: if you change the return type to expect trait objects box the returned expressions\n    |\n LL |         Box::new(0i32)\n@@ -102,7 +102,7 @@ LL |         _ => 1u32,\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn bat() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n@@ -124,7 +124,7 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn can() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:53:13\n@@ -145,7 +145,7 @@ LL |             1u32\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn cat() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14\n@@ -162,7 +162,7 @@ LL | |     }\n help: you could change the return type to be a boxed trait object\n    |\n LL | fn dog() -> Box<dyn std::fmt::Display> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^                  ^\n help: if you change the return type to expect trait objects box the returned expressions\n    |\n LL |         0 => Box::new(0i32),"}]}