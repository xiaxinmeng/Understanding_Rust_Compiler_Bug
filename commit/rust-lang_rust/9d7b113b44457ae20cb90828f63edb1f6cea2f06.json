{"sha": "9d7b113b44457ae20cb90828f63edb1f6cea2f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkN2IxMTNiNDQ0NTdhZTIwY2I5MDgyOGY2M2VkYjFmNmNlYTJmMDY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2015-11-06T13:31:02Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2015-12-05T08:18:30Z"}, "message": "Add proper support for indirect output constraints in inline asm", "tree": {"sha": "772372f07ceacf75a1ae3093a597fb54aae55ed4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/772372f07ceacf75a1ae3093a597fb54aae55ed4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7b113b44457ae20cb90828f63edb1f6cea2f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7b113b44457ae20cb90828f63edb1f6cea2f06", "html_url": "https://github.com/rust-lang/rust/commit/9d7b113b44457ae20cb90828f63edb1f6cea2f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7b113b44457ae20cb90828f63edb1f6cea2f06/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2ebaa9183d8e58693de408685e05ac2ad8ee31", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2ebaa9183d8e58693de408685e05ac2ad8ee31", "html_url": "https://github.com/rust-lang/rust/commit/3e2ebaa9183d8e58693de408685e05ac2ad8ee31"}], "stats": {"total": 117, "additions": 78, "deletions": 39}, "files": [{"sha": "de540e5cfb388f1e793eb4e1756ef5d63ba82434", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 }), pred);\n                 let post_outputs = self.exprs(outputs.map(|a| {\n                     debug!(\"cfg::construct InlineAsm id:{} output:{:?}\", expr.id, a);\n-                    let &(_, ref expr, _) = a;\n+                    let &(_, ref expr, _, _) = a;\n                     &**expr\n                 }), post_inputs);\n                 self.add_ast_node(expr.id, &[post_outputs])"}, {"sha": "316b49e1de408116133f908f11c9a403e0d781eb", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -458,9 +458,13 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                     self.consume_expr(&**input);\n                 }\n \n-                for &(_, ref output, is_rw) in &ia.outputs {\n-                    self.mutate_expr(expr, &**output,\n+                for &(_, ref output, is_rw, is_indirect) in &ia.outputs {\n+                    if is_indirect {\n+                        self.consume_expr(&**output);\n+                    } else {\n+                        self.mutate_expr(expr, &**output,\n                                            if is_rw { WriteAndRead } else { JustWrite });\n+                    }\n                 }\n             }\n "}, {"sha": "5170b37732420cd64dbb1906458fee10ab9f4031", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1166,12 +1166,18 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           hir::ExprInlineAsm(ref ia) => {\n \n-            let succ = ia.outputs.iter().rev().fold(succ, |succ, &(_, ref expr, _)| {\n-                // see comment on lvalues\n-                // in propagate_through_lvalue_components()\n-                let succ = self.write_lvalue(&**expr, succ, ACC_WRITE);\n-                self.propagate_through_lvalue_components(&**expr, succ)\n-            });\n+            let succ = ia.outputs.iter().rev().fold(succ,\n+                |succ, &(_, ref expr, _, is_indirect)| {\n+                    // see comment on lvalues\n+                    // in propagate_through_lvalue_components()\n+                    if is_indirect {\n+                        self.propagate_through_expr(&**expr, succ)\n+                    } else {\n+                        let succ = self.write_lvalue(&**expr, succ, ACC_WRITE);\n+                        self.propagate_through_lvalue_components(&**expr, succ)\n+                    }\n+                }\n+            );\n             // Inputs are executed first. Propagate last because of rev order\n             ia.inputs.iter().rev().fold(succ, |succ, &(_, ref expr)| {\n                 self.propagate_through_expr(&**expr, succ)\n@@ -1416,8 +1422,10 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n         }\n \n         // Output operands must be lvalues\n-        for &(_, ref out, _) in &ia.outputs {\n-          this.check_lvalue(&**out);\n+        for &(_, ref out, _, is_indirect) in &ia.outputs {\n+          if !is_indirect {\n+            this.check_lvalue(&**out);\n+          }\n           this.visit_expr(&**out);\n         }\n "}, {"sha": "c9a09989f04413dc7b7e5d21c152224ad8187ea8", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1127,7 +1127,9 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n                 expn_id,\n             }) => ExprInlineAsm(InlineAsm {\n                 inputs: inputs.move_map(|(c, input)| (c, folder.fold_expr(input))),\n-                outputs: outputs.move_map(|(c, out, is_rw)| (c, folder.fold_expr(out), is_rw)),\n+                outputs: outputs.move_map(|(c, out, is_rw, is_indirect)| {\n+                    (c, folder.fold_expr(out), is_rw, is_indirect)\n+                }),\n                 asm: asm,\n                 asm_str_style: asm_str_style,\n                 clobbers: clobbers,"}, {"sha": "bc95599fb7a7042a0a9965348bbd7ddbcc2f751c", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -891,7 +891,7 @@ pub enum Ty_ {\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<(InternedString, P<Expr>, bool)>,\n+    pub outputs: Vec<(InternedString, P<Expr>, bool, bool)>,\n     pub inputs: Vec<(InternedString, P<Expr>)>,\n     pub clobbers: Vec<InternedString>,\n     pub volatile: bool,"}, {"sha": "d0f2a9dca17fdc562b3a66e08b62b223b68aefb1", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -803,7 +803,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(&input)\n             }\n-            for &(_, ref output, _) in &ia.outputs {\n+            for &(_, ref output, _, _) in &ia.outputs {\n                 visitor.visit_expr(&output)\n             }\n         }"}, {"sha": "e5ea737f621ade1bd5d9dfb6fd60104d7bba741b", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1202,8 +1202,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                               .map(|&(ref c, ref input)| (c.clone(), lower_expr(lctx, input)))\n                               .collect(),\n                 outputs: outputs.iter()\n-                                .map(|&(ref c, ref out, ref is_rw)| {\n-                                    (c.clone(), lower_expr(lctx, out), *is_rw)\n+                                .map(|&(ref c, ref out, is_rw, is_indirect)| {\n+                                    (c.clone(), lower_expr(lctx, out), is_rw, is_indirect)\n                                 })\n                                 .collect(),\n                 asm: asm.clone(),"}, {"sha": "c87750002686c8445a5e3ab01dc1c26a13e127db", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1502,7 +1502,7 @@ impl<'a> State<'a> {\n                 try!(self.print_string(&a.asm, a.asm_str_style));\n                 try!(self.word_space(\":\"));\n \n-                try!(self.commasep(Inconsistent, &a.outputs, |s, &(ref co, ref o, is_rw)| {\n+                try!(self.commasep(Inconsistent, &a.outputs, |s, &(ref co, ref o, is_rw, _)| {\n                     match co.slice_shift_char() {\n                         Some(('=', operand)) if is_rw => {\n                             try!(s.print_string(&format!(\"+{}\", operand), ast::CookedStr))"}, {"sha": "efa34fbcbdcf87dbdbbbb30817e6d67635963aa8", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -39,27 +39,39 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     let mut ext_constraints = Vec::new();\n \n     // Prepare the output operands\n-    let outputs = ia.outputs.iter().enumerate().map(|(i, &(ref c, ref out, is_rw))| {\n+    let mut outputs = Vec::new();\n+    let mut inputs = Vec::new();\n+    for (i, &(ref c, ref out, is_rw, is_indirect)) in ia.outputs.iter().enumerate() {\n         constraints.push((*c).clone());\n \n         let out_datum = unpack_datum!(bcx, expr::trans(bcx, &**out));\n-        output_types.push(type_of::type_of(bcx.ccx(), out_datum.ty));\n-        let val = out_datum.val;\n-        if is_rw {\n+        if is_indirect {\n             bcx = callee::trans_arg_datum(bcx,\n                                           expr_ty(bcx, &**out),\n                                           out_datum,\n                                           cleanup::CustomScope(temp_scope),\n                                           callee::DontAutorefArg,\n-                                          &mut ext_inputs);\n-            ext_constraints.push(i.to_string());\n+                                          &mut inputs);\n+            if is_rw {\n+                ext_inputs.push(*inputs.last().unwrap());\n+                ext_constraints.push(i.to_string());\n+            }\n+        } else {\n+            output_types.push(type_of::type_of(bcx.ccx(), out_datum.ty));\n+            outputs.push(out_datum.val);\n+            if is_rw {\n+                bcx = callee::trans_arg_datum(bcx,\n+                                              expr_ty(bcx, &**out),\n+                                              out_datum,\n+                                              cleanup::CustomScope(temp_scope),\n+                                              callee::DontAutorefArg,\n+                                              &mut ext_inputs);\n+                ext_constraints.push(i.to_string());\n+            }\n         }\n-        val\n-\n-    }).collect::<Vec<_>>();\n+    }\n \n     // Now the input operands\n-    let mut inputs = Vec::new();\n     for &(ref c, ref input) in &ia.inputs {\n         constraints.push((*c).clone());\n "}, {"sha": "c8a66fb611d533bcce268f59e8c08e912b0f6516", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -480,7 +480,7 @@ fn walk_expr(cx: &CrateContext,\n                 walk_expr(cx, &**exp, scope_stack, scope_map);\n             }\n \n-            for &(_, ref exp, _) in outputs {\n+            for &(_, ref exp, _, _) in outputs {\n                 walk_expr(cx, &**exp, scope_stack, scope_map);\n             }\n         }"}, {"sha": "722273ee0f8525a0611098f99243f93fec2f649f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -3393,7 +3393,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n           for &(_, ref input) in &ia.inputs {\n               check_expr(fcx, &**input);\n           }\n-          for &(_, ref out, _) in &ia.outputs {\n+          for &(_, ref out, _, _) in &ia.outputs {\n               check_expr(fcx, &**out);\n           }\n           fcx.write_nil(id);"}, {"sha": "ac3e26d033582d8c366a3c9b23635fd7b32bdb8c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1462,7 +1462,7 @@ pub enum AsmDialect {\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n-    pub outputs: Vec<(InternedString, P<Expr>, bool)>,\n+    pub outputs: Vec<(InternedString, P<Expr>, bool, bool)>,\n     pub inputs: Vec<(InternedString, P<Expr>)>,\n     pub clobbers: Vec<InternedString>,\n     pub volatile: bool,"}, {"sha": "f643f0be276854216c290584caf7ff886fec9f38", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -125,7 +125,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                     };\n \n                     let is_rw = output.is_some();\n-                    outputs.push((output.unwrap_or(constraint), out, is_rw));\n+                    let is_indirect = constraint.contains(\"*\");\n+                    outputs.push((output.unwrap_or(constraint), out, is_rw, is_indirect));\n                 }\n             }\n             Inputs => {\n@@ -139,9 +140,9 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let (constraint, _str_style) = panictry!(p.parse_str());\n \n-                    if constraint.starts_with(\"=\") && !constraint.contains(\"*\") {\n+                    if constraint.starts_with(\"=\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '='\");\n-                    } else if constraint.starts_with(\"+\") && !constraint.contains(\"*\") {\n+                    } else if constraint.starts_with(\"+\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '+'\");\n                     }\n "}, {"sha": "8619c3c0bdb7920b318be654b0ada9d8602a745a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -1303,8 +1303,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 inputs: inputs.move_map(|(c, input)| {\n                     (c, folder.fold_expr(input))\n                 }),\n-                outputs: outputs.move_map(|(c, out, is_rw)| {\n-                    (c, folder.fold_expr(out), is_rw)\n+                outputs: outputs.move_map(|(c, out, is_rw, is_indirect)| {\n+                    (c, folder.fold_expr(out), is_rw, is_indirect)\n                 }),\n                 asm: asm,\n                 asm_str_style: asm_str_style,"}, {"sha": "a0b7df3e2e9ea25ae35ccc392e42c0128f63a5b9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -2221,7 +2221,7 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\":\"));\n \n                 try!(self.commasep(Inconsistent, &a.outputs,\n-                                   |s, &(ref co, ref o, is_rw)| {\n+                                   |s, &(ref co, ref o, is_rw, _)| {\n                     match co.slice_shift_char() {\n                         Some(('=', operand)) if is_rw => {\n                             try!(s.print_string(&format!(\"+{}\", operand),"}, {"sha": "5ede6596e8f99a2d4d515f96a180d55c444b7a5e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -786,7 +786,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             for &(_, ref input) in &ia.inputs {\n                 visitor.visit_expr(&input)\n             }\n-            for &(_, ref output, _) in &ia.outputs {\n+            for &(_, ref output, _, _) in &ia.outputs {\n                 visitor.visit_expr(&output)\n             }\n         }"}, {"sha": "d1873afb3a9b76fb842d40e61cfcd204d742cfc9", "filename": "src/test/run-pass/asm-indirect-memory.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7b113b44457ae20cb90828f63edb1f6cea2f06/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs?ref=9d7b113b44457ae20cb90828f63edb1f6cea2f06", "patch": "@@ -22,17 +22,29 @@ fn read(ptr: &u32) -> u32 {\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn write(ptr: &mut u32, val: u32) {\n     unsafe {\n-        asm!(\"mov $1, $0\" :: \"=*m\" (ptr), \"r\" (val));\n+        asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n     }\n }\n \n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn replace(ptr: &mut u32, val: u32) -> u32 {\n+    let out: u32;\n+    unsafe {\n+        asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n+    }\n+    out\n+}\n+\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {\n     let a = 1;\n-    let mut b = 2;\n     assert_eq!(read(&a), 1);\n+    let mut b = 2;\n     write(&mut b, 3);\n     assert_eq!(b, 3);\n+    let mut c = 4;\n+    assert_eq!(replace(&mut c, 5), 4);\n+    assert_eq!(c, 5);\n }\n \n #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]"}]}