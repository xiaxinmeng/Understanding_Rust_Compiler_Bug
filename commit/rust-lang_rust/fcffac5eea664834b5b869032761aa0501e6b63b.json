{"sha": "fcffac5eea664834b5b869032761aa0501e6b63b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZmZhYzVlZWE2NjQ4MzRiNWI4NjkwMzI3NjFhYTA1MDFlNmI2M2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-15T14:03:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:29:29Z"}, "message": "let_chains: Handle in unused parenthesis lint.", "tree": {"sha": "c9a7a6db02f24f48d883b679aae64f6df4d1b529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a7a6db02f24f48d883b679aae64f6df4d1b529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcffac5eea664834b5b869032761aa0501e6b63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcffac5eea664834b5b869032761aa0501e6b63b", "html_url": "https://github.com/rust-lang/rust/commit/fcffac5eea664834b5b869032761aa0501e6b63b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcffac5eea664834b5b869032761aa0501e6b63b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b", "html_url": "https://github.com/rust-lang/rust/commit/70a65e9d1ffa6c3e39bb0eff3c653f6329e2f16b"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "33b2289593f19361d90be3b9b5527351f1416b27", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fcffac5eea664834b5b869032761aa0501e6b63b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcffac5eea664834b5b869032761aa0501e6b63b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fcffac5eea664834b5b869032761aa0501e6b63b", "patch": "@@ -324,20 +324,28 @@ impl UnusedParens {\n                                 value: &ast::Expr,\n                                 msg: &str,\n                                 followed_by_block: bool) {\n-        if let ast::ExprKind::Paren(ref inner) = value.node {\n-            let necessary = followed_by_block && match inner.node {\n-                ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n-                _ => parser::contains_exterior_struct_lit(&inner),\n-            };\n-            if !necessary {\n-                let expr_text = if let Ok(snippet) = cx.sess().source_map()\n-                    .span_to_snippet(value.span) {\n-                        snippet\n-                    } else {\n-                        pprust::expr_to_string(value)\n-                    };\n-                Self::remove_outer_parens(cx, value.span, &expr_text, msg);\n+        match value.node {\n+            ast::ExprKind::Paren(ref inner) => {\n+                let necessary = followed_by_block && match inner.node {\n+                    ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n+                    _ => parser::contains_exterior_struct_lit(&inner),\n+                };\n+                if !necessary {\n+                    let expr_text = if let Ok(snippet) = cx.sess().source_map()\n+                        .span_to_snippet(value.span) {\n+                            snippet\n+                        } else {\n+                            pprust::expr_to_string(value)\n+                        };\n+                    Self::remove_outer_parens(cx, value.span, &expr_text, msg);\n+                }\n+            }\n+            ast::ExprKind::Let(_, ref expr) => {\n+                // FIXME(#60336): Properly handle `let true = (false && true)`\n+                // actually needing the parenthesis.\n+                self.check_unused_parens_expr(cx, expr, \"`let` scrutinee\", followed_by_block);\n             }\n+            _ => {}\n         }\n     }\n \n@@ -399,8 +407,6 @@ impl EarlyLintPass for UnusedParens {\n         let (value, msg, followed_by_block) = match e.node {\n             If(ref cond, ..) => (cond, \"`if` condition\", true),\n             While(ref cond, ..) => (cond, \"`while` condition\", true),\n-            IfLet(_, ref cond, ..) => (cond, \"`if let` head expression\", true),\n-            WhileLet(_, ref cond, ..) => (cond, \"`while let` head expression\", true),\n             ForLoop(_, ref cond, ..) => (cond, \"`for` head expression\", true),\n             Match(ref head, _) => (head, \"`match` head expression\", true),\n             Ret(Some(ref value)) => (value, \"`return` value\", false),"}]}