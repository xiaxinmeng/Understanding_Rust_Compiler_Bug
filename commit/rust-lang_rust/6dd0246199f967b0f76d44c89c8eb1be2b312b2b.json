{"sha": "6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDAyNDYxOTlmOTY3YjBmNzZkNDRjODljOGViMWJlMmIzMTJiMmI=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2020-05-29T04:25:28Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2020-05-29T08:43:05Z"}, "message": "Dump clif with --emit llvm-ir in release mode\n\nCurrently it's not possible to dump llvm-ir in release build. With this\npatch we allow it with `--emit llvm-ir`. In debug build we dump clif\nalways as before.\n\nFixes #1020", "tree": {"sha": "958a59e8cadfec1a12d94f62f7a474497a186ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958a59e8cadfec1a12d94f62f7a474497a186ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "html_url": "https://github.com/rust-lang/rust/commit/6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c76bdc53a7e1719ea81ffe737cb7e52a9a15ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c76bdc53a7e1719ea81ffe737cb7e52a9a15ad7", "html_url": "https://github.com/rust-lang/rust/commit/1c76bdc53a7e1719ea81ffe737cb7e52a9a15ad7"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "ac6e55f1cfe8c620e01a1377a94b2463dbee19eb", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "patch": "@@ -77,7 +77,6 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let local_map = fx.local_map;\n     let cold_blocks = fx.cold_blocks;\n \n-    #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &context.func, &clif_comments, None);\n \n     // Verify function\n@@ -106,7 +105,6 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     );\n \n     // Write optimized function to file for debugging\n-    #[cfg(debug_assertions)]\n     {\n         let value_ranges = context\n             .build_value_labels_ranges(cx.module.isa())"}, {"sha": "f4a33ddd82e810e5c129180fe50593dedc063b03", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "patch": "@@ -18,7 +18,6 @@ pub(crate) fn optimize_function<'tcx>(\n         return; // FIXME classify optimizations over opt levels\n     }\n     self::stack2reg::optimize_function(ctx, clif_comments);\n-    #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(tcx, \"stack2reg\", instance, &ctx.func, &*clif_comments, None);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);\n }"}, {"sha": "420680e96a1163607f15dc4134c8855ff2156b13", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd0246199f967b0f76d44c89c8eb1be2b312b2b/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=6dd0246199f967b0f76d44c89c8eb1be2b312b2b", "patch": "@@ -6,6 +6,8 @@ use cranelift_codegen::{\n     write::{FuncWriter, PlainWriter},\n };\n \n+use rustc_session::config::OutputType;\n+\n use crate::prelude::*;\n \n /// This module provides the [CommentWriter] which makes it possible\n@@ -198,7 +200,6 @@ impl<B: Backend + 'static> FunctionCx<'_, '_, B> {\n     }\n }\n \n-#[cfg(debug_assertions)]\n pub(crate) fn write_clif_file<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     postfix: &str,\n@@ -207,6 +208,10 @@ pub(crate) fn write_clif_file<'tcx>(\n     mut clif_comments: &CommentWriter,\n     value_ranges: Option<&cranelift_codegen::ValueLabelsRanges>,\n ) {\n+    if !(cfg!(debug_assertions) || tcx.sess.opts.output_types.contains_key(&OutputType::LlvmAssembly)) {\n+        return;\n+    }\n+\n     use std::io::Write;\n \n     let symbol_name = tcx.symbol_name(instance).name.as_str();"}]}