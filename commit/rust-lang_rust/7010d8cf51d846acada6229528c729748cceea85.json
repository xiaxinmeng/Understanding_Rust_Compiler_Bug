{"sha": "7010d8cf51d846acada6229528c729748cceea85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMTBkOGNmNTFkODQ2YWNhZGE2MjI5NTI4YzcyOTc0OGNjZWVhODU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-09T20:07:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:38Z"}, "message": "add Yield and Return type into generator", "tree": {"sha": "223d018de9f2a146230e452d6e7a78438f1b791e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223d018de9f2a146230e452d6e7a78438f1b791e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7010d8cf51d846acada6229528c729748cceea85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7010d8cf51d846acada6229528c729748cceea85", "html_url": "https://github.com/rust-lang/rust/commit/7010d8cf51d846acada6229528c729748cceea85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7010d8cf51d846acada6229528c729748cceea85/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c609eb090b42d590507d87895af9fc1e28eae11", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c609eb090b42d590507d87895af9fc1e28eae11", "html_url": "https://github.com/rust-lang/rust/commit/7c609eb090b42d590507d87895af9fc1e28eae11"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "436238b5e3744ad0b06353de451dd795460f9508", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7010d8cf51d846acada6229528c729748cceea85", "patch": "@@ -256,6 +256,17 @@ pub enum TypeVariants<'tcx> {\n /// closure C wind up influencing the decisions we ought to make for\n /// closure C (which would then require fixed point iteration to\n /// handle). Plus it fixes an ICE. :P\n+///\n+/// ## Generators\n+///\n+/// Perhaps surprisingly, `ClosureSubsts` are also used for\n+/// generators.  In that case, what is written above is only half-true\n+/// -- the set of type parameters is similar, but the role of CK and\n+/// CS are different.  CK represents the \"yield type\" and CS\n+/// represents the \"return type\" of the generator.\n+///\n+/// It'd be nice to split this struct into ClosureSubsts and\n+/// GeneratorSubsts, I believe. -nmatsakis\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n@@ -310,6 +321,31 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n+\n+    /// Returns the type representing the yield type of the generator.\n+    pub fn generator_yield_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.closure_kind_ty(def_id, tcx)\n+    }\n+\n+    /// Returns the type representing the return type of the generator.\n+    pub fn generator_return_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.closure_sig_ty(def_id, tcx)\n+    }\n+\n+    /// Return the \"generator signature\", which consists of its yield\n+    /// and return types.\n+    ///\n+    /// NB. We treat this as a `PolyGenSig`, but since it only\n+    /// contains associated types of the generator, at present it\n+    /// never binds any regions.\n+    pub fn generator_poly_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> PolyGenSig<'tcx> {\n+        ty::Binder(\n+            ty::GenSig {\n+                yield_ty: self.generator_yield_ty(def_id, tcx),\n+                return_ty: self.generator_return_ty(def_id, tcx),\n+            }\n+        )\n+    }\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {"}, {"sha": "5b5d697bcf4351b2d386cff8b8610289ac17bd8d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7010d8cf51d846acada6229528c729748cceea85", "patch": "@@ -10,7 +10,7 @@\n \n //! Code for type-checking closure expressions.\n \n-use super::{check_fn, Expectation, FnCtxt};\n+use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use astconv::AstConv;\n use rustc::hir::def_id::DefId;\n@@ -79,7 +79,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"check_closure: ty_of_closure returns {:?}\", liberated_sig);\n \n-        let interior = check_fn(\n+        let generator_types = check_fn(\n             self,\n             self.param_env,\n             liberated_sig,\n@@ -106,13 +106,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = ty::ClosureSubsts { substs };\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n-        if let Some(interior) = interior {\n+        if let Some(GeneratorTypes { yield_ty, interior }) = generator_types {\n             self.demand_eqtype(expr.span,\n-                               ty::ClosureKind::FnOnce.to_ty(self.tcx),\n-                               substs.closure_kind_ty(expr_def_id, self.tcx));\n+                               yield_ty,\n+                               substs.generator_yield_ty(expr_def_id, self.tcx));\n             self.demand_eqtype(expr.span,\n-                               self.tcx.types.char, // for generator, use some bogus type\n-                               substs.closure_sig_ty(expr_def_id, self.tcx));\n+                               liberated_sig.output(),\n+                               substs.generator_return_ty(expr_def_id, self.tcx));\n             return self.tcx.mk_generator(expr_def_id, substs, interior);\n         }\n "}, {"sha": "91283ab7a2f5c0642aba8420071d3349ea3452ee", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7010d8cf51d846acada6229528c729748cceea85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7010d8cf51d846acada6229528c729748cceea85", "patch": "@@ -972,6 +972,17 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n                 _: hir::BodyId, _: Span, _: ast::NodeId) { }\n }\n \n+/// When `check_fn` is invoked on a generator (i.e., a body that\n+/// includes yield), it returns back some information about the yield\n+/// points.\n+struct GeneratorTypes<'tcx> {\n+    /// Type of value that is yielded.\n+    yield_ty: ty::Ty<'tcx>,\n+\n+    /// Types that are captured (see `GeneratorInterior` for more).\n+    interior: ty::GeneratorInterior<'tcx>\n+}\n+\n /// Helper used for fns and closures. Does the grungy work of checking a function\n /// body and returns the function context used for that purpose, since in the case of a fn item\n /// there is still a bit more to do.\n@@ -985,7 +996,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             fn_id: ast::NodeId,\n                             body: &'gcx hir::Body,\n                             can_be_generator: bool)\n-                            -> (FnCtxt<'a, 'gcx, 'tcx>, Option<ty::GeneratorInterior<'tcx>>)\n+                            -> (FnCtxt<'a, 'gcx, 'tcx>, Option<GeneratorTypes<'tcx>>)\n {\n     let mut fn_sig = fn_sig.clone();\n \n@@ -1047,7 +1058,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n         inherited.tables.borrow_mut().generator_interiors_mut().insert(fn_hir_id, interior);\n \n-        Some(interior)\n+        Some(GeneratorTypes { yield_ty: gen_sig.yield_ty, interior: interior })\n     } else {\n         inherited.tables.borrow_mut().generator_sigs_mut().insert(fn_hir_id, None);\n         None"}]}