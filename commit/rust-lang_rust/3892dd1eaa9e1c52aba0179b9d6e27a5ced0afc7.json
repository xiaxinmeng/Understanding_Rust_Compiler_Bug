{"sha": "3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OTJkZDFlYWE5ZTFjNTJhYmEwMTc5YjlkNmUyN2E1Y2VkMGFmYzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:31:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:31:39Z"}, "message": "rollup merge of #20593: nikomatsakis/unused-tps-in-impl\n\nConflicts:\n\tsrc/libcollections/lib.rs\n\tsrc/librustc/lib.rs\n\tsrc/libserialize/lib.rs\n\tsrc/libstd/lib.rs", "tree": {"sha": "3a7d88b619e91b9f9088eb364ae9a2c3d755175b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a7d88b619e91b9f9088eb364ae9a2c3d755175b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "html_url": "https://github.com/rust-lang/rust/commit/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f047c8c558624e276ca36c5854b9fdcd4e5965", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f047c8c558624e276ca36c5854b9fdcd4e5965", "html_url": "https://github.com/rust-lang/rust/commit/e3f047c8c558624e276ca36c5854b9fdcd4e5965"}, {"sha": "d31105e4f5e880e17f7607addae3573440a4c68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31105e4f5e880e17f7607addae3573440a4c68a", "html_url": "https://github.com/rust-lang/rust/commit/d31105e4f5e880e17f7607addae3573440a4c68a"}], "stats": {"total": 307, "additions": 283, "deletions": 24}, "files": [{"sha": "82d8dc286ee45d13cc84d45541e775dba0142e2f", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -1417,7 +1417,7 @@ pub type MutTraversal<'a, K, V> = AbsTraversal<ElemsAndEdges<Zip<slice::Iter<'a,\n /// An owning traversal over a node's entries and edges\n pub type MoveTraversal<K, V> = AbsTraversal<MoveTraversalImpl<K, V>>;\n \n-\n+#[old_impl_check]\n impl<K, V, E, Impl: TraversalImpl<K, V, E>> Iterator for AbsTraversal<Impl> {\n     type Item = TraversalItem<K, V, E>;\n \n@@ -1433,6 +1433,7 @@ impl<K, V, E, Impl: TraversalImpl<K, V, E>> Iterator for AbsTraversal<Impl> {\n     }\n }\n \n+#[old_impl_check]\n impl<K, V, E, Impl: TraversalImpl<K, V, E>> DoubleEndedIterator for AbsTraversal<Impl> {\n     fn next_back(&mut self) -> Option<TraversalItem<K, V, E>> {\n         let tail_is_edge = self.tail_is_edge;"}, {"sha": "64005e89ddec0d45721f67b073f698d4deb8a1ea", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -22,6 +22,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![feature(unsafe_destructor, slicing_syntax)]\n+#![feature(old_impl_check)]\n #![no_std]\n \n #[macro_use]"}, {"sha": "1a5746e8e1272e6fee9a2c6f42949c3efb2a1db3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -25,6 +25,7 @@\n #![feature(quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(old_impl_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "1af8e2f29ebd7c63faf25b93bc15f9a54bb92dd4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -669,6 +669,7 @@ impl LintPass for UnusedAttributes {\n \n             // FIXME: #19470 this shouldn't be needed forever\n             \"old_orphan_check\",\n+            \"old_impl_check\",\n         ];\n \n         static CRATE_ATTRS: &'static [&'static str] = &["}, {"sha": "2d433369366eb9f4d397c0ae851eb1f02eab29ea", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -1350,6 +1350,7 @@ impl<'tcx, T:Repr<'tcx>> Repr<'tcx> for ty::Binder<T> {\n     }\n }\n \n+#[old_impl_check]\n impl<'tcx, S, H, K, V> Repr<'tcx> for HashMap<K,V,H>\n     where K : Hash<S> + Eq + Repr<'tcx>,\n           V : Repr<'tcx>,"}, {"sha": "d106a380222f070a2c10579119374b9be8fefb22", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -35,7 +35,7 @@ use middle::lang_items::SizedTraitLangItem;\n use middle::region;\n use middle::resolve_lifetime;\n use middle::subst;\n-use middle::subst::{Substs};\n+use middle::subst::{Substs, TypeSpace};\n use middle::ty::{AsPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use middle::ty::{self, RegionEscape, Ty, TypeScheme};\n use middle::ty_fold::{self, TypeFolder, TypeFoldable};\n@@ -47,6 +47,7 @@ use util::ppaux;\n use util::ppaux::{Repr,UserString};\n use write_ty_to_tcx;\n \n+use std::collections::HashSet;\n use std::rc::Rc;\n \n use syntax::abi;\n@@ -644,6 +645,10 @@ fn convert(ccx: &CollectCtxt, it: &ast::Item) {\n                                                Some(selfty),\n                                                None);\n             }\n+\n+            enforce_impl_ty_params_are_constrained(ccx.tcx,\n+                                                   generics,\n+                                                   local_def(it.id));\n         },\n         ast::ItemTrait(_, _, _, ref trait_methods) => {\n             let trait_def = trait_def_of_item(ccx, it);\n@@ -1605,3 +1610,96 @@ fn check_method_self_type<'a, 'tcx, RS:RegionScope>(\n         })\n     }\n }\n+\n+/// Checks that all the type parameters on an impl\n+fn enforce_impl_ty_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                                ast_generics: &ast::Generics,\n+                                                impl_def_id: ast::DefId)\n+{\n+    let impl_scheme = ty::lookup_item_type(tcx, impl_def_id);\n+    let impl_trait_ref = ty::impl_trait_ref(tcx, impl_def_id);\n+\n+    // The trait reference is an input, so find all type parameters\n+    // reachable from there, to start (if this is an inherent impl,\n+    // then just examine the self type).\n+    let mut input_parameters: HashSet<_> =\n+        impl_trait_ref.iter()\n+                      .flat_map(|t| t.input_types().iter()) // Types in trait ref, if any\n+                      .chain(Some(impl_scheme.ty).iter())  // Self type, always\n+                      .flat_map(|t| t.walk())\n+                      .filter_map(to_opt_param_ty)\n+                      .collect();\n+\n+    loop {\n+        let num_inputs = input_parameters.len();\n+\n+        let mut projection_predicates =\n+            impl_scheme.generics.predicates\n+            .iter()\n+            .filter_map(|predicate| {\n+                match *predicate {\n+                    // Ignore higher-ranked binders. For the purposes\n+                    // of this check, they don't matter because they\n+                    // only affect named regions, and we're just\n+                    // concerned about type parameters here.\n+                    ty::Predicate::Projection(ref data) => Some(data.0.clone()),\n+                    _ => None,\n+                }\n+            });\n+\n+        for projection in projection_predicates {\n+            // Special case: watch out for some kind of sneaky attempt\n+            // to project out an associated type defined by this very trait.\n+            if Some(projection.projection_ty.trait_ref.clone()) == impl_trait_ref {\n+                continue;\n+            }\n+\n+            let relies_only_on_inputs =\n+                projection.projection_ty.trait_ref.input_types().iter()\n+                .flat_map(|t| t.walk())\n+                .filter_map(to_opt_param_ty)\n+                .all(|t| input_parameters.contains(&t));\n+\n+            if relies_only_on_inputs {\n+                input_parameters.extend(\n+                    projection.ty.walk().filter_map(to_opt_param_ty));\n+            }\n+        }\n+\n+        if input_parameters.len() == num_inputs {\n+            break;\n+        }\n+    }\n+\n+    for (index, ty_param) in ast_generics.ty_params.iter().enumerate() {\n+        let param_ty = ty::ParamTy { space: TypeSpace,\n+                                     idx: index as u32,\n+                                     name: ty_param.ident.name };\n+        if !input_parameters.contains(&param_ty) {\n+            if ty::has_attr(tcx, impl_def_id, \"old_impl_check\") {\n+                tcx.sess.span_warn(\n+                    ty_param.span,\n+                    format!(\"the type parameter `{}` is not constrained by the \\\n+                             impl trait, self type, or predicates\",\n+                            param_ty.user_string(tcx)).as_slice());\n+            } else {\n+                tcx.sess.span_err(\n+                    ty_param.span,\n+                    format!(\"the type parameter `{}` is not constrained by the \\\n+                             impl trait, self type, or predicates\",\n+                            param_ty.user_string(tcx)).as_slice());\n+                tcx.sess.span_help(\n+                    ty_param.span,\n+                    format!(\"you can temporarily opt out of this rule by placing \\\n+                             the `#[old_impl_check]` attribute on the impl\").as_slice());\n+            }\n+        }\n+    }\n+\n+    fn to_opt_param_ty<'tcx>(ty: Ty<'tcx>) -> Option<ty::ParamTy> {\n+        match ty.sty {\n+            ty::ty_param(ref d) => Some(d.clone()),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "d89a4754d2efe0af8ccb921ed5a523e5795910c1", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -156,6 +156,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     K: Encodable + Hash<X> + Eq,\n     V: Encodable,\n@@ -175,6 +176,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     K: Decodable + Hash<S> + Eq,\n     V: Decodable,\n@@ -195,6 +197,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     T: Encodable + Hash<X> + Eq,\n     X,\n@@ -212,6 +215,7 @@ impl<\n     }\n }\n \n+#[old_impl_check]\n impl<\n     T: Decodable + Hash<S> + Eq,\n     S,"}, {"sha": "f0a51fcea1846c6fb203fe38eac9a5b0eaa55de5", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -24,6 +24,7 @@ Core encoding and decoding interfaces.\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n+#![feature(old_impl_check)]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "66287a1eea5789bbeda5366feb69de05e593d5f0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -439,6 +439,7 @@ impl<K, V, M> SearchResult<K, V, M> {\n     }\n }\n \n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     fn make_hash<X: ?Sized + Hash<S>>(&self, x: &X) -> SafeHash {\n         table::make_hash(&self.hasher, x)\n@@ -517,6 +518,7 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomSipHasher> {\n     }\n }\n \n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// Creates an empty hashmap which will use the given hasher to hash keys.\n     ///\n@@ -1188,6 +1190,7 @@ fn search_entry_hashed<'a, K: Eq, V>(table: &'a mut RawTable<K,V>, hash: SafeHas\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V, H> {\n     fn eq(&self, other: &HashMap<K, V, H>) -> bool {\n         if self.len() != other.len() { return false; }\n@@ -1199,9 +1202,11 @@ impl<K: Eq + Hash<S>, V: PartialEq, S, H: Hasher<S>> PartialEq for HashMap<K, V,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V: Eq, S, H: Hasher<S>> Eq for HashMap<K, V, H> {}\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"HashMap {{\"));\n@@ -1216,6 +1221,7 @@ impl<K: Eq + Hash<S> + Show, V: Show, S, H: Hasher<S>> Show for HashMap<K, V, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H> {\n     #[stable]\n     fn default() -> HashMap<K, V, H> {\n@@ -1224,6 +1230,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Default for HashMap<K, V, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n {\n@@ -1236,6 +1243,7 @@ impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> Index<Q> for HashMap<K, V,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Hash<S> + Eq, Q: ?Sized, V, S, H: Hasher<S>> IndexMut<Q> for HashMap<K, V, H>\n     where Q: BorrowFrom<K> + Hash<S> + Eq\n {\n@@ -1465,6 +1473,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n     fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let lower = iter.size_hint().0;\n@@ -1475,6 +1484,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for Has\n }\n \n #[stable]\n+#[old_impl_check]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> Extend<(K, V)> for HashMap<K, V, H> {\n     fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {"}, {"sha": "a2ffb9cb2136fb99c24516fd8937b67ff7cae739", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -125,6 +125,7 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     }\n }\n \n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// Creates a new empty hash set which will use the given hasher to hash\n     /// keys.\n@@ -568,6 +569,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n     fn eq(&self, other: &HashSet<T, H>) -> bool {\n         if self.len() != other.len() { return false; }\n@@ -577,9 +579,11 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> PartialEq for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {}\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"HashSet {{\"));\n@@ -594,6 +598,7 @@ impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n     fn from_iter<I: Iterator<Item=T>>(iter: I) -> HashSet<T, H> {\n         let lower = iter.size_hint().0;\n@@ -604,6 +609,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T,\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S>> Extend<T> for HashSet<T, H> {\n     fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n         for k in iter {\n@@ -613,6 +619,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> Extend<T> for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n     #[stable]\n     fn default() -> HashSet<T, H> {\n@@ -621,6 +628,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Default for HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitOr<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -651,6 +659,7 @@ BitOr<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitAnd<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -681,6 +690,7 @@ BitAnd<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n BitXor<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -711,6 +721,7 @@ BitXor<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, 'b, T: Eq + Hash<S> + Clone, S, H: Hasher<S> + Default>\n Sub<&'b HashSet<T, H>> for &'a HashSet<T, H> {\n     type Output = HashSet<T, H>;\n@@ -813,6 +824,7 @@ impl<'a, K: 'a> Iterator for Drain<'a, K> {\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Intersection<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -836,6 +848,7 @@ impl<'a, T, S, H> Iterator for Intersection<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Difference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -859,6 +872,7 @@ impl<'a, T, S, H> Iterator for Difference<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n@@ -869,6 +883,7 @@ impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, H>\n }\n \n #[stable]\n+#[old_impl_check]\n impl<'a, T, S, H> Iterator for Union<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {"}, {"sha": "dc9dd7071b1b0f442c5843ee65c326d9e2bd485c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -1603,6 +1603,7 @@ pub struct IncomingConnections<'a, A: ?Sized +'a> {\n     inc: &'a mut A,\n }\n \n+#[old_impl_check]\n impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n     type Item = IoResult<T>;\n "}, {"sha": "660487f3edb1677d3d169da7254d0ce7a70d3ada", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -107,6 +107,7 @@\n #![feature(linkage, thread_local, asm)]\n #![feature(phase, lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n+#![feature(old_impl_check)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "beb7246a7349d4f3163e62ea90986ddbba6f0521", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -979,8 +979,8 @@ pub enum Sign {\n     Plus\n }\n \n-impl<T> Sign where T: Int {\n-    pub fn new(n: T) -> Sign {\n+impl Sign {\n+    pub fn new<T:Int>(n: T) -> Sign {\n         if n < Int::zero() {\n             Minus\n         } else {"}, {"sha": "75d231d68b5180035c2d469a59be39f8d6244e10", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -86,6 +86,9 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n     (\"old_orphan_check\", Deprecated),\n \n+    // A way to temporarily opt out of the new impl rules. This will *never* be accepted.\n+    (\"old_impl_check\", Deprecated),\n+\n     // OIBIT specific features\n     (\"optin_builtin_traits\", Active),\n \n@@ -294,6 +297,13 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         i.span,\n                         \"the new orphan check rules will eventually be strictly enforced\");\n                 }\n+\n+                if attr::contains_name(i.attrs[],\n+                                       \"old_impl_check\") {\n+                    self.gate_feature(\"old_impl_check\",\n+                                      i.span,\n+                                      \"`#[old_impl_check]` will be removed in the future\");\n+                }\n             }\n \n             _ => {}"}, {"sha": "21784bda27a8f14e5e3a0e37a4c8529548d257e4", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -18,8 +18,8 @@ pub fn foo<T>() -> int {\n \n // issue 8134\n struct Foo;\n-impl<T> Foo {\n-    pub fn foo(&self) {\n+impl Foo {\n+    pub fn foo<T>(&self) {\n         static X: uint = 1;\n     }\n }\n@@ -33,8 +33,8 @@ impl<T: std::iter::Iterator<Item=char>> Parser<T> {\n }\n \n struct Bar;\n-impl<T> Foo {\n-    pub fn bar(&self) {\n+impl Foo {\n+    pub fn bar<T>(&self) {\n         static X: uint = 1;\n     }\n }"}, {"sha": "d86256a77765ee99153f57cd0a261e44fda827eb", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -11,9 +11,9 @@\n // aux-build:coherence-lib.rs\n \n extern crate \"coherence-lib\" as lib;\n-use lib::Remote;\n+use lib::Remote1;\n \n-impl<T> Remote for int { }\n+impl<T> Remote1<T> for int { }\n //~^ ERROR E0117\n \n fn main() { }"}, {"sha": "3803bb9b045ed0eff7617d06e24cac4d5fd784e2", "filename": "src/test/compile-fail/impl-unused-tps-inherent.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps-inherent.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyType;\n+\n+struct MyType1<T>(T);\n+\n+trait Bar {\n+    type Out;\n+}\n+\n+impl<T> MyType {\n+    //~^ ERROR  the type parameter `T` is not constrained\n+}\n+\n+impl<T> MyType1<T> {\n+    // OK, T is used in `Foo<T>`.\n+}\n+\n+impl<T,U> MyType1<T> {\n+    //~^ ERROR  the type parameter `U` is not constrained\n+}\n+\n+impl<T,U> MyType1<T> where T: Bar<Out=U> {\n+    // OK, T is used in `Foo<T>`.\n+}\n+\n+fn main() { }"}, {"sha": "99c6c6b89858c3700b2862ee4b68442bad90198a", "filename": "src/test/compile-fail/impl-unused-tps.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-unused-tps.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -0,0 +1,72 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<A> {\n+    fn get(&self, A: &A) { }\n+}\n+\n+trait Bar {\n+    type Out;\n+}\n+\n+impl<T> Foo<T> for [int;0] {\n+    // OK, T is used in `Foo<T>`.\n+}\n+\n+impl<T,U> Foo<T> for [int;1] {\n+    //~^ ERROR the type parameter `U` is not constrained\n+}\n+\n+impl<T,U> Foo<T> for [int;2] where T : Bar<Out=U> {\n+    // OK, `U` is now constrained by the output type parameter.\n+}\n+\n+impl<T:Bar<Out=U>,U> Foo<T> for [int;3] {\n+    // OK, same as above but written differently.\n+}\n+\n+impl<T,U> Foo<T> for U {\n+    // OK, T, U are used everywhere. Note that the coherence check\n+    // hasn't executed yet, so no errors about overlap.\n+}\n+\n+impl<T,U> Bar for T {\n+    //~^ ERROR the type parameter `U` is not constrained\n+\n+    type Out = U;\n+\n+    // Using `U` in an associated type within the impl is not good enough!\n+}\n+\n+impl<T,U> Bar for T\n+    where T : Bar<Out=U>\n+{\n+    //~^^^ ERROR the type parameter `U` is not constrained\n+\n+    // This crafty self-referential attempt is still no good.\n+}\n+\n+impl<T,U,V> Foo<T> for T\n+    where (T,U): Bar<Out=V>\n+{\n+    //~^^^ ERROR the type parameter `U` is not constrained\n+    //~|   ERROR the type parameter `V` is not constrained\n+\n+    // Here, `V` is bound by an output type parameter, but the inputs\n+    // are not themselves constrained.\n+}\n+\n+impl<T,U,V> Foo<(T,U)> for T\n+    where (T,U): Bar<Out=V>\n+{\n+    // As above, but both T and U ARE constrained.\n+}\n+\n+fn main() { }"}, {"sha": "24ffc5e9ee373de30f2b032561cd17ad8e0fa984", "filename": "src/test/compile-fail/issue-12028.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12028.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -22,27 +22,28 @@ trait Stream {\n     fn result(&self) -> u64;\n }\n \n-trait StreamHasher<S: Stream> {\n-    fn stream(&self) -> S;\n+trait StreamHasher {\n+    type S : Stream;\n+    fn stream(&self) -> Self::S;\n }\n \n //////////////////////////////////////////////////////////////////////////////\n \n-trait StreamHash<S: Stream, H: StreamHasher<S>>: Hash<H> {\n-    fn input_stream(&self, stream: &mut S);\n+trait StreamHash<H: StreamHasher>: Hash<H> {\n+    fn input_stream(&self, stream: &mut H::S);\n }\n \n-impl<S: Stream, H: StreamHasher<S>> Hash<H> for u8 {\n+impl<H: StreamHasher> Hash<H> for u8 {\n     fn hash2(&self, hasher: &H) -> u64 {\n         let mut stream = hasher.stream();\n         self.input_stream(&mut stream); //~ ERROR type annotations required\n-        stream.result()\n+        Stream::result(&stream)\n     }\n }\n \n-impl<S: Stream, H: StreamHasher<S>> StreamHash<S, H> for u8 {\n-    fn input_stream(&self, stream: &mut S) {\n-        stream.input(&[*self]);\n+impl<H: StreamHasher> StreamHash<H> for u8 {\n+    fn input_stream(&self, stream: &mut H::S) {\n+        Stream::input(&*stream, &[*self]);\n     }\n }\n "}, {"sha": "6a017f7bb30c1bda6de09eb42c00331fce6736fb", "filename": "src/test/compile-fail/issue-13853-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -15,7 +15,7 @@ trait Deserializable {\n }\n \n impl<'a, T: Deserializable> Deserializable for &'a str {\n-    //~^ ERROR unable to infer enough type information\n+    //~^ ERROR type parameter `T` is not constrained\n     fn deserialize_token<D: Deserializer<'a>>(_x: D, _y: &'a str) -> &'a str {\n     }\n }"}, {"sha": "626a442a2c355aed067f28a1af4293f34f284f73", "filename": "src/test/compile-fail/issue-16562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16562.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -18,7 +18,7 @@ struct Col<D, C> {\n trait Collection { fn len(&self) -> uint; }\n \n impl<T, M: MatrixShape> Collection for Col<M, uint> {\n-//~^ ERROR unable to infer enough type information\n+//~^ ERROR type parameter `T` is not constrained\n     fn len(&self) -> uint {\n         unimplemented!()\n     }"}, {"sha": "382ea0c575887cc9ddc72ebcd47072eec8210159", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=3892dd1eaa9e1c52aba0179b9d6e27a5ced0afc7", "patch": "@@ -30,17 +30,23 @@ impl Vec2 {\n }\n \n // Right-hand-side operator visitor pattern\n-trait RhsOfVec2Mul<Result> { fn mul_vec2_by(&self, lhs: &Vec2) -> Result; }\n+trait RhsOfVec2Mul {\n+    type Result;\n+\n+    fn mul_vec2_by(&self, lhs: &Vec2) -> Self::Result;\n+}\n \n // Vec2's implementation of Mul \"from the other side\" using the above trait\n-impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs> for Vec2 {\n+impl<Res, Rhs: RhsOfVec2Mul<Result=Res>> Mul<Rhs> for Vec2 {\n     type Output = Res;\n \n     fn mul(self, rhs: Rhs) -> Res { rhs.mul_vec2_by(&self) }\n }\n \n // Implementation of 'f64 as right-hand-side of Vec2::Mul'\n-impl RhsOfVec2Mul<Vec2> for f64 {\n+impl RhsOfVec2Mul for f64 {\n+    type Result = Vec2;\n+\n     fn mul_vec2_by(&self, lhs: &Vec2) -> Vec2 { lhs.vmul(*self) }\n }\n "}]}