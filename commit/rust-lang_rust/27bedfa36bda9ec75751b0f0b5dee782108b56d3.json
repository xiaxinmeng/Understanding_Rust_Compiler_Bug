{"sha": "27bedfa36bda9ec75751b0f0b5dee782108b56d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YmVkZmEzNmJkYTllYzc1NzUxYjBmMGI1ZGVlNzgyMTA4YjU2ZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-17T16:13:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:49:52Z"}, "message": "give better error messages when a cycle arises", "tree": {"sha": "976752daec16d4248576c9cba719ace1745049b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976752daec16d4248576c9cba719ace1745049b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27bedfa36bda9ec75751b0f0b5dee782108b56d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27bedfa36bda9ec75751b0f0b5dee782108b56d3", "html_url": "https://github.com/rust-lang/rust/commit/27bedfa36bda9ec75751b0f0b5dee782108b56d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27bedfa36bda9ec75751b0f0b5dee782108b56d3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e0e8ae2912e7f6ca5416d4166d42653d0eedf8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0e8ae2912e7f6ca5416d4166d42653d0eedf8b", "html_url": "https://github.com/rust-lang/rust/commit/5e0e8ae2912e7f6ca5416d4166d42653d0eedf8b"}], "stats": {"total": 163, "additions": 134, "deletions": 29}, "files": [{"sha": "9b0483d00a4462ff163a4b901bac104c2b14c0ab", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -1969,8 +1969,40 @@ fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n ```\n \"##,\n \n+E0644: r##\"\n+A closure or generator was constructed that references its own type.\n+\n+Erroneous example:\n+\n+```rust\n+fn fix<F>(f: &F)\n+  where F: Fn(&F)\n+{\n+  f(&f);\n }\n \n+fn main() {\n+  let x = |y| {\n+    // Here, when `x` is called, the parameter `y` is equal to `x`.\n+  };\n+  fix(&x);\n+}\n+```\n+\n+Rust does not permit a closure to directly reference its own type,\n+either through an argument (as in the example above) or by capturing\n+itself through its environment. This restriction helps keep closure\n+inference tractable.\n+\n+The easiest fix is to rewrite your closure into a top-level function,\n+or into a method. In some cases, you may also be able to have your\n+closure call itself by capturing a `&Fn()` object or `fn()` pointer\n+that refers to itself. That is permitting, since the closure would be\n+invoking itself via a virtual call, and hence does not directly\n+reference its own *type*.\n+\n+\"##, }\n+\n \n register_diagnostics! {\n //  E0006 // merged with E0005"}, {"sha": "50a37e12531a76df5768e367655f6ad3bc144fd5", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -270,6 +270,7 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n             for_vid_sub_root: self.infcx.type_variables.borrow_mut().sub_root_var(for_vid),\n             ambient_variance,\n             needs_wf: false,\n+            root_ty: ty,\n         };\n \n         let ty = generalize.relate(&ty, &ty)?;\n@@ -280,10 +281,23 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n \n struct Generalizer<'cx, 'gcx: 'cx+'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n+\n+    /// Span, used when creating new type variables and things.\n     span: Span,\n+\n+    /// The vid of the type variable that is in the process of being\n+    /// instantiated; if we find this within the type we are folding,\n+    /// that means we would have created a cyclic type.\n     for_vid_sub_root: ty::TyVid,\n+\n+    /// Track the variance as we descend into the type.\n     ambient_variance: ty::Variance,\n-    needs_wf: bool, // see the field `needs_wf` in `Generalization`\n+\n+    /// See the field `needs_wf` in `Generalization`.\n+    needs_wf: bool,\n+\n+    /// The root type that we are generalizing. Used when reporting cycles.\n+    root_ty: Ty<'tcx>,\n }\n \n /// Result from a generalization operation. This includes\n@@ -386,7 +400,7 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n                 if sub_vid == self.for_vid_sub_root {\n                     // If sub-roots are equal, then `for_vid` and\n                     // `vid` are related via subtyping.\n-                    return Err(TypeError::CyclicTy);\n+                    return Err(TypeError::CyclicTy(self.root_ty));\n                 } else {\n                     match variables.probe_root(vid) {\n                         Some(u) => {"}, {"sha": "6fadafc7b97aec8d7681cd110870c3a3deac1e9a", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -689,9 +689,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                          diag: &mut DiagnosticBuilder<'tcx>,\n                          cause: &ObligationCause<'tcx>,\n                          secondary_span: Option<(Span, String)>,\n-                         values: Option<ValuePairs<'tcx>>,\n+                         mut values: Option<ValuePairs<'tcx>>,\n                          terr: &TypeError<'tcx>)\n     {\n+        // For some types of errors, expected-found does not make\n+        // sense, so just ignore the values we were given.\n+        match terr {\n+            TypeError::CyclicTy(_) => { values = None; }\n+            _ => { }\n+        }\n+\n         let (expected_found, exp_found, is_simple_error) = match values {\n             None => (None, None, false),\n             Some(values) => {\n@@ -780,17 +787,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                terr);\n \n         let span = trace.cause.span;\n-        let failure_str = trace.cause.as_failure_str();\n-        let mut diag = match trace.cause.code {\n-            ObligationCauseCode::IfExpressionWithNoElse => {\n+        let failure_code = trace.cause.as_failure_code(terr);\n+        let mut diag = match failure_code {\n+            FailureCode::Error0317(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0317, \"{}\", failure_str)\n             }\n-            ObligationCauseCode::MainFunctionType => {\n+            FailureCode::Error0580(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0580, \"{}\", failure_str)\n             }\n-            _ => {\n+            FailureCode::Error0308(failure_str) => {\n                 struct_span_err!(self.tcx.sess, span, E0308, \"{}\", failure_str)\n             }\n+            FailureCode::Error0644(failure_str) => {\n+                struct_span_err!(self.tcx.sess, span, E0644, \"{}\", failure_str)\n+            }\n         };\n         self.note_type_err(&mut diag, &trace.cause, None, Some(trace.values), terr);\n         diag\n@@ -1040,23 +1050,40 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n+enum FailureCode {\n+    Error0317(&'static str),\n+    Error0580(&'static str),\n+    Error0308(&'static str),\n+    Error0644(&'static str),\n+}\n+\n impl<'tcx> ObligationCause<'tcx> {\n-    fn as_failure_str(&self) -> &'static str {\n+    fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode {\n+        use self::FailureCode::*;\n         use traits::ObligationCauseCode::*;\n         match self.code {\n-            CompareImplMethodObligation { .. } => \"method not compatible with trait\",\n-            MatchExpressionArm { source, .. } => match source {\n+            CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n+            MatchExpressionArm { source, .. } => Error0308(match source {\n                 hir::MatchSource::IfLetDesugar{..} => \"`if let` arms have incompatible types\",\n                 _ => \"match arms have incompatible types\",\n-            },\n-            IfExpression => \"if and else have incompatible types\",\n-            IfExpressionWithNoElse => \"if may be missing an else clause\",\n-            EquatePredicate => \"equality predicate not satisfied\",\n-            MainFunctionType => \"main function has wrong type\",\n-            StartFunctionType => \"start function has wrong type\",\n-            IntrinsicType => \"intrinsic has wrong type\",\n-            MethodReceiver => \"mismatched method receiver\",\n-            _ => \"mismatched types\",\n+            }),\n+            IfExpression => Error0308(\"if and else have incompatible types\"),\n+            IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n+            EquatePredicate => Error0308(\"equality predicate not satisfied\"),\n+            MainFunctionType => Error0580(\"main function has wrong type\"),\n+            StartFunctionType => Error0308(\"start function has wrong type\"),\n+            IntrinsicType => Error0308(\"intrinsic has wrong type\"),\n+            MethodReceiver => Error0308(\"mismatched method receiver\"),\n+\n+            // In the case where we have no more specific thing to\n+            // say, also take a look at the error code, maybe we can\n+            // tailor to that.\n+            _ => match terr {\n+                TypeError::CyclicTy(ty) if ty.is_closure() || ty.is_generator() =>\n+                    Error0644(\"closure/generator type that references itself\"),\n+                _ =>\n+                    Error0308(\"mismatched types\"),\n+            }\n         }\n     }\n "}, {"sha": "cb68e576e5af9903161ca0156fa5c2005c8b4bbb", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -49,7 +49,11 @@ pub enum TypeError<'tcx> {\n     FloatMismatch(ExpectedFound<ast::FloatTy>),\n     Traits(ExpectedFound<DefId>),\n     VariadicMismatch(ExpectedFound<bool>),\n-    CyclicTy,\n+\n+    /// Instantiating a type variable with the given type would have\n+    /// created a cycle (because it appears somewhere within that\n+    /// type).\n+    CyclicTy(Ty<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     TyParamDefaultMismatch(ExpectedFound<type_variable::Default<'tcx>>),\n@@ -84,7 +88,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n         }\n \n         match *self {\n-            CyclicTy => write!(f, \"cyclic type of infinite size\"),\n+            CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n             Mismatch => write!(f, \"types differ\"),\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\",\n@@ -304,6 +308,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n                 self.note_and_explain_type_err(db, &err, sp);\n             }\n+            CyclicTy(ty) => {\n+                // Watch out for various cases of cyclic types and try to explain.\n+                if ty.is_closure() || ty.is_generator() {\n+                    db.note(\"closures cannot capture themselves or take themselves as argument;\\n\\\n+                             this error may be the result of a recent compiler bug-fix,\\n\\\n+                             see https://github.com/rust-lang/rust/issues/46062 for more details\");\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "83207fbe3c3468c62a3e0d6454010ea30df22afd", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             FloatMismatch(x) => FloatMismatch(x),\n             Traits(x) => Traits(x),\n             VariadicMismatch(x) => VariadicMismatch(x),\n-            CyclicTy => CyclicTy,\n+            CyclicTy(t) => return tcx.lift(&t).map(|t| CyclicTy(t)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n \n@@ -1173,7 +1173,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             FloatMismatch(x) => FloatMismatch(x),\n             Traits(x) => Traits(x),\n             VariadicMismatch(x) => VariadicMismatch(x),\n-            CyclicTy => CyclicTy,\n+            CyclicTy(t) => CyclicTy(t.fold_with(folder)),\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n             Sorts(x) => Sorts(x.fold_with(folder)),\n@@ -1200,6 +1200,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             OldStyleLUB(ref x) => x.visit_with(visitor),\n             TyParamDefaultMismatch(ref x) => x.visit_with(visitor),\n             ExistentialMismatch(x) => x.visit_with(visitor),\n+            CyclicTy(t) => t.visit_with(visitor),\n             Mismatch |\n             Mutability |\n             TupleSize(_) |\n@@ -1209,7 +1210,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             FloatMismatch(_) |\n             Traits(_) |\n             VariadicMismatch(_) |\n-            CyclicTy |\n             ProjectionMismatched(_) |\n             ProjectionBoundsLength(_) => false,\n         }"}, {"sha": "d2b6d14e28477de7abbee8147dbc6d1e8440bde4", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -1368,6 +1368,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_generator(&self) -> bool {\n+        match self.sty {\n+            TyGenerator(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_integral(&self) -> bool {\n         match self.sty {\n             TyInfer(IntVar(_)) | TyInt(_) | TyUint(_) => true,"}, {"sha": "3cf0fd9a9eede84aab1e201321a7f636bdc18573", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -43,9 +43,6 @@ error[E0308]: mismatched types\n    |\n 41 |     f = box f;\n    |         ^^^^^ cyclic type of infinite size\n-   |\n-   = note: expected type `_`\n-              found type `std::boxed::Box<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:48:9"}, {"sha": "78d119ef329d0ae4ec1a198acba226a3550e5403", "filename": "src/test/ui/unboxed-closure-no-cyclic-sig.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.rs?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that unboxed closures cannot capture their own type.\n+//\n+// Also regression test for issue #21410.\n+\n fn g<F>(_: F) where F: FnOnce(Option<F>) {}\n \n fn main() {\n-    g(|_| {  }); //~ ERROR mismatched types\n+    g(|_| {  });\n }"}, {"sha": "a4279a2afac603ffe922d7a71aecfa16c71a3e40", "filename": "src/test/ui/unboxed-closure-no-cyclic-sig.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27bedfa36bda9ec75751b0f0b5dee782108b56d3/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closure-no-cyclic-sig.stderr?ref=27bedfa36bda9ec75751b0f0b5dee782108b56d3", "patch": "@@ -0,0 +1,12 @@\n+error[E0644]: closure/generator type that references itself\n+  --> $DIR/unboxed-closure-no-cyclic-sig.rs:18:7\n+   |\n+18 |     g(|_| {  });\n+   |       ^^^^^^^^ cyclic type of infinite size\n+   |\n+   = note: closures cannot capture themselves or take themselves as argument;\n+           this error may be the result of a recent compiler bug-fix,\n+           see https://github.com/rust-lang/rust/issues/46062 for more details\n+\n+error: aborting due to previous error\n+"}]}