{"sha": "e354cca69629045fe678918757ce036cea2be4f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTRjY2E2OTYyOTA0NWZlNjc4OTE4NzU3Y2UwMzZjZWEyYmU0ZjE=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-10T06:08:31Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-05-13T03:10:05Z"}, "message": "Spanview needs the relevant body_span used for coverage\n\nThe coverage body_span doesn't always match the function body_span.", "tree": {"sha": "54298e7ae0f0fc97cb3c7e67c1b74daa93a54c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54298e7ae0f0fc97cb3c7e67c1b74daa93a54c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e354cca69629045fe678918757ce036cea2be4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e354cca69629045fe678918757ce036cea2be4f1", "html_url": "https://github.com/rust-lang/rust/commit/e354cca69629045fe678918757ce036cea2be4f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e354cca69629045fe678918757ce036cea2be4f1/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9daf546b77dbeab7754a80d7336cd8d00c6746e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9daf546b77dbeab7754a80d7336cd8d00c6746e4", "html_url": "https://github.com/rust-lang/rust/commit/9daf546b77dbeab7754a80d7336cd8d00c6746e4"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "2397d627880f337f63fbfa470757f8b40d7d3185", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=e354cca69629045fe678918757ce036cea2be4f1", "patch": "@@ -120,6 +120,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n use rustc_middle::ty::TyCtxt;\n+use rustc_span::Span;\n \n use std::iter;\n use std::lazy::SyncOnceCell;\n@@ -636,6 +637,7 @@ pub(super) fn dump_coverage_spanview(\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n     pass_name: &str,\n+    body_span: Span,\n     coverage_spans: &Vec<CoverageSpan>,\n ) {\n     let mir_source = mir_body.source;\n@@ -647,7 +649,7 @@ pub(super) fn dump_coverage_spanview(\n     let crate_name = tcx.crate_name(def_id.krate);\n     let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n     let title = format!(\"{}.{} - Coverage Spans\", crate_name, item_name);\n-    spanview::write_document(tcx, def_id, span_viewables, &title, &mut file)\n+    spanview::write_document(tcx, body_span, span_viewables, &title, &mut file)\n         .expect(\"Unexpected IO error dumping coverage spans as HTML\");\n }\n "}, {"sha": "c15056575c89ff045dcf363d7edc249bf3546611", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=e354cca69629045fe678918757ce036cea2be4f1", "patch": "@@ -204,6 +204,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n                 self.mir_body,\n                 &self.basic_coverage_blocks,\n                 self.pass_name,\n+                body_span,\n                 &coverage_spans,\n             );\n         }"}, {"sha": "42683dac426e3b1fdd5271658149c50ca42bd014", "filename": "compiler/rustc_mir/src/util/spanview.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e354cca69629045fe678918757ce036cea2be4f1/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fspanview.rs?ref=e354cca69629045fe678918757ce036cea2be4f1", "patch": "@@ -131,32 +131,32 @@ where\n             }\n         }\n     }\n-    write_document(tcx, def_id, span_viewables, title, w)?;\n+    write_document(tcx, fn_span(tcx, def_id), span_viewables, title, w)?;\n     Ok(())\n }\n \n /// Generate a spanview HTML+CSS document for the given local function `def_id`, and a pre-generated\n /// list `SpanViewable`s.\n pub fn write_document<'tcx, W>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n+    spanview_span: Span,\n     mut span_viewables: Vec<SpanViewable>,\n     title: &str,\n     w: &mut W,\n ) -> io::Result<()>\n where\n     W: Write,\n {\n-    let fn_span = fn_span(tcx, def_id);\n-    let mut from_pos = fn_span.lo();\n-    let end_pos = fn_span.hi();\n+    let mut from_pos = spanview_span.lo();\n+    let end_pos = spanview_span.hi();\n     let source_map = tcx.sess.source_map();\n     let start = source_map.lookup_char_pos(from_pos);\n     let indent_to_initial_start_col = \" \".repeat(start.col.to_usize());\n     debug!(\n-        \"fn_span source is:\\n{}{}\",\n+        \"spanview_span={:?}; source is:\\n{}{}\",\n+        spanview_span,\n         indent_to_initial_start_col,\n-        source_map.span_to_snippet(fn_span).expect(\"function should have printable source\")\n+        source_map.span_to_snippet(spanview_span).expect(\"function should have printable source\")\n     );\n     writeln!(w, \"{}\", HEADER)?;\n     writeln!(w, \"<title>{}</title>\", title)?;"}]}