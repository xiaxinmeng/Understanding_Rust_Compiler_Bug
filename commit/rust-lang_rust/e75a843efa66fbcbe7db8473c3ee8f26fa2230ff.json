{"sha": "e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NWE4NDNlZmE2NmZiY2JlN2RiODQ3M2MzZWU4ZjI2ZmEyMjMwZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-15T22:06:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-15T22:06:47Z"}, "message": "auto merge of #5357 : jbclements/rust/add-nonempty-span-encoding, r=jbclements\n\nr? @nikomatsakis \r\nr? @erickt \r\n\r\nBefore this change, encoding an object containing a codemap::span\r\nusing the JSON encodeng produced invalid JSON, for instance:\r\n[{\"span\":,\"global\":false,\"idents\":[\"abc\"]}]\r\nSince the decoder for codemap::span's ignores its argument, I\r\nconjecture that this will not damage decoding, and should improve\r\nit for many decoders.", "tree": {"sha": "5a8fabd2a9d064f4231b26e653fb9de9bdc3470b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a8fabd2a9d064f4231b26e653fb9de9bdc3470b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "html_url": "https://github.com/rust-lang/rust/commit/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b059c6e5638de7b241ffddb38cef906813de245", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b059c6e5638de7b241ffddb38cef906813de245", "html_url": "https://github.com/rust-lang/rust/commit/2b059c6e5638de7b241ffddb38cef906813de245"}, {"sha": "4bd26481c4c91858c544981990efb2f48e5d3bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd26481c4c91858c544981990efb2f48e5d3bbe", "html_url": "https://github.com/rust-lang/rust/commit/4bd26481c4c91858c544981990efb2f48e5d3bbe"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "97719a140a6a5f56881196603a8012d20aea0894", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "patch": "@@ -140,7 +140,7 @@ impl cmp::Eq for span {\n \n impl<S:Encoder> Encodable<S> for span {\n     /* Note #1972 -- spans are encoded but not decoded */\n-    fn encode(&self, _s: &S) { }\n+    fn encode(&self, _s: &S) { _s.emit_nil() }\n }\n \n impl<D:Decoder> Decodable<D> for span {"}, {"sha": "66a3ae7a2ae0381d9110121f90de3505993b209b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75a843efa66fbcbe7db8473c3ee8f26fa2230ff/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=e75a843efa66fbcbe7db8473c3ee8f26fa2230ff", "patch": "@@ -297,10 +297,9 @@ mod test {\n     use std;\n     use core::io;\n     use core::option::None;\n-    use core::str;\n     use util::testing::*;\n \n-    #[test] fn to_json_str (val: @Encodable<std::json::Encoder>) -> ~str {\n+    #[test] fn to_json_str<E : Encodable<std::json::Encoder>>(val: @E) -> ~str {\n         do io::with_str_writer |writer| {\n             val.encode(~std::json::Encoder(writer));\n         }\n@@ -312,18 +311,18 @@ mod test {\n             @~\"fn foo (x : int) { x; }\",\n             ~[],\n             new_parse_sess(None));\n-        check_equal(to_json_str(@tts as @Encodable<std::json::Encoder>),\n-                    ~\"[[\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"fn\\\",false]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"foo\\\",false]]]],\\\n-                      [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[,[\\\"LPAREN\\\",[]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"COLON\\\",[]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"int\\\",false]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"RPAREN\\\",[]]]]]]],\\\n-                      [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[,[\\\"LBRACE\\\",[]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"SEMI\\\",[]]]],\\\n-                      [\\\"tt_tok\\\",[,[\\\"RBRACE\\\",[]]]]]]]]\"\n+        check_equal(to_json_str(@tts),\n+                    ~\"[[\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"fn\\\",false]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"foo\\\",false]]]],\\\n+                      [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[null,[\\\"LPAREN\\\",[]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"COLON\\\",[]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"int\\\",false]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"RPAREN\\\",[]]]]]]],\\\n+                      [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[null,[\\\"LBRACE\\\",[]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"IDENT\\\",[\\\"x\\\",false]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"SEMI\\\",[]]]],\\\n+                      [\\\"tt_tok\\\",[null,[\\\"RBRACE\\\",[]]]]]]]]\"\n                    );\n         let ast1 = new_parser_from_tts(new_parse_sess(None),~[],tts)\n             .parse_item(~[]);"}]}