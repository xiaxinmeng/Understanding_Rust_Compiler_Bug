{"sha": "dd3cc9669acba363abdf4f1bf5744aea383ecc46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkM2NjOTY2OWFjYmEzNjNhYmRmNGYxYmY1NzQ0YWVhMzgzZWNjNDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T22:59:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-10T12:22:31Z"}, "message": "add the `AscribeUserType` statement kind\n\nMake it have the semantics of subtype.", "tree": {"sha": "748c8e198f9d13dd4691546b1ac3d8eb73dc98fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/748c8e198f9d13dd4691546b1ac3d8eb73dc98fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3cc9669acba363abdf4f1bf5744aea383ecc46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3cc9669acba363abdf4f1bf5744aea383ecc46", "html_url": "https://github.com/rust-lang/rust/commit/dd3cc9669acba363abdf4f1bf5744aea383ecc46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3cc9669acba363abdf4f1bf5744aea383ecc46/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f9bcce042d8ab77c534f22173c31f9a9ee224e", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f9bcce042d8ab77c534f22173c31f9a9ee224e", "html_url": "https://github.com/rust-lang/rust/commit/22f9bcce042d8ab77c534f22173c31f9a9ee224e"}], "stats": {"total": 212, "additions": 134, "deletions": 78}, "files": [{"sha": "b0444848d619170bfc416144e515f87d61e2274e", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -255,9 +255,9 @@ for mir::StatementKind<'gcx> {\n                 op.hash_stable(hcx, hasher);\n                 places.hash_stable(hcx, hasher);\n             }\n-            mir::StatementKind::UserAssertTy(ref c_ty, ref local) => {\n+            mir::StatementKind::AscribeUserType(ref place, ref c_ty) => {\n+                place.hash_stable(hcx, hasher);\n                 c_ty.hash_stable(hcx, hasher);\n-                local.hash_stable(hcx, hasher);\n             }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {"}, {"sha": "8feb8f949469d9b8c7c282968427204c04645ac3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -1636,22 +1636,14 @@ pub enum StatementKind<'tcx> {\n     /// (The starting point(s) arise implicitly from borrows.)\n     EndRegion(region::Scope),\n \n-    /// Encodes a user's type assertion. These need to be preserved intact so that NLL can respect\n-    /// them. For example:\n+    /// Encodes a user's type ascription. These need to be preserved\n+    /// intact so that NLL can respect them. For example:\n     ///\n-    ///     let (a, b): (T, U) = y;\n+    ///     let a: T = y;\n     ///\n-    /// Here we would insert a `UserAssertTy<(T, U)>(y)` instruction to check that the type of `y`\n-    /// is the right thing.\n-    ///\n-    /// `CanonicalTy` is used to capture \"inference variables\" from the user's types. For example:\n-    ///\n-    ///     let x: Vec<_> = ...;\n-    ///     let y: &u32 = ...;\n-    ///\n-    /// would result in `Vec<?0>` and `&'?0 u32` respectively (where `?0` is a canonicalized\n-    /// variable).\n-    UserAssertTy(CanonicalTy<'tcx>, Local),\n+    /// Here we would insert a `AscribeUserType` that ensures that the\n+    /// type `Y` of `y` is a subtype of `T` (`Y <: T`).\n+    AscribeUserType(Place<'tcx>, CanonicalTy<'tcx>),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n@@ -1728,8 +1720,8 @@ impl<'tcx> Debug for Statement<'tcx> {\n                 ref outputs,\n                 ref inputs,\n             } => write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs),\n-            UserAssertTy(ref c_ty, ref local) => {\n-                write!(fmt, \"UserAssertTy({:?}, {:?})\", c_ty, local)\n+            AscribeUserType(ref place, ref c_ty) => {\n+                write!(fmt, \"AscribeUserType({:?}, {:?})\", place, c_ty)\n             }\n             Nop => write!(fmt, \"nop\"),\n         }\n@@ -2652,7 +2644,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n         (StatementKind::Validate)(a, b),\n         (StatementKind::EndRegion)(a),\n-        (StatementKind::UserAssertTy)(a, b),\n+        (StatementKind::AscribeUserType)(a, b),\n         (StatementKind::Nop),\n     }\n }"}, {"sha": "a70ec8a5c571fd1052ed831c2327fa6b21b00762", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -144,11 +144,11 @@ macro_rules! make_mir_visitor {\n                 self.super_operand(operand, location);\n             }\n \n-            fn visit_user_assert_ty(&mut self,\n-                                    c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* Local,\n-                                    location: Location) {\n-                self.super_user_assert_ty(c_ty, local, location);\n+            fn visit_ascribe_user_ty(&mut self,\n+                                     place: & $($mutability)* Place<'tcx>,\n+                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                     location: Location) {\n+                self.super_ascribe_user_ty(place, c_ty, location);\n             }\n \n             fn visit_place(&mut self,\n@@ -386,9 +386,11 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n-                    StatementKind::UserAssertTy(ref $($mutability)* c_ty,\n-                                                ref $($mutability)* local) => {\n-                        self.visit_user_assert_ty(c_ty, local, location);\n+                    StatementKind::AscribeUserType(\n+                        ref $($mutability)* place,\n+                        ref $($mutability)* c_ty,\n+                    ) => {\n+                        self.visit_ascribe_user_ty(place, c_ty, location);\n                     }\n                     StatementKind::Nop => {}\n                 }\n@@ -629,12 +631,12 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            fn super_user_assert_ty(&mut self,\n-                                    c_ty: & $($mutability)* CanonicalTy<'tcx>,\n-                                    local: & $($mutability)* Local,\n-                                    location: Location) {\n+            fn super_ascribe_user_ty(&mut self,\n+                                     place: & $($mutability)* Place<'tcx>,\n+                                     c_ty: & $($mutability)* CanonicalTy<'tcx>,\n+                                     location: Location) {\n+                self.visit_place(place, PlaceContext::Validate, location);\n                 self.visit_canonical_ty(c_ty);\n-                self.visit_local(local, PlaceContext::Validate, location);\n             }\n \n             fn super_place(&mut self,"}, {"sha": "83d6b715e95bc4681c261bb4c707a198548933de", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -356,8 +356,8 @@ pub struct TypeckTables<'tcx> {\n     /// belongs, but it may not exist if it's a tuple field (`tuple.0`).\n     field_indices: ItemLocalMap<usize>,\n \n-    /// Stores the canonicalized types provided by the user. See also `UserAssertTy` statement in\n-    /// MIR.\n+    /// Stores the canonicalized types provided by the user. See also\n+    /// `AscribeUserType` statement in MIR.\n     user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n \n     /// Stores the types for various nodes in the AST.  Note that this table"}, {"sha": "0cb8f99efc33fd66cb6a78db907aee2302ae660e", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -92,7 +92,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n             mir::StatementKind::ReadForMatch(_) |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n-            mir::StatementKind::UserAssertTy(..) |\n+            mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => bx,\n         }\n     }"}, {"sha": "60aeb92d91a6f30b7cf2075a365ebe53b8bf0ab4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -535,10 +535,10 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // flow_state already handled).\n             }\n             StatementKind::Nop\n-            | StatementKind::UserAssertTy(..)\n+            | StatementKind::AscribeUserType(..)\n             | StatementKind::Validate(..)\n             | StatementKind::StorageLive(..) => {\n-                // `Nop`, `UserAssertTy`, `Validate`, and `StorageLive` are irrelevant\n+                // `Nop`, `AscribeUserType`, `Validate`, and `StorageLive` are irrelevant\n                 // to borrow check.\n             }\n             StatementKind::StorageDead(local) => {"}, {"sha": "1ec3506feb41dfa9df0434cc72c07626cc9b19e8", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -17,7 +17,7 @@ use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, Rvalue};\n-use rustc::mir::{Local, Statement, Terminator};\n+use rustc::mir::{Statement, Terminator};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, RegionVid};\n@@ -175,10 +175,10 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n         self.super_terminator(block, terminator, location);\n     }\n \n-    fn visit_user_assert_ty(\n+    fn visit_ascribe_user_ty(\n         &mut self,\n+        _place: &Place<'tcx>,\n         _c_ty: &CanonicalTy<'tcx>,\n-        _local: &Local,\n         _location: Location,\n     ) {\n     }"}, {"sha": "71345f22e443b455b2cb01b1cee80232570d6801", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -144,10 +144,10 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n             // EndRegion matters to older NLL/MIR AST borrowck, not to alias NLL\n             StatementKind::EndRegion(..) |\n             StatementKind::Nop |\n-            StatementKind::UserAssertTy(..) |\n+            StatementKind::AscribeUserType(..) |\n             StatementKind::Validate(..) |\n             StatementKind::StorageLive(..) => {\n-                // `Nop`, `UserAssertTy`, `Validate`, and `StorageLive` are irrelevant\n+                // `Nop`, `AscribeUserType`, `Validate`, and `StorageLive` are irrelevant\n                 // to borrow check.\n             }\n             StatementKind::StorageDead(local) => {"}, {"sha": "5de3247bad296ff3bb56847aa0f653c4d3358a44", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::ty::subst::Substs;\n use rustc::ty::{self, CanonicalTy, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n-use rustc::mir::{BasicBlock, Local, Location, Mir, Statement, StatementKind};\n+use rustc::mir::{BasicBlock, Location, Mir, Place, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n \n@@ -112,8 +112,12 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_closure_substs: substs={:?}\", substs);\n     }\n \n-    fn visit_user_assert_ty(&mut self, _c_ty: &mut CanonicalTy<'tcx>, _local: &mut Local,\n-                            _location: Location) {\n+    fn visit_ascribe_user_ty(\n+        &mut self,\n+        _place: &mut Place<'tcx>,\n+        _c_ty: &mut CanonicalTy<'tcx>,\n+        _location: Location,\n+    ) {\n         // User-assert-ty statements represent types that the user added explicitly.\n         // We don't want to erase the regions from these types: rather, we want to\n         // add them as constraints at type-check time."}, {"sha": "682bce9266c6bcc6b592b4ee1011aff6c3cb0b50", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         if let Some(user_ty) = constant.user_ty {\n             if let Err(terr) =\n                 self.cx\n-                    .eq_canonical_type_and_type(user_ty, constant.ty, location.boring())\n+                    .eq_user_type_and_type(user_ty, constant.ty, location.boring())\n             {\n                 span_mirbug!(\n                     self,\n@@ -850,13 +850,28 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         )\n     }\n \n-    fn eq_canonical_type_and_type(\n+    fn sub_type_and_user_type(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        b: CanonicalTy<'tcx>,\n+        locations: Locations,\n+    ) -> Fallible<()> {\n+        relate_tys::sub_type_and_user_type(\n+            self.infcx,\n+            a,\n+            b,\n+            locations,\n+            self.borrowck_context.as_mut().map(|x| &mut **x),\n+        )\n+    }\n+\n+    fn eq_user_type_and_type(\n         &mut self,\n         a: CanonicalTy<'tcx>,\n         b: Ty<'tcx>,\n         locations: Locations,\n     ) -> Fallible<()> {\n-        relate_tys::eq_canonical_type_and_type(\n+        relate_tys::eq_user_type_and_type(\n             self.infcx,\n             a,\n             b,\n@@ -905,7 +920,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n \n                 if let Some(user_ty) = self.rvalue_user_ty(rv) {\n-                    if let Err(terr) = self.eq_canonical_type_and_type(\n+                    if let Err(terr) = self.eq_user_type_and_type(\n                         user_ty,\n                         rv_ty,\n                         location.boring(),\n@@ -955,15 +970,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::UserAssertTy(c_ty, local) => {\n-                let local_ty = mir.local_decls()[local].ty;\n-                if let Err(terr) = self.eq_canonical_type_and_type(c_ty, local_ty, Locations::All) {\n+            StatementKind::AscribeUserType(ref place, c_ty) => {\n+                let place_ty = place.ty(mir, tcx).to_ty(tcx);\n+                if let Err(terr) = self.sub_type_and_user_type(place_ty, c_ty, Locations::All) {\n                     span_mirbug!(\n                         self,\n                         stmt,\n-                        \"bad type assert ({:?} = {:?}): {:?}\",\n+                        \"bad type assert ({:?} <: {:?}): {:?}\",\n+                        place_ty,\n                         c_ty,\n-                        local_ty,\n                         terr\n                     );\n                 }"}, {"sha": "67b469c01b2be8691e161d1d29c67816078ad125", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::{self, CanonicalTy, CanonicalVar, RegionVid, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n+/// Adds sufficient constraints to ensure that `a <: b`.\n pub(super) fn sub_types<'tcx>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     a: Ty<'tcx>,\n@@ -40,6 +41,7 @@ pub(super) fn sub_types<'tcx>(\n     Ok(())\n }\n \n+/// Adds sufficient constraints to ensure that `a == b`.\n pub(super) fn eq_types<'tcx>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     a: Ty<'tcx>,\n@@ -58,24 +60,65 @@ pub(super) fn eq_types<'tcx>(\n     Ok(())\n }\n \n-pub(super) fn eq_canonical_type_and_type<'tcx>(\n+/// Adds sufficient constraints to ensure that `a <: b`, where `b` is\n+/// a user-given type (which means it may have canonical variables\n+/// encoding things like `_`).\n+pub(super) fn sub_type_and_user_type<'tcx>(\n+    infcx: &InferCtxt<'_, '_, 'tcx>,\n+    a: Ty<'tcx>,\n+    b: CanonicalTy<'tcx>,\n+    locations: Locations,\n+    borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n+) -> Fallible<()> {\n+    debug!(\n+        \"sub_type_and_user_type(a={:?}, b={:?}, locations={:?})\",\n+        a, b, locations\n+    );\n+    let Canonical {\n+        variables: b_variables,\n+        value: b_value,\n+    } = b;\n+\n+    // (*) The `TypeRelating` code assumes that the \"canonical variables\"\n+    // appear in the \"a\" side, so start with `Contravariant` ambient\n+    // variance to get the right relationship.\n+\n+    TypeRelating::new(\n+        infcx,\n+        ty::Variance::Contravariant, // (*)\n+        locations,\n+        borrowck_context,\n+        b_variables,\n+    ).relate(&b_value, &a)?;\n+    Ok(())\n+}\n+\n+/// Adds sufficient constraints to ensure that `a <: b`, where `b` is\n+/// a user-given type (which means it may have canonical variables\n+/// encoding things like `_`).\n+pub(super) fn eq_user_type_and_type<'tcx>(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     a: CanonicalTy<'tcx>,\n     b: Ty<'tcx>,\n     locations: Locations,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n ) -> Fallible<()> {\n     debug!(\n-        \"eq_canonical_type_and_type(a={:?}, b={:?}, locations={:?})\",\n+        \"eq_user_type_and_type(a={:?}, b={:?}, locations={:?})\",\n         a, b, locations\n     );\n     let Canonical {\n         variables: a_variables,\n         value: a_value,\n     } = a;\n+\n+    // (*) The `TypeRelating` code assumes that the \"canonical variables\"\n+    // appear in the \"a\" side, so start with `Contravariant` ambient\n+    // variance to get the right relationship.\n+\n     TypeRelating::new(\n         infcx,\n-        ty::Variance::Invariant,\n+        ty::Variance::Invariant, // (*)\n         locations,\n         borrowck_context,\n         a_variables,"}, {"sha": "cc92cdecc60768fab8d657ca7b1c3ee78ecef0a2", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -338,7 +338,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |\n-            mir::StatementKind::UserAssertTy(..) |\n+            mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => {}\n \n         }"}, {"sha": "5451d27082db75d2e2319de4f1fd1de7fa4c21a9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -304,7 +304,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             }\n             StatementKind::EndRegion(_) |\n             StatementKind::Validate(..) |\n-            StatementKind::UserAssertTy(..) |\n+            StatementKind::AscribeUserType(..) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "cb8e1284d0968db49798a93a35f6a51658e66fcb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n \n             EndRegion(..) => {}\n-            UserAssertTy(..) => {}\n+            AscribeUserType(..) => {}\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly."}, {"sha": "6fbc2f85c08dab24068373d5571cc08e7b16516b", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             StatementKind::StorageDead(..) |\n             StatementKind::EndRegion(..) |\n             StatementKind::Validate(..) |\n-            StatementKind::UserAssertTy(..) |\n+            StatementKind::AscribeUserType(..) |\n             StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "9edb1a1f76a6d7bf6a92350d70d6e5fe0ba41535", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -12,7 +12,7 @@\n //!\n //!   - `CleanEndRegions`, that reduces the set of `EndRegion` statements\n //!     in the MIR.\n-//!   - `CleanUserAssertTy`, that replaces all `UserAssertTy` statements\n+//!   - `CleanAscribeUserType`, that replaces all `AscribeUserType` statements\n //!     with `Nop`.\n //!\n //! The `CleanEndRegions` \"pass\" is actually implemented as two\n@@ -24,10 +24,10 @@\n //! MIR and removes any `EndRegion` that is applied to a region that\n //! was not seen in the previous pass.\n //!\n-//! The `CleanUserAssertTy` pass runs at a distinct time from the\n-//! `CleanEndRegions` pass. It is important that the `CleanUserAssertTy`\n+//! The `CleanAscribeUserType` pass runs at a distinct time from the\n+//! `CleanEndRegions` pass. It is important that the `CleanAscribeUserType`\n //! pass runs after the MIR borrowck so that the NLL type checker can\n-//! perform the type assertion when it encounters the `UserAssertTy`\n+//! perform the type assertion when it encounters the `AscribeUserType`\n //! statements.\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -110,26 +110,26 @@ impl<'a, 'tcx> MutVisitor<'tcx> for DeleteTrivialEndRegions<'a> {\n     }\n }\n \n-pub struct CleanUserAssertTy;\n+pub struct CleanAscribeUserType;\n \n-pub struct DeleteUserAssertTy;\n+pub struct DeleteAscribeUserType;\n \n-impl MirPass for CleanUserAssertTy {\n+impl MirPass for CleanAscribeUserType {\n     fn run_pass<'a, 'tcx>(&self,\n                           _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        let mut delete = DeleteUserAssertTy;\n+        let mut delete = DeleteAscribeUserType;\n         delete.visit_mir(mir);\n     }\n }\n \n-impl<'tcx> MutVisitor<'tcx> for DeleteUserAssertTy {\n+impl<'tcx> MutVisitor<'tcx> for DeleteAscribeUserType {\n     fn visit_statement(&mut self,\n                        block: BasicBlock,\n                        statement: &mut Statement<'tcx>,\n                        location: Location) {\n-        if let StatementKind::UserAssertTy(..) = statement.kind {\n+        if let StatementKind::AscribeUserType(..) = statement.kind {\n             statement.make_nop();\n         }\n         self.super_statement(block, statement, location);"}, {"sha": "19fb35be9d4e0567ba270723a76f622c92967c9b", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -238,8 +238,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n         remove_noop_landing_pads::RemoveNoopLandingPads,\n         simplify::SimplifyCfg::new(\"early-opt\"),\n-        // Remove all `UserAssertTy` statements.\n-        cleanup_post_borrowck::CleanUserAssertTy,\n+        // Remove all `AscribeUserType` statements.\n+        cleanup_post_borrowck::CleanAscribeUserType,\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,"}, {"sha": "a2175dce33a833aa9df8e63062fe523393715d80", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -1098,7 +1098,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 StatementKind::InlineAsm {..} |\n                 StatementKind::EndRegion(_) |\n                 StatementKind::Validate(..) |\n-                StatementKind::UserAssertTy(..) |\n+                StatementKind::AscribeUserType(..) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "a2561d3d79381d3f91be2496b8e45721df653979", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -53,7 +53,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |\n-                StatementKind::UserAssertTy(..) |\n+                StatementKind::AscribeUserType(..) |\n                 StatementKind::Nop => {\n                     // These are all nops in a landing pad (there's some\n                     // borrowck interaction between EndRegion and storage"}, {"sha": "f3e0f5573632ad476f1695e233b29aa3438e7b34", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -163,7 +163,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n-            mir::StatementKind::UserAssertTy(..) |\n+            mir::StatementKind::AscribeUserType(..) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "7c9f77042cb2a229328369d1e5b49ae4c574a410", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\",\n             StatementKind::InlineAsm { .. } => \"StatementKind::InlineAsm\",\n-            StatementKind::UserAssertTy(..) => \"StatementKind::UserAssertTy\",\n+            StatementKind::AscribeUserType(..) => \"StatementKind::AscribeUserType\",\n             StatementKind::Nop => \"StatementKind::Nop\",\n         }, &statement.kind);\n         self.super_statement(block, statement, location);"}, {"sha": "503e8e009b9b13e7858470f75b9d1629875bc6f4", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3cc9669acba363abdf4f1bf5744aea383ecc46/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=dd3cc9669acba363abdf4f1bf5744aea383ecc46", "patch": "@@ -48,7 +48,7 @@ fn main() {\n //         _2 = move _3;\n //         StorageDead(_3);\n //         StorageLive(_4);\n-//         UserAssertTy(Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> }, _4);\n+//         AscribeUserType(_4, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n //         _4 = std::option::Option<std::boxed::Box<u32>>::None;\n //         StorageLive(_5);\n //         StorageLive(_6);"}]}