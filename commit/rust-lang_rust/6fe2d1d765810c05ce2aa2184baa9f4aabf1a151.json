{"sha": "6fe2d1d765810c05ce2aa2184baa9f4aabf1a151", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTJkMWQ3NjU4MTBjMDVjZTJhYTIxODRiYWE5ZjRhYWJmMWExNTE=", "commit": {"author": {"name": "Vitali Lovich", "email": "vlovich@google.com", "date": "2018-02-13T19:32:04Z"}, "committer": {"name": "Vitali Lovich", "email": "vlovich@google.com", "date": "2018-02-13T19:32:04Z"}, "message": "Misc fixes\n\nSwitch feature guards to unstable\nAdd missing semicolon\nRemove mut that's no longer necessary", "tree": {"sha": "544e36a996f9f1e4d35da3d2ecdd87bdfd8920de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/544e36a996f9f1e4d35da3d2ecdd87bdfd8920de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151", "html_url": "https://github.com/rust-lang/rust/commit/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151/comments", "author": null, "committer": null, "parents": [{"sha": "97df227d19791b0e9d199be28851fb924c3c1e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/97df227d19791b0e9d199be28851fb924c3c1e21", "html_url": "https://github.com/rust-lang/rust/commit/97df227d19791b0e9d199be28851fb924c3c1e21"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "98fadbd35439a17a2a0c1d710a88b1d70d12701e", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe2d1d765810c05ce2aa2184baa9f4aabf1a151/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=6fe2d1d765810c05ce2aa2184baa9f4aabf1a151", "patch": "@@ -263,7 +263,7 @@ impl Condvar {\n     /// // As long as the value inside the `Mutex` is false, we wait.\n     /// cvar.wait_until(lock.lock().unwrap(), |started| { started });\n     /// ```\n-    #[stable(feature = \"wait_until\", since = \"1.24\")]\n+    #[unstable(feature = \"wait_until\", issue = \"47960\")]\n     pub fn wait_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n                                 mut condition: F)\n                                 -> LockResult<MutexGuard<'a, T>>\n@@ -470,9 +470,9 @@ impl Condvar {\n     /// }\n     /// // access the locked mutex via result.0\n     /// ```\n-    #[stable(feature = \"wait_timeout_until\", since = \"1.24\")]\n+    #[unstable(feature = \"wait_timeout_until\", issue = \"47960\")]\n     pub fn wait_timeout_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n-                                        mut dur: Duration, mut condition: F)\n+                                        dur: Duration, mut condition: F)\n                                         -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>\n                                         where F: FnMut(&mut T) -> bool {\n         let start = Instant::now();\n@@ -483,7 +483,7 @@ impl Condvar {\n             let timeout = match dur.checked_sub(start.elapsed()) {\n                 Some(timeout) => timeout,\n                 None => return Ok((guard, WaitTimeoutResult(true))),\n-            }\n+            };\n             guard = self.wait_timeout(guard, timeout)?.0;\n         }\n     }"}]}