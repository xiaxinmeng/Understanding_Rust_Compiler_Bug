{"sha": "bfefefbcfa87cc468d081da371686432ca77c245", "node_id": "C_kwDOAAsO6NoAKGJmZWZlZmJjZmE4N2NjNDY4ZDA4MWRhMzcxNjg2NDMyY2E3N2MyNDU", "commit": {"author": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-18T09:20:14Z"}, "committer": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-21T15:57:22Z"}, "message": "Migrate fn_param_forbidden_self and rename others to have prefix fn_param_", "tree": {"sha": "8cb21759c1ca202cd799dc0d2475e4c3da1778b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb21759c1ca202cd799dc0d2475e4c3da1778b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfefefbcfa87cc468d081da371686432ca77c245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfefefbcfa87cc468d081da371686432ca77c245", "html_url": "https://github.com/rust-lang/rust/commit/bfefefbcfa87cc468d081da371686432ca77c245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfefefbcfa87cc468d081da371686432ca77c245/comments", "author": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e0bc9600128aef1922cd67939c303d92b3fafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e0bc9600128aef1922cd67939c303d92b3fafc", "html_url": "https://github.com/rust-lang/rust/commit/07e0bc9600128aef1922cd67939c303d92b3fafc"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "1c3a4ab7c676433bb7184cab56c0476a79d6f0fb", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=bfefefbcfa87cc468d081da371686432ca77c245", "patch": "@@ -331,21 +331,21 @@ impl<'a> AstValidator<'a> {\n         let max_num_args: usize = u16::MAX.into();\n         if fn_decl.inputs.len() > max_num_args {\n             let Param { span, .. } = fn_decl.inputs[0];\n-            self.session.emit_err(TooManyParams { span, max_num_args });\n+            self.session.emit_err(FnParamTooMany { span, max_num_args });\n         }\n     }\n \n     fn check_decl_cvaradic_pos(&self, fn_decl: &FnDecl) {\n         match &*fn_decl.inputs {\n             [Param { ty, span, .. }] => {\n                 if let TyKind::CVarArgs = ty.kind {\n-                    self.session.emit_err(CVarArgsIsSoleParam { span: *span });\n+                    self.session.emit_err(FnParamCVarArgsOnly { span: *span });\n                 }\n             }\n             [ps @ .., _] => {\n                 for Param { ty, span, .. } in ps {\n                     if let TyKind::CVarArgs = ty.kind {\n-                        self.session.emit_err(CVarArgsNotLast { span: *span });\n+                        self.session.emit_err(FnParamCVarArgsNotLast { span: *span });\n                     }\n                 }\n             }\n@@ -372,24 +372,17 @@ impl<'a> AstValidator<'a> {\n             })\n             .for_each(|attr| {\n                 if attr.is_doc_comment() {\n-                    self.session.emit_err(DocCommentOnFnParam { span: attr.span });\n+                    self.session.emit_err(FnParamDocComment { span: attr.span });\n                 } else {\n-                    self.session.emit_err(ForbiddenAttrOnFnParam { span: attr.span });\n+                    self.session.emit_err(FnParamForbiddenAttr { span: attr.span });\n                 }\n             });\n     }\n \n     fn check_decl_self_param(&self, fn_decl: &FnDecl, self_semantic: SelfSemantic) {\n         if let (SelfSemantic::No, [param, ..]) = (self_semantic, &*fn_decl.inputs) {\n             if param.is_self() {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        param.span,\n-                        \"`self` parameter is only allowed in associated functions\",\n-                    )\n-                    .span_label(param.span, \"not semantically valid as function parameter\")\n-                    .note(\"associated functions are those in `impl` or `trait` definitions\")\n-                    .emit();\n+                self.session.emit_err(FnParamForbiddenSelf { span: param.span });\n             }\n         }\n     }"}, {"sha": "ee375f1ced7e0397d5a85969807d53af668f0156", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=bfefefbcfa87cc468d081da371686432ca77c245", "patch": "@@ -106,38 +106,47 @@ pub struct ForbiddenNonLifetimeParam {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::too_many_params)]\n-pub struct TooManyParams {\n+#[error(ast_passes::fn_param_too_many)]\n+pub struct FnParamTooMany {\n     #[primary_span]\n     pub span: Span,\n     pub max_num_args: usize,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::c_var_args_is_sole_param)]\n-pub struct CVarArgsIsSoleParam {\n+#[error(ast_passes::fn_param_c_var_args_only)]\n+pub struct FnParamCVarArgsOnly {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::c_var_args_not_last)]\n-pub struct CVarArgsNotLast {\n+#[error(ast_passes::fn_param_c_var_args_not_last)]\n+pub struct FnParamCVarArgsNotLast {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::doc_comment_on_fn_param)]\n-pub struct DocCommentOnFnParam {\n+#[error(ast_passes::fn_param_doc_comment)]\n+pub struct FnParamDocComment {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_attr_on_fn_param)]\n-pub struct ForbiddenAttrOnFnParam {\n+#[error(ast_passes::fn_param_forbidden_attr)]\n+pub struct FnParamForbiddenAttr {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(ast_passes::fn_param_forbidden_self)]\n+#[note]\n+pub struct FnParamForbiddenSelf {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}"}, {"sha": "77826f639f4dc0aaaed996566e7cd7cb3d9398e9", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bfefefbcfa87cc468d081da371686432ca77c245/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=bfefefbcfa87cc468d081da371686432ca77c245", "patch": "@@ -38,18 +38,23 @@ ast_passes_forbidden_lifetime_bound =\n ast_passes_forbidden_non_lifetime_param =\n     only lifetime parameters can be used in this context\n \n-ast_passes_too_many_params =\n+ast_passes_fn_param_too_many =\n     function can not have more than {$max_num_args} arguments\n \n-ast_passes_c_var_args_is_sole_param =\n+ast_passes_fn_param_c_var_args_only =\n     C-variadic function must be declared with at least one named argument\n \n-ast_passes_c_var_args_not_last =\n+ast_passes_fn_param_c_var_args_not_last =\n     `...` must be the last argument of a C-variadic function\n \n-ast_passes_doc_comment_on_fn_param =\n+ast_passes_fn_param_doc_comment =\n     documentation comments cannot be applied to function parameters\n     .label = doc comments are not allowed here\n \n-ast_passes_forbidden_attr_on_fn_param =\n+ast_passes_fn_param_forbidden_attr =\n     allow, cfg, cfg_attr, deny, expect, forbid, and warn are the only allowed built-in attributes in function parameters\n+\n+ast_passes_fn_param_forbidden_self =\n+    `self` parameter is only allowed in associated functions\n+    .label = not semantically valid as function parameter\n+    .note = associated functions are those in `impl` or `trait` definitions"}]}