{"sha": "fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDg1NDFhYjE5Y2RkNjhhMmIwMjI4MDA0ZTY0ZDNjYmI3YTFlY2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-07-29T23:11:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T01:44:35Z"}, "message": "Update syntax in existing tests", "tree": {"sha": "ff9235de7c50ac6795502f5079d1523cde9161cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9235de7c50ac6795502f5079d1523cde9161cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "html_url": "https://github.com/rust-lang/rust/commit/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87738fe83401ee2a7d2556df8db0df4dec7cd58d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87738fe83401ee2a7d2556df8db0df4dec7cd58d", "html_url": "https://github.com/rust-lang/rust/commit/87738fe83401ee2a7d2556df8db0df4dec7cd58d"}], "stats": {"total": 671, "additions": 343, "deletions": 328}, "files": [{"sha": "1f2d755ed71abc4d08a362c25a4591d53b821321", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -3,7 +3,7 @@\n // error-pattern:could not find defining uses\n \n #![feature(associated_type_bounds)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]\n #![feature(untagged_unions)]\n \n@@ -107,17 +107,17 @@ type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n-existential type ETAI1<T: Iterator<Item: Copy, Item: Send>>: Copy;\n+type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n-existential type ETAI2<T: Iterator<Item: Copy, Item: Copy>>: Copy;\n+type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n-existential type ETAI3<T: Iterator<Item: 'static, Item: 'static>>: Copy;\n+type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n-existential type ETAI4: Iterator<Item: Copy, Item: Send>;\n+type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n-existential type ETAI5: Iterator<Item: Copy, Item: Copy>;\n+type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n-existential type ETAI6: Iterator<Item: 'static, Item: 'static>;\n+type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n //~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}"}, {"sha": "7f3a65ab696d617f8adf96c5bc8833375411b502", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -369,86 +369,86 @@ LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n error: could not find defining uses\n   --> $DIR/duplicate.rs:110:1\n    |\n-LL | existential type ETAI1<T: Iterator<Item: Copy, Item: Send>>: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:48\n+  --> $DIR/duplicate.rs:110:36\n    |\n-LL | existential type ETAI1<T: Iterator<Item: Copy, Item: Send>>: Copy;\n-   |                                    ----------  ^^^^^^^^^^ re-bound here\n-   |                                    |\n-   |                                    `Item` bound here first\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n \n error: could not find defining uses\n   --> $DIR/duplicate.rs:112:1\n    |\n-LL | existential type ETAI2<T: Iterator<Item: Copy, Item: Copy>>: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:48\n+  --> $DIR/duplicate.rs:112:36\n    |\n-LL | existential type ETAI2<T: Iterator<Item: Copy, Item: Copy>>: Copy;\n-   |                                    ----------  ^^^^^^^^^^ re-bound here\n-   |                                    |\n-   |                                    `Item` bound here first\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                        ----------  ^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n \n error: could not find defining uses\n   --> $DIR/duplicate.rs:114:1\n    |\n-LL | existential type ETAI3<T: Iterator<Item: 'static, Item: 'static>>: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:51\n+  --> $DIR/duplicate.rs:114:39\n    |\n-LL | existential type ETAI3<T: Iterator<Item: 'static, Item: 'static>>: Copy;\n-   |                                    -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                    |\n-   |                                    `Item` bound here first\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                        -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                        |\n+   |                        `Item` bound here first\n \n error: could not find defining uses\n   --> $DIR/duplicate.rs:116:1\n    |\n-LL | existential type ETAI4: Iterator<Item: Copy, Item: Send>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:46\n+  --> $DIR/duplicate.rs:116:40\n    |\n-LL | existential type ETAI4: Iterator<Item: Copy, Item: Send>;\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n \n error: could not find defining uses\n   --> $DIR/duplicate.rs:118:1\n    |\n-LL | existential type ETAI5: Iterator<Item: Copy, Item: Copy>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:46\n+  --> $DIR/duplicate.rs:118:40\n    |\n-LL | existential type ETAI5: Iterator<Item: Copy, Item: Copy>;\n-   |                                  ----------  ^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   |                            ----------  ^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n \n error: could not find defining uses\n   --> $DIR/duplicate.rs:120:1\n    |\n-LL | existential type ETAI6: Iterator<Item: 'static, Item: 'static>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:49\n+  --> $DIR/duplicate.rs:120:43\n    |\n-LL | existential type ETAI6: Iterator<Item: 'static, Item: 'static>;\n-   |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n-   |                                  |\n-   |                                  `Item` bound here first\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   |                            -------------  ^^^^^^^^^^^^^ re-bound here\n+   |                            |\n+   |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:123:36"}, {"sha": "fd9e52a6ff2f9eac8591419161b375c9427bd61f", "filename": "src/test/ui/associated-type-bounds/dyn-existential-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-existential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-existential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-existential-type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(existential_type)]\n \n use std::ops::Add;\n "}, {"sha": "9ee33e4149aafa3ef13f6baf4e1203cd60dd272e", "filename": "src/test/ui/associated-type-bounds/existential-type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fexistential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fexistential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fexistential-type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n #![feature(associated_type_bounds)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::ops::Add;\n \n@@ -17,15 +17,15 @@ struct S1;\n struct S2;\n impl Tr1 for S1 { type As1 = S2; fn mk(self) -> Self::As1 { S2 } }\n \n-existential type Et1: Tr1<As1: Copy>;\n+type Et1 = impl Tr1<As1: Copy>;\n fn def_et1() -> Et1 { S1 }\n pub fn use_et1() { assert_copy(def_et1().mk()); }\n \n-existential type Et2: Tr1<As1: 'static>;\n+type Et2 = impl Tr1<As1: 'static>;\n fn def_et2() -> Et2 { S1 }\n pub fn use_et2() { assert_static(def_et2().mk()); }\n \n-existential type Et3: Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>;\n+type Et3 = impl Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>>;\n fn def_et3() -> Et3 {\n     struct A;\n     impl Tr1 for A {\n@@ -44,7 +44,7 @@ pub fn use_et3() {\n     assert_eq!(s, (0..10).map(|x| x + 1).sum());\n }\n \n-existential type Et4: Tr1<As1: for<'a> Tr2<'a>>;\n+type Et4 = impl Tr1<As1: for<'a> Tr2<'a>>;\n fn def_et4() -> Et4 {\n     #[derive(Copy, Clone)]\n     struct A;"}, {"sha": "f11aff971bf1686c56491d8b24724d7723d81b27", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -3,11 +3,12 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await, existential_type)]\n+#![feature(async_await)]\n+#![feature(type_alias_impl_trait)]\n \n use std::future::Future;\n \n-pub existential type Func: Sized;\n+pub type Func = impl Sized;\n \n // Late bound region should be allowed to escape the function, since it's bound\n // in the type.\n@@ -17,7 +18,7 @@ fn null_function_ptr() -> Func {\n \n async fn async_nop(_: &u8) {}\n \n-pub existential type ServeFut: Future<Output=()>;\n+pub type ServeFut = impl Future<Output=()>;\n \n // Late bound regions occur in the generator witness type here.\n fn serve() -> ServeFut {"}, {"sha": "f6d863913881688e39572c5ba1c8384a73bd71a7", "filename": "src/test/ui/existential_types/auxiliary/cross_crate_ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -2,9 +2,9 @@\n \n #![crate_type=\"rlib\"]\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-pub existential type Foo: std::fmt::Debug;\n+pub type Foo = impl std::fmt::Debug;\n \n pub fn foo() -> Foo {\n     5"}, {"sha": "2fa7d6ae5c4632c60f5594c74663c16b110b730a", "filename": "src/test/ui/existential_types/auxiliary/cross_crate_ice2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fauxiliary%2Fcross_crate_ice2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -2,7 +2,7 @@\n \n #![crate_type=\"rlib\"]\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait View {\n     type Tmp: Iterator<Item = u32>;\n@@ -13,7 +13,7 @@ pub trait View {\n pub struct X;\n \n impl View for X {\n-    existential type Tmp: Iterator<Item = u32>;\n+    type Tmp = impl Iterator<Item = u32>;\n \n     fn test(&self) -> Self::Tmp {\n         vec![1,2,3].into_iter()"}, {"sha": "18c840d8ed9c7065bd849e9fafd3628debccb84b", "filename": "src/test/ui/existential_types/bound_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -2,12 +2,12 @@\n \n #![allow(warnings)]\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }\n \n-existential type Foo<V>: std::fmt::Debug;\n+type Foo<V> = impl std::fmt::Debug;\n \n trait Trait<U> {}\n "}, {"sha": "919446877a14254e9e265b7410015a32eaaf0e1f", "filename": "src/test/ui/existential_types/bound_reduction2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }\n@@ -7,7 +7,7 @@ trait TraitWithAssoc {\n     type Assoc;\n }\n \n-existential type Foo<V>: Trait<V>;\n+type Foo<V> = impl Trait<V>;\n //~^ ERROR could not find defining uses\n \n trait Trait<U> {}"}, {"sha": "b88a364b85212602c8c51a3af56dc42047991db5", "filename": "src/test/ui/existential_types/bound_reduction2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fbound_reduction2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -9,8 +9,8 @@ LL | | }\n error: could not find defining uses\n   --> $DIR/bound_reduction2.rs:10:1\n    |\n-LL | existential type Foo<V>: Trait<V>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo<V> = impl Trait<V>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4bf56a919721140d2f3168ebd76ef65c9673ecc", "filename": "src/test/ui/existential_types/declared_but_never_defined.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n // declared but never defined\n-existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n+type Bar = impl std::fmt::Debug; //~ ERROR could not find defining uses"}, {"sha": "ae0fee4333b5b6664857f6498947129d8a74e2e0", "filename": "src/test/ui/existential_types/declared_but_never_defined.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_never_defined.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n   --> $DIR/declared_but_never_defined.rs:6:1\n    |\n-LL | existential type Bar: std::fmt::Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Bar = impl std::fmt::Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "09873a8c8c3da4fbf1c06cc329ea13f95ce69e45", "filename": "src/test/ui/existential_types/declared_but_not_defined_in_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n mod boo {\n     // declared in module but not defined inside of it\n-    pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+    pub type Boo = impl ::std::fmt::Debug; //~ ERROR could not find defining uses\n }\n \n fn bomp() -> boo::Boo {"}, {"sha": "0642407aba3cd37b84bb44b83bfe7d48d70465b4", "filename": "src/test/ui/existential_types/declared_but_not_defined_in_scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdeclared_but_not_defined_in_scope.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n   --> $DIR/declared_but_not_defined_in_scope.rs:7:5\n    |\n-LL |     pub existential type Boo: ::std::fmt::Debug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     pub type Boo = impl ::std::fmt::Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2d7780a126cce954e1227f60ab7978747052302f", "filename": "src/test/ui/existential_types/different_defining_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n // two definitions with different types\n-existential type Foo: std::fmt::Debug;\n+type Foo = impl std::fmt::Debug;\n \n fn foo() -> Foo {\n     \"\""}, {"sha": "289b97b00ada71d9abace4ab29934e5d053b90e6", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n // two definitions with different types\n-existential type Foo: std::fmt::Debug;\n+type Foo = impl std::fmt::Debug;\n \n fn foo() -> Foo {\n     \"\""}, {"sha": "8549687ea78145ffafddbdef704065771492ac4c", "filename": "src/test/ui/existential_types/different_defining_uses_never_type2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n // two definitions with different types\n-existential type Foo: std::fmt::Debug;\n+type Foo = impl std::fmt::Debug;\n \n fn foo() -> Foo {\n     \"\""}, {"sha": "42f07d49ffe25355e713f06e17f7dc3c600f2854", "filename": "src/test/ui/existential_types/existential-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-associated-type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}\n@@ -11,7 +11,7 @@ trait Foo {\n     fn bar() -> Self::Assoc;\n }\n \n-existential type Helper: Bar;\n+type Helper = impl Bar;\n \n impl Foo for i32 {\n     type Assoc = Helper;"}, {"sha": "c009952eab75051197e6698707e3e6d57120f40c", "filename": "src/test/ui/existential_types/existential-types-with-cycle-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-existential type Foo: Fn() -> Foo;\n+type Foo = impl Fn() -> Foo;\n //~^ ERROR: could not find defining uses\n \n fn crash(x: Foo) -> Foo {"}, {"sha": "e044bad37e82c177320a5ec7a2366d0e091a396a", "filename": "src/test/ui/existential_types/existential-types-with-cycle-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n   --> $DIR/existential-types-with-cycle-error.rs:3:1\n    |\n-LL | existential type Foo: Fn() -> Foo;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo = impl Fn() -> Foo;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "32ecc36661898547db97e7924871a1c756311fd7", "filename": "src/test/ui/existential_types/existential-types-with-cycle-error2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar<T> {\n     type Item;\n }\n \n-existential type Foo: Bar<Foo, Item = Foo>;\n+type Foo = impl Bar<Foo, Item = Foo>;\n //~^ ERROR: could not find defining uses\n \n fn crash(x: Foo) -> Foo {"}, {"sha": "32c1424ad950894ed480220e2beaef761e347571", "filename": "src/test/ui/existential_types/existential-types-with-cycle-error2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-cycle-error2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n   --> $DIR/existential-types-with-cycle-error2.rs:7:1\n    |\n-LL | existential type Foo: Bar<Foo, Item = Foo>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo = impl Bar<Foo, Item = Foo>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8ca279eec921b114ac74d188db0f3eb0ba62b04f", "filename": "src/test/ui/existential_types/existential-types-with-no-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-existential type Foo: 'static;\n+type Foo = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn foo() -> Foo {"}, {"sha": "9703a367ddc5fdf77729d0a1857f81426999971f", "filename": "src/test/ui/existential_types/existential-types-with-no-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential-types-with-no-traits.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/existential-types-with-no-traits.rs:3:23\n+  --> $DIR/existential-types-with-no-traits.rs:3:17\n    |\n-LL | existential type Foo: 'static;\n-   |                       ^^^^^^^\n+LL | type Foo = impl 'static;\n+   |                 ^^^^^^^\n \n error: at least one trait must be specified\n   --> $DIR/existential-types-with-no-traits.rs:10:13"}, {"sha": "209134acf01f9723d50d9421bdf0caeb0074c306", "filename": "src/test/ui/existential_types/existential_type-pass.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type-pass.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -3,7 +3,7 @@\n #![allow(dead_code)]\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n     assert_eq!(foo().to_string(), \"foo\");\n@@ -16,14 +16,14 @@ fn main() {\n }\n \n // single definition\n-existential type Foo: std::fmt::Display;\n+type Foo = impl std::fmt::Display;\n \n fn foo() -> Foo {\n     \"foo\"\n }\n \n // two definitions\n-existential type Bar: std::fmt::Display;\n+type Bar = impl std::fmt::Display;\n \n fn bar1() -> Bar {\n     \"bar1\"\n@@ -34,15 +34,15 @@ fn bar2() -> Bar {\n }\n \n // definition in submodule\n-existential type Boo: std::fmt::Display;\n+type Boo = impl std::fmt::Display;\n \n mod boo {\n     pub fn boo() -> super::Boo {\n         \"boo\"\n     }\n }\n \n-existential type MyIter<T>: Iterator<Item = T>;\n+type MyIter<T> = impl Iterator<Item = T>;\n \n fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)\n@@ -63,21 +63,21 @@ fn my_iter4<U, V>(_: U, v: V) -> MyIter<V> {\n }\n \n // param names should not have an effect!\n-existential type MyOtherIter<T>: Iterator<Item = T>;\n+type MyOtherIter<T> = impl Iterator<Item = T>;\n \n fn my_other_iter<U>(u: U) -> MyOtherIter<U> {\n     std::iter::once(u)\n }\n \n trait Trait {}\n-existential type GenericBound<'a, T: Trait>: Sized + 'a;\n+type GenericBound<'a, T: Trait> = impl Sized + 'a;\n \n fn generic_bound<'a, T: Trait + 'a>(t: T) -> GenericBound<'a, T> {\n     t\n }\n \n mod pass_through {\n-    pub existential type Passthrough<T>: Sized + 'static;\n+    pub type Passthrough<T> = impl Sized + 'static;\n \n     fn define_passthrough<T: 'static>(t: T) -> Passthrough<T> {\n         t"}, {"sha": "fdfd4ac875930d3b74c426f24b44dc0f91185e00", "filename": "src/test/ui/existential_types/existential_type_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n \n-#![feature(existential_type)]\n-// Currently, the `existential_type` feature implicitly\n+#![feature(type_alias_impl_trait)]\n+// Currently, the `type_alias_impl_trait` feature implicitly\n // depends on `impl_trait_in_bindings` in order to work properly.\n // Specifically, this line requires `impl_trait_in_bindings` to be enabled:\n // https://github.com/rust-lang/rust/blob/481068a707679257e2a738b40987246e0420e787/src/librustc_typeck/check/mod.rs#L856\n@@ -12,7 +12,7 @@\n \n use std::fmt::Debug;\n \n-pub existential type Foo: Debug;\n+pub type Foo = impl Debug;\n \n const _FOO: Foo = 5;\n "}, {"sha": "a22b12cae6bcbe879e83684de9abaf44bc19e3b6", "filename": "src/test/ui/existential_types/existential_type_fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_fns.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n // Regression test for issue #61863\n \n@@ -22,6 +22,6 @@ pub fn bla2() -> TE {\n }\n \n \n-existential type TE: MyTrait;\n+type TE = impl MyTrait;\n \n fn main() {}"}, {"sha": "86c9d482143832135e0c278e0108b42e26ae3e63", "filename": "src/test/ui/existential_types/existential_type_tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_tuple.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n #![allow(dead_code)]\n \n pub trait MyTrait {}\n@@ -28,6 +28,6 @@ fn make_foo() -> Foo {\n     true\n }\n \n-existential type Foo: MyTrait;\n+type Foo = impl MyTrait;\n \n fn main() {}"}, {"sha": "ac87c2d446a89954cdff239771a6d6880b5a347a", "filename": "src/test/ui/existential_types/generic_different_defining_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type MyIter<T>: Iterator<Item = T>;\n+type MyIter<T> = impl Iterator<Item = T>;\n \n fn my_iter<T>(t: T) -> MyIter<T> {\n     std::iter::once(t)"}, {"sha": "e88aa07b6f0c98ddd0567ccaa4e8e669f19143be", "filename": "src/test/ui/existential_types/generic_duplicate_lifetime_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type Two<'a, 'b>: std::fmt::Debug;\n+type Two<'a, 'b> = impl std::fmt::Debug;\n \n fn one<'a>(t: &'a ()) -> Two<'a, 'a> { //~ ERROR non-defining existential type use\n     t"}, {"sha": "f63defe8ff789e55408d89b3e1e60ac0ab3bcc1a", "filename": "src/test/ui/existential_types/generic_duplicate_lifetime_param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_lifetime_param.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -7,10 +7,10 @@ LL | | }\n    | |_^\n    |\n note: lifetime used multiple times\n-  --> $DIR/generic_duplicate_lifetime_param.rs:5:22\n+  --> $DIR/generic_duplicate_lifetime_param.rs:5:10\n    |\n-LL | existential type Two<'a, 'b>: std::fmt::Debug;\n-   |                      ^^  ^^\n+LL | type Two<'a, 'b> = impl std::fmt::Debug;\n+   |          ^^  ^^\n \n error: aborting due to previous error\n "}, {"sha": "7ae82a972da60a53f3cbcf8672aa50fcf18cc6da", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n //~^ could not find defining uses\n \n fn one<T: Debug>(t: T) -> Two<T, T> {"}, {"sha": "8c727bae8e77cc461e2bfd68db20b73b0b65a548", "filename": "src/test/ui/existential_types/generic_duplicate_param_use.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -10,8 +10,8 @@ LL | | }\n error: could not find defining uses\n   --> $DIR/generic_duplicate_param_use.rs:8:1\n    |\n-LL | existential type Two<T, U>: Debug;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Two<T, U> = impl Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "898dab1b0b9602808b58671eb45540e2e7b3be66", "filename": "src/test/ui/existential_types/generic_duplicate_param_use10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use10.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n     (t, 4u32)"}, {"sha": "cf3f5fd8e002098153bd22495ace987f990dd671", "filename": "src/test/ui/existential_types/generic_duplicate_param_use2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n //~^ defining existential type use restricts existential type"}, {"sha": "b980e831b732b9da26158911c4a25856699e857e", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n //~^ defining existential type use restricts existential type"}, {"sha": "34a4a1ed53b9f54df4fb06b8dfa4f74471e0fdc4", "filename": "src/test/ui/existential_types/generic_duplicate_param_use4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use4.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn one<T: Debug>(t: T) -> Two<T, T> {\n //~^ ERROR defining existential type use restricts existential type"}, {"sha": "ac8773104147e21444b0b731bafdc45742cd26d0", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, u)"}, {"sha": "59e7de413a2c6da522717ec1915de4a4ea31bac7", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n // test that unused generic parameters are ok\n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn two<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n     (t, t)"}, {"sha": "712a6539f0153720b887aaa6452e784221185b0d", "filename": "src/test/ui/existential_types/generic_duplicate_param_use7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use7.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-existential type Two<A, B>: Debug;\n+type Two<A, B> = impl Debug;\n \n fn two<T: Debug + Copy, U>(t: T, u: U) -> Two<T, U> {\n     (t, t)"}, {"sha": "777ded52609b8abb4c217a0b896d5a4ab5c54f0e", "filename": "src/test/ui/existential_types/generic_duplicate_param_use8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use8.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn two<T: Debug, U: Debug>(t: T, _: U) -> Two<T, U> {\n     (t, 4u32)"}, {"sha": "491e6647f45d048085e256609b594d2d992d3a1b", "filename": "src/test/ui/existential_types/generic_duplicate_param_use9.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use9.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-existential type Two<A, B>: Debug;\n+type Two<A, B> = impl Debug;\n \n trait Foo {\n     type Bar: Debug;"}, {"sha": "e109c38c98695a4302586bc478d4adacc65d12bf", "filename": "src/test/ui/existential_types/generic_lifetime_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_lifetime_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_lifetime_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_lifetime_param.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type Region<'a>: std::fmt::Debug;\n+type Region<'a> = impl std::fmt::Debug;\n \n fn region<'b>(a: &'b ()) -> Region<'b> {\n     a"}, {"sha": "e98445e3a0ff8f3925067bab4d9273798e12979a", "filename": "src/test/ui/existential_types/generic_nondefining_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type Cmp<T>: 'static;\n+type Cmp<T> = impl 'static;\n //~^ ERROR could not find defining uses\n //~^^ ERROR: at least one trait must be specified\n "}, {"sha": "e50d545a8ad8052fafa4aed598be3294ca9c2738", "filename": "src/test/ui/existential_types/generic_nondefining_use.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_nondefining_use.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_nondefining_use.rs:5:26\n+  --> $DIR/generic_nondefining_use.rs:5:20\n    |\n-LL | existential type Cmp<T>: 'static;\n-   |                          ^^^^^^^\n+LL | type Cmp<T> = impl 'static;\n+   |                    ^^^^^^^\n \n error: defining existential type use does not fully define existential type\n   --> $DIR/generic_nondefining_use.rs:11:1\n@@ -15,8 +15,8 @@ LL | | }\n error: could not find defining uses\n   --> $DIR/generic_nondefining_use.rs:5:1\n    |\n-LL | existential type Cmp<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Cmp<T> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ace52dc83ad79222d6365c1d43b1c4c66462c2f9", "filename": "src/test/ui/existential_types/generic_not_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type WrongGeneric<T: 'static>: 'static;\n+type WrongGeneric<T: 'static> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {"}, {"sha": "250296d9de9dd3ff8584916ae6f9d6c9a2f25f96", "filename": "src/test/ui/existential_types/generic_not_used.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_not_used.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_not_used.rs:5:44\n+  --> $DIR/generic_not_used.rs:5:38\n    |\n-LL | existential type WrongGeneric<T: 'static>: 'static;\n-   |                                            ^^^^^^^\n+LL | type WrongGeneric<T: 'static> = impl 'static;\n+   |                                      ^^^^^^^\n \n error: type parameter `V` is part of concrete type but not used in parameter list for existential type\n   --> $DIR/generic_not_used.rs:8:73"}, {"sha": "c0f939a50482fa7f657aa65406d36c7dc46de792", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,12 +1,12 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n     let y = 42;\n     let x = wrong_generic(&y);\n     let z: i32 = x; //~ ERROR mismatched types\n }\n \n-existential type WrongGeneric<T>: 'static;\n+type WrongGeneric<T> = impl 'static;\n //~^ ERROR the parameter type `T` may not live long enough\n //~^^ ERROR: at least one trait must be specified\n "}, {"sha": "12569211df368178481f3b61d8ae0d1c5383146f", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:9:35\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:29\n    |\n-LL | existential type WrongGeneric<T>: 'static;\n-   |                                   ^^^^^^^\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                             ^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/generic_type_does_not_live_long_enough.rs:6:18\n@@ -16,17 +16,17 @@ LL |     let z: i32 = x;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:9:1\n    |\n-LL | existential type WrongGeneric<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n    |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n   --> $DIR/generic_type_does_not_live_long_enough.rs:9:1\n    |\n-LL | existential type WrongGeneric<T>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type WrongGeneric<T> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "589612d5ed69be9de6e919c32f74b320bfb8723e", "filename": "src/test/ui/existential_types/generic_underconstrained.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n trait Trait {}\n-existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+type Underconstrained<T: Trait> = impl 'static; //~ ERROR the trait bound `T: Trait`\n //~^ ERROR: at least one trait must be specified\n \n // no `Trait` bound"}, {"sha": "dd90dd1b06fe2e6c94679d240d049c29aa114345", "filename": "src/test/ui/existential_types/generic_underconstrained.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,14 +1,14 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained.rs:6:46\n+  --> $DIR/generic_underconstrained.rs:6:40\n    |\n-LL | existential type Underconstrained<T: Trait>: 'static;\n-   |                                              ^^^^^^^\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                                        ^^^^^^^\n \n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/generic_underconstrained.rs:6:1\n    |\n-LL | existential type Underconstrained<T: Trait>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n    = help: consider adding a `where T: Trait` bound\n    = note: the return type of a function must have a statically known size"}, {"sha": "87b8aaad95740d154eee7a8d487b694de2f6de24", "filename": "src/test/ui/existential_types/generic_underconstrained2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n-existential type Underconstrained<T: std::fmt::Debug>: 'static;\n+type Underconstrained<T: std::fmt::Debug> = impl 'static;\n //~^ ERROR `U` doesn't implement `std::fmt::Debug`\n //~^^ ERROR: at least one trait must be specified\n \n@@ -11,7 +11,7 @@ fn underconstrained<U>(_: U) -> Underconstrained<U> {\n     5u32\n }\n \n-existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n+type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n //~^ ERROR `V` doesn't implement `std::fmt::Debug`\n //~^^ ERROR: at least one trait must be specified\n "}, {"sha": "574432bdcf6de8e396467d665331f349893b390b", "filename": "src/test/ui/existential_types/generic_underconstrained2.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_underconstrained2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,20 +1,20 @@\n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:5:56\n+  --> $DIR/generic_underconstrained2.rs:5:50\n    |\n-LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n-   |                                                        ^^^^^^^\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                                                  ^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/generic_underconstrained2.rs:14:57\n+  --> $DIR/generic_underconstrained2.rs:14:51\n    |\n-LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n-   |                                                         ^^^^^^^\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                                                   ^^^^^^^\n \n error[E0277]: `U` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:5:1\n    |\n-LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `U`\n    = help: consider adding a `where U: std::fmt::Debug` bound\n@@ -23,8 +23,8 @@ LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n error[E0277]: `V` doesn't implement `std::fmt::Debug`\n   --> $DIR/generic_underconstrained2.rs:14:1\n    |\n-LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `std::fmt::Debug` is not implemented for `V`\n    = help: consider adding a `where V: std::fmt::Debug` bound"}, {"sha": "92ba50ae6cf1fe4901e0ebec50dee96eef04254e", "filename": "src/test/ui/existential_types/issue-58887.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n trait UnwrapItemsExt {\n     type Iter;\n@@ -10,7 +10,7 @@ where\n     I: Iterator<Item = Result<T, E>>,\n     E: std::fmt::Debug,\n {\n-    existential type Iter: Iterator<Item = T>;\n+    type Iter = impl Iterator<Item = T>;\n     //~^ ERROR: could not find defining uses\n \n     fn unwrap_items(self) -> Self::Iter {"}, {"sha": "cb786f5e161651f7171ef2943d2813ed8d2a1676", "filename": "src/test/ui/existential_types/issue-58887.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-58887.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -23,8 +23,8 @@ LL | |     }\n error: could not find defining uses\n   --> $DIR/issue-58887.rs:13:5\n    |\n-LL |     existential type Iter: Iterator<Item = T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Iter = impl Iterator<Item = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cfb343f96ca9b83395dda5e352df56980a772a77", "filename": "src/test/ui/existential_types/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -5,7 +5,7 @@ trait Bug {\n }\n \n impl Bug for &() {\n-    existential type Item: Bug; //~ ERROR existential types are unstable\n+    type Item = impl Bug; //~ ERROR existential types are unstable\n     //~^ ERROR the trait bound `(): Bug` is not satisfied\n     //~^^ ERROR could not find defining uses\n "}, {"sha": "34936c73a46e5fac0a216d8ede8d28e990d7cf2e", "filename": "src/test/ui/existential_types/issue-60371.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fissue-60371.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: existential types are unstable\n   --> $DIR/issue-60371.rs:8:5\n    |\n-LL |     existential type Item: Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Item = impl Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n-   = help: add `#![feature(existential_type)]` to the crate attributes to enable\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:8:5\n    |\n-LL |     existential type Item: Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Bug` is not implemented for `()`\n+LL |     type Item = impl Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Bug` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <&() as Bug>\n@@ -20,8 +20,8 @@ LL |     existential type Item: Bug;\n error: could not find defining uses\n   --> $DIR/issue-60371.rs:8:5\n    |\n-LL |     existential type Item: Bug;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     type Item = impl Bug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "82c9ecd2ac6bf6985de2b5af73a1bc332ff9b04f", "filename": "src/test/ui/existential_types/nested_existential_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n mod my_mod {\n   use std::fmt::Debug;\n \n-  pub existential type Foo: Debug;\n-  pub existential type Foot: Debug;\n+  pub type Foo = impl Debug;\n+  pub type Foot = impl Debug;\n \n   pub fn get_foo() -> Foo {\n       5i32"}, {"sha": "8787c023eb0c78708e7a8554b3c4ef7eb4860889", "filename": "src/test/ui/existential_types/never_reveal_concrete_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnever_reveal_concrete_type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n // don't reveal the concrete type\n-existential type NoReveal: std::fmt::Debug;\n+type NoReveal = impl std::fmt::Debug;\n \n fn define_no_reveal() -> NoReveal {\n     \"\""}, {"sha": "f096dd162d50725b7b9e64ea96d89be92205939b", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n // Issue 52985: user code provides no use case that allows an existential type\n // We now emit a 'could not find defining uses' error\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-existential type Foo: Copy; //~ could not find defining uses\n+type Foo = impl Copy; //~ could not find defining uses\n \n // make compiler happy about using 'Foo'\n fn bar(x: Foo) -> Foo { x }"}, {"sha": "444e6e8214ff283026b8b9864591f73493fae681", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error: could not find defining uses\n   --> $DIR/no_inferrable_concrete_type.rs:6:1\n    |\n-LL | existential type Foo: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | type Foo = impl Copy;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "61153b1e17141ce5ffd6d123e12aa636f01b6f7e", "filename": "src/test/ui/existential_types/no_revealing_outside_defining_module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_revealing_outside_defining_module.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {}\n \n mod boo {\n-    pub existential type Boo: ::std::fmt::Debug;\n+    pub type Boo = impl ::std::fmt::Debug;\n     fn bomp() -> Boo {\n         \"\"\n     }"}, {"sha": "c49e9bc80f6996f135b977c7b5cca9902b524a48", "filename": "src/test/ui/existential_types/not_a_defining_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_a_defining_use.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,10 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {}\n \n-existential type Two<T, U>: Debug;\n+type Two<T, U> = impl Debug;\n \n fn two<T: Debug>(t: T) -> Two<T, u32> {\n     //~^ ERROR defining existential type use does not fully define existential type"}, {"sha": "36ec9b34ebdb1503acc3b17b5193f9e2ab9f97a3", "filename": "src/test/ui/existential_types/not_well_formed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }\n@@ -7,7 +7,7 @@ trait TraitWithAssoc {\n     type Assoc;\n }\n \n-existential type Foo<V>: Trait<V::Assoc>; //~ associated type `Assoc` not found for `V`\n+type Foo<V> = impl Trait<V::Assoc>; //~ associated type `Assoc` not found for `V`\n \n trait Trait<U> {}\n "}, {"sha": "d374d6d33ee733cd47f07d57485b37267b1d8982", "filename": "src/test/ui/existential_types/not_well_formed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnot_well_formed.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/not_well_formed.rs:10:32\n+  --> $DIR/not_well_formed.rs:10:26\n    |\n-LL | existential type Foo<V>: Trait<V::Assoc>;\n-   |                                ^^^^^^^^ associated type `Assoc` not found\n+LL | type Foo<V> = impl Trait<V::Assoc>;\n+   |                          ^^^^^^^^ associated type `Assoc` not found\n \n error: aborting due to previous error\n "}, {"sha": "a9ab727b193e4374c0a35e6596f682c0b47dcaf1", "filename": "src/test/ui/existential_types/unused_generic_param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,16 +1,16 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n fn main() {\n }\n \n-existential type PartiallyDefined<T>: 'static;\n+type PartiallyDefined<T> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn partially_defined<T: std::fmt::Debug>(_: T) -> PartiallyDefined<T> {\n     4u32\n }\n \n-existential type PartiallyDefined2<T>: 'static;\n+type PartiallyDefined2<T> = impl 'static;\n //~^ ERROR: at least one trait must be specified\n \n fn partially_defined2<T: std::fmt::Debug>(_: T) -> PartiallyDefined2<T> {"}, {"sha": "23105026964c1d33c5274132d3215e0f110f48ca", "filename": "src/test/ui/existential_types/unused_generic_param.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Funused_generic_param.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,14 +1,14 @@\n error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:6:39\n+  --> $DIR/unused_generic_param.rs:6:33\n    |\n-LL | existential type PartiallyDefined<T>: 'static;\n-   |                                       ^^^^^^^\n+LL | type PartiallyDefined<T> = impl 'static;\n+   |                                 ^^^^^^^\n \n error: at least one trait must be specified\n-  --> $DIR/unused_generic_param.rs:13:40\n+  --> $DIR/unused_generic_param.rs:13:34\n    |\n-LL | existential type PartiallyDefined2<T>: 'static;\n-   |                                        ^^^^^^^\n+LL | type PartiallyDefined2<T> = impl 'static;\n+   |                                  ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c7c46b0e3dbbedb83184ced46bf061757a82363", "filename": "src/test/ui/impl-trait/associated-existential-type-generic-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-generic-trait.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}\n@@ -11,7 +11,7 @@ trait Foo<T> {\n }\n \n impl<W> Foo<W> for i32 {\n-    existential type Assoc: Bar;\n+    type Assoc = impl Bar;\n     fn foo(w: W) -> Self::Assoc {\n         Dummy(w)\n     }\n@@ -21,7 +21,7 @@ struct NonGeneric;\n impl Bar for NonGeneric {}\n \n impl<W> Foo<W> for u32 {\n-    existential type Assoc: Bar;\n+    type Assoc = impl Bar;\n     fn foo(_: W) -> Self::Assoc {\n         NonGeneric\n     }"}, {"sha": "cdda341cad87ab1bcfb827eb4c7408b0da86da81", "filename": "src/test/ui/impl-trait/associated-existential-type-trivial.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type-trivial.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}\n@@ -11,7 +11,7 @@ trait Foo {\n }\n \n impl Foo for i32 {\n-    existential type Assoc: Bar;\n+    type Assoc = impl Bar;\n     fn foo() -> Self::Assoc {\n         Dummy\n     }"}, {"sha": "d0661d66f4b48dd25508aba00c6dffe98e0af2bd", "filename": "src/test/ui/impl-trait/associated-existential-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fassociated-existential-type.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,4 +1,4 @@\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait Bar {}\n@@ -12,7 +12,7 @@ trait Foo {\n }\n \n impl Foo for i32 {\n-    existential type Assoc: Bar;\n+    type Assoc = impl Bar;\n     fn foo() -> Self::Assoc {\n         Dummy\n     }"}, {"sha": "c33261bfd09091b2aa7d949a3fa25ddccb3081b8", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -2,7 +2,6 @@\n // edition:2018\n \n #![feature(async_await)]\n-#![feature(existential_type)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n "}, {"sha": "aa306a7e08a4c768553a17d3f6cd7d4e6a045cf0", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:6:12\n+  --> $DIR/bound-normalization-fail.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:30:32\n+  --> $DIR/bound-normalization-fail.rs:29:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,7 +17,7 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:47:41\n+  --> $DIR/bound-normalization-fail.rs:46:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "33348340bce9751498ad645d607bab6024344cc1", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -2,7 +2,7 @@\n // edition:2018\n \n #![feature(async_await)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n \n@@ -99,7 +99,7 @@ mod existential_types {\n         type Out = u8;\n     }\n \n-    existential type Ex: Trait<Out = <() as Implemented>::Assoc>;\n+    type Ex = impl Trait<Out = <() as Implemented>::Assoc>;\n \n     fn define() -> Ex {\n         ()"}, {"sha": "91be4efd56a154889cd6908b0337802312bffe5b", "filename": "src/test/ui/impl-trait/existential_type_in_fn_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fexistential_type_in_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fexistential_type_in_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexistential_type_in_fn_body.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n use std::fmt::Debug;\n \n fn main() {\n-    existential type Existential: Debug;\n+    type Existential = impl Debug;\n \n     fn f() -> Existential {}\n     println!(\"{:?}\", f());"}, {"sha": "c127e4cef4994c49f66edce82191996ad0ec2915", "filename": "src/test/ui/impl-trait/issue-55872-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar\n {\n@@ -9,7 +9,7 @@ pub trait Bar\n }\n \n impl<S: Default> Bar for S {\n-    existential type E: Copy;\n+    type E = impl Copy;\n     //~^ ERROR the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)` [E0277]\n     //~^^ ERROR the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)` [E0277]\n "}, {"sha": "8a429626a5b97e61f20633459a08d68dbb09c035", "filename": "src/test/ui/impl-trait/issue-55872-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `S: std::marker::Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:5\n    |\n-LL |     existential type E: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n+LL |     type E = impl Copy;\n+   |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `S`\n    |\n    = help: consider adding a `where S: std::marker::Copy` bound\n    = note: required because it appears within the type `(S, T)`\n@@ -11,8 +11,8 @@ LL |     existential type E: Copy;\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:12:5\n    |\n-LL |     existential type E: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n+LL |     type E = impl Copy;\n+   |     ^^^^^^^^^^^^^^^^^^^ within `(S, T)`, the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n    = note: required because it appears within the type `(S, T)`"}, {"sha": "d7432bda8392011fba85310198754cc4f5d7a8cb", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n // ignore-tidy-linelength\n-#![feature(async_await, existential_type)]\n+#![feature(async_await, type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;\n@@ -9,7 +9,7 @@ pub trait Bar {\n }\n \n impl<S> Bar for S {\n-    existential type E: Copy;\n+    type E = impl Copy;\n     //~^ ERROR the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied [E0277]\n     fn foo<T>() -> Self::E {\n     //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for existential type"}, {"sha": "c9cc178d3f87afe91c7bc0069cf462cb2f4f1d34", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied\n   --> $DIR/issue-55872-2.rs:12:5\n    |\n-LL |     existential type E: Copy;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n+LL |     type E = impl Copy;\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n    |\n    = note: the return type of a function must have a statically known size\n "}, {"sha": "bf2c5c822080f029dc2bbdcfe500b765b017bc5c", "filename": "src/test/ui/impl-trait/issue-55872.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-linelength\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;\n@@ -8,7 +8,7 @@ pub trait Bar {\n }\n \n impl<S> Bar for S {\n-    existential type E: Copy;\n+    type E = impl Copy;\n \n     fn foo<T>() -> Self::E {\n     //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for existential type"}, {"sha": "de8c579743fc0e74b5666dcfae31593f0fd0a899", "filename": "src/test/ui/impl-trait/issues/issue-53457.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-53457.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n // run-pass\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n-existential type X: Clone;\n+type X = impl Clone;\n \n fn bar<F: Fn(&i32) + Clone>(f: F) -> F {\n     f"}, {"sha": "b226cf058aa7533992e1e0e7a4590189112db07b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,14 +1,14 @@\n // compile-flags:-Zborrowck=mir\n \n #![feature(member_constraints)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n #[derive(Clone)]\n struct CopyIfEq<T, U>(T, U);\n \n impl<T: Copy> Copy for CopyIfEq<T, T> {}\n \n-existential type E<'a, 'b>: Sized;\n+type E<'a, 'b> = impl Sized;\n \n fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n     //~^ ERROR lifetime may not live long enough"}, {"sha": "f27e6ff44a65c76d5613a7e6b0ab3691f0fd2521", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n-LL | existential type E<'a, 'b>: Sized; + 'a\n+LL | type E<'a, 'b> = impl Sized; + 'a\n    |\n \n error: aborting due to previous error"}, {"sha": "ae44b371f4ff815f87d9da40d2dd446af722370d", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-existential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-existential.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -4,15 +4,15 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n #![feature(member_constraints)]\n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n // those are the types that appear in the original values.\n \n-existential type Foo<'a, 'b>: Trait<'a, 'b>;\n+type Foo<'a, 'b> = impl Trait<'a, 'b>;\n \n fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> Foo<'a, 'b> {\n     // In this simple case, you have a hidden type `(&'0 u8, &'1 u8)` and constraints like"}, {"sha": "5b6105421fe0a10d72b0375e19772cc41eaf52ee", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -120,7 +120,8 @@ trait DummyTrait {\n }\n impl DummyTrait for () {\n     type Out = impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+    //~^ ERROR existential types are unstable\n+    //~^^ ERROR could not find defining uses\n \n     fn in_trait_impl_parameter(_: impl Debug) { }\n     // Allowed\n@@ -155,7 +156,8 @@ extern \"C\" fn in_extern_fn_return() -> impl Debug {\n }\n \n type InTypeAlias<R> = impl Debug;\n-//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+//~^ ERROR existential types are unstable\n+//~^^ ERROR could not find defining uses\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "08f456199e90b2709fc5d433d85bf48dc7fbe8b9", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -16,6 +16,24 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 |       nested `impl Trait` here\n    |                                                 outer `impl Trait`\n \n+error[E0658]: existential types are unstable\n+  --> $DIR/where-allowed.rs:122:5\n+   |\n+LL |     type Out = impl Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: existential types are unstable\n+  --> $DIR/where-allowed.rs:158:1\n+   |\n+LL | type InTypeAlias<R> = impl Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/63063\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:18:40\n    |\n@@ -137,109 +155,110 @@ LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:122:16\n-   |\n-LL |     type Out = impl Debug;\n-   |                ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:128:34\n+  --> $DIR/where-allowed.rs:129:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:141:33\n+  --> $DIR/where-allowed.rs:142:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:144:31\n+  --> $DIR/where-allowed.rs:145:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:157:23\n-   |\n-LL | type InTypeAlias<R> = impl Debug;\n-   |                       ^^^^^^^^^^\n-\n-error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:160:39\n+  --> $DIR/where-allowed.rs:162:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:164:16\n+  --> $DIR/where-allowed.rs:166:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:169:24\n+  --> $DIR/where-allowed.rs:171:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:174:6\n+  --> $DIR/where-allowed.rs:176:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:180:24\n+  --> $DIR/where-allowed.rs:182:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:186:11\n+  --> $DIR/where-allowed.rs:188:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:193:15\n+  --> $DIR/where-allowed.rs:195:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:200:24\n+  --> $DIR/where-allowed.rs:202:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:207:17\n+  --> $DIR/where-allowed.rs:209:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:214:22\n+  --> $DIR/where-allowed.rs:216:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:220:29\n+  --> $DIR/where-allowed.rs:222:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:222:46\n+  --> $DIR/where-allowed.rs:224:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n-error: aborting due to 39 previous errors\n+error: could not find defining uses\n+  --> $DIR/where-allowed.rs:158:1\n+   |\n+LL | type InTypeAlias<R> = impl Debug;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not find defining uses\n+  --> $DIR/where-allowed.rs:122:5\n+   |\n+LL |     type Out = impl Debug;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 41 previous errors\n \n-For more information about this error, try `rustc --explain E0562`.\n+Some errors have detailed explanations: E0562, E0658.\n+For more information about an error, try `rustc --explain E0562`."}, {"sha": "745f0300bd5ad27eeceaa536670588108cc6f743", "filename": "src/test/ui/issues/issue-58856-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -9,6 +9,6 @@ impl Howness for () {\n         Empty\n     }\n }\n-//~^ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`,\n+//~^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`,\n \n fn main() {}"}, {"sha": "a83dd674a87f98dace7d39993f1b02e0078171ba", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -7,11 +7,11 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   |     help: `)` may belong here\n    |                   unclosed delimiter\n \n-error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n LL |     }\n-   |      - expected one of 11 possible tokens here\n+   |      - expected one of 10 possible tokens here\n LL | }\n    | ^ unexpected token\n "}, {"sha": "dcf935c5780c5a030cc72ea8d84f31ab66ee3892", "filename": "src/test/ui/issues/issue-60662.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,11 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // compile-flags: -Z unpretty=hir\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n \n trait Animal {\n }\n \n fn main() {\n-    pub existential type ServeFut: Animal;\n+    pub type ServeFut = impl Animal;\n }"}, {"sha": "6389c86ecf74b732ab72134149510daf38ff884f", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // compile-flags: -Z unpretty=hir\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n #[prelude_import]\n use ::std::prelude::v1::*;\n #[macro_use]"}, {"sha": "e199045134e7846d611bc19cc6573abde6607941", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `existential`, `extern`, `fn`, `type`, or `unsafe`, found `pub`\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found `pub`\n   --> $DIR/default.rs:22:13\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |             ^^^ expected one of 7 possible tokens here\n+   |             ^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe` here\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5"}, {"sha": "0063a334182f433e7d30ec4388df47e6f97f7a2b", "filename": "src/test/ui/parser/issue-20711-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,11 +1,9 @@\n-// ignore-tidy-linelength\n-\n struct Foo;\n \n impl Foo {\n     fn foo() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or\n+} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n \n fn main() {}"}, {"sha": "56749c107d13ebc4b49da94fb7fff7357570422a", "filename": "src/test/ui/parser/issue-20711-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n-  --> $DIR/issue-20711-2.rs:9:1\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n+  --> $DIR/issue-20711-2.rs:7:1\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 10 possible tokens here\n+   |                                                  - expected one of 9 possible tokens here\n LL | }\n    | ^ unexpected token\n "}, {"sha": "dc216167b8a4f68d466de2f1d807213681b16e2c", "filename": "src/test/ui/parser/issue-20711.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,7 @@\n-// ignore-tidy-linelength\n-\n struct Foo;\n \n impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or\n+} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n \n fn main() {}"}, {"sha": "f7b99a91b51b103b80f56b3baaf917f143b10f12", "filename": "src/test/ui/parser/issue-20711.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n-  --> $DIR/issue-20711.rs:7:1\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n+  --> $DIR/issue-20711.rs:5:1\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 10 possible tokens here\n+   |                                                  - expected one of 9 possible tokens here\n LL | }\n    | ^ unexpected token\n "}, {"sha": "624d1a3d11ebd479dcb38ac4c977b17d3b6b8d19", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `(`, `async`, `const`, `default`, `existential`, `extern`, `fn`, `type`, or `unsafe`, found `}`\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`, or `unsafe`, found `}`\n   --> $DIR/issue-41155.rs:5:1\n    |\n LL |     pub\n-   |        - expected one of 9 possible tokens here\n+   |        - expected one of 8 possible tokens here\n LL | }\n    | ^ unexpected token\n "}, {"sha": "0caddb9855d83224a7d0eadb56ff329ede03e5c9", "filename": "src/test/ui/parser/removed-syntax-static-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,10 +1,8 @@\n-// ignore-tidy-linelength\n-\n struct S;\n \n impl S {\n     static fn f() {}\n+    //~^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`,\n }\n-//~^^ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`,\n \n fn main() {}"}, {"sha": "21cb71df65751b087400640239ee223bf564cd05", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `static`\n-  --> $DIR/removed-syntax-static-fn.rs:6:5\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `static`\n+  --> $DIR/removed-syntax-static-fn.rs:4:5\n    |\n LL | impl S {\n-   |         - expected one of 11 possible tokens here\n+   |         - expected one of 10 possible tokens here\n LL |     static fn f() {}\n    |     ^^^^^^ unexpected token\n "}, {"sha": "3c42f24d5ff738e55f7232e8f4b68b9a83deec19", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,7 +1,8 @@\n // Private types and traits are not allowed in interfaces of associated types.\n // This test also ensures that the checks are performed even inside private modules.\n \n-#![feature(associated_type_defaults, existential_type)]\n+#![feature(associated_type_defaults)]\n+#![feature(type_alias_impl_trait)]\n \n mod m {\n     struct Priv;\n@@ -31,7 +32,7 @@ mod m {\n         type Alias1 = Priv;\n         //~^ ERROR private type `m::Priv` in public interface\n \n-        existential type Exist: PrivTr;\n+        type Exist = impl PrivTr;\n         //~^ ERROR private trait `m::PrivTr` in public interface\n         fn infer_exist() -> Self::Exist { Priv }\n     }"}, {"sha": "158862f9228cccf95ad08038ada914491a0b0780", "filename": "src/test/ui/privacy/private-in-public-assoc-ty.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-assoc-ty.stderr?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,5 +1,5 @@\n warning: private trait `m::PrivTr` in public interface (error E0445)\n-  --> $DIR/private-in-public-assoc-ty.rs:15:5\n+  --> $DIR/private-in-public-assoc-ty.rs:16:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -15,7 +15,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n warning: private type `m::Priv` in public interface (error E0446)\n-  --> $DIR/private-in-public-assoc-ty.rs:15:5\n+  --> $DIR/private-in-public-assoc-ty.rs:16:5\n    |\n LL | /     pub trait PubTr {\n LL | |\n@@ -30,7 +30,7 @@ LL | |     }\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:24:9\n+  --> $DIR/private-in-public-assoc-ty.rs:25:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -39,7 +39,7 @@ LL |         type Alias4 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0446]: private type `m::Priv` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:31:9\n+  --> $DIR/private-in-public-assoc-ty.rs:32:9\n    |\n LL |     struct Priv;\n    |     - `m::Priv` declared as private\n@@ -48,13 +48,13 @@ LL |         type Alias1 = Priv;\n    |         ^^^^^^^^^^^^^^^^^^^ can't leak private type\n \n error[E0445]: private trait `m::PrivTr` in public interface\n-  --> $DIR/private-in-public-assoc-ty.rs:34:9\n+  --> $DIR/private-in-public-assoc-ty.rs:35:9\n    |\n LL |     trait PrivTr {}\n    |     - `m::PrivTr` declared as private\n ...\n-LL |         existential type Exist: PrivTr;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n+LL |         type Exist = impl PrivTr;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "40bba720b0fa21afe69d72fe7d59202cc23b7c02", "filename": "src/test/ui/privacy/private-in-public-existential.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-existential.rs?ref=fc48541ab19cdd68a2b0228004e64d3cbb7a1ecb", "patch": "@@ -1,9 +1,9 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(existential_type)]\n+#![feature(type_alias_impl_trait)]\n #![deny(private_in_public)]\n \n-pub existential type Pub: Default;\n+pub type Pub = impl Default;\n \n #[derive(Default)]\n struct Priv;\n@@ -18,7 +18,7 @@ pub trait Trait {\n }\n \n impl Trait for u8 {\n-    existential type Pub: Default;\n+    type Pub = impl Default;\n     fn method() -> Self::Pub { Priv }\n }\n "}]}