{"sha": "87588a2afd9ca903366f0deaf84d805f34469384", "node_id": "C_kwDOAAsO6NoAKDg3NTg4YTJhZmQ5Y2E5MDMzNjZmMGRlYWY4NGQ4MDVmMzQ0NjkzODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T21:01:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T21:01:20Z"}, "message": "Auto merge of #99136 - CAD97:layout-faster, r=scottmcm\n\nTake advantage of known-valid-align in layout.rs\n\nAn attempt to improve perf by `@nnethercote's` approach suggested in #99117", "tree": {"sha": "5f90682c278f7c5ba82b04f0612282e1d9d8aa0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f90682c278f7c5ba82b04f0612282e1d9d8aa0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87588a2afd9ca903366f0deaf84d805f34469384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87588a2afd9ca903366f0deaf84d805f34469384", "html_url": "https://github.com/rust-lang/rust/commit/87588a2afd9ca903366f0deaf84d805f34469384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87588a2afd9ca903366f0deaf84d805f34469384/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c80dde43f992f3eb419899a34551b84c6301f8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80dde43f992f3eb419899a34551b84c6301f8e8", "html_url": "https://github.com/rust-lang/rust/commit/c80dde43f992f3eb419899a34551b84c6301f8e8"}, {"sha": "11694905b4c3073b2ce5a3de954139bfaa50681f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11694905b4c3073b2ce5a3de954139bfaa50681f", "html_url": "https://github.com/rust-lang/rust/commit/11694905b4c3073b2ce5a3de954139bfaa50681f"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "59ebe5fbe022776d76fa887b6d773d59aee80381", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/87588a2afd9ca903366f0deaf84d805f34469384/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87588a2afd9ca903366f0deaf84d805f34469384/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=87588a2afd9ca903366f0deaf84d805f34469384", "patch": "@@ -1,3 +1,9 @@\n+// Seemingly inconsequential code changes to this file can lead to measurable\n+// performance impact on compilation times, due at least in part to the fact\n+// that the layout code gets called from many instantiations of the various\n+// collections, resulting in having to optimize down excess IR multiple times.\n+// Your performance intuition is useless. Run perf.\n+\n use crate::cmp;\n use crate::fmt;\n use crate::mem::{self, ValidAlign};\n@@ -62,6 +68,13 @@ impl Layout {\n             return Err(LayoutError);\n         }\n \n+        // SAFETY: just checked that align is a power of two.\n+        Layout::from_size_valid_align(size, unsafe { ValidAlign::new_unchecked(align) })\n+    }\n+\n+    /// Internal helper constructor to skip revalidating alignment validity.\n+    #[inline]\n+    const fn from_size_valid_align(size: usize, align: ValidAlign) -> Result<Self, LayoutError> {\n         // (power-of-two implies align != 0.)\n \n         // Rounded up size is:\n@@ -76,13 +89,12 @@ impl Layout {\n         //\n         // Above implies that checking for summation overflow is both\n         // necessary and sufficient.\n-        if size > isize::MAX as usize - (align - 1) {\n+        if size > isize::MAX as usize - (align.as_nonzero().get() - 1) {\n             return Err(LayoutError);\n         }\n \n-        // SAFETY: the conditions for `from_size_align_unchecked` have been\n-        // checked above.\n-        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }\n+        // SAFETY: Layout::size invariants checked above.\n+        Ok(Layout { size, align })\n     }\n \n     /// Creates a layout, bypassing all checks.\n@@ -96,8 +108,8 @@ impl Layout {\n     #[must_use]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n-        // SAFETY: the caller must ensure that `align` is a power of two.\n-        Layout { size, align: unsafe { ValidAlign::new_unchecked(align) } }\n+        // SAFETY: the caller is required to uphold the preconditions.\n+        unsafe { Layout { size, align: ValidAlign::new_unchecked(align) } }\n     }\n \n     /// The minimum size in bytes for a memory block of this layout.\n@@ -126,10 +138,9 @@ impl Layout {\n     #[inline]\n     pub const fn new<T>() -> Self {\n         let (size, align) = size_align::<T>();\n-        // SAFETY: the align is guaranteed by Rust to be a power of two and\n-        // the size+align combo is guaranteed to fit in our address space. As a\n-        // result use the unchecked constructor here to avoid inserting code\n-        // that panics if it isn't optimized well enough.\n+        // SAFETY: if the type is instantiated, rustc already ensures that its\n+        // layout is valid. Use the unchecked constructor to avoid inserting a\n+        // panicking codepath that needs to be optimized out.\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n \n@@ -141,7 +152,6 @@ impl Layout {\n     #[inline]\n     pub fn for_value<T: ?Sized>(t: &T) -> Self {\n         let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));\n-        debug_assert!(Layout::from_size_align(size, align).is_ok());\n         // SAFETY: see rationale in `new` for why this is using the unsafe variant\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n@@ -176,7 +186,6 @@ impl Layout {\n     pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {\n         // SAFETY: we pass along the prerequisites of these functions to the caller\n         let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };\n-        debug_assert!(Layout::from_size_align(size, align).is_ok());\n         // SAFETY: see rationale in `new` for why this is using the unsafe variant\n         unsafe { Layout::from_size_align_unchecked(size, align) }\n     }\n@@ -280,8 +289,7 @@ impl Layout {\n         // > less than or equal to `isize::MAX`)\n         let new_size = self.size() + pad;\n \n-        // SAFETY: self.align is already known to be valid and new_size has been\n-        // padded already.\n+        // SAFETY: padded size is guaranteed to not exceed `isize::MAX`.\n         unsafe { Layout::from_size_align_unchecked(new_size, self.align()) }\n     }\n \n@@ -304,7 +312,7 @@ impl Layout {\n         let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_align(alloc_size, self.align()).map(|layout| (layout, padded_size))\n+        Layout::from_size_valid_align(alloc_size, self.align).map(|layout| (layout, padded_size))\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -355,14 +363,14 @@ impl Layout {\n     #[stable(feature = \"alloc_layout_manipulation\", since = \"1.44.0\")]\n     #[inline]\n     pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {\n-        let new_align = cmp::max(self.align(), next.align());\n+        let new_align = cmp::max(self.align, next.align);\n         let pad = self.padding_needed_for(next.align());\n \n         let offset = self.size().checked_add(pad).ok_or(LayoutError)?;\n         let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;\n \n         // The safe constructor is called here to enforce the isize size limit.\n-        let layout = Layout::from_size_align(new_size, new_align)?;\n+        let layout = Layout::from_size_valid_align(new_size, new_align)?;\n         Ok((layout, offset))\n     }\n \n@@ -383,7 +391,7 @@ impl Layout {\n     pub fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {\n         let size = self.size().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_align(size, self.align())\n+        Layout::from_size_valid_align(size, self.align)\n     }\n \n     /// Creates a layout describing the record for `self` followed by\n@@ -397,7 +405,7 @@ impl Layout {\n     pub fn extend_packed(&self, next: Self) -> Result<Self, LayoutError> {\n         let new_size = self.size().checked_add(next.size()).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_align(new_size, self.align())\n+        Layout::from_size_valid_align(new_size, self.align)\n     }\n \n     /// Creates a layout describing the record for a `[T; n]`.\n@@ -408,7 +416,7 @@ impl Layout {\n     pub fn array<T>(n: usize) -> Result<Self, LayoutError> {\n         let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;\n         // The safe constructor is called here to enforce the isize size limit.\n-        Layout::from_size_align(array_size, mem::align_of::<T>())\n+        Layout::from_size_valid_align(array_size, ValidAlign::of::<T>())\n     }\n }\n "}, {"sha": "4ce6d13cf9027be56fbacae7a81e504770a681b0", "filename": "library/core/src/mem/valid_align.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87588a2afd9ca903366f0deaf84d805f34469384/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87588a2afd9ca903366f0deaf84d805f34469384/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs?ref=87588a2afd9ca903366f0deaf84d805f34469384", "patch": "@@ -1,4 +1,5 @@\n use crate::convert::TryFrom;\n+use crate::intrinsics::assert_unsafe_precondition;\n use crate::num::NonZeroUsize;\n use crate::{cmp, fmt, hash, mem, num};\n \n@@ -26,7 +27,8 @@ impl ValidAlign {\n     /// It must *not* be zero.\n     #[inline]\n     pub(crate) const unsafe fn new_unchecked(align: usize) -> Self {\n-        debug_assert!(align.is_power_of_two());\n+        // SAFETY: Precondition passed to the caller.\n+        unsafe { assert_unsafe_precondition!(align.is_power_of_two()) };\n \n         // SAFETY: By precondition, this must be a power of two, and\n         // our variants encompass all possible powers of two.\n@@ -46,6 +48,13 @@ impl ValidAlign {\n     pub(crate) fn log2(self) -> u32 {\n         self.as_nonzero().trailing_zeros()\n     }\n+\n+    /// Returns the alignment for a type.\n+    #[inline]\n+    pub(crate) fn of<T>() -> Self {\n+        // SAFETY: rustc ensures that type alignment is always a power of two.\n+        unsafe { ValidAlign::new_unchecked(mem::align_of::<T>()) }\n+    }\n }\n \n impl fmt::Debug for ValidAlign {"}]}