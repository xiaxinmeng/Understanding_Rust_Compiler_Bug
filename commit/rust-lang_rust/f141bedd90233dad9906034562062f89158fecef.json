{"sha": "f141bedd90233dad9906034562062f89158fecef", "node_id": "C_kwDOAAsO6NoAKGYxNDFiZWRkOTAyMzNkYWQ5OTA2MDM0NTYyMDYyZjg5MTU4ZmVjZWY", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-17T12:48:04Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-12-17T12:48:04Z"}, "message": "Point to the tracking issue", "tree": {"sha": "34fa165476f906bef98153834778d9ad473c6cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34fa165476f906bef98153834778d9ad473c6cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f141bedd90233dad9906034562062f89158fecef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmG8hwQACgkQbQF6ltjm\nwvm6qA/6A4lYKOAZ78AmmIZWSRXa5yIaHcjiOh45/yATJ6w4w/XAl5mjYBnMynEX\nrcyv4uz5eN8Q3B4d2GKE4Jn4yJ/g8cK9FZYlIKsjwYyw2yY6KRSroVkXMfNazJpg\nAeJYxNsQX+pZ6Aqet6B9OWbNmqVI5KBl17SYHG0+j65JeU1/ED2+2folsQ1tolkC\nI41nk/pq4MfDAHkmlmuFHy0BGEVJiQFOOER/VpRiKYLEKj31MsQ1U4t10xo4p5BN\nbkZyvZaZyJZ5FGVnibQnJWAqbZHXpv0NdMbU+CTS8A8LaneJ0aqs/u9o+m1hYW+W\nZpx3TahbPx+Bh8O5ZcGFx3vKr6YluIwqpxDahZ/pSNNbLi9Yz0oCOcKFTl90Nggt\njAG7rjnohIe9NqvKO4QEzGEzalEHJau8bYnAsZ3feP29Xfnwp61QS6mOndOKIDfT\nQ3qc7i9qEo0EDghZT8D50/pJ7GGOwBo9fNRfkgFYUfo7qUakhgWScrDmWV4v2YG1\nGXu3UxlyUmZy1FodIRQkaf7OvtA8GdSTpivGIs+nc8LcPQrmMxvxpXx2reW7VflM\nZtJji9K3XDTKaWuKD6BuTOS38HRm0ILa245rxg506MB1UVCmu6D1jVe3dnme21Cb\nYag7PF4bj7w3KJ60cKvSz1MFLCMJDURL7Ccj8eYMZX23lvEFX/E=\n=lB4u\n-----END PGP SIGNATURE-----", "payload": "tree 34fa165476f906bef98153834778d9ad473c6cff\nparent 493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e\nauthor Deadbeef <ent3rm4n@gmail.com> 1639745284 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1639745284 +0800\n\nPoint to the tracking issue\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f141bedd90233dad9906034562062f89158fecef", "html_url": "https://github.com/rust-lang/rust/commit/f141bedd90233dad9906034562062f89158fecef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f141bedd90233dad9906034562062f89158fecef/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "url": "https://api.github.com/repos/rust-lang/rust/commits/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e", "html_url": "https://github.com/rust-lang/rust/commit/493cf0c6438d1b55ae3ebf2d407fc5e5e8e5698e"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "8969c6f617130225d1185b667cd8b3883249fea3", "filename": "library/core/src/option.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f141bedd90233dad9906034562062f89158fecef/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f141bedd90233dad9906034562062f89158fecef/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=f141bedd90233dad9906034562062f89158fecef", "patch": "@@ -589,7 +589,7 @@ impl<T> Option<T> {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"option_result_contains\", issue = \"62358\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn contains<U>(&self, x: &U) -> bool\n     where\n         U: ~const PartialEq<T>,\n@@ -661,7 +661,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn as_pin_ref(self: Pin<&Self>) -> Option<Pin<&T>> {\n         match Pin::get_ref(self).as_ref() {\n             // SAFETY: `x` is guaranteed to be pinned because it comes from `self`\n@@ -677,7 +677,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn as_pin_mut(self: Pin<&mut Self>) -> Option<Pin<&mut T>> {\n         // SAFETY: `get_unchecked_mut` is never used to move the `Option` inside `self`.\n         // `x` is guaranteed to be pinned because it comes from `self` which is pinned.\n@@ -775,7 +775,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn unwrap_or(self, default: T) -> T\n     where\n         T: ~const Drop,\n@@ -797,7 +797,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn unwrap_or_else<F>(self, f: F) -> T\n     where\n         F: ~const FnOnce() -> T,\n@@ -832,7 +832,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[track_caller]\n     #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const unsafe fn unwrap_unchecked(self) -> T {\n         debug_assert!(self.is_some());\n         match self {\n@@ -863,7 +863,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn map<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> U,\n@@ -892,7 +892,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"result_option_inspect\", issue = \"91345\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn inspect<F>(self, f: F) -> Self\n     where\n         F: ~const FnOnce(&T),\n@@ -925,7 +925,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn map_or<U, F>(self, default: U, f: F) -> U\n     where\n         F: ~const FnOnce(T) -> U,\n@@ -954,7 +954,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U\n     where\n         D: ~const FnOnce() -> U,\n@@ -991,7 +991,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn ok_or<E>(self, err: E) -> Result<T, E>\n     where\n         E: ~const Drop,\n@@ -1020,7 +1020,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>\n     where\n         F: ~const FnOnce() -> E,\n@@ -1102,7 +1102,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn and<U>(self, optb: Option<U>) -> Option<U>\n     where\n         T: ~const Drop,\n@@ -1132,7 +1132,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn and_then<U, F>(self, f: F) -> Option<U>\n     where\n         F: ~const FnOnce(T) -> Option<U>,\n@@ -1170,7 +1170,7 @@ impl<T> Option<T> {\n     /// [`Some(t)`]: Some\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn filter<P>(self, predicate: P) -> Self\n     where\n         T: ~const Drop,\n@@ -1214,7 +1214,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn or(self, optb: Option<T>) -> Option<T>\n     where\n         T: ~const Drop,\n@@ -1240,7 +1240,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn or_else<F>(self, f: F) -> Option<T>\n     where\n         F: ~const FnOnce() -> Option<T>,\n@@ -1275,7 +1275,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_xor\", since = \"1.37.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn xor(self, optb: Option<T>) -> Option<T>\n     where\n         T: ~const Drop,\n@@ -1313,7 +1313,7 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to set a value, consider assignment instead\"]\n     #[inline]\n     #[stable(feature = \"option_insert\", since = \"1.53.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn insert(&mut self, value: T) -> &mut T\n     where\n         T: ~const Drop,\n@@ -1346,7 +1346,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn get_or_insert(&mut self, value: T) -> &mut T\n     where\n         T: ~const Drop,\n@@ -1381,7 +1381,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"option_get_or_insert_default\", issue = \"82901\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn get_or_insert_default(&mut self) -> &mut T\n     where\n         T: ~const Default,\n@@ -1413,7 +1413,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"option_entry\", since = \"1.20.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T\n     where\n         F: ~const FnOnce() -> T,\n@@ -1497,7 +1497,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip(z), None);\n     /// ```\n     #[stable(feature = \"option_zip_option\", since = \"1.46.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn zip<U>(self, other: Option<U>) -> Option<(T, U)>\n     where\n         T: ~const Drop,\n@@ -1538,7 +1538,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.zip_with(None, Point::new), None);\n     /// ```\n     #[unstable(feature = \"option_zip\", issue = \"70086\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn zip_with<U, F, R>(self, other: Option<U>, f: F) -> Option<R>\n     where\n         F: ~const FnOnce(T, U) -> R,\n@@ -1621,7 +1621,7 @@ impl<T: Copy> Option<&mut T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"copied\", since = \"1.35.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn copied(self) -> Option<T> {\n         match self {\n             Some(&mut t) => Some(t),\n@@ -1713,7 +1713,7 @@ impl<T: Default> Option<T> {\n     /// [`FromStr`]: crate::str::FromStr\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn unwrap_or_default(self) -> T\n     where\n         T: ~const Default,\n@@ -1741,7 +1741,7 @@ impl<T: Deref> Option<T> {\n     /// assert_eq!(x.as_deref(), None);\n     /// ```\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn as_deref(&self) -> Option<&T::Target>\n     where\n         T: ~const Deref,\n@@ -1769,7 +1769,7 @@ impl<T: DerefMut> Option<T> {\n     /// }), Some(\"HEY\".to_owned().as_mut_str()));\n     /// ```\n     #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n     pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n     where\n         T: ~const DerefMut,"}]}