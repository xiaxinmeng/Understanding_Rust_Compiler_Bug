{"sha": "2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGJmMWRiNTQ5ZDFlNzBhZjUzYjdmZjhiOGFmYjgwMTg3ODI3ZTI=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-01-22T17:06:26Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-02-03T15:54:29Z"}, "message": "Stabilize the Wake trait\n\nCo-Authored-By: Ashley Mannix <kodraus@hey.com>", "tree": {"sha": "8e6967ef1e7d649741a381b9e15ea2707cf9fd32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6967ef1e7d649741a381b9e15ea2707cf9fd32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "html_url": "https://github.com/rust-lang/rust/commit/2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad11e2e25919b75ebbc36d7910f2a1126a7e873", "html_url": "https://github.com/rust-lang/rust/commit/6ad11e2e25919b75ebbc36d7910f2a1126a7e873"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "ab7611ae071e7bdb91926ba4b5dd892a333518fe", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#![stable(feature = \"wake_trait\", since = \"1.51.0\")]\n //! Types and Traits for working with asynchronous tasks.\n use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n@@ -16,26 +16,78 @@ use crate::sync::Arc;\n /// to wake up a task is stored in an [`Arc`]. Some executors (especially\n /// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+///\n+/// [arc]: ../../std/sync/struct.Arc.html\n+///\n+/// # Examples\n+///\n+/// A basic `block_on` function that takes a future and runs it to completion on\n+/// the current thread.\n+///\n+/// **Note:** This example trades correctness for simplicity. In order to prevent\n+/// deadlocks, production-grade implementations will also need to handle\n+/// intermediate calls to `thread::unpark` as well as nested invocations.\n+///\n+/// ```rust\n+/// use std::future::Future;\n+/// use std::sync::Arc;\n+/// use std::task::{Context, Poll, Wake};\n+/// use std::thread::{self, Thread};\n+///\n+/// /// A waker that wakes up the current thread when called.\n+/// struct ThreadWaker(Thread);\n+///\n+/// impl Wake for ThreadWaker {\n+///     fn wake(self: Arc<Self>) {\n+///         self.0.unpark();\n+///     }\n+/// }\n+///\n+/// /// Run a future to completion on the current thread.\n+/// fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+///     // Pin the future so it can be polled.\n+///     let mut fut = Box::pin(fut);\n+///\n+///     // Create a new context to be passed to the future.\n+///     let t = thread::current();\n+///     let waker = Arc::new(ThreadWaker(t)).into();\n+///     let mut cx = Context::from_waker(&waker);\n+///\n+///     // Run the future to completion.\n+///     loop {\n+///         match fut.as_mut().poll(&mut cx) {\n+///             Poll::Ready(res) => return res,\n+///             Poll::Pending => thread::park(),\n+///         }\n+///     }\n+/// }\n+///\n+/// block_on(async {\n+///     println!(\"Hi from inside a future!\");\n+/// });\n+/// ```\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n pub trait Wake {\n     /// Wake this task.\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     fn wake(self: Arc<Self>);\n \n     /// Wake this task without consuming the waker.\n     ///\n     /// If an executor supports a cheaper way to wake without consuming the\n     /// waker, it should override this method. By default, it clones the\n-    /// [`Arc`] and calls `wake` on the clone.\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    /// [`Arc`] and calls [`wake`] on the clone.\n+    ///\n+    /// [`wake`]: Wake::wake\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     fn wake_by_ref(self: &Arc<Self>) {\n         self.clone().wake();\n     }\n }\n \n #[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n #[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n         // SAFETY: This is safe because raw_waker safely constructs\n@@ -46,7 +98,7 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n \n #[cfg_attr(bootstrap, allow(rustc::ineffective_unstable_trait_impl))]\n #[cfg_attr(not(bootstrap), allow(ineffective_unstable_trait_impl))]\n-#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+#[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n     fn from(waker: Arc<W>) -> RawWaker {\n         raw_waker(waker)"}, {"sha": "961cff661e3ba803b807a42cd2b8cc2194241219", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "patch": "@@ -329,7 +329,6 @@\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]\n-#![feature(wake_trait)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n \n@@ -508,7 +507,7 @@ pub mod task {\n     pub use core::task::*;\n \n     #[doc(inline)]\n-    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    #[stable(feature = \"wake_trait\", since = \"1.51.0\")]\n     pub use alloc::task::*;\n }\n "}, {"sha": "c43ce2cadba046672c01a7e664572adae43c80a0", "filename": "src/test/ui/async-await/issue-73137.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8bf1db549d1e70af53b7ff8b8afb80187827e2/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73137.rs?ref=2c8bf1db549d1e70af53b7ff8b8afb80187827e2", "patch": "@@ -4,7 +4,6 @@\n // edition:2018\n \n #![allow(dead_code)]\n-#![feature(wake_trait)]\n use std::future::Future;\n use std::task::{Waker, Wake, Context};\n use std::sync::Arc;"}]}