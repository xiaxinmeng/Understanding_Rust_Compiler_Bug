{"sha": "6534b4d4ce87940954b017bd27dc4e5fa7e59703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MzRiNGQ0Y2U4Nzk0MDk1NGIwMTdiZDI3ZGM0ZTVmYTdlNTk3MDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T00:10:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T00:10:19Z"}, "message": "auto merge of #8115 : bjz/rust/num-traits, r=brson\n\nContinues #4819", "tree": {"sha": "5aef498a121173d659609cde51bbd088c11c72e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aef498a121173d659609cde51bbd088c11c72e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6534b4d4ce87940954b017bd27dc4e5fa7e59703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6534b4d4ce87940954b017bd27dc4e5fa7e59703", "html_url": "https://github.com/rust-lang/rust/commit/6534b4d4ce87940954b017bd27dc4e5fa7e59703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6534b4d4ce87940954b017bd27dc4e5fa7e59703/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912d806d32b65f79d268a55dc1fcf01fc70b78aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/912d806d32b65f79d268a55dc1fcf01fc70b78aa", "html_url": "https://github.com/rust-lang/rust/commit/912d806d32b65f79d268a55dc1fcf01fc70b78aa"}, {"sha": "4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b", "html_url": "https://github.com/rust-lang/rust/commit/4f65fc7ef2cbf7dcd768da60bd13cbf0ee45fe1b"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "8b61a8a8734b9fb8f8df49193bc51db5756c5e56", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6534b4d4ce87940954b017bd27dc4e5fa7e59703/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6534b4d4ce87940954b017bd27dc4e5fa7e59703/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=6534b4d4ce87940954b017bd27dc4e5fa7e59703", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An interface for numeric types\n+//! Numeric traits and functions for generic mathematics.\n+//!\n+//! These are implemented for the primitive numeric types in `std::{u8, u16,\n+//! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`.\n \n #[allow(missing_doc)];\n \n@@ -19,9 +22,7 @@ use option::Option;\n \n pub mod strconv;\n \n-///\n /// The base trait for numeric types\n-///\n pub trait Num: Eq + Zero + One\n              + Neg<Self>\n              + Add<Self,Self>\n@@ -45,18 +46,23 @@ pub trait Orderable: Ord {\n     fn clamp(&self, mn: &Self, mx: &Self) -> Self;\n }\n \n-#[inline(always)] pub fn min<T: Orderable>(a: T, b: T) -> T { a.min(&b) }\n-#[inline(always)] pub fn max<T: Orderable>(a: T, b: T) -> T { a.max(&b) }\n+#[inline(always)] pub fn min<T: Orderable>(x: T, y: T) -> T { x.min(&y) }\n+#[inline(always)] pub fn max<T: Orderable>(x: T, y: T) -> T { x.max(&y) }\n+#[inline(always)] pub fn clamp<T: Orderable>(value: T, mn: T, mx: T) -> T { value.clamp(&mn, &mx) }\n \n pub trait Zero {\n     fn zero() -> Self;      // FIXME (#5527): This should be an associated constant\n     fn is_zero(&self) -> bool;\n }\n \n+#[inline(always)] pub fn zero<T: Zero>() -> T { Zero::zero() }\n+\n pub trait One {\n     fn one() -> Self;       // FIXME (#5527): This should be an associated constant\n }\n \n+#[inline(always)] pub fn one<T: One>() -> T { One::one() }\n+\n pub trait Signed: Num\n                 + Neg<Self> {\n     fn abs(&self) -> Self;\n@@ -68,6 +74,7 @@ pub trait Signed: Num\n }\n \n #[inline(always)] pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+#[inline(always)] pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(&y) }\n #[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n \n pub trait Unsigned: Num {}\n@@ -90,6 +97,9 @@ pub trait Integer: Num\n     fn is_odd(&self) -> bool;\n }\n \n+#[inline(always)] pub fn gcd<T: Integer>(x: T, y: T) -> T { x.gcd(&y) }\n+#[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }\n+\n pub trait Round {\n     fn floor(&self) -> Self;\n     fn ceil(&self) -> Self;\n@@ -113,15 +123,21 @@ pub trait Algebraic {\n     fn hypot(&self, other: &Self) -> Self;\n }\n \n+#[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n #[inline(always)] pub fn sqrt<T: Algebraic>(value: T) -> T { value.sqrt() }\n+#[inline(always)] pub fn rsqrt<T: Algebraic>(value: T) -> T { value.rsqrt() }\n+#[inline(always)] pub fn cbrt<T: Algebraic>(value: T) -> T { value.cbrt() }\n+#[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n \n pub trait Trigonometric {\n     fn sin(&self) -> Self;\n     fn cos(&self) -> Self;\n     fn tan(&self) -> Self;\n+\n     fn asin(&self) -> Self;\n     fn acos(&self) -> Self;\n     fn atan(&self) -> Self;\n+\n     fn atan2(&self, other: &Self) -> Self;\n     fn sin_cos(&self) -> (Self, Self);\n }\n@@ -135,10 +151,12 @@ pub trait Trigonometric {\n #[inline(always)] pub fn atan<T: Trigonometric>(value: T) -> T { value.atan() }\n \n #[inline(always)] pub fn atan2<T: Trigonometric>(x: T, y: T) -> T { x.atan2(&y) }\n+#[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n \n pub trait Exponential {\n     fn exp(&self) -> Self;\n     fn exp2(&self) -> Self;\n+\n     fn ln(&self) -> Self;\n     fn log(&self, base: &Self) -> Self;\n     fn log2(&self) -> Self;\n@@ -157,6 +175,7 @@ pub trait Hyperbolic: Exponential {\n     fn sinh(&self) -> Self;\n     fn cosh(&self) -> Self;\n     fn tanh(&self) -> Self;\n+\n     fn asinh(&self) -> Self;\n     fn acosh(&self) -> Self;\n     fn atanh(&self) -> Self;\n@@ -170,9 +189,7 @@ pub trait Hyperbolic: Exponential {\n #[inline(always)] pub fn acosh<T: Hyperbolic>(value: T) -> T { value.acosh() }\n #[inline(always)] pub fn atanh<T: Hyperbolic>(value: T) -> T { value.atanh() }\n \n-///\n /// Defines constants and methods common to real numbers\n-///\n pub trait Real: Signed\n               + Fractional\n               + Algebraic\n@@ -203,9 +220,7 @@ pub trait Real: Signed\n     fn to_radians(&self) -> Self;\n }\n \n-///\n /// Methods that are harder to implement and not commonly used.\n-///\n pub trait RealExt: Real {\n     // FIXME (#5527): usages of `int` should be replaced with an associated\n     // integer type once these are implemented\n@@ -223,9 +238,7 @@ pub trait RealExt: Real {\n     fn yn(&self, n: int) -> Self;\n }\n \n-///\n /// Collects the bitwise operators under one trait.\n-///\n pub trait Bitwise: Not<Self>\n                  + BitAnd<Self,Self>\n                  + BitOr<Self,Self>\n@@ -245,11 +258,9 @@ pub trait Bounded {\n     fn max_value() -> Self;\n }\n \n-///\n /// Specifies the available operations common to all of Rust's core numeric primitives.\n /// These may not always make sense from a purely mathematical point of view, but\n /// may be useful for systems programming.\n-///\n pub trait Primitive: Num\n                    + NumCast\n                    + Bounded\n@@ -264,17 +275,13 @@ pub trait Primitive: Num\n     fn bytes() -> uint;\n }\n \n-///\n /// A collection of traits relevant to primitive signed and unsigned integers\n-///\n pub trait Int: Integer\n              + Primitive\n              + Bitwise\n              + BitCount {}\n \n-///\n /// Used for representing the classification of floating point numbers\n-///\n #[deriving(Eq)]\n pub enum FPCategory {\n     /// \"Not a Number\", often obtained by dividing by zero\n@@ -289,9 +296,7 @@ pub enum FPCategory {\n     FPNormal,\n }\n \n-///\n /// Primitive floating point numbers\n-///\n pub trait Float: Real\n                + Signed\n                + Primitive\n@@ -325,7 +330,10 @@ pub trait Float: Real\n     fn next_after(&self, other: Self) -> Self;\n }\n \n-///\n+#[inline(always)] pub fn exp_m1<T: Float>(value: T) -> T { value.exp_m1() }\n+#[inline(always)] pub fn ln_1p<T: Float>(value: T) -> T { value.ln_1p() }\n+#[inline(always)] pub fn mul_add<T: Float>(a: T, b: T, c: T) -> T { a.mul_add(b, c) }\n+\n /// Cast from one machine scalar to another\n ///\n /// # Example\n@@ -340,9 +348,7 @@ pub fn cast<T:NumCast,U:NumCast>(n: T) -> U {\n     NumCast::from(n)\n }\n \n-///\n /// An interface for casting between machine scalars\n-///\n pub trait NumCast {\n     fn from<T:NumCast>(n: T) -> Self;\n \n@@ -414,7 +420,6 @@ pub trait FromStrRadix {\n     pub fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n-///\n /// Calculates a power to a given radix, optimized for uint `pow` and `radix`.\n ///\n /// Returns `radix^pow` as `T`."}]}