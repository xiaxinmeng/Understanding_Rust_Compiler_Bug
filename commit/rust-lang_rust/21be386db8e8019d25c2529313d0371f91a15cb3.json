{"sha": "21be386db8e8019d25c2529313d0371f91a15cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmUzODZkYjhlODAxOWQyNWMyNTI5MzEzZDAzNzFmOTFhMTVjYjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-12T11:23:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-12T11:23:11Z"}, "message": "Merge #2809\n\n2809: Qualify paths in 'fill match arms' assist r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "b4221236837f69190f133291979e0121a69563c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4221236837f69190f133291979e0121a69563c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21be386db8e8019d25c2529313d0371f91a15cb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGwGfCRBK7hj4Ov3rIwAAdHIIAELSM/Q78nzBPdqV839OYXMF\nZIRbR6jHrxneyxBvtpSpvzMFfldHvG713jRgp33egqo9vEcEtRhLjEIBRbHcCAXR\nlXlypZMqbFqWt5HLr0rGodk55BtrWdEWRLfDANintfXcJuipujhTxI+FasSSj9Al\nn9F9SfcmuChH3nE4w5m296ubj0ZiQE02rUk+bJ5pkDTu7FekPfMTO9F+dEJuV3LM\nNalNzmVdlvkBADEhHUEcRE86yWHtsTVdNPQBfw0uoT57pNpDmyrrXyJ+6Xbr4t0X\n5xrNg67UU9yflLH7y/B8wOe+FVo3HThhiNfLo774pldNSFXLhWkLxoUDE1LlG5o=\n=xPer\n-----END PGP SIGNATURE-----\n", "payload": "tree b4221236837f69190f133291979e0121a69563c9\nparent 86d2af9f7b3f6af2ea9e4eca2584aa501b60aa14\nparent 2c11a9b42deca002bcd4a669dcbb3ab972b939d8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578828191 +0000\ncommitter GitHub <noreply@github.com> 1578828191 +0000\n\nMerge #2809\n\n2809: Qualify paths in 'fill match arms' assist r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21be386db8e8019d25c2529313d0371f91a15cb3", "html_url": "https://github.com/rust-lang/rust/commit/21be386db8e8019d25c2529313d0371f91a15cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21be386db8e8019d25c2529313d0371f91a15cb3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d2af9f7b3f6af2ea9e4eca2584aa501b60aa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d2af9f7b3f6af2ea9e4eca2584aa501b60aa14", "html_url": "https://github.com/rust-lang/rust/commit/86d2af9f7b3f6af2ea9e4eca2584aa501b60aa14"}, {"sha": "2c11a9b42deca002bcd4a669dcbb3ab972b939d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c11a9b42deca002bcd4a669dcbb3ab972b939d8", "html_url": "https://github.com/rust-lang/rust/commit/2c11a9b42deca002bcd4a669dcbb3ab972b939d8"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "99d80998c20c1c34f4f6fafe3448f8a42ea58926", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=21be386db8e8019d25c2529313d0371f91a15cb3", "patch": "@@ -46,19 +46,24 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n     };\n \n     let expr = match_expr.expr()?;\n-    let enum_def = {\n+    let (enum_def, module) = {\n         let analyzer = ctx.source_analyzer(expr.syntax(), None);\n-        resolve_enum_def(ctx.db, &analyzer, &expr)?\n+        (resolve_enum_def(ctx.db, &analyzer, &expr)?, analyzer.module()?)\n     };\n-    let variant_list = enum_def.variant_list()?;\n+    let variants = enum_def.variants(ctx.db);\n+    if variants.is_empty() {\n+        return None;\n+    }\n+\n+    let db = ctx.db;\n \n     ctx.add_assist(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n         let indent_level = IndentLevel::from_node(match_arm_list.syntax());\n \n         let new_arm_list = {\n-            let variants = variant_list.variants();\n             let arms = variants\n-                .filter_map(build_pat)\n+                .into_iter()\n+                .filter_map(|variant| build_pat(db, module, variant))\n                 .map(|pat| make::match_arm(iter::once(pat), make::expr_unit()));\n             indent_level.increase_indent(make::match_arm_list(arms))\n         };\n@@ -80,23 +85,25 @@ fn resolve_enum_def(\n     db: &impl HirDatabase,\n     analyzer: &hir::SourceAnalyzer,\n     expr: &ast::Expr,\n-) -> Option<ast::EnumDef> {\n+) -> Option<hir::Enum> {\n     let expr_ty = analyzer.type_of(db, &expr)?;\n \n-    let res = expr_ty.autoderef(db).find_map(|ty| match ty.as_adt() {\n-        Some(Adt::Enum(e)) => Some(e.source(db).value),\n+    let result = expr_ty.autoderef(db).find_map(|ty| match ty.as_adt() {\n+        Some(Adt::Enum(e)) => Some(e),\n         _ => None,\n     });\n-    res\n+    result\n }\n \n-fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n-    let path = make::path_qualified(\n-        make::path_from_name_ref(make::name_ref(&var.parent_enum().name()?.syntax().to_string())),\n-        make::name_ref(&var.name()?.syntax().to_string()),\n-    );\n+fn build_pat(\n+    db: &impl HirDatabase,\n+    module: hir::Module,\n+    var: hir::EnumVariant,\n+) -> Option<ast::Pat> {\n+    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, var.into())?);\n \n-    let pat: ast::Pat = match var.kind() {\n+    // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n+    let pat: ast::Pat = match var.source(db).value.kind() {\n         ast::StructKind::Tuple(field_list) => {\n             let pats =\n                 iter::repeat(make::placeholder_pat().into()).take(field_list.fields().count());\n@@ -106,7 +113,7 @@ fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n             let pats = field_list.fields().map(|f| make::bind_pat(f.name().unwrap()).into());\n             make::record_pat(path, pats).into()\n         }\n-        ast::StructKind::Unit => make::path_pat(path).into(),\n+        ast::StructKind::Unit => make::path_pat(path),\n     };\n \n     Some(pat)\n@@ -252,4 +259,32 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fill_match_arms_qualifies_path() {\n+        check_assist(\n+            fill_match_arms,\n+            r#\"\n+            mod foo { pub enum E { X, Y } }\n+            use foo::E::X;\n+\n+            fn main() {\n+                match X {\n+                    <|>\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            mod foo { pub enum E { X, Y } }\n+            use foo::E::X;\n+\n+            fn main() {\n+                match <|>X {\n+                    X => (),\n+                    foo::E::Y => (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}, {"sha": "eac2903d1483aad12207c6b267b3f93f158984eb", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=21be386db8e8019d25c2529313d0371f91a15cb3", "patch": "@@ -173,7 +173,7 @@ impl<'a, DB: HirDatabase> AstTransform<'a> for QualifyPaths<'a, DB> {\n     }\n }\n \n-fn path_to_ast(path: hir::ModPath) -> ast::Path {\n+pub(crate) fn path_to_ast(path: hir::ModPath) -> ast::Path {\n     let parse = ast::SourceFile::parse(&path.to_string());\n     parse.tree().syntax().descendants().find_map(ast::Path::cast).unwrap()\n }"}, {"sha": "eef45090d84728c5a9e45b730f07c3234ac9c492", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21be386db8e8019d25c2529313d0371f91a15cb3/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=21be386db8e8019d25c2529313d0371f91a15cb3", "patch": "@@ -117,10 +117,11 @@ pub fn record_pat(path: ast::Path, pats: impl IntoIterator<Item = ast::Pat>) ->\n     }\n }\n \n-pub fn path_pat(path: ast::Path) -> ast::PathPat {\n+/// Returns a `BindPat` if the path has just one segment, a `PathPat` otherwise.\n+pub fn path_pat(path: ast::Path) -> ast::Pat {\n     let path_str = path.syntax().text().to_string();\n     return from_text(path_str.as_str());\n-    fn from_text(text: &str) -> ast::PathPat {\n+    fn from_text(text: &str) -> ast::Pat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }"}]}