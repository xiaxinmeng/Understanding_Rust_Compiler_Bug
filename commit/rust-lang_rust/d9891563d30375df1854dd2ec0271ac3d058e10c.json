{"sha": "d9891563d30375df1854dd2ec0271ac3d058e10c", "node_id": "C_kwDOAAsO6NoAKGQ5ODkxNTYzZDMwMzc1ZGYxODU0ZGQyZWMwMjcxYWMzZDA1OGUxMGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-02T06:57:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-05T18:05:44Z"}, "message": "Merge conflicts and rebase onto master", "tree": {"sha": "2efc7b561945f04a321015cad1caf2226f19101a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2efc7b561945f04a321015cad1caf2226f19101a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9891563d30375df1854dd2ec0271ac3d058e10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9891563d30375df1854dd2ec0271ac3d058e10c", "html_url": "https://github.com/rust-lang/rust/commit/d9891563d30375df1854dd2ec0271ac3d058e10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9891563d30375df1854dd2ec0271ac3d058e10c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29dccfe9e498f41169c120e515494cdd9b5b3e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dccfe9e498f41169c120e515494cdd9b5b3e11", "html_url": "https://github.com/rust-lang/rust/commit/29dccfe9e498f41169c120e515494cdd9b5b3e11"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "151c8e6d8986ab58f0baaebb17bcb07ca6748563", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -1,4 +1,6 @@\n use crate::marker::Destruct;\n+#[cfg(not(bootstrap))]\n+use crate::marker::Tuple;\n \n /// Struct representing a closure with mutably borrowed data.\n ///\n@@ -44,6 +46,7 @@ impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData,\n \n macro_rules! impl_fn_mut_tuple {\n     ($($var:ident)*) => {\n+        #[cfg(bootstrap)]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n@@ -56,6 +59,7 @@ macro_rules! impl_fn_mut_tuple {\n             self.call_mut(args)\n             }\n         }\n+        #[cfg(bootstrap)]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n             FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n@@ -68,6 +72,32 @@ macro_rules! impl_fn_mut_tuple {\n                 (self.func)(($($var),*), args)\n             }\n         }\n+        #[cfg(not(bootstrap))]\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n+            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+        {\n+            type Output = ClosureReturnValue;\n+\n+            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+            self.call_mut(args)\n+            }\n+        }\n+        #[cfg(not(bootstrap))]\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n+            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+        {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+                #[allow(non_snake_case)]\n+                let ($($var),*) = &mut self.data;\n+                (self.func)(($($var),*), args)\n+            }\n+        }\n     };\n }\n impl_fn_mut_tuple!(A);"}, {"sha": "8d4b0a7ccacdb68527c3b7128446af63e35e5e20", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -75,7 +75,6 @@ use crate::marker::Tuple;\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Fn<Args>: FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -245,7 +244,6 @@ pub trait Fn<Args: Tuple>: FnMut<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnMut<Args>: FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -415,7 +413,6 @@ pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n #[must_use = \"closures are lazy and do nothing unless called\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[lang = \"fn_once_output\"]"}, {"sha": "79009c5cb6c07554db45234ef522bac5d3e0b27a", "filename": "src/test/ui/function-pointer/unsized-ret.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -1,7 +1,8 @@\n #![feature(fn_traits)]\n #![feature(unboxed_closures)]\n+#![feature(tuple_trait)]\n \n-fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n     let y = (f.unwrap()).call(t);\n }\n "}, {"sha": "40bf7a3898acc866f7cfc6fc29e432d6b7834adf", "filename": "src/test/ui/function-pointer/unsized-ret.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/unsized-ret.rs:9:27\n+  --> $DIR/unsized-ret.rs:10:27\n    |\n LL |     foo::<fn() -> str, _>(None, ());\n    |     --------------------- ^^^^ doesn't have a size known at compile-time\n@@ -9,13 +9,13 @@ LL |     foo::<fn() -> str, _>(None, ());\n    = help: within `fn() -> str`, the trait `Sized` is not implemented for `str`\n    = note: required because it appears within the type `fn() -> str`\n note: required by a bound in `foo`\n-  --> $DIR/unsized-ret.rs:4:11\n+  --> $DIR/unsized-ret.rs:5:11\n    |\n-LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+LL | fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n    |           ^^^^^ required by this bound in `foo`\n \n error[E0277]: the size for values of type `(dyn std::fmt::Display + 'a)` cannot be known at compilation time\n-  --> $DIR/unsized-ret.rs:12:66\n+  --> $DIR/unsized-ret.rs:13:66\n    |\n LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&(),));\n    |     ------------------------------------------------------------ ^^^^ doesn't have a size known at compile-time\n@@ -25,9 +25,9 @@ LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&()\n    = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n    = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`\n note: required by a bound in `foo`\n-  --> $DIR/unsized-ret.rs:4:11\n+  --> $DIR/unsized-ret.rs:5:11\n    |\n-LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+LL | fn foo<F: Fn<T>, T:std::marker::Tuple>(f: Option<F>, t: T) {\n    |           ^^^^^ required by this bound in `foo`\n \n error: aborting due to 2 previous errors"}, {"sha": "546ad84eeee7bf25abbb3c1caa44db0dc7f3b224", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -94,8 +94,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:17:4\n@@ -105,8 +105,8 @@ LL | G: fn(),\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:27\n@@ -116,8 +116,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#fn` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:3:41\n@@ -127,8 +127,8 @@ LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n    |\n   ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n-LL | pub trait Fn<Args>: FnMut<Args> {\n-   | ------------------------------- similarly named trait `Fn` defined here\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   | -------------------------------------- similarly named trait `Fn` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n   --> $DIR/kw-in-trait-bounds.rs:24:10"}, {"sha": "d2e486002272c1c340ceb40bf27d2f7d23f6173c", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.rs?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -1,8 +1,8 @@\n #![feature(unboxed_closures)]\n \n fn a<F: Fn<usize>>(f: F) {}\n+//~^ ERROR type parameter to bare `Fn` trait must be a tuple\n \n fn main() {\n     a(|_: usize| {});\n-    //~^ ERROR mismatched types\n }"}, {"sha": "1c18eb0fc4905bbf8c1a41c8acd8cb546cf48bab", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9891563d30375df1854dd2ec0271ac3d058e10c/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=d9891563d30375df1854dd2ec0271ac3d058e10c", "patch": "@@ -1,17 +1,15 @@\n-error[E0308]: mismatched types\n-  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n-   |\n-LL |     a(|_: usize| {});\n-   |     ^ types differ\n-   |\n-   = note: expected trait `Fn<usize>`\n-              found trait `Fn<(usize,)>`\n-note: required by a bound in `a`\n+error[E0059]: type parameter to bare `Fn` trait must be a tuple\n   --> $DIR/non-tupled-arg-mismatch.rs:3:9\n    |\n LL | fn a<F: Fn<usize>>(f: F) {}\n-   |         ^^^^^^^^^ required by this bound in `a`\n+   |         ^^^^^^^^^ the trait `Tuple` is not implemented for `usize`\n+   |\n+note: required by a bound in `Fn`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   |\n+LL | pub trait Fn<Args: Tuple>: FnMut<Args> {\n+   |                    ^^^^^ required by this bound in `Fn`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0059`."}]}