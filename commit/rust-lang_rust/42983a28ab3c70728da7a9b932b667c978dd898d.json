{"sha": "42983a28ab3c70728da7a9b932b667c978dd898d", "node_id": "C_kwDOAAsO6NoAKDQyOTgzYTI4YWIzYzcwNzI4ZGE3YTliOTMyYjY2N2M5NzhkZDg5OGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T22:14:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T22:14:21Z"}, "message": "Auto merge of #90067 - JohnTitor:rollup-afrjulz, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #86479 (Automatic exponential formatting in Debug)\n - #87404 (Add support for artifact size profiling)\n - #87769 (Alloc features cleanup)\n - #88789 (remove unnecessary bound on Zip specialization impl)\n - #88860 (Deduplicate panic_fmt)\n - #90009 (Make more `From` impls `const` (libcore))\n - #90018 (Fix rustdoc UI for very long type names)\n - #90025 (Revert #86011 to fix an incorrect bound check)\n - #90036 (Remove border-bottom from most docblocks.)\n - #90060 (Update RELEASES.md)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "742eb3809563aa26b83accf52d93675dff5d3e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742eb3809563aa26b83accf52d93675dff5d3e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42983a28ab3c70728da7a9b932b667c978dd898d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42983a28ab3c70728da7a9b932b667c978dd898d", "html_url": "https://github.com/rust-lang/rust/commit/42983a28ab3c70728da7a9b932b667c978dd898d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42983a28ab3c70728da7a9b932b667c978dd898d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1af55d19c7a9189374d89472f97dc119659bb67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1af55d19c7a9189374d89472f97dc119659bb67e", "html_url": "https://github.com/rust-lang/rust/commit/1af55d19c7a9189374d89472f97dc119659bb67e"}, {"sha": "e54ebe91ddffaac92654007290aef7b5b909638c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54ebe91ddffaac92654007290aef7b5b909638c", "html_url": "https://github.com/rust-lang/rust/commit/e54ebe91ddffaac92654007290aef7b5b909638c"}], "stats": {"total": 1004, "additions": 637, "deletions": 367}, "files": [{"sha": "aaa709e50f60dd088ad9f123f0989650da96b08c", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -2143,6 +2143,20 @@ dependencies = [\n  \"smallvec\",\n ]\n \n+[[package]]\n+name = \"measureme\"\n+version = \"10.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bd460fad6e55ca82fa0cd9dab0d315294188fd9ec6efbf4105e5635d4872ef9c\"\n+dependencies = [\n+ \"log\",\n+ \"memmap2\",\n+ \"parking_lot\",\n+ \"perf-event-open-sys\",\n+ \"rustc-hash\",\n+ \"smallvec\",\n+]\n+\n [[package]]\n name = \"memchr\"\n version = \"2.4.1\"\n@@ -2247,7 +2261,7 @@ dependencies = [\n  \"hex 0.4.2\",\n  \"libc\",\n  \"log\",\n- \"measureme\",\n+ \"measureme 9.1.2\",\n  \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n  \"rustc_version 0.4.0\",\n@@ -3235,7 +3249,7 @@ dependencies = [\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 9.1.2\",\n  \"memmap2\",\n  \"parking_lot\",\n  \"rustc-ap-rustc_graphviz\",\n@@ -3674,7 +3688,7 @@ dependencies = [\n  \"bitflags\",\n  \"cstr\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"rustc-demangle\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n@@ -3767,7 +3781,7 @@ dependencies = [\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"memmap2\",\n  \"parking_lot\",\n  \"rustc-hash\",\n@@ -4292,7 +4306,7 @@ dependencies = [\n name = \"rustc_query_impl\"\n version = \"0.0.0\"\n dependencies = [\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"rustc-rayon-core\",\n  \"rustc_ast\",\n  \"rustc_data_structures\","}, {"sha": "f1584224656ae0f29e95184455ab424d32dd0ed6", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -77,7 +77,7 @@ Cargo\n - [Cargo supports specifying a minimum supported Rust version in Cargo.toml.][`rust-version`]\n   This has no effect at present on dependency version selection.\n   We encourage crates to specify their minimum supported Rust version, and we encourage CI systems\n-  that support Rust code to include a crate's specified minimum version in the text matrix for that\n+  that support Rust code to include a crate's specified minimum version in the test matrix for that\n   crate by default.\n \n Compatibility notes"}, {"sha": "5f3f533447532c5ffcac8a4b0964dd25356c3f6b", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -11,7 +11,7 @@ doctest = false\n bitflags = \"1.0\"\n cstr = \"0.2\"\n libc = \"0.2\"\n-measureme = \"9.1.0\"\n+measureme = \"10.0.0\"\n snap = \"1\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "8efe3eb868b941d48318863742aaeadec93964e8", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -72,9 +72,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n             return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fmt()\n-            || Some(def_id) == self.tcx.lang_items().begin_panic_fmt()\n-        {\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n             // For panic_fmt, call const_panic_fmt instead.\n             if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n                 return Ok(Some("}, {"sha": "58d0f1a3ad88ebaf13eaae87686acb9ce5fc21da", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -79,7 +79,6 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().panic_display()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_fmt()\n-        || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n /// Returns `true` if this `DefId` points to one of the lang items that will be handled differently"}, {"sha": "e3395df35908c847c1c83f6fa5501483a828ece0", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -23,7 +23,7 @@ rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n-measureme = \"9.1.0\"\n+measureme = \"10.0.0\"\n libc = \"0.2\"\n stacker = \"0.1.14\"\n tempfile = \"3.2\""}, {"sha": "c21939209fc3bfecb7fcea268f8d0900273402ea", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -110,12 +110,14 @@ bitflags::bitflags! {\n         const FUNCTION_ARGS       = 1 << 6;\n         const LLVM                = 1 << 7;\n         const INCR_RESULT_HASHING = 1 << 8;\n+        const ARTIFACT_SIZES = 1 << 9;\n \n         const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n                         Self::QUERY_PROVIDERS.bits |\n                         Self::QUERY_BLOCKED.bits |\n                         Self::INCR_CACHE_LOADS.bits |\n-                        Self::INCR_RESULT_HASHING.bits;\n+                        Self::INCR_RESULT_HASHING.bits |\n+                        Self::ARTIFACT_SIZES.bits;\n \n         const ARGS = Self::QUERY_KEYS.bits | Self::FUNCTION_ARGS.bits;\n     }\n@@ -136,6 +138,7 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"args\", EventFilter::ARGS),\n     (\"llvm\", EventFilter::LLVM),\n     (\"incr-result-hashing\", EventFilter::INCR_RESULT_HASHING),\n+    (\"artifact-sizes\", EventFilter::ARTIFACT_SIZES),\n ];\n \n /// Something that uniquely identifies a query invocation.\n@@ -285,6 +288,33 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    /// Record the size of an artifact that the compiler produces\n+    ///\n+    /// `artifact_kind` is the class of artifact (e.g., query_cache, object_file, etc.)\n+    /// `artifact_name` is an identifier to the specific artifact being stored (usually a filename)\n+    #[inline(always)]\n+    pub fn artifact_size<A>(&self, artifact_kind: &str, artifact_name: A, size: u64)\n+    where\n+        A: Borrow<str> + Into<String>,\n+    {\n+        drop(self.exec(EventFilter::ARTIFACT_SIZES, |profiler| {\n+            let builder = EventIdBuilder::new(&profiler.profiler);\n+            let event_label = profiler.get_or_alloc_cached_string(artifact_kind);\n+            let event_arg = profiler.get_or_alloc_cached_string(artifact_name);\n+            let event_id = builder.from_label_and_arg(event_label, event_arg);\n+            let thread_id = get_thread_id();\n+\n+            profiler.profiler.record_integer_event(\n+                profiler.artifact_size_event_kind,\n+                event_id,\n+                thread_id,\n+                size,\n+            );\n+\n+            TimingGuard::none()\n+        }))\n+    }\n+\n     #[inline(always)]\n     pub fn generic_activity_with_args(\n         &self,\n@@ -372,7 +402,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = std::thread::current().id().as_u64().get() as u32;\n+            let thread_id = get_thread_id();\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -425,6 +455,7 @@ pub struct SelfProfiler {\n     incremental_result_hashing_event_kind: StringId,\n     query_blocked_event_kind: StringId,\n     query_cache_hit_event_kind: StringId,\n+    artifact_size_event_kind: StringId,\n }\n \n impl SelfProfiler {\n@@ -447,6 +478,7 @@ impl SelfProfiler {\n             profiler.alloc_string(\"IncrementalResultHashing\");\n         let query_blocked_event_kind = profiler.alloc_string(\"QueryBlocked\");\n         let query_cache_hit_event_kind = profiler.alloc_string(\"QueryCacheHit\");\n+        let artifact_size_event_kind = profiler.alloc_string(\"ArtifactSize\");\n \n         let mut event_filter_mask = EventFilter::empty();\n \n@@ -491,6 +523,7 @@ impl SelfProfiler {\n             incremental_result_hashing_event_kind,\n             query_blocked_event_kind,\n             query_cache_hit_event_kind,\n+            artifact_size_event_kind,\n         })\n     }\n \n@@ -561,7 +594,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = std::thread::current().id().as_u64().get() as u32;\n+        let thread_id = get_thread_id();\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);\n@@ -655,6 +688,10 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n     format!(\"{:.3}\", dur.as_secs_f64())\n }\n \n+fn get_thread_id() -> u32 {\n+    std::thread::current().id().as_u64().get() as u32\n+}\n+\n // Memory reporting\n cfg_if! {\n     if #[cfg(windows)] {"}, {"sha": "97d4123138e8fa846e6255feec3545b3bcfd3da0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -292,7 +292,6 @@ language_item_table! {\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n-    BeginPanicFmt,           sym::begin_panic_fmt,     begin_panic_fmt,            Target::Fn,             GenericRequirement::None;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);"}, {"sha": "392c5bdc15ad204472ec07f3d6cced7028d3bf53", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -95,6 +95,12 @@ where\n         return;\n     }\n \n+    sess.prof.artifact_size(\n+        &name.replace(' ', \"_\"),\n+        path_buf.file_name().unwrap().to_string_lossy(),\n+        encoder.position() as u64,\n+    );\n+\n     debug!(\"save: data written to disk successfully\");\n }\n "}, {"sha": "814581563896e3663f6347f391457bcf057819fb", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-measureme = \"9.0.0\"\n+measureme = \"10.0.0\"\n rustc-rayon-core = \"0.3.1\"\n tracing = \"0.1\"\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "47197a1e492a3d5901105c3894beeddac96cf6d5", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -222,7 +222,7 @@ impl<K: DepKind> EncoderState<K> {\n         index\n     }\n \n-    fn finish(self) -> FileEncodeResult {\n+    fn finish(self, profiler: &SelfProfilerRef) -> FileEncodeResult {\n         let Self { mut encoder, total_node_count, total_edge_count, result, stats: _ } = self;\n         let () = result?;\n \n@@ -235,7 +235,11 @@ impl<K: DepKind> EncoderState<K> {\n         IntEncodedWithFixedSize(edge_count).encode(&mut encoder)?;\n         debug!(\"position: {:?}\", encoder.position());\n         // Drop the encoder so that nothing is written after the counts.\n-        encoder.flush()\n+        let result = encoder.flush();\n+        // FIXME(rylev): we hardcode the dep graph file name so we don't need a dependency on\n+        // rustc_incremental just for that.\n+        profiler.artifact_size(\"dep_graph\", \"dep-graph.bin\", encoder.position() as u64);\n+        result\n     }\n }\n \n@@ -332,6 +336,6 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n \n     pub fn finish(self, profiler: &SelfProfilerRef) -> FileEncodeResult {\n         let _prof_timer = profiler.generic_activity(\"incr_comp_encode_dep_graph\");\n-        self.status.into_inner().finish()\n+        self.status.into_inner().finish(profiler)\n     }\n }"}, {"sha": "059b5dc51756ec4cefbf240d1169a8f2604f5e38", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1283,7 +1283,7 @@ options! {\n         \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm\"),\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],"}, {"sha": "c25bd9bfa80df876d5bae8bfdf0a93d44d8ca81d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -355,7 +355,6 @@ symbols! {\n         await_macro,\n         bang,\n         begin_panic,\n-        begin_panic_fmt,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,"}, {"sha": "24474e163b9daf23586c3d24e2efb063f652c596", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -64,16 +64,16 @@ impl<'tcx> Bounds<'tcx> {\n             })\n         });\n \n-        self.region_bounds\n-            .iter()\n-            .map(|&(region_bound, span)| {\n+        sized_predicate\n+            .into_iter()\n+            .chain(self.region_bounds.iter().map(|&(region_bound, span)| {\n                 (\n                     region_bound\n                         .map_bound(|region_bound| ty::OutlivesPredicate(param_ty, region_bound))\n                         .to_predicate(tcx),\n                     span,\n                 )\n-            })\n+            }))\n             .chain(self.trait_bounds.iter().map(|&(bound_trait_ref, span, constness)| {\n                 let predicate = bound_trait_ref.with_constness(constness).to_predicate(tcx);\n                 (predicate, span)\n@@ -83,7 +83,6 @@ impl<'tcx> Bounds<'tcx> {\n                     .iter()\n                     .map(|&(projection, span)| (projection.to_predicate(tcx), span)),\n             )\n-            .chain(sized_predicate.into_iter())\n             .collect()\n     }\n }"}, {"sha": "285d7755c0689c69d817439a65a0a3795650caee", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 46, "deletions": 43, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -80,87 +80,90 @@\n )]\n #![no_std]\n #![needs_allocator]\n+//\n+// Lints:\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![warn(deprecated_in_future)]\n-#![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n+#![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n-#![feature(rustc_allow_const_fn_unstable)]\n-#![cfg_attr(not(test), feature(generator_trait))]\n-#![cfg_attr(test, feature(test))]\n-#![cfg_attr(test, feature(new_uninit))]\n+//\n+// Library features:\n+#![feature(alloc_layout_extra)]\n #![feature(allocator_api)]\n #![feature(array_chunks)]\n #![feature(array_methods)]\n #![feature(array_windows)]\n-#![feature(allow_internal_unstable)]\n-#![feature(arbitrary_self_types)]\n #![feature(async_stream)]\n-#![feature(box_patterns)]\n-#![feature(box_syntax)]\n-#![feature(cfg_sanitize)]\n-#![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![cfg_attr(not(no_global_oom_handling), feature(const_btree_new))]\n-#![feature(const_fn_trait_bound)]\n-#![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n-#![feature(const_trait_impl)]\n-#![feature(destructuring_assignment)]\n-#![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n-#![feature(dropck_eyepatch)]\n+#![feature(dispatch_from_dyn)]\n #![feature(exact_size_is_empty)]\n-#![feature(exclusive_range_pattern)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n-#![feature(fundamental)]\n #![feature(inplace_iteration)]\n-// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n-// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n-// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n-// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n-#![feature(intra_doc_pointers)]\n #![feature(iter_advance_by)]\n #![feature(iter_zip)]\n-#![feature(lang_items)]\n #![feature(layout_for_ptr)]\n-#![feature(negative_impls)]\n-#![feature(never_type)]\n-#![feature(nll)]\n+#![feature(maybe_uninit_extra)]\n+#![feature(maybe_uninit_slice)]\n+#![cfg_attr(test, feature(new_uninit))]\n #![feature(nonnull_slice_from_raw_parts)]\n-#![feature(auto_traits)]\n #![feature(option_result_unwrap_unchecked)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n-#![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n-#![feature(min_specialization)]\n #![feature(set_ptr_value)]\n+#![feature(slice_group_by)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]\n #![feature(slice_range)]\n-#![feature(staged_api)]\n #![feature(str_internals)]\n #![feature(trusted_len)]\n-#![feature(unboxed_closures)]\n+#![feature(trusted_random_access)]\n+#![feature(try_trait_v2)]\n #![feature(unicode_internals)]\n #![feature(unsize)]\n-#![feature(unsized_fn_params)]\n+//\n+// Language features:\n #![feature(allocator_internals)]\n-#![feature(slice_partition_dedup)]\n-#![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n-#![feature(alloc_layout_extra)]\n-#![feature(trusted_random_access)]\n-#![feature(try_trait_v2)]\n+#![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n-#![feature(slice_group_by)]\n-#![feature(decl_macro)]\n+#![feature(box_syntax)]\n+#![feature(cfg_sanitize)]\n+#![feature(cfg_target_has_atomic)]\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+#![feature(destructuring_assignment)]\n+#![feature(dropck_eyepatch)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(fundamental)]\n+#![cfg_attr(not(test), feature(generator_trait))]\n+#![feature(lang_items)]\n+#![feature(min_specialization)]\n+#![feature(negative_impls)]\n+#![feature(never_type)]\n+#![feature(nll)] // Not necessary, but here to test the `nll` feature.\n+#![feature(rustc_allow_const_fn_unstable)]\n+#![feature(rustc_attrs)]\n+#![feature(staged_api)]\n+#![cfg_attr(test, feature(test))]\n+#![feature(unboxed_closures)]\n+#![feature(unsized_fn_params)]\n+//\n+// Rustdoc features:\n #![feature(doc_cfg)]\n #![cfg_attr(not(bootstrap), feature(doc_cfg_hide))]\n-// Allow testing this library\n+// Technically, this is a bug in rustdoc: rustdoc sees the documentation on `#[lang = slice_alloc]`\n+// blocks is for `&[T]`, which also has documentation using this feature in `core`, and gets mad\n+// that the feature-gate isn't enabled. Ideally, it wouldn't check for the feature gate for docs\n+// from other crates, but since this can only appear for lang items, it doesn't seem worth fixing.\n+#![feature(intra_doc_pointers)]\n \n+// Allow testing this library\n #[cfg(test)]\n #[macro_use]\n extern crate std;"}, {"sha": "b27c36baf37c5f44f5ee1a3034e65e0a7262b887", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -125,7 +125,8 @@ impl TryFromSliceError {\n }\n \n #[stable(feature = \"try_from_slice_error\", since = \"1.36.0\")]\n-impl From<Infallible> for TryFromSliceError {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<Infallible> for TryFromSliceError {\n     fn from(x: Infallible) -> TryFromSliceError {\n         match x {}\n     }"}, {"sha": "ed464700cd3579764d72bc0c684614f3405970f1", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -308,7 +308,8 @@ impl<T: Ord + Copy> Ord for Cell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for Cell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Cell<T> {\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -1236,7 +1237,8 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for RefCell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for RefCell<T> {\n     fn from(t: T) -> RefCell<T> {\n         RefCell::new(t)\n     }\n@@ -1976,7 +1978,8 @@ impl<T: Default> Default for UnsafeCell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for UnsafeCell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for UnsafeCell<T> {\n     fn from(t: T) -> UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }"}, {"sha": "8fc6b1af92452919824a518383133eee11a30876", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -97,7 +97,8 @@ pub unsafe fn from_u32_unchecked(i: u32) -> char {\n }\n \n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n-impl From<char> for u32 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u32 {\n     /// Converts a [`char`] into a [`u32`].\n     ///\n     /// # Examples\n@@ -116,7 +117,8 @@ impl From<char> for u32 {\n }\n \n #[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n-impl From<char> for u64 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u64 {\n     /// Converts a [`char`] into a [`u64`].\n     ///\n     /// # Examples\n@@ -137,7 +139,8 @@ impl From<char> for u64 {\n }\n \n #[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n-impl From<char> for u128 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u128 {\n     /// Converts a [`char`] into a [`u128`].\n     ///\n     /// # Examples\n@@ -176,7 +179,8 @@ impl From<char> for u128 {\n /// for a superset of Windows-1252 that fills the remaining blanks with corresponding\n /// C0 and C1 control codes.\n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n-impl From<u8> for char {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<u8> for char {\n     /// Converts a [`u8`] into a [`char`].\n     ///\n     /// # Examples"}, {"sha": "5aa53deee343d55820c19526dfe76d081184ece0", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -545,7 +545,8 @@ where\n \n // From (and thus Into) is reflexive\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> From<T> for T {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for T {\n     fn from(t: T) -> T {\n         t\n     }\n@@ -560,7 +561,8 @@ impl<T> From<T> for T {\n #[allow(unused_attributes)] // FIXME(#58633): do a principled fix instead.\n #[rustc_reservation_impl = \"permitting this impl would forbid us from adding \\\n                             `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\"]\n-impl<T> From<!> for T {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<!> for T {\n     fn from(t: !) -> T {\n         t\n     }\n@@ -726,7 +728,8 @@ impl Ord for Infallible {\n }\n \n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl From<!> for Infallible {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<!> for Infallible {\n     fn from(x: !) -> Self {\n         x\n     }"}, {"sha": "89d5fac30d3576bc347c25a2e73f2a578b54aec1", "filename": "library/core/src/fmt/float.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Ffloat.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -3,6 +3,26 @@ use crate::mem::MaybeUninit;\n use crate::num::flt2dec;\n use crate::num::fmt as numfmt;\n \n+#[doc(hidden)]\n+trait GeneralFormat: PartialOrd {\n+    /// Determines if a value should use exponential based on its magnitude, given the precondition\n+    /// that it will not be rounded any further before it is displayed.\n+    fn already_rounded_value_should_use_exponential(&self) -> bool;\n+}\n+\n+macro_rules! impl_general_format {\n+    ($($t:ident)*) => {\n+        $(impl GeneralFormat for $t {\n+            fn already_rounded_value_should_use_exponential(&self) -> bool {\n+                let abs = $t::abs_private(*self);\n+                (abs != 0.0 && abs < 1e-4) || abs >= 1e+16\n+            }\n+        })*\n+    }\n+}\n+\n+impl_general_format! { f32 f64 }\n+\n // Don't inline this so callers don't use the stack space this function\n // requires unless they have to.\n #[inline(never)]\n@@ -54,8 +74,7 @@ where\n     fmt.pad_formatted_parts(&formatted)\n }\n \n-// Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter<'_>, num: &T, min_precision: usize) -> Result\n+fn float_to_decimal_display<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n where\n     T: flt2dec::DecodableFloat,\n {\n@@ -68,6 +87,7 @@ where\n     if let Some(precision) = fmt.precision {\n         float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n+        let min_precision = 0;\n         float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n     }\n }\n@@ -145,19 +165,44 @@ where\n     }\n }\n \n+fn float_to_general_debug<T>(fmt: &mut Formatter<'_>, num: &T) -> Result\n+where\n+    T: flt2dec::DecodableFloat + GeneralFormat,\n+{\n+    let force_sign = fmt.sign_plus();\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true => flt2dec::Sign::MinusPlus,\n+    };\n+\n+    if let Some(precision) = fmt.precision {\n+        // this behavior of {:.PREC?} predates exponential formatting for {:?}\n+        float_to_decimal_common_exact(fmt, num, sign, precision)\n+    } else {\n+        // since there is no precision, there will be no rounding\n+        if num.already_rounded_value_should_use_exponential() {\n+            let upper = false;\n+            float_to_exponential_common_shortest(fmt, num, sign, upper)\n+        } else {\n+            let min_precision = 1;\n+            float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n+        }\n+    }\n+}\n+\n macro_rules! floating {\n     ($ty:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 1)\n+                float_to_general_debug(fmt, self)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n             fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {\n-                float_to_decimal_common(fmt, self, 0)\n+                float_to_decimal_display(fmt, self)\n             }\n         }\n "}, {"sha": "4b89bc363268dd82f99c90233ca4e88dbc48f072", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -427,13 +427,9 @@ where\n     }\n }\n \n+// Since SourceIter forwards the left hand side we do the same here\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-// Limited to Item: Copy since interaction between Zip's use of TrustedRandomAccess\n-// and Drop implementation of the source is unclear.\n-//\n-// An additional method returning the number of times the source has been logically advanced\n-// (without calling next()) would be needed to properly drop the remainder of the source.\n-unsafe impl<A: InPlaceIterable, B: Iterator> InPlaceIterable for Zip<A, B> where A::Item: Copy {}\n+unsafe impl<A: InPlaceIterable, B: Iterator> InPlaceIterable for Zip<A, B> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Debug, B: Debug> Debug for Zip<A, B> {"}, {"sha": "2b8a5f3cbf34528912eb9f0c98f81bf302909824", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -74,7 +74,7 @@ impl<T: PartialEq> PartialEq for OnceCell<T> {\n impl<T: Eq> Eq for OnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T> From<T> for OnceCell<T> {\n+impl<T> const From<T> for OnceCell<T> {\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "2af61a0748236dd639168e7cd5cd3dcc0a9f8e77", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -29,14 +29,15 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl From<Infallible> for TryFromIntError {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<Infallible> for TryFromIntError {\n     fn from(x: Infallible) -> TryFromIntError {\n         match x {}\n     }\n }\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n-impl From<!> for TryFromIntError {\n+impl const From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         // Match rather than coerce to make sure that code like\n         // `From<Infallible> for TryFromIntError` above will keep working"}, {"sha": "83a922ae34891b969d5616ce1ed20d30e60bae2a", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -449,7 +449,7 @@ impl f32 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f32 {\n+    pub(crate) const fn abs_private(self) -> f32 {\n         f32::from_bits(self.to_bits() & 0x7fff_ffff)\n     }\n "}, {"sha": "4267260eea38cbbb6cc294da4fd7692ffc68344f", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -448,7 +448,7 @@ impl f64 {\n     // private use internally.\n     #[inline]\n     #[rustc_const_unstable(feature = \"const_float_classify\", issue = \"72505\")]\n-    const fn abs_private(self) -> f64 {\n+    pub(crate) const fn abs_private(self) -> f64 {\n         f64::from_bits(self.to_bits() & 0x7fff_ffff_ffff_ffff)\n     }\n "}, {"sha": "d28474c29232c1dd084187a87eaa882caf844425", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -82,7 +82,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"from_nonzero\", since = \"1.31.0\")]\n-            impl From<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+            impl const From<$Ty> for $Int {\n                 #[doc = concat!(\"Converts a `\", stringify!($Ty), \"` into an `\", stringify!($Int), \"`\")]\n                 #[inline]\n                 fn from(nonzero: $Ty) -> Self {"}, {"sha": "f4ce7d1dfb334e9c973c5d381baba3033b897f6f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1723,7 +1723,8 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n }\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n-impl<T> From<T> for Option<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Option<T> {\n     /// Moves `val` into a new [`Some`].\n     ///\n     /// # Examples\n@@ -1739,7 +1740,8 @@ impl<T> From<T> for Option<T> {\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n-impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<'a, T> const From<&'a Option<T>> for Option<&'a T> {\n     /// Converts from `&Option<T>` to `Option<&T>`.\n     ///\n     /// # Examples\n@@ -1766,7 +1768,8 @@ impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n-impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<'a, T> const From<&'a mut Option<T>> for Option<&'a mut T> {\n     /// Converts from `&mut Option<T>` to `Option<&mut T>`\n     ///\n     /// # Examples\n@@ -2052,7 +2055,7 @@ impl<T> ops::Try for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::FromResidual for Option<T> {\n+impl<T> const ops::FromResidual for Option<T> {\n     #[inline]\n     fn from_residual(residual: Option<convert::Infallible>) -> Self {\n         match residual {"}, {"sha": "649bc3e44ad21e9462079b2d54324d7ce93c9cde", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -121,7 +121,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n+        // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "a12447acf7ec3c3221b92f563369ed033d71d71b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -76,8 +76,15 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-/// The underlying implementation of libcore's `panic!` macro when formatting is used.\n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n #[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]"}, {"sha": "8bae66ca007a74bb68613d6163dacc3213bca307", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -698,7 +698,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n         // SAFETY: A Unique pointer cannot be null, so the conditions for\n@@ -708,7 +709,8 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<T: ?Sized> From<&mut T> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null.\n@@ -717,7 +719,8 @@ impl<T: ?Sized> From<&mut T> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<T: ?Sized> From<&T> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<&T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &T) -> Self {\n         // SAFETY: A reference cannot be null, so the conditions for"}, {"sha": "f6eb48f2967c86f7c0a4c9e7d2f873b5e19febda", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -176,7 +176,7 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<&mut T> for Unique<T> {\n+impl<T: ?Sized> const From<&mut T> for Unique<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null"}, {"sha": "0915dcffe6ef0792522e1c193cdb5455eebcb7e8", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1273,7 +1273,8 @@ impl<T> AtomicPtr<T> {\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"atomic_bool_from\", since = \"1.24.0\")]\n-impl From<bool> for AtomicBool {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<bool> for AtomicBool {\n     /// Converts a `bool` into an `AtomicBool`.\n     ///\n     /// # Examples\n@@ -1291,7 +1292,8 @@ impl From<bool> for AtomicBool {\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n-impl<T> From<*mut T> for AtomicPtr<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<*mut T> for AtomicPtr<T> {\n     #[inline]\n     fn from(p: *mut T) -> Self {\n         Self::new(p)\n@@ -1363,7 +1365,8 @@ macro_rules! atomic_int {\n         }\n \n         #[$stable_from]\n-        impl From<$int_type> for $atomic_type {\n+        #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+        impl const From<$int_type> for $atomic_type {\n             #[doc = concat!(\"Converts an `\", stringify!($int_type), \"` into an `\", stringify!($atomic_type), \"`.\")]\n             #[inline]\n             fn from(v: $int_type) -> Self { Self::new(v) }"}, {"sha": "72a030617ad8ad387059f03450c43c73172428e6", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -241,7 +241,8 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T> From<T> for Poll<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Poll<T> {\n     /// Convert to a `Ready` variant.\n     ///\n     /// # Example"}, {"sha": "7f8672f035417bb2c0e8ae51a319bfc60c6d0a2f", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -220,3 +220,10 @@ fn atomic_compare_exchange() {\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n }\n+\n+#[test]\n+fn atomic_const_from() {\n+    const _ATOMIC_U8: AtomicU8 = AtomicU8::from(1);\n+    const _ATOMIC_BOOL: AtomicBool = AtomicBool::from(true);\n+    const _ATOMIC_PTR: AtomicPtr<u32> = AtomicPtr::from(core::ptr::null_mut());\n+}"}, {"sha": "4707cc7076ec0fa8038fb84659f1e76474ec1742", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -465,4 +465,13 @@ fn const_cells() {\n \n     const CELL: Cell<i32> = Cell::new(3);\n     const _: i32 = CELL.into_inner();\n+\n+    const UNSAFE_CELL_FROM: UnsafeCell<i32> = UnsafeCell::from(3);\n+    const _: i32 = UNSAFE_CELL.into_inner();\n+\n+    const REF_CELL_FROM: RefCell<i32> = RefCell::from(3);\n+    const _: i32 = REF_CELL.into_inner();\n+\n+    const CELL_FROM: Cell<i32> = Cell::from(3);\n+    const _: i32 = CELL.into_inner();\n }"}, {"sha": "6e434cf1a8d0f825e0449ee6db6de63b0779f947", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -5,6 +5,8 @@ use std::{char, str};\n #[test]\n fn test_convert() {\n     assert_eq!(u32::from('a'), 0x61);\n+    assert_eq!(u64::from('b'), 0x62);\n+    assert_eq!(u128::from('c'), 0x63);\n     assert_eq!(char::from(b'\\0'), '\\0');\n     assert_eq!(char::from(b'a'), 'a');\n     assert_eq!(char::from(b'\\xFF'), '\\u{FF}');\n@@ -19,6 +21,16 @@ fn test_convert() {\n     assert!(char::try_from(0xFFFF_FFFF_u32).is_err());\n }\n \n+#[test]\n+const fn test_convert_const() {\n+    assert!(u32::from('a') == 0x61);\n+    assert!(u64::from('b') == 0x62);\n+    assert!(u128::from('c') == 0x63);\n+    assert!(char::from(b'\\0') == '\\0');\n+    assert!(char::from(b'a') == 'a');\n+    assert!(char::from(b'\\xFF') == '\\u{FF}');\n+}\n+\n #[test]\n fn test_from_str() {\n     assert_eq!(char::from_str(\"a\").unwrap(), 'a');"}, {"sha": "47a7400f76ef95ecfb73146e2f295aa649ac3907", "filename": "library/core/tests/fmt/float.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffmt%2Ffloat.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -12,6 +12,16 @@ fn test_format_f64() {\n     assert_eq!(\"1.23456789E3\", format!(\"{:E}\", 1234.56789f64));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f64));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f64));\n+\n+    let high_cutoff = 1e16_f64;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f64::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f64));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f64));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f64));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f64));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f64));\n }\n \n #[test]\n@@ -28,4 +38,18 @@ fn test_format_f32() {\n     assert_eq!(\"1.2345679E3\", format!(\"{:E}\", 1234.56789f32));\n     assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f32));\n     assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f32));\n+\n+    let high_cutoff = 1e16_f32;\n+    assert_eq!(\"1e16\", format!(\"{:?}\", high_cutoff));\n+    assert_eq!(\"-1e16\", format!(\"{:?}\", -high_cutoff));\n+    assert!(!is_exponential(&format!(\"{:?}\", high_cutoff * (1.0 - 2.0 * f32::EPSILON))));\n+    assert_eq!(\"-3.0\", format!(\"{:?}\", -3f32));\n+    assert_eq!(\"0.0001\", format!(\"{:?}\", 0.0001f32));\n+    assert_eq!(\"9e-5\", format!(\"{:?}\", 0.00009f32));\n+    assert_eq!(\"1234567.9\", format!(\"{:.1?}\", 1234567.89f32));\n+    assert_eq!(\"1234.6\", format!(\"{:.1?}\", 1234.56789f32));\n+}\n+\n+fn is_exponential(s: &str) -> bool {\n+    s.contains(\"e\") || s.contains(\"E\")\n }"}, {"sha": "064024ab87b281243bec34b3351f1df415b208af", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -47,6 +47,12 @@ fn unsync_once_cell_drop_empty() {\n     drop(x);\n }\n \n+#[test]\n+const fn once_cell_const() {\n+    let _once_cell: OnceCell<u32> = OnceCell::new();\n+    let _once_cell: OnceCell<u32> = OnceCell::from(32);\n+}\n+\n #[test]\n fn clone() {\n     let s = OnceCell::new();"}, {"sha": "ab0295c63143d3eaa3cce8b622b5d8b6fc49fc72", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -9,6 +9,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_convert)]\n #![feature(const_maybe_uninit_assume_init)]\n #![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_ptr_read)]"}, {"sha": "4817d86ca6eb0991c153c13b211b2653c943eb92", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -214,6 +214,9 @@ fn nonzero_const() {\n \n     const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n     assert!(ONE.is_some());\n+\n+    const FROM_NONZERO: u8 = u8::from(NONZERO);\n+    assert_eq!(FROM_NONZERO, 5);\n }\n \n #[test]"}, {"sha": "cd07d6c52c2ade49cb03bc1da73590431dc7bad9", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -358,10 +358,17 @@ fn option_const() {\n     // test that the methods of `Option` are usable in a const context\n \n     const OPTION: Option<usize> = Some(32);\n+    assert_eq!(OPTION, Some(32));\n+\n+    const OPTION_FROM: Option<usize> = Option::from(32);\n+    assert_eq!(OPTION_FROM, Some(32));\n \n     const REF: Option<&usize> = OPTION.as_ref();\n     assert_eq!(REF, Some(&32));\n \n+    const REF_FROM: Option<&usize> = Option::from(&OPTION);\n+    assert_eq!(REF_FROM, Some(&32));\n+\n     const IS_SOME: bool = OPTION.is_some();\n     assert!(IS_SOME);\n \n@@ -388,6 +395,14 @@ const fn option_const_mut() {\n             None => unreachable!(),\n         }\n     }\n+\n+    {\n+        let as_mut: Option<&mut usize> = Option::from(&mut option);\n+        match as_mut {\n+            Some(v) => *v = 42,\n+            None => unreachable!(),\n+        }\n+    }\n }\n \n #[test]"}, {"sha": "c0605b2f4121c098244f40dfd1cb1282d9c17b20", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -25,7 +25,7 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     }),\n }\n "}, {"sha": "56646b72dd54f089cdc13e379a3fcb4e846a331f", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -437,31 +437,9 @@ pub fn panicking() -> bool {\n     !panic_count::count_is_zero()\n }\n \n-/// The entry point for panicking with a formatted message.\n-///\n-/// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `panic!()` has as low an impact\n-/// on (e.g.) the inlining of other functions as possible), by moving\n-/// the actual formatting into this shared place.\n-#[unstable(feature = \"libstd_sys_internals\", reason = \"used by the panic! macro\", issue = \"none\")]\n-#[cold]\n-// If panic_immediate_abort, inline the abort call,\n-// otherwise avoid inlining because of it is cold path.\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), track_caller)]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(test), lang = \"begin_panic_fmt\")]\n-pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        intrinsics::abort()\n-    }\n-\n-    let info = PanicInfo::internal_constructor(Some(msg), Location::caller());\n-    begin_panic_handler(&info)\n-}\n-\n /// Entry point of panics from the libcore crate (`panic_impl` lang item).\n-#[cfg_attr(not(test), panic_handler)]\n+#[cfg(not(test))]\n+#[panic_handler]\n pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,"}, {"sha": "121c214780d2d5e5ba371de3cd49c167ef4fbf6b", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -19,8 +19,8 @@\n use crate::ffi::CString;\n \n // Re-export some of our utilities which are expected by other crates.\n-pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n-pub use core::panicking::panic_display;\n+pub use crate::panicking::{begin_panic, panic_count};\n+pub use core::panicking::{panic_display, panic_fmt};\n \n use crate::sync::Once;\n use crate::sys;"}, {"sha": "58cd1018c316fa986dcc6c9db45be634459c146e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 153, "deletions": 122, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -482,24 +482,26 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         + name.as_str().len()\n         + generics_len;\n \n-    wrap_item(w, \"fn\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        w.reserve(header_len);\n-        write!(\n-            w,\n-            \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-             {name}{generics}{decl}{notable_traits}{where_clause}\",\n-            vis = vis,\n-            constness = constness,\n-            asyncness = asyncness,\n-            unsafety = unsafety,\n-            abi = abi,\n-            name = name,\n-            generics = f.generics.print(cx),\n-            where_clause = print_where_clause(&f.generics, cx, 0, true),\n-            decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n-            notable_traits = notable_traits_decl(&f.decl, cx),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"fn\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            w.reserve(header_len);\n+            write!(\n+                w,\n+                \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n+                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n+                vis = vis,\n+                constness = constness,\n+                asyncness = asyncness,\n+                unsafety = unsafety,\n+                abi = abi,\n+                name = name,\n+                generics = f.generics.print(cx),\n+                where_clause = print_where_clause(&f.generics, cx, 0, true),\n+                decl = f.decl.full_print(header_len, 0, f.header.asyncness, cx),\n+                notable_traits = notable_traits_decl(&f.decl, cx),\n+            );\n+        });\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n@@ -844,16 +846,18 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n }\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n-    wrap_item(w, \"trait-alias\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        write!(\n-            w,\n-            \"trait {}{}{} = {};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            print_where_clause(&t.generics, cx, 0, true),\n-            bounds(&t.bounds, true, cx)\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"trait-alias\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            write!(\n+                w,\n+                \"trait {}{}{} = {};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                print_where_clause(&t.generics, cx, 0, true),\n+                bounds(&t.bounds, true, cx)\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -866,16 +870,18 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n }\n \n fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n-    wrap_item(w, \"opaque\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        write!(\n-            w,\n-            \"type {}{}{where_clause} = impl {bounds};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            where_clause = print_where_clause(&t.generics, cx, 0, true),\n-            bounds = bounds(&t.bounds, false, cx),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"opaque\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            write!(\n+                w,\n+                \"type {}{}{where_clause} = impl {bounds};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                bounds = bounds(&t.bounds, false, cx),\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -894,20 +900,37 @@ fn item_typedef(\n     t: &clean::Typedef,\n     is_associated: bool,\n ) {\n-    wrap_item(w, \"typedef\", |w| {\n-        render_attributes_in_pre(w, it, \"\");\n-        if !is_associated {\n-            write!(w, \"{}\", it.visibility.print_with_space(it.def_id, cx));\n-        }\n-        write!(\n-            w,\n-            \"type {}{}{where_clause} = {type_};\",\n-            it.name.as_ref().unwrap(),\n-            t.generics.print(cx),\n-            where_clause = print_where_clause(&t.generics, cx, 0, true),\n-            type_ = t.type_.print(cx),\n-        );\n-    });\n+    fn write_content(\n+        w: &mut Buffer,\n+        cx: &Context<'_>,\n+        it: &clean::Item,\n+        t: &clean::Typedef,\n+        is_associated: bool,\n+    ) {\n+        wrap_item(w, \"typedef\", |w| {\n+            render_attributes_in_pre(w, it, \"\");\n+            if !is_associated {\n+                write!(w, \"{}\", it.visibility.print_with_space(it.def_id, cx));\n+            }\n+            write!(\n+                w,\n+                \"type {}{}{where_clause} = {type_};\",\n+                it.name.as_ref().unwrap(),\n+                t.generics.print(cx),\n+                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                type_ = t.type_.print(cx),\n+            );\n+        });\n+    }\n+\n+    // If this is an associated typedef, we don't want to wrap it into a docblock.\n+    if is_associated {\n+        write_content(w, cx, it, t, is_associated);\n+    } else {\n+        wrap_into_docblock(w, |w| {\n+            write_content(w, cx, it, t, is_associated);\n+        });\n+    }\n \n     document(w, cx, it, None, HeadingOffset::H2);\n \n@@ -1142,32 +1165,34 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n-    let name = it.name.as_ref().expect(\"proc-macros always have names\");\n-    match m.kind {\n-        MacroKind::Bang => {\n-            wrap_item(w, \"macro\", |w| {\n-                write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n-            });\n-        }\n-        MacroKind::Attr => {\n-            wrap_item(w, \"attr\", |w| {\n-                write!(w, \"#[{}]\", name);\n-            });\n-        }\n-        MacroKind::Derive => {\n-            wrap_item(w, \"derive\", |w| {\n-                write!(w, \"#[derive({})]\", name);\n-                if !m.helpers.is_empty() {\n-                    w.push_str(\"\\n{\\n\");\n-                    w.push_str(\"    // Attributes available to this derive:\\n\");\n-                    for attr in &m.helpers {\n-                        writeln!(w, \"    #[{}]\", attr);\n+    wrap_into_docblock(w, |w| {\n+        let name = it.name.as_ref().expect(\"proc-macros always have names\");\n+        match m.kind {\n+            MacroKind::Bang => {\n+                wrap_item(w, \"macro\", |w| {\n+                    write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n+                });\n+            }\n+            MacroKind::Attr => {\n+                wrap_item(w, \"attr\", |w| {\n+                    write!(w, \"#[{}]\", name);\n+                });\n+            }\n+            MacroKind::Derive => {\n+                wrap_item(w, \"derive\", |w| {\n+                    write!(w, \"#[derive({})]\", name);\n+                    if !m.helpers.is_empty() {\n+                        w.push_str(\"\\n{\\n\");\n+                        w.push_str(\"    // Attributes available to this derive:\\n\");\n+                        for attr in &m.helpers {\n+                            writeln!(w, \"    #[{}]\", attr);\n+                        }\n+                        w.push_str(\"}\\n\");\n                     }\n-                    w.push_str(\"}\\n\");\n-                }\n-            });\n+                });\n+            }\n         }\n-    }\n+    });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n@@ -1177,38 +1202,40 @@ fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n }\n \n fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n-    wrap_item(w, \"const\", |w| {\n-        render_attributes_in_code(w, it);\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"const\", |w| {\n+            render_attributes_in_code(w, it);\n \n-        write!(\n-            w,\n-            \"{vis}const {name}: {typ}\",\n-            vis = it.visibility.print_with_space(it.def_id, cx),\n-            name = it.name.as_ref().unwrap(),\n-            typ = c.type_.print(cx),\n-        );\n+            write!(\n+                w,\n+                \"{vis}const {name}: {typ}\",\n+                vis = it.visibility.print_with_space(it.def_id, cx),\n+                name = it.name.as_ref().unwrap(),\n+                typ = c.type_.print(cx),\n+            );\n \n-        let value = c.value(cx.tcx());\n-        let is_literal = c.is_literal(cx.tcx());\n-        let expr = c.expr(cx.tcx());\n-        if value.is_some() || is_literal {\n-            write!(w, \" = {expr};\", expr = Escape(&expr));\n-        } else {\n-            w.write_str(\";\");\n-        }\n+            let value = c.value(cx.tcx());\n+            let is_literal = c.is_literal(cx.tcx());\n+            let expr = c.expr(cx.tcx());\n+            if value.is_some() || is_literal {\n+                write!(w, \" = {expr};\", expr = Escape(&expr));\n+            } else {\n+                w.write_str(\";\");\n+            }\n \n-        if !is_literal {\n-            if let Some(value) = &value {\n-                let value_lowercase = value.to_lowercase();\n-                let expr_lowercase = expr.to_lowercase();\n+            if !is_literal {\n+                if let Some(value) = &value {\n+                    let value_lowercase = value.to_lowercase();\n+                    let expr_lowercase = expr.to_lowercase();\n \n-                if value_lowercase != expr_lowercase\n-                    && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n-                {\n-                    write!(w, \" // {value}\", value = Escape(value));\n+                    if value_lowercase != expr_lowercase\n+                        && value_lowercase.trim_end_matches(\"i32\") != expr_lowercase\n+                    {\n+                        write!(w, \" // {value}\", value = Escape(value));\n+                    }\n                 }\n             }\n-        }\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2)\n@@ -1268,30 +1295,34 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n }\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    wrap_item(w, \"static\", |w| {\n-        render_attributes_in_code(w, it);\n-        write!(\n-            w,\n-            \"{vis}static {mutability}{name}: {typ}\",\n-            vis = it.visibility.print_with_space(it.def_id, cx),\n-            mutability = s.mutability.print_with_space(),\n-            name = it.name.as_ref().unwrap(),\n-            typ = s.type_.print(cx)\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"static\", |w| {\n+            render_attributes_in_code(w, it);\n+            write!(\n+                w,\n+                \"{vis}static {mutability}{name}: {typ}\",\n+                vis = it.visibility.print_with_space(it.def_id, cx),\n+                mutability = s.mutability.print_with_space(),\n+                name = it.name.as_ref().unwrap(),\n+                typ = s.type_.print(cx)\n+            );\n+        });\n     });\n     document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    wrap_item(w, \"foreigntype\", |w| {\n-        w.write_str(\"extern {\\n\");\n-        render_attributes_in_code(w, it);\n-        write!(\n-            w,\n-            \"    {}type {};\\n}}\",\n-            it.visibility.print_with_space(it.def_id, cx),\n-            it.name.as_ref().unwrap(),\n-        );\n+    wrap_into_docblock(w, |w| {\n+        wrap_item(w, \"foreigntype\", |w| {\n+            w.write_str(\"extern {\\n\");\n+            render_attributes_in_code(w, it);\n+            write!(\n+                w,\n+                \"    {}type {};\\n}}\",\n+                it.visibility.print_with_space(it.def_id, cx),\n+                it.name.as_ref().unwrap(),\n+            );\n+        });\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1374,7 +1405,7 @@ fn wrap_into_docblock<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(\"<div class=\\\"docblock type-decl\\\">\");\n+    w.write_str(\"<div class=\\\"docblock item-decl\\\">\");\n     f(w);\n     w.write_str(\"</div>\")\n }"}, {"sha": "e41c993a5285d6f4381d58b47925d1f8969a23b3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -129,9 +129,14 @@ h3 {\n }\n h1, h2, h3, h4, h5, h6 {\n \tfont-weight: 500;\n+}\n+h1, h2, h3, h4 {\n \tmargin: 20px 0 15px 0;\n \tpadding-bottom: 6px;\n }\n+h5, h6 {\n+\tmargin: 15px 0 5px 0;\n+}\n h1.fqn {\n \tdisplay: flex;\n \tborder-bottom: 1px dashed;\n@@ -254,7 +259,10 @@ code, pre, a.test-arrow, .code-header {\n pre {\n \tpadding: 14px;\n }\n-.type-decl pre {\n+.docblock.item-decl {\n+\tmargin-left: 0;\n+}\n+.item-decl pre {\n \toverflow-x: auto;\n }\n \n@@ -502,14 +510,12 @@ nav.sub {\n \twhite-space: pre-wrap;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n-\tborder-bottom: 1px solid;\n-}\n-\n .top-doc .docblock h2 { font-size: 1.3em; }\n .top-doc .docblock h3 { font-size: 1.15em; }\n .top-doc .docblock h4,\n-.top-doc .docblock h5,\n+.top-doc .docblock h5 {\n+\tfont-size: 1.1em;\n+}\n .top-doc .docblock h6 {\n \tfont-size: 1em;\n }\n@@ -550,6 +556,7 @@ nav.sub {\n \tflex-grow: 1;\n \tmargin: 0px;\n \tpadding: 0px;\n+\toverflow-wrap: anywhere;\n }\n \n .in-band > code, .in-band > .code-header {"}, {"sha": "ccb1a707032bb1c0198ea9b177863cd8caa76313", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -220,7 +220,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #39AFD7;"}, {"sha": "93801af46ecc5d3e267fb72ef68defc9b061f4ad", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -181,7 +181,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #D2991D;"}, {"sha": "fba8231caac31188420629851af0a03176b03768", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -176,7 +176,7 @@ body.source .example-wrap pre.rust a {\n \tbackground: #eee;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock:not(.item-decl) a:not(.srclink):not(.test-arrow),\n .docblock-short a:not(.srclink):not(.test-arrow), .item-info a,\n #help a {\n \tcolor: #3873AD;"}, {"sha": "239e51a91293fafcf152bc83c26f9cb8a3867126", "filename": "src/test/rustdoc-gui/basic.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fbasic.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fbasic.goml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,4 +1,4 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n assert: (\"#functions\")\n goto: ./struct.Foo.html\n-assert: (\"div.type-decl\")\n+assert: (\"div.item-decl\")"}, {"sha": "2de47682856796c44180460e4633ffac22e94289", "filename": "src/test/rustdoc-gui/check-code-blocks-margin.goml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcheck-code-blocks-margin.goml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -0,0 +1,6 @@\n+// This test ensures that the docblock elements have the appropriate left margin.\n+goto: file://|DOC_PATH|/test_docs/fn.foo.html\n+// The top docblock elements shouldn't have left margin...\n+assert-css: (\"#main .docblock.item-decl\", {\"margin-left\": \"0px\"})\n+// ... but all the others should!\n+assert-css: (\"#main .docblock:not(.item-decl)\", {\"margin-left\": \"24px\"})"}, {"sha": "0459fd4b9c353644158378331ed6ab8765b0f090", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,6 +1,6 @@\n goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // This test checks that the font weight is correctly applied.\n-assert-css: (\"//*[@class='docblock type-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n+assert-css: (\"//*[@class='docblock item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\"//*[@class='structfield small-section-header']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n assert-css: (\"#method\\.a_method > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedtype\\.X > .code-header\", {\"font-weight\": \"600\"})\n@@ -16,7 +16,7 @@ goto: file://|DOC_PATH|/lib2/trait.Trait.html\n \n // This is a complex selector, so here's how it works:\n //\n-// * //*[@class='docblock type-decl'] \u2014 selects element of any tag with classes docblock and type-decl\n+// * //*[@class='docblock item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n // * /pre[@class='rust trait'] \u2014 selects immediate child with tag pre and classes rust and trait\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n@@ -25,8 +25,8 @@ goto: file://|DOC_PATH|/lib2/trait.Trait.html\n //\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n-assert-count: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n-assert-css: (\"//*[@class='docblock type-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n+assert-count: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n+assert-css: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n \n assert-count: (\".methods .type\", 1)\n assert-css: (\".methods .type\", {\"font-weight\": \"600\"})"}, {"sha": "f2e76b546c4affb1afc342703af74856b0f8111e", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -84,3 +84,20 @@ pub mod summary_table {\n     /// | content | content |\n     pub struct Foo;\n }\n+\n+pub mod too_long {\n+pub type ReallyLongTypeNameLongLongLong = Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n+\n+pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n+\n+pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+    pub a: u32,\n+}\n+\n+impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+    /// ```\n+    /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n+    /// ```\n+        pub fn foo(&self) {}\n+    }\n+}"}, {"sha": "63ab867fb17720c3e8cf8119076732d2f597a33e", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,8 +1,25 @@\n-// This test ensures that the type declaration content overflow is handled inside the <pre> directly.\n+// This test ensures that the items declaration content overflow is handled inside the <pre> directly.\n goto: file://|DOC_PATH|/lib2/long_trait/trait.ALongNameBecauseItHelpsTestingTheCurrentProblem.html\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // Logically, the <body> scroll width should be the width of the window.\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n-assert-property: (\".type-decl pre\", {\"scrollWidth\": \"1324\"})\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n+\n+// We now make the same check on type declaration...\n+goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n+assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n+// We now check that the section width hasn't grown because of it.\n+assert-property: (\"#main\", {\"scrollWidth\": \"840\"})\n+// And now checking that it has scrollable content.\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1103\"})\n+\n+// ... and constant.\n+// On a sidenote, it also checks that the (very) long title isn't changing the docblock width.\n+goto: file://|DOC_PATH|/lib2/too_long/constant.ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong.html\n+assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n+// We now check that the section width hasn't grown because of it.\n+assert-property: (\"#main\", {\"scrollWidth\": \"840\"})\n+// And now checking that it has scrollable content.\n+assert-property: (\".item-decl pre\", {\"scrollWidth\": \"950\"})"}, {"sha": "1c7f4b7241893b8f705862a7064586db1a55c875", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -8,6 +8,6 @@ pub extern \"C\" fn f() {}\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock type-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "509457f6c9649610b4200fb4cf69886ac0a7bed8", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -5,25 +5,25 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n pub use reexports::addr_of;\n-// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n pub(crate) use reexports::addr_of_crate;\n-// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n+// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n pub(self) use reexports::addr_of_self;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n-// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooCrate;'\n+// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooCrate;'\n pub(crate) use reexports::FooCrate;\n-// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooSelf;'\n+// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) struct FooSelf;'\n pub(self) use reexports::FooSelf;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n-// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarCrate {'\n+// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarCrate {'\n pub(crate) use reexports::BarCrate;\n-// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarSelf {'\n+// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) enum BarSelf {'\n pub(self) use reexports::BarSelf;\n \n // @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n@@ -40,11 +40,11 @@ pub(crate) use reexports::TypeCrate;\n // @has 'foo/type.TypeSelf.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeSelf ='\n pub(self) use reexports::TypeSelf;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n-// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionCrate {'\n+// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionCrate {'\n pub(crate) use reexports::UnionCrate;\n-// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionSelf {'\n+// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock item-decl\"]' 'pub(crate) union UnionSelf {'\n pub(self) use reexports::UnionSelf;\n \n pub mod foo {"}, {"sha": "c308d0c2f05cf49db8f5fc2be4026ffa9a29b74b", "filename": "src/test/rustdoc/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -4,21 +4,21 @@\n \n extern crate reexports;\n \n-// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock item-decl\"]' 'pub macro addr_of($place : expr) {'\n pub use reexports::addr_of;\n // @!has 'foo/macro.addr_of_crate.html'\n pub(crate) use reexports::addr_of_crate;\n // @!has 'foo/macro.addr_of_self.html'\n pub(self) use reexports::addr_of_self;\n \n-// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock item-decl\"]' 'pub struct Foo;'\n pub use reexports::Foo;\n // @!has 'foo/struct.FooCrate.html'\n pub(crate) use reexports::FooCrate;\n // @!has 'foo/struct.FooSelf.html'\n pub(self) use reexports::FooSelf;\n \n-// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock item-decl\"]' 'pub enum Bar {'\n pub use reexports::Bar;\n // @!has 'foo/enum.BarCrate.html'\n pub(crate) use reexports::BarCrate;\n@@ -39,7 +39,7 @@ pub(crate) use reexports::TypeCrate;\n // @!has 'foo/type.TypeSelf.html'\n pub(self) use reexports::TypeSelf;\n \n-// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock item-decl\"]' 'pub union Union {'\n pub use reexports::Union;\n // @!has 'foo/union.UnionCrate.html'\n pub(crate) use reexports::UnionCrate;"}, {"sha": "937646987dd4f2c5532bd4e562ef67d3fbac1347", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -55,7 +55,7 @@ pub union Union {\n \n // @has 'toggle_item_contents/struct.PrivStruct.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n-// @has - '//div[@class=\"docblock type-decl\"]' 'fields omitted'\n+// @has - '//div[@class=\"docblock item-decl\"]' 'fields omitted'\n pub struct PrivStruct {\n     a: usize,\n     b: usize,"}, {"sha": "c9fccf5a77cde6d31986f42812bc12a05a8165bb", "filename": "src/test/rustdoc/trait_alias.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -13,11 +13,14 @@ use std::fmt::Debug;\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n // @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n \n-// @has foo/traitalias.CopyAlias.html '//section[@id=\"main\"]/pre' 'trait CopyAlias = Copy;'\n+// @has foo/traitalias.CopyAlias.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait CopyAlias = Copy;'\n pub trait CopyAlias = Copy;\n-// @has foo/traitalias.Alias2.html '//section[@id=\"main\"]/pre' 'trait Alias2 = Copy + Debug;'\n+// @has foo/traitalias.Alias2.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait Alias2 = Copy + Debug;'\n pub trait Alias2 = Copy + Debug;\n-// @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+// @has foo/traitalias.Foo.html\n+// @has - '//section[@id=\"main\"]/div[@class=\"docblock item-decl\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n pub trait Foo<T> = Into<T> + Debug;\n // @has foo/fn.bar.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n pub fn bar<T>() where T: Alias2 {}"}, {"sha": "47c7f1c2c33408ec70a5ec983f934a8b81cef8a0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "92f084b58e35be50a69503ed7ff9617a4dadad88", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c57cebe04ebcbacb0e07e616ebefc10cbae2c9ba", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "200937f0c9fc380dbaee757da9f1a166c6ed0dc5", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "49ae87cbfe9dce4c73f81b0149d4bb6c6eabaa53", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,34 +1,34 @@\n-error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+error[E0277]: the trait bound `Self: Trait1` is not satisfied\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:5\n+  --> $DIR/issue-74816.rs:9:22\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n+   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Sized {\n-   |             +++++++\n+LL | trait Trait2: Trait1 {\n+   |             ++++++++\n \n-error[E0277]: the trait bound `Self: Trait1` is not satisfied\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required by a bound in `Trait2::Associated`\n-  --> $DIR/issue-74816.rs:9:22\n+  --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n-LL | trait Trait2: Trait1 {\n-   |             ++++++++\n+LL | trait Trait2: Sized {\n+   |             +++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6978794e1e957304cda22c17a6f820f59cbf609", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -20,13 +20,13 @@ LL |     for<'a> T: 'a,\n    |                ^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-86483.rs:9:19\n+  --> $DIR/issue-86483.rs:9:5\n    |\n LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/issue-86483.rs:7:16"}, {"sha": "2c397d80b013eef1ba385258632c4522aaa3c73e", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -6,10 +6,10 @@ LL | impl Tsized for () {}\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n note: required by a bound in `Tsized`\n-  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:17\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n    |\n LL | trait Tsized<P: Sized = [Self]> {}\n-   |                 ^^^^^ required by this bound in `Tsized`\n+   |              ^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "09e20c0c777314202c0c0fe590ae82b3de989be0", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,21 +1,11 @@\n-error[E0283]: type annotations needed\n+error[E0282]: type annotations needed\n   --> $DIR/issue-16966.rs:2:5\n    |\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: cannot satisfy `_: Any`\n-note: required by a bound in `begin_panic`\n-  --> $SRC_DIR/std/src/panicking.rs:LL:COL\n-   |\n-LL | pub fn begin_panic<M: Any + Send>(msg: M) -> ! {\n-   |                       ^^^ required by this bound in `begin_panic`\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider specifying the type argument in the function call\n-   |\n-LL |         $crate::rt::begin_panic::<M>($msg)\n-   |                                +++++\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "92742b50619e011746406ff19c536dac0f72f97e", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `std::hash::Hash::hash`\n   --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |                ^^^^^^ required by this bound in `std::hash::Hash::hash`\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b345e90178742ee0049c08d733b604f2a1df7a0d", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,4 +1,4 @@\n-error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Next`\n+error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n   --> $DIR/issue-23122-2.rs:9:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;"}, {"sha": "df76a985559d08481719a915195ff666e87acd2e", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -12,10 +12,10 @@ LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |\n    = note: cannot satisfy `_: Tt`\n note: required by a bound in `Tt::const_val`\n-  --> $DIR/issue-54954.rs:5:27\n+  --> $DIR/issue-54954.rs:5:24\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n-   |                           ^^^^^ required by this bound in `Tt::const_val`\n+   |                        ^ required by this bound in `Tt::const_val`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fffb91f98700bdf8f9c9210468645a851944d9ca", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -20,11 +20,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:10\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n    |\n LL |     fn c<T: ~const Bar>();\n-   |          ^ required by this bound in `Foo::c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | const fn test1<T: ~const Foo + Bar + Bar>() {\n@@ -52,11 +52,11 @@ error[E0277]: the trait bound `T: Bar` is not satisfied\n LL |     T::c::<T>();\n    |     ^^^^^^^^^ the trait `Bar` is not implemented for `T`\n    |\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:9:10\n+note: required by `Foo::c`\n+  --> $DIR/trait-where-clause.rs:9:5\n    |\n LL |     fn c<T: ~const Bar>();\n-   |          ^ required by this bound in `Foo::c`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n help: consider further restricting this bound\n    |\n LL | fn test3<T: Foo + Bar>() {"}, {"sha": "ae55c96702adaed6e9fd46b0482a968834e5d53c", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -49,10 +49,10 @@ LL |     f_sized(*ref_cl);\n    |\n    = help: the trait `Sized` is not implemented for `dyn Fn()`\n note: required by a bound in `f_sized`\n-  --> $DIR/issue-84973-blacklist.rs:9:15\n+  --> $DIR/issue-84973-blacklist.rs:9:12\n    |\n LL | fn f_sized<T: Sized>(t: T) {}\n-   |               ^^^^^ required by this bound in `f_sized`\n+   |            ^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/issue-84973-blacklist.rs:27:12"}, {"sha": "0275fd475d8c6a1f5363b5ba7a807884a90c6fa2", "filename": "src/test/ui/suggestions/slice-issue-87994.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fslice-issue-87994.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: `[i32]` is not an iterator\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -18,7 +18,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+error[E0277]: `[i32]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:3:12\n    |\n LL |   for _ in v[1..] {\n@@ -38,7 +38,7 @@ LL |   for _ in &v[1..] {\n LL |   for _ in &mut v[1..] {\n    |            ++++\n \n-error[E0277]: `[K]` is not an iterator\n+error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {\n@@ -58,7 +58,7 @@ LL |   for i2 in &v2[1..] {\n LL |   for i2 in &mut v2[1..] {\n    |             ++++\n \n-error[E0277]: the size for values of type `[K]` cannot be known at compilation time\n+error[E0277]: `[K]` is not an iterator\n   --> $DIR/slice-issue-87994.rs:11:13\n    |\n LL |   for i2 in v2[1..] {"}, {"sha": "747081933172b50aca38ca1e5efeaca93a347e5b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Debug;\n fn main() {}\n \n type Two<A, B> = impl Debug;\n-//~^ ERROR the trait bound `A: Foo` is not satisfied\n+//~^ ERROR the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n //~| ERROR `A` doesn't implement `Debug`\n //~| ERROR `B` doesn't implement `Debug`\n "}, {"sha": "a8eb53a50e38bb33d99f2256d7c3d58739878055", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -10,6 +10,18 @@ note: previous use here\n LL | fn two<T: Debug + Foo, U: Debug>(t: T, u: U) -> Two<T, U> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0277]: the trait bound `A: Foo` is not satisfied in `(A, B, <A as Foo>::Bar)`\n+  --> $DIR/generic_duplicate_param_use9.rs:7:18\n+   |\n+LL | type Two<A, B> = impl Debug;\n+   |                  ^^^^^^^^^^ within `(A, B, <A as Foo>::Bar)`, the trait `Foo` is not implemented for `A`\n+   |\n+   = note: required because it appears within the type `(A, B, <A as Foo>::Bar)`\n+help: consider restricting type parameter `A`\n+   |\n+LL | type Two<A: Foo, B> = impl Debug;\n+   |           +++++\n+\n error[E0277]: `A` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use9.rs:7:18\n    |\n@@ -34,18 +46,6 @@ help: consider restricting type parameter `B`\n LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n    |              +++++++++++++++++\n \n-error[E0277]: the trait bound `A: Foo` is not satisfied\n-  --> $DIR/generic_duplicate_param_use9.rs:7:18\n-   |\n-LL | type Two<A, B> = impl Debug;\n-   |                  ^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n-   |\n-   = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n-help: consider restricting type parameter `A`\n-   |\n-LL | type Two<A: Foo, B> = impl Debug;\n-   |           +++++\n-\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "03f8f09a722019cee03c102fce17f2e90bfbeab0", "filename": "src/test/ui/typeck/issue-89935.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftypeck%2Fissue-89935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Ftypeck%2Fissue-89935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89935.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+trait Foo: Baz {}\n+trait Bar {}\n+trait Baz: Bar {\n+    fn bar(&self);\n+}\n+\n+impl<T: Foo> Bar for T {}\n+impl<T: Foo> Baz for T {\n+    fn bar(&self) {}\n+}\n+\n+fn accept_foo(x: Box<dyn Foo>) {\n+    x.bar();\n+}\n+\n+fn main() {}"}, {"sha": "5c40787febfb76498c19eff2762d28aa7f36af45", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -19,10 +19,10 @@ LL | | >(Unique<T>, A);\n    | |________________- doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `dyn Foo: Clone`\n-           which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Sized`\n            which is required by `Box<dyn Foo>: Clone`\n+           `dyn Foo: Clone`\n+           which is required by `Box<dyn Foo>: Clone`\n \n error: aborting due to previous error\n "}, {"sha": "531e9b4c9c95533194bdb40bbbb245e58f2c400b", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -7,10 +7,10 @@ LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        this type parameter needs to be `std::marker::Sized`\n    |\n note: required by a bound in `bar`\n-  --> $DIR/unsized-bare-typaram.rs:1:11\n+  --> $DIR/unsized-bare-typaram.rs:1:8\n    |\n LL | fn bar<T: Sized>() { }\n-   |           ^^^^^ required by this bound in `bar`\n+   |        ^ required by this bound in `bar`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo<T: ?Sized>() { bar::<T>() }"}, {"sha": "1c70a840c77dc382553fb5be30e2f1e4f68b9ef7", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -38,10 +38,10 @@ note: required because it appears within the type `Bar<T>`\n LL | struct Bar<T: ?Sized> { data: T }\n    |        ^^^\n note: required by a bound in `is_sized`\n-  --> $DIR/unsized-struct.rs:1:15\n+  --> $DIR/unsized-struct.rs:1:13\n    |\n LL | fn is_sized<T:Sized>() { }\n-   |               ^^^^^ required by this bound in `is_sized`\n+   |             ^ required by this bound in `is_sized`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }"}, {"sha": "74cf323720cbb400528a0cd416a361315f1288cb", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -619,7 +619,6 @@ impl PanicExpn<'tcx> {\n             if let Some(init) = block.expr;\n             if let ExprKind::Call(_, [format_args]) = init.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n-            if let ExprKind::AddrOf(_, _, format_args) = format_args.kind;\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {\n                 Some(PanicExpn {"}, {"sha": "8e94d16a33a0e41b1a167447e50b098bca917cf6", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -1646,7 +1646,6 @@ pub fn match_panic_def_id(cx: &LateContext<'_>, did: DefId) -> bool {\n         did,\n         &[\n             &paths::BEGIN_PANIC,\n-            &paths::BEGIN_PANIC_FMT,\n             &paths::PANIC_ANY,\n             &paths::PANICKING_PANIC,\n             &paths::PANICKING_PANIC_FMT,"}, {"sha": "81aff585ded1be868421a758467c3a6ec84065f3", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42983a28ab3c70728da7a9b932b667c978dd898d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=42983a28ab3c70728da7a9b932b667c978dd898d", "patch": "@@ -20,7 +20,6 @@ pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n /// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];"}]}