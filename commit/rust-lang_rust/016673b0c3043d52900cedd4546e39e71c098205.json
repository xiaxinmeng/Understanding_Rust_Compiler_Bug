{"sha": "016673b0c3043d52900cedd4546e39e71c098205", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjY3M2IwYzMwNDNkNTI5MDBjZWRkNDU0NmUzOWU3MWMwOTgyMDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-05T12:01:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-09T10:12:55Z"}, "message": "Fix rustc::internals lint warnings", "tree": {"sha": "ee27e1c74968a87372e0b773c6af21697ce1678c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee27e1c74968a87372e0b773c6af21697ce1678c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016673b0c3043d52900cedd4546e39e71c098205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016673b0c3043d52900cedd4546e39e71c098205", "html_url": "https://github.com/rust-lang/rust/commit/016673b0c3043d52900cedd4546e39e71c098205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016673b0c3043d52900cedd4546e39e71c098205/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291c75d10b734d7b118c7232157eefdc342c4144", "url": "https://api.github.com/repos/rust-lang/rust/commits/291c75d10b734d7b118c7232157eefdc342c4144", "html_url": "https://github.com/rust-lang/rust/commit/291c75d10b734d7b118c7232157eefdc342c4144"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "319183729d141b3e8ea530c4ed56e01a71d19f55", "filename": "src/backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -1,6 +1,6 @@\n-use std::collections::HashMap;\n use std::convert::TryFrom;\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_session::Session;\n \n use cranelift_module::{FuncId, Module};\n@@ -44,7 +44,7 @@ pub(crate) trait WriteDebugInfo {\n     fn add_debug_section(&mut self, name: SectionId, data: Vec<u8>) -> Self::SectionId;\n     fn add_debug_reloc(\n         &mut self,\n-        section_map: &HashMap<SectionId, Self::SectionId>,\n+        section_map: &FxHashMap<SectionId, Self::SectionId>,\n         symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,\n@@ -74,7 +74,7 @@ impl WriteDebugInfo for ObjectProduct {\n \n     fn add_debug_reloc(\n         &mut self,\n-        section_map: &HashMap<SectionId, Self::SectionId>,\n+        section_map: &FxHashMap<SectionId, Self::SectionId>,\n         symbol_map: &indexmap::IndexMap<FuncId, String>,\n         from: &Self::SectionId,\n         reloc: &DebugReloc,"}, {"sha": "4b19895c450213bd003f7a7c36e7741ab28bdbb1", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n         bcx,\n         block_map,\n-        local_map: HashMap::new(),\n+        local_map: FxHashMap::default(),\n         caller_location: None, // set by `codegen_fn_prelude`\n         cold_blocks: EntitySet::new(),\n "}, {"sha": "ed368bf96ecc49b0f11869a4768b870d474cf9c4", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -265,7 +265,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n \n     pub(crate) bcx: FunctionBuilder<'clif>,\n     pub(crate) block_map: IndexVec<BasicBlock, Block>,\n-    pub(crate) local_map: HashMap<Local, CPlace<'tcx>>,\n+    pub(crate) local_map: FxHashMap<Local, CPlace<'tcx>>,\n \n     /// When `#[track_caller]` is used, the implicit caller location is stored in this variable.\n     pub(crate) caller_location: Option<CValue<'tcx>>,\n@@ -275,7 +275,7 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n \n     pub(crate) clif_comments: crate::pretty_clif::CommentWriter,\n     pub(crate) constants_cx: &'clif mut crate::constant::ConstantCx,\n-    pub(crate) vtables: &'clif mut HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    pub(crate) vtables: &'clif mut FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n \n     pub(crate) source_info_set: indexmap::IndexSet<SourceInfo>,\n }"}, {"sha": "0c24fe359df51b148b7ddc960d53b48d9e5cebe4", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashMap;\n \n use gimli::write::{Address, AttributeValue, EndianVec, Result, Sections, Writer};\n use gimli::{RunTimeEndian, SectionId};\n@@ -20,7 +20,7 @@ impl DebugContext<'_> {\n         let mut sections = Sections::new(WriterRelocate::new(self));\n         self.dwarf.write(&mut sections).unwrap();\n \n-        let mut section_map = HashMap::new();\n+        let mut section_map = FxHashMap::default();\n         let _: Result<()> = sections.for_each_mut(|id, section| {\n             if !section.writer.slice().is_empty() {\n                 let section_id = product.add_debug_section(id, section.writer.take());"}, {"sha": "62898f075e2bad21b7533d5cfcdad8e54775f3a8", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -33,7 +33,7 @@ pub(crate) struct DebugContext<'tcx> {\n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n \n-    types: HashMap<Ty<'tcx>, UnitEntryId>,\n+    types: FxHashMap<Ty<'tcx>, UnitEntryId>,\n }\n \n impl<'tcx> DebugContext<'tcx> {\n@@ -97,7 +97,7 @@ impl<'tcx> DebugContext<'tcx> {\n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n \n-            types: HashMap::new(),\n+            types: FxHashMap::default(),\n         }\n     }\n \n@@ -255,7 +255,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         context: &Context,\n         isa: &dyn TargetIsa,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n-        local_map: HashMap<mir::Local, CPlace<'tcx>>,\n+        local_map: FxHashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n         let end = self.create_debug_lines(context, isa, source_info_set);\n \n@@ -302,8 +302,9 @@ fn place_location<'a, 'tcx>(\n     func_debug_ctx: &mut FunctionDebugContext<'a, 'tcx>,\n     isa: &dyn TargetIsa,\n     context: &Context,\n-    local_map: &HashMap<mir::Local, CPlace<'tcx>>,\n-    value_labels_ranges: &HashMap<ValueLabel, Vec<ValueLocRange>>,\n+    local_map: &FxHashMap<mir::Local, CPlace<'tcx>>,\n+    #[allow(rustc::default_hash_types)]\n+    value_labels_ranges: &std::collections::HashMap<ValueLabel, Vec<ValueLocRange>>,\n     place: Place<'tcx>,\n ) -> AttributeValue {\n     assert!(place.projection.is_empty()); // FIXME implement them"}, {"sha": "e7a637211d409f24f78e586148701767dc6693a0", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -67,7 +67,6 @@ mod value_and_place;\n mod vtable;\n \n mod prelude {\n-    pub(crate) use std::collections::HashMap;\n     pub(crate) use std::convert::{TryFrom, TryInto};\n \n     pub(crate) use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n@@ -132,7 +131,7 @@ pub(crate) struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n     module: &'clif mut Module<B>,\n     constants_cx: ConstantCx,\n     cached_context: Context,\n-    vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n     debug_context: Option<&'clif mut DebugContext<'tcx>>,\n }\n \n@@ -147,7 +146,7 @@ impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n             module,\n             constants_cx: ConstantCx::default(),\n             cached_context: Context::new(),\n-            vtables: HashMap::new(),\n+            vtables: FxHashMap::default(),\n             debug_context,\n         }\n     }"}, {"sha": "ca9ff15ec10ffee9967d95ccf086ab0e345ba1fe", "filename": "src/optimize/code_layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Foptimize%2Fcode_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Foptimize%2Fcode_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fcode_layout.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -14,7 +14,7 @@ pub(super) fn optimize_function(ctx: &mut Context, cold_blocks: &EntitySet<Block\n     // FIXME Move the block in place instead of remove and append once\n     // bytecodealliance/cranelift#1339 is implemented.\n \n-    let mut block_insts = HashMap::new();\n+    let mut block_insts = FxHashMap::default();\n     for block in cold_blocks.keys().filter(|&block| cold_blocks.contains(block)) {\n         let insts = ctx.func.layout.block_insts(block).collect::<Vec<_>>();\n         for &inst in &insts {"}, {"sha": "d6a9d6228c42a45a87a9bab75ebb9bc9b9796027", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -9,10 +9,12 @@\n //! `stack_store` instruction incorrectly, or incorrectly use a previously stored value as the value\n //! being loaded by a `stack_load`.\n \n-use std::collections::{BTreeMap, HashSet};\n+use std::collections::BTreeMap;\n use std::fmt;\n use std::ops::Not;\n \n+use rustc_data_structures::fx::FxHashSet;\n+\n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n use cranelift_codegen::ir::immediates::Offset32;\n@@ -43,9 +45,9 @@ impl Ord for OrdStackSlot {\n \n #[derive(Debug, Default)]\n struct StackSlotUsage {\n-    stack_addr: HashSet<Inst>,\n-    stack_load: HashSet<Inst>,\n-    stack_store: HashSet<Inst>,\n+    stack_addr: FxHashSet<Inst>,\n+    stack_load: FxHashSet<Inst>,\n+    stack_store: FxHashSet<Inst>,\n }\n \n impl StackSlotUsage {\n@@ -284,7 +286,7 @@ fn combine_stack_addr_with_load_store(func: &mut Function) {\n \n fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext<'_>) {\n     // FIXME incrementally rebuild on each call?\n-    let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n+    let mut stack_addr_load_insts_users = FxHashMap::<Inst, FxHashSet<Inst>>::default();\n \n     let mut cursor = FuncCursor::new(&mut opt_ctx.ctx.func);\n     while let Some(_block) = cursor.next_block() {\n@@ -293,7 +295,7 @@ fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext<'_>) {\n                 if let ValueDef::Result(arg_origin, 0) = cursor.func.dfg.value_def(arg) {\n                     match cursor.func.dfg[arg_origin].opcode() {\n                         Opcode::StackAddr | Opcode::StackLoad => {\n-                            stack_addr_load_insts_users.entry(arg_origin).or_insert_with(HashSet::new).insert(inst);\n+                            stack_addr_load_insts_users.entry(arg_origin).or_insert_with(FxHashSet::default).insert(inst);\n                         }\n                         _ => {}\n                     }"}, {"sha": "c3b8bee956c051856d4dfd70c324d911e14d3b65", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -1,4 +1,3 @@\n-use std::collections::HashMap;\n use std::fmt;\n \n use cranelift_codegen::{\n@@ -66,7 +65,7 @@ use crate::prelude::*;\n #[derive(Debug)]\n pub(crate) struct CommentWriter {\n     global_comments: Vec<String>,\n-    entity_comments: HashMap<AnyEntity, String>,\n+    entity_comments: FxHashMap<AnyEntity, String>,\n }\n \n impl CommentWriter {\n@@ -90,7 +89,7 @@ impl CommentWriter {\n \n         CommentWriter {\n             global_comments,\n-            entity_comments: HashMap::new(),\n+            entity_comments: FxHashMap::default(),\n         }\n     }\n }"}, {"sha": "272c38b7b97473de1d6feb363dd2eb3e61550a28", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/016673b0c3043d52900cedd4546e39e71c098205/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016673b0c3043d52900cedd4546e39e71c098205/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=016673b0c3043d52900cedd4546e39e71c098205", "patch": "@@ -202,36 +202,36 @@ impl<'tcx> CValue<'tcx> {\n         let clif_ty = fx.clif_type(layout.ty).unwrap();\n \n         match layout.ty.kind {\n-            ty::TyKind::Bool => {\n+            ty::Bool => {\n                 assert!(const_val == 0 || const_val == 1, \"Invalid bool 0x{:032X}\", const_val);\n             }\n             _ => {}\n         }\n \n         let val = match layout.ty.kind {\n-            ty::TyKind::Uint(UintTy::U128) | ty::TyKind::Int(IntTy::I128) => {\n+            ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n                 let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n                 let msb = fx\n                     .bcx\n                     .ins()\n                     .iconst(types::I64, (const_val >> 64) as u64 as i64);\n                 fx.bcx.ins().iconcat(lsb, msb)\n             }\n-            ty::TyKind::Bool | ty::TyKind::Char | ty::TyKind::Uint(_) | ty::TyKind::Ref(..)\n-            | ty::TyKind::RawPtr(..) => {\n+            ty::Bool | ty::Char | ty::Uint(_) | ty::Ref(..)\n+            | ty::RawPtr(..) => {\n                 fx\n                     .bcx\n                     .ins()\n                     .iconst(clif_ty, u64::try_from(const_val).expect(\"uint\") as i64)\n             }\n-            ty::TyKind::Int(_) => {\n+            ty::Int(_) => {\n                 let const_val = rustc_middle::mir::interpret::sign_extend(const_val, layout.size);\n                 fx.bcx.ins().iconst(clif_ty, i64::try_from(const_val as i128).unwrap())\n             }\n-            ty::TyKind::Float(FloatTy::F32) => {\n+            ty::Float(FloatTy::F32) => {\n                 fx.bcx.ins().f32const(Ieee32::with_bits(u32::try_from(const_val).unwrap()))\n             }\n-            ty::TyKind::Float(FloatTy::F64) => {\n+            ty::Float(FloatTy::F64) => {\n                 fx.bcx.ins().f64const(Ieee64::with_bits(u64::try_from(const_val).unwrap()))\n             }\n             _ => panic!("}]}