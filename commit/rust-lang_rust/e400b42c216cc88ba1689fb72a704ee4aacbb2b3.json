{"sha": "e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MDBiNDJjMjE2Y2M4OGJhMTY4OWZiNzJhNzA0ZWU0YWFjYmIyYjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-08T19:07:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T19:00:40Z"}, "message": "fix build", "tree": {"sha": "28f496435df859bbc9c8e3e307df8eab0c2812c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f496435df859bbc9c8e3e307df8eab0c2812c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "html_url": "https://github.com/rust-lang/rust/commit/e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e400b42c216cc88ba1689fb72a704ee4aacbb2b3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0802b3a10802c328118431627f9e5fcbde31cfe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0802b3a10802c328118431627f9e5fcbde31cfe9", "html_url": "https://github.com/rust-lang/rust/commit/0802b3a10802c328118431627f9e5fcbde31cfe9"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "404fe7ae91501928f0b86740aa61af7323a8cd44", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e400b42c216cc88ba1689fb72a704ee4aacbb2b3/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e400b42c216cc88ba1689fb72a704ee4aacbb2b3/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "patch": "@@ -4,11 +4,13 @@ extern crate rustc;\n extern crate rustc_driver;\n extern crate test;\n \n-use self::miri::eval_main;\n-use self::rustc_driver::{driver, Compilation};\n+use rustc_driver::{driver, Compilation};\n use rustc::hir::def_id::LOCAL_CRATE;\n use std::cell::RefCell;\n use std::rc::Rc;\n+\n+use miri::{MiriConfig, eval_main};\n+\n use crate::test::Bencher;\n \n pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n@@ -50,7 +52,8 @@ pub fn run(filename: &str, bencher: &mut Bencher) {\n         );\n \n         bencher.borrow_mut().iter(|| {\n-            eval_main(tcx, entry_def_id, false);\n+            let config = MiriConfig { validate: true, args: vec![] };\n+            eval_main(tcx, entry_def_id, config);\n         });\n \n         state.session.abort_if_errors();"}, {"sha": "3a70577cb7f22c00f0a02f4a0bb125ba987ecc12", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e400b42c216cc88ba1689fb72a704ee4aacbb2b3/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e400b42c216cc88ba1689fb72a704ee4aacbb2b3/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=e400b42c216cc88ba1689fb72a704ee4aacbb2b3", "patch": "@@ -25,6 +25,8 @@ use rustc::ty::TyCtxt;\n use syntax::ast;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n+use miri::MiriConfig;\n+\n struct MiriCompilerCalls {\n     default: Box<RustcDefaultCalls>,\n     /// whether we are building for the host\n@@ -94,9 +96,10 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::ItemKind::Fn(.., body_id) = i.node {\n                     if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n+                        let config = MiriConfig { validate: true, args: vec![] };\n                         let did = self.0.hir().body_owner_def_id(body_id);\n                         println!(\"running test: {}\", self.0.def_path_debug_str(did));\n-                        miri::eval_main(self.0, did, /*validate*/true);\n+                        miri::eval_main(self.0, did, config);\n                         self.1.session.abort_if_errors();\n                     }\n                 }\n@@ -106,7 +109,8 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         }\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n     } else if let Some((entry_def_id, _)) = tcx.entry_fn(LOCAL_CRATE) {\n-        miri::eval_main(tcx, entry_def_id, /*validate*/true);\n+        let config = MiriConfig { validate: true, args: vec![] };\n+        miri::eval_main(tcx, entry_def_id, config);\n \n         state.session.abort_if_errors();\n     } else {"}]}