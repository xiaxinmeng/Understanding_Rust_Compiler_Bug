{"sha": "6dd64d38a3621d9702cbffeaf491ce17903d16b5", "node_id": "C_kwDOAAsO6NoAKDZkZDY0ZDM4YTM2MjFkOTcwMmNiZmZlYWY0OTFjZTE3OTAzZDE2YjU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-29T12:18:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T12:18:02Z"}, "message": "Rollup merge of #102721 - nbdd0121:panic, r=Amanieu\n\nPrevent foreign Rust exceptions from being caught\n\nFix #102715\n\nUse the address of a static variable (which is guaranteed to be unique per copy of std) to tell apart if a Rust exception comes from local or foreign Rust code, and abort for the latter.", "tree": {"sha": "77d6ed90a1a8c19cf7cc7d6a23a4d1a23e84db5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d6ed90a1a8c19cf7cc7d6a23a4d1a23e84db5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd64d38a3621d9702cbffeaf491ce17903d16b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXRn6CRBK7hj4Ov3rIwAAKpwIAIJdpxbD3GRFVYuEIrxFIsxs\njFc8c3Quzjgfy4+t15Y9EXu44kM0qUTpXI9aKMpxry0A7bDg+zaAtRVkmGyJBS6U\niigrknScJ/enjuJAbGhCI3iziWlyQqXPYFJrouaN2Cpa597iTeNflCWm8i2wKq+x\nQ9BmNv6mHDkJxGWVWLvg4B4dut5553ZoPJ1/OIW9wqnSh58VesJ+34Y4y3uhCZey\nvyA0/a4tBgX+NroLTqhfVgqG5eRm1qx/Fun4Vd7fZkWSBKVO0lq8VBWfWY3fXFPF\n6+symNXWUyWzuCIoWdJ7VTX9d3PbpzhUq6ZmqW9V2huHKUU0g5TFpnVMLr4lFoI=\n=i9+O\n-----END PGP SIGNATURE-----\n", "payload": "tree 77d6ed90a1a8c19cf7cc7d6a23a4d1a23e84db5e\nparent 73e7c3a4296fea6cedcd7c01d68d8cc9e5b625b2\nparent bfac2daef9912244d8a913a57b83c4e1b485993d\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1667045882 +0200\ncommitter GitHub <noreply@github.com> 1667045882 +0200\n\nRollup merge of #102721 - nbdd0121:panic, r=Amanieu\n\nPrevent foreign Rust exceptions from being caught\n\nFix #102715\n\nUse the address of a static variable (which is guaranteed to be unique per copy of std) to tell apart if a Rust exception comes from local or foreign Rust code, and abort for the latter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd64d38a3621d9702cbffeaf491ce17903d16b5", "html_url": "https://github.com/rust-lang/rust/commit/6dd64d38a3621d9702cbffeaf491ce17903d16b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd64d38a3621d9702cbffeaf491ce17903d16b5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e7c3a4296fea6cedcd7c01d68d8cc9e5b625b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e7c3a4296fea6cedcd7c01d68d8cc9e5b625b2", "html_url": "https://github.com/rust-lang/rust/commit/73e7c3a4296fea6cedcd7c01d68d8cc9e5b625b2"}, {"sha": "bfac2daef9912244d8a913a57b83c4e1b485993d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfac2daef9912244d8a913a57b83c4e1b485993d", "html_url": "https://github.com/rust-lang/rust/commit/bfac2daef9912244d8a913a57b83c4e1b485993d"}], "stats": {"total": 121, "additions": 101, "deletions": 20}, "files": [{"sha": "c6d42308596cb2f51ba91c7bc3485a16872413c1", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -47,7 +47,12 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n     name: b\"rust_panic\\0\".as_ptr(),\n };\n \n+// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+#[repr(C)]\n struct Exception {\n+    // See `gcc.rs` on why this is present. We already have a static here so just use it.\n+    canary: *const TypeInfo,\n+\n     // This is necessary because C++ code can capture our exception with\n     // std::exception_ptr and rethrow it multiple times, possibly even in\n     // another thread.\n@@ -70,27 +75,38 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     let catch_data = &*(ptr as *mut CatchData);\n \n     let adjusted_ptr = __cxa_begin_catch(catch_data.ptr as *mut libc::c_void) as *mut Exception;\n-    let out = if catch_data.is_rust_panic {\n-        let was_caught = (*adjusted_ptr).caught.swap(true, Ordering::SeqCst);\n-        if was_caught {\n-            // Since cleanup() isn't allowed to panic, we just abort instead.\n-            intrinsics::abort();\n-        }\n-        (*adjusted_ptr).data.take().unwrap()\n-    } else {\n+    if !catch_data.is_rust_panic {\n         super::__rust_foreign_exception();\n-    };\n+    }\n+\n+    let canary = ptr::addr_of!((*adjusted_ptr).canary).read();\n+    if !ptr::eq(canary, &EXCEPTION_TYPE_INFO) {\n+        super::__rust_foreign_exception();\n+    }\n+\n+    let was_caught = (*adjusted_ptr).caught.swap(true, Ordering::SeqCst);\n+    if was_caught {\n+        // Since cleanup() isn't allowed to panic, we just abort instead.\n+        intrinsics::abort();\n+    }\n+    let out = (*adjusted_ptr).data.take().unwrap();\n     __cxa_end_catch();\n     out\n }\n \n pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n-    let sz = mem::size_of_val(&data);\n-    let exception = __cxa_allocate_exception(sz) as *mut Exception;\n+    let exception = __cxa_allocate_exception(mem::size_of::<Exception>()) as *mut Exception;\n     if exception.is_null() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n-    ptr::write(exception, Exception { caught: AtomicBool::new(false), data: Some(data) });\n+    ptr::write(\n+        exception,\n+        Exception {\n+            canary: &EXCEPTION_TYPE_INFO,\n+            caught: AtomicBool::new(false),\n+            data: Some(data),\n+        },\n+    );\n     __cxa_throw(exception as *mut _, &EXCEPTION_TYPE_INFO, exception_cleanup);\n }\n "}, {"sha": "0b7a873a691cc020f70e693307e624f00dbaaef1", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -38,12 +38,23 @@\n \n use alloc::boxed::Box;\n use core::any::Any;\n+use core::ptr;\n \n use unwind as uw;\n \n+// In case where multiple copies of std exist in a single process,\n+// we use address of this static variable to distinguish an exception raised by\n+// this copy and some other copy (which needs to be treated as foreign exception).\n+static CANARY: u8 = 0;\n+\n+// NOTE(nbdd0121)\n+// Once `c_unwind` feature is stabilized, there will be ABI stability requirement\n+// on this struct. The first two field must be `_Unwind_Exception` and `canary`,\n+// as it may be accessed by a different version of the std with a different compiler.\n #[repr(C)]\n struct Exception {\n     _uwe: uw::_Unwind_Exception,\n+    canary: *const u8,\n     cause: Box<dyn Any + Send>,\n }\n \n@@ -54,6 +65,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n             exception_cleanup,\n             private: [0; uw::unwinder_private_data_size],\n         },\n+        canary: &CANARY,\n         cause: data,\n     });\n     let exception_param = Box::into_raw(exception) as *mut uw::_Unwind_Exception;\n@@ -75,10 +87,22 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     if (*exception).exception_class != rust_exception_class() {\n         uw::_Unwind_DeleteException(exception);\n         super::__rust_foreign_exception();\n-    } else {\n-        let exception = Box::from_raw(exception as *mut Exception);\n-        exception.cause\n     }\n+\n+    let exception = exception.cast::<Exception>();\n+    // Just access the canary field, avoid accessing the entire `Exception` as\n+    // it can be a foreign Rust exception.\n+    let canary = ptr::addr_of!((*exception).canary).read();\n+    if !ptr::eq(canary, &CANARY) {\n+        // A foreign Rust exception, treat it slightly differently from other\n+        // foreign exceptions, because call into `_Unwind_DeleteException` will\n+        // call into `__rust_drop_panic` which produces a confusing\n+        // \"Rust panic must be rethrown\" message.\n+        super::__rust_foreign_exception();\n+    }\n+\n+    let exception = Box::from_raw(exception as *mut Exception);\n+    exception.cause\n }\n \n // Rust's exception class identifier.  This is used by personality routines to"}, {"sha": "651115a8248ac50886c88de41fc1cabc71f66626", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -49,9 +49,15 @@\n use alloc::boxed::Box;\n use core::any::Any;\n use core::mem::{self, ManuallyDrop};\n+use core::ptr;\n use libc::{c_int, c_uint, c_void};\n \n+// NOTE(nbdd0121): The `canary` field will be part of stable ABI after `c_unwind` stabilization.\n+#[repr(C)]\n struct Exception {\n+    // See `gcc.rs` on why this is present. We already have a static here so just use it.\n+    canary: *const _TypeDescriptor,\n+\n     // This needs to be an Option because we catch the exception by reference\n     // and its destructor is executed by the C++ runtime. When we take the Box\n     // out of the exception, we need to leave the exception in a valid state\n@@ -235,7 +241,7 @@ static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n macro_rules! define_cleanup {\n     ($abi:tt $abi2:tt) => {\n         unsafe extern $abi fn exception_cleanup(e: *mut Exception) {\n-            if let Exception { data: Some(b) } = e.read() {\n+            if let Exception { data: Some(b), .. } = e.read() {\n                 drop(b);\n                 super::__rust_drop_panic();\n             }\n@@ -265,7 +271,7 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     // The ManuallyDrop is needed here since we don't want Exception to be\n     // dropped when unwinding. Instead it will be dropped by exception_cleanup\n     // which is invoked by the C++ runtime.\n-    let mut exception = ManuallyDrop::new(Exception { data: Some(data) });\n+    let mut exception = ManuallyDrop::new(Exception { canary: &TYPE_DESCRIPTOR, data: Some(data) });\n     let throw_ptr = &mut exception as *mut _ as *mut _;\n \n     // This... may seems surprising, and justifiably so. On 32-bit MSVC the\n@@ -321,8 +327,12 @@ pub unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send> {\n     // __rust_try. This happens when a non-Rust foreign exception is caught.\n     if payload.is_null() {\n         super::__rust_foreign_exception();\n-    } else {\n-        let exception = &mut *(payload as *mut Exception);\n-        exception.data.take().unwrap()\n     }\n+    let exception = payload as *mut Exception;\n+    let canary = ptr::addr_of!((*exception).canary).read();\n+    if !ptr::eq(canary, &TYPE_DESCRIPTOR) {\n+        // A foreign Rust exception.\n+        super::__rust_foreign_exception();\n+    }\n+    (*exception).data.take().unwrap()\n }"}, {"sha": "50fca7f24e616d70b91028681ca0c901810987fc", "filename": "src/test/run-make-fulldeps/foreign-rust-exceptions/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2FMakefile?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -0,0 +1,11 @@\n+# ignore-i686-pc-windows-gnu\n+\n+# This test doesn't work on 32-bit MinGW as cdylib has its own copy of unwinder\n+# so cross-DLL unwinding does not work.\n+\n+include ../tools.mk\n+\n+all:\n+\t$(RUSTC) bar.rs --crate-type=cdylib\n+\t$(RUSTC) foo.rs\n+\t$(call RUN,foo) 2>&1 | $(CGREP) \"Rust cannot catch foreign exceptions\""}, {"sha": "5f9efe323609b8d857fb90de218fcfb93e72ba42", "filename": "src/test/run-make-fulldeps/foreign-rust-exceptions/bar.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Fbar.rs?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -0,0 +1,7 @@\n+#![crate_type = \"cdylib\"]\n+#![feature(c_unwind)]\n+\n+#[no_mangle]\n+extern \"C-unwind\" fn panic() {\n+    panic!();\n+}"}, {"sha": "266987c5b6d63b117c1deeeb37535b917e52730e", "filename": "src/test/run-make-fulldeps/foreign-rust-exceptions/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd64d38a3621d9702cbffeaf491ce17903d16b5/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-rust-exceptions%2Ffoo.rs?ref=6dd64d38a3621d9702cbffeaf491ce17903d16b5", "patch": "@@ -0,0 +1,13 @@\n+#![feature(c_unwind)]\n+\n+#[cfg_attr(not(windows), link(name = \"bar\"))]\n+#[cfg_attr(windows, link(name = \"bar.dll\"))]\n+extern \"C-unwind\" {\n+    fn panic();\n+}\n+\n+fn main() {\n+    let _ = std::panic::catch_unwind(|| {\n+        unsafe { panic() };\n+    });\n+}"}]}