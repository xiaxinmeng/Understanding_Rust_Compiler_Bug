{"sha": "1da466253c1fe6491f330a4ae5aa56da950928bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYTQ2NjI1M2MxZmU2NDkxZjMzMGE0YWU1YWE1NmRhOTUwOTI4YmY=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-18T21:17:34Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-19T02:57:28Z"}, "message": "Revisit implementation of custom unwind resume;\nRather than injecting a local `_Unwind_Resume` into the current translation unit,\njust replace `resume` instruction with a direct call the the `eh_unwind_resume` lang item.\nThis is likely to be more robust in the face of future LLVM changes, and also allows us to delegate\nwork back to libgcc's `_Unwind_Resume`.", "tree": {"sha": "8112302450b449276f63b96f8561e23b3fd25234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8112302450b449276f63b96f8561e23b3fd25234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da466253c1fe6491f330a4ae5aa56da950928bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da466253c1fe6491f330a4ae5aa56da950928bf", "html_url": "https://github.com/rust-lang/rust/commit/1da466253c1fe6491f330a4ae5aa56da950928bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da466253c1fe6491f330a4ae5aa56da950928bf/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af89fe3172d1c3153655b55a0659877206e5ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af89fe3172d1c3153655b55a0659877206e5ddb", "html_url": "https://github.com/rust-lang/rust/commit/4af89fe3172d1c3153655b55a0659877206e5ddb"}], "stats": {"total": 99, "additions": 45, "deletions": 54}, "files": [{"sha": "b37a0f6318c20e1f1262ca985aabab36d0f1c194", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=1da466253c1fe6491f330a4ae5aa56da950928bf", "patch": "@@ -944,6 +944,19 @@ pub fn call_lifetime_end(cx: Block, ptr: ValueRef) {\n     Call(cx, lifetime_end, &[C_u64(ccx, size), ptr], None, DebugLoc::None);\n }\n \n+// Generates code for resumption of unwind at the end of a landing pad.\n+pub fn trans_unwind_resume(bcx: Block, lpval: ValueRef) {\n+    if !bcx.sess().target.target.options.custom_unwind_resume {\n+        Resume(bcx, lpval);\n+    } else {\n+        let exc_ptr = ExtractValue(bcx, lpval, 0);\n+        let llunwresume = bcx.fcx.eh_unwind_resume();\n+        Call(bcx, llunwresume, &[exc_ptr], None, DebugLoc::None);\n+        Unreachable(bcx);\n+    }\n+}\n+\n+\n pub fn call_memcpy(cx: Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {\n     let _icx = push_ctxt(\"call_memcpy\");\n     let ccx = cx.ccx();"}, {"sha": "ffdc2701f8158fc189a9ab3fff4ef709cb87b396", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=1da466253c1fe6491f330a4ae5aa56da950928bf", "patch": "@@ -732,7 +732,7 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n                             \"create_landing_pad() should have set this\");\n                         let lp = build::Load(prev_bcx, personality);\n                         base::call_lifetime_end(prev_bcx, personality);\n-                        build::Resume(prev_bcx, lp);\n+                        base::trans_unwind_resume(prev_bcx, lp);\n                         prev_llbb = prev_bcx.llbb;\n                         break;\n                     }\n@@ -845,8 +845,6 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n \n         debug!(\"get_or_create_landing_pad\");\n \n-        self.inject_unwind_resume_hook();\n-\n         // Check if a landing pad block exists; if not, create one.\n         {\n             let mut scopes = self.scopes.borrow_mut();"}, {"sha": "b39b7818a6350f7d66d521c46a44598168cb75a5", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 24, "deletions": 44, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=1da466253c1fe6491f330a4ae5aa56da950928bf", "patch": "@@ -561,53 +561,33 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         }\n     }\n \n-    /// By default, LLVM lowers `resume` instructions into calls to `_Unwind_Resume`\n-    /// defined in libgcc, however, unlike personality routines, there is no easy way to\n-    /// override that symbol.  This method injects a local-scoped `_Unwind_Resume` function\n-    /// which immediately defers to the user-defined `eh_unwind_resume` lang item.\n-    pub fn inject_unwind_resume_hook(&self) {\n-        let ccx = self.ccx;\n-        if !ccx.sess().target.target.options.custom_unwind_resume ||\n-           ccx.unwind_resume_hooked().get() {\n-            return;\n-        }\n-\n-        let new_resume = match ccx.tcx().lang_items.eh_unwind_resume() {\n-            Some(did) => callee::trans_fn_ref(ccx, did, ExprId(0), &self.param_substs).val,\n+    // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n+    // otherwise declares it as an external funtion.\n+    pub fn eh_unwind_resume(&self) -> ValueRef {\n+        use trans::attributes;\n+        assert!(self.ccx.sess().target.target.options.custom_unwind_resume);\n+        match self.ccx.tcx().lang_items.eh_unwind_resume() {\n+            Some(def_id) => {\n+                callee::trans_fn_ref(self.ccx, def_id, ExprId(0),\n+                                     self.param_substs).val\n+            }\n             None => {\n-                let fty = Type::variadic_func(&[], &Type::void(self.ccx));\n-                declare::declare_cfn(self.ccx, \"rust_eh_unwind_resume\", fty,\n-                                     self.ccx.tcx().mk_nil())\n+                let mut unwresume = self.ccx.eh_unwind_resume().borrow_mut();\n+                match *unwresume {\n+                    Some(llfn) => llfn,\n+                    None => {\n+                        let fty = Type::func(&[Type::i8p(self.ccx)], &Type::void(self.ccx));\n+                        let llfn = declare::declare_fn(self.ccx,\n+                                                       \"rust_eh_unwind_resume\",\n+                                                       llvm::CCallConv,\n+                                                       fty, ty::FnDiverging);\n+                        attributes::unwind(llfn, true);\n+                        *unwresume = Some(llfn);\n+                        llfn\n+                    }\n+                }\n             }\n-        };\n-\n-        unsafe {\n-            let resume_type = Type::func(&[Type::i8(ccx).ptr_to()], &Type::void(ccx));\n-            let old_resume = llvm::LLVMAddFunction(ccx.llmod(),\n-                                                   \"_Unwind_Resume\\0\".as_ptr() as *const _,\n-                                                   resume_type.to_ref());\n-            llvm::SetLinkage(old_resume, llvm::InternalLinkage);\n-            let llbb = llvm::LLVMAppendBasicBlockInContext(ccx.llcx(),\n-                                                           old_resume,\n-                                                           \"\\0\".as_ptr() as *const _);\n-            let builder = ccx.builder();\n-            builder.position_at_end(llbb);\n-            builder.call(new_resume, &[llvm::LLVMGetFirstParam(old_resume)], None);\n-            builder.unreachable(); // it should never return\n-\n-            // Until DwarfEHPrepare pass has run, _Unwind_Resume is not referenced by any live code\n-            // and is subject to dead code elimination.  Here we add _Unwind_Resume to @llvm.globals\n-            // to prevent that.\n-            let i8p_ty = Type::i8p(ccx);\n-            let used_ty = Type::array(&i8p_ty, 1);\n-            let used = llvm::LLVMAddGlobal(ccx.llmod(), used_ty.to_ref(),\n-                                           \"llvm.used\\0\".as_ptr() as *const _);\n-            let old_resume = llvm::LLVMConstBitCast(old_resume, i8p_ty.to_ref());\n-            llvm::LLVMSetInitializer(used, C_array(i8p_ty, &[old_resume]));\n-            llvm::SetLinkage(used, llvm::AppendingLinkage);\n-            llvm::LLVMSetSection(used, \"llvm.metadata\\0\".as_ptr() as *const _)\n         }\n-        ccx.unwind_resume_hooked().set(true);\n     }\n }\n "}, {"sha": "0f7ea334c889d4ea53815757112c9a0e750c1981", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=1da466253c1fe6491f330a4ae5aa56da950928bf", "patch": "@@ -146,8 +146,8 @@ pub struct LocalCrateContext<'tcx> {\n     dbg_cx: Option<debuginfo::CrateDebugContext<'tcx>>,\n \n     eh_personality: RefCell<Option<ValueRef>>,\n+    eh_unwind_resume: RefCell<Option<ValueRef>>,\n     rust_try_fn: RefCell<Option<ValueRef>>,\n-    unwind_resume_hooked: Cell<bool>,\n \n     intrinsics: RefCell<FnvHashMap<&'static str, ValueRef>>,\n \n@@ -466,8 +466,8 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 closure_vals: RefCell::new(FnvHashMap()),\n                 dbg_cx: dbg_cx,\n                 eh_personality: RefCell::new(None),\n+                eh_unwind_resume: RefCell::new(None),\n                 rust_try_fn: RefCell::new(None),\n-                unwind_resume_hooked: Cell::new(false),\n                 intrinsics: RefCell::new(FnvHashMap()),\n                 n_llvm_insns: Cell::new(0),\n                 trait_cache: RefCell::new(FnvHashMap()),\n@@ -728,12 +728,12 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local.eh_personality\n     }\n \n-    pub fn rust_try_fn<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> {\n-        &self.local.rust_try_fn\n+    pub fn eh_unwind_resume<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> {\n+        &self.local.eh_unwind_resume\n     }\n \n-    pub fn unwind_resume_hooked<'a>(&'a self) -> &'a Cell<bool> {\n-        &self.local.unwind_resume_hooked\n+    pub fn rust_try_fn<'a>(&'a self) -> &'a RefCell<Option<ValueRef>> {\n+        &self.local.rust_try_fn\n     }\n \n     fn intrinsics<'a>(&'a self) -> &'a RefCell<FnvHashMap<&'static str, ValueRef>> {"}, {"sha": "b8fa826b93948be02d44c14252b27701629f995d", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da466253c1fe6491f330a4ae5aa56da950928bf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=1da466253c1fe6491f330a4ae5aa56da950928bf", "patch": "@@ -1315,7 +1315,7 @@ fn trans_msvc_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         // The \"catch-resume\" block is where we're running this landing pad but\n         // we actually need to not catch the exception, so just resume the\n         // exception to return.\n-        Resume(catch_resume, vals);\n+        trans_unwind_resume(catch_resume, vals);\n \n         // On the successful branch we just return null.\n         Ret(then, C_null(Type::i8p(ccx)), dloc);"}]}