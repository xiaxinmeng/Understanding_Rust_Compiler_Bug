{"sha": "980065ab23650452c33bb47ef66d75fbfbcb6e04", "node_id": "C_kwDOAAsO6NoAKDk4MDA2NWFiMjM2NTA0NTJjMzNiYjQ3ZWY2NmQ3NWZiZmJjYjZlMDQ", "commit": {"author": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-12-06T08:32:11Z"}, "committer": {"name": "Florian Bartels", "email": "Florian.Bartels@elektrobit.com", "date": "2022-12-06T08:38:09Z"}, "message": "Make sentinel value configurable\n\nThere are OSs that always return the lowest free value.\nThe algorithm in `lazy_init` always avoids keys with the\nsentinel value.\nIn affected OSs, this means that each call to `lazy_init`\nwill always request two keys from the OS and returns/frees\nthe first one (with sentinel value) immediately afterwards.\n\nBy making the sentinel value configurable, affected OSs can\nuse a different value than zero to prevent this performance\nissue.", "tree": {"sha": "f3d46669b7c256204f7095bb41f1a842b0c10666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d46669b7c256204f7095bb41f1a842b0c10666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/980065ab23650452c33bb47ef66d75fbfbcb6e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/980065ab23650452c33bb47ef66d75fbfbcb6e04", "html_url": "https://github.com/rust-lang/rust/commit/980065ab23650452c33bb47ef66d75fbfbcb6e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/980065ab23650452c33bb47ef66d75fbfbcb6e04/comments", "author": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flba-eb", "id": 108917393, "node_id": "U_kgDOBn3ykQ", "avatar_url": "https://avatars.githubusercontent.com/u/108917393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flba-eb", "html_url": "https://github.com/flba-eb", "followers_url": "https://api.github.com/users/flba-eb/followers", "following_url": "https://api.github.com/users/flba-eb/following{/other_user}", "gists_url": "https://api.github.com/users/flba-eb/gists{/gist_id}", "starred_url": "https://api.github.com/users/flba-eb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flba-eb/subscriptions", "organizations_url": "https://api.github.com/users/flba-eb/orgs", "repos_url": "https://api.github.com/users/flba-eb/repos", "events_url": "https://api.github.com/users/flba-eb/events{/privacy}", "received_events_url": "https://api.github.com/users/flba-eb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61c139c2bc778ebb91f5dd6a5393aa20467f78", "html_url": "https://github.com/rust-lang/rust/commit/ed61c139c2bc778ebb91f5dd6a5393aa20467f78"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "2672a2a75b017bc4cec15931f3f68cfad622f7ea", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/980065ab23650452c33bb47ef66d75fbfbcb6e04/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/980065ab23650452c33bb47ef66d75fbfbcb6e04/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=980065ab23650452c33bb47ef66d75fbfbcb6e04", "patch": "@@ -117,10 +117,14 @@ pub struct Key {\n /// This value specifies no destructor by default.\n pub const INIT: StaticKey = StaticKey::new(None);\n \n+// Define a sentinel value that is unlikely to be returned\n+// as a TLS key (but it may be returned).\n+const KEY_SENTVAL: usize = 0;\n+\n impl StaticKey {\n     #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]\n     pub const fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> StaticKey {\n-        StaticKey { key: atomic::AtomicUsize::new(0), dtor }\n+        StaticKey { key: atomic::AtomicUsize::new(KEY_SENTVAL), dtor }\n     }\n \n     /// Gets the value associated with this TLS key\n@@ -144,31 +148,36 @@ impl StaticKey {\n     #[inline]\n     unsafe fn key(&self) -> imp::Key {\n         match self.key.load(Ordering::Relaxed) {\n-            0 => self.lazy_init() as imp::Key,\n+            KEY_SENTVAL => self.lazy_init() as imp::Key,\n             n => n as imp::Key,\n         }\n     }\n \n     unsafe fn lazy_init(&self) -> usize {\n-        // POSIX allows the key created here to be 0, but the compare_exchange\n-        // below relies on using 0 as a sentinel value to check who won the\n+        // POSIX allows the key created here to be KEY_SENTVAL, but the compare_exchange\n+        // below relies on using KEY_SENTVAL as a sentinel value to check who won the\n         // race to set the shared TLS key. As far as I know, there is no\n         // guaranteed value that cannot be returned as a posix_key_create key,\n         // so there is no value we can initialize the inner key with to\n         // prove that it has not yet been set. As such, we'll continue using a\n-        // value of 0, but with some gyrations to make sure we have a non-0\n+        // value of KEY_SENTVAL, but with some gyrations to make sure we have a non-KEY_SENTVAL\n         // value returned from the creation routine.\n         // FIXME: this is clearly a hack, and should be cleaned up.\n         let key1 = imp::create(self.dtor);\n-        let key = if key1 != 0 {\n+        let key = if key1 as usize != KEY_SENTVAL {\n             key1\n         } else {\n             let key2 = imp::create(self.dtor);\n             imp::destroy(key1);\n             key2\n         };\n-        rtassert!(key != 0);\n-        match self.key.compare_exchange(0, key as usize, Ordering::SeqCst, Ordering::SeqCst) {\n+        rtassert!(key as usize != KEY_SENTVAL);\n+        match self.key.compare_exchange(\n+            KEY_SENTVAL,\n+            key as usize,\n+            Ordering::SeqCst,\n+            Ordering::SeqCst,\n+        ) {\n             // The CAS succeeded, so we've created the actual key\n             Ok(_) => key as usize,\n             // If someone beat us to the punch, use their key instead"}]}