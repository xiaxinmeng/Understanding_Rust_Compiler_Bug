{"sha": "0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "node_id": "C_kwDOAAsO6NoAKDBjZDg3MTQ4ZDkwNWU0YjdkZDA1OTllZGNkMjg2NmRkM2VhN2ZmYjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-27T07:25:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-27T07:25:09Z"}, "message": "Rollup merge of #103106 - saethlin:from_exposed_docs, r=thomcc\n\nTry to say that memory outside the AM is always exposed\n\ncc ``@Gankra`` ``@thomcc``\n\nI want to confidently tell people that they can use `from_exposed_addr` to get a pointer for doing MMIO and/or other hardware interactions done with volatile reads/writes at particular addresses outside the Rust AM. Currently, the docs indicate that would be UB.\n\nWith this change, now the docs indicate that this is intended to be a valid use of `from_exposed_addr`.\n\nr? ``@RalfJung``", "tree": {"sha": "790bba25492d96d7d60a9369d43c1dbc6748733a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790bba25492d96d7d60a9369d43c1dbc6748733a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWjJVCRBK7hj4Ov3rIwAAdfIIAI2uzFQLX1FzyV4Tm4hhFwgy\nYtnhbSD+Qjh3y864zmhNfm9SFi72aY8Grr1J2s1LAcuBjElOSP58eG688GcPCmJ3\nZOtO779WXB72cckv6KHsSvgHJQRW0044BHaY6SDeSTqqEntiwMUYoz6GeR0Uj+ii\nAlKPGgx0Y3Lsl7WDQ+uBvQxLO+nCi5/fguUPnyEWO/bfEjfOgWP+VYnpUIuLgBDo\nPdbFEj7oFxdSieRlyEzIEpzeKIRV8u5Ia//4lihH7/2HhloglZ26zgS2QKKVAxX/\nayFVfaSXzLdpGOapkQRH8LP+tHJ1g7JypuRu0oNW8PXtVCCkMFnS/PX0sHPU81M=\n=2szb\n-----END PGP SIGNATURE-----\n", "payload": "tree 790bba25492d96d7d60a9369d43c1dbc6748733a\nparent 2937621aa7ad494b1ef2da3a8e814ac6e101e181\nparent bd947632b5da12ccb28a446a62898862f8f415ed\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666855509 +0200\ncommitter GitHub <noreply@github.com> 1666855509 +0200\n\nRollup merge of #103106 - saethlin:from_exposed_docs, r=thomcc\n\nTry to say that memory outside the AM is always exposed\n\ncc ``@Gankra`` ``@thomcc``\n\nI want to confidently tell people that they can use `from_exposed_addr` to get a pointer for doing MMIO and/or other hardware interactions done with volatile reads/writes at particular addresses outside the Rust AM. Currently, the docs indicate that would be UB.\n\nWith this change, now the docs indicate that this is intended to be a valid use of `from_exposed_addr`.\n\nr? ``@RalfJung``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "html_url": "https://github.com/rust-lang/rust/commit/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2937621aa7ad494b1ef2da3a8e814ac6e101e181", "url": "https://api.github.com/repos/rust-lang/rust/commits/2937621aa7ad494b1ef2da3a8e814ac6e101e181", "html_url": "https://github.com/rust-lang/rust/commit/2937621aa7ad494b1ef2da3a8e814ac6e101e181"}, {"sha": "bd947632b5da12ccb28a446a62898862f8f415ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd947632b5da12ccb28a446a62898862f8f415ed", "html_url": "https://github.com/rust-lang/rust/commit/bd947632b5da12ccb28a446a62898862f8f415ed"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "565c38d222a2c4339ceec5e77fc9d8a0adeae978", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=0cd87148d905e4b7dd0599edcd2866dd3ea7ffb7", "patch": "@@ -581,12 +581,21 @@ pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n /// Convert an address back to a pointer, picking up a previously 'exposed' provenance.\n ///\n /// This is equivalent to `addr as *const T`. The provenance of the returned pointer is that of *any*\n-/// pointer that was previously passed to [`expose_addr`][pointer::expose_addr] or a `ptr as usize`\n-/// cast. If there is no previously 'exposed' provenance that justifies the way this pointer will be\n-/// used, the program has undefined behavior. Note that there is no algorithm that decides which\n-/// provenance will be used. You can think of this as \"guessing\" the right provenance, and the guess\n-/// will be \"maximally in your favor\", in the sense that if there is any way to avoid undefined\n-/// behavior, then that is the guess that will be taken.\n+/// pointer that was previously exposed by passing it to [`expose_addr`][pointer::expose_addr],\n+/// or a `ptr as usize` cast. In addition, memory which is outside the control of the Rust abstract\n+/// machine (MMIO registers, for example) is always considered to be exposed, so long as this memory\n+/// is disjoint from memory that will be used by the abstract machine such as the stack, heap,\n+/// and statics.\n+///\n+/// If there is no 'exposed' provenance that justifies the way this pointer will be used,\n+/// the program has undefined behavior. In particular, the aliasing rules still apply: pointers\n+/// and references that have been invalidated due to aliasing accesses cannot be used any more,\n+/// even if they have been exposed!\n+///\n+/// Note that there is no algorithm that decides which provenance will be used. You can think of this\n+/// as \"guessing\" the right provenance, and the guess will be \"maximally in your favor\", in the sense\n+/// that if there is any way to avoid undefined behavior (while upholding all aliasing requirements),\n+/// then that is the guess that will be taken.\n ///\n /// On platforms with multiple address spaces, it is your responsibility to ensure that the\n /// address makes sense in the address space that this pointer will be used with."}]}