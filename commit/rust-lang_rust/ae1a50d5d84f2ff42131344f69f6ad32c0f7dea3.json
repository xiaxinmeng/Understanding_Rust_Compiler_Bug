{"sha": "ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWE1MGQ1ZDg0ZjJmZjQyMTMxMzQ0ZjY5ZjZhZDMyYzBmN2RlYTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-04T15:54:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-01-04T15:54:33Z"}, "message": "rustc: Place wasm linker args first instead of last\n\nThis ensures that arguments passed via `-C link-arg` can override the\nfirst ones on the command line, for example allowing configuring of the\nstack size.", "tree": {"sha": "079533f0053c58dea6a3a31298e1e559ddfecd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079533f0053c58dea6a3a31298e1e559ddfecd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3", "html_url": "https://github.com/rust-lang/rust/commit/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2442823ef572a65092fbc46f6975633f983b50b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2442823ef572a65092fbc46f6975633f983b50b6", "html_url": "https://github.com/rust-lang/rust/commit/2442823ef572a65092fbc46f6975633f983b50b6"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "06d4f940436da82fd0e545cc950815461782dc12", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 62, "deletions": 60, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=ae1a50d5d84f2ff42131344f69f6ad32c0f7dea3", "patch": "@@ -81,11 +81,7 @@ impl LinkerInfo {\n             }\n \n             LinkerFlavor::Lld(LldFlavor::Wasm) => {\n-                Box::new(WasmLd {\n-                    cmd,\n-                    sess,\n-                    info: self\n-                }) as Box<dyn Linker>\n+                Box::new(WasmLd::new(cmd, sess, self)) as Box<dyn Linker>\n             }\n         }\n     }\n@@ -876,6 +872,67 @@ pub struct WasmLd<'a> {\n     info: &'a LinkerInfo,\n }\n \n+impl<'a> WasmLd<'a> {\n+    fn new(mut cmd: Command, sess: &'a Session, info: &'a LinkerInfo) -> WasmLd<'a> {\n+        // There have been reports in the wild (rustwasm/wasm-bindgen#119) of\n+        // using threads causing weird hangs and bugs. Disable it entirely as\n+        // this isn't yet the bottleneck of compilation at all anyway.\n+        cmd.arg(\"--no-threads\");\n+\n+        // By default LLD only gives us one page of stack (64k) which is a\n+        // little small. Default to a larger stack closer to other PC platforms\n+        // (1MB) and users can always inject their own link-args to override this.\n+        cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n+\n+        // By default LLD's memory layout is:\n+        //\n+        // 1. First, a blank page\n+        // 2. Next, all static data\n+        // 3. Finally, the main stack (which grows down)\n+        //\n+        // This has the unfortunate consequence that on stack overflows you\n+        // corrupt static data and can cause some exceedingly weird bugs. To\n+        // help detect this a little sooner we instead request that the stack is\n+        // placed before static data.\n+        //\n+        // This means that we'll generate slightly larger binaries as references\n+        // to static data will take more bytes in the ULEB128 encoding, but\n+        // stack overflow will be guaranteed to trap as it underflows instead of\n+        // corrupting static data.\n+        cmd.arg(\"--stack-first\");\n+\n+        // FIXME we probably shouldn't pass this but instead pass an explicit\n+        // whitelist of symbols we'll allow to be undefined. Unfortunately\n+        // though we can't handle symbols like `log10` that LLVM injects at a\n+        // super late date without actually parsing object files. For now let's\n+        // stick to this and hopefully fix it before stabilization happens.\n+        cmd.arg(\"--allow-undefined\");\n+\n+        // For now we just never have an entry symbol\n+        cmd.arg(\"--no-entry\");\n+\n+        // Make the default table accessible\n+        cmd.arg(\"--export-table\");\n+\n+        // Rust code should never have warnings, and warnings are often\n+        // indicative of bugs, let's prevent them.\n+        cmd.arg(\"--fatal-warnings\");\n+\n+        // The symbol visibility story is a bit in flux right now with LLD.\n+        // It's... not entirely clear to me what's going on, but this looks to\n+        // make everything work when `export_symbols` isn't otherwise called for\n+        // things like executables.\n+        cmd.arg(\"--export-dynamic\");\n+\n+        // LLD only implements C++-like demangling, which doesn't match our own\n+        // mangling scheme. Tell LLD to not demangle anything and leave it up to\n+        // us to demangle these symbols later.\n+        cmd.arg(\"--no-demangle\");\n+\n+        WasmLd { cmd, sess, info }\n+    }\n+}\n+\n impl<'a> Linker for WasmLd<'a> {\n     fn link_dylib(&mut self, lib: &str) {\n         self.cmd.arg(\"-l\").arg(lib);\n@@ -982,61 +1039,6 @@ impl<'a> Linker for WasmLd<'a> {\n     }\n \n     fn finalize(&mut self) -> Command {\n-        // There have been reports in the wild (rustwasm/wasm-bindgen#119) of\n-        // using threads causing weird hangs and bugs. Disable it entirely as\n-        // this isn't yet the bottleneck of compilation at all anyway.\n-        self.cmd.arg(\"--no-threads\");\n-\n-        // By default LLD only gives us one page of stack (64k) which is a\n-        // little small. Default to a larger stack closer to other PC platforms\n-        // (1MB) and users can always inject their own link-args to override this.\n-        self.cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n-\n-        // By default LLD's memory layout is:\n-        //\n-        // 1. First, a blank page\n-        // 2. Next, all static data\n-        // 3. Finally, the main stack (which grows down)\n-        //\n-        // This has the unfortunate consequence that on stack overflows you\n-        // corrupt static data and can cause some exceedingly weird bugs. To\n-        // help detect this a little sooner we instead request that the stack is\n-        // placed before static data.\n-        //\n-        // This means that we'll generate slightly larger binaries as references\n-        // to static data will take more bytes in the ULEB128 encoding, but\n-        // stack overflow will be guaranteed to trap as it underflows instead of\n-        // corrupting static data.\n-        self.cmd.arg(\"--stack-first\");\n-\n-        // FIXME we probably shouldn't pass this but instead pass an explicit\n-        // whitelist of symbols we'll allow to be undefined. Unfortunately\n-        // though we can't handle symbols like `log10` that LLVM injects at a\n-        // super late date without actually parsing object files. For now let's\n-        // stick to this and hopefully fix it before stabilization happens.\n-        self.cmd.arg(\"--allow-undefined\");\n-\n-        // For now we just never have an entry symbol\n-        self.cmd.arg(\"--no-entry\");\n-\n-        // Make the default table accessible\n-        self.cmd.arg(\"--export-table\");\n-\n-        // Rust code should never have warnings, and warnings are often\n-        // indicative of bugs, let's prevent them.\n-        self.cmd.arg(\"--fatal-warnings\");\n-\n-        // The symbol visibility story is a bit in flux right now with LLD.\n-        // It's... not entirely clear to me what's going on, but this looks to\n-        // make everything work when `export_symbols` isn't otherwise called for\n-        // things like executables.\n-        self.cmd.arg(\"--export-dynamic\");\n-\n-        // LLD only implements C++-like demangling, which doesn't match our own\n-        // mangling scheme. Tell LLD to not demangle anything and leave it up to\n-        // us to demangle these symbols later.\n-        self.cmd.arg(\"--no-demangle\");\n-\n         ::std::mem::replace(&mut self.cmd, Command::new(\"\"))\n     }\n "}]}