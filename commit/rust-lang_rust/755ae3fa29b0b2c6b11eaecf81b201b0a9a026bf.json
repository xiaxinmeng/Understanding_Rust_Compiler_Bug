{"sha": "755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf", "node_id": "C_kwDOAAsO6NoAKDc1NWFlM2ZhMjliMGIyYzZiMTFlYWVjZjgxYjIwMWIwYTlhMDI2YmY", "commit": {"author": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2023-01-04T22:58:07Z"}, "committer": {"name": "Kyle Huey", "email": "khuey@kylehuey.com", "date": "2023-01-04T22:58:07Z"}, "message": "Fix spelling while we're in the neighborhood.", "tree": {"sha": "8d4a53c42c0087475ad1f600a9f3f4a1f43ff171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4a53c42c0087475ad1f600a9f3f4a1f43ff171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf", "html_url": "https://github.com/rust-lang/rust/commit/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf/comments", "author": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "khuey", "id": 325892, "node_id": "MDQ6VXNlcjMyNTg5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/325892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khuey", "html_url": "https://github.com/khuey", "followers_url": "https://api.github.com/users/khuey/followers", "following_url": "https://api.github.com/users/khuey/following{/other_user}", "gists_url": "https://api.github.com/users/khuey/gists{/gist_id}", "starred_url": "https://api.github.com/users/khuey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khuey/subscriptions", "organizations_url": "https://api.github.com/users/khuey/orgs", "repos_url": "https://api.github.com/users/khuey/repos", "events_url": "https://api.github.com/users/khuey/events{/privacy}", "received_events_url": "https://api.github.com/users/khuey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c1605d5151c86215ad609feadead811e5602c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1605d5151c86215ad609feadead811e5602c0", "html_url": "https://github.com/rust-lang/rust/commit/d0c1605d5151c86215ad609feadead811e5602c0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c87f5daab6f241ebfc51e0b75f3275dd058c4fcf", "filename": "clippy_lints/src/methods/iter_kv_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=755ae3fa29b0b2c6b11eaecf81b201b0a9a026bf", "patch": "@@ -30,7 +30,7 @@ pub(super) fn check<'tcx>(\n         if let Body {params: [p], value: body_expr, generator_kind: _ } = cx.tcx.hir().body(c.body);\n         if let PatKind::Tuple([key_pat, val_pat], _) = p.pat.kind;\n \n-        let (replacement_kind, annotation, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n+        let (replacement_kind, annotation, bound_ident) = match (&key_pat.kind, &val_pat.kind) {\n             (key, PatKind::Binding(ann, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", ann, value),\n             (PatKind::Binding(ann, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", ann, key),\n             _ => return,\n@@ -47,7 +47,7 @@ pub(super) fn check<'tcx>(\n             if_chain! {\n                 if let ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) = body_expr.kind;\n                 if let [local_ident] = path.segments;\n-                if local_ident.ident.as_str() == binded_ident.as_str();\n+                if local_ident.ident.as_str() == bound_ident.as_str();\n \n                 then {\n                     span_lint_and_sugg(\n@@ -76,7 +76,7 @@ pub(super) fn check<'tcx>(\n                         expr.span,\n                         &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{ref_annotation}{mut_annotation}{binded_ident}| {})\",\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{ref_annotation}{mut_annotation}{bound_ident}| {})\",\n                             snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n                         applicability,\n                     );"}]}