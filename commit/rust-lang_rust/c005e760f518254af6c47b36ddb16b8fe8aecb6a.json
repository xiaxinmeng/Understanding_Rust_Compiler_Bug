{"sha": "c005e760f518254af6c47b36ddb16b8fe8aecb6a", "node_id": "C_kwDOAAsO6NoAKGMwMDVlNzYwZjUxODI1NGFmNmM0N2IzNmRkYjE2YjhmZThhZWNiNmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-16T06:27:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:34:52Z"}, "message": "Rework point-at-arg", "tree": {"sha": "0a4af4548e859e4cae781a98915c92c41207f364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4af4548e859e4cae781a98915c92c41207f364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c005e760f518254af6c47b36ddb16b8fe8aecb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c005e760f518254af6c47b36ddb16b8fe8aecb6a", "html_url": "https://github.com/rust-lang/rust/commit/c005e760f518254af6c47b36ddb16b8fe8aecb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c005e760f518254af6c47b36ddb16b8fe8aecb6a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb80d2bfe4413b2e3228dc76a792744dbc1892be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb80d2bfe4413b2e3228dc76a792744dbc1892be", "html_url": "https://github.com/rust-lang/rust/commit/fb80d2bfe4413b2e3228dc76a792744dbc1892be"}], "stats": {"total": 2051, "additions": 1269, "deletions": 782}, "files": [{"sha": "59ea1f3f9de456187016a69e4d8d82f51dfa26c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -740,12 +740,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.help(\"...or use `match` instead of `let...else`\");\n             }\n             _ => {\n-                if let ObligationCauseCode::BindingObligation(_, binding_span) =\n-                    cause.code().peel_derives()\n+                if let ObligationCauseCode::BindingObligation(_, span)\n+                | ObligationCauseCode::ExprBindingObligation(_, span, ..)\n+                    = cause.code().peel_derives()\n+                    && let TypeError::RegionsPlaceholderMismatch = terr\n                 {\n-                    if matches!(terr, TypeError::RegionsPlaceholderMismatch) {\n-                        err.span_note(*binding_span, \"the lifetime requirement is introduced here\");\n-                    }\n+                    err.span_note(*span, \"the lifetime requirement is introduced here\");\n                 }\n             }\n         }"}, {"sha": "c20b96cae2e4f000a28da7346e06c14b1b40e2f0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let ObligationCauseCode::MatchImpl(parent, impl_def_id) = code else {\n             return None;\n         };\n-        let ObligationCauseCode::BindingObligation(_def_id, binding_span) = *parent.code() else {\n+        let (ObligationCauseCode::BindingObligation(_, binding_span) | ObligationCauseCode::ExprBindingObligation(_, binding_span, ..))\n+            = *parent.code() else {\n             return None;\n         };\n         let mut err = self.tcx().sess.struct_span_err(cause.span, \"incompatible lifetime on type\");"}, {"sha": "d4db0751212f7ce8033af90f00171a9ccb697fcc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -211,7 +211,10 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n         );\n         let mut err = self.tcx().sess.struct_span_err(span, &msg);\n \n-        let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id) = *cause.code() {\n+        let leading_ellipsis = if let ObligationCauseCode::ItemObligation(def_id)\n+        | ObligationCauseCode::ExprItemObligation(def_id, ..) =\n+            *cause.code()\n+        {\n             err.span_label(span, \"doesn't satisfy where-clause\");\n             err.span_label(\n                 self.tcx().def_span(def_id),"}, {"sha": "f804569b0747ea0c45771f7f6be92de3fc603e02", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ObligationCauseCode::MatchImpl(parent, ..) => parent.code(),\n                 _ => cause.code(),\n             }\n-            && let (&ObligationCauseCode::ItemObligation(item_def_id), None) = (code, override_error_code)\n+            && let (&ObligationCauseCode::ItemObligation(item_def_id) | &ObligationCauseCode::ExprItemObligation(item_def_id, ..), None) = (code, override_error_code)\n         {\n             // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n             // lifetime as above, but called using a fully-qualified path to the method:"}, {"sha": "8c465b087600262b7faa86f835ef1c271487052a", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -390,10 +390,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if matches!(\n                     &trace.cause.code().peel_derives(),\n                     ObligationCauseCode::BindingObligation(..)\n+                        | ObligationCauseCode::ExprBindingObligation(..)\n                 ) =>\n             {\n                 // Hack to get around the borrow checker because trace.cause has an `Rc`.\n-                if let ObligationCauseCode::BindingObligation(_, span) =\n+                if let ObligationCauseCode::BindingObligation(_, span)\n+                | ObligationCauseCode::ExprBindingObligation(_, span, ..) =\n                     &trace.cause.code().peel_derives()\n                 {\n                     let span = *span;"}, {"sha": "dded0a0a6b1b4e51a75ab741e60f5871cafe7d3b", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -97,7 +97,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 cause.span,\n                 sup_type,\n                 match cause.code().peel_derives() {\n-                    ObligationCauseCode::BindingObligation(_, span) => Some(*span),\n+                    ObligationCauseCode::BindingObligation(_, span)\n+                    | ObligationCauseCode::ExprBindingObligation(_, span, ..) => Some(*span),\n                     _ => None,\n                 },\n             )"}, {"sha": "e91878c62fd6c455d5e0486308e39134f35fb270", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -238,9 +238,13 @@ pub enum ObligationCauseCode<'tcx> {\n     /// also implement all supertraits of `X`.\n     ItemObligation(DefId),\n \n+    ExprItemObligation(DefId, rustc_hir::HirId, usize),\n+\n     /// Like `ItemObligation`, but with extra detail on the source of the obligation.\n     BindingObligation(DefId, Span),\n \n+    ExprBindingObligation(DefId, Span, rustc_hir::HirId, usize),\n+\n     /// A type like `&'a T` is WF only if `T: 'a`.\n     ReferenceOutlivesReferent(Ty<'tcx>),\n "}, {"sha": "ab445afe6d6ea20f5fe7e2f2e05a205823934fb6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1564,6 +1564,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     obligation.cause.code().peel_derives(),\n                     ObligationCauseCode::ItemObligation(_)\n                         | ObligationCauseCode::BindingObligation(_, _)\n+                        | ObligationCauseCode::ExprItemObligation(..)\n+                        | ObligationCauseCode::ExprBindingObligation(..)\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n@@ -2091,13 +2093,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                if let ObligationCauseCode::ItemObligation(def_id) = *obligation.cause.code() {\n+                if let ObligationCauseCode::ItemObligation(def_id) | ObligationCauseCode::ExprItemObligation(def_id, ..) = *obligation.cause.code() {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n-                } else if let (\n-                    Ok(ref snippet),\n-                    &ObligationCauseCode::BindingObligation(def_id, _),\n-                ) =\n-                    (self.tcx.sess.source_map().span_to_snippet(span), obligation.cause.code())\n+                } else if let Ok(snippet) = &self.tcx.sess.source_map().span_to_snippet(span)\n+                    && let ObligationCauseCode::BindingObligation(def_id, _) | ObligationCauseCode::ExprBindingObligation(def_id, ..)\n+                        = *obligation.cause.code()\n                 {\n                     let generics = self.tcx.generics_of(def_id);\n                     if generics.params.iter().any(|p| p.name != kw::SelfUpper)\n@@ -2520,15 +2520,10 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n-        let (\n-            ty::PredicateKind::Trait(pred),\n-            &ObligationCauseCode::BindingObligation(item_def_id, span),\n-        ) = (\n-            obligation.predicate.kind().skip_binder(),\n-            obligation.cause.code().peel_derives(),\n-        )  else {\n-            return;\n-        };\n+        let ty::PredicateKind::Trait(pred) = obligation.predicate.kind().skip_binder() else { return; };\n+        let (ObligationCauseCode::BindingObligation(item_def_id, span)\n+        | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..))\n+            = *obligation.cause.code().peel_derives() else { return; };\n         debug!(?pred, ?item_def_id, ?span);\n \n         let (Some(node), true) = ("}, {"sha": "6b03555bc6985b689c103c2247a70f4effc43976", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -143,7 +143,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         if let ObligationCauseCode::ItemObligation(item)\n-        | ObligationCauseCode::BindingObligation(item, _) = *obligation.cause.code()\n+        | ObligationCauseCode::BindingObligation(item, _)\n+        | ObligationCauseCode::ExprItemObligation(item, ..)\n+        | ObligationCauseCode::ExprBindingObligation(item, ..) = *obligation.cause.code()\n         {\n             // FIXME: maybe also have some way of handling methods\n             // from other traits? That would require name resolution,"}, {"sha": "418eae9b0e8d7ed9108f50c0bc81130d4afecd8f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1022,7 +1022,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n-        | ObligationCauseCode::ItemObligation(..) = code\n+        | ObligationCauseCode::ItemObligation(_)\n+        | ObligationCauseCode::ExprItemObligation(..)\n+        | ObligationCauseCode::ExprBindingObligation(..) = code\n         {\n             try_borrowing(poly_trait_pred, &never_suggest_borrow)\n         } else {\n@@ -2244,11 +2246,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     region, object_ty,\n                 ));\n             }\n-            ObligationCauseCode::ItemObligation(_item_def_id) => {\n+            ObligationCauseCode::ItemObligation(_)\n+            | ObligationCauseCode::ExprItemObligation(..) => {\n                 // We hold the `DefId` of the item introducing the obligation, but displaying it\n                 // doesn't add user usable information. It always point at an associated item.\n             }\n-            ObligationCauseCode::BindingObligation(item_def_id, span) => {\n+            ObligationCauseCode::BindingObligation(item_def_id, span)\n+            | ObligationCauseCode::ExprBindingObligation(item_def_id, span, ..) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let mut multispan = MultiSpan::from(span);\n                 if let Some(ident) = tcx.opt_item_ident(item_def_id) {"}, {"sha": "85ff6e23711ca4624e8490ab81ff2edb61d2854c", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -117,11 +117,21 @@ pub enum TraitQueryMode {\n \n /// Creates predicate obligations from the generic bounds.\n pub fn predicates_for_generics<'tcx>(\n-    cause: ObligationCause<'tcx>,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     generic_bounds: ty::InstantiatedPredicates<'tcx>,\n ) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    util::predicates_for_generics(cause, 0, param_env, generic_bounds)\n+    let generic_bounds = generic_bounds;\n+    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n+\n+    std::iter::zip(generic_bounds.predicates, generic_bounds.spans).enumerate().map(\n+        move |(idx, (predicate, span))| Obligation {\n+            cause: cause(idx, span),\n+            recursion_depth: 0,\n+            param_env: param_env,\n+            predicate,\n+        },\n+    )\n }\n \n /// Determines whether the type `ty` is known to meet `bound` and"}, {"sha": "0f5dff01c6625387b24c2bc5e521be2b1095b0f6", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -11,8 +11,6 @@ use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable\n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n \n-use std::iter;\n-\n ///////////////////////////////////////////////////////////////////////////\n // `TraitAliasExpander` iterator\n ///////////////////////////////////////////////////////////////////////////\n@@ -210,7 +208,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     let Normalized { value: predicates, obligations: normalization_obligations2 } =\n         super::normalize(selcx, param_env, ObligationCause::dummy(), predicates);\n     let impl_obligations =\n-        predicates_for_generics(ObligationCause::dummy(), 0, param_env, predicates);\n+        super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n \n     let impl_obligations = impl_obligations\n         .chain(normalization_obligations1.into_iter())\n@@ -219,27 +217,6 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     (subject, impl_obligations)\n }\n \n-pub fn predicates_for_generics<'tcx>(\n-    cause: ObligationCause<'tcx>,\n-    recursion_depth: usize,\n-    param_env: ty::ParamEnv<'tcx>,\n-    generic_bounds: ty::InstantiatedPredicates<'tcx>,\n-) -> impl Iterator<Item = PredicateObligation<'tcx>> {\n-    debug!(\"predicates_for_generics(generic_bounds={:?})\", generic_bounds);\n-\n-    iter::zip(generic_bounds.predicates, generic_bounds.spans).map(move |(predicate, span)| {\n-        let cause = match *cause.code() {\n-            traits::ItemObligation(def_id) if !span.is_dummy() => traits::ObligationCause::new(\n-                cause.span,\n-                cause.body_id,\n-                traits::BindingObligation(def_id, span),\n-            ),\n-            _ => cause.clone(),\n-        };\n-        Obligation { cause, recursion_depth, param_env, predicate }\n-    })\n-}\n-\n pub fn predicate_for_trait_ref<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cause: ObligationCause<'tcx>,"}, {"sha": "4bd179d23913143dd663bd7c7899677264f5c3ba", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -711,7 +711,7 @@ impl<'tcx> WfPredicates<'tcx> {\n         iter::zip(iter::zip(predicates.predicates, predicates.spans), origins.into_iter().rev())\n             .map(|((mut pred, span), origin_def_id)| {\n                 let code = if span.is_dummy() {\n-                    traits::MiscObligation\n+                    traits::ItemObligation(origin_def_id)\n                 } else {\n                     traits::BindingObligation(origin_def_id, span)\n                 };"}, {"sha": "64846953aac753f94f335a7e3d580b7fc3bcef15", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1463,7 +1463,7 @@ pub fn check_type_bounds<'tcx>(\n         );\n         let mk_cause = |span: Span| {\n             let code = if span.is_dummy() {\n-                traits::MiscObligation\n+                traits::ItemObligation(trait_ty.def_id)\n             } else {\n                 traits::BindingObligation(trait_ty.def_id, span)\n             };"}, {"sha": "20d25d508d224e9749e631f3e8a4cfb5905cbe1e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -607,9 +607,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        let errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n+        let mut errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n \n         if !errors.is_empty() {\n+            self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n         }\n     }\n@@ -623,6 +624,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n+            self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n             self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);\n         }\n     }\n@@ -820,23 +822,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));\n-        self.add_required_obligations_with_code(\n-            span,\n-            def_id,\n-            &substs,\n-            match lang_item {\n-                hir::LangItem::IntoFutureIntoFuture => {\n-                    ObligationCauseCode::AwaitableExpr(expr_hir_id)\n-                }\n-                hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n-                    ObligationCauseCode::ForLoopIterator\n-                }\n-                hir::LangItem::TryTraitFromOutput\n-                | hir::LangItem::TryTraitFromResidual\n-                | hir::LangItem::TryTraitBranch => ObligationCauseCode::QuestionMark,\n-                _ => traits::ItemObligation(def_id),\n-            },\n-        );\n+\n+        let code = match lang_item {\n+            hir::LangItem::IntoFutureIntoFuture => {\n+                Some(ObligationCauseCode::AwaitableExpr(expr_hir_id))\n+            }\n+            hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n+                Some(ObligationCauseCode::ForLoopIterator)\n+            }\n+            hir::LangItem::TryTraitFromOutput\n+            | hir::LangItem::TryTraitFromResidual\n+            | hir::LangItem::TryTraitBranch => Some(ObligationCauseCode::QuestionMark),\n+            _ => None,\n+        };\n+        if let Some(code) = code {\n+            self.add_required_obligations_with_code(span, def_id, substs, move |_, _| code.clone());\n+        } else {\n+            self.add_required_obligations_for_hir(span, def_id, substs, hir_id);\n+        }\n+\n         (Res::Def(def_kind, def_id), ty)\n     }\n \n@@ -1348,7 +1352,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n \n-        self.add_required_obligations(span, def_id, &substs);\n+        self.add_required_obligations_for_hir(span, def_id, &substs, hir_id);\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n@@ -1385,32 +1389,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Add all the obligations that are required, substituting and normalized appropriately.\n-    pub(crate) fn add_required_obligations(\n+    pub(crate) fn add_required_obligations_for_hir(\n         &self,\n         span: Span,\n         def_id: DefId,\n-        substs: &SubstsRef<'tcx>,\n+        substs: SubstsRef<'tcx>,\n+        hir_id: hir::HirId,\n     ) {\n-        self.add_required_obligations_with_code(\n-            span,\n-            def_id,\n-            substs,\n-            traits::ItemObligation(def_id),\n-        )\n+        self.add_required_obligations_with_code(span, def_id, substs, |idx, span| {\n+            if span.is_dummy() {\n+                ObligationCauseCode::ExprItemObligation(def_id, hir_id, idx)\n+            } else {\n+                ObligationCauseCode::ExprBindingObligation(def_id, span, hir_id, idx)\n+            }\n+        })\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self, span, def_id, substs))]\n+    #[tracing::instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,\n         def_id: DefId,\n-        substs: &SubstsRef<'tcx>,\n-        code: ObligationCauseCode<'tcx>,\n+        substs: SubstsRef<'tcx>,\n+        code: impl Fn(usize, Span) -> ObligationCauseCode<'tcx>,\n     ) {\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(span, self.body_id, code),\n+            |idx, predicate_span| {\n+                traits::ObligationCause::new(span, self.body_id, code(idx, predicate_span))\n+            },\n             self.param_env,\n             bounds,\n         ) {"}, {"sha": "1d59840bf0ae92e4b5c0d5ed0de125957a3c4b28", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 147, "deletions": 171, "changes": 318, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -247,17 +247,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Cause selection errors caused by resolving a single argument to point at the\n             // argument and not the call. This lets us customize the span pointed to in the\n             // fulfillment error to be more accurate.\n-            let coerced_ty =\n-                self.resolve_vars_with_obligations_and_mutate_fulfillment(coerced_ty, |errors| {\n-                    self.point_at_type_arg_instead_of_call_if_possible(errors, call_expr);\n-                    self.point_at_arg_instead_of_call_if_possible(\n-                        errors,\n-                        call_expr,\n-                        call_span,\n-                        provided_args,\n-                        &expected_input_tys,\n-                    );\n-                });\n+            let coerced_ty = self.resolve_vars_with_obligations(coerced_ty);\n \n             let coerce_error = self\n                 .try_coerce(provided_arg, checked_ty, coerced_ty, AllowTwoPhase::Yes, None)\n@@ -312,16 +302,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // an \"opportunistic\" trait resolution of any trait bounds on\n             // the call. This helps coercions.\n             if check_closures {\n-                self.select_obligations_where_possible(false, |errors| {\n-                    self.point_at_type_arg_instead_of_call_if_possible(errors, call_expr);\n-                    self.point_at_arg_instead_of_call_if_possible(\n-                        errors,\n-                        call_expr,\n-                        call_span,\n-                        &provided_args,\n-                        &expected_input_tys,\n-                    );\n-                })\n+                self.select_obligations_where_possible(false, |_| {})\n             }\n \n             // Check each argument, to satisfy the input it was provided for\n@@ -1183,7 +1164,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.write_user_type_annotation_from_substs(hir_id, did, substs, None);\n \n             // Check bounds on type arguments used in the path.\n-            self.add_required_obligations(path_span, did, substs);\n+            self.add_required_obligations_for_hir(path_span, did, substs, hir_id);\n \n             Some((variant, ty))\n         } else {\n@@ -1626,179 +1607,174 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// can be not easily comparable with predicate type (because of coercion). If the types match\n     /// for either checked or coerced type, and there's only *one* argument that does, we point at\n     /// the corresponding argument's expression span instead of the `fn` call path span.\n-    fn point_at_arg_instead_of_call_if_possible(\n+    pub(super) fn adjust_fulfillment_errors_for_expr_obligation(\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n-        expr: &'tcx hir::Expr<'tcx>,\n-        call_sp: Span,\n-        args: &'tcx [hir::Expr<'tcx>],\n-        expected_tys: &[Ty<'tcx>],\n     ) {\n-        // We *do not* do this for desugared call spans to keep good diagnostics when involving\n-        // the `?` operator.\n-        if call_sp.desugaring_kind().is_some() {\n-            return;\n+        for error in errors {\n+            self.adjust_fulfillment_error_for_expr_obligation(error);\n         }\n+    }\n \n-        'outer: for error in errors {\n-            // Only if the cause is somewhere inside the expression we want try to point at arg.\n-            // Otherwise, it means that the cause is somewhere else and we should not change\n-            // anything because we can break the correct span.\n-            if !call_sp.contains(error.obligation.cause.span) {\n-                continue;\n-            }\n+    fn adjust_fulfillment_error_for_expr_obligation(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+    ) {\n+        let (traits::ExprItemObligation(def_id, hir_id, idx) | traits::ExprBindingObligation(def_id, _, hir_id, idx))\n+            = *error.obligation.cause.code().peel_derives() else { return; };\n+        let Some(unsubstituted_pred) =\n+            self.tcx.predicates_of(def_id).instantiate_identity(self.tcx).predicates.into_iter().nth(idx) else { return; };\n+\n+        let generics = self.tcx.generics_of(def_id);\n+        let predicate_substs = match unsubstituted_pred.kind().skip_binder() {\n+            ty::PredicateKind::Trait(pred) => pred.trait_ref.substs,\n+            ty::PredicateKind::Projection(pred) => pred.projection_ty.substs,\n+            _ => ty::List::empty(),\n+        };\n+        let param_to_point_at = predicate_substs.types().find_map(|ty| {\n+            ty.walk().find_map(|arg| {\n+                if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                    && let ty::Param(param_ty) = ty.kind()\n+                    // Look for a param ty that is local to this method/fn\n+                    // and not inherited from an impl, for example.\n+                    && self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) == def_id\n+                {\n+                    Some(arg)\n+                } else {\n+                    None\n+                }\n+            })\n+        });\n \n-            // Peel derived obligation, because it's the type that originally\n-            // started this inference chain that matters, not the one we wound\n-            // up with at the end.\n-            fn unpeel_to_top<'a, 'tcx>(\n-                mut code: &'a ObligationCauseCode<'tcx>,\n-            ) -> &'a ObligationCauseCode<'tcx> {\n-                let mut result_code = code;\n-                loop {\n-                    let parent = match code {\n-                        ObligationCauseCode::ImplDerivedObligation(c) => &c.derived.parent_code,\n-                        ObligationCauseCode::BuiltinDerivedObligation(c)\n-                        | ObligationCauseCode::DerivedObligation(c) => &c.parent_code,\n-                        _ => break result_code,\n-                    };\n-                    (result_code, code) = (code, parent);\n+        let fallback_param_to_point_at = predicate_substs.types().find_map(|ty| {\n+            ty.walk().find_map(|arg| {\n+                if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                    && let ty::Param(param_ty) = ty.kind()\n+                    && self.tcx.parent(generics.type_param(param_ty, self.tcx).def_id) != def_id\n+                {\n+                    Some(arg)\n+                } else {\n+                    None\n                 }\n-            }\n-            let self_: ty::subst::GenericArg<'_> =\n-                match unpeel_to_top(error.obligation.cause.code()) {\n-                    ObligationCauseCode::BuiltinDerivedObligation(code)\n-                    | ObligationCauseCode::DerivedObligation(code) => {\n-                        code.parent_trait_pred.self_ty().skip_binder().into()\n+            })\n+        });\n+\n+        let hir = self.tcx.hir();\n+        match hir.get(hir_id) {\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Path(hir::QPath::Resolved(_, path)), hir_id, .. }) => {\n+                if let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Call(callee, args), hir_id: call_hir_id, .. })\n+                    = hir.get(hir.get_parent_node(*hir_id))\n+                    && callee.hir_id == *hir_id\n+                {\n+                    if let Some(param_to_point_at) = param_to_point_at\n+                        && self.point_at_args_if_possible(error, def_id, param_to_point_at, *call_hir_id, callee.span, args) {\n+                        return;\n                     }\n-                    ObligationCauseCode::ImplDerivedObligation(code) => {\n-                        code.derived.parent_trait_pred.self_ty().skip_binder().into()\n+\n+                    if let Some(fallback_param_to_point_at) = fallback_param_to_point_at\n+                        && self.point_at_args_if_possible(error, def_id, fallback_param_to_point_at, *call_hir_id, callee.span, args)\n+                    {\n+                        return;\n                     }\n-                    _ => match error.obligation.predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(predicate) => predicate.self_ty().into(),\n-                        ty::PredicateKind::Projection(predicate) => {\n-                            predicate.projection_ty.self_ty().into()\n-                        }\n-                        _ => continue,\n-                    },\n-                };\n-            let self_ = self.resolve_vars_if_possible(self_);\n-            let ty_matches_self = |ty: Ty<'tcx>| ty.walk().any(|arg| arg == self_);\n-\n-            let typeck_results = self.typeck_results.borrow();\n-\n-            for (idx, arg) in args.iter().enumerate() {\n-                // Don't adjust the span if we already have a more precise span\n-                // within one of the args.\n-                if arg.span.contains(error.obligation.cause.span) {\n-                    let references_arg =\n-                        typeck_results.expr_ty_opt(arg).map_or(false, &ty_matches_self)\n-                            || expected_tys.get(idx).copied().map_or(false, &ty_matches_self);\n-                    if references_arg && !arg.span.from_expansion() {\n-                        error.obligation.cause.map_code(|parent_code| {\n-                            ObligationCauseCode::FunctionArgumentObligation {\n-                                arg_hir_id: args[idx].hir_id,\n-                                call_hir_id: expr.hir_id,\n-                                parent_code,\n-                            }\n-                        })\n+\n+                    if let Some(param_to_point_at) = param_to_point_at\n+                        && let Some(segment) = path.segments.last()\n+                        && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n+                    {\n+                        return;\n                     }\n-                    continue 'outer;\n                 }\n             }\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::MethodCall(segment, args, ..), .. }) => {\n+                if let Some(param_to_point_at) = param_to_point_at\n+                    && self.point_at_args_if_possible(error, def_id, param_to_point_at, hir_id, segment.ident.span, args)\n+                {\n+                    return;\n+                }\n \n-            // Collect the argument position for all arguments that could have caused this\n-            // `FulfillmentError`.\n-            let mut referenced_in: Vec<_> = std::iter::zip(expected_tys, args)\n-                .enumerate()\n-                .flat_map(|(idx, (expected_ty, arg))| {\n-                    if let Some(arg_ty) = typeck_results.expr_ty_opt(arg) {\n-                        vec![(idx, arg_ty), (idx, *expected_ty)]\n-                    } else {\n-                        vec![]\n-                    }\n-                })\n-                .filter_map(|(i, ty)| {\n-                    let ty = self.resolve_vars_if_possible(ty);\n-                    // We walk the argument type because the argument's type could have\n-                    // been `Option<T>`, but the `FulfillmentError` references `T`.\n-                    if ty_matches_self(ty) { Some(i) } else { None }\n-                })\n-                .collect();\n-\n-            // Both checked and coerced types could have matched, thus we need to remove\n-            // duplicates.\n-\n-            // We sort primitive type usize here and can use unstable sort\n-            referenced_in.sort_unstable();\n-            referenced_in.dedup();\n-\n-            if let &[idx] = &referenced_in[..] {\n-                // Do not point at the inside of a macro.\n-                // That would often result in poor error messages.\n-                if args[idx].span.from_expansion() {\n-                    continue;\n+                if let Some(fallback_param_to_point_at) = fallback_param_to_point_at\n+                    && self.point_at_args_if_possible(error, def_id, fallback_param_to_point_at, hir_id, segment.ident.span, args)\n+                {\n+                    return;\n                 }\n-                // We make sure that only *one* argument matches the obligation failure\n-                // and we assign the obligation's span to its expression's.\n-                error.obligation.cause.span = args[idx].span;\n-                error.obligation.cause.map_code(|parent_code| {\n-                    ObligationCauseCode::FunctionArgumentObligation {\n-                        arg_hir_id: args[idx].hir_id,\n-                        call_hir_id: expr.hir_id,\n-                        parent_code,\n-                    }\n-                });\n-            } else if error.obligation.cause.span == call_sp {\n-                // Make function calls point at the callee, not the whole thing.\n-                if let hir::ExprKind::Call(callee, _) = expr.kind {\n-                    error.obligation.cause.span = callee.span;\n+\n+                if let Some(param_to_point_at) = param_to_point_at\n+                    && self.point_at_generics_if_possible(error, def_id, param_to_point_at, segment)\n+                {\n+                    return;\n                 }\n             }\n+            hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Struct(..), .. }) => {\n+                // fixme\n+            }\n+            _ => {}\n         }\n     }\n \n-    /// Given a vec of evaluated `FulfillmentError`s and an `fn` call expression, we walk the\n-    /// `PathSegment`s and resolve their type parameters to see if any of the `FulfillmentError`s\n-    /// were caused by them. If they were, we point at the corresponding type argument's span\n-    /// instead of the `fn` call path span.\n-    fn point_at_type_arg_instead_of_call_if_possible(\n+    fn point_at_args_if_possible(\n         &self,\n-        errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n-        call_expr: &'tcx hir::Expr<'tcx>,\n-    ) {\n-        if let hir::ExprKind::Call(path, _) = &call_expr.kind {\n-            if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = &path.kind {\n-                for error in errors {\n-                    let self_ty = match error.obligation.predicate.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(predicate) => predicate.self_ty(),\n-                        ty::PredicateKind::Projection(predicate) => {\n-                            predicate.projection_ty.self_ty()\n-                        }\n-                        _ => continue,\n-                    };\n-                    // If any of the type arguments in this path segment caused the\n-                    // `FulfillmentError`, point at its span (#61860).\n-                    for arg in path\n-                        .segments\n-                        .iter()\n-                        .filter_map(|seg| seg.args.as_ref())\n-                        .flat_map(|a| a.args.iter())\n-                    {\n-                        if let hir::GenericArg::Type(hir_ty) = &arg\n-                            && let Some(ty) =\n-                                self.typeck_results.borrow().node_type_opt(hir_ty.hir_id)\n-                            && self.resolve_vars_if_possible(ty) == self_ty\n-                        {\n-                            error.obligation.cause.span = hir_ty.span;\n-                            break;\n-                        }\n-                    }\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param_to_point_at: ty::GenericArg<'tcx>,\n+        call_hir_id: hir::HirId,\n+        callee_span: Span,\n+        args: &[hir::Expr<'tcx>],\n+    ) -> bool {\n+        let sig = self.tcx.fn_sig(def_id).skip_binder();\n+        let args_referencing_param: Vec<_> = sig\n+            .inputs()\n+            .iter()\n+            .enumerate()\n+            .filter(|(_, ty)| ty.walk().any(|arg| arg == param_to_point_at))\n+            .collect();\n+        if let [(idx, _)] = args_referencing_param.as_slice()\n+            && let Some(arg) = args.get(*idx)\n+        {\n+            error.obligation.cause.span = arg.span;\n+            error.obligation.cause.map_code(|parent_code| {\n+                ObligationCauseCode::FunctionArgumentObligation {\n+                    arg_hir_id: arg.hir_id,\n+                    call_hir_id,\n+                    parent_code,\n                 }\n-            }\n+            });\n+            true\n+        } else if args_referencing_param.len() > 0 {\n+            // If more than one argument applies, then point to the callee\n+            // We have chance to fix this up further in `point_at_generics_if_possible`\n+            error.obligation.cause.span = callee_span;\n+            false\n+        } else {\n+            false\n         }\n     }\n \n+    fn point_at_generics_if_possible(\n+        &self,\n+        error: &mut traits::FulfillmentError<'tcx>,\n+        def_id: DefId,\n+        param_to_point_at: ty::GenericArg<'tcx>,\n+        segment: &hir::PathSegment<'tcx>,\n+    ) -> bool {\n+        let own_substs = self\n+            .tcx\n+            .generics_of(def_id)\n+            .own_substs(ty::InternalSubsts::identity_for_item(self.tcx, def_id));\n+        let Some((index, _)) = own_substs\n+            .iter()\n+            .filter(|arg| matches!(arg.unpack(), ty::GenericArgKind::Type(_)))\n+            .enumerate()\n+            .find(|(_, arg)| **arg == param_to_point_at) else { return false };\n+        let Some(arg) = segment\n+            .args()\n+            .args\n+            .iter()\n+            .filter(|arg| matches!(arg, hir::GenericArg::Type(_)))\n+            .nth(index) else { return false; };\n+        error.obligation.cause.span = arg.span();\n+        true\n+    }\n+\n     fn label_fn_like(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "59fd5c315ae63ca9c3bad180b4bacbbe3ce8b8ff", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -491,7 +491,19 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // so we just call `predicates_for_generics` directly to avoid redoing work.\n         // `self.add_required_obligations(self.span, def_id, &all_substs);`\n         for obligation in traits::predicates_for_generics(\n-            traits::ObligationCause::new(self.span, self.body_id, traits::ItemObligation(def_id)),\n+            |idx, span| {\n+                let code = if span.is_dummy() {\n+                    ObligationCauseCode::ExprItemObligation(def_id, self.call_expr.hir_id, idx)\n+                } else {\n+                    ObligationCauseCode::ExprBindingObligation(\n+                        def_id,\n+                        span,\n+                        self.call_expr.hir_id,\n+                        idx,\n+                    )\n+                };\n+                traits::ObligationCause::new(self.span, self.body_id, code)\n+            },\n             self.param_env,\n             method_predicates,\n         ) {"}, {"sha": "de26a9e56e2d6b57275d2060fb475c540677eda0", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -534,7 +534,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             traits::ObligationCause::misc(span, self.body_id)\n         };\n-        obligations.extend(traits::predicates_for_generics(cause.clone(), self.param_env, bounds));\n+        let predicates_cause = cause.clone();\n+        obligations.extend(traits::predicates_for_generics(\n+            move |_, _| predicates_cause.clone(),\n+            self.param_env,\n+            bounds,\n+        ));\n \n         // Also add an obligation for the method type being well-formed.\n         let method_ty = tcx.mk_fn_ptr(ty::Binder::dummy(fn_sig));"}, {"sha": "d9870060a40bbb974922ac85bce1f00c9d21f838", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1514,8 +1514,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                         traits::normalize(selcx, self.param_env, cause.clone(), impl_bounds);\n \n                     // Convert the bounds into obligations.\n-                    let impl_obligations =\n-                        traits::predicates_for_generics(cause, self.param_env, impl_bounds);\n+                    let impl_obligations = traits::predicates_for_generics(\n+                        move |_, _| cause.clone(),\n+                        self.param_env,\n+                        impl_bounds,\n+                    );\n \n                     let candidate_obligations = impl_obligations\n                         .chain(norm_obligations.into_iter())"}, {"sha": "d6deefe693f1f0ed30c5ebec95732e2d5ce9ae41", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 66, "deletions": 44, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,12 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:2:8\n    |\n LL |     f1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r, 's> fn(&'r (), &'s ()) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -15,12 +17,14 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    |                         ^^^^^^^^^^^^ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:3:8\n    |\n LL |     f2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -31,12 +35,14 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:4:8\n    |\n LL |     f3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r> fn(&(), &'r ()) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -47,12 +53,14 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    |                             ^^^^^^^^^^^^^^^ required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:5:8\n    |\n LL |     f4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r, 's> fn(&'s (), &'r ()) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -63,12 +71,14 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:6:8\n    |\n LL |     f5(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r> fn(&'r (), &'r ()) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -79,12 +89,14 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:7:8\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -95,12 +107,14 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:8:8\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r> fn(&'r (), for<'r> fn(&'r ())) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -111,12 +125,14 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:9:8\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -127,12 +143,14 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:10:8\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ -------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- --------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n               found closure signature `fn((), ()) -> _`\n@@ -143,12 +161,14 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:11:8\n    |\n LL |     h1(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- ----------------------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r, 's> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'s (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n               found closure signature `fn((), (), (), ()) -> _`\n@@ -159,12 +179,14 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:8\n    |\n LL |     h2(|_: (), _: (), _: (), _: ()| {});\n-   |     ^^ ---------------------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     -- ----------------------------^^^\n+   |     |  |\n+   |     |  expected due to this\n+   |     |  found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'t0, 'r> fn(&'r (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n               found closure signature `fn((), (), (), ()) -> _`"}, {"sha": "fbe1a1ee8bcd7a1b7950ee4f8b64b4129660c1bd", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -36,9 +36,7 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:40:9\n    |\n LL |     baz(&a);\n-   |     --- ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n    |\n note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14"}, {"sha": "7e3cccae3eae589631eb90bab69663069962e9d0", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -33,19 +33,15 @@ error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:14\n    |\n LL |     f1(2u32, 4u32);\n-   |     --       ^^^^ the trait `Foo` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:8\n+  --> $DIR/associated-types-path-2.rs:35:5\n    |\n LL |     f1(2u32, 4i32);\n-   |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^ the trait `Foo` is not implemented for `u32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n note: required by a bound in `f1`"}, {"sha": "af99b608ca14d0f4388d25de27db4fab08f6c27f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-67252-unnamed-future.rs:18:5\n+  --> $DIR/issue-67252-unnamed-future.rs:18:11\n    |\n-LL |     spawn(async {\n-   |     ^^^^^ future created by async block is not `Send`\n+LL |       spawn(async {\n+   |  ___________^\n+LL | |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+LL | |         AFuture.await;\n+LL | |     });\n+   | |_____^ future created by async block is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await"}, {"sha": "c3553e3e0c1c2b9524ee08623c9c4d7fa50aab68", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:34:5\n+  --> $DIR/issue-68112.rs:34:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n@@ -17,10 +17,10 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:43:5\n+  --> $DIR/issue-68112.rs:43:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ future created by async block is not `Send`\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n@@ -35,10 +35,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:60:5\n+  --> $DIR/issue-68112.rs:60:18\n    |\n LL |     require_send(send_fut);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "49fc81d3babc63e1f5b1341918641d2a17498ed9", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n-  --> $DIR/issue-72442.rs:12:36\n+  --> $DIR/issue-72442.rs:12:25\n    |\n LL |             let mut f = File::open(path.to_str())?;\n-   |                         ---------- ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n-   |                         |\n-   |                         required by a bound introduced by this call\n+   |                         ^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n    |\n note: required by a bound in `File::open`\n   --> $SRC_DIR/std/src/fs.rs:LL:COL"}, {"sha": "99e960f5d0f26f98694a4bed5ff9c3b4c4128134", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:5\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:12:17\n    |\n-LL |     assert_send(async {\n-   |     ^^^^^^^^^^^ future created by async block is not `Send`\n+LL |       assert_send(async {\n+   |  _________________^\n+LL | |\n+LL | |         bar(Foo(std::ptr::null())).await;\n+LL | |     })\n+   | |_____^ future created by async block is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await"}, {"sha": "3aea93a60ff2d2eb546a5890f19e544a669a52eb", "filename": "src/test/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: `PhantomPinned` cannot be unpinned\n-  --> $DIR/pin-needed-to-poll-2.rs:43:18\n+  --> $DIR/pin-needed-to-poll-2.rs:43:9\n    |\n LL |         Pin::new(&mut self.sleep).poll(cx)\n-   |         -------- ^^^^^^^^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n-   |         |\n-   |         required by a bound introduced by this call\n+   |         ^^^^^^^^ within `Sleep`, the trait `Unpin` is not implemented for `PhantomPinned`\n    |\n    = note: consider using `Box::pin`\n note: required because it appears within the type `Sleep`"}, {"sha": "0c4970a72591f727b699e433230e364155db29fb", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n-  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:18\n    |\n LL |     is_mytrait::<(MyS2, MyS)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n+   |                  ^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = note: required because it appears within the type `(MyS2, MyS)`\n note: required by a bound in `is_mytrait`"}, {"sha": "ce7095664c11a3798fcae9f8bccfd967562f5ad8", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n+  --> $DIR/typeck-default-trait-impl-precedence.rs:19:20\n    |\n LL |     is_defaulted::<&'static u32>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n+   |                    ^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n    = help: the trait `Signed` is implemented for `i32`\n note: required for `&'static u32` to implement `Defaulted`"}, {"sha": "7ff5752fc3585e33efd45784b83a3227ed32709d", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -19,8 +19,12 @@ LL |     assert_eq!(foo, y);\n    |     ^^^^^^^^^^^^^^^^^^ `for<'r> fn(&'r i32) -> &'r i32 {foo}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = help: use parentheses to call the function: `foo(s)`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use parentheses to call the function\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |                     $crate::panicking::assert_failed(kind, &*left_val(s), &*right_val, $crate::option::Option::None);\n+   |                                                                      +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5e73d8737ea9dd01f95dfd33de24a0ac964155f8", "filename": "src/test/ui/box/into-boxed-slice-fail.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Finto-boxed-slice-fail.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/into-boxed-slice-fail.rs:7:35\n+  --> $DIR/into-boxed-slice-fail.rs:7:13\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_slice);\n-   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |             |\n-   |             required by a bound introduced by this call\n+   |             ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`\n@@ -23,12 +21,10 @@ LL |     let _ = Box::into_boxed_slice(boxed_slice);\n    = note: slice and array elements must have `Sized` type\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n-  --> $DIR/into-boxed-slice-fail.rs:11:35\n+  --> $DIR/into-boxed-slice-fail.rs:11:13\n    |\n LL |     let _ = Box::into_boxed_slice(boxed_trait);\n-   |             --------------------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |             |\n-   |             required by a bound introduced by this call\n+   |             ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n note: required by a bound in `Box::<T, A>::into_boxed_slice`"}, {"sha": "b013798c8247c4916eea7b7e65101cd0721fdd77", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,15 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n+  --> $DIR/expect-infer-var-appearing-twice.rs:14:18\n    |\n-LL |     with_closure(|x: u32, y: i32| {\n-   |     ^^^^^^^^^^^^ ---------------- found signature defined here\n-   |     |\n-   |     expected due to this\n+LL |       with_closure(|x: u32, y: i32| {\n+   |       ------------ ^---------------\n+   |       |            |\n+   |  _____|____________found signature defined here\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |     });\n+   | |_____^ expected due to this\n    |\n    = note: expected closure signature `fn(_, _) -> _`\n               found closure signature `fn(u32, i32) -> _`"}, {"sha": "b5f06e38f6d93f08dca29d7c9485a660c6cc71e6", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-array-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-array-diagnostics.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -7,7 +7,7 @@ LL |         let [_, _s] = s;\n    |                       - closure is `FnOnce` because it moves the variable `s` out of its environment\n LL |     };\n LL |     expect_fn(c);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |               - the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "66cd847db50caf0cc90aa85edae416be663c725b", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/closure-origin-tuple-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fclosure-origin-tuple-diagnostics.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -7,7 +7,7 @@ LL |         let s = s.1;\n    |                 --- closure is `FnOnce` because it moves the variable `s.1` out of its environment\n LL |     };\n LL |     expect_fn(c);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |               - the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "7b9f59fcc67d08f3b5cd78df089d36d16f37059c", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,14 @@\n error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:6:13\n+  --> $DIR/closure-move-sync.rs:6:27\n    |\n-LL |     let t = thread::spawn(|| {\n-   |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n+LL |       let t = thread::spawn(|| {\n+   |  _____________-------------_^\n+   | |             |\n+   | |             required by a bound introduced by this call\n+LL | |         recv.recv().unwrap();\n+LL | |\n+LL | |     });\n+   | |_____^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required for `&std::sync::mpsc::Receiver<()>` to implement `Send`\n@@ -16,12 +22,18 @@ note: required by a bound in `spawn`\n    |\n LL |     F: Send + 'static,\n    |        ^^^^ required by this bound in `spawn`\n+help: consider dereferencing here\n+   |\n+LL |     let t = thread::spawn(*|| {\n+   |                           +\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n-  --> $DIR/closure-move-sync.rs:18:5\n+  --> $DIR/closure-move-sync.rs:18:19\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n-   |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n+   |     ------------- ^^^^^^^^^^^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required for `&Sender<()>` to implement `Send`\n@@ -35,6 +47,10 @@ note: required by a bound in `spawn`\n    |\n LL |     F: Send + 'static,\n    |        ^^^^ required by this bound in `spawn`\n+help: consider dereferencing here\n+   |\n+LL |     thread::spawn(*|| tx.send(()).unwrap());\n+   |                   +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "421be56d9173e666ff40d95a23f5863f23ef3714", "filename": "src/test/ui/closures/closure-wrong-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -6,7 +6,7 @@ LL |     let closure = |_| foo(x);\n    |                   |\n    |                   this closure implements `FnOnce`, not `Fn`\n LL |     bar(closure);\n-   |     --- the requirement to implement `Fn` derives from here\n+   |         ------- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "0e8334d033820b3d8465adc8d46d7a8ff02d6c0f", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/trait_objects_fail.rs:26:9\n    |\n LL |     foo(&10_u32);\n-   |     --- ^^^^^^^ the trait `Trait` is not implemented for `u32`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^^^ the trait `Trait` is not implemented for `u32`\n    |\n    = help: the trait `Trait<2>` is implemented for `u32`\n    = note: required for the cast from `u32` to the object type `dyn Trait`\n@@ -13,9 +11,7 @@ error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n-   |     --- ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |\n    = help: the trait `Traitor<2, 3>` is implemented for `bool`\n    = note: required for the cast from `bool` to the object type `dyn Traitor<_>`"}, {"sha": "615dc875f67a34b6bf6aeba2121309b722455155", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:17:5\n+  --> $DIR/abstract-const-as-cast-3.rs:17:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n@@ -26,10 +26,10 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n               found type `{ O as u128 }`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:20:5\n+  --> $DIR/abstract-const-as-cast-3.rs:20:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`\n@@ -71,10 +71,10 @@ LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n               found type `14`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:35:5\n+  --> $DIR/abstract-const-as-cast-3.rs:35:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as u128 }>` to implement `Trait`\n@@ -98,10 +98,10 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n               found type `{ O as u128 }`\n \n error: unconstrained generic constant\n-  --> $DIR/abstract-const-as-cast-3.rs:38:5\n+  --> $DIR/abstract-const-as-cast-3.rs:38:19\n    |\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { O as u128 }]:`\n note: required for `HasCastInTraitImpl<{ N + 1 }, { N as _ }>` to implement `Trait`"}, {"sha": "f2f8d84ad3bb045f28e60cf8a2359b1aba0f1651", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:8\n+  --> $DIR/issue-21659-show-relevant-trait-impls-1.rs:24:5\n    |\n LL |     f1.foo(1usize);\n-   |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |     ^^ --- required by a bound introduced by this call\n+   |     |\n+   |     the trait `Foo<usize>` is not implemented for `Bar`\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i32>>"}, {"sha": "b0c41e2fae1ac2a291276a951af29b6ef4157558", "filename": "src/test/ui/did_you_mean/issue-21659-show-relevant-trait-impls-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-21659-show-relevant-trait-impls-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `Bar: Foo<usize>` is not satisfied\n-  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:8\n+  --> $DIR/issue-21659-show-relevant-trait-impls-2.rs:28:5\n    |\n LL |     f1.foo(1usize);\n-   |        ^^^ the trait `Foo<usize>` is not implemented for `Bar`\n+   |     ^^ --- required by a bound introduced by this call\n+   |     |\n+   |     the trait `Foo<usize>` is not implemented for `Bar`\n    |\n    = help: the following other types implement trait `Foo<A>`:\n              <Bar as Foo<i16>>"}, {"sha": "5fafdb0620305473702f8862aa658799e3819912", "filename": "src/test/ui/dst/dst-rvalue.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:4:33\n+  --> $DIR/dst-rvalue.rs:4:24\n    |\n LL |     let _x: Box<str> = Box::new(*\"hello world\");\n-   |                        -------- ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |                        |\n-   |                        required by a bound introduced by this call\n+   |                        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n note: required by a bound in `Box::<T>::new`\n@@ -14,12 +12,10 @@ LL | impl<T> Box<T> {\n    |      ^ required by this bound in `Box::<T>::new`\n \n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n-  --> $DIR/dst-rvalue.rs:8:37\n+  --> $DIR/dst-rvalue.rs:8:28\n    |\n LL |     let _x: Box<[isize]> = Box::new(*array);\n-   |                            -------- ^^^^^^ doesn't have a size known at compile-time\n-   |                            |\n-   |                            required by a bound introduced by this call\n+   |                            ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n note: required by a bound in `Box::<T>::new`"}, {"sha": "a2abf37931a4fb488a6e60666fa93e315afdd841", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `*const u8` cannot be sent between threads safely\n-  --> $DIR/E0277-2.rs:16:5\n+  --> $DIR/E0277-2.rs:16:15\n    |\n LL |     is_send::<Foo>();\n-   |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n+   |               ^^^ `*const u8` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `*const u8`\n note: required because it appears within the type `Baz`"}, {"sha": "162d4922d00895f329ff029948384a086ad02d57", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -12,12 +12,25 @@ help: use a fully-qualified path to a specific available implementation (2 found\n LL |     let cont: u32 = <::Impl as Generator>::create();\n    |                     ++++++++++          +\n \n-error[E0283]: type annotations needed\n+error[E0282]: type annotations needed\n   --> $DIR/E0283.rs:35:24\n    |\n LL |     let bar = foo_impl.into() * 1u32;\n    |                        ^^^^\n    |\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n+   |               ++++++++++++++++++++++++        ~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/E0283.rs:35:24\n+   |\n+LL |     let bar = foo_impl.into() * 1u32;\n+   |               -------- ^^^^\n+   |               |\n+   |               type must be known at this point\n+   |\n note: multiple `impl`s satisfying `Impl: Into<_>` found\n   --> $DIR/E0283.rs:17:1\n    |\n@@ -31,7 +44,7 @@ help: try using a fully qualified path to specify the expected types\n LL |     let bar = <Impl as Into<T>>::into(foo_impl) * 1u32;\n    |               ++++++++++++++++++++++++        ~\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0283, E0790.\n-For more information about an error, try `rustc --explain E0283`.\n+Some errors have detailed explanations: E0282, E0283, E0790.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "a79caced111bbfc6316643e49350b1428f3c7961", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -16,10 +16,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:25:5\n+  --> $DIR/extern-types-unsized.rs:25:20\n    |\n LL |     assert_sized::<Foo>();\n-   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Foo`\n@@ -38,10 +38,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:28:5\n+  --> $DIR/extern-types-unsized.rs:28:20\n    |\n LL |     assert_sized::<Bar<A>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Bar<A>`\n@@ -60,10 +60,10 @@ LL | fn assert_sized<T: ?Sized>() {}\n    |                  ++++++++\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:31:5\n+  --> $DIR/extern-types-unsized.rs:31:20\n    |\n LL |     assert_sized::<Bar<Bar<A>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `Sized` is not implemented for `A`\n note: required because it appears within the type `Bar<A>`"}, {"sha": "b7757740d9e34de53ca83755350cb841b114ea17", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -15,9 +15,7 @@ error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:9\n    |\n LL |     foo(*x);\n-   |     --- ^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n    = help: unsized fn params are gated as an unstable feature"}, {"sha": "62bcf3175e21b84cc11db3d0d66c68854bc77886", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n-  --> $DIR/send-sync.rs:8:5\n+  --> $DIR/send-sync.rs:8:10\n    |\n LL |     send(format_args!(\"{:?}\", c));\n-   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     ---- ^^^^^^^^^^^^^^^^^^^^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `[ArgumentV1<'_>]`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n    = note: required because it appears within the type `&core::fmt::Opaque`\n@@ -15,12 +17,15 @@ note: required by a bound in `send`\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n-  --> $DIR/send-sync.rs:9:5\n+  --> $DIR/send-sync.rs:9:10\n    |\n LL |     sync(format_args!(\"{:?}\", c));\n-   |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     ---- ^^^^^^^^^^^^^^^^^^^^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Arguments<'_>`, the trait `Sync` is not implemented for `core::fmt::Opaque`\n    = note: required because it appears within the type `&core::fmt::Opaque`\n@@ -33,6 +38,7 @@ note: required by a bound in `sync`\n    |\n LL | fn sync<T: Sync>(_: T) {}\n    |            ^^^^ required by this bound in `sync`\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fbf5d6e07256b27fab6289e3eacd0cbb7c1d1093", "filename": "src/test/ui/generator/drop-tracking-parent-expression.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-parent-expression.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -41,10 +41,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK\n@@ -83,10 +83,10 @@ LL | fn assert_send<T: Send>(_thing: T) {}\n    = note: this error originates in the macro `type_combinations` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-tracking-parent-expression.rs:24:13\n+  --> $DIR/drop-tracking-parent-expression.rs:24:25\n    |\n LL |               assert_send(g);\n-   |               ^^^^^^^^^^^ generator is not `Send`\n+   |                           ^ generator is not `Send`\n ...\n LL | /     type_combinations!(\n LL | |         // OK"}, {"sha": "0808a2c85ee1dd477b68b36511b02c476fa8fdb2", "filename": "src/test/ui/generator/drop-yield-twice.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-yield-twice.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,14 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/drop-yield-twice.rs:7:5\n+  --> $DIR/drop-yield-twice.rs:7:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |         let guard = Foo(42);\n+LL | |         yield;\n+LL | |         drop(guard);\n+LL | |         yield;\n+LL | |     })\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/drop-yield-twice.rs:7:17: 7:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield"}, {"sha": "8f5d2429a2892734ad64c69bac083a7a0d9ab6c8", "filename": "src/test/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,15 @@\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36] as Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 15:36]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n    |\n-LL |     want_cyclic_generator_return(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_return(|| {\n+   |  _____----------------------------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n@@ -17,10 +24,17 @@ LL |     where T: Generator<Yield = (), Return = T>\n    |                                    ^^^^^^^^^^ required by this bound in `want_cyclic_generator_return`\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35] as Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 28:35]`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n+  --> $DIR/generator-yielding-or-returning-itself.rs:28:33\n    |\n-LL |     want_cyclic_generator_yield(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+LL |       want_cyclic_generator_yield(|| {\n+   |  _____---------------------------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         if false { yield None.unwrap(); }\n+LL | |         None.unwrap()\n+LL | |     })\n+   | |_____^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,"}, {"sha": "21026f45cb823375f9cc94400a0aed20da7ef085", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -64,6 +64,7 @@ fn test2() {\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n     //~| NOTE required for\n+    //~| NOTE required by a bound introduced by this call\n     //~| NOTE captures the following types\n }\n "}, {"sha": "eb99d42c9206805a90800898f75eb5ffd8ab5ed5", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:40:5\n+  --> $DIR/issue-68112.rs:40:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n@@ -23,10 +23,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:63:5\n+  --> $DIR/issue-68112.rs:63:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "97dbaf73ade6b93e8dfc16e50b8b7c97c2ace020", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:16:5\n+  --> $DIR/not-send-sync.rs:16:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required for `&Cell<i32>` to implement `Send`\n@@ -16,12 +23,21 @@ note: required by a bound in `assert_send`\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n+help: consider dereferencing here\n+   |\n+LL |     assert_send(*|| {\n+   |                 +\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/not-send-sync.rs:9:5\n-   |\n-LL |     assert_sync(|| {\n-   |     ^^^^^^^^^^^ generator is not `Sync`\n+  --> $DIR/not-send-sync.rs:9:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 9:19]`, the trait `Sync` is not implemented for `Cell<i32>`\n note: generator is not `Sync` as this value is used across a yield"}, {"sha": "9baafe54e84d41002fea3d207770365b7b57698b", "filename": "src/test/ui/generator/partial-drop.stderr", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpartial-drop.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,15 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:14:5\n+  --> $DIR/partial-drop.rs:14:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+LL | |         drop(guard.foo);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:14:17: 14:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n@@ -22,10 +29,17 @@ LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:22:5\n+  --> $DIR/partial-drop.rs:22:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:22:17: 22:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield\n@@ -45,10 +59,17 @@ LL | fn assert_send<T: Send>(_: T) {}\n    |                   ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be sent between threads safely\n-  --> $DIR/partial-drop.rs:32:5\n+  --> $DIR/partial-drop.rs:32:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ generator is not `Send`\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         // FIXME: it would be nice to make this work.\n+LL | |         let guard = Bar { foo: Foo, x: 42 };\n+...  |\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n    |\n    = help: within `[generator@$DIR/partial-drop.rs:32:17: 32:19]`, the trait `Send` is not implemented for `Foo`\n note: generator is not `Send` as this value is used across a yield"}, {"sha": "3a83021dd99508fef77cffcfca1091d098c15089", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:37:5\n+  --> $DIR/generator-print-verbose-1.rs:37:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ generator is not `Send`\n+   |                  ^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n@@ -21,10 +21,12 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-1.rs:56:5\n+  --> $DIR/generator-print-verbose-1.rs:56:18\n    |\n LL |     require_send(send_gen);\n-   |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`"}, {"sha": "14e0581897813ff3643d5cf5b3bf4b0f2fef9e13", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:19:5\n+  --> $DIR/generator-print-verbose-2.rs:19:17\n    |\n-LL |     assert_send(|| {\n-   |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n+LL |       assert_send(|| {\n+   |  _____-----------_^\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required for `&'_#4r Cell<i32>` to implement `Send`\n@@ -16,12 +23,21 @@ note: required by a bound in `assert_send`\n    |\n LL |     fn assert_send<T: Send>(_: T) {}\n    |                       ^^^^ required by this bound in `assert_send`\n+help: consider dereferencing here\n+   |\n+LL |     assert_send(*|| {\n+   |                 +\n \n error: generator cannot be shared between threads safely\n-  --> $DIR/generator-print-verbose-2.rs:12:5\n-   |\n-LL |     assert_sync(|| {\n-   |     ^^^^^^^^^^^ generator is not `Sync`\n+  --> $DIR/generator-print-verbose-2.rs:12:17\n+   |\n+LL |       assert_sync(|| {\n+   |  _________________^\n+LL | |\n+LL | |         let a = Cell::new(2);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^ generator is not `Sync`\n    |\n    = help: within `[main::{closure#0} upvar_tys=() {Cell<i32>, ()}]`, the trait `Sync` is not implemented for `Cell<i32>`\n note: generator is not `Sync` as this value is used across a yield"}, {"sha": "8193f491e69edbb7e775179a4e0c4b16a951ee23", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n-  --> $DIR/issue-88460.rs:30:5\n+  --> $DIR/issue-88460.rs:30:10\n    |\n LL |     test(Foo);\n-   |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |     ---- ^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Marker` is implemented for `()`\n note: required by a bound in `test`"}, {"sha": "b30dd36d2ad6aebf092f513c11180771d7eaed2e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-62529-3.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: expected a `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n-  --> $DIR/issue-62529-3.rs:25:9\n+  --> $DIR/issue-62529-3.rs:25:14\n    |\n LL |         call(f, ());\n-   |         ^^^^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+   |         ---- ^ expected an `Fn<(<_ as ATC<'a>>::Type,)>` closure, found `F`\n+   |         |\n+   |         required by a bound introduced by this call\n    |\n    = note: expected a closure with arguments `((),)`\n               found a closure with arguments `(<_ as ATC<'a>>::Type,)`"}, {"sha": "79bee33280d2e45769cbc0e8a49e28e4d426b034", "filename": "src/test/ui/inference/issue-71732.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-71732.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-71732.rs:18:10\n    |\n LL |         .get(&\"key\".into())\n-   |          ^^^ cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          ^^^ ------------- type must be known at this point\n+   |          |\n+   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;\n@@ -13,7 +15,7 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |         .get::<Q>(&\"key\".into())\n    |             +++++"}, {"sha": "3504b294ab25e29ff39a60263728fa557bc62e24", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -12,7 +12,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:7:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -39,7 +41,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:12:26\n    |\n LL |     |x| String::from(\"x\".as_ref());\n-   |                          ^^^^^^\n+   |                      --- ^^^^^^\n+   |                      |\n+   |                      type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -55,7 +59,9 @@ error[E0283]: type annotations needed for `&T`\n   --> $DIR/issue-72690.rs:17:9\n    |\n LL |     let _ = \"x\".as_ref();\n-   |         ^       ------ type must be known at this point\n+   |         ^   --- ------ required by a bound introduced by this call\n+   |             |\n+   |             type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -81,7 +87,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:21:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -107,7 +115,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:28:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -133,7 +143,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:37:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -159,7 +171,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:46:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -185,7 +199,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:53:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;\n@@ -211,7 +227,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-72690.rs:62:22\n    |\n LL |     String::from(\"x\".as_ref());\n-   |                      ^^^^^^\n+   |                  --- ^^^^^^\n+   |                  |\n+   |                  type must be known at this point\n    |\n    = note: multiple `impl`s satisfying `str: AsRef<_>` found in the following crates: `core`, `std`:\n            - impl AsRef<OsStr> for str;"}, {"sha": "4f621b82dc579eb341abb6bf6c6d4d4b7f366695", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -4,7 +4,7 @@ error[E0283]: type annotations needed\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n    |     --- ^^^ cannot infer type of the type parameter `T` declared on the function `gen`\n    |     |\n-   |     type must be known at this point\n+   |     required by a bound introduced by this call\n    |\n    = note: cannot satisfy `_: Clone`\n note: required by a bound in `foo`"}, {"sha": "ee476e7aa384c8720d0ba0c67a80ac20df69d434", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/interior-mutability.rs:5:5\n+  --> $DIR/interior-mutability.rs:5:18\n    |\n LL |     catch_unwind(|| { x.set(23); });\n-   |     ^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |     ------------ ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n@@ -17,6 +19,10 @@ note: required by a bound in `catch_unwind`\n    |\n LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n    |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`\n+help: consider dereferencing here\n+   |\n+LL |     catch_unwind(*|| { x.set(23); });\n+   |                  +\n \n error: aborting due to previous error\n "}, {"sha": "792b8294b4413765fbd9136280e529392e70eaa1", "filename": "src/test/ui/issues/issue-17651.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17651.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the size for values of type `[{integer}]` cannot be known at compilation time\n-  --> $DIR/issue-17651.rs:5:18\n+  --> $DIR/issue-17651.rs:5:9\n    |\n LL |     (|| Box::new(*(&[0][..])))();\n-   |         -------- ^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |         |\n-   |         required by a bound introduced by this call\n+   |         ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[{integer}]`\n note: required by a bound in `Box::<T>::new`"}, {"sha": "3f9b3be98517946f728235e3e34d2956ce678b6c", "filename": "src/test/ui/issues/issue-20162.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20162.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `X: Ord` is not satisfied\n-  --> $DIR/issue-20162.rs:5:7\n+  --> $DIR/issue-20162.rs:5:5\n    |\n LL |     b.sort();\n-   |       ^^^^ the trait `Ord` is not implemented for `X`\n+   |     ^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `Ord` is not implemented for `X`\n    |\n note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL"}, {"sha": "72c65029746adb83a8aaa15d71eca77667e8860c", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/issue-21763.rs:9:5\n+  --> $DIR/issue-21763.rs:9:11\n    |\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `(Rc<()>, Rc<()>)`, the trait `Send` is not implemented for `Rc<()>`\n    = note: required because it appears within the type `(Rc<()>, Rc<()>)`"}, {"sha": "04efa27189b746e533439c6548818dc7d1e4b17d", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -4,12 +4,12 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n     let mut found_e = false;\n \n     let temp: Vec<u8> = it\n+        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .take_while(|&x| {\n             found_e = true;\n             false\n         })\n         .cloned()\n-        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "e3334eef3ad7f6c5e9bfd11af0f66495fc54a059", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,16 @@\n-error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>` to be an iterator that yields `&_`, but it yields `u8`\n-  --> $DIR/issue-31173.rs:11:10\n-   |\n-LL |         .cloned()\n-   |          ^^^^^^ expected reference, found `u8`\n+error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>` to be an iterator that yields `&_`, but it yields `u8`\n+  --> $DIR/issue-31173.rs:6:25\n+   |\n+LL |       let temp: Vec<u8> = it\n+   |  _________________________^\n+LL | |\n+LL | |         .take_while(|&x| {\n+LL | |             found_e = true;\n+LL | |             false\n+LL | |         })\n+   | |__________^ expected reference, found `u8`\n+LL |           .cloned()\n+   |            ------ required by a bound introduced by this call\n    |\n    = note: expected reference `&_`\n                    found type `u8`\n@@ -12,11 +20,11 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:13:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/take_while.rs:LL:COL\n    |\n@@ -29,10 +37,10 @@ LL | pub struct Cloned<I> {\n    | -------------------- doesn't satisfy `_: Iterator`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:8:21: 8:25]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "691b8f88f4ed54c87d6e65b5f9c1614d81e73a34", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n-  --> $DIR/issue-33941.rs:6:36\n+  --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected reference, found tuple\n+   |              ^^^^^^^^^^^^^^^^^^^^^ ------ required by a bound introduced by this call\n+   |              |\n+   |              expected reference, found tuple\n    |\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`"}, {"sha": "72082f0cd17287650dbb42d4a341c419ab782df0", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,10 +13,12 @@ LL |     let sr: Vec<(u32, _, _)> = vec![];\n    |                            +\n \n error[E0277]: a value of type `Vec<(u32, _, _)>` cannot be built from an iterator over elements of type `()`\n-  --> $DIR/issue-34334.rs:5:87\n+  --> $DIR/issue-34334.rs:5:33\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                                                                       ^^^^^^^ value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |                                 |\n+   |                                 value of type `Vec<(u32, _, _)>` cannot be built from `std::iter::Iterator<Item=()>`\n    |\n    = help: the trait `FromIterator<()>` is not implemented for `Vec<(u32, _, _)>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "272feb1e3794fbc3981790c6458094335a1288c1", "filename": "src/test/ui/issues/issue-34349.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34349.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -7,7 +7,7 @@ LL |         farewell.push_str(\"!!!\");\n    |         -------- closure is `FnMut` because it mutates the variable `farewell` here\n ...\n LL |     apply(diary);\n-   |     ----- the requirement to implement `Fn` derives from here\n+   |           ----- the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "384501e3e5dfdb77768412c8f6ce2a5eed782d2b", "filename": "src/test/ui/issues/issue-59488.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -30,4 +30,5 @@ fn main() {\n     assert_eq!(Foo::Bar, i);\n     //~^ ERROR binary operation `==` cannot be applied to type `fn(usize) -> Foo {Foo::Bar}` [E0369]\n     //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n+    //~| ERROR `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug` [E0277]\n }"}, {"sha": "bb6843a19586e8643c3a13d17f480b93ffe1b95f", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -106,7 +106,26 @@ LL |     assert_eq!(Foo::Bar, i);\n            and 68 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 9 previous errors\n+error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n+  --> $DIR/issue-59488.rs:30:5\n+   |\n+LL |     assert_eq!(Foo::Bar, i);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ `fn(usize) -> Foo {Foo::Bar}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+   = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n+   = help: the following other types implement trait `Debug`:\n+             extern \"C\" fn() -> Ret\n+             extern \"C\" fn(A, B) -> Ret\n+             extern \"C\" fn(A, B, ...) -> Ret\n+             extern \"C\" fn(A, B, C) -> Ret\n+             extern \"C\" fn(A, B, C, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D) -> Ret\n+             extern \"C\" fn(A, B, C, D, ...) -> Ret\n+             extern \"C\" fn(A, B, C, D, E) -> Ret\n+           and 68 others\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0369.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "9105492c9ad9435c8b5f6d54a7e6e0b01b954685", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `&u32: Foo` is not satisfied\n-  --> $DIR/issue-60218.rs:18:27\n+  --> $DIR/issue-60218.rs:18:19\n    |\n LL |     trigger_error(vec![], |x: &u32| x)\n-   |     -------------         ^^^^^^^^^^^ the trait `Foo` is not implemented for `&u32`\n+   |     ------------- ^^^^^^ the trait `Foo` is not implemented for `&u32`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -14,6 +14,7 @@ LL | pub fn trigger_error<I, F>(iterable: I, functor: F)\n ...\n LL | for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n    |                                                                        ^^^ required by this bound in `trigger_error`\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2de15037650825da8c9abd1ba74b69f1ae523fc7", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:39\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:8:24\n    |\n LL |     let x2: Vec<f64> = x1.into_iter().collect();\n-   |                                       ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |                        ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |                        |\n+   |                        value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n@@ -13,10 +15,12 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `Vec<f64>` cannot be built from an iterator over elements of type `&f64`\n-  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:29\n+  --> $DIR/issue-66923-show-error-for-correct-call.rs:12:14\n    |\n LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n-   |                             ^^^^^^^ value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n+   |              ^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |              |\n+   |              value of type `Vec<f64>` cannot be built from `std::iter::Iterator<Item=&f64>`\n    |\n    = help: the trait `FromIterator<&f64>` is not implemented for `Vec<f64>`\n    = help: the trait `FromIterator<T>` is implemented for `Vec<T>`"}, {"sha": "3e40777c8d0aadea7592b6a7cd8e7e2aaa5d8e09", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -14,9 +14,10 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69455.rs:29:41\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |                          ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n-   |                          |\n-   |                          type must be known at this point\n+   |                    ----- ----           ^^^ cannot infer type of the type parameter `S` declared on the associated function `sum`\n+   |                    |     |\n+   |                    |     required by a bound introduced by this call\n+   |                    type must be known at this point\n    |\n note: multiple `impl`s satisfying `u64: Test<_>` found\n   --> $DIR/issue-69455.rs:11:1"}, {"sha": "6d9a1c6fbf9bd683735bfe3cb7ecbef4f183fbcc", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -14,7 +14,7 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10\n    |\n LL |     0u16.foo(b);\n-   |          ^^^\n+   |          ^^^ - type must be known at this point\n    |\n note: multiple `impl`s satisfying `u8: Element<_>` found\n   --> $DIR/issue-69683.rs:5:1\n@@ -37,7 +37,33 @@ help: try using a fully qualified path to specify the expected types\n LL |     <u16 as Foo<I>>::foo(0u16, b);\n    |     +++++++++++++++++++++    ~\n \n-error: aborting due to 2 previous errors\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-69683.rs:30:10\n+   |\n+LL |     0u16.foo(b);\n+   |     ---- ^^^\n+   |     |\n+   |     type must be known at this point\n+   |\n+note: multiple `impl`s satisfying `u8: Element<_>` found\n+  --> $DIR/issue-69683.rs:5:1\n+   |\n+LL | impl<T> Element<()> for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl<T: Element<S>, S> Element<[S; 3]> for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required for `u16` to implement `Foo<_>`\n+  --> $DIR/issue-69683.rs:20:9\n+   |\n+LL | impl<I> Foo<I> for u16\n+   |         ^^^^^^     ^^^\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <u16 as Foo<I>>::foo(0u16, b);\n+   |     +++++++++++++++++++++    ~\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0283, E0284.\n For more information about an error, try `rustc --explain E0283`."}, {"sha": "b834920b0d0416125195cc24c10ffaf63915fb08", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -34,8 +34,12 @@ LL |     assert_eq!(a, 0);\n    |     ^^^^^^^^^^^^^^^^ `fn() -> i32 {a}` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n-   = help: use parentheses to call the function: `a()`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: use parentheses to call the function\n+  --> $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+   |\n+LL |                     $crate::panicking::assert_failed(kind, &*left_val(), &*right_val, $crate::option::Option::None);\n+   |                                                                      ++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7d35da825328e29577a5bb8e6ec3177ee8ff6c38", "filename": "src/test/ui/iterators/collect-into-array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -4,4 +4,5 @@ fn main() {\n     //~^ ERROR an array of type `[u32; 10]` cannot be built directly from an iterator\n     //~| NOTE try collecting into a `Vec<{integer}>`, then using `.try_into()`\n     //~| NOTE required by a bound in `collect`\n+    //~| NOTE required by a bound introduced by this call\n }"}, {"sha": "7fe9707e6d232b4e4323f95320c591f18755f90c", "filename": "src/test/ui/iterators/collect-into-array.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-array.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: an array of type `[u32; 10]` cannot be built directly from an iterator\n-  --> $DIR/collect-into-array.rs:3:39\n+  --> $DIR/collect-into-array.rs:3:31\n    |\n LL |     let whatever: [u32; 10] = (0..10).collect();\n-   |                                       ^^^^^^^ try collecting into a `Vec<{integer}>`, then using `.try_into()`\n+   |                               ^^^^^^^ ------- required by a bound introduced by this call\n+   |                               |\n+   |                               try collecting into a `Vec<{integer}>`, then using `.try_into()`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[u32; 10]`\n note: required by a bound in `collect`"}, {"sha": "5eade075613fe6ce94d16c94256a60bcec2ee670", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,15 +1,20 @@\n fn process_slice(data: &[i32]) {\n     //~^ NOTE required by a bound in this\n+    //~| NOTE required by a bound in this\n     todo!()\n }\n \n fn main() {\n     let some_generated_vec = (0..10).collect();\n     //~^ ERROR the size for values of type `[i32]` cannot be known at compilation time\n+    //~| ERROR the size for values of type `[i32]` cannot be known at compilation time\n     //~| ERROR a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n     //~| NOTE try explicitly collecting into a `Vec<{integer}>`\n     //~| NOTE required by a bound in `collect`\n+    //~| NOTE required by a bound in `collect`\n     //~| NOTE all local variables must have a statically known size\n     //~| NOTE doesn't have a size known at compile-time\n+    //~| NOTE doesn't have a size known at compile-time\n+    //~| NOTE required by a bound introduced by this call\n     process_slice(&some_generated_vec);\n }"}, {"sha": "bce40118bdfa0ad5b50fb7442e131469a71ac60f", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n-  --> $DIR/collect-into-slice.rs:7:9\n+  --> $DIR/collect-into-slice.rs:8:9\n    |\n LL |     let some_generated_vec = (0..10).collect();\n    |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -8,11 +8,26 @@ LL |     let some_generated_vec = (0..10).collect();\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n \n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/collect-into-slice.rs:8:38\n+   |\n+LL |     let some_generated_vec = (0..10).collect();\n+   |                                      ^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                ^ required by this bound in `collect`\n+\n error[E0277]: a slice of type `[i32]` cannot be built since `[i32]` has no definite size\n-  --> $DIR/collect-into-slice.rs:7:38\n+  --> $DIR/collect-into-slice.rs:8:30\n    |\n LL |     let some_generated_vec = (0..10).collect();\n-   |                                      ^^^^^^^ try explicitly collecting into a `Vec<{integer}>`\n+   |                              ^^^^^^^ ------- required by a bound introduced by this call\n+   |                              |\n+   |                              try explicitly collecting into a `Vec<{integer}>`\n    |\n    = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n note: required by a bound in `collect`\n@@ -21,6 +36,6 @@ note: required by a bound in `collect`\n LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "542807fb91ca39de1de6933222c1010782c9eacc", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -8,6 +8,14 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:2:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:5:14\n    |\n@@ -27,6 +35,14 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:8:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:17:28\n    |\n@@ -37,6 +53,14 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:17:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `()` is not an iterator\n   --> $DIR/issue-28098.rs:20:28\n    |\n@@ -47,6 +71,14 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:20:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `bool` is not an iterator\n   --> $DIR/issue-28098.rs:23:14\n    |\n@@ -56,6 +88,6 @@ LL |     for _ in false {}\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required for `bool` to implement `IntoIterator`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "cc6e1f59c7789e212bb64fd82ddaa75b142df34e", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,12 @@\n error[E0277]: `Rc<usize>` cannot be sent between threads safely\n-  --> $DIR/kindck-nonsendable-1.rs:9:5\n+  --> $DIR/kindck-nonsendable-1.rs:9:9\n    |\n LL |     bar(move|| foo(x));\n-   |     ^^^ ------ within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`\n-   |     |\n-   |     `Rc<usize>` cannot be sent between threads safely\n+   |     --- ------^^^^^^^\n+   |     |   |\n+   |     |   `Rc<usize>` cannot be sent between threads safely\n+   |     |   within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`\n+   |     required by a bound introduced by this call\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:15]`, the trait `Send` is not implemented for `Rc<usize>`\n note: required because it's used within this closure"}, {"sha": "e9bbeeacd7013ea21c61c068028c80142bcfb962", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object.rs:12:5\n+  --> $DIR/kindck-send-object.rs:12:19\n    |\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object.rs:17:5\n+  --> $DIR/kindck-send-object.rs:17:19\n    |\n LL |     assert_send::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`"}, {"sha": "11f597fee91be00435affb7d22fd99905ded27f7", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:10:19\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `&'a (dyn Dummy + 'a)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:28:5\n+  --> $DIR/kindck-send-object1.rs:28:19\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required for `Unique<(dyn Dummy + 'a)>` to implement `Send`"}, {"sha": "b8af33d0dc120313c435d246754f1798af0fac8c", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object2.rs:7:5\n+  --> $DIR/kindck-send-object2.rs:7:19\n    |\n LL |     assert_send::<&'static dyn Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n+   |                   ^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required for `&'static (dyn Dummy + 'static)` to implement `Send`\n@@ -13,10 +13,10 @@ LL | fn assert_send<T:Send>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object2.rs:12:5\n+  --> $DIR/kindck-send-object2.rs:12:19\n    |\n LL |     assert_send::<Box<dyn Dummy>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required for `Unique<dyn Dummy>` to implement `Send`"}, {"sha": "b03f56465cea0d270aeeccba2e04c35ff655f5bd", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `*mut u8` cannot be sent between threads safely\n-  --> $DIR/kindck-send-owned.rs:12:5\n+  --> $DIR/kindck-send-owned.rs:12:19\n    |\n LL |     assert_send::<Box<*mut u8>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n    = note: required for `Unique<*mut u8>` to implement `Send`"}, {"sha": "33f82448dd2acd87fd701c178ba088ceede166d0", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Bar` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/branches.rs:19:28\n+  --> $DIR/branches.rs:19:9\n    |\n LL |         std::iter::empty().collect()\n-   |                            ^^^^^^^ value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `Bar` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Bar`\n note: required by a bound in `collect`"}, {"sha": "57978edf2bf0505fc9397326d8f8a3149abd874b", "filename": "src/test/ui/lazy-type-alias-impl-trait/recursion4.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Frecursion4.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: a value of type `Foo` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:10:28\n+  --> $DIR/recursion4.rs:10:9\n    |\n LL |     x = std::iter::empty().collect();\n-   |                            ^^^^^^^ value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `Foo` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `Foo`\n note: required by a bound in `collect`\n@@ -12,10 +14,12 @@ LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: a value of type `impl Debug` cannot be built from an iterator over elements of type `_`\n-  --> $DIR/recursion4.rs:19:28\n+  --> $DIR/recursion4.rs:19:9\n    |\n LL |     x = std::iter::empty().collect();\n-   |                            ^^^^^^^ value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n+   |         ^^^^^^^^^^^^^^^^^^ ------- required by a bound introduced by this call\n+   |         |\n+   |         value of type `impl Debug` cannot be built from `std::iter::Iterator<Item=_>`\n    |\n    = help: the trait `FromIterator<_>` is not implemented for `impl Debug`\n note: required by a bound in `collect`"}, {"sha": "754735988e48e6cf659e91d7ea130630bf286bed", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:26:7\n    |\n LL |     x.foo();\n-   |       ^^^\n+   |     - ^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Vec<_>: Foo` found\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:9:1"}, {"sha": "32ec9ecc474fbf4e7ef57f01e55eeae20d5b2cb1", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,12 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/E0631.rs:7:5\n+  --> $DIR/E0631.rs:7:9\n    |\n LL |     foo(|_: isize| {});\n-   |     ^^^ ---------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     --- ----------^^^\n+   |     |   |\n+   |     |   expected due to this\n+   |     |   found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(usize) -> _`\n               found closure signature `fn(isize) -> _`\n@@ -15,12 +17,14 @@ LL | fn foo<F: Fn(usize)>(_: F) {}\n    |           ^^^^^^^^^ required by this bound in `foo`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/E0631.rs:8:5\n+  --> $DIR/E0631.rs:8:9\n    |\n LL |     bar(|_: isize| {});\n-   |     ^^^ ---------- found signature defined here\n-   |     |\n-   |     expected due to this\n+   |     --- ----------^^^\n+   |     |   |\n+   |     |   expected due to this\n+   |     |   found signature defined here\n+   |     required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(usize) -> _`\n               found closure signature `fn(isize) -> _`"}, {"sha": "c194e1dbc9a4347bd5fbd2772195e610f43cb296", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -46,12 +46,14 @@ LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n    |                       ~~~~~~~~~~~~~~~\n \n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:13:5\n+  --> $DIR/closure-arg-count.rs:13:7\n    |\n LL |     f(|| panic!());\n-   |     ^ -- takes 0 arguments\n-   |     |\n-   |     expected closure that takes 1 argument\n+   |     - --^^^^^^^^^\n+   |     | |\n+   |     | expected closure that takes 1 argument\n+   |     | takes 0 arguments\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9\n@@ -64,12 +66,14 @@ LL |     f(|_| panic!());\n    |       ~~~\n \n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:15:5\n+  --> $DIR/closure-arg-count.rs:15:9\n    |\n LL |     f(  move    || panic!());\n-   |     ^   ---------- takes 0 arguments\n-   |     |\n-   |     expected closure that takes 1 argument\n+   |     -   ----------^^^^^^^^^\n+   |     |   |\n+   |     |   expected closure that takes 1 argument\n+   |     |   takes 0 arguments\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `f`\n   --> $DIR/closure-arg-count.rs:3:9"}, {"sha": "0df71af3e70f7da54b2d80a22d35c493b98006bb", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,12 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:3:14\n+  --> $DIR/closure-arg-type-mismatch.rs:3:18\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ --------------- found signature defined here\n-   |              |\n-   |              expected due to this\n+   |              --- ---------------^^^\n+   |              |   |\n+   |              |   expected due to this\n+   |              |   found signature defined here\n+   |              required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n               found closure signature `fn((u32, u32)) -> _`\n@@ -15,12 +17,14 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:4:14\n+  --> $DIR/closure-arg-type-mismatch.rs:4:18\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n-   |              ^^^ ---------------- found signature defined here\n-   |              |\n-   |              expected due to this\n+   |              --- ----------------^^^\n+   |              |   |\n+   |              |   expected due to this\n+   |              |   found signature defined here\n+   |              required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n               found closure signature `for<'r> fn(&'r (u16, u16)) -> _`\n@@ -31,12 +35,14 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:5:14\n+  --> $DIR/closure-arg-type-mismatch.rs:5:18\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n-   |              ^^^ --------------- found signature defined here\n-   |              |\n-   |              expected due to this\n+   |              --- ---------------^^^\n+   |              |   |\n+   |              |   expected due to this\n+   |              |   found signature defined here\n+   |              required by a bound introduced by this call\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n               found closure signature `fn((u16, u16)) -> _`"}, {"sha": "86348b50475288f74381a30407749eceae77f02c", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,12 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/issue-36053-2.rs:7:32\n+  --> $DIR/issue-36053-2.rs:7:39\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ --------- found signature defined here\n-   |                                |\n-   |                                expected due to this\n+   |                                ------ ---------^^^^^\n+   |                                |      |\n+   |                                |      expected due to this\n+   |                                |      found signature defined here\n+   |                                required by a bound introduced by this call\n    |\n    = note: expected closure signature `for<'r> fn(&'r &str) -> _`\n               found closure signature `for<'r> fn(&'r str) -> _`"}, {"sha": "36748fae13c9413fae09d3b016b6ed0776b460fa", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: `Foo` doesn't implement `Debug`\n-  --> $DIR/method-help-unsatisfied-bound.rs:5:7\n+  --> $DIR/method-help-unsatisfied-bound.rs:5:5\n    |\n LL |     a.unwrap();\n-   |       ^^^^^^ `Foo` cannot be formatted using `{:?}`\n+   |     ^ ------ required by a bound introduced by this call\n+   |     |\n+   |     `Foo` cannot be formatted using `{:?}`\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`"}, {"sha": "283aca1b084effd3c779cb508abd58b6578b6f40", "filename": "src/test/ui/never_type/defaulted-never-note.fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.fallback.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n-  --> $DIR/defaulted-never-note.rs:30:5\n+  --> $DIR/defaulted-never-note.rs:30:9\n    |\n LL |     foo(_x);\n-   |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n+   |     --- ^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `ImplementedForUnitButNotNever` is implemented for `()`\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information)"}, {"sha": "d30ffcd3846e7f74d7b18dbddc6be52c75c0bfe3", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -32,6 +32,7 @@ fn smeg() {\n     //[fallback]~| NOTE the trait `ImplementedForUnitButNotNever` is not implemented\n     //[fallback]~| HELP trait `ImplementedForUnitButNotNever` is implemented for `()`\n     //[fallback]~| NOTE this error might have been caused\n+    //[fallback]~| NOTE required by a bound introduced by this call\n     //[fallback]~| HELP did you intend\n }\n "}, {"sha": "3215c4669d5e3ba9df2959556e94a099d5effe6b", "filename": "src/test/ui/never_type/diverging-fallback-no-leak.fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-fallback-no-leak.fallback.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `!: Test` is not satisfied\n-  --> $DIR/diverging-fallback-no-leak.rs:17:5\n+  --> $DIR/diverging-fallback-no-leak.rs:17:23\n    |\n LL |     unconstrained_arg(return);\n-   |     ^^^^^^^^^^^^^^^^^ the trait `Test` is not implemented for `!`\n+   |     ----------------- ^^^^^^ the trait `Test` is not implemented for `!`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `Test`:\n              ()"}, {"sha": "6a4726a8cc9e09cb4930b488e9687a89af0ae51b", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,14 +1,19 @@\n error[E0277]: the trait bound `(): T` is not satisfied\n-  --> $DIR/feature-gate-never_type_fallback.rs:10:5\n+  --> $DIR/feature-gate-never_type_fallback.rs:10:9\n    |\n LL |     foo(panic!())\n-   |     ^^^ the trait `T` is not implemented for `()`\n+   |     --- ^^^^^^^^\n+   |     |   |\n+   |     |   the trait `T` is not implemented for `()`\n+   |     |   this tail expression is of type `_`\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `foo`\n   --> $DIR/feature-gate-never_type_fallback.rs:13:16\n    |\n LL | fn foo(_: impl T) {}\n    |                ^ required by this bound in `foo`\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c864b93dbbbe17aef49193dbc69acc3f43930b30", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n-  --> $DIR/no-send-res-ports.rs:25:5\n+  --> $DIR/no-send-res-ports.rs:25:19\n    |\n-LL |     thread::spawn(move|| {\n-   |     ^^^^^^^^^^^^^ ------ within this `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`\n-   |     |\n-   |     `Rc<()>` cannot be sent between threads safely\n+LL |       thread::spawn(move|| {\n+   |       ------------- ^-----\n+   |       |             |\n+   |  _____|_____________within this `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`\n+   | |     |\n+   | |     required by a bound introduced by this call\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____^ `Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 25:25]`, the trait `Send` is not implemented for `Rc<()>`\n note: required because it appears within the type `Port<()>`"}, {"sha": "f61ee661bb7edbe205b97b68bcb99383eca8ae8c", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,11 +1,13 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied in `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n-  --> $DIR/not-clone-closure.rs:11:23\n+  --> $DIR/not-clone-closure.rs:11:17\n    |\n LL |     let hello = move || {\n    |                 ------- within this `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`\n ...\n LL |     let hello = hello.clone();\n-   |                       ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n+   |                 ^^^^^ ----- required by a bound introduced by this call\n+   |                 |\n+   |                 within `[closure@$DIR/not-clone-closure.rs:7:17: 7:24]`, the trait `Clone` is not implemented for `S`\n    |\n note: required because it's used within this closure\n   --> $DIR/not-clone-closure.rs:7:17"}, {"sha": "3b0f83b3b9a47154711b8099a2c73c02c5d6f854", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-2.rs:10:5\n+  --> $DIR/not-panic-safe-2.rs:10:14\n    |\n LL |     assert::<Rc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-2.rs:10:5\n+  --> $DIR/not-panic-safe-2.rs:10:14\n    |\n LL |     assert::<Rc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "9e9a12764a4b6f9e966a0c61d870b65630a82671", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-3.rs:10:5\n+  --> $DIR/not-panic-safe-3.rs:10:14\n    |\n LL |     assert::<Arc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-3.rs:10:5\n+  --> $DIR/not-panic-safe-3.rs:10:14\n    |\n LL |     assert::<Arc<RefCell<i32>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "fc1c594d0d422041ec99e62e30ca70c5c28600ee", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-4.rs:9:5\n+  --> $DIR/not-panic-safe-4.rs:9:14\n    |\n LL |     assert::<&RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-4.rs:9:5\n+  --> $DIR/not-panic-safe-4.rs:9:14\n    |\n LL |     assert::<&RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "cb78370b48a6cc149b97bb11cd9a05ec7b9d982e", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-5.rs:9:5\n+  --> $DIR/not-panic-safe-5.rs:9:14\n    |\n LL |     assert::<*const UnsafeCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required for `*const UnsafeCell<i32>` to implement `UnwindSafe`"}, {"sha": "7986e341eb01f602ef615fb3fa11b70e41c736d1", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-6.rs:9:5\n+  --> $DIR/not-panic-safe-6.rs:9:14\n    |\n LL |     assert::<*mut RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n@@ -14,10 +14,10 @@ LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n-  --> $DIR/not-panic-safe-6.rs:9:5\n+  --> $DIR/not-panic-safe-6.rs:9:14\n    |\n LL |     assert::<*mut RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n+   |              ^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`"}, {"sha": "ad0cebb37360a6d245ba2ec4deb7ef0f9c53daf9", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -11,6 +11,17 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:33:5\n+   |\n+LL |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:35:18\n    |\n@@ -24,6 +35,17 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:35:5\n+   |\n+LL |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:37:18\n    |\n@@ -37,6 +59,17 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:37:5\n+   |\n+LL |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "769a3d77a5726bcd9e78429a7aa17ac5719c7410", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -9,6 +9,15 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n    = help: the trait `Index<usize>` is implemented for `[i32]`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:22:5\n+   |\n+LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is implemented for `[i32]`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a00f37ed6069c1ecc7beece0ce84427bdf26b273", "filename": "src/test/ui/parser/issues/issue-67377-invalid-syntax-in-enum-discriminant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -107,10 +107,10 @@ LL |         V = [Vec::new; { [0].len() ].len() as isize,\n    |             closing delimiter possibly meant for this\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:29\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:26\n    |\n LL |         V = [Vec::new; { [].len()  ].len() as isize,\n-   |                             ^^^ cannot infer type for type parameter `T`\n+   |                          ^^ cannot infer type for type parameter `T`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:14"}, {"sha": "683162a5daec67d6703d9f97b27e8dbdd31cfe3e", "filename": "src/test/ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fmove-ref-patterns-closure-captures.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -8,7 +8,7 @@ LL |         drop::<U>(_x1);\n    |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n ...\n LL |     accept_fn_mut(&c1);\n-   |     ------------- the requirement to implement `FnMut` derives from here\n+   |                   --- the requirement to implement `FnMut` derives from here\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/move-ref-patterns-closure-captures.rs:9:14\n@@ -20,7 +20,7 @@ LL |         drop::<U>(_x1);\n    |                   --- closure is `FnOnce` because it moves the variable `_x1` out of its environment\n ...\n LL |     accept_fn(&c1);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |               --- the requirement to implement `Fn` derives from here\n \n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/move-ref-patterns-closure-captures.rs:20:14\n@@ -32,7 +32,7 @@ LL |         drop::<&mut U>(_x2);\n    |                        --- closure is `FnMut` because it mutates the variable `_x2` here\n ...\n LL |     accept_fn(&c2);\n-   |     --------- the requirement to implement `Fn` derives from here\n+   |               --- the requirement to implement `Fn` derives from here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fddc8d37f2ff7ddcc54ff02b6037af009293e144", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satisfied\n-  --> $DIR/const-default-method-bodies.rs:24:18\n+  --> $DIR/const-default-method-bodies.rs:24:5\n    |\n LL |     NonConstImpl.a();\n-   |                  ^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+   |     ^^^^^^^^^^^^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n    |\n note: the trait `ConstDefaultFn` is implemented for `NonConstImpl`, but that implementation is not `const`\n-  --> $DIR/const-default-method-bodies.rs:24:18\n+  --> $DIR/const-default-method-bodies.rs:24:5\n    |\n LL |     NonConstImpl.a();\n-   |                  ^\n+   |     ^^^^^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn test() where NonConstImpl: ~const ConstDefaultFn {"}, {"sha": "d4fa44b4bfcb572a0650e335dcb0f98fc4b1651b", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gatednc.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gatednc.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |     ^^^^^^^^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^\n+   |     ^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {"}, {"sha": "71ecd9b06945fb4150f2172f8c29b2d6804ab133", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.stocknc.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.stocknc.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `cross_crate::NonConst: cross_crate::MyTrait` is not satisfied\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+   |     ^^^^^^^^ ---- required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n    |\n note: the trait `cross_crate::MyTrait` is implemented for `cross_crate::NonConst`, but that implementation is not `const`\n-  --> $DIR/cross-crate.rs:17:14\n+  --> $DIR/cross-crate.rs:17:5\n    |\n LL |     NonConst.func();\n-   |              ^^^^\n+   |     ^^^^^^^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | const fn const_context() where cross_crate::NonConst: ~const cross_crate::MyTrait {"}, {"sha": "85285ba8497779ff9e3ec17603fd894c7df2c150", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9\n    |\n LL |         ().a()\n-   |            ^ the trait `~const Tr` is not implemented for `()`\n+   |         ^^ - required by a bound introduced by this call\n+   |         |\n+   |         the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:12\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:8:9\n    |\n LL |         ().a()\n-   |            ^\n+   |         ^^\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | pub trait Tr where (): ~const Tr {"}, {"sha": "6daa74657bd8e6e31fd815946028e6c145a9e3bb", "filename": "src/test/ui/str/str-idx.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-idx.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -28,6 +28,17 @@ note: required by a bound in `core::str::<impl str>::get`\n LL |     pub const fn get<I: ~const SliceIndex<str>>(&self, i: I) -> Option<&I::Output> {\n    |                         ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get`\n \n+error[E0277]: the type `str` cannot be indexed by `{integer}`\n+  --> $DIR/str-idx.rs:4:15\n+   |\n+LL |     let _ = s.get(4);\n+   |               ^^^ string indices are ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-idx.rs:5:29\n    |\n@@ -46,6 +57,17 @@ note: required by a bound in `core::str::<impl str>::get_unchecked`\n LL |     pub const unsafe fn get_unchecked<I: ~const SliceIndex<str>>(&self, i: I) -> &I::Output {\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked`\n \n+error[E0277]: the type `str` cannot be indexed by `{integer}`\n+  --> $DIR/str-idx.rs:5:15\n+   |\n+LL |     let _ = s.get_unchecked(4);\n+   |               ^^^^^^^^^^^^^ string indices are ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+\n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-idx.rs:6:19\n    |\n@@ -55,6 +77,6 @@ LL |     let _: u8 = s['c'];\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required for `str` to implement `Index<char>`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d063088aded83d36fa4e1b61e41de7f3836ec0a9", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -52,6 +52,17 @@ note: required by a bound in `core::str::<impl str>::get_mut`\n LL |     pub const fn get_mut<I: ~const SliceIndex<str>>(&mut self, i: I) -> Option<&mut I::Output> {\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_mut`\n \n+error[E0277]: the type `str` cannot be indexed by `{integer}`\n+  --> $DIR/str-mut-idx.rs:9:7\n+   |\n+LL |     s.get_mut(1);\n+   |       ^^^^^^^ string indices are ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+\n error[E0277]: the type `str` cannot be indexed by `{integer}`\n   --> $DIR/str-mut-idx.rs:11:25\n    |\n@@ -70,6 +81,17 @@ note: required by a bound in `core::str::<impl str>::get_unchecked_mut`\n LL |     pub const unsafe fn get_unchecked_mut<I: ~const SliceIndex<str>>(\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `core::str::<impl str>::get_unchecked_mut`\n \n+error[E0277]: the type `str` cannot be indexed by `{integer}`\n+  --> $DIR/str-mut-idx.rs:11:7\n+   |\n+LL |     s.get_unchecked_mut(1);\n+   |       ^^^^^^^^^^^^^^^^^ string indices are ranges of `usize`\n+   |\n+   = help: the trait `SliceIndex<str>` is not implemented for `{integer}`\n+   = note: you can use `.chars().nth()` or `.bytes().nth()`\n+           for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n+   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n+\n error[E0277]: the type `str` cannot be indexed by `char`\n   --> $DIR/str-mut-idx.rs:13:7\n    |\n@@ -79,6 +101,6 @@ LL |     s['c'];\n    = help: the trait `SliceIndex<str>` is not implemented for `char`\n    = note: required for `str` to implement `Index<char>`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "864ab053520db2f738f08652b16d6283ff997cd5", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `for<'b> &'b S: Trait` is not satisfied\n-  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:5\n+  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:14\n    |\n LL |     foo::<S>(s);\n-   |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n+   |     -------- ^ the trait `for<'b> Trait` is not implemented for `&'b S`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Trait` is implemented for `&'a mut S`\n    = note: `for<'b> Trait` is implemented for `&'b mut S`, but not for `&'b S`"}, {"sha": "684db23e1355f3ff31f596d73198298221964bd2", "filename": "src/test/ui/suggestions/issue-71394-no-from-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-71394-no-from-impl.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `&[i8]: From<&[u8]>` is not satisfied\n-  --> $DIR/issue-71394-no-from-impl.rs:3:25\n+  --> $DIR/issue-71394-no-from-impl.rs:3:20\n    |\n LL |     let _: &[i8] = data.into();\n-   |                         ^^^^ the trait `From<&[u8]>` is not implemented for `&[i8]`\n+   |                    ^^^^ ---- required by a bound introduced by this call\n+   |                    |\n+   |                    the trait `From<&[u8]>` is not implemented for `&[i8]`\n    |\n    = help: the following other types implement trait `From<T>`:\n              <[T; LANES] as From<Simd<T, LANES>>>"}, {"sha": "c20cc816484b4652f8caca83a3611f7e9f7b9aa3", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -31,10 +31,12 @@ LL | #[derive(Clone)]\n    |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]` cannot be unpinned\n-  --> $DIR/issue-84973-blacklist.rs:17:5\n+  --> $DIR/issue-84973-blacklist.rs:17:13\n    |\n LL |     f_unpin(static || { yield; });\n-   |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]`\n+   |     ------- ^^^^^^^^^^^^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: consider using `Box::pin`\n note: required by a bound in `f_unpin`"}, {"sha": "ad8558599080b15b86a09b792a6cf3af6f8660f9", "filename": "src/test/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,11 +1,10 @@\n error[E0277]: the trait bound `Fancy: SomeTrait` is not satisfied\n-  --> $DIR/issue-84973.rs:6:24\n+  --> $DIR/issue-84973.rs:6:13\n    |\n LL |     let o = Other::new(f);\n-   |             ---------- ^ expected an implementor of trait `SomeTrait`\n-   |             |\n-   |             required by a bound introduced by this call\n+   |             ^^^^^^^^^^ the trait `SomeTrait` is not implemented for `Fancy`\n    |\n+   = help: the trait `SomeTrait` is implemented for `&'a Fancy`\n note: required by a bound in `Other::<'a, G>::new`\n   --> $DIR/issue-84973.rs:25:8\n    |\n@@ -14,10 +13,6 @@ LL |     G: SomeTrait,\n LL | {\n LL |     pub fn new(g: G) -> Self {\n    |            --- required by a bound in this\n-help: consider borrowing here\n-   |\n-LL |     let o = Other::new(&f);\n-   |                        +\n \n error: aborting due to previous error\n "}, {"sha": "420be973b724ec4ab519984823b668a95c913f4f", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n-   |              -------------- ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n-   |              |\n-   |              required by a bound introduced by this call\n+   |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter::<W>::new`\n@@ -13,6 +11,19 @@ note: required by a bound in `BufWriter::<W>::new`\n LL | impl<W: Write> BufWriter<W> {\n    |         ^^^^^ required by this bound in `BufWriter::<W>::new`\n \n+error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n+   |\n+LL |     let fp = BufWriter::new(fp);\n+   |              ^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n+   |\n+   = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n+note: required by a bound in `BufWriter`\n+  --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n+   |\n+LL | pub struct BufWriter<W: Write> {\n+   |                         ^^^^^ required by this bound in `BufWriter`\n+\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n@@ -42,7 +53,7 @@ LL | pub struct BufWriter<W: Write> {\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in the macro `writeln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0599.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "6ce9bfd9dcaa2b385cbaf8bf85a998e7492aecbc", "filename": "src/test/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n    |\n LL |     check(s);\n-   |     ----- ^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^ doesn't have a size known at compile-time\n    |\n    = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n    = note: required because it appears within the type `OsStr`"}, {"sha": "671596fe45520d1b1cd25819afee1cc37d1bfb52", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,29 +1,19 @@\n error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n-  --> $DIR/suggest-change-mut.rs:12:48\n+  --> $DIR/suggest-change-mut.rs:12:33\n    |\n LL |         let mut stream_reader = BufReader::new(&stream);\n-   |                                 -------------- ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n-   |                                 |\n-   |                                 required by a bound introduced by this call\n+   |                                 ^^^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n    |\n+   = note: `std::io::Read` is implemented for `&mut T`, but not for `&T`\n note: required by a bound in `BufReader::<R>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n    |\n LL | impl<R: Read> BufReader<R> {\n    |         ^^^^ required by this bound in `BufReader::<R>::new`\n-help: consider removing the leading `&`-reference\n-   |\n-LL -         let mut stream_reader = BufReader::new(&stream);\n-LL +         let mut stream_reader = BufReader::new(stream);\n-   |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn issue_81421<T: Read + Write>(mut stream: T) where &T: std::io::Read {\n    |                                                +++++++++++++++++++++++\n-help: consider changing this borrow's mutability\n-   |\n-LL |         let mut stream_reader = BufReader::new(&mut stream);\n-   |                                                ~~~~\n \n error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its trait bounds were not satisfied\n   --> $DIR/suggest-change-mut.rs:16:23"}, {"sha": "fa7a8a2a093358aedfa136e480000cc29c23d9ce", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/check-trait-object-bounds-1.rs:12:5\n+  --> $DIR/check-trait-object-bounds-1.rs:12:9\n    |\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |         ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`"}, {"sha": "4084f69a6f04b736b2e62f42556ac082b3f2b9a9", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: expected a `FnOnce<(&i32,)>` closure, found `i32`\n-  --> $DIR/check-trait-object-bounds-2.rs:13:5\n+  --> $DIR/check-trait-object-bounds-2.rs:13:9\n    |\n LL |     f::<dyn for<'x> X<'x, F = i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r i32,)>` is not implemented for `i32`\n note: required by a bound in `f`"}, {"sha": "4891ee9c29f7e28cf106f9db49bae2b214ca49e8", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/check-trait-object-bounds-4.rs:15:5\n+  --> $DIR/check-trait-object-bounds-4.rs:15:9\n    |\n LL |     f::<dyn X<Y = str>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |         ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `f`"}, {"sha": "56acfbe80d03f6c76a646727388774c49d9b8914", "filename": "src/test/ui/traits/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-method-typaram-kind.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/bad-method-typaram-kind.rs:2:7\n+  --> $DIR/bad-method-typaram-kind.rs:2:13\n    |\n LL |     1.bar::<T>();\n-   |       ^^^ `T` cannot be sent between threads safely\n+   |             ^ `T` cannot be sent between threads safely\n    |\n note: required by a bound in `Bar::bar`\n   --> $DIR/bad-method-typaram-kind.rs:6:14"}, {"sha": "f9a9347641143f891ad74b8421914c9e83781058", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.rs?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,7 +2,6 @@ fn strip_lf(s: &str) -> &str {\n     s.strip_suffix(b'\\n').unwrap_or(s)\n     //~^ ERROR expected a `FnMut<(char,)>` closure, found `u8`\n     //~| NOTE expected an `FnMut<(char,)>` closure, found `u8`\n-    //~| NOTE required by a bound introduced by this call\n     //~| HELP the trait `FnMut<(char,)>` is not implemented for `u8`\n     //~| HELP the following other types implement trait `Pattern<'a>`:\n     //~| NOTE required for `u8` to implement `Pattern<'_>`"}, {"sha": "ce9ab2d811ae112d22c7959e17374755b6e90463", "filename": "src/test/ui/traits/bound/assoc-fn-bound-root-obligation.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fassoc-fn-bound-root-obligation.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: expected a `FnMut<(char,)>` closure, found `u8`\n-  --> $DIR/assoc-fn-bound-root-obligation.rs:2:20\n+  --> $DIR/assoc-fn-bound-root-obligation.rs:2:7\n    |\n LL |     s.strip_suffix(b'\\n').unwrap_or(s)\n-   |       ------------ ^^^^^ expected an `FnMut<(char,)>` closure, found `u8`\n-   |       |\n-   |       required by a bound introduced by this call\n+   |       ^^^^^^^^^^^^ expected an `FnMut<(char,)>` closure, found `u8`\n    |\n    = help: the trait `FnMut<(char,)>` is not implemented for `u8`\n    = help: the following other types implement trait `Pattern<'a>`:"}, {"sha": "e8d90fb336e19765f4bee1f9be99acc05062eb8c", "filename": "src/test/ui/traits/do-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fdo-not-mention-type-params-by-name-in-suggestion-issue-96292.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:17:11\n    |\n LL |     thing.method(42);\n-   |           ^^^^^^\n+   |     ----- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing<bool>: Method<_>` found\n   --> $DIR/do-not-mention-type-params-by-name-in-suggestion-issue-96292.rs:7:1"}, {"sha": "28c7c85d48416c23fbe0db2c3417ee8f3b6dbca9", "filename": "src/test/ui/traits/inheritance/repeated-supertrait-ambig.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finheritance%2Frepeated-supertrait-ambig.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,18 +1,22 @@\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:26:7\n+  --> $DIR/repeated-supertrait-ambig.rs:26:5\n    |\n LL |     c.same_as(22)\n-   |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n+   |     ^ ------- required by a bound introduced by this call\n+   |     |\n+   |     the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:30:7\n+  --> $DIR/repeated-supertrait-ambig.rs:30:5\n    |\n LL |     c.same_as(22)\n-   |       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     ^ ------- required by a bound introduced by this call\n+   |     |\n+   |     the trait `CompareTo<i32>` is not implemented for `C`\n    |\n help: consider further restricting this bound\n    |\n@@ -30,21 +34,25 @@ LL |     <dyn CompareToInts>::same_as(c, 22)\n              <i64 as CompareTo<u64>>\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:38:5\n+  --> $DIR/repeated-supertrait-ambig.rs:38:24\n    |\n LL |     CompareTo::same_as(c, 22)\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     ------------------ ^ the trait `CompareTo<i32>` is not implemented for `C`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n help: consider further restricting this bound\n    |\n LL | fn with_ufcs2<C:CompareToInts + CompareTo<i32>>(c: &C) -> bool {\n    |                               ++++++++++++++++\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n-  --> $DIR/repeated-supertrait-ambig.rs:42:23\n+  --> $DIR/repeated-supertrait-ambig.rs:42:16\n    |\n LL |     assert_eq!(22_i64.same_as(22), true);\n-   |                       ^^^^^^^ the trait `CompareTo<i32>` is not implemented for `i64`\n+   |                ^^^^^^ ------- required by a bound introduced by this call\n+   |                |\n+   |                the trait `CompareTo<i32>` is not implemented for `i64`\n    |\n    = help: the following other types implement trait `CompareTo<T>`:\n              <i64 as CompareTo<i64>>"}, {"sha": "a8a46ec11c8005ba9ac414af1554d5b902d96a7e", "filename": "src/test/ui/traits/issue-71136.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-71136.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,18 +1,14 @@\n-error[E0277]: the trait bound `Foo: Clone` is not satisfied\n+error[E0277]: the trait bound `Vec<Foo>: Clone` is not satisfied\n   --> $DIR/issue-71136.rs:5:5\n    |\n LL | #[derive(Clone)]\n    |          ----- in this derive macro expansion\n LL | struct FooHolster {\n LL |     the_foos: Vec<Foo>,\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `Foo`\n+   |     ^^^^^^^^^^^^^^^^^^ expected an implementor of trait `~const Clone`\n    |\n    = note: required for `Vec<Foo>` to implement `Clone`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider annotating `Foo` with `#[derive(Clone)]`\n-   |\n-LL | #[derive(Clone)]\n-   |\n \n error: aborting due to previous error\n "}, {"sha": "b990cef318bcc3f85f3ff8e0fd644a6162266f05", "filename": "src/test/ui/traits/issue-77982.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-77982.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,7 +2,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:10\n    |\n LL |     opts.get(opt.as_ref());\n-   |          ^^^ cannot infer type of the type parameter `Q` declared on the associated function `get`\n+   |          ^^^ ------------ type must be known at this point\n+   |          |\n+   |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: Borrow<_>` found in the following crates: `alloc`, `core`:\n            - impl Borrow<str> for String;\n@@ -13,7 +15,7 @@ note: required by a bound in `HashMap::<K, V, S>::get`\n    |\n LL |         K: Borrow<Q>,\n    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`\n-help: consider specifying the type argument in the function call\n+help: consider specifying the generic argument\n    |\n LL |     opts.get::<Q>(opt.as_ref());\n    |             +++++\n@@ -22,8 +24,9 @@ error[E0283]: type annotations needed\n   --> $DIR/issue-77982.rs:8:10\n    |\n LL |     opts.get(opt.as_ref());\n-   |          ^^^     ------ type must be known at this point\n-   |          |\n+   |          ^^^ --- ------ required by a bound introduced by this call\n+   |          |   |\n+   |          |   type must be known at this point\n    |          cannot infer type of the type parameter `Q` declared on the associated function `get`\n    |\n    = note: multiple `impl`s satisfying `String: AsRef<_>` found in the following crates: `alloc`, `std`:\n@@ -59,7 +62,9 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:36:9\n    |\n LL |     let _ = ().foo();\n-   |         ^      --- type must be known at this point\n+   |         ^   -- --- required by a bound introduced by this call\n+   |             |\n+   |             type must be known at this point\n    |\n note: multiple `impl`s satisfying `(): Foo<'_, _>` found\n   --> $DIR/issue-77982.rs:29:1\n@@ -77,7 +82,9 @@ error[E0283]: type annotations needed for `Box<T>`\n   --> $DIR/issue-77982.rs:40:9\n    |\n LL |     let _ = (&()).bar();\n-   |         ^         --- type must be known at this point\n+   |         ^   ----- --- required by a bound introduced by this call\n+   |             |\n+   |             type must be known at this point\n    |\n note: multiple `impl`s satisfying `&(): Bar<'_, _>` found\n   --> $DIR/issue-77982.rs:32:1"}, {"sha": "146d38d076a3ccb1e7696c60c940fdf82cab8773", "filename": "src/test/ui/traits/issue-97576.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97576.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `String: From<impl ToString>` is not satisfied\n-  --> $DIR/issue-97576.rs:8:22\n+  --> $DIR/issue-97576.rs:8:18\n    |\n LL |             bar: bar.into(),\n-   |                      ^^^^ the trait `From<impl ToString>` is not implemented for `String`\n+   |                  ^^^ ---- required by a bound introduced by this call\n+   |                  |\n+   |                  the trait `From<impl ToString>` is not implemented for `String`\n    |\n    = note: required for `impl ToString` to implement `Into<String>`\n "}, {"sha": "83fb04646c53f97c71164ab000178e950aca51d9", "filename": "src/test/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/multidispatch-convert-ambig-dest.rs:26:5\n    |\n LL |     test(22, std::default::Default::default());\n-   |     ^^^^ cannot infer type of the type parameter `U` declared on the function `test`\n+   |     ^^^^ -- type must be known at this point\n+   |     |\n+   |     cannot infer type of the type parameter `U` declared on the function `test`\n    |\n note: multiple `impl`s satisfying `i32: Convert<_>` found\n   --> $DIR/multidispatch-convert-ambig-dest.rs:8:1\n@@ -30,10 +32,10 @@ LL | fn test<T,U>(_: T, _: U)\n    |    ---- required by a bound in this\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n-help: consider specifying the type arguments in the function call\n+help: consider specifying the generic arguments\n    |\n-LL |     test::<T, U>(22, std::default::Default::default());\n-   |         ++++++++\n+LL |     test::<i32, U>(22, std::default::Default::default());\n+   |         ++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "294af65347592cec1ea04ce9af427cf11887ffb0", "filename": "src/test/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:21:7\n    |\n LL |     a.method();\n-   |       ^^^^^^\n+   |     - ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `B: I<_>` found\n   --> $DIR/not-suggest-non-existing-fully-qualified-path.rs:5:1"}, {"sha": "9e221daabe5453850f2cdbef7789b2230eb63865", "filename": "src/test/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,12 +1,14 @@\n error[E0271]: type mismatch resolving `<dyn Trait<B = B, A = A> as SuperTrait>::A == B`\n-  --> $DIR/enforce-supertrait-projection.rs:9:17\n+  --> $DIR/enforce-supertrait-projection.rs:9:42\n    |\n LL | fn transmute<A, B>(x: A) -> B {\n    |              -  - expected type parameter\n    |              |\n    |              found type parameter\n LL |     foo::<A, B, dyn Trait<A = A, B = B>>(x)\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `B`, found type parameter `A`\n+   |     ------------------------------------ ^ expected type parameter `B`, found type parameter `A`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: expected type parameter `B`\n               found type parameter `A`"}, {"sha": "90d097105edc68a32d0e8283778035f00eb7a998", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.fixed?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,6 +13,6 @@ impl std::ops::Deref for NoToSocketAddrs {\n fn main() {\n     let _works = TcpListener::bind(\"some string\");\n     let bad = NoToSocketAddrs(\"bad\".to_owned());\n-    let _errors = TcpListener::bind(&*bad);\n+    let _errors = TcpListener::bind(&bad);\n     //~^ ERROR the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n }"}, {"sha": "1317a8445f5135088a42bf64a62cfab196154f2c", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,11 +1,21 @@\n error[E0277]: the trait bound `NoToSocketAddrs: ToSocketAddrs` is not satisfied\n-  --> $DIR/issue-39029.rs:16:37\n+  --> $DIR/issue-39029.rs:16:19\n    |\n LL |     let _errors = TcpListener::bind(&bad);\n    |                   ----------------- ^^^^ the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n    |                   |\n    |                   required by a bound introduced by this call\n    |\n+   = help: the following other types implement trait `ToSocketAddrs`:\n+             &'a [std::net::SocketAddr]\n+             &T\n+             (&str, u16)\n+             (IpAddr, u16)\n+             (Ipv4Addr, u16)\n+             (Ipv6Addr, u16)\n+             (String, u16)\n+             SocketAddrV4\n+           and 4 others\n    = note: required for `&NoToSocketAddrs` to implement `ToSocketAddrs`\n note: required by a bound in `TcpListener::bind`\n   --> $SRC_DIR/std/src/net/tcp.rs:LL:COL"}, {"sha": "07f7bfb7cb461e50de5f17ba43d6ade2b75cd7c6", "filename": "src/test/ui/traits/suggest-fully-qualified-path-with-adjustment.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-adjustment.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:45:11\n    |\n LL |     thing.method();\n-   |           ^^^^^^\n+   |     ----- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -32,7 +34,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:48:11\n    |\n LL |     thing.mut_method();\n-   |           ^^^^^^^^^^\n+   |     ----- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -51,7 +55,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:49:11\n    |\n LL |     thing.by_self();\n-   |           ^^^^^^^\n+   |     ----- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1\n@@ -70,7 +76,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:52:14\n    |\n LL |     deref_to.method();\n-   |              ^^^^^^\n+   |     -------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -89,7 +97,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:53:14\n    |\n LL |     deref_to.mut_method();\n-   |              ^^^^^^^^^^\n+   |     -------- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -108,7 +118,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:54:14\n    |\n LL |     deref_to.by_self();\n-   |              ^^^^^^^\n+   |     -------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1\n@@ -127,7 +139,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:57:20\n    |\n LL |     deref_deref_to.method();\n-   |                    ^^^^^^\n+   |     -------------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -146,7 +160,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:58:20\n    |\n LL |     deref_deref_to.mut_method();\n-   |                    ^^^^^^^^^^\n+   |     -------------- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:10:1\n@@ -165,7 +181,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:59:20\n    |\n LL |     deref_deref_to.by_self();\n-   |                    ^^^^^^^\n+   |     -------------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-with-adjustment.rs:22:1"}, {"sha": "bcc25e103b112c217c72e51d52a29f04049cb2ed", "filename": "src/test/ui/traits/suggest-fully-qualified-path-without-adjustment.stderr", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-without-adjustment.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -13,7 +13,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:45:15\n    |\n LL |     ref_thing.method();\n-   |               ^^^^^^\n+   |     --------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -32,7 +34,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:48:15\n    |\n LL |     ref_thing.by_self();\n-   |               ^^^^^^^\n+   |     --------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -51,7 +55,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:51:15\n    |\n LL |     mut_thing.method();\n-   |               ^^^^^^\n+   |     --------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -70,7 +76,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:52:15\n    |\n LL |     mut_thing.mut_method();\n-   |               ^^^^^^^^^^\n+   |     --------- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -89,7 +97,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:53:15\n    |\n LL |     mut_thing.by_self();\n-   |               ^^^^^^^\n+   |     --------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -108,7 +118,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:56:14\n    |\n LL |     deref_to.method();\n-   |              ^^^^^^\n+   |     -------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -127,7 +139,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:57:14\n    |\n LL |     deref_to.mut_method();\n-   |              ^^^^^^^^^^\n+   |     -------- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -146,7 +160,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:58:14\n    |\n LL |     deref_to.by_self();\n-   |              ^^^^^^^\n+   |     -------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1\n@@ -165,7 +181,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:61:20\n    |\n LL |     deref_deref_to.method();\n-   |                    ^^^^^^\n+   |     -------------- ^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -184,7 +202,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:62:20\n    |\n LL |     deref_deref_to.mut_method();\n-   |                    ^^^^^^^^^^\n+   |     -------------- ^^^^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `Thing: Method<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:10:1\n@@ -203,7 +223,9 @@ error[E0283]: type annotations needed\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:63:20\n    |\n LL |     deref_deref_to.by_self();\n-   |                    ^^^^^^^\n+   |     -------------- ^^^^^^^\n+   |     |\n+   |     type must be known at this point\n    |\n note: multiple `impl`s satisfying `&Thing: MethodRef<_>` found\n   --> $DIR/suggest-fully-qualified-path-without-adjustment.rs:23:1"}, {"sha": "747e2477b9cf14193c2c806ec2d87c09136e8f32", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -19,13 +19,13 @@ LL + fn check<T: Iterator, U>() {\n    |\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/suggest-where-clause.rs:10:5\n+  --> $DIR/suggest-where-clause.rs:10:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n    |                       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `Misc<U>`\n   --> $DIR/suggest-where-clause.rs:3:8"}, {"sha": "17ffcf64177e3fa13e7311aeb08058a5d47a2c2d", "filename": "src/test/ui/transmutability/references.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Freferences.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n-  --> $DIR/references.rs:19:37\n+  --> $DIR/references.rs:19:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                     ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n    |\n    = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, true, true, true, true>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`"}, {"sha": "b9fca1a1b54b81b6e3013fc669cf786a3d635aaf", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -12,10 +12,10 @@ LL | fn is_sync<T: Sync>() {}\n    |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `UnsafeCell<u8>` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:15\n    |\n LL |     is_sync::<MyTypeWUnsafe>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n+   |               ^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `Sync` is not implemented for `UnsafeCell<u8>`\n note: required because it appears within the type `MyTypeWUnsafe`\n@@ -30,10 +30,10 @@ LL | fn is_sync<T: Sync>() {}\n    |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `Managed` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:15\n    |\n LL |     is_sync::<MyTypeManaged>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n+   |               ^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `Sync` is not implemented for `Managed`\n note: required because it appears within the type `MyTypeManaged`"}, {"sha": "4f721f987aee89799dd87e5cc18837ebe51b4a84", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: cannot add `u32` to `i32`\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:4:5\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:4:28\n    |\n LL |     <i32 as Add<u32>>::add(1, 2);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n+   |     ---------------------- ^ no implementation for `i32 + u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = help: the trait `Add<u32>` is not implemented for `i32`\n    = help: the following other types implement trait `Add<Rhs>`:"}, {"sha": "d8e9776bb00631767520280e2044d266fb120ac7", "filename": "src/test/ui/unboxed-closures/non-tupled-arg-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fnon-tupled-arg-mismatch.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/non-tupled-arg-mismatch.rs:6:5\n+  --> $DIR/non-tupled-arg-mismatch.rs:6:7\n    |\n LL |     a(|_: usize| {});\n-   |     ^ types differ\n+   |     - ^^^^^^^^^^^^^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note: expected trait `Fn<usize>`\n               found trait `Fn<(usize,)>`"}, {"sha": "4ea1ee3c37a7edabc93444a79f94c50f89092ca0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fn-once-move-from-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -6,7 +6,7 @@ LL |     let c = || drop(y.0);\n    |             |\n    |             this closure implements `FnOnce`, not `Fn`\n LL |     foo(c);\n-   |     --- the requirement to implement `Fn` derives from here\n+   |         - the requirement to implement `Fn` derives from here\n \n error: aborting due to previous error\n "}, {"sha": "a7f57e3fd15667d81396d6c40e1293565bde5a18", "filename": "src/test/ui/unsized-locals/unsized-exprs.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-exprs.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -12,9 +12,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/unsized-exprs.rs:24:22\n    |\n LL |     udrop::<A<[u8]>>(A { 0: *foo() });\n-   |     ---------------- ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `A<[u8]>`, the trait `Sized` is not implemented for `[u8]`\n note: required because it appears within the type `A<[u8]>`"}, {"sha": "f5491552a45d2ed89134cab0d3b53c6adbde58f7", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n   --> $DIR/issue-30355.rs:5:8\n    |\n LL |     &X(*Y)\n-   |      - ^^ doesn't have a size known at compile-time\n-   |      |\n-   |      required by a bound introduced by this call\n+   |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = help: unsized fn params are gated as an unstable feature"}, {"sha": "50060e53a49d64fe15b62716e0de51e8545baa98", "filename": "src/test/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-71659.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,10 @@\n error[E0277]: the trait bound `dyn Foo: CastTo<[i32]>` is not satisfied\n-  --> $DIR/issue-71659.rs:30:15\n+  --> $DIR/issue-71659.rs:30:13\n    |\n LL |     let x = x.cast::<[i32]>();\n-   |               ^^^^ the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n+   |             ^ ---- required by a bound introduced by this call\n+   |             |\n+   |             the trait `CastTo<[i32]>` is not implemented for `dyn Foo`\n    |\n note: required by a bound in `Cast::cast`\n   --> $DIR/issue-71659.rs:19:15"}, {"sha": "97618ed05ed38148ebeedc74007b5d15d4240caf", "filename": "src/test/ui/unsized/issue-75707.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `MyCall: Callback` is not satisfied\n-  --> $DIR/issue-75707.rs:15:5\n+  --> $DIR/issue-75707.rs:15:9\n    |\n LL |     f::<dyn Processing<Call = MyCall>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n    |\n note: required by a bound in `f`\n   --> $DIR/issue-75707.rs:9:9"}, {"sha": "b4772605432584914fb79fa5a6ec9f6a8fdeeca6", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -2,9 +2,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:11:11\n    |\n LL |     foo11(\"bar\", &\"baz\");\n-   |     ----- ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n@@ -17,9 +15,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:13:19\n    |\n LL |     foo12(&\"bar\", \"baz\");\n-   |     -----         ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n@@ -32,9 +28,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:16:11\n    |\n LL |     foo21(\"bar\", &\"baz\");\n-   |     ----- ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n@@ -47,9 +41,7 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/unsized-fn-param.rs:18:19\n    |\n LL |     foo22(&\"bar\", \"baz\");\n-   |     -----         ^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast from `str` to the object type `dyn AsRef<str>`"}, {"sha": "dff1b0a5112a486afbe414923b2089082b90780f", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -25,10 +25,10 @@ LL + fn foo2<T>() { not_sized::<Foo<T>>() }\n    |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/unsized-struct.rs:13:24\n+  --> $DIR/unsized-struct.rs:13:35\n    |\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-   |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |         -                         ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |"}, {"sha": "9ad1ac6b4df61c29ee7a57f10ee6284cc4c4c99d", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -79,14 +79,12 @@ LL | fn f5<Y: ?Sized>(x: &Y) {}\n    |        ++++++++\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n-  --> $DIR/unsized3.rs:40:8\n+  --> $DIR/unsized3.rs:40:5\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n-   |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |     ^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8\n@@ -106,9 +104,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n-   |     --  ^^^^^^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n+   |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n note: required because it appears within the type `S<X>`\n   --> $DIR/unsized3.rs:28:8"}, {"sha": "8c47ed6d4317a7ad4c80db1beba2ea2541c91525", "filename": "src/test/ui/where-clauses/where-clause-method-substituion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-method-substituion.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the trait bound `X: Foo<X>` is not satisfied\n-  --> $DIR/where-clause-method-substituion.rs:20:7\n+  --> $DIR/where-clause-method-substituion.rs:20:16\n    |\n LL |     1.method::<X>();\n-   |       ^^^^^^ the trait `Foo<X>` is not implemented for `X`\n+   |                ^ the trait `Foo<X>` is not implemented for `X`\n    |\n note: required by a bound in `Bar::method`\n   --> $DIR/where-clause-method-substituion.rs:6:34"}, {"sha": "e90502977ff6a3ebdbe4ab7ca0dca87d738b3b4a", "filename": "src/test/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c005e760f518254af6c47b36ddb16b8fe8aecb6a/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=c005e760f518254af6c47b36ddb16b8fe8aecb6a", "patch": "@@ -1,10 +1,8 @@\n error[E0277]: the trait bound `Bar: Eq` is not satisfied\n-  --> $DIR/where-clauses-method-unsatisfied.rs:18:14\n+  --> $DIR/where-clauses-method-unsatisfied.rs:18:7\n    |\n LL |     x.equals(&x);\n-   |       ------ ^^ the trait `Eq` is not implemented for `Bar`\n-   |       |\n-   |       required by a bound introduced by this call\n+   |       ^^^^^^ the trait `Eq` is not implemented for `Bar`\n    |\n note: required by a bound in `Foo::<T>::equals`\n   --> $DIR/where-clauses-method-unsatisfied.rs:11:52"}]}