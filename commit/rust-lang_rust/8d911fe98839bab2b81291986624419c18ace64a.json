{"sha": "8d911fe98839bab2b81291986624419c18ace64a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOTExZmU5ODgzOWJhYjJiODEyOTE5ODY2MjQ0MTljMThhY2U2NGE=", "commit": {"author": {"name": "Heinz Gies", "email": "hgies@wayfair.com", "date": "2019-10-11T11:58:56Z"}, "committer": {"name": "Heinz N. Gies", "email": "heinz@licenser.net", "date": "2019-10-18T05:35:25Z"}, "message": "add restirction for unreachable and panic", "tree": {"sha": "287a19942b943b294a7e634e71d78a6df8754b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287a19942b943b294a7e634e71d78a6df8754b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d911fe98839bab2b81291986624419c18ace64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d911fe98839bab2b81291986624419c18ace64a", "html_url": "https://github.com/rust-lang/rust/commit/8d911fe98839bab2b81291986624419c18ace64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d911fe98839bab2b81291986624419c18ace64a/comments", "author": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6fc1bead1d81dfce866e23d4c5a88770e40cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6fc1bead1d81dfce866e23d4c5a88770e40cf3", "html_url": "https://github.com/rust-lang/rust/commit/ee6fc1bead1d81dfce866e23d4c5a88770e40cf3"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "bbb037ad8ebc97471a4685e496cd2b842ff02a92", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8d911fe98839bab2b81291986624419c18ace64a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d911fe98839bab2b81291986624419c18ace64a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=8d911fe98839bab2b81291986624419c18ace64a", "patch": "@@ -25,6 +25,22 @@ declare_clippy_lint! {\n     \"missing parameters in `panic!` calls\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `panic!`.\n+    ///\n+    /// **Why is this bad?** `panic!` will stop the execution of the executable\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// panic!(\"even with a good reason\");\n+    /// ```\n+    pub PANIC,\n+    restriction,\n+    \"missing parameters in `panic!` calls\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `unimplemented!`.\n     ///\n@@ -41,7 +57,23 @@ declare_clippy_lint! {\n     \"`unimplemented!` should not be present in production code\"\n }\n \n-declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `unreachable!`.\n+    ///\n+    /// **Why is this bad?** This macro can cause cause code to panics\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// unreachable!();\n+    /// ```\n+    pub UNREACHABLE,\n+    restriction,\n+    \"`unreachable!` should not be present in production code\"\n+}\n+\n+declare_lint_pass!(PanicUnimplemented => [PANIC_PARAMS, UNIMPLEMENTED, UNREACHABLE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n@@ -55,7 +87,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n                     let span = get_outer_span(expr);\n                     span_lint(cx, UNIMPLEMENTED, span,\n                               \"`unimplemented` should not be present in production code\");\n-                } else {\n+                } else if is_expn_of(expr.span, \"unreachable\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, UNREACHABLE, span,\n+                              \"`unreachable` should not be present in production code\");\n+                } else if is_expn_of(expr.span, \"panic\").is_some() {\n+                    let span = get_outer_span(expr);\n+                    span_lint(cx, PANIC, span,\n+                              \"`panic` should not be present in production code\");\n+                //} else {\n                     match_panic(params, expr, cx);\n                 }\n             }"}, {"sha": "fed82f13515eb0f65f8593e3d5b549410b98bd23", "filename": "tests/ui/panic_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d911fe98839bab2b81291986624419c18ace64a/tests%2Fui%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d911fe98839bab2b81291986624419c18ace64a/tests%2Fui%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.rs?ref=8d911fe98839bab2b81291986624419c18ace64a", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::panic_params, clippy::unimplemented)]\n+#![warn(clippy::panic_params, clippy::unimplemented, clippy::unreachable)]\n #![allow(clippy::assertions_on_constants)]\n fn missing() {\n     if true {\n@@ -56,6 +56,12 @@ fn unimplemented() {\n     let b = a + 2;\n }\n \n+fn unreachable() {\n+    let a = 2;\n+    unreachable!();\n+    let b = a + 2;\n+}\n+\n fn main() {\n     missing();\n     ok_single();\n@@ -65,4 +71,5 @@ fn main() {\n     ok_nomsg();\n     ok_escaped();\n     unimplemented();\n+    unreachable();\n }"}, {"sha": "5f19b35fe6cffbe5b6eb650210f738ceb9e90ffc", "filename": "tests/ui/panic_unimplemented.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d911fe98839bab2b81291986624419c18ace64a/tests%2Fui%2Fpanic_unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d911fe98839bab2b81291986624419c18ace64a/tests%2Fui%2Fpanic_unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.stderr?ref=8d911fe98839bab2b81291986624419c18ace64a", "patch": "@@ -32,5 +32,13 @@ LL |     unimplemented!();\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n \n-error: aborting due to 5 previous errors\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panic_unimplemented.rs:61:5\n+   |\n+LL |     unreachable!();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unreachable` implied by `-D warnings`\n+\n+error: aborting due to 6 previous errors\n "}]}