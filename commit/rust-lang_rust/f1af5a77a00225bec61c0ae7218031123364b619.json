{"sha": "f1af5a77a00225bec61c0ae7218031123364b619", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWY1YTc3YTAwMjI1YmVjNjFjMGFlNzIxODAzMTEyMzM2NGI2MTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-19T10:20:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: remove TyCtxt::parent_def_id in favor of TyCtxt::parent.", "tree": {"sha": "4a656a67690f479f4e077ec6045466e9cfd9a44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a656a67690f479f4e077ec6045466e9cfd9a44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1af5a77a00225bec61c0ae7218031123364b619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1af5a77a00225bec61c0ae7218031123364b619", "html_url": "https://github.com/rust-lang/rust/commit/f1af5a77a00225bec61c0ae7218031123364b619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1af5a77a00225bec61c0ae7218031123364b619/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f", "html_url": "https://github.com/rust-lang/rust/commit/6ca6c1a6cc2b097c93eee30f0ba5371423e9966f"}], "stats": {"total": 84, "additions": 37, "deletions": 47}, "files": [{"sha": "3ed28a1f9882562f495db732b2052a5dc41f46b9", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -3,7 +3,7 @@\n \n use crate::hir;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n-use crate::ty::{self, Region, Ty};\n+use crate::ty::{self, DefIdTree, Region, Ty};\n use crate::hir::def_id::DefId;\n use syntax_pos::Span;\n \n@@ -44,7 +44,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (id, bound_region) = match *anon_region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n             ty::ReEarlyBound(ref ebr) => (\n-                self.tcx().parent_def_id(ebr.def_id).unwrap(),\n+                self.tcx().parent(ebr.def_id).unwrap(),\n                 ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region"}, {"sha": "3da82d728c0c4b96dd2201563668ed55fe456a8b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -12,7 +12,7 @@ use crate::hir::CodegenFnAttrFlags;\n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use crate::lint;\n use crate::middle::privacy;\n-use crate::ty::{self, TyCtxt};\n+use crate::ty::{self, DefIdTree, TyCtxt};\n use crate::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -78,7 +78,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n-                if let Some(enum_id) = self.tcx.parent_def_id(variant_id) {\n+                if let Some(enum_id) = self.tcx.parent(variant_id) {\n                     self.check_def_id(enum_id);\n                 }\n                 if !self.ignore_variant_stack.contains(&variant_id) {"}, {"sha": "b36d2a57cb3b1d3f4043e86599eaaa4c1c60242f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -64,7 +64,7 @@ use crate::hir::Node;\n use crate::infer::InferCtxt;\n use crate::hir::def::{Def, CtorKind};\n use crate::ty::adjustment;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::layout::VariantIdx;\n \n@@ -1133,7 +1133,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                                              variant_did: DefId)\n                                              -> cmt<'tcx> {\n         // univariant enums do not need downcasts\n-        let base_did = self.tcx.parent_def_id(variant_did).unwrap();\n+        let base_did = self.tcx.parent(variant_did).unwrap();\n         if self.tcx.adt_def(base_did).variants.len() != 1 {\n             let base_ty = base_cmt.ty;\n             let ret = Rc::new(cmt_ {\n@@ -1275,7 +1275,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         return Err(())\n                     }\n                     Def::VariantCtor(def_id, CtorKind::Fn) => {\n-                        let enum_def = self.tcx.parent_def_id(def_id).unwrap();\n+                        let enum_def = self.tcx.parent(def_id).unwrap();\n                         (self.cat_downcast_if_needed(pat, cmt, def_id),\n                         self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len())\n                     }"}, {"sha": "2b3802388106a89e5fc689ae33febf33b0f108a6", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -17,7 +17,7 @@ use rustc_macros::HashStable;\n use syntax::source_map;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n-use crate::ty::TyCtxt;\n+use crate::ty::{DefIdTree, TyCtxt};\n use crate::ty::query::Providers;\n \n use crate::hir;\n@@ -650,7 +650,7 @@ impl<'tcx> ScopeTree {\n     pub fn early_free_scope<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                       br: &ty::EarlyBoundRegion)\n                                       -> Scope {\n-        let param_owner = tcx.parent_def_id(br.def_id).unwrap();\n+        let param_owner = tcx.parent(br.def_id).unwrap();\n \n         let param_owner_id = tcx.hir().as_local_hir_id(param_owner).unwrap();\n         let scope = tcx.hir().maybe_body_owned_by_by_hir_id(param_owner_id).map(|body_id| {\n@@ -679,7 +679,7 @@ impl<'tcx> ScopeTree {\n                                  -> Scope {\n         let param_owner = match fr.bound_region {\n             ty::BoundRegion::BrNamed(def_id, _) => {\n-                tcx.parent_def_id(def_id).unwrap()\n+                tcx.parent(def_id).unwrap()\n             }\n             _ => fr.scope\n         };"}, {"sha": "1942f98abff17ab58e6dcb2b79ad140421138f22", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -26,7 +26,7 @@ use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n-use crate::ty::{self, Ty, TypeAndMut};\n+use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n use crate::ty::{TyS, TyKind, List};\n use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n@@ -1594,7 +1594,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let (suitable_region_binding_scope, bound_region) = match *region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n             ty::ReEarlyBound(ref ebr) => (\n-                self.parent_def_id(ebr.def_id).unwrap(),\n+                self.parent(ebr.def_id).unwrap(),\n                 ty::BoundRegion::BrNamed(ebr.def_id, ebr.name),\n             ),\n             _ => return None, // not a free region"}, {"sha": "5a15efc2f1142fcbcf8638afb6e4545b81551938", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -154,13 +154,13 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n             data @ DefPathData::ClosureExpr |\n             data @ DefPathData::ImplTrait |\n             data @ DefPathData::GlobalMetaData(..) => {\n-                let parent_did = self.tcx.parent_def_id(def_id).unwrap();\n+                let parent_did = self.tcx.parent(def_id).unwrap();\n                 let path = self.print_item_path(parent_did, None, ns);\n                 self.path_append(path, &data.as_interned_str().as_symbol().as_str())\n             },\n \n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n-                let parent_def_id = self.tcx.parent_def_id(def_id).unwrap();\n+                let parent_def_id = self.tcx.parent(def_id).unwrap();\n                 self.print_item_path(parent_def_id, substs, ns)\n             }\n         }\n@@ -173,7 +173,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         ns: Namespace,\n     ) -> P::Path {\n         debug!(\"default_print_impl_path: impl_def_id={:?}\", impl_def_id);\n-        let parent_def_id = self.tcx.parent_def_id(impl_def_id).unwrap();\n+        let parent_def_id = self.tcx.parent(impl_def_id).unwrap();\n \n         // Decide whether to print the parent path for the impl.\n         // Logically, since impls are global, it's never needed, but\n@@ -186,7 +186,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         }\n         let in_self_mod = match characteristic_def_id_of_type(self_ty) {\n             None => false,\n-            Some(ty_def_id) => self.tcx.parent_def_id(ty_def_id) == Some(parent_def_id),\n+            Some(ty_def_id) => self.tcx.parent(ty_def_id) == Some(parent_def_id),\n         };\n \n         let mut impl_trait_ref = self.tcx.impl_trait_ref(impl_def_id);\n@@ -195,7 +195,7 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n         }\n         let in_trait_mod = match impl_trait_ref {\n             None => false,\n-            Some(trait_ref) => self.tcx.parent_def_id(trait_ref.def_id) == Some(parent_def_id),\n+            Some(trait_ref) => self.tcx.parent(trait_ref.def_id) == Some(parent_def_id),\n         };\n \n         if !in_self_mod && !in_trait_mod {\n@@ -248,16 +248,6 @@ impl<P: ItemPathPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    /// Returns the `DefId` of `def_id`'s parent in the def tree. If\n-    /// this returns `None`, then `def_id` represents a crate root or\n-    /// inlined root.\n-    pub fn parent_def_id(self, def_id: DefId) -> Option<DefId> {\n-        let key = self.def_key(def_id);\n-        key.parent.map(|index| DefId { krate: def_id.krate, index: index })\n-    }\n-}\n-\n /// As a heuristic, when we see an impl, if we see that the\n /// 'self type' is a type defined in the same module as the impl,\n /// we can omit including the path to the impl itself. This\n@@ -531,7 +521,7 @@ impl ItemPathPrinter for LocalPathPrinter {\n             // pretty printing some span information. This should\n             // only occur very early in the compiler pipeline.\n             // FIXME(eddyb) this should just be using `tcx.def_span(impl_def_id)`\n-            let parent_def_id = self.tcx.parent_def_id(impl_def_id).unwrap();\n+            let parent_def_id = self.tcx.parent(impl_def_id).unwrap();\n             let path = self.print_item_path(parent_def_id, None, ns);\n             let span = self.tcx.def_span(impl_def_id);\n             return self.path_append(path, &format!(\"<impl at {:?}>\", span));"}, {"sha": "ddb3911daeb5df78d8ed380376cbf688684f47e9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -2893,14 +2893,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn expect_variant_def(self, def: Def) -> &'tcx VariantDef {\n         match def {\n             Def::Variant(did) | Def::VariantCtor(did, ..) => {\n-                let enum_did = self.parent_def_id(did).unwrap();\n+                let enum_did = self.parent(did).unwrap();\n                 self.adt_def(enum_did).variant_with_id(did)\n             }\n             Def::Struct(did) | Def::Union(did) => {\n                 self.adt_def(did).non_enum_variant()\n             }\n             Def::StructCtor(ctor_did, ..) => {\n-                let did = self.parent_def_id(ctor_did).expect(\"struct ctor has no parent\");\n+                let did = self.parent(ctor_did).expect(\"struct ctor has no parent\");\n                 self.adt_def(did).non_enum_variant()\n             }\n             _ => bug!(\"expect_variant_def used with unexpected def {:?}\", def)"}, {"sha": "dfe87242c7128ef4ed4e4adb8bc6e106537d7db2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -9,7 +9,7 @@ use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_macros::HashStable;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef, Kind, UnpackedKind};\n-use crate::ty::{self, AdtDef, TypeFlags, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, AdtDef, DefIdTree, TypeFlags, Ty, TyCtxt, TypeFoldable};\n use crate::ty::{List, TyS, ParamEnvAnd, ParamEnv};\n use crate::util::captures::Captures;\n use crate::mir::interpret::{Scalar, Pointer};\n@@ -1591,7 +1591,7 @@ impl RegionKind {\n     pub fn free_region_binding_scope(&self, tcx: TyCtxt<'_, '_, '_>) -> DefId {\n         match self {\n             ty::ReEarlyBound(br) => {\n-                tcx.parent_def_id(br.def_id).unwrap()\n+                tcx.parent(br.def_id).unwrap()\n             }\n             ty::ReFree(fr) => fr.scope,\n             _ => bug!(\"free_region_binding_scope invoked on inappropriate region: {:?}\", self),"}, {"sha": "65918a90821022cc4048dec58718657950ec4eba", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -7,7 +7,7 @@ use crate::hir::{self, Node};\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n-use crate::ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n use crate::ty::subst::{Subst, InternalSubsts, SubstsRef, UnpackedKind};\n use crate::ty::query::TyCtxtAt;\n use crate::ty::TyKind::*;\n@@ -563,7 +563,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn closure_base_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n         while self.is_closure(def_id) {\n-            def_id = self.parent_def_id(def_id).unwrap_or_else(|| {\n+            def_id = self.parent(def_id).unwrap_or_else(|| {\n                 bug!(\"closure {:?} has no parent\", def_id);\n             });\n         }"}, {"sha": "62cfa184430be17f45a508ed874ec56208c5cc37", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{ClearCrossCrate, Local, Location, Mir, Mutability, Operand, Pla\n use rustc::mir::{Field, Projection, ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, DefIdTree, TyCtxt};\n \n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::bit_set::BitSet;"}, {"sha": "f1a3c682b5384a1c60bf2264d777f5622ec32a50", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -13,7 +13,7 @@ use crate::hair::constant::*;\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n-use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift, UserType};\n+use rustc::ty::{self, DefIdTree, Region, TyCtxt, AdtDef, Ty, Lift, UserType};\n use rustc::ty::{CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations};\n use rustc::ty::subst::{SubstsRef, Kind};\n use rustc::ty::layout::VariantIdx;\n@@ -735,7 +735,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     ) -> PatternKind<'tcx> {\n         let mut kind = match def {\n             Def::Variant(variant_id) | Def::VariantCtor(variant_id, ..) => {\n-                let enum_id = self.tcx.parent_def_id(variant_id).unwrap();\n+                let enum_id = self.tcx.parent(variant_id).unwrap();\n                 let adt_def = self.tcx.adt_def(enum_id);\n                 if adt_def.is_enum() {\n                     let substs = match ty.sty {"}, {"sha": "8e68a13e1e1a4df99cf83807f0f4342f7f70a14e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n use rustc::span_bug;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n use std::path::Path;\n@@ -1201,7 +1201,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir().opt_local_def_id(id)\n-            .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n+            .and_then(|id| self.save_ctxt.tcx.parent(id))\n             .map(id_from_def_id);\n \n         match use_tree.kind {\n@@ -1350,7 +1350,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 if !self.span.filter_generated(name_span) {\n                     let span = self.span_from_span(name_span);\n                     let parent = self.save_ctxt.tcx.hir().opt_local_def_id(item.id)\n-                        .and_then(|id| self.save_ctxt.tcx.parent_def_id(id))\n+                        .and_then(|id| self.save_ctxt.tcx.parent(id))\n                         .map(id_from_def_id);\n                     self.dumper.import(\n                         &Access {"}, {"sha": "2aa44a9242ef1db9c05a09145c31aa6fa141d637", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -20,7 +20,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n@@ -763,7 +763,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 // This is a reference to a tuple struct where the def_id points\n                 // to an invisible constructor function. That is not a very useful\n                 // def, so adjust to point to the tuple struct itself.\n-                let parent_def_id = self.tcx.parent_def_id(def_id).unwrap();\n+                let parent_def_id = self.tcx.parent(def_id).unwrap();\n                 Some(Ref {\n                     kind: RefKind::Type,\n                     span,"}, {"sha": "4e952f972e4591f98633974b3b050484228d68ed", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -12,7 +12,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::namespace::Namespace;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n-use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, DefIdTree, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::subst::{Kind, Subst, InternalSubsts, SubstsRef};\n use rustc::ty::wf::object_region_bounds;\n@@ -1452,7 +1452,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                    -> Ty<'tcx>\n     {\n         let tcx = self.tcx();\n-        let trait_def_id = tcx.parent_def_id(item_def_id).unwrap();\n+        let trait_def_id = tcx.parent(item_def_id).unwrap();\n \n         self.prohibit_generics(slice::from_ref(item_segment));\n \n@@ -1621,7 +1621,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 } else if last >= 1 && segments[last - 1].args.is_some() {\n                     // Everything but the penultimate segment should have no\n                     // parameters at all.\n-                    let enum_def_id = tcx.parent_def_id(def_id).unwrap();\n+                    let enum_def_id = tcx.parent(def_id).unwrap();\n                     (enum_def_id, last - 1)\n                 } else {\n                     // FIXME: lint here recommending `Enum::<...>::Variant` form"}, {"sha": "e2e2d552ff122b4c927c56dfea50b3b0d3cdc1d9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1af5a77a00225bec61c0ae7218031123364b619/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f1af5a77a00225bec61c0ae7218031123364b619", "patch": "@@ -21,7 +21,7 @@ use rustc::hir::{self, GenericArg, HirVec};\n use rustc::hir::def::{self, Def, CtorKind, Namespace};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc::ty::{self, TyCtxt, Region, RegionVid, Ty, AdtKind};\n+use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n use rustc::ty::layout::VariantIdx;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -3971,7 +3971,7 @@ pub fn register_def(cx: &DocContext<'_>, def: Def) -> DefId {\n         Def::ForeignTy(i) => (i, TypeKind::Foreign),\n         Def::Const(i) => (i, TypeKind::Const),\n         Def::Static(i, _) => (i, TypeKind::Static),\n-        Def::Variant(i) => (cx.tcx.parent_def_id(i).expect(\"cannot get parent def id\"),\n+        Def::Variant(i) => (cx.tcx.parent(i).expect(\"cannot get parent def id\"),\n                             TypeKind::Enum),\n         Def::Macro(i, mac_kind) => match mac_kind {\n             MacroKind::Bang => (i, TypeKind::Macro),"}]}