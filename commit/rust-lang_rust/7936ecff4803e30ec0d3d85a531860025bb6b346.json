{"sha": "7936ecff4803e30ec0d3d85a531860025bb6b346", "node_id": "C_kwDOAAsO6NoAKDc5MzZlY2ZmNDgwM2UzMGVjMGQzZDg1YTUzMTg2MDAyNWJiNmIzNDY", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-10-18T10:19:28Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-10-18T10:19:28Z"}, "message": "Make more `From` impls `const`", "tree": {"sha": "e1626696062780fbb387dd35e56850916ef60465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1626696062780fbb387dd35e56850916ef60465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7936ecff4803e30ec0d3d85a531860025bb6b346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7936ecff4803e30ec0d3d85a531860025bb6b346", "html_url": "https://github.com/rust-lang/rust/commit/7936ecff4803e30ec0d3d85a531860025bb6b346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7936ecff4803e30ec0d3d85a531860025bb6b346/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e02151318ddd431aea6d58e23948246c1446044", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e02151318ddd431aea6d58e23948246c1446044", "html_url": "https://github.com/rust-lang/rust/commit/5e02151318ddd431aea6d58e23948246c1446044"}], "stats": {"total": 130, "additions": 103, "deletions": 27}, "files": [{"sha": "b27c36baf37c5f44f5ee1a3034e65e0a7262b887", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -125,7 +125,8 @@ impl TryFromSliceError {\n }\n \n #[stable(feature = \"try_from_slice_error\", since = \"1.36.0\")]\n-impl From<Infallible> for TryFromSliceError {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<Infallible> for TryFromSliceError {\n     fn from(x: Infallible) -> TryFromSliceError {\n         match x {}\n     }"}, {"sha": "ed464700cd3579764d72bc0c684614f3405970f1", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -308,7 +308,8 @@ impl<T: Ord + Copy> Ord for Cell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for Cell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Cell<T> {\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -1236,7 +1237,8 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for RefCell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for RefCell<T> {\n     fn from(t: T) -> RefCell<T> {\n         RefCell::new(t)\n     }\n@@ -1976,7 +1978,8 @@ impl<T: Default> Default for UnsafeCell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T> From<T> for UnsafeCell<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for UnsafeCell<T> {\n     fn from(t: T) -> UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }"}, {"sha": "8fc6b1af92452919824a518383133eee11a30876", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -97,7 +97,8 @@ pub unsafe fn from_u32_unchecked(i: u32) -> char {\n }\n \n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n-impl From<char> for u32 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u32 {\n     /// Converts a [`char`] into a [`u32`].\n     ///\n     /// # Examples\n@@ -116,7 +117,8 @@ impl From<char> for u32 {\n }\n \n #[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n-impl From<char> for u64 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u64 {\n     /// Converts a [`char`] into a [`u64`].\n     ///\n     /// # Examples\n@@ -137,7 +139,8 @@ impl From<char> for u64 {\n }\n \n #[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n-impl From<char> for u128 {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<char> for u128 {\n     /// Converts a [`char`] into a [`u128`].\n     ///\n     /// # Examples\n@@ -176,7 +179,8 @@ impl From<char> for u128 {\n /// for a superset of Windows-1252 that fills the remaining blanks with corresponding\n /// C0 and C1 control codes.\n #[stable(feature = \"char_convert\", since = \"1.13.0\")]\n-impl From<u8> for char {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<u8> for char {\n     /// Converts a [`u8`] into a [`char`].\n     ///\n     /// # Examples"}, {"sha": "5aa53deee343d55820c19526dfe76d081184ece0", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -545,7 +545,8 @@ where\n \n // From (and thus Into) is reflexive\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> From<T> for T {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for T {\n     fn from(t: T) -> T {\n         t\n     }\n@@ -560,7 +561,8 @@ impl<T> From<T> for T {\n #[allow(unused_attributes)] // FIXME(#58633): do a principled fix instead.\n #[rustc_reservation_impl = \"permitting this impl would forbid us from adding \\\n                             `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\"]\n-impl<T> From<!> for T {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<!> for T {\n     fn from(t: !) -> T {\n         t\n     }\n@@ -726,7 +728,8 @@ impl Ord for Infallible {\n }\n \n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n-impl From<!> for Infallible {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<!> for Infallible {\n     fn from(x: !) -> Self {\n         x\n     }"}, {"sha": "2b8a5f3cbf34528912eb9f0c98f81bf302909824", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -74,7 +74,7 @@ impl<T: PartialEq> PartialEq for OnceCell<T> {\n impl<T: Eq> Eq for OnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T> From<T> for OnceCell<T> {\n+impl<T> const From<T> for OnceCell<T> {\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "2af61a0748236dd639168e7cd5cd3dcc0a9f8e77", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -29,14 +29,15 @@ impl fmt::Display for TryFromIntError {\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl From<Infallible> for TryFromIntError {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<Infallible> for TryFromIntError {\n     fn from(x: Infallible) -> TryFromIntError {\n         match x {}\n     }\n }\n \n #[unstable(feature = \"never_type\", issue = \"35121\")]\n-impl From<!> for TryFromIntError {\n+impl const From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         // Match rather than coerce to make sure that code like\n         // `From<Infallible> for TryFromIntError` above will keep working"}, {"sha": "d28474c29232c1dd084187a87eaa882caf844425", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -82,7 +82,8 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"from_nonzero\", since = \"1.31.0\")]\n-            impl From<$Ty> for $Int {\n+            #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+            impl const From<$Ty> for $Int {\n                 #[doc = concat!(\"Converts a `\", stringify!($Ty), \"` into an `\", stringify!($Int), \"`\")]\n                 #[inline]\n                 fn from(nonzero: $Ty) -> Self {"}, {"sha": "f4ce7d1dfb334e9c973c5d381baba3033b897f6f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -1723,7 +1723,8 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n }\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n-impl<T> From<T> for Option<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Option<T> {\n     /// Moves `val` into a new [`Some`].\n     ///\n     /// # Examples\n@@ -1739,7 +1740,8 @@ impl<T> From<T> for Option<T> {\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n-impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<'a, T> const From<&'a Option<T>> for Option<&'a T> {\n     /// Converts from `&Option<T>` to `Option<&T>`.\n     ///\n     /// # Examples\n@@ -1766,7 +1768,8 @@ impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n-impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<'a, T> const From<&'a mut Option<T>> for Option<&'a mut T> {\n     /// Converts from `&mut Option<T>` to `Option<&mut T>`\n     ///\n     /// # Examples\n@@ -2052,7 +2055,7 @@ impl<T> ops::Try for Option<T> {\n }\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-impl<T> ops::FromResidual for Option<T> {\n+impl<T> const ops::FromResidual for Option<T> {\n     #[inline]\n     fn from_residual(residual: Option<convert::Infallible>) -> Self {\n         match residual {"}, {"sha": "8bae66ca007a74bb68613d6163dacc3213bca307", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -698,7 +698,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n         // SAFETY: A Unique pointer cannot be null, so the conditions for\n@@ -708,7 +709,8 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<T: ?Sized> From<&mut T> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null.\n@@ -717,7 +719,8 @@ impl<T: ?Sized> From<&mut T> for NonNull<T> {\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n-impl<T: ?Sized> From<&T> for NonNull<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized> const From<&T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &T) -> Self {\n         // SAFETY: A reference cannot be null, so the conditions for"}, {"sha": "f6eb48f2967c86f7c0a4c9e7d2f873b5e19febda", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -176,7 +176,7 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<&mut T> for Unique<T> {\n+impl<T: ?Sized> const From<&mut T> for Unique<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null"}, {"sha": "0915dcffe6ef0792522e1c193cdb5455eebcb7e8", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -1273,7 +1273,8 @@ impl<T> AtomicPtr<T> {\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"atomic_bool_from\", since = \"1.24.0\")]\n-impl From<bool> for AtomicBool {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl const From<bool> for AtomicBool {\n     /// Converts a `bool` into an `AtomicBool`.\n     ///\n     /// # Examples\n@@ -1291,7 +1292,8 @@ impl From<bool> for AtomicBool {\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n-impl<T> From<*mut T> for AtomicPtr<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<*mut T> for AtomicPtr<T> {\n     #[inline]\n     fn from(p: *mut T) -> Self {\n         Self::new(p)\n@@ -1363,7 +1365,8 @@ macro_rules! atomic_int {\n         }\n \n         #[$stable_from]\n-        impl From<$int_type> for $atomic_type {\n+        #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+        impl const From<$int_type> for $atomic_type {\n             #[doc = concat!(\"Converts an `\", stringify!($int_type), \"` into an `\", stringify!($atomic_type), \"`.\")]\n             #[inline]\n             fn from(v: $int_type) -> Self { Self::new(v) }"}, {"sha": "72a030617ad8ad387059f03450c43c73172428e6", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -241,7 +241,8 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-impl<T> From<T> for Poll<T> {\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for Poll<T> {\n     /// Convert to a `Ready` variant.\n     ///\n     /// # Example"}, {"sha": "7f8672f035417bb2c0e8ae51a319bfc60c6d0a2f", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -220,3 +220,10 @@ fn atomic_compare_exchange() {\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n }\n+\n+#[test]\n+fn atomic_const_from() {\n+    const _ATOMIC_U8: AtomicU8 = AtomicU8::from(1);\n+    const _ATOMIC_BOOL: AtomicBool = AtomicBool::from(true);\n+    const _ATOMIC_PTR: AtomicPtr<u32> = AtomicPtr::from(core::ptr::null_mut());\n+}"}, {"sha": "4707cc7076ec0fa8038fb84659f1e76474ec1742", "filename": "library/core/tests/cell.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcell.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -465,4 +465,13 @@ fn const_cells() {\n \n     const CELL: Cell<i32> = Cell::new(3);\n     const _: i32 = CELL.into_inner();\n+\n+    const UNSAFE_CELL_FROM: UnsafeCell<i32> = UnsafeCell::from(3);\n+    const _: i32 = UNSAFE_CELL.into_inner();\n+\n+    const REF_CELL_FROM: RefCell<i32> = RefCell::from(3);\n+    const _: i32 = REF_CELL.into_inner();\n+\n+    const CELL_FROM: Cell<i32> = Cell::from(3);\n+    const _: i32 = CELL.into_inner();\n }"}, {"sha": "6e434cf1a8d0f825e0449ee6db6de63b0779f947", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -5,6 +5,8 @@ use std::{char, str};\n #[test]\n fn test_convert() {\n     assert_eq!(u32::from('a'), 0x61);\n+    assert_eq!(u64::from('b'), 0x62);\n+    assert_eq!(u128::from('c'), 0x63);\n     assert_eq!(char::from(b'\\0'), '\\0');\n     assert_eq!(char::from(b'a'), 'a');\n     assert_eq!(char::from(b'\\xFF'), '\\u{FF}');\n@@ -19,6 +21,16 @@ fn test_convert() {\n     assert!(char::try_from(0xFFFF_FFFF_u32).is_err());\n }\n \n+#[test]\n+const fn test_convert_const() {\n+    assert!(u32::from('a') == 0x61);\n+    assert!(u64::from('b') == 0x62);\n+    assert!(u128::from('c') == 0x63);\n+    assert!(char::from(b'\\0') == '\\0');\n+    assert!(char::from(b'a') == 'a');\n+    assert!(char::from(b'\\xFF') == '\\u{FF}');\n+}\n+\n #[test]\n fn test_from_str() {\n     assert_eq!(char::from_str(\"a\").unwrap(), 'a');"}, {"sha": "064024ab87b281243bec34b3351f1df415b208af", "filename": "library/core/tests/lazy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flazy.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -47,6 +47,12 @@ fn unsync_once_cell_drop_empty() {\n     drop(x);\n }\n \n+#[test]\n+const fn once_cell_const() {\n+    let _once_cell: OnceCell<u32> = OnceCell::new();\n+    let _once_cell: OnceCell<u32> = OnceCell::from(32);\n+}\n+\n #[test]\n fn clone() {\n     let s = OnceCell::new();"}, {"sha": "ab0295c63143d3eaa3cce8b622b5d8b6fc49fc72", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -9,6 +9,7 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_convert)]\n #![feature(const_maybe_uninit_assume_init)]\n #![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(const_ptr_read)]"}, {"sha": "4817d86ca6eb0991c153c13b211b2653c943eb92", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -214,6 +214,9 @@ fn nonzero_const() {\n \n     const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n     assert!(ONE.is_some());\n+\n+    const FROM_NONZERO: u8 = u8::from(NONZERO);\n+    assert_eq!(FROM_NONZERO, 5);\n }\n \n #[test]"}, {"sha": "cd07d6c52c2ade49cb03bc1da73590431dc7bad9", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7936ecff4803e30ec0d3d85a531860025bb6b346/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=7936ecff4803e30ec0d3d85a531860025bb6b346", "patch": "@@ -358,10 +358,17 @@ fn option_const() {\n     // test that the methods of `Option` are usable in a const context\n \n     const OPTION: Option<usize> = Some(32);\n+    assert_eq!(OPTION, Some(32));\n+\n+    const OPTION_FROM: Option<usize> = Option::from(32);\n+    assert_eq!(OPTION_FROM, Some(32));\n \n     const REF: Option<&usize> = OPTION.as_ref();\n     assert_eq!(REF, Some(&32));\n \n+    const REF_FROM: Option<&usize> = Option::from(&OPTION);\n+    assert_eq!(REF_FROM, Some(&32));\n+\n     const IS_SOME: bool = OPTION.is_some();\n     assert!(IS_SOME);\n \n@@ -388,6 +395,14 @@ const fn option_const_mut() {\n             None => unreachable!(),\n         }\n     }\n+\n+    {\n+        let as_mut: Option<&mut usize> = Option::from(&mut option);\n+        match as_mut {\n+            Some(v) => *v = 42,\n+            None => unreachable!(),\n+        }\n+    }\n }\n \n #[test]"}]}