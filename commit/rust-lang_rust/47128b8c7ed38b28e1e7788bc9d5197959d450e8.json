{"sha": "47128b8c7ed38b28e1e7788bc9d5197959d450e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTI4YjhjN2VkMzhiMjhlMWU3Nzg4YmM5ZDUxOTc5NTlkNDUwZTg=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-14T17:03:13Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-07-18T10:44:13Z"}, "message": "Create correct debuginfo for closure function signatures\n\nInternally, the arguments passed to the closure are represented by a\ntuple, but the actual function takes them as individual arguments, so we\nhave to untuple the arguments before creating the debuginfo.", "tree": {"sha": "ea164677ddc4a9e3368bdc8034db3e686190e1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea164677ddc4a9e3368bdc8034db3e686190e1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47128b8c7ed38b28e1e7788bc9d5197959d450e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47128b8c7ed38b28e1e7788bc9d5197959d450e8", "html_url": "https://github.com/rust-lang/rust/commit/47128b8c7ed38b28e1e7788bc9d5197959d450e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47128b8c7ed38b28e1e7788bc9d5197959d450e8/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1373c4fcf21930a22150210200bdc14f5f935b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1373c4fcf21930a22150210200bdc14f5f935b3c", "html_url": "https://github.com/rust-lang/rust/commit/1373c4fcf21930a22150210200bdc14f5f935b3c"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "9ce5c457bff33b4d245bf909ab5d148b2d325e85", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47128b8c7ed38b28e1e7788bc9d5197959d450e8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47128b8c7ed38b28e1e7788bc9d5197959d450e8/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=47128b8c7ed38b28e1e7788bc9d5197959d450e8", "patch": "@@ -30,7 +30,7 @@ use middle::subst::{self, Substs};\n use rustc::ast_map;\n use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n use trans;\n-use trans::monomorphize;\n+use trans::{monomorphize, type_of};\n use middle::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{NodeMap, FnvHashMap, FnvHashSet};\n@@ -41,7 +41,7 @@ use std::ffi::CString;\n use std::ptr;\n use std::rc::Rc;\n use syntax::codemap::{Span, Pos};\n-use syntax::{ast, codemap, ast_util};\n+use syntax::{abi, ast, codemap, ast_util};\n use syntax::attr::IntType;\n use syntax::parse::token::{self, special_idents};\n \n@@ -412,12 +412,13 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         assert_type_for_node_id(cx, fn_ast_id, error_reporting_span);\n         let fn_type = cx.tcx().node_id_to_type(fn_ast_id);\n \n-        let sig = match fn_type.sty {\n+        let (sig, abi) = match fn_type.sty {\n             ty::TyBareFn(_, ref barefnty) => {\n-                cx.tcx().erase_late_bound_regions(&barefnty.sig)\n+                (cx.tcx().erase_late_bound_regions(&barefnty.sig), barefnty.abi)\n             }\n             ty::TyClosure(def_id, substs) => {\n-                cx.tcx().erase_late_bound_regions(&cx.tcx().closure_type(def_id, substs).sig)\n+                let closure_type = cx.tcx().closure_type(def_id, substs);\n+                (cx.tcx().erase_late_bound_regions(&closure_type.sig), closure_type.abi)\n             }\n \n             _ => cx.sess().bug(\"get_function_metdata: Expected a function type!\")\n@@ -435,8 +436,14 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             ty::FnDiverging => diverging_type_metadata(cx)\n         });\n \n+        let inputs = &if abi == abi::RustCall {\n+            type_of::untuple_arguments(cx, &sig.inputs)\n+        } else {\n+            sig.inputs\n+        };\n+\n         // Arguments types\n-        for &argument_type in &sig.inputs {\n+        for &argument_type in inputs {\n             signature.push(type_metadata(cx, argument_type, codemap::DUMMY_SP));\n         }\n "}]}