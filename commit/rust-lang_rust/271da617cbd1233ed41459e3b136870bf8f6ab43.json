{"sha": "271da617cbd1233ed41459e3b136870bf8f6ab43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MWRhNjE3Y2JkMTIzM2VkNDE0NTllM2IxMzY4NzBiZjhmNmFiNDM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-09T22:19:34Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-09T22:21:29Z"}, "message": "Tag re-exports differently in metadata\n\nso that the \"list metadata\" command doesn't print out anything\nabout intrinsics, but other code can see them.\n\nCloses #2771", "tree": {"sha": "3f152c29ba8609fb3e71e25f77ea6697378af7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f152c29ba8609fb3e71e25f77ea6697378af7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271da617cbd1233ed41459e3b136870bf8f6ab43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271da617cbd1233ed41459e3b136870bf8f6ab43", "html_url": "https://github.com/rust-lang/rust/commit/271da617cbd1233ed41459e3b136870bf8f6ab43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271da617cbd1233ed41459e3b136870bf8f6ab43/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9a3469c736a7f864adafe8536da3008711b350", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9a3469c736a7f864adafe8536da3008711b350", "html_url": "https://github.com/rust-lang/rust/commit/3f9a3469c736a7f864adafe8536da3008711b350"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "4d9a3d3e4677fd751983eb12e6a6cb9394fff09e", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=271da617cbd1233ed41459e3b136870bf8f6ab43", "patch": "@@ -96,6 +96,7 @@ const tag_mod_impl_trait: uint = 0x47u;\n  */\n const tag_item_impl_method: uint = 0x48u;\n const tag_item_dtor: uint = 0x49u;\n+const tag_paths_foreign_path: uint = 0x4a;\n \n // used to encode crate_ctxt side tables\n enum astencode_tag { // Reserves 0x50 -- 0x6f"}, {"sha": "1b4586dc3df7d20844de6bdae161b074a8596359", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=271da617cbd1233ed41459e3b136870bf8f6ab43", "patch": "@@ -827,13 +827,17 @@ fn get_crate_vers(data: @~[u8]) -> @str {\n fn list_crate_items(bytes: @~[u8], md: ebml::doc, out: io::writer) {\n     out.write_str(\"=Items=\\n\");\n     let items = ebml::get_doc(md, tag_items);\n-    do iter_crate_items(bytes) |path, did| {\n-        out.write_str(#fmt[\"%s (%s)\\n\", path, describe_def(items, did)]);\n+    do iter_crate_items(bytes) |tag, path, did| {\n+      // Don't print out any metadata info about intrinsics\n+       if tag != tag_paths_foreign_path {\n+            out.write_str(#fmt[\"%s (%s)\\n\", path,\n+                               describe_def(items, did)]);\n+       }\n     }\n     out.write_str(\"\\n\");\n }\n \n-fn iter_crate_items(bytes: @~[u8], proc: fn(str, ast::def_id)) {\n+fn iter_crate_items(bytes: @~[u8], proc: fn(uint, str, ast::def_id)) {\n     let md = ebml::doc(bytes);\n     let paths = ebml::get_doc(md, tag_paths);\n     let index = ebml::get_doc(paths, tag_index);\n@@ -842,10 +846,10 @@ fn iter_crate_items(bytes: @~[u8], proc: fn(str, ast::def_id)) {\n         let et = tag_index_buckets_bucket_elt;\n         do ebml::tagged_docs(bucket, et) |elt| {\n             let data = read_path(elt);\n-            let {tag:_, doc:def} = ebml::doc_at(bytes, data.pos);\n+            let {tag:t, doc:def} = ebml::doc_at(bytes, data.pos);\n             let did_doc = ebml::get_doc(def, tag_def_id);\n             let did = ebml::with_doc_data(did_doc, |d| parse_def_id(d));\n-            proc(data.path, did);\n+            proc(t, data.path, did);\n         };\n     };\n }\n@@ -859,7 +863,7 @@ fn get_crate_module_paths(bytes: @~[u8]) -> ~[(ast::def_id, str)] {\n     // fowarded path due to renamed import or reexport\n     let mut res = ~[];\n     let mods = map::str_hash();\n-    do iter_crate_items(bytes) |path, did| {\n+    do iter_crate_items(bytes) |_tag, path, did| {\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {\n             // if m has a sub-item, it must be a module"}, {"sha": "972fa2784536705fa67a4d4439b88fe47a909849", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271da617cbd1233ed41459e3b136870bf8f6ab43/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=271da617cbd1233ed41459e3b136870bf8f6ab43", "patch": "@@ -131,8 +131,11 @@ fn add_to_index(ebml_w: ebml::writer, path: &[ident], &index: ~[entry<str>],\n fn encode_foreign_module_item_paths(ebml_w: ebml::writer, nmod: foreign_mod,\n                                     path: ~[ident], &index: ~[entry<str>]) {\n     for nmod.items.each |nitem| {\n-        add_to_index(ebml_w, path, index, nitem.ident);\n-        encode_named_def_id(ebml_w, nitem.ident, local_def(nitem.id));\n+      add_to_index(ebml_w, path, index, nitem.ident);\n+      do ebml_w.wr_tag(tag_paths_foreign_path) {\n+          encode_name(ebml_w, nitem.ident);\n+          encode_def_id(ebml_w, local_def(nitem.id));\n+      }\n     }\n }\n \n@@ -244,7 +247,9 @@ fn encode_reexport_paths(ebml_w: ebml::writer,\n     for ecx.reexports.each |reexport| {\n         let (path, def_id) = reexport;\n         vec::push(index, {val: path, pos: ebml_w.writer.tell()});\n-        ebml_w.start_tag(tag_paths_data_item);\n+        // List metadata ignores tag_paths_foreign_path things, but\n+        // other things look at it.\n+        ebml_w.start_tag(tag_paths_foreign_path);\n         encode_name(ebml_w, @path);\n         encode_def_id(ebml_w, def_id);\n         ebml_w.end_tag();"}]}