{"sha": "19446418bcc7ae48b23dd89d04e78c3d552e3001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDQ2NDE4YmNjN2FlNDhiMjNkZDg5ZDA0ZTc4YzNkNTUyZTMwMDE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T21:34:10Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:51:10Z"}, "message": "Drop a now unnecessary argument from maybe_instantiate_inline.", "tree": {"sha": "6780fa8eafdd1b19db6fe8cb973ad8561b70cf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6780fa8eafdd1b19db6fe8cb973ad8561b70cf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19446418bcc7ae48b23dd89d04e78c3d552e3001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19446418bcc7ae48b23dd89d04e78c3d552e3001", "html_url": "https://github.com/rust-lang/rust/commit/19446418bcc7ae48b23dd89d04e78c3d552e3001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19446418bcc7ae48b23dd89d04e78c3d552e3001/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "url": "https://api.github.com/repos/rust-lang/rust/commits/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f", "html_url": "https://github.com/rust-lang/rust/commit/186f6faf1e6f4b507d97fefcb02fd8a7cf8d716f"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "b04f041618d714bcbf97c0673c062d59104f0d9c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -520,7 +520,7 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n     let _icx = push_ctxt(\"trans_res_dtor\");\n     if !substs.is_empty() {\n         let did = if did.crate != ast::local_crate {\n-            inline::maybe_instantiate_inline(ccx, did, true)\n+            inline::maybe_instantiate_inline(ccx, did)\n         } else {\n             did\n         };"}, {"sha": "01bd69f24fc95d331e9ed8a12ab5b62d2c1fbfac", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -361,8 +361,7 @@ pub fn trans_fn_ref_with_vtables(\n     // def_id to the local id of the inlined copy.\n     let def_id = {\n         if def_id.crate != ast::local_crate {\n-            let may_translate = opt_impl_did.is_none();\n-            inline::maybe_instantiate_inline(ccx, def_id, may_translate)\n+            inline::maybe_instantiate_inline(ccx, def_id)\n         } else {\n             def_id\n         }"}, {"sha": "69c8331bc9fba5bfd0373b49259df25f9adbb0c7", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -159,7 +159,7 @@ pub fn get_const_val(cx: @mut CrateContext, mut def_id: ast::def_id) -> ValueRef\n     let contains_key = cx.const_values.contains_key(&def_id.node);\n     if !ast_util::is_local(def_id) || !contains_key {\n         if !ast_util::is_local(def_id) {\n-            def_id = inline::maybe_instantiate_inline(cx, def_id, true);\n+            def_id = inline::maybe_instantiate_inline(cx, def_id);\n         }\n         match cx.tcx.items.get_copy(&def_id.node) {\n             ast_map::node_item(@ast::item {"}, {"sha": "f1718b91e569d58f5b2bb0fda2fe24086212ec0c", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -956,7 +956,7 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                 fn get_did(ccx: @mut CrateContext, did: ast::def_id)\n                     -> ast::def_id {\n                     if did.crate != ast::local_crate {\n-                        inline::maybe_instantiate_inline(ccx, did, true)\n+                        inline::maybe_instantiate_inline(ccx, did)\n                     } else {\n                         did\n                     }"}, {"sha": "e2d84473e2354953a76d6402fbaf36b2e4fd6f4d", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -22,11 +22,7 @@ use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n \n-// `translate` will be true if this function is allowed to translate the\n-// item and false otherwise. Currently, this parameter is set to false when\n-// translating default methods.\n-pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n-                                translate: bool)\n+pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id)\n     -> ast::def_id {\n     let _icx = push_ctxt(\"maybe_instantiate_inline\");\n     match ccx.external.find(&fn_id) {\n@@ -59,7 +55,7 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n         csearch::found(ast::ii_item(item)) => {\n             ccx.external.insert(fn_id, Some(item.id));\n             ccx.stats.n_inlines += 1;\n-            if translate { trans_item(ccx, item); }\n+            trans_item(ccx, item);\n             local_def(item.id)\n         }\n         csearch::found(ast::ii_foreign(item)) => {\n@@ -81,19 +77,19 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::def_id,\n             _ => ccx.sess.bug(\"maybe_instantiate_inline: item has a \\\n                                non-enum parent\")\n           }\n-          if translate { trans_item(ccx, item); }\n+          trans_item(ccx, item);\n           local_def(my_id)\n         }\n         csearch::found_parent(_, _) => {\n             ccx.sess.bug(\"maybe_get_item_ast returned a found_parent \\\n              with a non-item parent\");\n         }\n-        csearch::found(ast::ii_method(impl_did, _is_provided, mth)) => {\n+        csearch::found(ast::ii_method(impl_did, is_provided, mth)) => {\n           ccx.stats.n_inlines += 1;\n           ccx.external.insert(fn_id, Some(mth.id));\n           // If this is a default method, we can't look up the\n           // impl type. But we aren't going to translate anyways, so don't.\n-          if !translate { return local_def(mth.id); }\n+          if is_provided { return local_def(mth.id); }\n \n             let impl_tpt = ty::lookup_item_type(ccx.tcx, impl_did);\n             let num_type_params ="}, {"sha": "eda8f8530710d94e6330e50867765c35eb7af5ad", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19446418bcc7ae48b23dd89d04e78c3d552e3001/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=19446418bcc7ae48b23dd89d04e78c3d552e3001", "patch": "@@ -75,7 +75,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n     let fn_id_loc = if fn_id.crate == local_crate {\n         fn_id\n     } else {\n-        inline::maybe_instantiate_inline(ccx, fn_id, true)\n+        inline::maybe_instantiate_inline(ccx, fn_id)\n     };\n \n     // Conservatively assume full use for recursive loops"}]}