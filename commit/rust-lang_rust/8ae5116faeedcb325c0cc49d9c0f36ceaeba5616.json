{"sha": "8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "node_id": "C_kwDOAAsO6NoAKDhhZTUxMTZmYWVlZGNiMzI1YzBjYzQ5ZDljMGYzNmNlYWViYTU2MTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T05:15:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T05:15:23Z"}, "message": "Rollup merge of #106407 - mejrs:attr_check, r=compiler-errors\n\nImprove proc macro attribute diagnostics\n\nCloses https://github.com/rust-lang/rust/issues/102923", "tree": {"sha": "c3b1e453f180813b024d427bfd4f98409c830c23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b1e453f180813b024d427bfd4f98409c830c23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0gxrCRBK7hj4Ov3rIwAAgEoIAFh6Kst1JfMRFFNyNkPuWYXZ\nRWa9E5NvFneyZvolke4Rnl6S6JjxTsfY2fBnkVrEyHa6J/JUsC4kNRW2iPTLkFLS\nHKQZwIgoFpcDqPFYE8M5OuCVvY5u5Udc52Zz/9JgbAFZyGSI34rAwVaMF4nGdTGg\nZfT9x6cvebTDxSW8qJ5Df1mRh5WguwfmXkcOrLyKuI8ff/dvxfuJ90epx/56Ut8C\n0uTs1+aWGdMe5zooHsTW/uw1ACAgn8js4md5Y7qQ3eJOpt6lV31GPYnPelmPXnHO\nzqj1kK3lVsGZGj8zcabAbBla1LtIc4JzLIVEOdy2SAJL3LQSTTdYGrgme3lSpAQ=\n=IZCi\n-----END PGP SIGNATURE-----\n", "payload": "tree c3b1e453f180813b024d427bfd4f98409c830c23\nparent 2a17174ee639f8e0a3cee307d5685d38beb474ba\nparent 8e43414bce77cfe2030b875e365c77691897b95f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674710123 +0100\ncommitter GitHub <noreply@github.com> 1674710123 +0100\n\nRollup merge of #106407 - mejrs:attr_check, r=compiler-errors\n\nImprove proc macro attribute diagnostics\n\nCloses https://github.com/rust-lang/rust/issues/102923\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "html_url": "https://github.com/rust-lang/rust/commit/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a17174ee639f8e0a3cee307d5685d38beb474ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a17174ee639f8e0a3cee307d5685d38beb474ba", "html_url": "https://github.com/rust-lang/rust/commit/2a17174ee639f8e0a3cee307d5685d38beb474ba"}, {"sha": "8e43414bce77cfe2030b875e365c77691897b95f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e43414bce77cfe2030b875e365c77691897b95f", "html_url": "https://github.com/rust-lang/rust/commit/8e43414bce77cfe2030b875e365c77691897b95f"}], "stats": {"total": 564, "additions": 542, "deletions": 22}, "files": [{"sha": "0c2ab3d08f9dea13d6b1da74a346e231f40c9f6f", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -710,3 +710,24 @@ passes_ignored_derived_impls =\n       [one] trait {$trait_list}, but this is\n      *[other] traits {$trait_list}, but these are\n     } intentionally ignored during dead code analysis\n+\n+passes_proc_macro_typeerror = mismatched {$kind} signature\n+    .label = found {$found}, expected type `proc_macro::TokenStream`\n+    .note = {$kind}s must have a signature of `{$expected_signature}`\n+\n+passes_proc_macro_diff_arg_count = mismatched {$kind} signature\n+    .label = found unexpected {$count ->\n+      [one] argument\n+     *[other] arguments\n+    }\n+    .note = {$kind}s must have a signature of `{$expected_signature}`\n+\n+passes_proc_macro_missing_args = mismatched {$kind} signature\n+    .label = {$kind} must have {$expected_input_count ->\n+      [one] one argument\n+     *[other] two arguments\n+    } of type `proc_macro::TokenStream`\n+\n+passes_proc_macro_invalid_abi = proc macro functions may not be `extern \"{$abi}\"`\n+\n+passes_proc_macro_unsafe = proc macro functions may not be `unsafe`"}, {"sha": "42329853259459ead163c2e4e7c70fc28084be19", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 140, "deletions": 6, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -6,11 +6,12 @@\n \n use crate::errors::{\n     self, AttrApplication, DebugVisualizerUnreadable, InvalidAttrAtCrateLevel, ObjectLifetimeErr,\n-    OnlyHasEffectOn, TransparentIncompatible, UnrecognizedReprHint,\n+    OnlyHasEffectOn, ProcMacroDiffArguments, ProcMacroInvalidAbi, ProcMacroMissingArguments,\n+    ProcMacroTypeError, ProcMacroUnsafe, TransparentIncompatible, UnrecognizedReprHint,\n };\n use rustc_ast::{ast, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{fluent, Applicability, MultiSpan};\n+use rustc_errors::{fluent, Applicability, IntoDiagnosticArg, MultiSpan};\n use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n@@ -19,18 +20,20 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{\n     self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID, CRATE_OWNER_ID,\n };\n-use rustc_hir::{MethodKind, Target};\n+use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n+use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use std::cell::Cell;\n use std::collections::hash_map::Entry;\n \n pub(crate) fn target_from_impl_item<'tcx>(\n@@ -62,8 +65,29 @@ enum ItemLike<'tcx> {\n     ForeignItem,\n }\n \n+#[derive(Copy, Clone)]\n+pub(crate) enum ProcMacroKind {\n+    FunctionLike,\n+    Derive,\n+    Attribute,\n+}\n+\n+impl IntoDiagnosticArg for ProcMacroKind {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        match self {\n+            ProcMacroKind::Attribute => \"attribute proc macro\",\n+            ProcMacroKind::Derive => \"derive proc macro\",\n+            ProcMacroKind::FunctionLike => \"function-like proc macro\",\n+        }\n+        .into_diagnostic_arg()\n+    }\n+}\n+\n struct CheckAttrVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+\n+    // Whether or not this visitor should abort after finding errors\n+    abort: Cell<bool>,\n }\n \n impl CheckAttrVisitor<'_> {\n@@ -173,7 +197,7 @@ impl CheckAttrVisitor<'_> {\n                 sym::path => self.check_generic_attr(hir_id, attr, target, Target::Mod),\n                 sym::plugin_registrar => self.check_plugin_registrar(hir_id, attr, target),\n                 sym::macro_export => self.check_macro_export(hir_id, attr, target),\n-                sym::ignore | sym::should_panic | sym::proc_macro_derive => {\n+                sym::ignore | sym::should_panic => {\n                     self.check_generic_attr(hir_id, attr, target, Target::Fn)\n                 }\n                 sym::automatically_derived => {\n@@ -183,6 +207,16 @@ impl CheckAttrVisitor<'_> {\n                     self.check_generic_attr(hir_id, attr, target, Target::Mod)\n                 }\n                 sym::rustc_object_lifetime_default => self.check_object_lifetime_default(hir_id),\n+                sym::proc_macro => {\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::FunctionLike)\n+                }\n+                sym::proc_macro_attribute => {\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::Attribute);\n+                }\n+                sym::proc_macro_derive => {\n+                    self.check_generic_attr(hir_id, attr, target, Target::Fn);\n+                    self.check_proc_macro(hir_id, target, ProcMacroKind::Derive)\n+                }\n                 _ => {}\n             }\n \n@@ -2063,6 +2097,103 @@ impl CheckAttrVisitor<'_> {\n             errors::Unused { attr_span: attr.span, note },\n         );\n     }\n+\n+    /// A best effort attempt to create an error for a mismatching proc macro signature.\n+    ///\n+    /// If this best effort goes wrong, it will just emit a worse error later (see #102923)\n+    fn check_proc_macro(&self, hir_id: HirId, target: Target, kind: ProcMacroKind) {\n+        let expected_input_count = match kind {\n+            ProcMacroKind::Attribute => 2,\n+            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n+        };\n+\n+        let expected_signature = match kind {\n+            ProcMacroKind::Attribute => \"fn(TokenStream, TokenStream) -> TokenStream\",\n+            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => \"fn(TokenStream) -> TokenStream\",\n+        };\n+\n+        let tcx = self.tcx;\n+        if target == Target::Fn {\n+            let Some(tokenstream) = tcx.get_diagnostic_item(sym::TokenStream) else {return};\n+            let tokenstream = tcx.type_of(tokenstream);\n+\n+            let id = hir_id.expect_owner();\n+            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n+\n+            let sig = tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id));\n+            let sig = tcx.normalize_erasing_regions(ParamEnv::empty(), sig);\n+\n+            // We don't currently require that the function signature is equal to\n+            // `fn(TokenStream) -> TokenStream`, but instead monomorphizes to\n+            // `fn(TokenStream) -> TokenStream` after some substitution of generic arguments.\n+            //\n+            // Properly checking this means pulling in additional `rustc` crates, so we don't.\n+            let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsInfer };\n+\n+            if sig.abi != Abi::Rust {\n+                tcx.sess.emit_err(ProcMacroInvalidAbi { span: hir_sig.span, abi: sig.abi.name() });\n+                self.abort.set(true);\n+            }\n+\n+            if sig.unsafety == Unsafety::Unsafe {\n+                tcx.sess.emit_err(ProcMacroUnsafe { span: hir_sig.span });\n+                self.abort.set(true);\n+            }\n+\n+            let output = sig.output();\n+\n+            // Typecheck the output\n+            if !drcx.types_may_unify(output, tokenstream) {\n+                tcx.sess.emit_err(ProcMacroTypeError {\n+                    span: hir_sig.decl.output.span(),\n+                    found: output,\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+\n+            if sig.inputs().len() < expected_input_count {\n+                tcx.sess.emit_err(ProcMacroMissingArguments {\n+                    expected_input_count,\n+                    span: hir_sig.span,\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+\n+            // Check that the inputs are correct, if there are enough.\n+            if sig.inputs().len() >= expected_input_count {\n+                for (arg, input) in\n+                    sig.inputs().iter().zip(hir_sig.decl.inputs).take(expected_input_count)\n+                {\n+                    if !drcx.types_may_unify(*arg, tokenstream) {\n+                        tcx.sess.emit_err(ProcMacroTypeError {\n+                            span: input.span,\n+                            found: *arg,\n+                            kind,\n+                            expected_signature,\n+                        });\n+                        self.abort.set(true);\n+                    }\n+                }\n+            }\n+\n+            // Check that there are not too many arguments\n+            let body_id = tcx.hir().body_owned_by(id.def_id);\n+            let excess = tcx.hir().body(body_id).params.get(expected_input_count..);\n+            if let Some(excess @ [begin @ end] | excess @ [begin, .., end]) = excess {\n+                tcx.sess.emit_err(ProcMacroDiffArguments {\n+                    span: begin.span.to(end.span),\n+                    count: excess.len(),\n+                    kind,\n+                    expected_signature,\n+                });\n+                self.abort.set(true);\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n@@ -2225,12 +2356,15 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n }\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n+    let check_attr_visitor = &mut CheckAttrVisitor { tcx, abort: Cell::new(false) };\n     tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n+    if check_attr_visitor.abort.get() {\n+        tcx.sess.abort_if_errors()\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "9e05ad22e624172681d1b249710a71f669297cbf", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -12,6 +12,7 @@ use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{MainDefinition, Ty};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n+use crate::check_attr::ProcMacroKind;\n use crate::lang_items::Duplicate;\n \n #[derive(Diagnostic)]\n@@ -1515,3 +1516,52 @@ pub struct ChangeFieldsToBeOfUnitType {\n     #[suggestion_part(code = \"()\")]\n     pub spans: Vec<Span>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_typeerror)]\n+#[note]\n+pub(crate) struct ProcMacroTypeError<'tcx> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub found: Ty<'tcx>,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_diff_arg_count)]\n+pub(crate) struct ProcMacroDiffArguments {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub count: usize,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_missing_args)]\n+pub(crate) struct ProcMacroMissingArguments {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub expected_input_count: usize,\n+    pub kind: ProcMacroKind,\n+    pub expected_signature: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_invalid_abi)]\n+pub(crate) struct ProcMacroInvalidAbi {\n+    #[primary_span]\n+    pub span: Span,\n+    pub abi: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_proc_macro_unsafe)]\n+pub(crate) struct ProcMacroUnsafe {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "2bccd46b08fcf799f191a95282791ff8421e4892", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -288,6 +288,7 @@ symbols! {\n         Target,\n         ToOwned,\n         ToString,\n+        TokenStream,\n         Try,\n         TryCaptureGeneric,\n         TryCapturePrintable,"}, {"sha": "8bff40c279aaa4ce2b9761c9a78ae32bfa93d6aa", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -74,6 +74,7 @@ pub fn is_available() -> bool {\n ///\n /// This is both the input and output of `#[proc_macro]`, `#[proc_macro_attribute]`\n /// and `#[proc_macro_derive]` definitions.\n+#[rustc_diagnostic_item = \"TokenStream\"]\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #[derive(Clone)]\n pub struct TokenStream(Option<bridge::client::TokenStream>);"}, {"sha": "8685087611248be845055ef7b14b00f6cd4fdea6", "filename": "tests/ui/proc-macro/allowed-signatures.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fallowed-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fallowed-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fallowed-signatures.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![allow(private_in_public)]\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn foo<T>(t: T) -> TokenStream {\n+  TokenStream::new()\n+}\n+\n+trait Project {\n+    type Assoc;\n+}\n+\n+impl Project for () {\n+    type Assoc = TokenStream;\n+}\n+\n+#[proc_macro]\n+pub fn uwu(_input: <() as Project>::Assoc) -> <() as Project>::Assoc {\n+    TokenStream::new()\n+}"}, {"sha": "873660a5b3ab989c5f3bd42b838df81a52f9193a", "filename": "tests/ui/proc-macro/proc-macro-abi.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,31 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![allow(warnings)]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern \"system\"`\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern fn abi3(a: TokenStream) -> TokenStream {\n+    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    a\n+}\n+\n+#[proc_macro]\n+pub extern \"Rust\" fn abi4(a: TokenStream) -> TokenStream {\n+    a\n+}"}, {"sha": "9a781be0996dde492ddaf7da02decfeb9f78b33f", "filename": "tests/ui/proc-macro/proc-macro-abi.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,20 @@\n+error: proc macro functions may not be `extern \"C\"`\n+  --> $DIR/proc-macro-abi.rs:11:1\n+   |\n+LL | pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `extern \"system\"`\n+  --> $DIR/proc-macro-abi.rs:17:1\n+   |\n+LL | pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `extern \"C\"`\n+  --> $DIR/proc-macro-abi.rs:23:1\n+   |\n+LL | pub extern fn abi3(a: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "51abc8e7d3edb0f1378f70cb19f9b746aa14ad83", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,32 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    ::proc_macro::TokenStream::new()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    //~| ERROR mismatched attribute proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro_attribute]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched attribute proc macro signature\n+    //~| ERROR mismatched attribute proc macro signature\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched attribute proc macro signature\n+}"}, {"sha": "abf7a6f3ce9229d9bfeabc419852d035c6ee64da", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,42 @@\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:10:1\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:16:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:16:1\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:23:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:23:1\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+\n+error: mismatched attribute proc macro signature\n+  --> $DIR/signature-proc-macro-attribute.rs:30:49\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                                 ^^^^^^^^^ found unexpected argument\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "f2fd824b675b68741653c8a0bb4c7c67a340f2a3", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,31 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(Blah)]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched derive proc macro signature\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_derive(Bleh)]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched derive proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro_derive(Bluh)]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched derive proc macro signature\n+    //~| ERROR mismatched derive proc macro signature\n+    input\n+}\n+\n+#[proc_macro_derive(Blih)]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched derive proc macro signature\n+}"}, {"sha": "a358ae277037f106bbdd95c979444b477df9f834", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,40 @@\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:10:25\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:16:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:22:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:22:30\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature-proc-macro-derive.rs:29:33\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "54770aacd1a980728cf77e096b85742872017cb7", "filename": "tests/ui/proc-macro/signature-proc-macro.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,31 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn bad_input(input: String) -> TokenStream {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    ::proc_macro::TokenStream::new()\n+}\n+\n+#[proc_macro]\n+pub fn bad_output(input: TokenStream) -> String {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    String::from(\"blah\")\n+}\n+\n+#[proc_macro]\n+pub fn bad_everything(input: String) -> String {\n+    //~^ ERROR mismatched function-like proc macro signature\n+    //~| ERROR mismatched function-like proc macro signature\n+    input\n+}\n+\n+#[proc_macro]\n+pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+    //~^ ERROR mismatched function-like proc macro signature\n+}"}, {"sha": "4b14a54e6750318fc13b57274188f574e1af5a08", "filename": "tests/ui/proc-macro/signature-proc-macro.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -0,0 +1,40 @@\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:10:25\n+   |\n+LL | pub fn bad_input(input: String) -> TokenStream {\n+   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:16:42\n+   |\n+LL | pub fn bad_output(input: TokenStream) -> String {\n+   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:22:41\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:22:30\n+   |\n+LL | pub fn bad_everything(input: String) -> String {\n+   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |\n+   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched function-like proc macro signature\n+  --> $DIR/signature-proc-macro.rs:29:33\n+   |\n+LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "11187aa31bd8071c6047c1568bf7ac7373bbc30b", "filename": "tests/ui/proc-macro/signature.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.rs?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -8,6 +8,10 @@ extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-    //~^ ERROR: expected a `Fn<(proc_macro::TokenStream,)>` closure, found `unsafe extern \"C\" fn\n+    //~^ ERROR: mismatched derive proc macro signature\n+    //~| mismatched derive proc macro signature\n+    //~| mismatched derive proc macro signature\n+    //~| proc macro functions may not be `extern\n+    //~| proc macro functions may not be `unsafe\n     loop {}\n }"}, {"sha": "3dbe3f22a0df89310dbcb24e8fdb51e021e50754", "filename": "tests/ui/proc-macro/signature.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5116faeedcb325c0cc49d9c0f36ceaeba5616/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.stderr?ref=8ae5116faeedcb325c0cc49d9c0f36ceaeba5616", "patch": "@@ -1,20 +1,36 @@\n-error[E0277]: expected a `Fn<(proc_macro::TokenStream,)>` closure, found `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n+error: proc macro functions may not be `extern \"C\"`\n   --> $DIR/signature.rs:10:1\n    |\n-LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-LL | |\n-LL | |     loop {}\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_call the function in a closure: `|| unsafe { /* code */ }`\n-   |   required by a bound introduced by this call\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: proc macro functions may not be `unsafe`\n+  --> $DIR/signature.rs:10:1\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:49\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                                 ^^^ found u32, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:33\n+   |\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                 ^^^ found i32, expected type `proc_macro::TokenStream`\n+   |\n+   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+\n+error: mismatched derive proc macro signature\n+  --> $DIR/signature.rs:10:38\n    |\n-   = help: the trait `Fn<(proc_macro::TokenStream,)>` is not implemented for fn item `unsafe extern \"C\" fn(i32, u32) -> u32 {foo}`\n-   = note: unsafe function cannot be called generically without an unsafe block\n-note: required by a bound in `ProcMacro::custom_derive`\n-  --> $SRC_DIR/proc_macro/src/bridge/client.rs:LL:COL\n+LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n+   |                                      ^^^^^^ found unexpected argument\n \n-error: aborting due to previous error\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`."}]}