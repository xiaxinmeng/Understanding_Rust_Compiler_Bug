{"sha": "760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MGFmNmNmYzlmYzAyNzhiMTQzOGFjNGE0YWE4YTE5NWRiNmNiZjg=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-19T03:43:29Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-20T20:58:53Z"}, "message": "Make `format_snippet` and `format_code_block` private\n\ncc #2639", "tree": {"sha": "9430c6254cd919d873cd190ce0ab426164693e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9430c6254cd919d873cd190ce0ab426164693e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "html_url": "https://github.com/rust-lang/rust/commit/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9226a50b14e2c25dacc0c83d5142f580d6608dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9226a50b14e2c25dacc0c83d5142f580d6608dae", "html_url": "https://github.com/rust-lang/rust/commit/9226a50b14e2c25dacc0c83d5142f580d6608dae"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "37d9db2459f015b34367267bd020aef70a3cf5c7", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=760af6cfc9fc0278b1438ac4a4aa8a195db6cbf8", "patch": "@@ -656,7 +656,7 @@ enum ParseError<'sess> {\n \n /// Format the given snippet. The snippet is expected to be *complete* code.\n /// When we cannot parse the given snippet, this function returns `None`.\n-pub fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n+fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n     let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n     let input = Input::Text(snippet.into());\n     let mut config = config.clone();\n@@ -694,7 +694,7 @@ fn enclose_in_main_block(s: &str, config: &Config) -> String {\n /// The code block may be incomplete (i.e. parser may be unable to parse it).\n /// To avoid panic in parser, we wrap the code block with a dummy function.\n /// The returned code block does *not* end with newline.\n-pub fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n+fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n     // Wrap the given code block with `fn main()` if it does not have one.\n     let snippet = enclose_in_main_block(code_snippet, config);\n     let mut result = String::with_capacity(snippet.len());"}]}