{"sha": "be9679de5c91540f44ffd2e2500a45b29cd5b230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTY3OWRlNWM5MTU0MGY0NGZmZDJlMjUwMGE0NWIyOWNkNWIyMzA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-18T20:46:57Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T17:05:41Z"}, "message": "rustc/query: tweak comments on hir_owner{,_nodes}.", "tree": {"sha": "ceec8d113a3b46a58d97ef868c49729803592657", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceec8d113a3b46a58d97ef868c49729803592657"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9679de5c91540f44ffd2e2500a45b29cd5b230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9679de5c91540f44ffd2e2500a45b29cd5b230", "html_url": "https://github.com/rust-lang/rust/commit/be9679de5c91540f44ffd2e2500a45b29cd5b230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9679de5c91540f44ffd2e2500a45b29cd5b230/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f1dfae64e302c0da846d215697b323bb1ee0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f1dfae64e302c0da846d215697b323bb1ee0a2", "html_url": "https://github.com/rust-lang/rust/commit/e8f1dfae64e302c0da846d215697b323bb1ee0a2"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "00e40faa95c304fef90503e99be88ec9a4c0586e", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be9679de5c91540f44ffd2e2500a45b29cd5b230/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9679de5c91540f44ffd2e2500a45b29cd5b230/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=be9679de5c91540f44ffd2e2500a45b29cd5b230", "patch": "@@ -64,24 +64,25 @@ rustc_queries! {\n         }\n \n         // The items in a module.\n+        //\n         // This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n         // Avoid calling this query directly.\n         query hir_module_items(key: LocalDefId) -> &'tcx hir::ModuleItems {\n             eval_always\n             desc { |tcx| \"HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // An HIR node with a `LocalDefId` that can own other HIR nodes which do\n-        // not themselves have a `LocalDefId`.\n+        // Gives access to the HIR node for the HIR owner `key`.\n+        //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n         query hir_owner(key: LocalDefId) -> &'tcx crate::hir::Owner<'tcx> {\n             eval_always\n             desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n-        // The HIR nodes which do not themselves have a `LocalDefId` and are\n-        // owned by another HIR node with a `LocalDefId`.\n+        // Gives access to the HIR nodes and bodies inside the HIR owner `key`.\n+        //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n         query hir_owner_nodes(key: LocalDefId) -> &'tcx crate::hir::OwnerNodes<'tcx> {"}]}