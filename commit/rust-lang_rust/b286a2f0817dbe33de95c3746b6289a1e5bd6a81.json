{"sha": "b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyODZhMmYwODE3ZGJlMzNkZTk1YzM3NDZiNjI4OWExZTViZDZhODE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-10-25T22:14:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-11-20T18:08:35Z"}, "message": "Add --crate-type metadata\n\nWith the same semantics as -Zno-trans", "tree": {"sha": "0db9d4ec72804aa86469ad14e214014c95da38ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db9d4ec72804aa86469ad14e214014c95da38ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "html_url": "https://github.com/rust-lang/rust/commit/b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f8944e21a3ff506897d4aaa9ca292fec209cff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8944e21a3ff506897d4aaa9ca292fec209cff2", "html_url": "https://github.com/rust-lang/rust/commit/8f8944e21a3ff506897d4aaa9ca292fec209cff2"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "aeccaac385ac5aeaf6f67b92b27ce0ec58756eb8", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -114,7 +114,7 @@ fn calculate_type(sess: &session::Session,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything.\n-        config::CrateTypeRlib => return Vec::new(),\n+        config::CrateTypeRlib | config::CrateTypeMetadata => return Vec::new(),\n \n         // Staticlibs and cdylibs must have all static dependencies. If any fail\n         // to be found, we generate some nice pretty errors."}, {"sha": "35e0e494771ba131a46b6a488beb2b7a5147e823", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ReachableContext<'a, 'tcx> {\n         let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n             *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||\n-            *ty == config::CrateTypeProcMacro\n+            *ty == config::CrateTypeProcMacro || *ty == config::CrateTypeMetadata\n         });\n         ReachableContext {\n             tcx: tcx,"}, {"sha": "dd4d09ccb662a55c0c5c9ff85572c424831dc2a1", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -75,7 +75,8 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n             config::CrateTypeCdylib |\n             config::CrateTypeExecutable |\n             config::CrateTypeStaticlib => true,\n-            config::CrateTypeRlib => false,\n+            config::CrateTypeRlib |\n+            config::CrateTypeMetadata => false,\n         }\n     });\n     if !needs_check {"}, {"sha": "4a0732882730ecdcc7d5249c110f5a7e97dc30b2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -78,18 +78,6 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n-pub enum ErrorOutputType {\n-    HumanReadable(ColorConfig),\n-    Json,\n-}\n-\n-impl Default for ErrorOutputType {\n-    fn default() -> ErrorOutputType {\n-        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n-    }\n-}\n-\n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n         match *self {\n@@ -125,6 +113,18 @@ impl OutputType {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub enum ErrorOutputType {\n+    HumanReadable(ColorConfig),\n+    Json,\n+}\n+\n+impl Default for ErrorOutputType {\n+    fn default() -> ErrorOutputType {\n+        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n+    }\n+}\n+\n // Use tree-based collections to cheaply get a deterministic Hash implementation.\n // DO NOT switch BTreeMap out for an unsorted container type! That would break\n // dependency tracking for commandline arguments.\n@@ -483,6 +483,7 @@ pub enum CrateType {\n     CrateTypeStaticlib,\n     CrateTypeCdylib,\n     CrateTypeProcMacro,\n+    CrateTypeMetadata,\n }\n \n #[derive(Clone, Hash)]\n@@ -1159,7 +1160,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                              assumed.\", \"[KIND=]NAME\"),\n         opt::multi_s(\"\", \"crate-type\", \"Comma separated list of types of crates\n                                     for the compiler to emit\",\n-                   \"[bin|lib|rlib|dylib|cdylib|staticlib]\"),\n+                   \"[bin|lib|rlib|dylib|cdylib|staticlib|metadata]\"),\n         opt::opt_s(\"\", \"crate-name\", \"Specify the name of the crate being built\",\n                \"NAME\"),\n         opt::multi_s(\"\", \"emit\", \"Comma separated list of types of output for \\\n@@ -1548,6 +1549,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n                 \"cdylib\"    => CrateTypeCdylib,\n                 \"bin\"       => CrateTypeExecutable,\n                 \"proc-macro\" => CrateTypeProcMacro,\n+                \"metadata\"  => CrateTypeMetadata,\n                 _ => {\n                     return Err(format!(\"unknown crate type: `{}`\",\n                                        part));\n@@ -1632,6 +1634,7 @@ impl fmt::Display for CrateType {\n             CrateTypeStaticlib => \"staticlib\".fmt(f),\n             CrateTypeCdylib => \"cdylib\".fmt(f),\n             CrateTypeProcMacro => \"proc-macro\".fmt(f),\n+            CrateTypeMetadata => \"rmeta\".fmt(f),\n         }\n     }\n }"}, {"sha": "9c207108374db05f3a6698921f571a93a47dee64", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -1093,6 +1093,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n          \"serialize work products\",\n          move || rustc_incremental::save_work_products(sess));\n \n+    println!(\"finish phase 5: {}\", sess.err_count());\n     if sess.err_count() > 0 {\n         Err(sess.err_count())\n     } else {"}, {"sha": "313b3b0fddf4d80218816df0cbcac24aa051ed8a", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -767,7 +767,8 @@ impl<'a> CrateLoader<'a> {\n                 config::CrateTypeProcMacro |\n                 config::CrateTypeCdylib |\n                 config::CrateTypeStaticlib => need_lib_alloc = true,\n-                config::CrateTypeRlib => {}\n+                config::CrateTypeRlib |\n+                config::CrateTypeMetadata => {}\n             }\n         }\n         if !need_lib_alloc && !need_exe_alloc { return }"}, {"sha": "11ab6dcaa87f99fa02a99fac8d9068d8c462d2c1", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -231,7 +231,7 @@ impl<'a> ArchiveBuilder<'a> {\n     }\n \n     fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n-        let kind = &self.config.sess.target.target.options.archive_format[..];\n+        let kind = &*self.config.sess.target.target.options.archive_format;\n         kind.parse().map_err(|_| kind)\n     }\n "}, {"sha": "fcbead49a2635fdfec2a3a92bd1343ff56547e35", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -191,6 +191,7 @@ pub fn link_binary(sess: &Session,\n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n         // Ignore executable crates if we have -Z no-trans, as they will error.\n+        // TODO do we need to check for CrateTypeMetadata here?\n         if sess.opts.debugging_opts.no_trans &&\n            crate_type == config::CrateTypeExecutable {\n             continue;\n@@ -263,6 +264,9 @@ pub fn filename_for_input(sess: &Session,\n         config::CrateTypeRlib => {\n             outputs.out_directory.join(&format!(\"lib{}.rlib\", libname))\n         }\n+        config::CrateTypeMetadata => {\n+            outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname))\n+        }\n         config::CrateTypeCdylib |\n         config::CrateTypeProcMacro |\n         config::CrateTypeDylib => {\n@@ -322,6 +326,7 @@ fn link_binary_output(sess: &Session,\n                       outputs: &OutputFilenames,\n                       crate_name: &str) -> PathBuf {\n     let objects = object_filenames(trans, outputs);\n+    println!(\"objects: {:?}\", objects);\n     let default_filename = filename_for_input(sess, crate_type, crate_name,\n                                               outputs);\n     let out_filename = outputs.outputs.get(&OutputType::Exe)\n@@ -345,7 +350,7 @@ fn link_binary_output(sess: &Session,\n     };\n \n     match crate_type {\n-        config::CrateTypeRlib => {\n+        config::CrateTypeRlib | config::CrateTypeMetadata => {\n             link_rlib(sess, Some(trans), &objects, &out_filename,\n                       tmpdir.path()).build();\n         }\n@@ -403,6 +408,7 @@ fn link_rlib<'a>(sess: &'a Session,\n                  tmpdir: &Path) -> ArchiveBuilder<'a> {\n     info!(\"preparing rlib from {:?} to {:?}\", objects, out_filename);\n     let mut ab = ArchiveBuilder::new(archive_config(sess, out_filename, None));\n+\n     for obj in objects {\n         ab.add_file(obj);\n     }"}, {"sha": "29e3efb3b3a0d7aa5c56a3b5201cd7da68c87b65", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -691,10 +691,12 @@ pub fn run_passes(sess: &Session,\n     // Whenever an rlib is created, the bitcode is inserted into the\n     // archive in order to allow LTO against it.\n     let needs_crate_bitcode =\n-            sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n-            sess.opts.output_types.contains_key(&OutputType::Exe);\n+            (sess.crate_types.borrow().contains(&config::CrateTypeRlib) &&\n+             sess.opts.output_types.contains_key(&OutputType::Exe)) ||\n+            sess.crate_types.borrow().contains(&config::CrateTypeMetadata);\n     let needs_crate_object =\n-            sess.opts.output_types.contains_key(&OutputType::Exe);\n+            sess.opts.output_types.contains_key(&OutputType::Exe) ||\n+            sess.crate_types.borrow().contains(&config::CrateTypeMetadata);\n     if needs_crate_bitcode {\n         modules_config.emit_bc = true;\n     }"}, {"sha": "59d81d5c6902dba6992b1f5213bf8e6c4fa27f23", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -45,7 +45,7 @@ use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::dep_graph::{DepNode, WorkProduct};\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n-use session::config::{self, NoDebugInfo};\n+use session::config::{self, NoDebugInfo, OutputType};\n use rustc_incremental::IncrementalHashesMap;\n use session::Session;\n use abi::{self, Abi, FnType};\n@@ -1260,7 +1260,8 @@ fn write_metadata(cx: &SharedCrateContext,\n             config::CrateTypeStaticlib |\n             config::CrateTypeCdylib => MetadataKind::None,\n \n-            config::CrateTypeRlib => MetadataKind::Uncompressed,\n+            config::CrateTypeRlib |\n+            config::CrateTypeMetadata => MetadataKind::Uncompressed,\n \n             config::CrateTypeDylib |\n             config::CrateTypeProcMacro => MetadataKind::Compressed,\n@@ -1600,7 +1601,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     assert_module_sources::assert_module_sources(tcx, &modules);\n \n     // Skip crate items and just output metadata in -Z no-trans mode.\n-    if tcx.sess.opts.debugging_opts.no_trans {\n+    if tcx.sess.opts.debugging_opts.no_trans ||\n+       tcx.sess.crate_types.borrow().iter().all(|ct| ct == &config::CrateTypeMetadata) {\n         let linker_info = LinkerInfo::new(&shared_ccx, &[]);\n         return CrateTranslation {\n             modules: modules,"}, {"sha": "e732ff6b64c1762028e9379f70e8cc53ea2c4466", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b286a2f0817dbe33de95c3746b6289a1e5bd6a81/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b286a2f0817dbe33de95c3746b6289a1e5bd6a81", "patch": "@@ -396,7 +396,8 @@ actual:\\n\\\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n         let mut args = vec![\"-\".to_owned(),\n-                            \"-Zno-trans\".to_owned(),\n+                            \"--emit\".to_owned(),\n+                            \"metadata\".to_owned(),\n                             \"--out-dir\".to_owned(),\n                             out_dir.to_str().unwrap().to_owned(),\n                             format!(\"--target={}\", target),"}]}