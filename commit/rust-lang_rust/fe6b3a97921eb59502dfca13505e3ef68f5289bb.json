{"sha": "fe6b3a97921eb59502dfca13505e3ef68f5289bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNmIzYTk3OTIxZWI1OTUwMmRmY2ExMzUwNWUzZWY2OGY1Mjg5YmI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-26T19:43:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T19:43:14Z"}, "message": "Rollup merge of #80876 - ojeda:option-result-unwrap_unchecked, r=m-ou-se\n\nAdd `unwrap_unchecked()` methods for `Option` and `Result`\n\nIn particular:\n  - `unwrap_unchecked()` for `Option`.\n  - `unwrap_unchecked()` and `unwrap_err_unchecked()` for `Result`.\n\nThese complement other `*_unchecked()` methods in `core` etc.\n\nCurrently there are a couple of places it may be used inside rustc (`LinkedList`, `BTree`). It is also easy to find other repositories with similar functionality.\n\nFixes #48278.", "tree": {"sha": "00c9f09282ed445cd97b73d099bec67b846126b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c9f09282ed445cd97b73d099bec67b846126b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6b3a97921eb59502dfca13505e3ef68f5289bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEHDSCRBK7hj4Ov3rIwAAdHIIAAD0A8KJD7F2LVEG+APCBjEt\nQ4JG9eCOFgcZXc4CbbZxiL+18K7Ztv8gl4mSzyWAusaXOjkIvYM9L/xHpczsMWKJ\nFHxQ2yDVvI5BkGA5yEQBtxqgp5+dQSTxJQozlwwUqr/iGosVfN7Tt79cUKRFSnE+\np1bGIQbxBJJvJrBjTeGrXOWaOgIwKT7ue3tw4jNuZbQBbRqQqbcauWjSJBddQvQF\ne665lW0y6p81LoxhEP9JfiF3Hi3ByMsIZQo47u1Nol3+M/gywWmQokHdkd9HCMFo\nQzUrvk/HwqPM0ZNMzk92HvNpZR27OhjJU44gN1PThU2hGaISljeUvZI9gQANexI=\n=pXfq\n-----END PGP SIGNATURE-----\n", "payload": "tree 00c9f09282ed445cd97b73d099bec67b846126b8\nparent f85fd8196827c191dfe9fa46ad7e3a8f38a7a894\nparent 01250fcec6c77552b0f7aac11ed833412294ccba\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611690194 +0900\ncommitter GitHub <noreply@github.com> 1611690194 +0900\n\nRollup merge of #80876 - ojeda:option-result-unwrap_unchecked, r=m-ou-se\n\nAdd `unwrap_unchecked()` methods for `Option` and `Result`\n\nIn particular:\n  - `unwrap_unchecked()` for `Option`.\n  - `unwrap_unchecked()` and `unwrap_err_unchecked()` for `Result`.\n\nThese complement other `*_unchecked()` methods in `core` etc.\n\nCurrently there are a couple of places it may be used inside rustc (`LinkedList`, `BTree`). It is also easy to find other repositories with similar functionality.\n\nFixes #48278.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6b3a97921eb59502dfca13505e3ef68f5289bb", "html_url": "https://github.com/rust-lang/rust/commit/fe6b3a97921eb59502dfca13505e3ef68f5289bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6b3a97921eb59502dfca13505e3ef68f5289bb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f85fd8196827c191dfe9fa46ad7e3a8f38a7a894", "url": "https://api.github.com/repos/rust-lang/rust/commits/f85fd8196827c191dfe9fa46ad7e3a8f38a7a894", "html_url": "https://github.com/rust-lang/rust/commit/f85fd8196827c191dfe9fa46ad7e3a8f38a7a894"}, {"sha": "01250fcec6c77552b0f7aac11ed833412294ccba", "url": "https://api.github.com/repos/rust-lang/rust/commits/01250fcec6c77552b0f7aac11ed833412294ccba", "html_url": "https://github.com/rust-lang/rust/commit/01250fcec6c77552b0f7aac11ed833412294ccba"}], "stats": {"total": 124, "additions": 123, "deletions": 1}, "files": [{"sha": "14e4e4da3b96dba97faa730aef9cb04391435b5c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=fe6b3a97921eb59502dfca13505e3ef68f5289bb", "patch": "@@ -428,6 +428,40 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns the contained [`Some`] value, consuming the `self` value,\n+    /// without checking that the value is not [`None`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on [`None`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x = Some(\"air\");\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\");\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, \"air\"); // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_some());\n+        match self {\n+            Some(val) => val,\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            None => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////"}, {"sha": "a43ba5882edcd704bbeabf6ca730eb3e2221631e", "filename": "library/core/src/result.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=fe6b3a97921eb59502dfca13505e3ef68f5289bb", "patch": "@@ -229,7 +229,7 @@\n \n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n use crate::ops::{self, Deref, DerefMut};\n-use crate::{convert, fmt};\n+use crate::{convert, fmt, hint};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -821,6 +821,74 @@ impl<T, E> Result<T, E> {\n             Err(e) => op(e),\n         }\n     }\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Err`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on an [`Err`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n+    /// ```\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_unchecked(self) -> T {\n+        debug_assert!(self.is_ok());\n+        match self {\n+            Ok(t) => t,\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            Err(_) => unsafe { hint::unreachable_unchecked() },\n+        }\n+    }\n+\n+    /// Returns the contained [`Err`] value, consuming the `self` value,\n+    /// without checking that the value is not an [`Ok`].\n+    ///\n+    /// # Safety\n+    ///\n+    /// Calling this method on an [`Ok`] is *[undefined behavior]*.\n+    ///\n+    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n+    /// ```\n+    ///\n+    /// ```\n+    /// #![feature(option_result_unwrap_unchecked)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[unstable(feature = \"option_result_unwrap_unchecked\", reason = \"newly added\", issue = \"81383\")]\n+    pub unsafe fn unwrap_err_unchecked(self) -> E {\n+        debug_assert!(self.is_err());\n+        match self {\n+            // SAFETY: the safety contract must be upheld by the caller.\n+            Ok(_) => unsafe { hint::unreachable_unchecked() },\n+            Err(e) => e,\n+        }\n+    }\n }\n \n impl<T: Copy, E> Result<&T, E> {"}, {"sha": "b7a406c30e91bcf169bbed5ed0e33bc267b49d58", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=fe6b3a97921eb59502dfca13505e3ef68f5289bb", "patch": "@@ -64,6 +64,7 @@\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n+#![feature(option_result_unwrap_unchecked)]\n #![feature(option_unwrap_none)]\n #![feature(peekable_next_if)]\n #![feature(peekable_peek_mut)]"}, {"sha": "9470451278cc4236ec34d47037458dba285d1bd6", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=fe6b3a97921eb59502dfca13505e3ef68f5289bb", "patch": "@@ -160,6 +160,13 @@ fn test_unwrap_or_else() {\n     assert_eq!(x.unwrap_or_else(|| 2), 2);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    assert_eq!(unsafe { Some(1).unwrap_unchecked() }, 1);\n+    let s = unsafe { Some(\"hello\".to_string()).unwrap_unchecked() };\n+    assert_eq!(s, \"hello\");\n+}\n+\n #[test]\n fn test_iter() {\n     let val = 5;"}, {"sha": "7aa44c6e593b3f6fa8a9807df30d420cdde98412", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6b3a97921eb59502dfca13505e3ef68f5289bb/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=fe6b3a97921eb59502dfca13505e3ef68f5289bb", "patch": "@@ -119,6 +119,18 @@ pub fn test_unwrap_or_else_panic() {\n     let _: isize = bad_err.unwrap_or_else(handler);\n }\n \n+#[test]\n+fn test_unwrap_unchecked() {\n+    let ok: Result<isize, &'static str> = Ok(100);\n+    assert_eq!(unsafe { ok.unwrap_unchecked() }, 100);\n+}\n+\n+#[test]\n+fn test_unwrap_err_unchecked() {\n+    let ok_err: Result<isize, &'static str> = Err(\"Err\");\n+    assert_eq!(unsafe { ok_err.unwrap_err_unchecked() }, \"Err\");\n+}\n+\n #[test]\n pub fn test_expect_ok() {\n     let ok: Result<isize, &'static str> = Ok(100);"}]}