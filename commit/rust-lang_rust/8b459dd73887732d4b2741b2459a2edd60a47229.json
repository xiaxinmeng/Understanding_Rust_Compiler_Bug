{"sha": "8b459dd73887732d4b2741b2459a2edd60a47229", "node_id": "C_kwDOAAsO6NoAKDhiNDU5ZGQ3Mzg4NzczMmQ0YjI3NDFiMjQ1OWEyZWRkNjBhNDcyMjk", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-15T20:01:44Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-15T20:02:50Z"}, "message": "Use span of ignored impls for explanatory note", "tree": {"sha": "db918f15a68a88690016816d7589428d7b9118a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db918f15a68a88690016816d7589428d7b9118a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b459dd73887732d4b2741b2459a2edd60a47229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b459dd73887732d4b2741b2459a2edd60a47229", "html_url": "https://github.com/rust-lang/rust/commit/8b459dd73887732d4b2741b2459a2edd60a47229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b459dd73887732d4b2741b2459a2edd60a47229/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd", "html_url": "https://github.com/rust-lang/rust/commit/bd1f09d417c8b0e460f90bcd23b9067d55f7f7dd"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "3e4e9f205a45c25f4e0a77aefeec3e08f84447c8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8b459dd73887732d4b2741b2459a2edd60a47229/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b459dd73887732d4b2741b2459a2edd60a47229/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=8b459dd73887732d4b2741b2459a2edd60a47229", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::middle::privacy;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use std::mem;\n \n // Any local node that may call something in its body block should be\n@@ -49,7 +50,9 @@ struct MarkSymbolVisitor<'tcx> {\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n     // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n-    ignored_derived_traits: FxHashMap<DefId, Vec<DefId>>,\n+    // and the span of their respective impl (i.e., part of the derive\n+    // macro)\n+    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -255,10 +258,12 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 if self.tcx.has_attr(trait_of, sym::rustc_trivial_field_reads) {\n                     let trait_ref = self.tcx.impl_trait_ref(impl_of).unwrap();\n                     if let ty::Adt(adt_def, _) = trait_ref.self_ty().kind() {\n+                        let impl_span = self.tcx.def_span(impl_of);\n                         if let Some(v) = self.ignored_derived_traits.get_mut(&adt_def.did) {\n-                            v.push(trait_of);\n+                            v.push((impl_span, trait_of));\n                         } else {\n-                            self.ignored_derived_traits.insert(adt_def.did, vec![trait_of]);\n+                            self.ignored_derived_traits\n+                                .insert(adt_def.did, vec![(impl_span, trait_of)]);\n                         }\n                     }\n                     return true;\n@@ -588,7 +593,7 @@ fn create_and_seed_worklist<'tcx>(\n fn find_live<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-) -> (FxHashSet<LocalDefId>, FxHashMap<DefId, Vec<DefId>>) {\n+) -> (FxHashSet<LocalDefId>, FxHashMap<DefId, Vec<(Span, DefId)>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n@@ -610,7 +615,7 @@ fn find_live<'tcx>(\n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_symbols: FxHashSet<LocalDefId>,\n-    ignored_derived_traits: FxHashMap<DefId, Vec<DefId>>,\n+    ignored_derived_traits: FxHashMap<DefId, Vec<(Span, DefId)>>,\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n@@ -683,26 +688,29 @@ impl<'tcx> DeadVisitor<'tcx> {\n                 let hir = self.tcx.hir();\n                 if let Some(encl_scope) = hir.get_enclosing_scope(id) {\n                     if let Some(encl_def_id) = hir.opt_local_def_id(encl_scope) {\n-                        if let Some(ign_traits) = self.ignored_derived_traits.get(&encl_def_id.to_def_id()) {\n+                        if let Some(ign_traits) =\n+                            self.ignored_derived_traits.get(&encl_def_id.to_def_id())\n+                        {\n                             let traits_str = ign_traits\n                                 .iter()\n-                                .map(|t| format!(\"`{}`\", self.tcx.item_name(*t))).collect::<Vec<_>>()\n+                                .map(|(_, t)| format!(\"`{}`\", self.tcx.item_name(*t)))\n+                                .collect::<Vec<_>>()\n                                 .join(\" and \");\n                             let plural_s = pluralize!(ign_traits.len());\n                             let article = if ign_traits.len() > 1 { \"\" } else { \"a \" };\n                             let is_are = if ign_traits.len() > 1 { \"these are\" } else { \"this is\" };\n-                            let msg = format!(\"`{}` has {}derived impl{} for the trait{} {}, but {} ignored during dead code analysis\",\n-                                              self.tcx.item_name(encl_def_id.to_def_id()),\n-                                              article,\n-                                              plural_s,\n-                                              plural_s,\n-                                              traits_str,\n-                                              is_are);\n-                            if let Some(span) = self.tcx.def_ident_span(encl_def_id) {\n-                                err.span_note(span, &msg);\n-                            } else {\n-                                err.note(&msg);\n-                            }\n+                            let msg = format!(\n+                                \"`{}` has {}derived impl{} for the trait{} {}, but {} \\\n+                                 intentionally ignored during dead code analysis\",\n+                                self.tcx.item_name(encl_def_id.to_def_id()),\n+                                article,\n+                                plural_s,\n+                                plural_s,\n+                                traits_str,\n+                                is_are\n+                            );\n+                            let multispan = ign_traits.iter().map(|(s, _)| *s).collect::<Vec<_>>();\n+                            err.span_note(multispan, &msg);\n                         }\n                     }\n                 }"}, {"sha": "2a44e56a3302c87054e9f145b4cc9e9d49521df2", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=8b459dd73887732d4b2741b2459a2edd60a47229", "patch": "@@ -5,11 +5,12 @@ LL |     Void(Void),\n    |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n-note: `Foo` has a derived impl for the trait `Debug`, but this is ignored during dead code analysis\n-  --> $DIR/derive-uninhabited-enum-38885.rs:11:6\n+note: `Foo` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/derive-uninhabited-enum-38885.rs:10:10\n    |\n-LL | enum Foo {\n-   |      ^^^\n+LL | #[derive(Debug)]\n+   |          ^^^^^\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "67bb574315a72331ccffe78954b15eab4418a34e", "filename": "src/test/ui/derives/clone-debug-dead-code.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fclone-debug-dead-code.stderr?ref=8b459dd73887732d4b2741b2459a2edd60a47229", "patch": "@@ -16,35 +16,38 @@ error: field is never read: `f`\n LL | struct B { f: () }\n    |            ^^^^^\n    |\n-note: `B` has a derived impl for the trait `Clone`, but this is ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:10:8\n+note: `B` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:9:10\n    |\n-LL | struct B { f: () }\n-   |        ^\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:14:12\n    |\n LL | struct C { f: () }\n    |            ^^^^^\n    |\n-note: `C` has a derived impl for the trait `Debug`, but this is ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:14:8\n+note: `C` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:13:10\n    |\n-LL | struct C { f: () }\n-   |        ^\n+LL | #[derive(Debug)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:18:12\n    |\n LL | struct D { f: () }\n    |            ^^^^^\n    |\n-note: `D` has derived impls for the traits `Clone` and `Debug`, but these are ignored during dead code analysis\n-  --> $DIR/clone-debug-dead-code.rs:18:8\n+note: `D` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\n+  --> $DIR/clone-debug-dead-code.rs:17:10\n    |\n-LL | struct D { f: () }\n-   |        ^\n+LL | #[derive(Debug,Clone)]\n+   |          ^^^^^ ^^^^^\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: field is never read: `f`\n   --> $DIR/clone-debug-dead-code.rs:21:12"}, {"sha": "3b5683a7748fa86ff795d874ff069ac8cd88305a", "filename": "src/test/ui/lint/dead-code/unused-variant.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b459dd73887732d4b2741b2459a2edd60a47229/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Funused-variant.stderr?ref=8b459dd73887732d4b2741b2459a2edd60a47229", "patch": "@@ -9,11 +9,12 @@ note: the lint level is defined here\n    |\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n-note: `Enum` has a derived impl for the trait `Clone`, but this is ignored during dead code analysis\n-  --> $DIR/unused-variant.rs:4:6\n+note: `Enum` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis\n+  --> $DIR/unused-variant.rs:3:10\n    |\n-LL | enum Enum {\n-   |      ^^^^\n+LL | #[derive(Clone)]\n+   |          ^^^^^\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}