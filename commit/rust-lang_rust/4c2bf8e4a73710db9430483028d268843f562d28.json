{"sha": "4c2bf8e4a73710db9430483028d268843f562d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmJmOGU0YTczNzEwZGI5NDMwNDgzMDI4ZDI2ODg0M2Y1NjJkMjg=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-23T22:06:11Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-23T23:23:11Z"}, "message": "The parser is represented by a class now.", "tree": {"sha": "97a233d108e534a28755d17378e067ba26e9c05d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97a233d108e534a28755d17378e067ba26e9c05d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2bf8e4a73710db9430483028d268843f562d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2bf8e4a73710db9430483028d268843f562d28", "html_url": "https://github.com/rust-lang/rust/commit/4c2bf8e4a73710db9430483028d268843f562d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2bf8e4a73710db9430483028d268843f562d28/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a16cb376ac214d1cb07b88292a9f81587ac1bc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a16cb376ac214d1cb07b88292a9f81587ac1bc1d", "html_url": "https://github.com/rust-lang/rust/commit/a16cb376ac214d1cb07b88292a9f81587ac1bc1d"}], "stats": {"total": 4483, "additions": 2237, "deletions": 2246}, "files": [{"sha": "2628be0109cac5dc16135ac4516a6ecade213f19", "filename": "src/librustsyntax/ext/qquote.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fqquote.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28", "patch": "@@ -49,7 +49,7 @@ impl of qq_helper for @ast::expr {\n         }\n     }\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_expr\"])\n+        mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_expr\"])\n     }\n     fn get_fold_fn() -> str {\"fold_expr\"}\n }\n@@ -90,7 +90,7 @@ impl of qq_helper for @ast::pat {\n     fn visit(cx: aq_ctxt, v: vt<aq_ctxt>) {visit_pat(self, cx, v);}\n     fn extract_mac() -> option<ast::mac_> {fail}\n     fn mk_parse_fn(cx: ext_ctxt, sp: span) -> @ast::expr {\n-        mk_path(cx, sp, [\"syntax\", \"parse\", \"parser\", \"parse_pat\"])\n+        mk_path(cx, sp, [\"syntax\", \"ext\", \"qquote\", \"parse_pat\"])\n     }\n     fn get_fold_fn() -> str {\"fold_pat\"}\n }\n@@ -154,29 +154,23 @@ fn expand_ast(ecx: ext_ctxt, _sp: span,\n \n     ret alt what {\n       \"crate\" {finish(ecx, body, parse_crate)}\n-      \"expr\" {finish(ecx, body, parser::parse_expr)}\n+      \"expr\" {finish(ecx, body, parse_expr)}\n       \"ty\" {finish(ecx, body, parse_ty)}\n       \"item\" {finish(ecx, body, parse_item)}\n       \"stmt\" {finish(ecx, body, parse_stmt)}\n-      \"pat\" {finish(ecx, body, parser::parse_pat)}\n+      \"pat\" {finish(ecx, body, parse_pat)}\n       _ {ecx.span_fatal(_sp, \"unsupported ast type\")}\n     };\n }\n \n-fn parse_crate(p: parser) -> @ast::crate {\n-    parser::parse_crate_mod(p, [])\n-}\n-\n-fn parse_ty(p: parser) -> @ast::ty {\n-    parser::parse_ty(p, false)\n-}\n-\n-fn parse_stmt(p: parser) -> @ast::stmt {\n-    parser::parse_stmt(p, [])\n-}\n+fn parse_crate(p: parser) -> @ast::crate { p.parse_crate_mod([]) }\n+fn parse_ty(p: parser) -> @ast::ty { p.parse_ty(false) }\n+fn parse_stmt(p: parser) -> @ast::stmt { p.parse_stmt([]) }\n+fn parse_expr(p: parser) -> @ast::expr { p.parse_expr() }\n+fn parse_pat(p: parser) -> @ast::pat { p.parse_pat() }\n \n fn parse_item(p: parser) -> @ast::item {\n-    alt parser::parse_item(p, [], ast::public) {\n+    alt p.parse_item([], ast::public) {\n       some(item) { item }\n       none       { fail \"parse_item: parsing an item failed\"; }\n     }"}, {"sha": "482dd5930d34ba556c36197b194398dea4ee9de7", "filename": "src/librustsyntax/parse.rs", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28", "patch": "@@ -46,13 +46,11 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n     let leading_attrs = attr::parse_inner_attrs_and_next(p);\n     let crate_attrs = leading_attrs.inner;\n     let first_cdir_attr = leading_attrs.next;\n-    let cdirs = parser::parse_crate_directives(\n-        p, token::EOF, first_cdir_attr);\n+    let cdirs = p.parse_crate_directives(token::EOF, first_cdir_attr);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     let cx =\n-        @{p: p,\n-          sess: sess,\n+        @{sess: sess,\n           cfg: p.cfg};\n     let (companionmod, _) = path::splitext(path::basename(input));\n     let (m, attrs) = eval::eval_crate_directives_to_mod(\n@@ -69,7 +67,7 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n                                 sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_file(sess, cfg, input, parser::SOURCE_FILE);\n-    let r = parser::parse_crate_mod(p, cfg);\n+    let r = p.parse_crate_mod(cfg);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n@@ -79,7 +77,7 @@ fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                                sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(\n         sess, cfg, name, codemap::fss_none, source);\n-    let r = parser::parse_crate_mod(p, cfg);\n+    let r = p.parse_crate_mod(cfg);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n@@ -89,7 +87,7 @@ fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> @ast::expr {\n     let p = new_parser_from_source_str(\n         sess, cfg, name, codemap::fss_none, source);\n-    let r = parser::parse_expr(p);\n+    let r = p.parse_expr();\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n@@ -100,7 +98,7 @@ fn parse_item_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n                               sess: parse_sess) -> option<@ast::item> {\n     let p = new_parser_from_source_str(\n         sess, cfg, name, codemap::fss_none, source);\n-    let r = parser::parse_item(p, attrs, vis);\n+    let r = p.parse_item(attrs, vis);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n@@ -130,23 +128,6 @@ fn next_node_id(sess: parse_sess) -> node_id {\n     ret rv;\n }\n \n-fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n-              ftype: parser::file_type) -> parser {\n-    let tok0 = lexer::next_token(rdr);\n-    let span0 = ast_util::mk_sp(tok0.chpos, rdr.chpos);\n-    @{sess: sess,\n-      cfg: cfg,\n-      file_type: ftype,\n-      mut token: tok0.tok,\n-      mut span: span0,\n-      mut last_span: span0,\n-      buffer: dvec::dvec(),\n-      mut restriction: parser::UNRESTRICTED,\n-      reader: rdr,\n-      keywords: token::keyword_table(),\n-      restricted_keywords: token::restricted_keyword_table()}\n-}\n-\n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               name: str, ss: codemap::file_substr,\n                               source: @str) -> parser {\n@@ -157,7 +138,7 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.span_diagnostic,\n                                 filemap, itr);\n-    ret new_parser(sess, cfg, rdr, ftype);\n+    ret parser(sess, cfg, rdr, ftype);\n }\n \n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n@@ -177,5 +158,5 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n     sess.cm.files.push(filemap);\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.span_diagnostic, filemap, itr);\n-    ret new_parser(sess, cfg, rdr, ftype);\n+    ret parser(sess, cfg, rdr, ftype);\n }"}, {"sha": "800efaff185c9e042e9c9a3c42f02b7c67244277", "filename": "src/librustsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fattr.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28", "patch": "@@ -4,8 +4,6 @@ import common::{parse_seq,\n                 seq_sep,\n                 expect,\n                 parse_ident};\n-import parser::{parse_lit,\n-                parse_syntax_ext_naked};\n \n export attr_or_ext;\n export parse_outer_attributes;\n@@ -31,7 +29,7 @@ fn parse_outer_attrs_or_ext(\n                     || p.look_ahead(1u) == token::LBRACKET\n                     || expect_item_next) {\n             p.bump();\n-            ret some(right(parse_syntax_ext_naked(p, lo)));\n+            ret some(right(p.parse_syntax_ext_naked(lo)));\n         } else { ret none; }\n     } else { ret none; }\n }\n@@ -97,7 +95,7 @@ fn parse_meta_item(p: parser) -> @ast::meta_item {\n     alt p.token {\n       token::EQ {\n         p.bump();\n-        let lit = parse_lit(p);\n+        let lit = p.parse_lit();\n         let mut hi = p.span.hi;\n         ret @spanned(lo, hi, ast::meta_name_value(ident, lit));\n       }\n@@ -115,7 +113,7 @@ fn parse_meta_item(p: parser) -> @ast::meta_item {\n \n fn parse_meta_seq(p: parser) -> [@ast::meta_item] {\n     ret parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n-                  parse_meta_item, p).node;\n+                  p, {|p| parse_meta_item(p)}).node;\n }\n \n fn parse_optional_meta(p: parser) -> [@ast::meta_item] {"}, {"sha": "19f436708c165761ae959565e9e6bd566de90d69", "filename": "src/librustsyntax/parse/common.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcommon.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28", "patch": "@@ -126,8 +126,7 @@ fn expect_gt(p: parser) {\n }\n \n fn parse_seq_to_before_gt<T: copy>(sep: option<token::token>,\n-                                  f: fn(parser) -> T,\n-                                  p: parser) -> [T] {\n+                                   p: parser, f: fn(parser) -> T) -> [T] {\n     let mut first = true;\n     let mut v = [];\n     while p.token != token::GT && p.token != token::BINOP(token::SHR) {\n@@ -142,27 +141,26 @@ fn parse_seq_to_before_gt<T: copy>(sep: option<token::token>,\n }\n \n fn parse_seq_to_gt<T: copy>(sep: option<token::token>,\n-                           f: fn(parser) -> T, p: parser) -> [T] {\n-    let v = parse_seq_to_before_gt(sep, f, p);\n+                            p: parser, f: fn(parser) -> T) -> [T] {\n+    let v = parse_seq_to_before_gt(sep, p, f);\n     expect_gt(p);\n \n     ret v;\n }\n \n fn parse_seq_lt_gt<T: copy>(sep: option<token::token>,\n-                           f: fn(parser) -> T,\n-                           p: parser) -> spanned<[T]> {\n+                            p: parser, f: fn(parser) -> T) -> spanned<[T]> {\n     let lo = p.span.lo;\n     expect(p, token::LT);\n-    let result = parse_seq_to_before_gt::<T>(sep, f, p);\n+    let result = parse_seq_to_before_gt::<T>(sep, p, f);\n     let hi = p.span.hi;\n     expect_gt(p);\n     ret spanned(lo, hi, result);\n }\n \n-fn parse_seq_to_end<T: copy>(ket: token::token, sep: seq_sep,\n-                            f: fn(parser) -> T, p: parser) -> [T] {\n-    let val = parse_seq_to_before_end(ket, sep, f, p);\n+fn parse_seq_to_end<T: copy>(ket: token::token, sep: seq_sep, p: parser,\n+                             f: fn(parser) -> T) -> [T] {\n+    let val = parse_seq_to_before_end(ket, sep, p, f);\n     p.bump();\n     ret val;\n }\n@@ -182,9 +180,8 @@ fn seq_sep_none() -> seq_sep {\n     ret {sep: option::none, trailing_opt: false};\n }\n \n-fn parse_seq_to_before_end<T: copy>(ket: token::token,\n-                                   sep: seq_sep,\n-                                   f: fn(parser) -> T, p: parser) -> [T] {\n+fn parse_seq_to_before_end<T: copy>(ket: token::token, sep: seq_sep,\n+                                    p: parser, f: fn(parser) -> T) -> [T] {\n     let mut first: bool = true;\n     let mut v: [T] = [];\n     while p.token != ket {\n@@ -198,12 +195,11 @@ fn parse_seq_to_before_end<T: copy>(ket: token::token,\n     ret v;\n }\n \n-fn parse_seq<T: copy>(bra: token::token, ket: token::token,\n-                     sep: seq_sep, f: fn(parser) -> T,\n-                     p: parser) -> spanned<[T]> {\n+fn parse_seq<T: copy>(bra: token::token, ket: token::token, sep: seq_sep,\n+                      p: parser, f: fn(parser) -> T) -> spanned<[T]> {\n     let lo = p.span.lo;\n     expect(p, bra);\n-    let result = parse_seq_to_before_end::<T>(ket, sep, f, p);\n+    let result = parse_seq_to_before_end::<T>(ket, sep, p, f);\n     let hi = p.span.hi;\n     p.bump();\n     ret spanned(lo, hi, result);"}, {"sha": "1e883083e9473fff79812efc92311b6771a605a7", "filename": "src/librustsyntax/parse/eval.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Feval.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28", "patch": "@@ -1,12 +1,10 @@\n-import parser::{parser,\n-                parse_mod_items, SOURCE_FILE};\n+import parser::{parser, SOURCE_FILE};\n import attr::parse_inner_attrs_and_next;\n \n export eval_crate_directives_to_mod;\n \n type ctx =\n-    @{p: parser,\n-      sess: parse::parse_sess,\n+    @{sess: parse::parse_sess,\n       cfg: ast::crate_cfg};\n \n fn eval_crate_directives(cx: ctx, cdirs: [@ast::crate_directive], prefix: str,\n@@ -66,11 +64,10 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option<str>)\n     #debug(\"looking for companion mod %s\", modpath);\n     if file_exists(modpath) {\n         #debug(\"found companion mod\");\n-        let p0 = new_parser_from_file(cx.sess, cx.cfg, modpath,\n-                                     SOURCE_FILE);\n+        let p0 = new_parser_from_file(cx.sess, cx.cfg, modpath, SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let first_item_outer_attrs = inner_attrs.next;\n-        let m0 = parse_mod_items(p0, token::EOF, first_item_outer_attrs);\n+        let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n         cx.sess.chpos = p0.reader.chpos;\n         cx.sess.byte_pos = cx.sess.byte_pos + p0.reader.pos;\n         ret (m0.view_items, m0.items, inner_attrs.inner);\n@@ -103,11 +100,10 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: str,\n         let inner_attrs = parse_inner_attrs_and_next(p0);\n         let mod_attrs = attrs + inner_attrs.inner;\n         let first_item_outer_attrs = inner_attrs.next;\n-        let m0 = parse_mod_items(p0, token::EOF, first_item_outer_attrs);\n+        let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n \n-        let i =\n-            parser::mk_item(p0, cdir.span.lo, cdir.span.hi, id,\n-                            ast::item_mod(m0), ast::public, mod_attrs);\n+        let i = p0.mk_item(cdir.span.lo, cdir.span.hi, id,\n+                           ast::item_mod(m0), ast::public, mod_attrs);\n         // Thread defids, chpos and byte_pos through the parsers\n         cx.sess.chpos = p0.reader.chpos;\n         cx.sess.byte_pos = cx.sess.byte_pos + p0.reader.pos;"}, {"sha": "c81d9ace37662c22637144270b322f5bbf986cec", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 2196, "deletions": 2170, "changes": 4366, "blob_url": "https://github.com/rust-lang/rust/blob/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2bf8e4a73710db9430483028d268843f562d28/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=4c2bf8e4a73710db9430483028d268843f562d28"}]}