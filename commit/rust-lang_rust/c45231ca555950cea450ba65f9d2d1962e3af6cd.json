{"sha": "c45231ca555950cea450ba65f9d2d1962e3af6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTIzMWNhNTU1OTUwY2VhNDUwYmE2NWY5ZDJkMTk2MmUzYWY2Y2Q=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-06-13T05:12:45Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-06-13T05:13:55Z"}, "message": "Revert heterogeneous SocketAddr PartialEq impls\n\nThese lead to inference regressions (mostly in tests) in code that looks\nlike:\n\n    let socket = std::net::SocketAddrV4::new(std::net::Ipv4Addr::new(127, 0, 0, 1), 8080);\n    assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n\nThat compiles as of stable 1.44.0 but fails in beta with:\n\n    error[E0284]: type annotations needed\n     --> src/main.rs:3:41\n      |\n    3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n      |                                         ^^^^^ cannot infer type for type parameter `F` declared on the associated function `parse`\n      |\n      = note: cannot satisfy `<_ as std::str::FromStr>::Err == _`\n    help: consider specifying the type argument in the method call\n      |\n    3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse::<F>().unwrap());\n      |", "tree": {"sha": "a05209f5e39d304c54c8c466fe307ea00acd84e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05209f5e39d304c54c8c466fe307ea00acd84e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45231ca555950cea450ba65f9d2d1962e3af6cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl7kYPIACgkQ+boUO5X/\nbYJYww/+MZP5Pj5N6A0BOwEnUgg/KGuEbHoAvF2RFyI3uuYyyWJ1elUp9iTcUEIR\nab5LPnd1r46AobKgdvRVvX72mbCfORLNv/cb/FP2AWyH4hbaIeWC/WMru9a301kt\nS2RnjwNLKYw0aFiy308G20MRq27ZKFBiSm09+x7GLV4gTZVlmJsQkDgKCrxVOWYy\njoL8eOBxA3r5pMF9INLBft+y58Lh4xYITPFk5jgYOEoPUpJhInAVlcAQ7iFCsH5P\nbgXXdQZwI2dZkYp5QuctJtEw8+9VeaHoyKJomlGFlSOQKJ3id4NuTOOU2tk5sqKX\nq1mqOG8LkN7uqyvcmbc+y3l0XzuRPJA/E0wW2xzgL4+hV5zKsyKD3FHbaOKqPkhF\nlKxtlBL19PxxTDwQyAppCyK4FL3TDKAA7kgjkkSTX24sY/FyePK0lDCCkAweoj/J\naDtRl4zQj5onP9TzOeVmPhR6JOFV9/RmgTzZKSzjQE4UrAAavziSyRBprrWcD5rC\nVKUJI8RLTLXHkm09PVV48aypse6vZ6akUCkLIpjiWscIJUxKjyyDNNrvkKIe9zr9\ncenXpOJIhiTo2yiTZ1NxO0HBCuHBAZFPpCL6ho4Cbfbo8PjooMB8Ic3aWAIjIw+f\nBilDU6ugUCnHE4vFZzIYHYX5cnmugt1YVLpOwG9u4JxFzlui4+M=\n=EHu3\n-----END PGP SIGNATURE-----", "payload": "tree a05209f5e39d304c54c8c466fe307ea00acd84e8\nparent 1fb612bd15bb3ef098fd24c20d0727de573b4410\nauthor David Tolnay <dtolnay@gmail.com> 1592025165 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1592025235 -0700\n\nRevert heterogeneous SocketAddr PartialEq impls\n\nThese lead to inference regressions (mostly in tests) in code that looks\nlike:\n\n    let socket = std::net::SocketAddrV4::new(std::net::Ipv4Addr::new(127, 0, 0, 1), 8080);\n    assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n\nThat compiles as of stable 1.44.0 but fails in beta with:\n\n    error[E0284]: type annotations needed\n     --> src/main.rs:3:41\n      |\n    3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse().unwrap());\n      |                                         ^^^^^ cannot infer type for type parameter `F` declared on the associated function `parse`\n      |\n      = note: cannot satisfy `<_ as std::str::FromStr>::Err == _`\n    help: consider specifying the type argument in the method call\n      |\n    3 |     assert_eq!(socket, \"127.0.0.1:8080\".parse::<F>().unwrap());\n      |\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45231ca555950cea450ba65f9d2d1962e3af6cd", "html_url": "https://github.com/rust-lang/rust/commit/c45231ca555950cea450ba65f9d2d1962e3af6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45231ca555950cea450ba65f9d2d1962e3af6cd/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb612bd15bb3ef098fd24c20d0727de573b4410", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410", "html_url": "https://github.com/rust-lang/rust/commit/1fb612bd15bb3ef098fd24c20d0727de573b4410"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "7e3c3e8f3042e2ea228c6de00599ef6cef16a988", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c45231ca555950cea450ba65f9d2d1962e3af6cd/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45231ca555950cea450ba65f9d2d1962e3af6cd/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c45231ca555950cea450ba65f9d2d1962e3af6cd", "patch": "@@ -694,42 +694,6 @@ impl PartialEq for SocketAddrV6 {\n             && self.inner.sin6_scope_id == other.inner.sin6_scope_id\n     }\n }\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddrV4> for SocketAddr {\n-    fn eq(&self, other: &SocketAddrV4) -> bool {\n-        match self {\n-            SocketAddr::V4(v4) => v4 == other,\n-            SocketAddr::V6(_) => false,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddrV6> for SocketAddr {\n-    fn eq(&self, other: &SocketAddrV6) -> bool {\n-        match self {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(v6) => v6 == other,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddr> for SocketAddrV4 {\n-    fn eq(&self, other: &SocketAddr) -> bool {\n-        match other {\n-            SocketAddr::V4(v4) => self == v4,\n-            SocketAddr::V6(_) => false,\n-        }\n-    }\n-}\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialEq<SocketAddr> for SocketAddrV6 {\n-    fn eq(&self, other: &SocketAddr) -> bool {\n-        match other {\n-            SocketAddr::V4(_) => false,\n-            SocketAddr::V6(v6) => self == v6,\n-        }\n-    }\n-}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Eq for SocketAddrV4 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1242,12 +1206,8 @@ mod tests {\n         // equality\n         assert_eq!(v4_1, v4_1);\n         assert_eq!(v6_1, v6_1);\n-        assert_eq!(v4_1, SocketAddr::V4(v4_1));\n-        assert_eq!(v6_1, SocketAddr::V6(v6_1));\n         assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n         assert_eq!(SocketAddr::V6(v6_1), SocketAddr::V6(v6_1));\n-        assert!(v4_1 != SocketAddr::V6(v6_1));\n-        assert!(v6_1 != SocketAddr::V4(v4_1));\n         assert!(v4_1 != v4_2);\n         assert!(v6_1 != v6_2);\n "}]}