{"sha": "354f19cf2475148994954b6783341620c7445071", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NGYxOWNmMjQ3NTE0ODk5NDk1NGI2NzgzMzQxNjIwYzc0NDUwNzE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-12T21:53:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T21:53:33Z"}, "message": "Rollup merge of #81850 - the8472:env-rwlock, r=m-ou-se\n\nuse RWlock when accessing os::env\n\nMultiple threads modifying the current process environment is fairly uncommon. Optimize for the more common read case.\n\nr? ````@m-ou-se````", "tree": {"sha": "dfeccba709d7f160cf81601bd8acbad1e645a384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfeccba709d7f160cf81601bd8acbad1e645a384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/354f19cf2475148994954b6783341620c7445071", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJvjeCRBK7hj4Ov3rIwAAdHIIAHEo4Cf+d3AEdGNJf6zSxEjG\nbOvxlgTgjo1FrazoR8ntj071BmYBfdWPx528R4Fv+R1TYEU3IVePbOhHQdA5RRAt\nvF5d4FbD+CfZz31bqgrMLApUb29pqk97GjipigaXXqkBTwWxeCZdtri2QZhV5d75\niHz/Wa/CIiVkIw0edYcYiENYAxr7c0Q7/2Z3vhZ0Ni13nNZ1kOij6Fv874CWK6p9\n7q9SMot3hVI8IHWml3bkBZEdNmg438uIkWRFho0mUm1aVi+HxayQre0GRO2CEaRt\ngq3TwdzSXhpxsl7OGYYVdSKtp/oHAYAj06XJRGeLt5sW3C413MTeNsOPhI3x0lc=\n=8ejp\n-----END PGP SIGNATURE-----\n", "payload": "tree dfeccba709d7f160cf81601bd8acbad1e645a384\nparent 0cfba2fd090834c909d5ed9deccdee8170da791b\nparent 4fc181dd62f38c7b424e5261756a2f01ded68a5b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613166813 +0100\ncommitter GitHub <noreply@github.com> 1613166813 +0100\n\nRollup merge of #81850 - the8472:env-rwlock, r=m-ou-se\n\nuse RWlock when accessing os::env\n\nMultiple threads modifying the current process environment is fairly uncommon. Optimize for the more common read case.\n\nr? ````@m-ou-se````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/354f19cf2475148994954b6783341620c7445071", "html_url": "https://github.com/rust-lang/rust/commit/354f19cf2475148994954b6783341620c7445071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/354f19cf2475148994954b6783341620c7445071/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cfba2fd090834c909d5ed9deccdee8170da791b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cfba2fd090834c909d5ed9deccdee8170da791b", "html_url": "https://github.com/rust-lang/rust/commit/0cfba2fd090834c909d5ed9deccdee8170da791b"}, {"sha": "4fc181dd62f38c7b424e5261756a2f01ded68a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc181dd62f38c7b424e5261756a2f01ded68a5b", "html_url": "https://github.com/rust-lang/rust/commit/4fc181dd62f38c7b424e5261756a2f01ded68a5b"}], "stats": {"total": 84, "additions": 72, "deletions": 12}, "files": [{"sha": "1d1118aa694347d285a59dcbd4c45bf10f32812f", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=354f19cf2475148994954b6783341620c7445071", "patch": "@@ -22,6 +22,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n+use crate::sys_common::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -490,20 +491,20 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n     extern \"C\" {\n         static mut environ: *const *const c_char;\n     }\n-    &mut environ\n+    ptr::addr_of_mut!(environ)\n }\n \n-pub unsafe fn env_lock() -> StaticMutexGuard {\n-    // It is UB to attempt to acquire this mutex reentrantly!\n-    static ENV_LOCK: StaticMutex = StaticMutex::new();\n-    ENV_LOCK.lock()\n+static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n+\n+pub fn env_read_lock() -> RWLockReadGuard {\n+    ENV_LOCK.read_with_guard()\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the\n /// environment variables of the current process.\n pub fn env() -> Env {\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let mut environ = *environ();\n         let mut result = Vec::new();\n         if !environ.is_null() {\n@@ -540,7 +541,7 @@ pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n     // always None as well\n     let k = CString::new(k.as_bytes())?;\n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n         let ret = if s.is_null() {\n             None\n@@ -556,7 +557,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n@@ -565,7 +566,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = env_lock();\n+        let _guard = ENV_LOCK.write_with_guard();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }"}, {"sha": "9e82df7755e89c5d58240e4ddee91ac122c0aad1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=354f19cf2475148994954b6783341620c7445071", "patch": "@@ -47,7 +47,7 @@ impl Command {\n         // a lock any more because the parent won't do anything and the child is\n         // in its own process.\n         let result = unsafe {\n-            let _env_lock = sys::os::env_lock();\n+            let _env_lock = sys::os::env_read_lock();\n             cvt(libc::fork())?\n         };\n \n@@ -124,7 +124,7 @@ impl Command {\n                     // Similar to when forking, we want to ensure that access to\n                     // the environment is synchronized, so make sure to grab the\n                     // environment lock before we try to exec.\n-                    let _lock = sys::os::env_lock();\n+                    let _lock = sys::os::env_read_lock();\n \n                     let Err(e) = self.do_exec(theirs, envp.as_ref());\n                     e\n@@ -404,7 +404,7 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n-            let _env_lock = sys::os::env_lock();\n+            let _env_lock = sys::os::env_read_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n             cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,"}, {"sha": "41e8ad772946388da8fafb48f1ecf66bfbc31d7b", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354f19cf2475148994954b6783341620c7445071/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=354f19cf2475148994954b6783341620c7445071", "patch": "@@ -86,3 +86,62 @@ impl RWLock {\n         self.0.destroy()\n     }\n }\n+\n+// the cfg annotations only exist due to dead code warnings. the code itself is portable\n+#[cfg(unix)]\n+pub struct StaticRWLock(RWLock);\n+\n+#[cfg(unix)]\n+impl StaticRWLock {\n+    pub const fn new() -> StaticRWLock {\n+        StaticRWLock(RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.read();\n+        }\n+        RWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n+        // Safety: All methods require static references, therefore self\n+        // cannot be moved between invocations.\n+        unsafe {\n+            self.0.write();\n+        }\n+        RWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockReadGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockReadGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.read_unlock() }\n+    }\n+}\n+\n+#[cfg(unix)]\n+pub struct RWLockWriteGuard(&'static RWLock);\n+\n+#[cfg(unix)]\n+impl Drop for RWLockWriteGuard {\n+    fn drop(&mut self) {\n+        unsafe { self.0.write_unlock() }\n+    }\n+}"}]}