{"sha": "d7aff960538bf3cadd66556ecedc87fa685492d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YWZmOTYwNTM4YmYzY2FkZDY2NTU2ZWNlZGM4N2ZhNjg1NDkyZDU=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-06T03:22:25Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-06-06T03:22:25Z"}, "message": "Remove 2 tests", "tree": {"sha": "18f7c3c6b5a78dc02395595b8bf0c082afefb797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f7c3c6b5a78dc02395595b8bf0c082afefb797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7aff960538bf3cadd66556ecedc87fa685492d5", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYLw/cRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLi94wD/aWmhegOD3e8pnkKXwoIEk29KYU4u\naH2FHWmrEv/5j3kBAL9phhkZfbE7bW/4Ctw3LBa9yuuQUcmtNqSEsbdM6RME\n=Hz/n\n-----END PGP SIGNATURE-----", "payload": "tree 18f7c3c6b5a78dc02395595b8bf0c082afefb797\nparent 3871c493b24b00c2b3d11af5aef8bb0045dd7469\nauthor hyd-dev <yd-huang@outlook.com> 1622949745 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1622949745 +0800\n\nRemove 2 tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7aff960538bf3cadd66556ecedc87fa685492d5", "html_url": "https://github.com/rust-lang/rust/commit/d7aff960538bf3cadd66556ecedc87fa685492d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7aff960538bf3cadd66556ecedc87fa685492d5/comments", "author": null, "committer": null, "parents": [{"sha": "3871c493b24b00c2b3d11af5aef8bb0045dd7469", "url": "https://api.github.com/repos/rust-lang/rust/commits/3871c493b24b00c2b3d11af5aef8bb0045dd7469", "html_url": "https://github.com/rust-lang/rust/commit/3871c493b24b00c2b3d11af5aef8bb0045dd7469"}], "stats": {"total": 51, "additions": 0, "deletions": 51}, "files": [{"sha": "4fd5f4b7d885f9aa7e71506b28d58c879c4a6c51", "filename": "tests/compile-fail/unsupported_get_process_heap.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_get_process_heap.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -1,12 +0,0 @@\n-//! `GetProcessHeap()` is special on Windows that it's only supported within libstd.\n-//! (On Linux and macOS, it's just always unsupported.)\n-\n-fn main() {\n-    extern \"system\" {\n-        fn GetProcessHeap() -> *mut std::ffi::c_void;\n-    }\n-    unsafe {\n-        GetProcessHeap();\n-        //~^ ERROR unsupported operation: can't call foreign function: GetProcessHeap\n-    }\n-}"}, {"sha": "959103ee5c8e7d42823041c77c4ccbe99703872e", "filename": "tests/run-pass/std_only_foreign_function.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3871c493b24b00c2b3d11af5aef8bb0045dd7469/tests%2Frun-pass%2Fstd_only_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3871c493b24b00c2b3d11af5aef8bb0045dd7469/tests%2Frun-pass%2Fstd_only_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd_only_foreign_function.rs?ref=3871c493b24b00c2b3d11af5aef8bb0045dd7469", "patch": "@@ -1,39 +0,0 @@\n-//! Make sure we can call foreign functions that are only allowed within libstd if we are \"libstd\"\n-//! (defining the `start` lang item).\n-#![feature(lang_items, rustc_private, core_intrinsics)]\n-#![no_std]\n-\n-use core::{intrinsics, panic::PanicInfo};\n-\n-#[lang = \"eh_personality\"]\n-fn rust_eh_personality() {}\n-\n-#[panic_handler]\n-fn panic_handler(_: &PanicInfo<'_>) -> ! {\n-    intrinsics::abort()\n-}\n-\n-#[lang = \"start\"]\n-fn start(main: fn(), _argc: isize, _argv: *const *const u8) -> isize {\n-    main();\n-    0\n-}\n-\n-fn main() {\n-    #[cfg(unix)]\n-    unsafe {\n-        extern crate libc;\n-        assert_eq!(libc::signal(libc::SIGPIPE, libc::SIG_IGN), 0);\n-    }\n-    #[cfg(windows)]\n-    unsafe {\n-        extern \"system\" {\n-            fn GetProcessHeap() -> *mut core::ffi::c_void;\n-            fn ExitProcess(code: u32) -> !;\n-        }\n-        assert_eq!(GetProcessHeap() as usize, 1);\n-        // Early exit to avoid the requirement of\n-        // `std::sys::windows::thread_local_key::p_thread_callback`.\n-        ExitProcess(0);\n-    }\n-}"}]}