{"sha": "85b081b65aa36e0d7cbdfba7cd705517563c0bd4", "node_id": "C_kwDOAAsO6NoAKDg1YjA4MWI2NWFhMzZlMGQ3Y2JkZmJhN2NkNzA1NTE3NTYzYzBiZDQ", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-04-06T12:44:54Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-04-06T12:44:54Z"}, "message": "code refractor for `[needless_match]`", "tree": {"sha": "3760d6c6eee37440c2f668f5040742d461cf9291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3760d6c6eee37440c2f668f5040742d461cf9291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85b081b65aa36e0d7cbdfba7cd705517563c0bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85b081b65aa36e0d7cbdfba7cd705517563c0bd4", "html_url": "https://github.com/rust-lang/rust/commit/85b081b65aa36e0d7cbdfba7cd705517563c0bd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85b081b65aa36e0d7cbdfba7cd705517563c0bd4/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448a26d6960d9a4902db59a57b61ed0586933dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/448a26d6960d9a4902db59a57b61ed0586933dfd", "html_url": "https://github.com/rust-lang/rust/commit/448a26d6960d9a4902db59a57b61ed0586933dfd"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "2105a03e03a301cb8cca7aba53623766dd1fdc6e", "filename": "clippy_lints/src/matches/needless_match.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85b081b65aa36e0d7cbdfba7cd705517563c0bd4/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85b081b65aa36e0d7cbdfba7cd705517563c0bd4/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fneedless_match.rs?ref=85b081b65aa36e0d7cbdfba7cd705517563c0bd4", "patch": "@@ -3,12 +3,12 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{\n-    eq_expr_value, get_parent_expr_for_hir, get_parent_node, higher, is_else_clause, is_lang_ctor,\n+    eq_expr_value, get_parent_expr_for_hir, get_parent_node, higher, is_else_clause, is_lang_ctor, over,\n     peel_blocks_with_stmt,\n };\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Node, Pat, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{Arm, BindingAnnotation, Expr, ExprKind, FnRetTy, Node, Pat, PatKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_span::sym;\n use rustc_typeck::hir_ty_to_ty;\n@@ -157,8 +157,9 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n         // Example: `Some(val) => Some(val)`\n         (PatKind::TupleStruct(QPath::Resolved(_, path), tuple_params, _), ExprKind::Call(call_expr, call_params)) => {\n             if let ExprKind::Path(QPath::Resolved(_, call_path)) = call_expr.kind {\n-                return same_segments(path.segments, call_path.segments)\n-                    && same_non_ref_symbols(tuple_params, call_params);\n+                return over(path.segments, call_path.segments, |pat_seg, call_seg| {\n+                    pat_seg.ident.name == call_seg.ident.name\n+                }) && same_non_ref_symbols(tuple_params, call_params);\n             }\n         },\n         // Example: `val => val`\n@@ -177,7 +178,9 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n         },\n         // Example: `Custom::TypeA => Custom::TypeB`, or `None => None`\n         (PatKind::Path(QPath::Resolved(_, p_path)), ExprKind::Path(QPath::Resolved(_, e_path))) => {\n-            return same_segments(p_path.segments, e_path.segments);\n+            return over(p_path.segments, e_path.segments, |p_seg, e_seg| {\n+                p_seg.ident.name == e_seg.ident.name\n+            });\n         },\n         // Example: `5 => 5`\n         (PatKind::Lit(pat_lit_expr), ExprKind::Lit(expr_spanned)) => {\n@@ -191,20 +194,6 @@ fn pat_same_as_expr(pat: &Pat<'_>, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-fn same_segments(left_segs: &[PathSegment<'_>], right_segs: &[PathSegment<'_>]) -> bool {\n-    if left_segs.len() != right_segs.len() {\n-        return false;\n-    }\n-\n-    for i in 0..left_segs.len() {\n-        if left_segs[i].ident.name != right_segs[i].ident.name {\n-            return false;\n-        }\n-    }\n-\n-    true\n-}\n-\n fn same_non_ref_symbols(pats: &[Pat<'_>], exprs: &[Expr<'_>]) -> bool {\n     if pats.len() != exprs.len() {\n         return false;"}]}