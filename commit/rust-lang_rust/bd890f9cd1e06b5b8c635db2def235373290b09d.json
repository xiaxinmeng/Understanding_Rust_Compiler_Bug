{"sha": "bd890f9cd1e06b5b8c635db2def235373290b09d", "node_id": "C_kwDOAAsO6NoAKGJkODkwZjljZDFlMDZiNWI4YzYzNWRiMmRlZjIzNTM3MzI5MGIwOWQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-26T01:16:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-26T01:16:54Z"}, "message": "Remove redundant clone suggestion", "tree": {"sha": "573c30a7c1b61c01cd7c2298f90d6a0479ea2faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/573c30a7c1b61c01cd7c2298f90d6a0479ea2faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd890f9cd1e06b5b8c635db2def235373290b09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd890f9cd1e06b5b8c635db2def235373290b09d", "html_url": "https://github.com/rust-lang/rust/commit/bd890f9cd1e06b5b8c635db2def235373290b09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd890f9cd1e06b5b8c635db2def235373290b09d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a", "html_url": "https://github.com/rust-lang/rust/commit/2d6a2ff76ee9443d4fb0f611e66ef2d72954ac8a"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "3f6acf5f5d108206026116670031b7b4b80a82d2", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd890f9cd1e06b5b8c635db2def235373290b09d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd890f9cd1e06b5b8c635db2def235373290b09d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=bd890f9cd1e06b5b8c635db2def235373290b09d", "patch": "@@ -194,7 +194,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 if !seen_spans.contains(&move_span) {\n                     if !closure {\n-                        self.suggest_ref_or_clone(mpi, move_span, &mut err, &mut in_pattern);\n+                        self.suggest_ref_or_clone(\n+                            mpi,\n+                            move_span,\n+                            &mut err,\n+                            &mut in_pattern,\n+                            move_spans,\n+                        );\n                     }\n \n                     self.explain_captures(\n@@ -312,6 +318,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_span: Span,\n         err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n         in_pattern: &mut bool,\n+        move_spans: UseSpans<'_>,\n     ) {\n         struct ExpressionFinder<'hir> {\n             expr_span: Span,\n@@ -440,6 +447,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         ) = call_expr.kind\n                     {\n                         // Do not suggest `.clone()` in a `for` loop, we already suggest borrowing.\n+                    } else if let UseSpans::FnSelfUse {\n+                        kind: CallKind::Normal { .. },\n+                        ..\n+                    } = move_spans {\n+                        // We already suggest cloning for these cases in `explain_captures`.\n                     } else {\n                         self.suggest_cloning(err, ty, move_span);\n                     }"}, {"sha": "17bea2f366fa02bef3e48b32f6844ab712f77be9", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=bd890f9cd1e06b5b8c635db2def235373290b09d", "patch": "@@ -12,10 +12,6 @@ LL |         println!(\"{:?}\", some_vec);\n note: `into_iter` takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     some_vec.clone().into_iter();\n-   |             ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     some_vec.clone().into_iter();"}, {"sha": "7f69e5dcfb784db1ea80cf0b567fe483007f5bc6", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=bd890f9cd1e06b5b8c635db2def235373290b09d", "patch": "@@ -97,10 +97,6 @@ note: `Foo::use_rc_self` takes ownership of the receiver `self`, which moves `rc\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n    |                    ^^^^\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     rc_foo.clone().use_rc_self();\n-   |           ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     rc_foo.clone().use_rc_self();\n@@ -144,10 +140,6 @@ LL |     for _val in explicit_into_iter.into_iter() {}\n LL |     explicit_into_iter;\n    |     ^^^^^^^^^^^^^^^^^^ value used here after move\n    |\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     for _val in explicit_into_iter.clone().into_iter() {}\n-   |                                   ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     for _val in explicit_into_iter.clone().into_iter() {}"}, {"sha": "a28f324aafac9ab17f0719b627b20ebedd96a0aa", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=bd890f9cd1e06b5b8c635db2def235373290b09d", "patch": "@@ -10,10 +10,6 @@ LL |     touch(&x[0]);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     consume(x.clone().into_iter().next().unwrap());\n-   |              ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     consume(x.clone().into_iter().next().unwrap());"}, {"sha": "ab7c27456882fdbcaaf79ba1b686a0ce7da46485", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd890f9cd1e06b5b8c635db2def235373290b09d/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=bd890f9cd1e06b5b8c635db2def235373290b09d", "patch": "@@ -162,10 +162,6 @@ LL |     touch(&x);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     let _y = x.clone().into_iter().next().unwrap();\n-   |               ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     let _y = x.clone().into_iter().next().unwrap();\n@@ -183,10 +179,6 @@ LL |     touch(&x);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n-   |\n-LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n-   |                ++++++++\n help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];"}]}