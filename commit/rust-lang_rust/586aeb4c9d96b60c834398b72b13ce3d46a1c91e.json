{"sha": "586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NmFlYjRjOWQ5NmI2MGM4MzQzOThiNzJiMTNjZTNkNDZhMWM5MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-03T12:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-03T12:27:01Z"}, "message": "Rollup merge of #64058 - phansch:refactor_out_method, r=estebank\n\nlibrustc_errors: Extract sugg/subst handling into method\n\nAn initial refactoring before working on #61809.\n\nThis moves the whole block into a method so that it can be reused in the\nannotate-snippet emitter. The method is already used in the new emitter, but\nthere's no UI tests with suggestions included in this PR.\n\nA first look at some UI tests with suggestions showed that there's some\nmore work to do in [annotate-snippet-rs][annotate-snippet-rs] before the new output is closer to the\ncurrent one, so I opted to do that in a second step.\n\nr? @estebank\n\n[annotate-snippet-rs]: https://github.com/rust-lang/annotate-snippets-rs", "tree": {"sha": "5685e1149ace3ab43eefa5ceb148ba1700397bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5685e1149ace3ab43eefa5ceb148ba1700397bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdblwWCRBK7hj4Ov3rIwAAdHIIALMXt9pCgAqaG5tTHk3rY+C6\n7CokxYetv0M6LR1vyS+VxL23y8rGoxf3/EvyIP6dwIQcN5N+zaaGp4OSf7t+8m/z\nnaGgUxxyXtCtStuWEI/QnWTPrPdAm5nU75Z0Wf8KlbUm50LVRqewDnbzCB/hMlmz\nXS20Ge0PSzkRtL/GprfWt9U5GqSf106e/fkDbWmGxtBhZBbsXOGGWVF95IP/H82J\nT+XkL4LgoRkSc33uNw20lRSx/7kO6FfAZYQuxukVWH+HA/axX+QM2QcbeEuFWcCi\nsZgt3BHFOCOYjd8CAtLRlitaX4kfadwAI5A9TpeculvY7idGnGgaIppfbojN0CY=\n=dKA1\n-----END PGP SIGNATURE-----\n", "payload": "tree 5685e1149ace3ab43eefa5ceb148ba1700397bfb\nparent 56d00e388b3e55352340b5c2235992fdaf1d26d7\nparent 84ccbe2076cf37bc13c32a89ccc57a57281b8708\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567513621 +0200\ncommitter GitHub <noreply@github.com> 1567513621 +0200\n\nRollup merge of #64058 - phansch:refactor_out_method, r=estebank\n\nlibrustc_errors: Extract sugg/subst handling into method\n\nAn initial refactoring before working on #61809.\n\nThis moves the whole block into a method so that it can be reused in the\nannotate-snippet emitter. The method is already used in the new emitter, but\nthere's no UI tests with suggestions included in this PR.\n\nA first look at some UI tests with suggestions showed that there's some\nmore work to do in [annotate-snippet-rs][annotate-snippet-rs] before the new output is closer to the\ncurrent one, so I opted to do that in a second step.\n\nr? @estebank\n\n[annotate-snippet-rs]: https://github.com/rust-lang/annotate-snippets-rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "html_url": "https://github.com/rust-lang/rust/commit/586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586aeb4c9d96b60c834398b72b13ce3d46a1c91e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d00e388b3e55352340b5c2235992fdaf1d26d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d00e388b3e55352340b5c2235992fdaf1d26d7", "html_url": "https://github.com/rust-lang/rust/commit/56d00e388b3e55352340b5c2235992fdaf1d26d7"}, {"sha": "84ccbe2076cf37bc13c32a89ccc57a57281b8708", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ccbe2076cf37bc13c32a89ccc57a57281b8708", "html_url": "https://github.com/rust-lang/rust/commit/84ccbe2076cf37bc13c32a89ccc57a57281b8708"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "3bed5d81dc514fcac7c3c96c16ff2e9d8c83ecd1", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/586aeb4c9d96b60c834398b72b13ce3d46a1c91e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586aeb4c9d96b60c834398b72b13ce3d46a1c91e/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "patch": "@@ -30,10 +30,8 @@ pub struct AnnotateSnippetEmitterWriter {\n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n     fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n-        let primary_span = db.span.clone();\n         let children = db.children.clone();\n-        // FIXME(#59346): Collect suggestions (see emitter.rs)\n-        let suggestions: &[_] = &[];\n+        let (primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         // FIXME(#59346): Add `fix_multispans_in_std_macros` function from emitter.rs\n "}, {"sha": "a298f9958f2d1258be61208a043e4dabe1fa644a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/586aeb4c9d96b60c834398b72b13ce3d46a1c91e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586aeb4c9d96b60c834398b72b13ce3d46a1c91e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=586aeb4c9d96b60c834398b72b13ce3d46a1c91e", "patch": "@@ -191,16 +191,25 @@ pub trait Emitter {\n     fn should_show_explain(&self) -> bool {\n         true\n     }\n-}\n \n-impl Emitter for EmitterWriter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    /// Formats the substitutions of the primary_span\n+    ///\n+    /// The are a lot of conditions to this method, but in short:\n+    ///\n+    /// * If the current `Diagnostic` has only one visible `CodeSuggestion`,\n+    ///   we format the `help` suggestion depending on the content of the\n+    ///   substitutions. In that case, we return the modified span only.\n+    ///\n+    /// * If the current `Diagnostic` has multiple suggestions,\n+    ///   we return the original `primary_span` and the original suggestions.\n+    fn primary_span_formatted<'a>(\n+        &mut self,\n+        db: &'a DiagnosticBuilder<'_>\n+    ) -> (MultiSpan, &'a [CodeSuggestion]) {\n         let mut primary_span = db.span.clone();\n-        let mut children = db.children.clone();\n-        let mut suggestions: &[_] = &[];\n-\n         if let Some((sugg, rest)) = db.suggestions.split_first() {\n             if rest.is_empty() &&\n+               // ^ if there is only one suggestion\n                // don't display multi-suggestions as labels\n                sugg.substitutions.len() == 1 &&\n                // don't display multipart suggestions as labels\n@@ -216,21 +225,34 @@ impl Emitter for EmitterWriter {\n             {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n                 let msg = if substitution.len() == 0 || sugg.style.hide_inline() {\n-                    // This substitution is only removal or we explicitly don't want to show the\n-                    // code inline, don't show it\n+                    // This substitution is only removal OR we explicitly don't want to show the\n+                    // code inline (`hide_inline`). Therefore, we don't show the substitution.\n                     format!(\"help: {}\", sugg.msg)\n                 } else {\n+                    // Show the default suggestion text with the substitution\n                     format!(\"help: {}: `{}`\", sugg.msg, substitution)\n                 };\n                 primary_span.push_span_label(sugg.substitutions[0].parts[0].span, msg);\n+\n+                // We return only the modified primary_span\n+                (primary_span, &[])\n             } else {\n                 // if there are multiple suggestions, print them all in full\n                 // to be consistent. We could try to figure out if we can\n                 // make one (or the first one) inline, but that would give\n                 // undue importance to a semi-random suggestion\n-                suggestions = &db.suggestions;\n+                (primary_span, &db.suggestions)\n             }\n+        } else {\n+            (primary_span, &db.suggestions)\n         }\n+    }\n+}\n+\n+impl Emitter for EmitterWriter {\n+    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+        let mut children = db.children.clone();\n+        let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         self.fix_multispans_in_std_macros(&mut primary_span,\n                                           &mut children,"}]}