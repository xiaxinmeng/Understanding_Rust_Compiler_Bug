{"sha": "614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNGY3NzM4YmE2NWFjMzdmMmRjNjFhZmE4YzY4ZmMzNzY4ZmRmZmM=", "commit": {"author": {"name": "Poliorcetics", "email": "poliorcetics@users.noreply.github.com", "date": "2020-06-30T09:14:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-30T09:14:45Z"}, "message": "Clarify some parts by applying the suggestions from review\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>", "tree": {"sha": "9b1ff10b16d24763fb4e2372f5a9c90d335ea4c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1ff10b16d24763fb4e2372f5a9c90d335ea4c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+wKFCRBK7hj4Ov3rIwAAdHIIACpp1wbMcWRyfFjsWcpug9Q2\n2ZRYsMOv46nKZYztCLZAzL/3Ad4SkJTb3BFMQENbX+1u62EuWJFAMrQB8uo6EcUO\nNNpSPdQWWaibrGHFWZTeHI2hgURBrmLEa0mJvLHGe05aERylV/kqejcunaKnAIl+\noxcApLdfrASQ9pUkvXbuBLEDmPqvSZQ1wiwHyLGBaadkSXhoV9QctBJnqIvDQWRG\nod5GGgP5Nb5ncCmRpN72W44wmdRkhHGj/rgwa03wlAV4jbnBBYhUmNMjcYPwIALj\nME6SDrbYIl2RO8QmjxXcpfwMDOgD+J9hudMRmgk2QSR7s4PnvnWI4JlTDhyCsMk=\n=BGxk\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b1ff10b16d24763fb4e2372f5a9c90d335ea4c3\nparent 2e21af2859854668448ac96f335986a19011e571\nauthor Poliorcetics <poliorcetics@users.noreply.github.com> 1593508485 +0200\ncommitter GitHub <noreply@github.com> 1593508485 +0200\n\nClarify some parts by applying the suggestions from review\n\nCo-authored-by: Josh Triplett <josh@joshtriplett.org>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "html_url": "https://github.com/rust-lang/rust/commit/614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/614f7738ba65ac37f2dc61afa8c68fc3768fdffc/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e21af2859854668448ac96f335986a19011e571", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e21af2859854668448ac96f335986a19011e571", "html_url": "https://github.com/rust-lang/rust/commit/2e21af2859854668448ac96f335986a19011e571"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "51b21ce572a3f79551b6c03ab8fd57538c125fb4", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/614f7738ba65ac37f2dc61afa8c68fc3768fdffc/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/614f7738ba65ac37f2dc61afa8c68fc3768fdffc/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=614f7738ba65ac37f2dc61afa8c68fc3768fdffc", "patch": "@@ -1625,9 +1625,9 @@ mod dyn_keyword {}\n /// The [Rust equivalent of a C-style union][union].\n ///\n /// A `union` looks like a [`struct`] in terms of declaration, but all of its\n-/// fields exist simultaneously, superimposed over one another. For instance,\n+/// fields exist in the same memory, superimposed over one another. For instance,\n /// if we wanted some bits in memory that we sometimes interpret as a `u32` and\n-/// sometimes as an `f32`, we would write:\n+/// sometimes as an `f32`, we could write:\n ///\n /// ```rust\n /// union IntOrFloat {\n@@ -1647,6 +1647,7 @@ mod dyn_keyword {}\n ///\n /// It is possible to use pattern matching on `union`s. A single field name must\n /// be used and it must match the name of one of the `union`'s field.\n+/// Like reading from a `union`, pattern matching on a `union` requires `unsafe`.\n ///\n /// ```rust\n /// union IntOrFloat {\n@@ -1658,17 +1659,17 @@ mod dyn_keyword {}\n ///\n /// unsafe {\n ///     match u {\n-///         IntOrFloat { i: 10 } => println!(\"Found exactly ten !\"),\n-///         // The field name is used to deduce the type\n+///         IntOrFloat { i: 10 } => println!(\"Found exactly ten!\"),\n+///         // Matching the field `f` provides an `f32`.\n ///         IntOrFloat { f } => println!(\"Found f = {} !\", f),\n ///     }\n /// }\n /// ```\n ///\n /// # References to union fields\n ///\n-/// All fields in a union are all at the same place in memory which means\n-/// borrowing one borrows all of them, for the same duration:\n+/// All fields in a `union` are all at the same place in memory which means\n+/// borrowing one borrows the entire `union`, for the same lifetime:\n ///\n /// ```rust,compile_fail,E0502\n /// union IntOrFloat {"}]}