{"sha": "65922dd42da48631fd9b4ced0d7d82dfec8bd176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OTIyZGQ0MmRhNDg2MzFmZDliNGNlZDBkN2Q4MmRmZWM4YmQxNzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T13:00:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-06T12:21:27Z"}, "message": "Apply stability attributes to std::num::Float.", "tree": {"sha": "31671e37dc6de16b582a5041b4dc54f723499183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31671e37dc6de16b582a5041b4dc54f723499183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65922dd42da48631fd9b4ced0d7d82dfec8bd176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65922dd42da48631fd9b4ced0d7d82dfec8bd176", "html_url": "https://github.com/rust-lang/rust/commit/65922dd42da48631fd9b4ced0d7d82dfec8bd176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65922dd42da48631fd9b4ced0d7d82dfec8bd176/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae4762761c995494726e8c9f41b05e99e6c7c81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4762761c995494726e8c9f41b05e99e6c7c81b", "html_url": "https://github.com/rust-lang/rust/commit/ae4762761c995494726e8c9f41b05e99e6c7c81b"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "0a1c17fab471e485c598df3c6749230349e25ec8", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=65922dd42da48631fd9b4ced0d7d82dfec8bd176", "patch": "@@ -73,7 +73,7 @@ mod cmath {\n     }\n }\n \n-#[unstable = \"trait is unstable\"]\n+#[stable]\n impl Float for f32 {\n     #[inline]\n     fn nan() -> f32 { num::Float::nan() }"}, {"sha": "2806154a01681fb7440bca34fc6f4a1ef2bb453d", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=65922dd42da48631fd9b4ced0d7d82dfec8bd176", "patch": "@@ -81,7 +81,7 @@ mod cmath {\n     }\n }\n \n-#[unstable = \"trait is unstable\"]\n+#[stable]\n impl Float for f64 {\n     // inlined methods from `num::Float`\n     #[inline]"}, {"sha": "e3402984ae5053a98bf6028ea46e1e4a67d46f69", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65922dd42da48631fd9b4ced0d7d82dfec8bd176/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=65922dd42da48631fd9b4ced0d7d82dfec8bd176", "patch": "@@ -37,6 +37,7 @@ use option::Option;\n pub mod strconv;\n \n /// Mathematical operations on primitive floating point numbers.\n+#[stable]\n pub trait Float\n     : Copy + Clone\n     + NumCast\n@@ -92,57 +93,58 @@ pub trait Float\n     /// Returns the maximum base-10 exponent that this type can represent.\n     #[deprecated = \"use `std::f32::MAX_10_EXP` or `std::f64::MAX_10_EXP` as appropriate\"]\n     fn max_10_exp(unused_self: Option<Self>) -> int;\n+\n     /// Returns the smallest finite value that this type can represent.\n-    #[deprecated = \"use `std::f32::MIN_VALUE` or `std::f64::MIN_VALUE` as appropriate\"]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn min_value() -> Self;\n     /// Returns the smallest normalized positive number that this type can represent.\n-    #[deprecated = \"use `std::f32::MIN_POS_VALUE` or `std::f64::MIN_POS_VALUE` as appropriate\"]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn min_pos_value(unused_self: Option<Self>) -> Self;\n     /// Returns the largest finite value that this type can represent.\n-    #[deprecated = \"use `std::f32::MAX_VALUE` or `std::f64::MAX_VALUE` as appropriate\"]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn max_value() -> Self;\n \n     /// Returns true if this value is NaN and false otherwise.\n-    #[stable]\n+    #[unstable = \"position is undecided\"]\n     fn is_nan(self) -> bool;\n     /// Returns true if this value is positive infinity or negative infinity and\n     /// false otherwise.\n-    #[stable]\n+    #[unstable = \"position is undecided\"]\n     fn is_infinite(self) -> bool;\n     /// Returns true if this number is neither infinite nor NaN.\n-    #[stable]\n+    #[unstable = \"position is undecided\"]\n     fn is_finite(self) -> bool;\n     /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n-    #[stable]\n+    #[unstable = \"position is undecided\"]\n     fn is_normal(self) -> bool;\n     /// Returns the category that this number falls into.\n     #[stable]\n     fn classify(self) -> FpCategory;\n \n     /// Returns the mantissa, exponent and sign as integers, respectively.\n-    #[stable]\n+    #[unstable = \"signature is undecided\"]\n     fn integer_decode(self) -> (u64, i16, i8);\n \n     /// Return the largest integer less than or equal to a number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn floor(self) -> Self;\n     /// Return the smallest integer greater than or equal to a number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn ceil(self) -> Self;\n     /// Return the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn round(self) -> Self;\n     /// Return the integer part of a number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn trunc(self) -> Self;\n     /// Return the fractional part of a number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn fract(self) -> Self;\n \n     /// Computes the absolute value of `self`. Returns `Float::nan()` if the\n     /// number is `Float::nan()`.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn abs(self) -> Self;\n     /// Returns a number that represents the sign of `self`.\n     ///\n@@ -163,130 +165,154 @@ pub trait Float\n     /// Fused multiply-add. Computes `(self * a) + b` with only one rounding\n     /// error. This produces a more accurate result with better performance than\n     /// a separate multiplication operation followed by an add.\n-    #[stable]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn mul_add(self, a: Self, b: Self) -> Self;\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n-    #[stable]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn recip(self) -> Self;\n \n     /// Raise a number to an integer power.\n     ///\n     /// Using this function is generally faster than using `powf`\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn powi(self, n: i32) -> Self;\n     /// Raise a number to a floating point power.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn powf(self, n: Self) -> Self;\n \n     /// Take the square root of a number.\n     ///\n     /// Returns NaN if `self` is a negative number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn sqrt(self) -> Self;\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n-    #[unstable = \"TODO\"]\n+    #[unstable = \"unsure about its place in the world\"]\n     fn rsqrt(self) -> Self;\n \n     /// Returns `e^(self)`, (the exponential function).\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn exp(self) -> Self;\n     /// Returns 2 raised to the power of the number, `2^(self)`.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn exp2(self) -> Self;\n     /// Returns the natural logarithm of the number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn ln(self) -> Self;\n     /// Returns the logarithm of the number with respect to an arbitrary base.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn log(self, base: Self) -> Self;\n     /// Returns the base 2 logarithm of the number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn log2(self) -> Self;\n     /// Returns the base 10 logarithm of the number.\n-    #[unstable = \"TODO\"]\n+    #[stable]\n     fn log10(self) -> Self;\n \n     /// Convert radians to degrees.\n-    #[unstable = \"TODO\"]\n+    #[unstable = \"desirability is unclear\"]\n     fn to_degrees(self) -> Self;\n     /// Convert degrees to radians.\n-    #[unstable = \"TODO\"]\n+    #[unstable = \"desirability is unclear\"]\n     fn to_radians(self) -> Self;\n \n     /// Constructs a floating point number created by multiplying `x` by 2\n     /// raised to the power of `exp`.\n+    #[unstable = \"pending integer conventions\"]\n     fn ldexp(x: Self, exp: int) -> Self;\n     /// Breaks the number into a normalized fraction and a base-2 exponent,\n     /// satisfying:\n     ///\n     ///  * `self = x * pow(2, exp)`\n     ///\n     ///  * `0.5 <= abs(x) < 1.0`\n+    #[unstable = \"pending integer conventions\"]\n     fn frexp(self) -> (Self, int);\n \n     /// Returns the next representable floating-point value in the direction of\n     /// `other`.\n+    #[unstable = \"unsure about its place in the world\"]\n     fn next_after(self, other: Self) -> Self;\n \n     /// Returns the maximum of the two numbers.\n+    #[stable]\n     fn max(self, other: Self) -> Self;\n     /// Returns the minimum of the two numbers.\n+    #[stable]\n     fn min(self, other: Self) -> Self;\n \n     /// The positive difference of two numbers. Returns `0.0` if the number is\n     /// less than or equal to `other`, otherwise the difference between`self`\n     /// and `other` is returned.\n+    #[unstable = \"may be renamed\"]\n     fn abs_sub(self, other: Self) -> Self;\n \n     /// Take the cubic root of a number.\n+    #[unstable = \"may be renamed\"]\n     fn cbrt(self) -> Self;\n     /// Calculate the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n+    #[unstable = \"unsure about its place in the world\"]\n     fn hypot(self, other: Self) -> Self;\n \n     /// Computes the sine of a number (in radians).\n+    #[stable]\n     fn sin(self) -> Self;\n     /// Computes the cosine of a number (in radians).\n+    #[stable]\n     fn cos(self) -> Self;\n     /// Computes the tangent of a number (in radians).\n+    #[stable]\n     fn tan(self) -> Self;\n \n     /// Computes the arcsine of a number. Return value is in radians in\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n+    #[stable]\n     fn asin(self) -> Self;\n     /// Computes the arccosine of a number. Return value is in radians in\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n+    #[stable]\n     fn acos(self) -> Self;\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n+    #[stable]\n     fn atan(self) -> Self;\n     /// Computes the four quadrant arctangent of a number, `y`, and another\n     /// number `x`. Return value is in radians in the range [-pi, pi].\n+    #[stable]\n     fn atan2(self, other: Self) -> Self;\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n+    #[stable]\n     fn sin_cos(self) -> (Self, Self);\n \n     /// Returns the exponential of the number, minus 1, in a way that is\n     /// accurate even if the number is close to zero.\n+    #[unstable = \"may be renamed\"]\n     fn exp_m1(self) -> Self;\n     /// Returns the natural logarithm of the number plus 1 (`ln(1+n)`) more\n     /// accurately than if the operations were performed separately.\n+    #[unstable = \"may be renamed\"]\n     fn ln_1p(self) -> Self;\n \n     /// Hyperbolic sine function.\n+    #[stable]\n     fn sinh(self) -> Self;\n     /// Hyperbolic cosine function.\n+    #[stable]\n     fn cosh(self) -> Self;\n     /// Hyperbolic tangent function.\n+    #[stable]\n     fn tanh(self) -> Self;\n     /// Inverse hyperbolic sine function.\n+    #[stable]\n     fn asinh(self) -> Self;\n     /// Inverse hyperbolic cosine function.\n+    #[stable]\n     fn acosh(self) -> Self;\n     /// Inverse hyperbolic tangent function.\n+    #[stable]\n     fn atanh(self) -> Self;\n }\n "}]}