{"sha": "30d4f1b78d997fb555388cb8ebea474ffb85794c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZDRmMWI3OGQ5OTdmYjU1NTM4OGNiOGViZWE0NzRmZmI4NTc5NGM=", "commit": {"author": {"name": "spunit262", "email": "45582704+spunit262@users.noreply.github.com", "date": "2020-02-13T00:46:15Z"}, "committer": {"name": "spunit262", "email": "45582704+spunit262@users.noreply.github.com", "date": "2020-02-13T01:32:27Z"}, "message": "Don't give invalid suggestion on desugared span.", "tree": {"sha": "52f3136d3b418e6d2be305761d92c4cf04e7fa4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f3136d3b418e6d2be305761d92c4cf04e7fa4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30d4f1b78d997fb555388cb8ebea474ffb85794c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30d4f1b78d997fb555388cb8ebea474ffb85794c", "html_url": "https://github.com/rust-lang/rust/commit/30d4f1b78d997fb555388cb8ebea474ffb85794c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30d4f1b78d997fb555388cb8ebea474ffb85794c/comments", "author": {"login": "spunit262", "id": 45582704, "node_id": "MDQ6VXNlcjQ1NTgyNzA0", "avatar_url": "https://avatars.githubusercontent.com/u/45582704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spunit262", "html_url": "https://github.com/spunit262", "followers_url": "https://api.github.com/users/spunit262/followers", "following_url": "https://api.github.com/users/spunit262/following{/other_user}", "gists_url": "https://api.github.com/users/spunit262/gists{/gist_id}", "starred_url": "https://api.github.com/users/spunit262/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spunit262/subscriptions", "organizations_url": "https://api.github.com/users/spunit262/orgs", "repos_url": "https://api.github.com/users/spunit262/repos", "events_url": "https://api.github.com/users/spunit262/events{/privacy}", "received_events_url": "https://api.github.com/users/spunit262/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spunit262", "id": 45582704, "node_id": "MDQ6VXNlcjQ1NTgyNzA0", "avatar_url": "https://avatars.githubusercontent.com/u/45582704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spunit262", "html_url": "https://github.com/spunit262", "followers_url": "https://api.github.com/users/spunit262/followers", "following_url": "https://api.github.com/users/spunit262/following{/other_user}", "gists_url": "https://api.github.com/users/spunit262/gists{/gist_id}", "starred_url": "https://api.github.com/users/spunit262/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spunit262/subscriptions", "organizations_url": "https://api.github.com/users/spunit262/orgs", "repos_url": "https://api.github.com/users/spunit262/repos", "events_url": "https://api.github.com/users/spunit262/events{/privacy}", "received_events_url": "https://api.github.com/users/spunit262/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49", "html_url": "https://github.com/rust-lang/rust/commit/a1912f2e89b77cfe2a0e64b96f444848fe4e2d49"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "b0a82bc2ba5fbd3736d55527ac6d1bd37f201f4b", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=30d4f1b78d997fb555388cb8ebea474ffb85794c", "patch": "@@ -329,58 +329,60 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if self.body.local_decls[local].is_user_variable() =>\n             {\n                 let local_decl = &self.body.local_decls[local];\n-                let suggestion = match local_decl.local_info {\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(_))) => {\n-                        Some(suggest_ampmut_self(self.infcx.tcx, local_decl))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByValue(_),\n-                            opt_ty_info,\n-                            ..\n-                        },\n-                    ))) => Some(suggest_ampmut(\n-                        self.infcx.tcx,\n-                        self.body,\n-                        local,\n-                        local_decl,\n-                        opt_ty_info,\n-                    )),\n-\n-                    LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                        mir::VarBindingForm {\n-                            binding_mode: ty::BindingMode::BindByReference(_),\n-                            ..\n-                        },\n-                    ))) => {\n-                        let pattern_span = local_decl.source_info.span;\n-                        suggest_ref_mut(self.infcx.tcx, pattern_span)\n-                            .map(|replacement| (pattern_span, replacement))\n-                    }\n-\n-                    LocalInfo::User(ClearCrossCrate::Clear) => bug!(\"saw cleared local state\"),\n-\n-                    _ => unreachable!(),\n-                };\n \n                 let (pointer_sigil, pointer_desc) = if local_decl.ty.is_region_ptr() {\n                     (\"&\", \"reference\")\n                 } else {\n                     (\"*const\", \"pointer\")\n                 };\n \n-                if let Some((err_help_span, suggested_code)) = suggestion {\n-                    err.span_suggestion(\n-                        err_help_span,\n-                        &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n-                        suggested_code,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n+                        let suggestion = match local_decl.local_info {\n+                            LocalInfo::User(ClearCrossCrate::Set(\n+                                mir::BindingForm::ImplicitSelf(_),\n+                            )) => Some(suggest_ampmut_self(self.infcx.tcx, local_decl)),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByValue(_),\n+                                    opt_ty_info,\n+                                    ..\n+                                },\n+                            ))) => Some(suggest_ampmut(\n+                                self.infcx.tcx,\n+                                self.body,\n+                                local,\n+                                local_decl,\n+                                opt_ty_info,\n+                            )),\n+\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                                mir::VarBindingForm {\n+                                    binding_mode: ty::BindingMode::BindByReference(_),\n+                                    ..\n+                                },\n+                            ))) => {\n+                                let pattern_span = local_decl.source_info.span;\n+                                suggest_ref_mut(self.infcx.tcx, pattern_span)\n+                                    .map(|replacement| (pattern_span, replacement))\n+                            }\n+\n+                            LocalInfo::User(ClearCrossCrate::Clear) => {\n+                                bug!(\"saw cleared local state\")\n+                            }\n+\n+                            _ => unreachable!(),\n+                        };\n+\n+                        if let Some((err_help_span, suggested_code)) = suggestion {\n+                            err.span_suggestion(\n+                                err_help_span,\n+                                &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n+                                suggested_code,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                         err.span_label(\n                             span,\n                             format!("}, {"sha": "d80467c7fa88756abf962371b63e457a2c206e99", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=30d4f1b78d997fb555388cb8ebea474ffb85794c", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n-   |                   -^^^^^^^^^\n-   |                   ||\n-   |                   |cannot borrow as mutable through `&` reference\n-   |                   help: consider changing this to be a mutable reference: `&mut ref mut s`\n+   |                    ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error: aborting due to previous error\n "}, {"sha": "88773def8b7c840e44fab37dc429a407f0c0fa8f", "filename": "src/test/ui/nll/dont-print-desugared.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30d4f1b78d997fb555388cb8ebea474ffb85794c/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdont-print-desugared.stderr?ref=30d4f1b78d997fb555388cb8ebea474ffb85794c", "patch": "@@ -2,10 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/dont-print-desugared.rs:4:10\n    |\n LL |     for &ref mut x in s {}\n-   |         -^^^^^^^^^\n-   |         ||\n-   |         |cannot borrow as mutable through `&` reference\n-   |         help: consider changing this to be a mutable reference: `&mut ref mut x`\n+   |          ^^^^^^^^^ cannot borrow as mutable through `&` reference\n \n error[E0597]: `y` does not live long enough\n   --> $DIR/dont-print-desugared.rs:17:16"}]}