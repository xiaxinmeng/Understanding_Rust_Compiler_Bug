{"sha": "2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMGRjZmJhMWQ3ZmQwMDdhZjFkOWQ5Y2ZiOTJiZjY3ZWMxNTFmN2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T14:06:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T14:06:49Z"}, "message": "Simplify `write_value_to_ptr`", "tree": {"sha": "6227ec99b2a5507cdafcf8312b225926625d2f43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6227ec99b2a5507cdafcf8312b225926625d2f43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkI6kACgkQpp+NIls6\n19m7QQ/8Cc90ZWl1YVcRSeuyWiZPBcTDMudFTwhNoMqKYy4CVyuXyg6GxQNDybbg\nir6QBNHHX7FX5ZC3u0iVmDmzpJGTCYkAwxdF4QyQ+wa4pQ/LxqEtkiVn+aBj9+k1\nhqWOdHZ/vv8UWc0/G1Nu1aE6WtrJ6pt1s1rD6GnmLIULr6JSu6NDEhpL1LOzPXY5\nZ+1xqVak8fhBSCxzTx95tcxOFq6Naw4JYcqesd1fxkSHSaI7ul+eNpGxudEG3Ua8\ntK4kGOsPy01KZvYhM/D6SO8d4vfWq/BPIRKN3xbj00jbRVu2U4w1qmcQoR/rdAc8\nm8Yo66B85fbz2k96fGn11w5Wi8CwltrZEIX4sWWmSE13zEe4R44ZnKrs1hkumUR0\nDxtZ7SKPBaIoLtzSsvcIdHqyyMp9ySsc6wQd2OQSYQZoRMgjJiPs8E/ZLdlCqt1E\nNLCkkglrISLRfe6iQq5T884xwc+cSOpFEmdT4V6BvBgN9GPcEocDqlkrv5EMUg08\nWfI+lZOpGPCYUrLC7RgalkhrykNHxrQQwf4w6loZ66Xql8f+DdmFusyJGsDG0vwx\n60JKAQXUWFXVIA3sxn5fQQhmze34kJiDhQtG8kgGX9WVbUdR4ei0EXganv4d4x6U\nTTOIiIKQiCaRiKna7rayittJt/iw9Ka4k36G1STkIx59sJQ01zE=\n=A5/O\n-----END PGP SIGNATURE-----", "payload": "tree 6227ec99b2a5507cdafcf8312b225926625d2f43\nparent 129b914bdc9bac5c10181d1e87f722be15cb627c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503929209 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503929209 +0200\n\nSimplify `write_value_to_ptr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "html_url": "https://github.com/rust-lang/rust/commit/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "129b914bdc9bac5c10181d1e87f722be15cb627c", "url": "https://api.github.com/repos/rust-lang/rust/commits/129b914bdc9bac5c10181d1e87f722be15cb627c", "html_url": "https://github.com/rust-lang/rust/commit/129b914bdc9bac5c10181d1e87f722be15cb627c"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "044f37947d30e276b3a7e62e5dec35796acf0366", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=2f0dcfba1d7fd007af1d9d9cfb92bf67ec151f7e", "patch": "@@ -1622,20 +1622,13 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n             Value::ByVal(primval) => {\n                 let size = self.type_size(dest_ty)?.expect(\"dest type must be sized\");\n-                // TODO: This fn gets called with sizes like 0 and 6, which cannot be a primitive type\n-                // and hence is not supported by write_primval.\n-                // (E.g. in the arrays.rs testcase.)  That seems to only happen for Undef though,\n-                // so we special-case that here.\n-                match primval {\n-                    PrimVal::Undef => {\n-                        self.memory.mark_definedness(dest, size, false)?;\n-                    }\n-                    _ => {\n-                        // TODO: Do we need signedness?\n-                        self.memory.write_primval(dest.to_ptr()?, primval, size, false)?;\n-                    }\n+                if size == 0 {\n+                    assert!(primval.is_undef());\n+                    Ok(())\n+                } else {\n+                    // TODO: Do we need signedness?\n+                    self.memory.write_primval(dest.to_ptr()?, primval, size, false)\n                 }\n-                Ok(())\n             }\n             Value::ByValPair(a, b) => self.write_pair_to_ptr(a, b, dest.to_ptr()?, dest_ty),\n         }"}]}