{"sha": "84cb90f8ee080ed04512620357c1f734146df8c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Y2I5MGY4ZWUwODBlZDA0NTEyNjIwMzU3YzFmNzM0MTQ2ZGY4YzM=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-10-02T17:04:02Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-10-08T14:52:15Z"}, "message": "Fix tests", "tree": {"sha": "e8935d0f0b247c228c12ddbcb536344f51c4e196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8935d0f0b247c228c12ddbcb536344f51c4e196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84cb90f8ee080ed04512620357c1f734146df8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb90f8ee080ed04512620357c1f734146df8c3", "html_url": "https://github.com/rust-lang/rust/commit/84cb90f8ee080ed04512620357c1f734146df8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84cb90f8ee080ed04512620357c1f734146df8c3/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc6e902889bec9ee96e8e8520ed65aa342d418f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc6e902889bec9ee96e8e8520ed65aa342d418f", "html_url": "https://github.com/rust-lang/rust/commit/cbc6e902889bec9ee96e8e8520ed65aa342d418f"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "cdba559445d195be1a4636a496ed0b57fa8467b0", "filename": "src/test/compile-fail/hygiene/impl_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fhygiene%2Fimpl_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fhygiene%2Fimpl_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygiene%2Fimpl_items.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -19,7 +19,7 @@ mod foo {\n     }\n \n     pub macro m() {\n-        let _: () = S.f(); //~ ERROR type `fn(&foo::S) {foo::S::f}` is private\n+        let _: () = S.f(); //~ ERROR type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n     }\n }\n "}, {"sha": "85d91bb2db202dd6dcb1681cb4ed1e1ef8fe4505", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -15,6 +15,6 @@\n #[bench]\n fn bar(x: isize) { }\n //~^ ERROR mismatched types\n-//~| expected type `fn(&mut __test::test::Bencher)`\n+//~| expected type `for<'r> fn(&'r mut __test::test::Bencher)`\n //~| found type `fn(isize) {bar}`\n //~| expected mutable reference, found isize"}, {"sha": "c0ba38b240202ece9a41e16605b858f6cd9ef7f1", "filename": "src/test/compile-fail/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -15,7 +15,7 @@\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is pr\n // error-pattern:type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct::{{constructor}}}` is priv\n-// error-pattern:type `fn(&ext::Pub<u8>) {<ext::Pub<u8>>::priv_method}` is private\n+// error-pattern:type `for<'r> fn(&'r ext::Pub<u8>) {<ext::Pub<u8>>::priv_method}` is private\n \n #![feature(decl_macro)]\n "}, {"sha": "95e3732d6134278e980b0b2f44c45fea2af88e14", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -56,7 +56,7 @@ mod m {\n         PubTupleStruct;\n         //~^ ERROR type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct::{{constructor}}}` is privat\n         Pub(0u8).priv_method();\n-        //~^ ERROR type `fn(&m::Pub<u8>) {<m::Pub<u8>>::priv_method}` is private\n+        //~^ ERROR type `for<'r> fn(&'r m::Pub<u8>) {<m::Pub<u8>>::priv_method}` is private\n     }\n \n     trait Trait {}"}, {"sha": "6be65a5e35905194fe710c4d12a16d0f238aa32c", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -58,8 +58,8 @@ fn supply_G() {\n     want_G(bar);\n     want_G(baz);\n     //~^ ERROR mismatched types\n-    //~| expected type `fn(&'cx S) -> &'static S`\n-    //~| found type `fn(&S) -> &S {baz}`\n+    //~| expected type `for<'cx> fn(&'cx S) -> &'static S`\n+    //~| found type `for<'r> fn(&'r S) -> &'r S {baz}`\n     //~| expected concrete lifetime, found bound lifetime parameter 'cx\n }\n "}, {"sha": "39f43e4e990cd0eecb4e064f483ef6cd129d7c4c", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -57,7 +57,7 @@ fn main() {\n // START rustc.node50.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "b670d8094dd53d8fca9ccc5a19eb83b1fcc3e675", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -48,8 +48,8 @@ fn main() {\n // START rustc.node22.EraseRegions.after.mir\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[8cd8]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -74,8 +74,8 @@ fn main() {\n // START rustc.node60.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}, {"sha": "059d3adb407aacef2d5f46280033f7c75567ad72", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -45,7 +45,7 @@ fn main() {\n // START rustc.node46.EraseRegions.after.mir\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[8cd8]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "02b8425d88beedb2486b8fdfb7345d2689568742", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -40,31 +40,31 @@\n \n \n                   ((::fmt::format as\n-                       fn(std::fmt::Arguments<'_>) -> std::string::String {std::fmt::format})(((<::std::fmt::Arguments>::new_v1\n-                                                                                                   as\n-                                                                                                   fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})((&([(\"test\"\n-                                                                                                                                                                                                                  as\n-                                                                                                                                                                                                                  &'static str)]\n-                                                                                                                                                                                                                as\n-                                                                                                                                                                                                                [&str; 1])\n-                                                                                                                                                                                                              as\n-                                                                                                                                                                                                              &[&str; 1]),\n-                                                                                                                                                                                                          (&(match (()\n-                                                                                                                                                                                                                       as\n-                                                                                                                                                                                                                       ())\n-                                                                                                                                                                                                                 {\n-                                                                                                                                                                                                                 ()\n-                                                                                                                                                                                                                 =>\n-                                                                                                                                                                                                                 ([]\n-                                                                                                                                                                                                                     as\n-                                                                                                                                                                                                                     [std::fmt::ArgumentV1<'_>; 0]),\n-                                                                                                                                                                                                             }\n-                                                                                                                                                                                                                as\n-                                                                                                                                                                                                                [std::fmt::ArgumentV1<'_>; 0])\n-                                                                                                                                                                                                              as\n-                                                                                                                                                                                                              &[std::fmt::ArgumentV1<'_>; 0]))\n-                                                                                                  as\n-                                                                                                  std::fmt::Arguments<'_>))\n+                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::std::fmt::Arguments>::new_v1\n+                                                                                                           as\n+                                                                                                           fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments<'_>::new_v1})((&([(\"test\"\n+                                                                                                                                                                                                                          as\n+                                                                                                                                                                                                                          &'static str)]\n+                                                                                                                                                                                                                        as\n+                                                                                                                                                                                                                        [&str; 1])\n+                                                                                                                                                                                                                      as\n+                                                                                                                                                                                                                      &[&str; 1]),\n+                                                                                                                                                                                                                  (&(match (()\n+                                                                                                                                                                                                                               as\n+                                                                                                                                                                                                                               ())\n+                                                                                                                                                                                                                         {\n+                                                                                                                                                                                                                         ()\n+                                                                                                                                                                                                                         =>\n+                                                                                                                                                                                                                         ([]\n+                                                                                                                                                                                                                             as\n+                                                                                                                                                                                                                             [std::fmt::ArgumentV1<'_>; 0]),\n+                                                                                                                                                                                                                     }\n+                                                                                                                                                                                                                        as\n+                                                                                                                                                                                                                        [std::fmt::ArgumentV1<'_>; 0])\n+                                                                                                                                                                                                                      as\n+                                                                                                                                                                                                                      &[std::fmt::ArgumentV1<'_>; 0]))\n+                                                                                                          as\n+                                                                                                          std::fmt::Arguments<'_>))\n                       as std::string::String);\n               } as ())\n pub type Foo = [i32; (3 as usize)];"}, {"sha": "4a97537223cf6afabaa7d27a1b987982ee5ac83a", "filename": "src/test/ui/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84cb90f8ee080ed04512620357c1f734146df8c3/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr?ref=84cb90f8ee080ed04512620357c1f734146df8c3", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n    = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n-              found type `fn(&'a S) -> &S {bar::<'_>}`\n+              found type `for<'a> fn(&'a S) -> &S {bar::<'_>}`\n \n error: aborting due to previous error\n "}]}