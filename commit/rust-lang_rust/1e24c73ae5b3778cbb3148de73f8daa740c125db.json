{"sha": "1e24c73ae5b3778cbb3148de73f8daa740c125db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMjRjNzNhZTViMzc3OGNiYjMxNDhkZTczZjhkYWE3NDBjMTI1ZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:41:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:41:24Z"}, "message": "dedup free-form Unsupported errors; add macros for free-form UB and Unsupported cases", "tree": {"sha": "3358cd5a6d853ff27250d9051e39b6543732cdfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3358cd5a6d853ff27250d9051e39b6543732cdfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e24c73ae5b3778cbb3148de73f8daa740c125db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e24c73ae5b3778cbb3148de73f8daa740c125db", "html_url": "https://github.com/rust-lang/rust/commit/1e24c73ae5b3778cbb3148de73f8daa740c125db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e24c73ae5b3778cbb3148de73f8daa740c125db/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b132a2f413f2bd1ae7dea0e8f3519b2765a5a71", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b132a2f413f2bd1ae7dea0e8f3519b2765a5a71", "html_url": "https://github.com/rust-lang/rust/commit/1b132a2f413f2bd1ae7dea0e8f3519b2765a5a71"}], "stats": {"total": 90, "additions": 41, "deletions": 49}, "files": [{"sha": "6a8cd9b46ae4a1ed8e704281bd25bdcc3cd4ae01", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -363,7 +363,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum UnsupportedOpInfo<'tcx> {\n     /// Handle cases which for which we do not have a fixed variant.\n-    Unimplemented(String),\n+    Unsupported(String),\n \n     // -- Everything below is not classified yet --\n     FunctionAbiMismatch(Abi, Abi),\n@@ -390,20 +390,14 @@ pub enum UnsupportedOpInfo<'tcx> {\n     ReadUndefBytes(Size),\n     DeadLocal,\n     InvalidBoolOp(mir::BinOp),\n-    InlineAsm,\n     UnimplementedTraitSelection,\n     CalledClosureAsFunction,\n     NoMirFor(String),\n-    /// This variant is used by machines to signal their own errors that do not\n-    /// match an existing variant.\n-    MachineError(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    Intrinsic(String),\n     InvalidChar(u128),\n     OutOfTls,\n     TlsOutOfBounds,\n-    AbiViolation(String),\n     AlignmentCheckFailed {\n         required: Align,\n         has: Align,\n@@ -513,8 +507,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                     initializer\"),\n             AssumptionNotHeld =>\n                 write!(f, \"`assume` argument was false\"),\n-            InlineAsm =>\n-                write!(f, \"miri does not support inline assembly\"),\n             ReallocateNonBasePtr =>\n                 write!(f, \"tried to reallocate with a pointer not to the beginning of an \\\n                     existing object\"),\n@@ -537,10 +529,7 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n             HeapAllocNonPowerOfTwoAlignment(_) =>\n                 write!(f, \"tried to re-, de-, or allocate heap memory with alignment that is \\\n                     not a power of two\"),\n-            MachineError(ref msg) |\n-            Unimplemented(ref msg) |\n-            AbiViolation(ref msg) |\n-            Intrinsic(ref msg) =>\n+            Unsupported(ref msg) =>\n                 write!(f, \"{}\", msg),\n         }\n     }"}, {"sha": "65f4c9c47d0a94975e6ddd51296637d490ea9b04", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -50,6 +50,11 @@ macro_rules! throw_unsup {\n     ($($tt:tt)*) => { return Err(err_unsup!($($tt)*).into()) };\n }\n \n+#[macro_export]\n+macro_rules! throw_unsup_format {\n+    ($($tt:tt)*) => { throw_unsup!(Unsupported(format!($($tt)*))) };\n+}\n+\n #[macro_export]\n macro_rules! throw_inval {\n     ($($tt:tt)*) => { return Err(err_inval!($($tt)*).into()) };\n@@ -60,6 +65,11 @@ macro_rules! throw_ub {\n     ($($tt:tt)*) => { return Err(err_ub!($($tt)*).into()) };\n }\n \n+#[macro_export]\n+macro_rules! throw_ub_format {\n+    ($($tt:tt)*) => { throw_ub!(Ub(format!($($tt)*))) };\n+}\n+\n #[macro_export]\n macro_rules! throw_panic {\n     ($($tt:tt)*) => { return Err(err_panic!($($tt)*).into()) };"}, {"sha": "0a3ac16c10966f4915f64d433b92f40000ede342", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -181,17 +181,17 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     Ok(ret)\n }\n \n-impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n-    fn into(self) -> InterpErrorInfo<'tcx> {\n-        err_unsup!(MachineError(self.to_string())).into()\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n enum ConstEvalError {\n     NeedsRfc(String),\n }\n \n+impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalError {\n+    fn into(self) -> InterpErrorInfo<'tcx> {\n+        err_unsup!(Unsupported(self.to_string())).into()\n+    }\n+}\n+\n impl fmt::Display for ConstEvalError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::ConstEvalError::*;\n@@ -341,7 +341,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         debug!(\"eval_fn_call: {:?}\", instance);\n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def_id) = instance.def {\n-            // Execution might have wandered off into other crates, so we cannot to a stability-\n+            // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n             if !ecx.tcx.is_const_fn_raw(def_id) {\n@@ -352,7 +352,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     ecx.goto_block(ret)?; // fully evaluated and done\n                     Ok(None)\n                 } else {\n-                    throw_unsup!(MachineError(format!(\"calling non-const function `{}`\", instance)))\n+                    throw_unsup_format!(\"calling non-const function `{}`\", instance)\n                 };\n             }\n         }"}, {"sha": "ffb4da1b9b3a06a0bd3d8b3a41d83c68d70d17c9", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -199,7 +199,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             },\n \n             // Casts to bool are not permitted by rustc, no need to handle them here.\n-            _ => throw_unsup!(Unimplemented(format!(\"int to {:?} cast\", dest_layout.ty))),\n+            _ => bug!(\"invalid int to {:?} cast\", dest_layout.ty),\n         }\n     }\n "}, {"sha": "89c5be137a4e520a69fa218baf67fbecdfc479ee", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -98,11 +98,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits = self.read_scalar(args[0])?.to_bits(layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => Err(err_unsup!(TypeNotPrimitive(ty)))?,\n+                    _ => throw_unsup!(TypeNotPrimitive(ty)),\n                 };\n                 let out_val = if intrinsic_name.ends_with(\"_nonzero\") {\n                     if bits == 0 {\n-                        throw_unsup!(Intrinsic(format!(\"{} called on 0\", intrinsic_name)))\n+                        throw_ub_format!(\"`{}` called on 0\", intrinsic_name);\n                     }\n                     numeric_intrinsic(intrinsic_name.trim_end_matches(\"_nonzero\"), bits, kind)?\n                 } else {\n@@ -187,10 +187,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let (val, overflowed) = self.binary_op(bin_op, l, r)?;\n                 if overflowed {\n                     let layout = self.layout_of(substs.type_at(0))?;\n-                    let r_val =  r.to_scalar()?.to_bits(layout.size)?;\n-                    throw_unsup!(\n-                        Intrinsic(format!(\"Overflowing shift by {} in {}\", r_val, intrinsic_name))\n-                    )\n+                    let r_val = r.to_scalar()?.to_bits(layout.size)?;\n+                    throw_ub_format!(\"Overflowing shift by {} in `{}`\", r_val, intrinsic_name);\n                 }\n                 self.write_scalar(val, dest)?;\n             }"}, {"sha": "d1deb2e49bda3c70b607b1fab8b91cabf18c47ad", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -66,9 +66,9 @@ impl<'tcx, Other> FnVal<'tcx, Other> {\n         match self {\n             FnVal::Instance(instance) =>\n                 Ok(instance),\n-            FnVal::Other(_) => throw_unsup!(MachineError(format!(\n-                \"Expected instance function pointer, got 'other' pointer\"\n-            ))),\n+            FnVal::Other(_) => throw_unsup_format!(\n+                \"'foreign' function pointers are not supported in this context\"\n+            ),\n         }\n     }\n }\n@@ -834,9 +834,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     if (src.offset <= dest.offset && src.offset + size > dest.offset) ||\n                         (dest.offset <= src.offset && dest.offset + size > src.offset)\n                     {\n-                        throw_unsup!(Intrinsic(\n-                            \"copy_nonoverlapping called on overlapping ranges\".to_string(),\n-                        ))\n+                        throw_ub_format!(\n+                            \"copy_nonoverlapping called on overlapping ranges\"\n+                        )\n                     }\n                 }\n "}, {"sha": "141cab3e1b707fd1aacd53aec9b12cef700d14d9", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -147,15 +147,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // For the remaining ops, the types must be the same on both sides\n         if left_layout.ty != right_layout.ty {\n-            let msg = format!(\n-                \"unimplemented asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n+            bug!(\n+                \"invalid asymmetric binary op {:?}: {:?} ({:?}), {:?} ({:?})\",\n                 bin_op,\n-                l,\n-                left_layout.ty,\n-                r,\n-                right_layout.ty\n-            );\n-            throw_unsup!(Unimplemented(msg))\n+                l, left_layout.ty,\n+                r, right_layout.ty,\n+            )\n         }\n \n         // Operations that need special treatment for signed integers\n@@ -243,14 +240,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             _ => {\n-                let msg = format!(\n-                    \"unimplemented binary op {:?}: {:?}, {:?} (both {:?})\",\n+                bug!(\n+                    \"invalid binary op {:?}: {:?}, {:?} (both {:?})\",\n                     bin_op,\n                     l,\n                     r,\n                     right_layout.ty,\n-                );\n-                throw_unsup!(Unimplemented(msg))\n+                )\n             }\n         };\n "}, {"sha": "d152e2b50fa1b05decd65da3e72211f7e176b115", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -121,7 +121,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // size of MIR constantly.\n             Nop => {}\n \n-            InlineAsm { .. } => throw_unsup!(InlineAsm),\n+            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         self.stack[frame_idx].stmt += 1;"}, {"sha": "8e4d28ded88ce16d7333cb46df4a0bb79092493f", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e24c73ae5b3778cbb3148de73f8daa740c125db/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=1e24c73ae5b3778cbb3148de73f8daa740c125db", "patch": "@@ -88,8 +88,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         (FnVal::Instance(self.resolve(def_id, substs)?), sig.abi())\n                     },\n                     _ => {\n-                        let msg = format!(\"can't handle callee of type {:?}\", func.layout.ty);\n-                        throw_unsup!(Unimplemented(msg))\n+                        bug!(\"invalid callee of type {:?}\", func.layout.ty)\n                     }\n                 };\n                 let args = self.eval_operands(args)?;"}]}