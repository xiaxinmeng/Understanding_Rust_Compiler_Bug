{"sha": "3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNGZhY2JjZmUxNmVhMDkxOWU3YTg1MzdjYWUyMTljMTRhMmIxY2E=", "commit": {"author": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-10T23:58:21Z"}, "committer": {"name": "Nick Hamann", "email": "nick@wabbo.org", "date": "2015-05-11T01:04:04Z"}, "message": "Add long diagnostics for E0249 and E0250", "tree": {"sha": "a1c14030f5b6a0bd586bd5415372300e4a23d71c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c14030f5b6a0bd586bd5415372300e4a23d71c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "html_url": "https://github.com/rust-lang/rust/commit/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca/comments", "author": null, "committer": null, "parents": [{"sha": "ed1bc684fc28d26635eed49a8a39e6c492782564", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1bc684fc28d26635eed49a8a39e6c492782564", "html_url": "https://github.com/rust-lang/rust/commit/ed1bc684fc28d26635eed49a8a39e6c492782564"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "54ec1aace92112fe16a1109126004b15fdbacdc6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "patch": "@@ -1603,7 +1603,8 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                                         Some(i as usize)),\n                         _ => {\n                             span_err!(tcx.sess, ast_ty.span, E0249,\n-                                      \"expected constant expr for array length\");\n+                                      \"expected constant integer expression \\\n+                                       for array length\");\n                             this.tcx().types.err\n                         }\n                     }"}, {"sha": "ea872d1014425e9b6f0e31deef6f8d8a16d7f35d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4facbcfe16ea0919e7a8537cae219c14a2b1ca/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=3c4facbcfe16ea0919e7a8537cae219c14a2b1ca", "patch": "@@ -260,6 +260,38 @@ struct Foo { x: bool }\n \n struct Bar<S, T> { x: Foo<S, T> }\n ```\n+\"##,\n+\n+E0249: r##\"\n+This error indicates a constant expression for the array length was found, but\n+it was not an integer (signed or unsigned) expression.\n+\n+Some examples of code that produces this error are:\n+\n+```\n+const A: [u32; \"hello\"] = []; // error\n+const B: [u32; true] = []; // error\n+const C: [u32; 0.0] = []; // error\n+\"##,\n+\n+E0250: r##\"\n+This means there was an error while evaluating the expression for the length of\n+a fixed-size array type.\n+\n+Some examples of code that produces this error are:\n+\n+```\n+// divide by zero in the length expression\n+const A: [u32; 1/0] = [];\n+\n+// Rust currently will not evaluate the function `foo` at compile time\n+fn foo() -> usize { 12 }\n+const B: [u32; foo()] = [];\n+\n+// it is an error to try to add `u8` and `f64`\n+use std::{f64, u8};\n+const C: [u32; u8::MAX + f64::EPSILON] = [];\n+```\n \"##\n \n }\n@@ -403,8 +435,6 @@ register_diagnostics! {\n     E0246, // illegal recursive type\n     E0247, // found module name used as a type\n     E0248, // found value name used as a type\n-    E0249, // expected constant expr for array length\n-    E0250, // expected constant expr for array length\n     E0318, // can't create default impls for traits outside their crates\n     E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck"}]}