{"sha": "1dd026698d4f6c5848fb88d48b2d4248846bb41c", "node_id": "C_kwDOAAsO6NoAKDFkZDAyNjY5OGQ0ZjZjNTg0OGZiODhkNDhiMmQ0MjQ4ODQ2YmI0MWM", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-05-24T09:54:49Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-05-25T00:08:23Z"}, "message": "feat(lint): impl lint about use first() instead of get(0)", "tree": {"sha": "4cf85377cfb9c718c3db346c23ea3accfc6ae90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf85377cfb9c718c3db346c23ea3accfc6ae90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd026698d4f6c5848fb88d48b2d4248846bb41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd026698d4f6c5848fb88d48b2d4248846bb41c", "html_url": "https://github.com/rust-lang/rust/commit/1dd026698d4f6c5848fb88d48b2d4248846bb41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd026698d4f6c5848fb88d48b2d4248846bb41c/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97784fd07b1981292703fb136cf6e4f7cddc113", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97784fd07b1981292703fb136cf6e4f7cddc113", "html_url": "https://github.com/rust-lang/rust/commit/b97784fd07b1981292703fb136cf6e4f7cddc113"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "0f6295a45f3fbbd63491a522c268f7ef24a068b1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -3435,6 +3435,7 @@ Released 2018-09-13\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n+[`get_first`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_first\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n [`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion"}, {"sha": "0f26c19c49eec2c90fc2c27d059bf5690558491a", "filename": "clippy_lints/src/get_first.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -0,0 +1,72 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_slice_of_primitives, match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(0)` instead of\n+    /// `x.first()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.first()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.get(0);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let first_element = x.first();\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub GET_FIRST,\n+    style,\n+    \"Using `x.get(0)` when `x.first()` is simpler\"\n+}\n+declare_lint_pass!(GetFirst => [GET_FIRST]);\n+\n+impl<'tcx> LateLintPass<'tcx> for GetFirst {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(_, expr_args, _) = &expr.kind;\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, expr_def_id, &paths::SLICE_GET) && expr_args.len() == 2;\n+\n+            if let Some(struct_calling_on) = expr_args.get(0);\n+            if let Some(_) = is_slice_of_primitives(cx, struct_calling_on);\n+\n+            if let Some(method_arg) = expr_args.get(1);\n+            if let hir::ExprKind::Lit(Spanned { node: LitKind::Int(0, _), .. }) = method_arg.kind;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let slice_name = snippet_with_applicability(\n+                    cx,\n+                    struct_calling_on.span, \"..\",\n+                    &mut applicability,\n+                );\n+                span_lint_and_sugg(\n+                    cx,\n+                    GET_FIRST,\n+                    expr.span,\n+                    &format!(\"accessing first element with `{0}.get(0)`\", slice_name),\n+                    \"try\",\n+                    format!(\"{}.first()\", slice_name),\n+                    applicability,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "a028b41db7740af125b61df78aed18d3f7779cea", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -91,6 +91,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),"}, {"sha": "570d736518bde84802c671305f7afed333bb57e1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -183,6 +183,7 @@ store.register_lints(&[\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n+    get_first::GET_FIRST,\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,"}, {"sha": "ea2e1082458c29b53840d673df6eb6af43a5d148", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -31,6 +31,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(functions::DOUBLE_MUST_USE),\n     LintId::of(functions::MUST_USE_UNIT),\n     LintId::of(functions::RESULT_UNIT_ERR),\n+    LintId::of(get_first::GET_FIRST),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING),\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),"}, {"sha": "5f636e5114bddbf76bad91fd964a84f0b56c852c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -242,6 +242,7 @@ mod from_over_into;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n+mod get_first;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n@@ -904,6 +905,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n     store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n+    store.register_late_pass(|| Box::new(get_first::GetFirst));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "0064694ff929f7600e25b03453c0fcfbbd71fb46", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -141,6 +141,7 @@ pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];\n pub const SLICE_FROM_RAW_PARTS_MUT: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts_mut\"];\n+pub const SLICE_GET: [&str; 4] = [\"core\", \"slice\", \"<impl [T]>\", \"get\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 4] = [\"core\", \"slice\", \"iter\", \"Iter\"];\n pub const STDERR: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stderr\"];"}, {"sha": "def58afa4fbf2316651aec3456ec1887c0099e49", "filename": "tests/ui/get_first.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.fixed?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.first(); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.first(); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.first(); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "85a381854cd3be0a734306362f0961e0e21dbe08", "filename": "tests/ui/get_first.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.rs?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+#![warn(clippy::get_first)]\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct Bar {\n+    arr: [u32; 3],\n+}\n+\n+impl Bar {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(0); // Use x.first()\n+    let _ = x.get(1);\n+    let _ = x[0];\n+\n+    let y = [2, 3, 5];\n+    let _ = y.get(0); // Use y.first()\n+    let _ = y.get(1);\n+    let _ = y[0];\n+\n+    let z = &[2, 3, 5];\n+    let _ = z.get(0); // Use z.first()\n+    let _ = z.get(1);\n+    let _ = z[0];\n+\n+    let vecdeque: VecDeque<_> = x.iter().cloned().collect();\n+    let hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(0, 'a'), (1, 'b')]);\n+    let _ = vecdeque.get(0); // Do not lint, because VecDeque is not slice.\n+    let _ = hashmap.get(&0); // Do not lint, because HashMap is not slice.\n+    let _ = btreemap.get(&0); // Do not lint, because BTreeMap is not slice.\n+\n+    let bar = Bar { arr: [0, 1, 2] };\n+    let _ = bar.get(0); // Do not lint, because Bar is struct.\n+}"}, {"sha": "466beff9c92df65d6989d6642c7eb1b635b763b6", "filename": "tests/ui/get_first.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dd026698d4f6c5848fb88d48b2d4248846bb41c/tests%2Fui%2Fget_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_first.stderr?ref=1dd026698d4f6c5848fb88d48b2d4248846bb41c", "patch": "@@ -0,0 +1,22 @@\n+error: accessing first element with `x.get(0)`\n+  --> $DIR/get_first.rs:19:13\n+   |\n+LL |     let _ = x.get(0); // Use x.first()\n+   |             ^^^^^^^^ help: try: `x.first()`\n+   |\n+   = note: `-D clippy::get-first` implied by `-D warnings`\n+\n+error: accessing first element with `y.get(0)`\n+  --> $DIR/get_first.rs:24:13\n+   |\n+LL |     let _ = y.get(0); // Use y.first()\n+   |             ^^^^^^^^ help: try: `y.first()`\n+\n+error: accessing first element with `z.get(0)`\n+  --> $DIR/get_first.rs:29:13\n+   |\n+LL |     let _ = z.get(0); // Use z.first()\n+   |             ^^^^^^^^ help: try: `z.first()`\n+\n+error: aborting due to 3 previous errors\n+"}]}