{"sha": "453ae2e00e2f3bcd96a2fa78626296e14641dae8", "node_id": "C_kwDOAAsO6NoAKDQ1M2FlMmUwMGUyZjNiY2Q5NmEyZmE3ODYyNjI5NmUxNDY0MWRhZTg", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-17T22:36:36Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-17T22:36:36Z"}, "message": "Support range MIR lowering", "tree": {"sha": "930591c29b66657e828fd0519b8483fc49b5a8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930591c29b66657e828fd0519b8483fc49b5a8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/453ae2e00e2f3bcd96a2fa78626296e14641dae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/453ae2e00e2f3bcd96a2fa78626296e14641dae8", "html_url": "https://github.com/rust-lang/rust/commit/453ae2e00e2f3bcd96a2fa78626296e14641dae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/453ae2e00e2f3bcd96a2fa78626296e14641dae8/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad83deeccd8cb3d375b5558eb7e3d339b1a4e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad83deeccd8cb3d375b5558eb7e3d339b1a4e0b", "html_url": "https://github.com/rust-lang/rust/commit/9ad83deeccd8cb3d375b5558eb7e3d339b1a4e0b"}], "stats": {"total": 73, "additions": 65, "deletions": 8}, "files": [{"sha": "97c8d62860c64c1ed86e266ac0d326d403f42405", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=453ae2e00e2f3bcd96a2fa78626296e14641dae8", "patch": "@@ -561,6 +561,18 @@ fn for_loops() {\n     );\n }\n \n+#[test]\n+fn ranges() {\n+    check_number(\n+        r#\"\n+    //- minicore: range\n+    const GOAL: i32 = (1..2).start + (20..10).end + (100..=200).start + (2000..=1000).end\n+        + (10000..).start + (..100000).end + (..=1000000).end;\n+        \"#,\n+        1111111,\n+    );\n+}\n+\n #[test]\n fn recursion() {\n     check_number("}, {"sha": "0e516b9399a68534dcdfb134dc36c7db8e4c9cca", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=453ae2e00e2f3bcd96a2fa78626296e14641dae8", "patch": "@@ -633,15 +633,18 @@ impl<'a> InferenceTable<'a> {\n     ) -> Option<(Option<FnTrait>, Vec<Ty>, Ty)> {\n         match ty.callable_sig(self.db) {\n             Some(sig) => Some((None, sig.params().to_vec(), sig.ret().clone())),\n-            None => self.callable_sig_from_fn_trait(ty, num_args),\n+            None => {\n+                let (f, args_ty, return_ty) = self.callable_sig_from_fn_trait(ty, num_args)?;\n+                Some((Some(f), args_ty, return_ty))\n+            }\n         }\n     }\n \n     fn callable_sig_from_fn_trait(\n         &mut self,\n         ty: &Ty,\n         num_args: usize,\n-    ) -> Option<(Option<FnTrait>, Vec<Ty>, Ty)> {\n+    ) -> Option<(FnTrait, Vec<Ty>, Ty)> {\n         let krate = self.trait_env.krate;\n         let fn_once_trait = FnTrait::FnOnce.get_id(self.db, krate)?;\n         let trait_data = self.db.trait_data(fn_once_trait);\n@@ -693,7 +696,7 @@ impl<'a> InferenceTable<'a> {\n                 };\n                 let canonical = self.canonicalize(obligation.clone());\n                 if self.db.trait_solve(krate, canonical.value.cast(Interner)).is_some() {\n-                    return Some((Some(fn_x), arg_tys, return_ty));\n+                    return Some((fn_x, arg_tys, return_ty));\n                 }\n             }\n             unreachable!(\"It should at least implement FnOnce at this point\");"}, {"sha": "4b43e44a8ec31bf383a382eb5544bd03af041ad9", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=453ae2e00e2f3bcd96a2fa78626296e14641dae8", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     layout::LayoutError,\n     path::Path,\n     resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n-    DefWithBodyId, EnumVariantId, HasModule, ItemContainerId, LocalFieldId, TraitId,\n+    AdtId, DefWithBodyId, EnumVariantId, HasModule, ItemContainerId, LocalFieldId, TraitId,\n };\n use hir_expand::name::Name;\n use la_arena::ArenaMap;\n@@ -643,7 +643,7 @@ impl MirLowerCtx<'_> {\n                                             },\n                                         }\n                                     }).collect(),\n-                                    None => operands.into_iter().map(|x| x).collect::<Option<_>>().ok_or(\n+                                    None => operands.into_iter().collect::<Option<_>>().ok_or(\n                                         MirLowerError::TypeError(\"missing field in record literal\"),\n                                     )?,\n                                 },\n@@ -761,7 +761,49 @@ impl MirLowerCtx<'_> {\n                 );\n                 Ok(Some(current))\n             }\n-            Expr::Range { .. } => not_supported!(\"range\"),\n+            &Expr::Range { lhs, rhs, range_type: _ } => {\n+                let ty = self.expr_ty(expr_id);\n+                let Some((adt, subst)) = ty.as_adt() else {\n+                    return Err(MirLowerError::TypeError(\"Range type is not adt\"));\n+                };\n+                let AdtId::StructId(st) = adt else {\n+                    return Err(MirLowerError::TypeError(\"Range type is not struct\"));\n+                };\n+                let mut lp = None;\n+                let mut rp = None;\n+                if let Some(x) = lhs {\n+                    let Some((o, c)) = self.lower_expr_to_some_operand(x, current)? else {\n+                        return Ok(None);\n+                    };\n+                    lp = Some(o);\n+                    current = c;\n+                }\n+                if let Some(x) = rhs {\n+                    let Some((o, c)) = self.lower_expr_to_some_operand(x, current)? else {\n+                        return Ok(None);\n+                    };\n+                    rp = Some(o);\n+                    current = c;\n+                }\n+                self.push_assignment(\n+                    current,\n+                    place,\n+                    Rvalue::Aggregate(\n+                        AggregateKind::Adt(st.into(), subst.clone()),\n+                        self.db.struct_data(st).variant_data.fields().iter().map(|x| {\n+                            let o = match x.1.name.as_str() {\n+                                Some(\"start\") => lp.take(),\n+                                Some(\"end\") => rp.take(),\n+                                Some(\"exhausted\") => Some(Operand::from_bytes(vec![0], TyBuilder::bool())),\n+                                _ => None,\n+                            };\n+                            o.ok_or(MirLowerError::UnresolvedField)\n+                        }).collect::<Result<_>>()?,\n+                    ),\n+                    expr_id.into(),\n+                );\n+                Ok(Some(current))\n+            },\n             Expr::Closure { .. } => not_supported!(\"closure\"),\n             Expr::Tuple { exprs, is_assignee_expr: _ } => {\n                 let Some(values) = exprs"}, {"sha": "e7fffc4cc7d74b19218c3f58579da8e73c4c00e5", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/453ae2e00e2f3bcd96a2fa78626296e14641dae8/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=453ae2e00e2f3bcd96a2fa78626296e14641dae8", "patch": "@@ -188,15 +188,15 @@ impl FnTrait {\n         }\n     }\n \n-    pub fn method_name(&self) -> Name {\n+    pub fn method_name(self) -> Name {\n         match self {\n             FnTrait::FnOnce => name!(call_once),\n             FnTrait::FnMut => name!(call_mut),\n             FnTrait::Fn => name!(call),\n         }\n     }\n \n-    pub fn get_id(&self, db: &dyn HirDatabase, krate: CrateId) -> Option<TraitId> {\n+    pub fn get_id(self, db: &dyn HirDatabase, krate: CrateId) -> Option<TraitId> {\n         let target = db.lang_item(krate, self.lang_item())?;\n         match target {\n             LangItemTarget::Trait(t) => Some(t),"}]}