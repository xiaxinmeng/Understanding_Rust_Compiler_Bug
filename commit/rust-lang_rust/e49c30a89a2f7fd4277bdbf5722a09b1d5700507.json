{"sha": "e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OWMzMGE4OWEyZjdmZDQyNzdiZGJmNTcyMmEwOWIxZDU3MDA1MDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-16T02:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-16T02:26:31Z"}, "message": "auto merge of #12923 : sfackler/rust/vecify, r=brson", "tree": {"sha": "f9b8655f1d0992be8312d8ca2d11f41625fa0d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b8655f1d0992be8312d8ca2d11f41625fa0d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "html_url": "https://github.com/rust-lang/rust/commit/e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de78d7f56c0992e6f2cf1ec02e82d8efa2ffbac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/de78d7f56c0992e6f2cf1ec02e82d8efa2ffbac8", "html_url": "https://github.com/rust-lang/rust/commit/de78d7f56c0992e6f2cf1ec02e82d8efa2ffbac8"}, {"sha": "a37ca8ce385ce06d8175e56486efe544b67488e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37ca8ce385ce06d8175e56486efe544b67488e3", "html_url": "https://github.com/rust-lang/rust/commit/a37ca8ce385ce06d8175e56486efe544b67488e3"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "cfdd388c0fa12855bb65de15bc9250ab01535969", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "patch": "@@ -36,13 +36,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[allow(deprecated_owned_vector)];\n-\n use std::char;\n use std::cmp;\n use std::fmt;\n use std::fmt::Show;\n use std::option::{Option, Some, None};\n+use std::vec_ng::Vec;\n \n /// An identifier in the pre-release or build metadata. If the identifier can\n /// be parsed as a decimal value, it will be represented with `Numeric`.\n@@ -88,9 +87,9 @@ pub struct Version {\n     /// fixes are made.\n     patch: uint,\n     /// The pre-release version identifier, if one exists.\n-    pre: ~[Identifier],\n+    pre: Vec<Identifier>,\n     /// The build metadata, ignored when determining version precedence.\n-    build: ~[Identifier],\n+    build: Vec<Identifier>,\n }\n \n impl fmt::Show for Version {\n@@ -221,8 +220,8 @@ fn parse_iter<T: Iterator<char>>(rdr: &mut T) -> Option<Version> {\n         None => return None\n     };\n \n-    let mut pre = ~[];\n-    let mut build = ~[];\n+    let mut pre = vec!();\n+    let mut build = vec!();\n \n     let mut ch = ch;\n     if ch == Some('-') {\n@@ -295,66 +294,66 @@ fn test_parse() {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[],\n+        pre: vec!(),\n+        build: vec!(),\n     }));\n     assert!(parse(\"  1.2.3  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[],\n+        pre: vec!(),\n+        build: vec!(),\n     }));\n     assert!(parse(\"1.2.3-alpha1\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(),\n     }));\n     assert!(parse(\"  1.2.3-alpha1  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!()\n     }));\n     assert!(parse(\"1.2.3+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"  1.2.3+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"1.2.3-alpha1+build5\") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"  1.2.3-alpha1+build5  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[AlphaNumeric(~\"alpha1\")],\n-        build: ~[AlphaNumeric(~\"build5\")]\n+        pre: vec!(AlphaNumeric(~\"alpha1\")),\n+        build: vec!(AlphaNumeric(~\"build5\"))\n     }));\n     assert!(parse(\"1.2.3-1.alpha1.9+build5.7.3aedf  \") == Some(Version {\n         major: 1u,\n         minor: 2u,\n         patch: 3u,\n-        pre: ~[Numeric(1),AlphaNumeric(~\"alpha1\"),Numeric(9)],\n-        build: ~[AlphaNumeric(~\"build5\"),\n+        pre: vec!(Numeric(1),AlphaNumeric(~\"alpha1\"),Numeric(9)),\n+        build: vec!(AlphaNumeric(~\"build5\"),\n                  Numeric(7),\n-                 AlphaNumeric(~\"3aedf\")]\n+                 AlphaNumeric(~\"3aedf\"))\n     }));\n \n }"}, {"sha": "067479753eafff42e394a71d504e9b079331e863", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49c30a89a2f7fd4277bdbf5722a09b1d5700507/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=e49c30a89a2f7fd4277bdbf5722a09b1d5700507", "patch": "@@ -28,6 +28,7 @@ use std::hash::Hash;\n use std::io::BufReader;\n use std::from_str::FromStr;\n use std::uint;\n+use std::vec_ng::Vec;\n \n use collections::HashMap;\n \n@@ -45,7 +46,7 @@ use collections::HashMap;\n ///                 host: ~\"example.com\",\n ///                 port: Some(~\"8080\"),\n ///                 path: ~\"/foo/bar\",\n-///                 query: ~[(~\"baz\", ~\"qux\")],\n+///                 query: vec!((~\"baz\", ~\"qux\")),\n ///                 fragment: Some(~\"quz\") };\n /// // https://username@example.com:8080/foo/bar?baz=qux#quz\n /// ```\n@@ -61,7 +62,7 @@ pub struct Url {\n     port: Option<~str>,\n     /// The path component of a URL, for example `/foo/bar`.\n     path: ~str,\n-    /// The query component of a URL.  `~[(~\"baz\", ~\"qux\")]` represents the\n+    /// The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\n     /// fragment `baz=qux` in the above example.\n     query: Query,\n     /// The fragment component, such as `quz`.  Doesn't include the leading `#` character.\n@@ -72,7 +73,7 @@ pub struct Url {\n pub struct Path {\n     /// The path component of a URL, for example `/foo/bar`.\n     path: ~str,\n-    /// The query component of a URL.  `~[(~\"baz\", ~\"qux\")]` represents the\n+    /// The query component of a URL.  `vec!((~\"baz\", ~\"qux\"))` represents the\n     /// fragment `baz=qux` in the above example.\n     query: Query,\n     /// The fragment component, such as `quz`.  Doesn't include the leading `#` character.\n@@ -89,7 +90,7 @@ pub struct UserInfo {\n }\n \n /// Represents the query component of a URI.\n-pub type Query = ~[(~str, ~str)];\n+pub type Query = Vec<(~str, ~str)>;\n \n impl Url {\n     pub fn new(scheme: ~str,\n@@ -301,7 +302,7 @@ fn encode_plus(s: &str) -> ~str {\n /**\n  * Encode a hashmap to the 'application/x-www-form-urlencoded' media type.\n  */\n-pub fn encode_form_urlencoded(m: &HashMap<~str, ~[~str]>) -> ~str {\n+pub fn encode_form_urlencoded(m: &HashMap<~str, Vec<~str>>) -> ~str {\n     let mut out = ~\"\";\n     let mut first = true;\n \n@@ -327,7 +328,7 @@ pub fn encode_form_urlencoded(m: &HashMap<~str, ~[~str]>) -> ~str {\n  * Decode a string encoded with the 'application/x-www-form-urlencoded' media\n  * type into a hashmap.\n  */\n-pub fn decode_form_urlencoded(s: &[u8]) -> HashMap<~str, ~[~str]> {\n+pub fn decode_form_urlencoded(s: &[u8]) -> HashMap<~str, Vec<~str>> {\n     let mut rdr = BufReader::new(s);\n     let mut m = HashMap::new();\n     let mut key = ~\"\";\n@@ -345,7 +346,7 @@ pub fn decode_form_urlencoded(s: &[u8]) -> HashMap<~str, ~[~str]> {\n                 if key != ~\"\" && value != ~\"\" {\n                     let mut values = match m.pop(&key) {\n                         Some(values) => values,\n-                        None => ~[],\n+                        None => vec!(),\n                     };\n \n                     values.push(value);\n@@ -383,7 +384,7 @@ pub fn decode_form_urlencoded(s: &[u8]) -> HashMap<~str, ~[~str]> {\n     if key != ~\"\" && value != ~\"\" {\n         let mut values = match m.pop(&key) {\n             Some(values) => values,\n-            None => ~[],\n+            None => vec!(),\n         };\n \n         values.push(value);\n@@ -430,7 +431,7 @@ impl fmt::Show for UserInfo {\n }\n \n fn query_from_str(rawquery: &str) -> Query {\n-    let mut query: Query = ~[];\n+    let mut query: Query = vec!();\n     if !rawquery.is_empty() {\n         for p in rawquery.split('&') {\n             let (k, v) = split_char_first(p, '=');\n@@ -446,7 +447,7 @@ fn query_from_str(rawquery: &str) -> Query {\n  * # Example\n  *\n  * ```rust\n- * let query = ~[(~\"title\", ~\"The Village\"), (~\"north\", ~\"52.91\"), (~\"west\", ~\"4.10\")];\n+ * let query = vec!((~\"title\", ~\"The Village\"), (~\"north\", ~\"52.91\"), (~\"west\", ~\"4.10\"));\n  * println!(\"{}\", url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n  * ```\n  */\n@@ -712,9 +713,9 @@ fn get_query_fragment(rawurl: &str) ->\n             let f = decode_component(rawurl.slice(\n                                                 1,\n                                                 rawurl.len()));\n-            return Ok((~[], Some(f)));\n+            return Ok((vec!(), Some(f)));\n         } else {\n-            return Ok((~[], None));\n+            return Ok((vec!(), None));\n         }\n     }\n     let (q, r) = split_char_first(rawurl.slice(1, rawurl.len()), '#');\n@@ -956,7 +957,7 @@ fn test_get_path() {\n \n #[cfg(test)]\n mod tests {\n-    use {encode_form_urlencoded, decode_form_urlencoded, decode_component,\n+    use {encode_form_urlencoded, decode_form_urlencoded,\n          decode, encode, from_str, encode_component, decode_component,\n          path_from_str, UserInfo, get_scheme};\n \n@@ -973,7 +974,7 @@ mod tests {\n         assert_eq!(&u.host, &~\"rust-lang.org\");\n         assert_eq!(&u.port, &Some(~\"8080\"));\n         assert_eq!(&u.path, &~\"/doc/~u\");\n-        assert_eq!(&u.query, &~[(~\"s\", ~\"v\")]);\n+        assert_eq!(&u.query, &vec!((~\"s\", ~\"v\")));\n         assert_eq!(&u.fragment, &Some(~\"something\"));\n     }\n \n@@ -984,7 +985,7 @@ mod tests {\n         let up = path_from_str(path);\n         let u = up.unwrap();\n         assert_eq!(&u.path, &~\"/doc/~u\");\n-        assert_eq!(&u.query, &~[(~\"s\", ~\"v\")]);\n+        assert_eq!(&u.query, &vec!((~\"s\", ~\"v\")));\n         assert_eq!(&u.fragment, &Some(~\"something\"));\n     }\n \n@@ -1124,15 +1125,15 @@ mod tests {\n         let url = ~\"http://rust-lang.org/doc%20uments?ba%25d%20=%23%26%2B\";\n         let u = from_str(url).unwrap();\n         assert!(u.path == ~\"/doc uments\");\n-        assert!(u.query == ~[(~\"ba%d \", ~\"#&+\")]);\n+        assert!(u.query == vec!((~\"ba%d \", ~\"#&+\")));\n     }\n \n     #[test]\n     fn test_path_component_encoding() {\n         let path = ~\"/doc%20uments?ba%25d%20=%23%26%2B\";\n         let p = path_from_str(path).unwrap();\n         assert!(p.path == ~\"/doc uments\");\n-        assert!(p.query == ~[(~\"ba%d \", ~\"#&+\")]);\n+        assert!(p.query == vec!((~\"ba%d \", ~\"#&+\")));\n     }\n \n     #[test]\n@@ -1259,16 +1260,16 @@ mod tests {\n         let mut m = HashMap::new();\n         assert_eq!(encode_form_urlencoded(&m), ~\"\");\n \n-        m.insert(~\"\", ~[]);\n-        m.insert(~\"foo\", ~[]);\n+        m.insert(~\"\", vec!());\n+        m.insert(~\"foo\", vec!());\n         assert_eq!(encode_form_urlencoded(&m), ~\"\");\n \n         let mut m = HashMap::new();\n-        m.insert(~\"foo\", ~[~\"bar\", ~\"123\"]);\n+        m.insert(~\"foo\", vec!(~\"bar\", ~\"123\"));\n         assert_eq!(encode_form_urlencoded(&m), ~\"foo=bar&foo=123\");\n \n         let mut m = HashMap::new();\n-        m.insert(~\"foo bar\", ~[~\"abc\", ~\"12 = 34\"]);\n+        m.insert(~\"foo bar\", vec!(~\"abc\", ~\"12 = 34\"));\n         assert!(encode_form_urlencoded(&m) ==\n             ~\"foo+bar=abc&foo+bar=12+%3D+34\");\n     }\n@@ -1280,7 +1281,7 @@ mod tests {\n         let s = \"a=1&foo+bar=abc&foo+bar=12+%3D+34\".as_bytes();\n         let form = decode_form_urlencoded(s);\n         assert_eq!(form.len(), 2);\n-        assert_eq!(form.get(&~\"a\"), &~[~\"1\"]);\n-        assert_eq!(form.get(&~\"foo bar\"), &~[~\"abc\", ~\"12 = 34\"]);\n+        assert_eq!(form.get(&~\"a\"), &vec!(~\"1\"));\n+        assert_eq!(form.get(&~\"foo bar\"), &vec!(~\"abc\", ~\"12 = 34\"));\n     }\n }"}]}