{"sha": "9b5accade787beb0c82fe1f6937c43bfb6abd054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNWFjY2FkZTc4N2JlYjBjODJmZTFmNjkzN2M0M2JmYjZhYmQwNTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-31T23:58:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-02T17:24:46Z"}, "message": "Fallout in tests", "tree": {"sha": "f3861c1fbd7e7d2fcd016ca49dd69e69bb317089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3861c1fbd7e7d2fcd016ca49dd69e69bb317089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5accade787beb0c82fe1f6937c43bfb6abd054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5accade787beb0c82fe1f6937c43bfb6abd054", "html_url": "https://github.com/rust-lang/rust/commit/9b5accade787beb0c82fe1f6937c43bfb6abd054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5accade787beb0c82fe1f6937c43bfb6abd054/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd31bb24e8c23f27e19da535e762361b2d8e773a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd31bb24e8c23f27e19da535e762361b2d8e773a", "html_url": "https://github.com/rust-lang/rust/commit/dd31bb24e8c23f27e19da535e762361b2d8e773a"}], "stats": {"total": 333, "additions": 117, "deletions": 216}, "files": [{"sha": "b22d12300c7d1297a05884baba7349503dc7923a", "filename": "src/test/auxiliary/coherence_orphan_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence_orphan_lib.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub trait TheTrait<T> : ::std::marker::PhantomFn<T> {\n+pub trait TheTrait<T> {\n     fn the_fn(&self);\n }"}, {"sha": "d195bd7e77bd8bb9ae335f9ad155f9c816abe413", "filename": "src/test/auxiliary/lang-item-public.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fauxiliary%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flang-item-public.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -12,12 +12,8 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n #[lang=\"sized\"]\n-pub trait Sized : PhantomFn<Self> {}\n+pub trait Sized { }\n \n #[lang=\"panic\"]\n fn panic(_: &(&'static str, &'static str, usize)) -> ! { loop {} }\n@@ -29,7 +25,7 @@ extern fn stack_exhausted() {}\n extern fn eh_personality() {}\n \n #[lang=\"copy\"]\n-pub trait Copy : PhantomFn<Self> {\n+pub trait Copy {\n     // Empty.\n }\n "}, {"sha": "0e083e4723634fa623ca4c4408adb2254175119a", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -16,12 +16,8 @@\n #![feature(no_std)]\n #![no_std]\n \n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n #[lang=\"sized\"]\n-pub trait Sized : PhantomFn<Self> {\n+pub trait Sized {\n     // Empty.\n }\n "}, {"sha": "ea0d880f4a1cc6a04f9da5415257a3a780e97379", "filename": "src/test/compile-fail/issue-13853-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-2.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::PhantomFn;\n-\n-trait FromStructReader<'a> : PhantomFn<(Self,&'a ())> { }\n+trait FromStructReader<'a> { }\n trait ResponseHook {\n      fn get<'a, T: FromStructReader<'a>>(&'a self);\n }"}, {"sha": "a4a8eac682dc3c35b888f7c64d0ecd8c739801f2", "filename": "src/test/compile-fail/issue-19660.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19660.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,12 +13,8 @@\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n-#[lang=\"phantom_fn\"]\n-trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n #[lang = \"sized\"]\n-trait Sized : PhantomFn<Self> {}\n+trait Sized { }\n \n #[start]\n fn main(_: isize, _: *const *const u8) -> isize {"}, {"sha": "d4ee93e9ca5d665df18e742aa256643c3de90c07", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -41,7 +41,7 @@ fn g<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a isize> = S(marker::PhantomData);\n     let a = &t as &Gettable<&'a isize>;\n-    //~^ ERROR cannot infer\n+    //~^ ERROR does not fulfill\n }\n \n fn foo2<'a>() {"}, {"sha": "10f245aaaf9d742566d8f427bc1d778b4c5a1a9e", "filename": "src/test/compile-fail/lint-unsafe-code.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-code.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -12,18 +12,15 @@\n #![allow(dead_code)]\n #![deny(unsafe_code)]\n \n-use std::marker::PhantomFn;\n-\n struct Bar;\n struct Bar2;\n struct Bar3;\n \n #[allow(unsafe_code)]\n mod allowed_unsafe {\n-    use std::marker::PhantomFn;\n     fn allowed() { unsafe {} }\n     unsafe fn also_allowed() {}\n-    unsafe trait AllowedUnsafe : PhantomFn<Self> {}\n+    unsafe trait AllowedUnsafe { }\n     unsafe impl AllowedUnsafe for super::Bar {}\n }\n \n@@ -34,7 +31,7 @@ macro_rules! unsafe_in_macro {\n }\n \n unsafe fn baz() {} //~ ERROR: declaration of an `unsafe` function\n-unsafe trait Foo : PhantomFn<Self> {} //~ ERROR: declaration of an `unsafe` trait\n+unsafe trait Foo {} //~ ERROR: declaration of an `unsafe` trait\n unsafe impl Foo for Bar {} //~ ERROR: implementation of an `unsafe` trait\n \n trait Baz {"}, {"sha": "518c45ac9dff6d65a2f79f7464d45538557965bd", "filename": "src/test/compile-fail/object-safety-phantom-fn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fobject-safety-phantom-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fobject-safety-phantom-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-phantom-fn.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,12 +13,10 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-use std::marker::PhantomFn;\n-\n-trait Baz : PhantomFn<Self> {\n+trait Baz {\n }\n \n-trait Bar<T> : PhantomFn<(Self, T)> {\n+trait Bar<T> {\n }\n \n fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {"}, {"sha": "8580749084d22da1b39a356468d43611f01a0c57", "filename": "src/test/compile-fail/on-unimplemented-bad-anno.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,11 +13,8 @@\n \n #![allow(unused)]\n \n-use std::marker;\n-\n #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n trait Foo<Bar, Baz, Quux>\n-    : marker::PhantomFn<(Self,Bar,Baz,Quux)>\n {}\n \n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n@@ -28,19 +25,16 @@ trait MyFromIterator<A> {\n \n #[rustc_on_unimplemented] //~ ERROR this attribute must have a value\n trait BadAnnotation1\n-    : marker::MarkerTrait\n {}\n \n #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n //~^ ERROR there is no type parameter C on trait BadAnnotation2\n trait BadAnnotation2<A,B>\n-    : marker::PhantomFn<(Self,A,B)>\n {}\n \n #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{}>`\"]\n //~^ only named substitution parameters are allowed\n trait BadAnnotation3<A,B>\n-    : marker::PhantomFn<(Self,A,B)>\n {}\n \n pub fn main() {"}, {"sha": "c4eb467c4f96143da28576de025979f19b89d101", "filename": "src/test/compile-fail/on-unimplemented.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,11 +11,8 @@\n \n #![feature(on_unimplemented)]\n \n-use std::marker;\n-\n #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n trait Foo<Bar, Baz, Quux>\n-    : marker::PhantomFn<(Self,Bar,Baz,Quux)>\n {}\n \n fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {"}, {"sha": "f728fdfaf9a80141e2311dac42ac67b4d47ac0ab", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,15 +11,11 @@\n #![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n #[lang=\"sized\"]\n-pub trait Sized : PhantomFn<Self> {}\n+pub trait Sized {}\n \n #[lang=\"copy\"]\n-pub trait Copy : PhantomFn<Self> {}\n+pub trait Copy {}\n \n mod bar {\n     // shouldn't bring in too much"}, {"sha": "bcb46663aa849da96e36e45d9275453948cdbff0", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,12 +11,8 @@\n #![feature(lang_items, start, no_std)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n-#[lang = \"sized\"] pub trait Sized : PhantomFn<Self> {}\n-#[lang=\"copy\"] pub trait Copy : PhantomFn<Self> {}\n+#[lang = \"sized\"] pub trait Sized {}\n+#[lang=\"copy\"] pub trait Copy {}\n \n // Test to make sure that private items imported through globs remain private\n // when  they're used."}, {"sha": "9a13541bd0b17a761997824f3b0f5d0f3fcdd757", "filename": "src/test/compile-fail/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -15,11 +15,9 @@\n \n #![allow(dead_code)]\n \n-use std::marker::PhantomFn;\n-\n ///////////////////////////////////////////////////////////////////////////\n \n-pub trait TheTrait: PhantomFn<Self, Self> {\n+pub trait TheTrait {\n     type TheAssocType;\n }\n "}, {"sha": "0d3d2e296bec62e2026ad745a5ca4ab0dda52498", "filename": "src/test/compile-fail/regions-assoc-type-outlives-container-hrtb.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-hrtb.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -14,11 +14,9 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n-use std::marker::PhantomFn;\n-\n ///////////////////////////////////////////////////////////////////////////\n \n-pub trait TheTrait<'b> : PhantomFn<&'b Self,Self> {\n+pub trait TheTrait<'b> {\n     type TheAssocType;\n }\n "}, {"sha": "2ceaea98d279703f89aaf873deed387fca41e601", "filename": "src/test/compile-fail/regions-assoc-type-outlives-container-wc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container-wc.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -15,11 +15,9 @@\n \n #![allow(dead_code)]\n \n-use std::marker::PhantomFn;\n-\n ///////////////////////////////////////////////////////////////////////////\n \n-pub trait TheTrait: PhantomFn<Self, Self> {\n+pub trait TheTrait {\n     type TheAssocType;\n }\n "}, {"sha": "e3e57ff17115cca9022f50950a3187e4111258b1", "filename": "src/test/compile-fail/regions-assoc-type-outlives-container.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-assoc-type-outlives-container.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -15,11 +15,9 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n-use std::marker::PhantomFn;\n-\n ///////////////////////////////////////////////////////////////////////////\n \n-pub trait TheTrait: PhantomFn<Self, Self> {\n+pub trait TheTrait {\n     type TheAssocType;\n }\n "}, {"sha": "5472e09ba4be4b95f429820521c2878768ce0b11", "filename": "src/test/compile-fail/regions-close-object-into-object-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,12 +11,10 @@\n #![feature(box_syntax)]\n #![allow(warnings)]\n \n-use std::marker::PhantomFn;\n-\n-trait A<T> : PhantomFn<(Self,T)> { }\n+trait A<T> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X : ::std::marker::MarkerTrait {}\n+trait X { }\n \n impl<'a, T> X for B<'a, T> {}\n "}, {"sha": "1ef000852d561c2aa65c7c8d0af14b02373f6aab", "filename": "src/test/compile-fail/regions-close-object-into-object-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -10,12 +10,10 @@\n \n #![feature(box_syntax)]\n \n-use std::marker::PhantomFn;\n-\n-trait A<T> : PhantomFn<(Self,T)> { }\n+trait A<T> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X : PhantomFn<Self> {}\n+trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {"}, {"sha": "b7dc759b2717f6c12f86a2fab99d3a61af190a7d", "filename": "src/test/compile-fail/regions-close-object-into-object-3.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,15 +11,13 @@\n #![feature(box_syntax)]\n #![allow(warnings)]\n \n-use std::marker::PhantomFn;\n-\n-trait A<T> : PhantomFn<(Self,T)> {}\n+trait A<T> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X : PhantomFn<Self> {}\n+trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n-fn h<'a, T, U>(v: Box<A<U>+'static>) -> Box<X+'static> {\n+fn h<'a, T, U:'static>(v: Box<A<U>+'static>) -> Box<X+'static> {\n     box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n }\n "}, {"sha": "247578d253ea0fc1961dff65b32eabf2e073326c", "filename": "src/test/compile-fail/regions-close-object-into-object-4.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -10,12 +10,10 @@\n \n #![feature(box_syntax)]\n \n-use std::marker::PhantomFn;\n-\n-trait A<T> : PhantomFn<(Self,T)> {}\n+trait A<T> { }\n struct B<'a, T>(&'a (A<T>+'a));\n \n-trait X : PhantomFn<Self> {}\n+trait X { }\n impl<'a, T> X for B<'a, T> {}\n \n fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {"}, {"sha": "bb80c763a8b39acc4325b718a76180198209691d", "filename": "src/test/compile-fail/required-lang-item.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frequired-lang-item.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,11 +11,7 @@\n #![feature(lang_items, no_std)]\n #![no_std]\n \n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<T:?Sized> { }\n-impl<T:?Sized, U:?Sized> PhantomFn<T> for U { }\n-\n-#[lang=\"sized\"] pub trait Sized : PhantomFn<Self> {}\n+#[lang=\"sized\"] pub trait Sized { }\n \n // error-pattern:requires `start` lang_item\n "}, {"sha": "a2369f8ffb4f2ca4b3cdf4a9bd8e98b7128ded12", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-1.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,8 +13,7 @@\n \n use std::marker;\n \n-trait A : marker::PhantomFn<Self> {\n-}\n+trait A { }\n \n trait B: A {}\n "}, {"sha": "beabdcea2bbe9f5beb3571ebeb19eb9e84e07cc9", "filename": "src/test/compile-fail/trait-bounds-impl-comparison-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-impl-comparison-2.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -15,7 +15,6 @@ trait Iterator<A> {\n }\n \n trait IteratorUtil<A>\n-    : ::std::marker::PhantomFn<(),A>\n {\n     fn zip<B, U: Iterator<U>>(self, other: U) -> ZipIterator<Self, U>;\n }"}, {"sha": "dc5576aee650a56ed814b9bbcd9abc09d5f24723", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -16,14 +16,12 @@\n #![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n-use std::marker::PhantomFn;\n-\n trait Foo<T> {\n     type Output;\n     fn dummy(&self, t: T, u: Self::Output);\n }\n \n-trait Eq<X: ?Sized> : PhantomFn<(Self,X)> { }\n+trait Eq<X: ?Sized> { }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n "}, {"sha": "a6f59b78823444d5ee4e9674d455dab9cf4bae82", "filename": "src/test/compile-fail/unboxed-closure-sugar-lifetime-elision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-lifetime-elision.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -23,7 +23,7 @@ trait Foo<T> {\n     fn dummy(&self, t: T);\n }\n \n-trait Eq<X: ?Sized> : marker::PhantomFn<(Self, X)> { }\n+trait Eq<X: ?Sized> { }\n impl<X: ?Sized> Eq<X> for X { }\n fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n "}, {"sha": "e47d0c33d8f3b2a6f1749ec74227d16e66d5e8b8", "filename": "src/test/compile-fail/variance-contravariant-arg-object.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-object.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -10,6 +10,9 @@\n \n #![allow(dead_code)]\n \n+// This test was previously testing variance on traits.\n+// But now that it is removed, both cases error.\n+\n trait Get<T> : 'static {\n     fn get(&self, t: T);\n }\n@@ -25,7 +28,8 @@ fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n                                    -> Box<Get<&'max i32>>\n     where 'max : 'min\n {\n-    v\n+    // Previously OK:\n+    v //~ ERROR mismatched types\n }\n \n fn main() { }"}, {"sha": "b96e19220d04b68701021bf060963ea49da9af90", "filename": "src/test/compile-fail/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-arg-trait-match.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -23,7 +23,9 @@ fn get_min_from_max<'min, 'max, G>()\n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'min i32>\n {\n-    impls_get::<G,&'max i32>()\n+    // Previously OK, but now an error because traits are invariant:\n+\n+    impls_get::<G,&'max i32>() //~ ERROR mismatched types\n }\n \n fn impls_get<G,T>() where G : Get<T> { }"}, {"sha": "9d2766d878b3456eaf3495bdd96a4ff19a294820", "filename": "src/test/compile-fail/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-contravariant-self-trait-match.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -23,7 +23,10 @@ fn get_min_from_max<'min, 'max, G>()\n fn get_max_from_min<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'min G : Get\n {\n-    impls_get::<&'max G>();\n+    // Previously OK, but now error because traits are invariant with\n+    // respect to all inputs.\n+\n+    impls_get::<&'max G>(); //~ ERROR mismatched types\n }\n \n fn impls_get<G>() where G : Get { }"}, {"sha": "757c1c9a8a268e239b604cd2a071b5deb27c1bf3", "filename": "src/test/compile-fail/variance-covariant-arg-object.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-object.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -18,7 +18,8 @@ fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n                                 -> Box<Get<&'min i32>>\n     where 'max : 'min\n {\n-    v\n+    // Previously OK, now an error as traits are invariant.\n+    v //~ ERROR mismatched types\n }\n \n fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)"}, {"sha": "097f8eb9864e233654d1348fbe787ad00b48e64b", "filename": "src/test/compile-fail/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-arg-trait-match.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -17,7 +17,8 @@ trait Get<T> {\n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : Get<&'max i32>\n {\n-    impls_get::<G,&'min i32>()\n+    // Previously OK, now an error as traits are invariant.\n+    impls_get::<G,&'min i32>() //~ ERROR mismatched types\n }\n \n fn get_max_from_min<'min, 'max, G>()"}, {"sha": "57ea367b49c30ae2c4ad21cb6b2e915e4fcf9257", "filename": "src/test/compile-fail/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-covariant-self-trait-match.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -17,7 +17,8 @@ trait Get {\n fn get_min_from_max<'min, 'max, G>()\n     where 'max : 'min, G : 'max, &'max G : Get\n {\n-    impls_get::<&'min G>();\n+    // Previously OK, now an error as traits are invariant.\n+    impls_get::<&'min G>(); //~ ERROR mismatched types\n }\n \n fn get_max_from_min<'min, 'max, G>()"}, {"sha": "dfa5dc1444151ac76e58cea7aa5a71443fd62657", "filename": "src/test/compile-fail/variance-region-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-region-bounds.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,11 +13,11 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-trait Foo: 'static { //~ ERROR types=[[];[-];[]]\n+trait Foo: 'static { //~ ERROR types=[[];[o];[]]\n }\n \n #[rustc_variance]\n-trait Bar<T> { //~ ERROR types=[[+];[-];[]]\n+trait Bar<T> { //~ ERROR types=[[o];[o];[]]\n     fn do_it(&self)\n         where T: 'static;\n }"}, {"sha": "037fff72c80228085d4bdc5b0c769de5d386ca99", "filename": "src/test/compile-fail/variance-regions-unused-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-regions-unused-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-regions-unused-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-unused-direct.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -18,7 +18,7 @@ struct Struct<'a, 'd> { //~ ERROR parameter `'d` is never used\n     field: &'a [i32]\n }\n \n-trait Trait<'a, 'd> { //~ ERROR parameter `'d` is never used\n+trait Trait<'a, 'd> { // OK on traits\n     fn method(&'a self);\n }\n "}, {"sha": "222d8338aa2c4c5ad0c282916cc039cdc9e9e2e5", "filename": "src/test/compile-fail/variance-trait-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -16,12 +16,12 @@\n // influence variance.\n \n #[rustc_variance]\n-trait Getter<T> { //~ ERROR types=[[+];[-];[]]\n+trait Getter<T> { //~ ERROR types=[[o];[o];[]]\n     fn get(&self) -> T;\n }\n \n #[rustc_variance]\n-trait Setter<T> { //~ ERROR types=[[-];[-];[]]\n+trait Setter<T> { //~ ERROR types=[[o];[o];[]]\n     fn get(&self, T);\n }\n \n@@ -37,16 +37,16 @@ enum TestEnum<U,T:Setter<U>> {//~ ERROR types=[[*, +];[];[]]\n }\n \n #[rustc_variance]\n-trait TestTrait<U,T:Setter<U>> { //~ ERROR types=[[-, +];[-];[]]\n+trait TestTrait<U,T:Setter<U>> { //~ ERROR types=[[o, o];[o];[]]\n     fn getter(&self, u: U) -> T;\n }\n \n #[rustc_variance]\n-trait TestTrait2<U> : Getter<U> { //~ ERROR types=[[+];[-];[]]\n+trait TestTrait2<U> : Getter<U> { //~ ERROR types=[[o];[o];[]]\n }\n \n #[rustc_variance]\n-trait TestTrait3<U> { //~ ERROR types=[[-];[-];[]]\n+trait TestTrait3<U> { //~ ERROR types=[[o];[o];[]]\n     fn getter<T:Getter<U>>(&self);\n }\n "}, {"sha": "49dc1e68c221f8302d9f1d20973c525d35b603c0", "filename": "src/test/compile-fail/variance-trait-matching.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,22 +8,43 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Issue #5781. Tests that subtyping is handled properly in trait matching.\n+// pretty-expanded FIXME #23616\n \n-trait Make<'a> {\n-    fn make(x: &'a mut isize) -> Self;\n+#![allow(dead_code)]\n+\n+// Get<T> is covariant in T\n+trait Get<T> {\n+    fn get(&self) -> T;\n+}\n+\n+struct Cloner<T:Clone> {\n+    t: T\n }\n \n-impl<'a> Make<'a> for &'a mut isize {\n-    fn make(x: &'a mut isize) -> &'a mut isize {\n-        x\n+impl<T:Clone> Get<T> for Cloner<T> {\n+    fn get(&self) -> T {\n+        self.t.clone()\n     }\n }\n \n-fn f() -> &'static mut isize {\n-    let mut x = 1;\n-    let y: &'static mut isize = Make::make(&mut x);   //~ ERROR `x` does not live long enough\n-    y\n+fn get<'a, G>(get: &G) -> i32\n+    where G : Get<&'a i32>\n+{\n+    // This fails to type-check because, without variance, we can't\n+    // use `G : Get<&'a i32>` as evidence that `G : Get<&'b i32>`,\n+    // even if `'a : 'b`.\n+    pick(get, &22) //~ ERROR cannot infer\n }\n \n-fn main() {}\n+fn pick<'b, G>(get: &'b G, if_odd: &'b i32) -> i32\n+    where G : Get<&'b i32>\n+{\n+    let v = *get.get();\n+    if v % 2 != 0 { v } else { *if_odd }\n+}\n+\n+fn main() {\n+    let x = Cloner { t: &23 };\n+    let y = get(&x);\n+    assert_eq!(y, 23);\n+}"}, {"sha": "a02f20656e7b579362431f2150b53c18aa9523dd", "filename": "src/test/compile-fail/variance-types-bounds.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-types-bounds.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -37,12 +37,12 @@ struct TestIndirect2<A:'static, B:'static> { //~ ERROR types=[[o, o];[];[]]\n }\n \n #[rustc_variance]\n-trait Getter<A> { //~ ERROR types=[[+];[-];[]]\n+trait Getter<A> { //~ ERROR types=[[o];[o];[]]\n     fn get(&self) -> A;\n }\n \n #[rustc_variance]\n-trait Setter<A> { //~ ERROR types=[[-];[o];[]]\n+trait Setter<A> { //~ ERROR types=[[o];[o];[]]\n     fn set(&mut self, a: A);\n }\n \n@@ -53,7 +53,7 @@ trait GetterSetter<A> { //~ ERROR types=[[o];[o];[]]\n }\n \n #[rustc_variance]\n-trait GetterInTypeBound<A> { //~ ERROR types=[[-];[-];[]]\n+trait GetterInTypeBound<A> { //~ ERROR types=[[o];[o];[]]\n     // Here, the use of `A` in the method bound *does* affect\n     // variance.  Think of it as if the method requested a dictionary\n     // for `T:Getter<A>`.  Since this dictionary is an input, it is\n@@ -63,12 +63,12 @@ trait GetterInTypeBound<A> { //~ ERROR types=[[-];[-];[]]\n }\n \n #[rustc_variance]\n-trait SetterInTypeBound<A> { //~ ERROR types=[[+];[-];[]]\n+trait SetterInTypeBound<A> { //~ ERROR types=[[o];[o];[]]\n     fn do_it<T:Setter<A>>(&self);\n }\n \n #[rustc_variance]\n-struct TestObject<A, R> { //~ ERROR types=[[-, +];[];[]]\n+struct TestObject<A, R> { //~ ERROR types=[[o, o];[];[]]\n     n: Box<Setter<A>+Send>,\n     m: Box<Getter<R>+Send>,\n }"}, {"sha": "407282e5ce0d4bf0356af0ef94dd22725b97fab3", "filename": "src/test/compile-fail/variance-unused-region-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-unused-region-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-unused-region-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-unused-region-param.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -12,6 +12,6 @@\n \n struct SomeStruct<'a> { x: u32 } //~ ERROR parameter `'a` is never used\n enum SomeEnum<'a> { Nothing } //~ ERROR parameter `'a` is never used\n-trait SomeTrait<'a> { fn foo(&self); } //~ ERROR parameter `'a` is never used\n+trait SomeTrait<'a> { fn foo(&self); } // OK on traits.\n \n fn main() {}"}, {"sha": "862d842d62c2316abdd7a1584fe5744a09182920", "filename": "src/test/compile-fail/variance-unused-type-param.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-unused-type-param.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -21,10 +21,6 @@ enum SomeEnum<A> { Nothing }\n //~^ ERROR parameter `A` is never used\n //~| HELP PhantomData\n \n-trait SomeTrait<A> { fn foo(&self); }\n-//~^ ERROR parameter `A` is never used\n-//~| HELP PhantomFn\n-\n // Here T might *appear* used, but in fact it isn't.\n enum ListCell<T> {\n //~^ ERROR parameter `T` is never used"}, {"sha": "563fe79e537321bc114eaefd7da0868b207be71e", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -70,14 +70,10 @@ pub fn bar(a: i32x4, b: i32x4) -> i32x4 {\n }\n \n #[lang = \"sized\"]\n-pub trait Sized : PhantomFn<Self> {}\n+pub trait Sized { }\n \n #[lang = \"copy\"]\n-pub trait Copy : PhantomFn<Self> {}\n-\n-#[lang=\"phantom_fn\"]\n-pub trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n+pub trait Copy { }\n \n mod core {\n     pub mod marker {"}, {"sha": "9dbae19338809ccfaad8eb382162c28dcf6c3b5b", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -11,15 +11,11 @@\n #![feature(lang_items, no_std)]\n #![no_std]\n \n-#[lang=\"phantom_fn\"]\n-trait PhantomFn<A:?Sized,R:?Sized=()> { }\n-impl<A:?Sized, R:?Sized, U:?Sized> PhantomFn<A,R> for U { }\n-\n #[lang=\"copy\"]\n-trait Copy : PhantomFn<Self> { }\n+trait Copy { }\n \n #[lang=\"sized\"]\n-trait Sized : PhantomFn<Self>  { }\n+trait Sized { }\n \n #[lang=\"start\"]\n fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize { 0 }"}, {"sha": "082a39f56312ec5a56b5607a2509941289e95d56", "filename": "src/test/run-pass/coherence-subtyping.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fcoherence-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fcoherence-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-subtyping.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -16,7 +16,6 @@ trait Contravariant {\n }\n \n impl Contravariant for for<'a,'b> fn(&'a u8, &'b u8) {\n-    //~^ ERROR E0119\n }\n \n impl Contravariant for for<'a> fn(&'a u8, &'a u8) {\n@@ -29,7 +28,6 @@ trait Covariant {\n }\n \n impl Covariant for for<'a,'b> fn(&'a u8, &'b u8) {\n-    //~^ ERROR E0119\n }\n \n impl Covariant for for<'a> fn(&'a u8, &'a u8) {\n@@ -38,7 +36,7 @@ impl Covariant for for<'a> fn(&'a u8, &'a u8) {\n ///////////////////////////////////////////////////////////////////////////\n \n trait Invariant {\n-    fn foo(&self) -> Self { }\n+    fn foo(&self) { }\n }\n \n impl Invariant for for<'a,'b> fn(&'a u8, &'b u8) {", "previous_filename": "src/test/compile-fail/coherence-subtyping.rs"}, {"sha": "86b41284cdf35ad35e79cc658bc4511109c5b07d", "filename": "src/test/run-pass/cycle-generic-bound.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-generic-bound.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -12,9 +12,7 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::marker::PhantomFn;\n-\n-trait Chromosome<X: Chromosome<i32>> : PhantomFn<(Self,X)> {\n+trait Chromosome<X: Chromosome<i32>> {\n }\n \n fn main() { }"}, {"sha": "51a871d59b3615fd50deb8bc912042dde8948bfd", "filename": "src/test/run-pass/issue-22356.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fissue-22356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fissue-22356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22356.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::marker::{PhantomData, PhantomFn};\n+use std::marker::PhantomData;\n \n pub struct Handle<T, I>(T, I);\n \n@@ -34,7 +34,7 @@ impl<D: Device, T> BufferHandle<D, T> {\n \n pub type RawBufferHandle<D: Device> = Handle<<D as Device>::Buffer, String>;\n \n-pub trait Device: PhantomFn<Self> {\n+pub trait Device {\n     type Buffer;\n }\n "}, {"sha": "0ffbc432aaeb53e98e1b49ec9780aefe802b941b", "filename": "src/test/run-pass/regions-early-bound-lifetime-in-assoc-fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-lifetime-in-assoc-fn.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -27,9 +27,7 @@ pub trait Decoder<'v> {\n     fn read(&mut self) -> Value<'v>;\n }\n \n-pub trait Decodable<'v, D: Decoder<'v>>\n-    : marker::PhantomFn<(), &'v isize>\n-{\n+pub trait Decodable<'v, D: Decoder<'v>> {\n     fn decode(d: &mut D) -> Self;\n }\n "}, {"sha": "449d6b37e9f894183d336845f66993600876a5c1", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -12,17 +12,17 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::marker::{PhantomData, PhantomFn};\n+use std::marker::PhantomData;\n \n-trait T1 : PhantomFn<Self> { }\n-pub trait T2 : PhantomFn<Self> { }\n-trait T3<X: T1> : T2 + PhantomFn<X> { }\n-trait T4<X: ?Sized> : PhantomFn<(Self,X)> {}\n-trait T5<X: ?Sized, Y> : PhantomFn<(Self,X,Y)> {}\n-trait T6<Y, X: ?Sized> : PhantomFn<(Self,X,Y)> {}\n-trait T7<X: ?Sized, Y: ?Sized> : PhantomFn<(Self,X,Y)> {}\n-trait T8<X: ?Sized+T2> : PhantomFn<(Self,X)> {}\n-trait T9<X: T2 + ?Sized> : PhantomFn<(Self,X)> {}\n+trait T1  { }\n+pub trait T2  { }\n+trait T3<X: T1> : T2 { }\n+trait T4<X: ?Sized> { }\n+trait T5<X: ?Sized, Y> { }\n+trait T6<Y, X: ?Sized> { }\n+trait T7<X: ?Sized, Y: ?Sized> { }\n+trait T8<X: ?Sized+T2> { }\n+trait T9<X: T2 + ?Sized> { }\n struct S1<X: ?Sized>(PhantomData<X>);\n enum E<X: ?Sized> { E1(PhantomData<X>) }\n impl <X: ?Sized> T1 for S1<X> {}"}, {"sha": "5a179bfc7d47f8b28c1384e822df68b2a660433d", "filename": "src/test/run-pass/variance-trait-matching.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dd31bb24e8c23f27e19da535e762361b2d8e773a/src%2Ftest%2Frun-pass%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd31bb24e8c23f27e19da535e762361b2d8e773a/src%2Ftest%2Frun-pass%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariance-trait-matching.rs?ref=dd31bb24e8c23f27e19da535e762361b2d8e773a", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// pretty-expanded FIXME #23616\n-\n-#![allow(dead_code)]\n-\n-// Get<T> is covariant in T\n-trait Get<T> {\n-    fn get(&self) -> T;\n-}\n-\n-struct Cloner<T:Clone> {\n-    t: T\n-}\n-\n-impl<T:Clone> Get<T> for Cloner<T> {\n-    fn get(&self) -> T {\n-        self.t.clone()\n-    }\n-}\n-\n-fn get<'a, G>(get: &G) -> i32\n-    where G : Get<&'a i32>\n-{\n-    // This call only type checks if we can use `G : Get<&'a i32>` as\n-    // evidence that `G : Get<&'b i32>` where `'a : 'b`.\n-    pick(get, &22)\n-}\n-\n-fn pick<'b, G>(get: &'b G, if_odd: &'b i32) -> i32\n-    where G : Get<&'b i32>\n-{\n-    let v = *get.get();\n-    if v % 2 != 0 { v } else { *if_odd }\n-}\n-\n-fn main() {\n-    let x = Cloner { t: &23 };\n-    let y = get(&x);\n-    assert_eq!(y, 23);\n-}"}, {"sha": "eb95b13d3fa5bed6249ff84e3b9faf0b03082c8e", "filename": "src/test/run-pass/where-for-self.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5accade787beb0c82fe1f6937c43bfb6abd054/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-for-self.rs?ref=9b5accade787beb0c82fe1f6937c43bfb6abd054", "patch": "@@ -13,18 +13,13 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::marker::PhantomFn;\n-\n static mut COUNT: u32 = 1;\n \n-trait Bar<'a>\n-    : PhantomFn<&'a ()>\n-{\n+trait Bar<'a> {\n     fn bar(&self);\n }\n \n trait Baz<'a>\n-    : PhantomFn<&'a ()>\n {\n     fn baz(&self);\n }"}]}