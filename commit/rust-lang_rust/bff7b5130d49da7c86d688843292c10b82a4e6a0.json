{"sha": "bff7b5130d49da7c86d688843292c10b82a4e6a0", "node_id": "C_kwDOAAsO6NoAKGJmZjdiNTEzMGQ0OWRhN2M4NmQ2ODg4NDMyOTJjMTBiODJhNGU2YTA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-24T07:22:24Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-25T05:40:38Z"}, "message": "move fast reject test out of `SelectionContext::match_impl`.\n\n`match_impl` has two call sites. For one of them (within `rematch_impl`)\nthe fast reject test isn't necessary, because any rejection would\nrepresent a compiler bug.\n\nThis commit moves the fast reject test to the other `match_impl` call\nsite, in `assemble_candidates_from_impls`. This lets us move the fast\nreject test outside the `probe` call in that function. This avoids the\ntaking of useless snapshots when the fast reject test succeeds, which\ngives a performance win when compiling the `bitmaps` and `nalgebra`\ncrates.\n\nCo-authored-by: name <n.nethercote@gmail.com>", "tree": {"sha": "d87c08d76572f005112a6fa98cccca2ff09aeaa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87c08d76572f005112a6fa98cccca2ff09aeaa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff7b5130d49da7c86d688843292c10b82a4e6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff7b5130d49da7c86d688843292c10b82a4e6a0", "html_url": "https://github.com/rust-lang/rust/commit/bff7b5130d49da7c86d688843292c10b82a4e6a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff7b5130d49da7c86d688843292c10b82a4e6a0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76277c6c4cd7f175efd2d86477447bd6577aea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76277c6c4cd7f175efd2d86477447bd6577aea2", "html_url": "https://github.com/rust-lang/rust/commit/a76277c6c4cd7f175efd2d86477447bd6577aea2"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "c8b4303e1e0fefe1d4797f5808bf035f1b22759c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bff7b5130d49da7c86d688843292c10b82a4e6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff7b5130d49da7c86d688843292c10b82a4e6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=bff7b5130d49da7c86d688843292c10b82a4e6a0", "patch": "@@ -539,8 +539,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n             |impl_def_id| {\n+                // Before we create the substitutions and everything, first\n+                // consider a \"quick reject\". This avoids creating more types\n+                // and so forth that we need to.\n+                let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n+                if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n+                    return;\n+                }\n+\n                 self.infcx.probe(|_| {\n-                    if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {\n+                    if let Ok(_substs) = self.match_impl(impl_def_id, impl_trait_ref, obligation) {\n                         candidates.vec.push(ImplCandidate(impl_def_id));\n                     }\n                 });"}, {"sha": "c7ebc194ea5ae037beae2555a68447710256a788", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bff7b5130d49da7c86d688843292c10b82a4e6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff7b5130d49da7c86d688843292c10b82a4e6a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=bff7b5130d49da7c86d688843292c10b82a4e6a0", "patch": "@@ -2043,7 +2043,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         impl_def_id: DefId,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Normalized<'tcx, SubstsRef<'tcx>> {\n-        match self.match_impl(impl_def_id, obligation) {\n+        let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n+        match self.match_impl(impl_def_id, impl_trait_ref, obligation) {\n             Ok(substs) => substs,\n             Err(()) => {\n                 self.infcx.tcx.sess.delay_span_bug(\n@@ -2070,17 +2071,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn match_impl(\n         &mut self,\n         impl_def_id: DefId,\n+        impl_trait_ref: EarlyBinder<ty::TraitRef<'tcx>>,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {\n-        let impl_trait_ref = self.tcx().bound_impl_trait_ref(impl_def_id).unwrap();\n-\n-        // Before we create the substitutions and everything, first\n-        // consider a \"quick reject\". This avoids creating more types\n-        // and so forth that we need to.\n-        if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n-            return Err(());\n-        }\n-\n         let placeholder_obligation =\n             self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);\n         let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;"}]}