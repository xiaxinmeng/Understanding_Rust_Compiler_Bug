{"sha": "3a55b5bf01ddc581a3f00fa56db725db93a131c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTViNWJmMDFkZGM1ODFhM2YwMGZhNTZkYjcyNWRiOTNhMTMxYzY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T10:50:12Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-10-14T10:50:12Z"}, "message": "make_mut_slice", "tree": {"sha": "b3cbc2d477141507f76f5f973daa9fb5545bd731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cbc2d477141507f76f5f973daa9fb5545bd731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a55b5bf01ddc581a3f00fa56db725db93a131c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a55b5bf01ddc581a3f00fa56db725db93a131c6", "html_url": "https://github.com/rust-lang/rust/commit/3a55b5bf01ddc581a3f00fa56db725db93a131c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a55b5bf01ddc581a3f00fa56db725db93a131c6/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b462eb96b867cd38c60fb3d94ffd7688cec70f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/b462eb96b867cd38c60fb3d94ffd7688cec70f21", "html_url": "https://github.com/rust-lang/rust/commit/b462eb96b867cd38c60fb3d94ffd7688cec70f21"}], "stats": {"total": 65, "additions": 23, "deletions": 42}, "files": [{"sha": "cc9746f6d752fcbcbc4a1cc53815999c1b2abac6", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3a55b5bf01ddc581a3f00fa56db725db93a131c6", "patch": "@@ -17,7 +17,7 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use crate::{\n-    db::HirDatabase, expr::ExprId, type_ref::Mutability, util::make_mut_arc_slice, Adt, Crate,\n+    db::HirDatabase, expr::ExprId, type_ref::Mutability, util::make_mut_slice, Adt, Crate,\n     DefWithBody, GenericParams, HasGenericParams, Name, Trait, TypeAlias,\n };\n use display::{HirDisplay, HirFormatter};\n@@ -308,11 +308,9 @@ impl Substs {\n     }\n \n     pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        make_mut_arc_slice(&mut self.0, |s| {\n-            for t in s {\n-                t.walk_mut(f);\n-            }\n-        });\n+        for t in make_mut_slice(&mut self.0) {\n+            t.walk_mut(f);\n+        }\n     }\n \n     pub fn as_single(&self) -> &Ty {\n@@ -538,11 +536,9 @@ impl TypeWalk for FnSig {\n     }\n \n     fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        make_mut_arc_slice(&mut self.params_and_return, |s| {\n-            for t in s {\n-                t.walk_mut(f);\n-            }\n-        });\n+        for t in make_mut_slice(&mut self.params_and_return) {\n+            t.walk_mut(f);\n+        }\n     }\n }\n \n@@ -752,11 +748,9 @@ impl TypeWalk for Ty {\n                 p_ty.parameters.walk_mut(f);\n             }\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n-                make_mut_arc_slice(predicates, |s| {\n-                    for p in s {\n-                        p.walk_mut(f);\n-                    }\n-                });\n+                for p in make_mut_slice(predicates) {\n+                    p.walk_mut(f);\n+                }\n             }\n             Ty::Param { .. } | Ty::Bound(_) | Ty::Infer(_) | Ty::Unknown => {}\n         }"}, {"sha": "014c7981fee609a21d35907f2a0c717960e120aa", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=3a55b5bf01ddc581a3f00fa56db725db93a131c6", "patch": "@@ -6,7 +6,7 @@ use crate::ty::{\n     Canonical, InEnvironment, InferTy, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty,\n     TypeWalk,\n };\n-use crate::util::make_mut_arc_slice;\n+use crate::util::make_mut_slice;\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn canonicalizer<'b>(&'b mut self) -> Canonicalizer<'a, 'b, D>\n@@ -76,11 +76,9 @@ where\n     }\n \n     fn do_canonicalize_trait_ref(&mut self, mut trait_ref: TraitRef) -> TraitRef {\n-        make_mut_arc_slice(&mut trait_ref.substs.0, |tys| {\n-            for ty in tys {\n-                *ty = self.do_canonicalize_ty(ty.clone());\n-            }\n-        });\n+        for ty in make_mut_slice(&mut trait_ref.substs.0) {\n+            *ty = self.do_canonicalize_ty(ty.clone());\n+        }\n         trait_ref\n     }\n \n@@ -92,11 +90,9 @@ where\n     }\n \n     fn do_canonicalize_projection_ty(&mut self, mut projection_ty: ProjectionTy) -> ProjectionTy {\n-        make_mut_arc_slice(&mut projection_ty.parameters.0, |params| {\n-            for ty in params {\n-                *ty = self.do_canonicalize_ty(ty.clone());\n-            }\n-        });\n+        for ty in make_mut_slice(&mut projection_ty.parameters.0) {\n+            *ty = self.do_canonicalize_ty(ty.clone());\n+        }\n         projection_ty\n     }\n "}, {"sha": "366556134b2a66c4fd318225973cba5b1d063968", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=3a55b5bf01ddc581a3f00fa56db725db93a131c6", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     resolve::{Resolver, TypeNs},\n     ty::Adt,\n     type_ref::{TypeBound, TypeRef},\n-    util::make_mut_arc_slice,\n+    util::make_mut_slice,\n     BuiltinType, Const, Enum, EnumVariant, Function, ModuleDef, Path, Static, Struct, StructField,\n     Trait, TypeAlias, Union,\n };\n@@ -391,9 +391,7 @@ impl TraitRef {\n     ) -> Self {\n         let mut substs = TraitRef::substs_from_path(db, resolver, segment, resolved);\n         if let Some(self_ty) = explicit_self_ty {\n-            make_mut_arc_slice(&mut substs.0, |substs| {\n-                substs[0] = self_ty;\n-            });\n+            make_mut_slice(&mut substs.0)[0] = self_ty;\n         }\n         TraitRef { trait_: resolved, substs }\n     }"}, {"sha": "0095ee45d3c60fddf8a2db5f7892a4c219cc7e2e", "filename": "crates/ra_hir/src/util.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a55b5bf01ddc581a3f00fa56db725db93a131c6/crates%2Fra_hir%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Futil.rs?ref=3a55b5bf01ddc581a3f00fa56db725db93a131c6", "patch": "@@ -4,16 +4,9 @@ use std::sync::Arc;\n \n /// Helper for mutating `Arc<[T]>` (i.e. `Arc::make_mut` for Arc slices).\n /// The underlying values are cloned if there are other strong references.\n-pub(crate) fn make_mut_arc_slice<T: Clone, R>(\n-    a: &mut Arc<[T]>,\n-    f: impl FnOnce(&mut [T]) -> R,\n-) -> R {\n-    if let Some(s) = Arc::get_mut(a) {\n-        f(s)\n-    } else {\n-        let mut v = a.to_vec();\n-        let r = f(&mut v);\n-        *a = Arc::from(v);\n-        r\n+pub(crate) fn make_mut_slice<T: Clone>(a: &mut Arc<[T]>) -> &mut [T] {\n+    if Arc::get_mut(a).is_none() {\n+        *a = a.iter().cloned().collect();\n     }\n+    Arc::get_mut(a).unwrap()\n }"}]}