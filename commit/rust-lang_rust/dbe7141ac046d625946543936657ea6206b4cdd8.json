{"sha": "dbe7141ac046d625946543936657ea6206b4cdd8", "node_id": "C_kwDOAAsO6NoAKGRiZTcxNDFhYzA0NmQ2MjU5NDY1NDM5MzY2NTdlYTYyMDZiNGNkZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-28T22:30:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-28T22:30:30Z"}, "message": "Rollup merge of #90082 - noncombatant:patch-1, r=GuillaumeGomez\n\nFix minor typos", "tree": {"sha": "e3e738a43a5f75ee38a5939cbc6fcb5b6666d3e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3e738a43a5f75ee38a5939cbc6fcb5b6666d3e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe7141ac046d625946543936657ea6206b4cdd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJheySGCRBK7hj4Ov3rIwAApoUIAA0Y7SngXCv6QtXgvWEUVGRm\nezZuetZI3WxJXS+XsTqE+PqHuiMnrUCqVWQdsrYD7DhC6VGkbSJAza/67K4SfzRh\nL+EY6ZFw1mcZh1NwVlpRdhmr5DZagjThK2JiJezao2QiyQzgKcdl071c6mMNrke2\np2liCaUJs1/cvL1KaHmpgDqG0POjvSR2HKtdIiZxktPD1euzOGmR9Ea7yQqjwCXZ\nkWK9KMNct9aairsg7mlXxU90mTEonoQsWCKIoL0rHJen99hH2oFtBJ1LRHQ/iuTB\nF0C0IgbyEnW+nSK8z7h44dnErslxDuHPRKCyHHrF+REOVrZ2e/2rkWfd1azXBSo=\n=7X4w\n-----END PGP SIGNATURE-----\n", "payload": "tree e3e738a43a5f75ee38a5939cbc6fcb5b6666d3e3\nparent 85c0558d032e204f4f4ed6137f3119cb92dbc684\nparent 886f1f87f7fa7d5700d29eaa4763a90bc57b08f2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635460230 +0200\ncommitter GitHub <noreply@github.com> 1635460230 +0200\n\nRollup merge of #90082 - noncombatant:patch-1, r=GuillaumeGomez\n\nFix minor typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7141ac046d625946543936657ea6206b4cdd8", "html_url": "https://github.com/rust-lang/rust/commit/dbe7141ac046d625946543936657ea6206b4cdd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7141ac046d625946543936657ea6206b4cdd8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c0558d032e204f4f4ed6137f3119cb92dbc684", "url": "https://api.github.com/repos/rust-lang/rust/commits/85c0558d032e204f4f4ed6137f3119cb92dbc684", "html_url": "https://github.com/rust-lang/rust/commit/85c0558d032e204f4f4ed6137f3119cb92dbc684"}, {"sha": "886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2", "html_url": "https://github.com/rust-lang/rust/commit/886f1f87f7fa7d5700d29eaa4763a90bc57b08f2"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "bd7234522e1fec2f73d130aa6b8b1e7102de3a0c", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe7141ac046d625946543936657ea6206b4cdd8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbe7141ac046d625946543936657ea6206b4cdd8/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=dbe7141ac046d625946543936657ea6206b4cdd8", "patch": "@@ -66,7 +66,7 @@ assert_eq!(x, 5);\n This will write the value `5` into the `u64` variable `x`.\n You can see that the string literal we use to specify instructions is actually a template string.\n It is governed by the same rules as Rust [format strings][format-syntax].\n-The arguments that are inserted into the template however look a bit different then you may\n+The arguments that are inserted into the template however look a bit different than you may\n be familiar with. First we need to specify if the variable is an input or an output of the\n inline assembly. In this case it is an output. We declared this by writing `out`.\n We also need to specify in what kind of register the assembly expects the variable.\n@@ -106,7 +106,7 @@ code.\n Second, we can see that inputs are declared by writing `in` instead of `out`.\n \n Third, one of our operands has a type we haven't seen yet, `const`.\n-This tells the compiler to expand this argument to value directly inside the assembly template.\n+This tells the compiler to expand this argument to a value directly inside the assembly template.\n This is only possible for constants and literals.\n \n Fourth, we can see that we can specify an argument number, or name as in any format string."}]}