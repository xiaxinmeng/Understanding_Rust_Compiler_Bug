{"sha": "f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDcxYTliM2NmMzAxOGVjNjQ2YWNiNmY4ZmE3MzFmYjhjYTkwMmU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-30T22:08:16Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-21T19:11:59Z"}, "message": "Don't use `zip` to compare iterators during pretty-print hack\n\nIf the right-hand iterator has exactly one more element than the\nleft-hand iterator, then both iterators will be fully consumed, but\nthe extra element will never be compared.", "tree": {"sha": "ffcf685165c3fc1303013ea0fdcecaeb61535c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffcf685165c3fc1303013ea0fdcecaeb61535c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9o+wAACgkQtAh+UQ6Y\nsWRsmxAAnZ63pdEaQfCe4lJTZLpOBs14IMuwqnxLC1PLU+P410zT81jluCiFYVtG\nnzMkEAoPc2r/InsD42rcZfjlnOSSJ9LFu1FPotCpSEy2SqwIcYtSKA8JeRTAmwXO\nMDQr8LPUQzNG80XHMsM+SLimlybvP4HHvDhxqgXCMpX4Zx79R9vvM0a/9KWqTwxI\nm1KRJcWgrCVb39Q6r78dCvIXI8+j/wBFFAmkc7AbaIofmECwRt/ZkI8WIYyEVmLL\nqivzzDJL87YPqnbxkeGHvNiOPH0mep60qlb/gJc53dWZe3DvXNphYTiY01ylVw8b\ncufqo29KtAy3ir0632cMi23QJxS9FhIJp0xW9tfwMosA9cG/5Pp/sLMP5Qwml5Yr\n0WqZ5ne6qroQDW8o5rtjyGUv+YSpAl1a7+NXDlQqQB0iH2wLN5/bOXGceMXEHXgC\n4Kejbqg+SjUIVXYwlh3jvYtvxXFUz3/6RXsvMs6eO3p81VoMooXguX6FqHNF8yaD\ncoujo9j+1EBXXLZ68zG/+BnyZx+DUbSN09rOyoX2vpXTyOLdDmT7K5+pKsOSrxdJ\n1KEjDQRt2bf23JaMwr0lwzINrrii1OqbrBfbpi68RhB6JKGwncMRvq1lCXgptXE1\n9scniuUqvFzRgJ5cNLtA94seld1YWeTiNVpUjYVHwmxPFNt/TUA=\n=yrb3\n-----END PGP SIGNATURE-----", "payload": "tree ffcf685165c3fc1303013ea0fdcecaeb61535c22\nparent 4eff9b0b29a8898c839d46f3c66526710afed68a\nauthor Aaron Hill <aa1ronham@gmail.com> 1598825296 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1600715519 -0400\n\nDon't use `zip` to compare iterators during pretty-print hack\n\nIf the right-hand iterator has exactly one more element than the\nleft-hand iterator, then both iterators will be fully consumed, but\nthe extra element will never be compared.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e", "html_url": "https://github.com/rust-lang/rust/commit/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff9b0b29a8898c839d46f3c66526710afed68a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff9b0b29a8898c839d46f3c66526710afed68a", "html_url": "https://github.com/rust-lang/rust/commit/4eff9b0b29a8898c839d46f3c66526710afed68a"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "21bbdc9ba8dce05b14bd56770c88dfe7a4bd68a4", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=f5d71a9b3cf3018ec646acb6f8fa731fb8ca902e", "patch": "@@ -3,6 +3,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n+#![feature(iter_order_by)]\n #![feature(or_patterns)]\n \n use rustc_ast as ast;\n@@ -459,14 +460,10 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n \n     // Break tokens after we expand any nonterminals, so that we break tokens\n     // that are produced as a result of nonterminal expansion.\n-    let mut t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    let mut t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-        if !tokentree_probably_equal_for_proc_macro(&t1, &t2, sess) {\n-            return false;\n-        }\n-    }\n-    t1.next().is_none() && t2.next().is_none()\n+    let t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+\n+    t1.eq_by(t2, |t1, t2| tokentree_probably_equal_for_proc_macro(&t1, &t2, sess))\n }\n \n // See comments in `Nonterminal::to_tokenstream` for why we care about"}]}