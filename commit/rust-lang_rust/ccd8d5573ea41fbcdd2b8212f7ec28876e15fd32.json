{"sha": "ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDhkNTU3M2VhNDFmYmNkZDJiODIxMmY3ZWMyODg3NmUxNWZkMzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-24T20:35:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-24T20:35:57Z"}, "message": "remove dead assignments", "tree": {"sha": "abb2e7644b0cac6b2a92f63007ab357c2bc931af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb2e7644b0cac6b2a92f63007ab357c2bc931af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "html_url": "https://github.com/rust-lang/rust/commit/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c51b0a9c084418ae90b8909dc10b13ff318d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c51b0a9c084418ae90b8909dc10b13ff318d72", "html_url": "https://github.com/rust-lang/rust/commit/f5c51b0a9c084418ae90b8909dc10b13ff318d72"}], "stats": {"total": 75, "additions": 24, "deletions": 51}, "files": [{"sha": "86466bb8de122dda2b4fd0ad6fefc72d763256ac", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -112,7 +112,7 @@ mod ct {\n                 }\n             } else { buf += curr; i += 1u; }\n         }\n-        buf = flush_buf(buf, pieces);\n+        flush_buf(buf, pieces);\n         ret pieces;\n     }\n     fn peek_num(s: str, i: uint, lim: uint) ->"}, {"sha": "63dc85e865d024fc676fedc587f621edd2ac5169", "filename": "src/librustsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Flexer.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -199,7 +199,7 @@ fn scan_number(c: char, rdr: reader) -> token::token {\n     }\n     num_str = scan_digits(rdr, base);\n     c = rdr.curr;\n-    n = rdr.next();\n+    rdr.next();\n     if c == 'u' || c == 'i' {\n         let signed = c == 'i';\n         let mut tp = {"}, {"sha": "32bafac535b564f040867f1320a4097e1dce80cb", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -90,7 +90,7 @@ class parser {\n         self.span = span0;\n         self.last_span = span0;\n         self.buffer = dvec::dvec();\n-        self.restriction == UNRESTRICTED;\n+        self.restriction = UNRESTRICTED;\n         self.reader = rdr;\n         self.keywords = token::keyword_table();\n         self.restricted_keywords = token::restricted_keyword_table();\n@@ -949,7 +949,7 @@ class parser {\n     fn parse_dot_or_call_expr_with(e0: pexpr) -> pexpr {\n         let mut e = e0;\n         let lo = e.span.lo;\n-        let mut hi = e.span.hi;\n+        let mut hi;\n         loop {\n             // expr.f\n             if eat(self, token::DOT) {\n@@ -1025,7 +1025,7 @@ class parser {\n \n     fn parse_prefix_expr() -> pexpr {\n         let lo = self.span.lo;\n-        let mut hi = self.span.hi;\n+        let mut hi;\n \n         let mut ex;\n         alt self.token {"}, {"sha": "97fb2de4f9877560a1592ed15cf8c69cc4fecc0c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -734,15 +734,14 @@ fn listen_for_conn(host_ip: ip::ip_addr, port: uint, backlog: uint,\n           }\n         }\n     };\n-    let mut kill_result: option<tcp_err_data> = none;\n     alt comm::recv(setup_po) {\n       some(err_data) {\n         // we failed to bind/list w/ libuv\n         result::err(err_data.to_tcp_err())\n       }\n       none {\n         on_establish_cb(kill_ch);\n-        kill_result = comm::recv(kill_po);\n+        let kill_result = comm::recv(kill_po);\n         uv::hl::interact(hl_loop) {|loop_ptr|\n             log(debug, #fmt(\"tcp::listen post-kill recv hl interact %?\",\n                             loop_ptr));"}, {"sha": "ba42f0e633b339e8c1373dd104767626da04fbab", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -753,7 +753,7 @@ mod node {\n                execution and should be discarded as meaningless afterwards.\n     \"]\n     fn tree_from_forest_destructive(forest: [mut @node]) -> @node {\n-        let mut i = 0u;\n+        let mut i;\n         let mut len = vec::len(forest);\n         while len > 1u {\n             i = 0u;\n@@ -1020,7 +1020,6 @@ mod node {\n         let ita = char_iterator::start(a);\n         let itb = char_iterator::start(b);\n         let mut result = 0;\n-        let mut pos = 0u;\n         while result == 0 {\n             alt((char_iterator::next(ita), char_iterator::next(itb))) {\n               (option::none, option::none) {\n@@ -1036,7 +1035,6 @@ mod node {\n                 result = -1;\n               }\n             }\n-            pos += 1u;\n         }\n         ret result;\n     }"}, {"sha": "365d77522398daf8a3b099ade55f4d95aaf31828", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -429,15 +429,14 @@ fn symbol_hash(tcx: ty::ctxt, sha: sha1, t: ty::t,\n }\n \n fn get_symbol_hash(ccx: @crate_ctxt, t: ty::t) -> str {\n-    let mut hash = \"\";\n     alt ccx.type_sha1s.find(t) {\n-      some(h) { hash = h; }\n+      some(h) { ret h; }\n       none {\n-        hash = symbol_hash(ccx.tcx, ccx.sha, t, ccx.link_meta);\n+        let hash = symbol_hash(ccx.tcx, ccx.sha, t, ccx.link_meta);\n         ccx.type_sha1s.insert(t, hash);\n+        ret hash;\n       }\n     }\n-    ret hash;\n }\n \n "}, {"sha": "fa60fa5934a9bb0352eeb09701a3895313572497", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -587,8 +587,8 @@ fn build_output_filenames(input: input,\n                           ofile: option<str>,\n                           sess: session)\n         -> output_filenames {\n-    let mut obj_path = \"\";\n-    let mut out_path: str = \"\";\n+    let mut obj_path; // FIXME remove mut after snapshot\n+    let mut out_path; // FIXME remove mut after snapshot\n     let sopts = sess.opts;\n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||"}, {"sha": "aece631bf5d34924c04ad2dbb15cd10d8d345820", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -3855,7 +3855,7 @@ fn trans_break_cont(bcx: block, to_end: bool)\n     let _icx = bcx.insn_ctxt(\"trans_break_cont\");\n     // Locate closest loop block, outputting cleanup as we go.\n     let mut unwind = bcx;\n-    let mut target = bcx;\n+    let mut target = bcx; // FIXME---not necc. but tstate thinks it is\n     loop {\n         alt unwind.kind {\n           block_scope({loop_break: some(brk), _}) {"}, {"sha": "7749ec07e80229afe5614bb62fbb61dbde0307f2", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -472,7 +472,8 @@ fn node_id_to_def(ccx: crate_ctxt, id: node_id) -> option<def> {\n \n fn norm_a_constraint(id: def_id, c: constraint) -> [norm_constraint] {\n     let mut rslt: [norm_constraint] = [];\n-    for vec::each(*c.descs) {|pd|\n+    let descs = *c.descs;\n+    for vec::each(descs) {|pd|\n         rslt +=\n             [{bit_num: pd.node.bit_num,\n               c: respan(pd.span, {path: c.path,"}, {"sha": "fd8e9ddaf22eba1aeee9f5c8e118c49b1cde58b8", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -167,7 +167,7 @@ fn join_then_else(fcx: fn_ctxt, antec: @expr, conseq: blk,\n }\n \n fn gen_if_local(fcx: fn_ctxt, lhs: @expr, rhs: @expr, larger_id: node_id,\n-                new_var: node_id, pth: @path) {\n+                new_var: node_id) {\n     alt node_id_to_def(fcx.ccx, new_var) {\n       some(d) {\n         alt d {\n@@ -206,7 +206,7 @@ fn handle_update(fcx: fn_ctxt, parent: @expr, lhs: @expr, rhs: @expr,\n           _ { }\n         }\n \n-        gen_if_local(fcx, lhs, rhs, parent.id, lhs.id, p);\n+        gen_if_local(fcx, lhs, rhs, parent.id, lhs.id);\n         alt rhs.node {\n           expr_path(p1) {\n             let d = local_node_id_to_local_def_id(fcx, lhs.id);"}, {"sha": "c6f927e6efafc50266506ef4a76d833cf1167113", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -197,30 +197,6 @@ fn find_pre_post_state_exprs(fcx: fn_ctxt, pres: prestate, id: node_id,\n     ret changed;\n }\n \n-fn find_pre_post_state_loop(fcx: fn_ctxt, pres: prestate, l: @local,\n-                            index: @expr, body: blk, id: node_id) -> bool {\n-    // I'm confused about this -- how does the poststate for the body\n-    // ever grow larger? It seems like it can't?\n-    let loop_pres = intersect_states(pres, block_poststate(fcx.ccx, body));\n-\n-    let mut changed =\n-        set_prestate_ann(fcx.ccx, id, loop_pres) |\n-            find_pre_post_state_expr(fcx, pres, index);\n-\n-    let index_post = tritv_clone(expr_poststate(fcx.ccx, index));\n-    changed |= find_pre_post_state_block(fcx, index_post, body);\n-\n-    if has_nonlocal_exits(body) {\n-        // See [Break-unsound]\n-        ret changed | set_poststate_ann(fcx.ccx, id, pres);\n-    } else {\n-        let res_p =\n-            intersect_states(expr_poststate(fcx.ccx, index),\n-                             block_poststate(fcx.ccx, body));\n-        ret changed | set_poststate_ann(fcx.ccx, id, res_p);\n-    }\n-}\n-\n fn join_then_else(fcx: fn_ctxt, antec: @expr, conseq: blk,\n                   maybe_alt: option<@expr>, id: node_id, chk: if_ty,\n                   pres: prestate) -> bool {\n@@ -664,7 +640,6 @@ fn find_pre_post_state_block(fcx: fn_ctxt, pres0: prestate, b: blk) -> bool {\n fn find_pre_post_state_fn(fcx: fn_ctxt,\n                           f_decl: fn_decl,\n                           f_body: blk) -> bool {\n-    let num_constrs = num_constraints(fcx.enclosing);\n     // All constraints are considered false until proven otherwise.\n     // This ensures that intersect works correctly.\n     kill_all_prestate(fcx, f_body.node.id);"}, {"sha": "60e69d2cb0593e6acf25cd4d0349c05aeecce7d6", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -1481,7 +1481,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n           some(bexpr) {\n             let bexpr_t = fcx.expr_ty(bexpr);\n-            let mut base_fields: [field] = [];\n+            let mut base_fields; // FIXME remove mut after snapshot\n             alt structure_of(fcx, expr.span, bexpr_t) {\n               ty::ty_rec(flds) { base_fields = flds; }\n               _ {"}, {"sha": "67e498880d31890b0d16ef4af3add4f564b280a1", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -5,7 +5,7 @@ fn check_alt(fcx: @fn_ctxt,\n              discrim: @ast::expr,\n              arms: [ast::arm]) -> bool {\n     let tcx = fcx.ccx.tcx;\n-    let mut bot = false;\n+    let mut bot;\n \n     let pattern_ty = fcx.infcx.next_ty_var();\n     bot = check_expr_with(fcx, discrim, pattern_ty);"}, {"sha": "9e83fd4be355d7f65e870f622f4d77a99b2fd79e", "filename": "src/test/compile-fail/borrowck-pure-scope-in-call.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pure-scope-in-call.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -18,6 +18,8 @@ fn test2() {\n \n     pure_borrow(x, x = ~5);  //! ERROR assigning to mutable local variable prohibited due to outstanding loan\n     //!^ NOTE loan of mutable local variable granted here\n+\n+    copy x;\n }\n \n fn main() {"}, {"sha": "35ec482f6c7b8fe4aa7986b7de6849802f815f50", "filename": "src/test/compile-fail/liveness-unused", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fliveness-unused", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fliveness-unused", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32"}, {"sha": "34adff6f0ae0c848bdaa257b901a196f37697935", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=ccd8d5573ea41fbcdd2b8212f7ec28876e15fd32", "patch": "@@ -1,18 +1,17 @@\n-// error-pattern: unsatisfied precondition constraint\n use std;\n import std::arc;\n import comm::*;\n \n fn main() {\n     let v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::arc(v);\n-    \n-    task::spawn() {|move arc_v|\n+\n+    task::spawn() {|move arc_v| //! NOTE move of variable occurred here\n         let v = *arc::get(&arc_v);\n         assert v[3] == 4;\n     };\n \n-    assert (*arc::get(&arc_v))[2] == 3;\n+    assert (*arc::get(&arc_v))[2] == 3; //! ERROR use of moved variable: `arc_v`\n \n     log(info, arc_v);\n }"}]}