{"sha": "32891e1121f40e90719975cba485e14181129b5c", "node_id": "C_kwDOAAsO6NoAKDMyODkxZTExMjFmNDBlOTA3MTk5NzVjYmE0ODVlMTQxODExMjliNWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-15T20:30:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T20:30:57Z"}, "message": "Rollup merge of #108021 - zephaniahong:oldx, r=albertlarsan68\n\nmake x look for x.py if shell script does not exist\n\nFixes #107907\n\nManually tested by doing the following after changes were made:\n1. `cargo install --path src/tools/x`\n2. checked out old version:  commit hash `775c3c0` from https://github.com/rust-lang/rust/pull/99992\n3. Ran `x --help` and it works. Previously, it was giving the error `x.py not found`", "tree": {"sha": "1488a9d27192e919fe0a024dcac995ba64681cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1488a9d27192e919fe0a024dcac995ba64681cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32891e1121f40e90719975cba485e14181129b5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7UEBCRBK7hj4Ov3rIwAATx4IAD6GqVHjnAtNMzXZS8X19Jvg\nrsi/x+xu7iqc0Fm2yu5ZTM++ThHku/unsXWmmwZxcsogJEARoL70qKufyIp4/vrB\n6Df6DqGYz5o24gpWCwG275H7x697XnPxaMZAY8k749s8ncdWbM+/WRptR8dmyE58\nQHJTcMBTjGBuP2zFPWBZREwXqLJbK7GnbQPbr3+3wQB7vkE1H/BSp3nKdA5mXR5q\nonI3ToKgtaMoZ8wJQKezRZ1wxwN7iH+K+QPb+X3nDWezhH8ED4w9CtkTZx7OIUXj\nGDpN8iYkaihh4IL1Xy3BIddA/vm+tPo0BTaIV8uKoA1AZIY/CJrVhrc9wd0pSoY=\n=qPU5\n-----END PGP SIGNATURE-----\n", "payload": "tree 1488a9d27192e919fe0a024dcac995ba64681cca\nparent 8f65e25aec6d42e049346aae52f8fec2fa508c38\nparent 54cfc10fa593b512315f17a7df5235c5595dac9e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676493057 +0100\ncommitter GitHub <noreply@github.com> 1676493057 +0100\n\nRollup merge of #108021 - zephaniahong:oldx, r=albertlarsan68\n\nmake x look for x.py if shell script does not exist\n\nFixes #107907\n\nManually tested by doing the following after changes were made:\n1. `cargo install --path src/tools/x`\n2. checked out old version:  commit hash `775c3c0` from https://github.com/rust-lang/rust/pull/99992\n3. Ran `x --help` and it works. Previously, it was giving the error `x.py not found`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32891e1121f40e90719975cba485e14181129b5c", "html_url": "https://github.com/rust-lang/rust/commit/32891e1121f40e90719975cba485e14181129b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32891e1121f40e90719975cba485e14181129b5c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f65e25aec6d42e049346aae52f8fec2fa508c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f65e25aec6d42e049346aae52f8fec2fa508c38", "html_url": "https://github.com/rust-lang/rust/commit/8f65e25aec6d42e049346aae52f8fec2fa508c38"}, {"sha": "54cfc10fa593b512315f17a7df5235c5595dac9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/54cfc10fa593b512315f17a7df5235c5595dac9e", "html_url": "https://github.com/rust-lang/rust/commit/54cfc10fa593b512315f17a7df5235c5595dac9e"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "84a42ca36ef1c3c48692b93444dcf46f0d0897fc", "filename": "src/tools/x/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32891e1121f40e90719975cba485e14181129b5c/src%2Ftools%2Fx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/32891e1121f40e90719975cba485e14181129b5c/src%2Ftools%2Fx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FCargo.toml?ref=32891e1121f40e90719975cba485e14181129b5c", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"x\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n description = \"Run x.py slightly more conveniently\"\n edition = \"2021\"\n publish = false"}, {"sha": "5da8a2888ec8385c6c6ab54a0189a787182e72c5", "filename": "src/tools/x/src/main.rs", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/32891e1121f40e90719975cba485e14181129b5c/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32891e1121f40e90719975cba485e14181129b5c/src%2Ftools%2Fx%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2Fsrc%2Fmain.rs?ref=32891e1121f40e90719975cba485e14181129b5c", "patch": "@@ -9,11 +9,47 @@\n //! We also don't use `pwsh` on Windows, because it is not installed by default;\n \n use std::{\n-    env, io,\n+    env::{self, consts::EXE_EXTENSION},\n+    io,\n     path::Path,\n     process::{self, Command, ExitStatus},\n };\n \n+const PYTHON: &str = \"python\";\n+const PYTHON2: &str = \"python2\";\n+const PYTHON3: &str = \"python3\";\n+\n+fn python() -> &'static str {\n+    let val = match env::var_os(\"PATH\") {\n+        Some(val) => val,\n+        None => return PYTHON,\n+    };\n+\n+    let mut python2 = false;\n+    let mut python3 = false;\n+\n+    for dir in env::split_paths(&val) {\n+        // `python` should always take precedence over python2 / python3 if it exists\n+        if dir.join(PYTHON).with_extension(EXE_EXTENSION).exists() {\n+            return PYTHON;\n+        }\n+\n+        python2 |= dir.join(PYTHON2).with_extension(EXE_EXTENSION).exists();\n+        python3 |= dir.join(PYTHON3).with_extension(EXE_EXTENSION).exists();\n+    }\n+\n+    // try 3 before 2\n+    if python3 {\n+        PYTHON3\n+    } else if python2 {\n+        PYTHON2\n+    } else {\n+        // Python was not found on path, so exit\n+        eprintln!(\"Unable to find python in your PATH. Please check it is installed.\");\n+        process::exit(1);\n+    }\n+}\n+\n #[cfg(windows)]\n fn x_command(dir: &Path) -> Command {\n     let mut cmd = Command::new(\"powershell.exe\");\n@@ -51,6 +87,17 @@ fn exec_or_status(command: &mut Command) -> io::Result<ExitStatus> {\n     command.status()\n }\n \n+fn handle_result(result: io::Result<ExitStatus>, cmd: Command) {\n+    match result {\n+        Err(error) => {\n+            eprintln!(\"Failed to invoke `{:?}`: {}\", cmd, error);\n+        }\n+        Ok(status) => {\n+            process::exit(status.code().unwrap_or(1));\n+        }\n+    }\n+}\n+\n fn main() {\n     match env::args().skip(1).next().as_deref() {\n         Some(\"--wrapper-version\") => {\n@@ -70,22 +117,19 @@ fn main() {\n \n     for dir in current.ancestors() {\n         let candidate = dir.join(\"x.py\");\n-\n         if candidate.exists() {\n-            let mut cmd = x_command(dir);\n-\n-            cmd.args(env::args().skip(1)).current_dir(dir);\n-\n-            let result = exec_or_status(&mut cmd);\n-\n-            match result {\n-                Err(error) => {\n-                    eprintln!(\"Failed to invoke `{:?}`: {}\", cmd, error);\n-                }\n-                Ok(status) => {\n-                    process::exit(status.code().unwrap_or(1));\n-                }\n+            let shell_script_candidate = dir.join(\"x\");\n+            let mut cmd: Command;\n+            if shell_script_candidate.exists() {\n+                cmd = x_command(dir);\n+                cmd.args(env::args().skip(1)).current_dir(dir);\n+            } else {\n+                // For older checkouts that do not have the x shell script, default to python\n+                cmd = Command::new(python());\n+                cmd.arg(&candidate).args(env::args().skip(1)).current_dir(dir);\n             }\n+            let result = exec_or_status(&mut cmd);\n+            handle_result(result, cmd);\n         }\n     }\n "}]}