{"sha": "3daded02facb956919c304ac46af7d69145ab8d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYWRlZDAyZmFjYjk1NjkxOWMzMDRhYzQ2YWY3ZDY5MTQ1YWI4ZDI=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2018-05-12T17:25:09Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2018-05-12T17:25:09Z"}, "message": "rustdoc: Add support for pub(restricted)", "tree": {"sha": "b60ed97f25ba3456a7ca31e81d3e5bd94be009f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b60ed97f25ba3456a7ca31e81d3e5bd94be009f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3daded02facb956919c304ac46af7d69145ab8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3daded02facb956919c304ac46af7d69145ab8d2", "html_url": "https://github.com/rust-lang/rust/commit/3daded02facb956919c304ac46af7d69145ab8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3daded02facb956919c304ac46af7d69145ab8d2/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe63e479d1f6e3122b61f86f5117eac981b071f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe63e479d1f6e3122b61f86f5117eac981b071f2", "html_url": "https://github.com/rust-lang/rust/commit/fe63e479d1f6e3122b61f86f5117eac981b071f2"}], "stats": {"total": 76, "additions": 71, "deletions": 5}, "files": [{"sha": "0d628d47766b35239edc9448b0a5587c1646ce1d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3daded02facb956919c304ac46af7d69145ab8d2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daded02facb956919c304ac46af7d69145ab8d2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3daded02facb956919c304ac46af7d69145ab8d2", "patch": "@@ -17,7 +17,7 @@ pub use self::ItemEnum::*;\n pub use self::TyParamBound::*;\n pub use self::SelfTy::*;\n pub use self::FunctionRetTy::*;\n-pub use self::Visibility::*;\n+pub use self::Visibility::{Public, Inherited};\n \n use syntax;\n use rustc_target::spec::abi::Abi;\n@@ -2976,11 +2976,22 @@ impl<'tcx> Clean<Item> for ty::FieldDef {\n pub enum Visibility {\n     Public,\n     Inherited,\n+    Crate,\n+    Restricted(DefId, Path),\n }\n \n impl Clean<Option<Visibility>> for hir::Visibility {\n-    fn clean(&self, _: &DocContext) -> Option<Visibility> {\n-        Some(if *self == hir::Visibility::Public { Public } else { Inherited })\n+    fn clean(&self, cx: &DocContext) -> Option<Visibility> {\n+        Some(match *self {\n+            hir::Visibility::Public => Visibility::Public,\n+            hir::Visibility::Inherited => Visibility::Inherited,\n+            hir::Visibility::Crate => Visibility::Crate,\n+            hir::Visibility::Restricted { ref path, .. } => {\n+                let path = path.clean(cx);\n+                let did = register_def(cx, path.def);\n+                Visibility::Restricted(did, path)\n+            }\n+        })\n     }\n }\n "}, {"sha": "2db57c97dd4667b33c6fd9bcf9acbfe2c518d4de", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3daded02facb956919c304ac46af7d69145ab8d2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daded02facb956919c304ac46af7d69145ab8d2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3daded02facb956919c304ac46af7d69145ab8d2", "patch": "@@ -927,8 +927,19 @@ impl<'a> fmt::Display for Method<'a> {\n impl<'a> fmt::Display for VisSpace<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self.get() {\n-            Some(clean::Public) => write!(f, \"pub \"),\n-            Some(clean::Inherited) | None => Ok(())\n+            Some(clean::Public) => f.write_str(\"pub \"),\n+            Some(clean::Inherited) | None => Ok(()),\n+            Some(clean::Visibility::Crate) => write!(f, \"pub(crate) \"),\n+            Some(clean::Visibility::Restricted(did, ref path)) => {\n+                f.write_str(\"pub(\")?;\n+                if path.segments.len() != 1\n+                    || (path.segments[0].name != \"self\" && path.segments[0].name != \"super\")\n+                {\n+                    f.write_str(\"in \")?;\n+                }\n+                resolved_path(f, did, path, true, false)?;\n+                f.write_str(\") \")\n+            }\n         }\n     }\n }"}, {"sha": "cc8f628cad44bc435f5ee46af58ab939adec8ec6", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3daded02facb956919c304ac46af7d69145ab8d2/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3daded02facb956919c304ac46af7d69145ab8d2/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=3daded02facb956919c304ac46af7d69145ab8d2", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// compile-flags: --document-private-items\n+\n+#![feature(crate_visibility_modifier)]\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.FooPublic.html' '//pre' 'pub struct FooPublic'\n+pub struct FooPublic;\n+// @has 'foo/struct.FooJustCrate.html' '//pre' 'pub(crate) struct FooJustCrate'\n+crate struct FooJustCrate;\n+// @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n+pub(crate) struct FooPubCrate;\n+// @has 'foo/struct.FooSelf.html' '//pre' 'pub(self) struct FooSelf'\n+pub(self) struct FooSelf;\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(self) struct FooInSelf'\n+pub(in self) struct FooInSelf;\n+mod a {\n+    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(super) struct FooSuper'\n+    pub(super) struct FooSuper;\n+    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(super) struct FooInSuper'\n+    pub(in super) struct FooInSuper;\n+    // @has 'foo/a/struct.FooInA.html' '//pre' 'pub(in a) struct FooInA'\n+    pub(in a) struct FooInA;\n+    mod b {\n+        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in self::super::b) struct FooInSelfSuperB'\n+        pub(in self::super::b) struct FooInSelfSuperB;\n+        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(in super::super) struct FooInSuperSuper'\n+        pub(in super::super) struct FooInSuperSuper;\n+        // @has 'foo/a/b/struct.FooInAB.html' '//pre' 'pub(in a::b) struct FooInAB'\n+        pub(in a::b) struct FooInAB;\n+    }\n+}"}]}