{"sha": "7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOTIzMGFjZGZlOTAwZDllNDJmMGI4Y2QzN2U0YTdkYjZkOGZmMTg=", "commit": {"author": {"name": "Luiz Carlos", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-12T11:44:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-12T11:44:03Z"}, "message": "fix: replace doc-comments with normal comments\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "15b2f2e8710d140d809df58ca54abfb1760655ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b2f2e8710d140d809df58ca54abfb1760655ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgS1QDCRBK7hj4Ov3rIwAAdHIIAIpPpo38FuJH1iNkXDQRLMP+\nQPgJgjlbnBvzANQES9iv/p2DcYfoD6CiPO9Ne59NNPrR0L9jcE9Slmkh4kWCUn8Y\nZVD7+C6+T81KL1VJvBwAyzEXsj6sv6zKWiBmM4arHHQhYMiBULMqk66oUz7YqAT/\n1Z8oKTZqWvljcbYYVRko1299sFdimCRVaUfennsXeuR2wY3gkCiFHLom1LqXCYyw\nvMAfnE13ZAmIkCECcjj6+tK27VhcCNRQvX+6Ujd0usECw/SpSZBqPqdQlJuoOclP\n12TZ9i5YVvsR+aPa4HkXCn0UWoux5LnWV2RGD1c9ey/Bgo9v5sgQ0L8WJEdg5Bk=\n=O4jM\n-----END PGP SIGNATURE-----\n", "payload": "tree 15b2f2e8710d140d809df58ca54abfb1760655ad\nparent f67861310c1bdcb39301aa6c54d49aa719119a8b\nauthor Luiz Carlos <luizcarlosmpc@gmail.com> 1615549443 -0300\ncommitter GitHub <noreply@github.com> 1615549443 -0300\n\nfix: replace doc-comments with normal comments\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18", "html_url": "https://github.com/rust-lang/rust/commit/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18/comments", "author": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67861310c1bdcb39301aa6c54d49aa719119a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67861310c1bdcb39301aa6c54d49aa719119a8b", "html_url": "https://github.com/rust-lang/rust/commit/f67861310c1bdcb39301aa6c54d49aa719119a8b"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "661a3fbeb868622317387d46ebf6a010d2f5ca62", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=7a9230acdfe900d9e42f0b8cd37e4a7db6d8ff18", "patch": "@@ -6,27 +6,27 @@ use syntax::{\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-/// Assist: convert_iter_for_each_to_for\n+// Assist: convert_iter_for_each_to_for\n //\n-/// Converts an Iterator::for_each function into a for loop.\n-///\n-/// ```rust\n-/// fn main() {\n-///     let vec = vec![(1, 2), (2, 3), (3, 4)];\n-///     x.iter().for_each(|(x, y)| {\n-///         println!(\"x: {}, y: {}\", x, y);\n-///    })\n-/// }\n-/// ```\n-/// ->\n-/// ```rust\n-/// fn main() {\n-///     let vec = vec![(1, 2), (2, 3), (3, 4)];\n-///     for (x, y) in x.iter() {\n-///         println!(\"x: {}, y: {}\", x, y);\n-///     });\n-/// }\n-/// ```\n+// Converts an Iterator::for_each function into a for loop.\n+//\n+// ```rust\n+// fn main() {\n+//     let vec = vec![(1, 2), (2, 3), (3, 4)];\n+//     x.iter().for_each(|(x, y)| {\n+//         println!(\"x: {}, y: {}\", x, y);\n+//     });\n+// }\n+// ```\n+// ->\n+// ```rust\n+// fn main() {\n+//     let vec = vec![(1, 2), (2, 3), (3, 4)];\n+//     for (x, y) in x.iter() {\n+//         println!(\"x: {}, y: {}\", x, y);\n+//     }\n+// }\n+// ```\n pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let method = ctx.find_node_at_offset::<ast::MethodCallExpr>()?;\n     let stmt = method.syntax().parent().and_then(ast::ExprStmt::cast);"}]}