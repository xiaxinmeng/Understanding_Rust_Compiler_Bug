{"sha": "df0496a620f1a6e322df9748c9843ee8d87a8bd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDQ5NmE2MjBmMWE2ZTMyMmRmOTc0OGM5ODQzZWU4ZDg3YThiZDY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-19T23:16:12Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:27Z"}, "message": "Rename State to GeneratorState", "tree": {"sha": "79c573e8a2eed1f9e9e0e54c815c91c1f1371d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c573e8a2eed1f9e9e0e54c815c91c1f1371d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0496a620f1a6e322df9748c9843ee8d87a8bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0496a620f1a6e322df9748c9843ee8d87a8bd6", "html_url": "https://github.com/rust-lang/rust/commit/df0496a620f1a6e322df9748c9843ee8d87a8bd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0496a620f1a6e322df9748c9843ee8d87a8bd6/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e210fb3c26ffcfd767e17698e0ba9ce76d3e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/62e210fb3c26ffcfd767e17698e0ba9ce76d3e4d", "html_url": "https://github.com/rust-lang/rust/commit/62e210fb3c26ffcfd767e17698e0ba9ce76d3e4d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "17dc3d03aae0ebc7afcbeb7c7dd5a3a8a524fb4b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=df0496a620f1a6e322df9748c9843ee8d87a8bd6", "patch": "@@ -66,7 +66,7 @@ use core::hash::{self, Hash};\n use core::iter::FusedIterator;\n use core::marker::{self, Unsize};\n use core::mem;\n-use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, State};\n+use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n use core::convert::From;\n@@ -791,7 +791,7 @@ impl<T> Generator for Box<T>\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self) -> State<Self::Yield, Self::Return> {\n+    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n         (**self).resume()\n     }\n }"}, {"sha": "a8217676653b2df9969bd0f698c33b64416fdd07", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=df0496a620f1a6e322df9748c9843ee8d87a8bd6", "patch": "@@ -16,7 +16,7 @@\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[cfg_attr(not(stage0), lang = \"generator_state\")]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-pub enum State<Y, R> {\n+pub enum GeneratorState<Y, R> {\n     /// The generator suspended with a value.\n     ///\n     /// This state indicates that a generator has been suspended, and typically\n@@ -116,7 +116,7 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(&mut self) -> State<Self::Yield, Self::Return>;\n+    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n@@ -125,7 +125,7 @@ impl<'a, T> Generator for &'a mut T\n {\n     type Yield = T::Yield;\n     type Return = T::Return;\n-    fn resume(&mut self) -> State<Self::Yield, Self::Return> {\n+    fn resume(&mut self) -> GeneratorState<Self::Yield, Self::Return> {\n         (**self).resume()\n     }\n }"}, {"sha": "767b22e851eec3cb87dcca490574b350ff656d7c", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0496a620f1a6e322df9748c9843ee8d87a8bd6/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=df0496a620f1a6e322df9748c9843ee8d87a8bd6", "patch": "@@ -191,7 +191,7 @@ pub use self::range::{RangeInclusive, RangeToInclusive};\n pub use self::try::Try;\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n-pub use self::generator::{Generator, State};\n+pub use self::generator::{Generator, GeneratorState};\n \n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub use self::place::{Place, Placer, InPlace, Boxed, BoxPlace};"}]}