{"sha": "585ad9ff30e579e929bca2b1221367cc440aa377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWFkOWZmMzBlNTc5ZTkyOWJjYTJiMTIyMTM2N2NjNDQwYWEzNzc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T20:37:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-13T20:37:35Z"}, "message": "Move CharSearcher to its own section in the file", "tree": {"sha": "7c6ed44a1faf05be5d1ed567edd40a1b0791b65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6ed44a1faf05be5d1ed567edd40a1b0791b65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585ad9ff30e579e929bca2b1221367cc440aa377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585ad9ff30e579e929bca2b1221367cc440aa377", "html_url": "https://github.com/rust-lang/rust/commit/585ad9ff30e579e929bca2b1221367cc440aa377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585ad9ff30e579e929bca2b1221367cc440aa377/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72cab5e3263343502aeb1f21a8a17c7f7e917a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/72cab5e3263343502aeb1f21a8a17c7f7e917a50", "html_url": "https://github.com/rust-lang/rust/commit/72cab5e3263343502aeb1f21a8a17c7f7e917a50"}], "stats": {"total": 167, "additions": 84, "deletions": 83}, "files": [{"sha": "b1b66c9f8d8b3ae14559eb397fd779471949279a", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 84, "deletions": 83, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/585ad9ff30e579e929bca2b1221367cc440aa377/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585ad9ff30e579e929bca2b1221367cc440aa377/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=585ad9ff30e579e929bca2b1221367cc440aa377", "patch": "@@ -234,6 +234,90 @@ pub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n /// `\"[aa]a\"` or `\"a[aa]\"`, depending from which side it is searched.\n pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n+\n+/////////////////////////////////////////////////////////////////////////////\n+// Impl for char\n+/////////////////////////////////////////////////////////////////////////////\n+\n+/// Associated type for `<char as Pattern<'a>>::Searcher`.\n+#[derive(Clone, Debug)]\n+pub struct CharSearcher<'a>(&'a str);\n+\n+unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n+    #[inline]\n+    fn haystack(&self) -> &'a str {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next(&mut self) -> SearchStep {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_match(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_reject(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+}\n+\n+unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n+    #[inline]\n+    fn next_back(&mut self) -> SearchStep {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+    #[inline]\n+    fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n+        unimplemented!();\n+    }\n+}\n+\n+impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n+\n+/// Searches for chars that are equal to a given char\n+impl<'a> Pattern<'a> for char {\n+    type Searcher = CharSearcher<'a>;\n+\n+    #[inline]\n+    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n+        CharSearcher(haystack)\n+    }\n+\n+    #[inline]\n+    fn is_contained_in(self, haystack: &'a str) -> bool {\n+        if (self as u32) < 128 {\n+            haystack.as_bytes().contains(&(self as u8))\n+        } else {\n+            let mut buffer = [0u8; 4];\n+            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_prefix_of(self, haystack: &'a str) -> bool {\n+        if let Some(ch) = haystack.chars().next() {\n+            self == ch\n+        } else {\n+            false\n+        }\n+    }\n+\n+    #[inline]\n+    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n+    {\n+        if let Some(ch) = haystack.chars().next_back() {\n+            self == ch\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Impl for a MultiCharEq wrapper\n /////////////////////////////////////////////////////////////////////////////\n@@ -389,89 +473,6 @@ macro_rules! searcher_methods {\n     }\n }\n \n-/////////////////////////////////////////////////////////////////////////////\n-// Impl for char\n-/////////////////////////////////////////////////////////////////////////////\n-\n-/// Associated type for `<char as Pattern<'a>>::Searcher`.\n-#[derive(Clone, Debug)]\n-pub struct CharSearcher<'a>(&'a str);\n-\n-unsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n-    #[inline]\n-    fn haystack(&self) -> &'a str {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next(&mut self) -> SearchStep {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next_match(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next_reject(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n-}\n-\n-unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n-    #[inline]\n-    fn next_back(&mut self) -> SearchStep {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n-    #[inline]\n-    fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n-        unimplemented!();\n-    }\n-}\n-\n-impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n-\n-/// Searches for chars that are equal to a given char\n-impl<'a> Pattern<'a> for char {\n-    type Searcher = CharSearcher<'a>;\n-\n-    #[inline]\n-    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n-        CharSearcher(haystack)\n-    }\n-\n-    #[inline]\n-    fn is_contained_in(self, haystack: &'a str) -> bool {\n-        if (self as u32) < 128 {\n-            haystack.as_bytes().contains(&(self as u8))\n-        } else {\n-            let mut buffer = [0u8; 4];\n-            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n-        }\n-    }\n-\n-    #[inline]\n-    fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        if let Some(ch) = haystack.chars().next() {\n-            self == ch\n-        } else {\n-            false\n-        }\n-    }\n-\n-    #[inline]\n-    fn is_suffix_of(self, haystack: &'a str) -> bool where Self::Searcher: ReverseSearcher<'a>\n-    {\n-        if let Some(ch) = haystack.chars().next_back() {\n-            self == ch\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n /////////////////////////////////////////////////////////////////////////////\n // Impl for &[char]\n /////////////////////////////////////////////////////////////////////////////"}]}