{"sha": "f88d532734dbddecf81bc1d0ce51d30cb9fc9731", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OGQ1MzI3MzRkYmRkZWNmODFiYzFkMGNlNTFkMzBjYjlmYzk3MzE=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T05:26:04Z"}, "message": "deque: Add tests for mut_iter and mut_rev_iter", "tree": {"sha": "fc86b6b8a5883c6275c12d33927c4fe3bcb5add9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc86b6b8a5883c6275c12d33927c4fe3bcb5add9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88d532734dbddecf81bc1d0ce51d30cb9fc9731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88d532734dbddecf81bc1d0ce51d30cb9fc9731", "html_url": "https://github.com/rust-lang/rust/commit/f88d532734dbddecf81bc1d0ce51d30cb9fc9731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88d532734dbddecf81bc1d0ce51d30cb9fc9731/comments", "author": null, "committer": null, "parents": [{"sha": "5d72f3f296b7815a4e8ec7b6b3e03bd7a4ed47ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d72f3f296b7815a4e8ec7b6b3e03bd7a4ed47ba", "html_url": "https://github.com/rust-lang/rust/commit/5d72f3f296b7815a4e8ec7b6b3e03bd7a4ed47ba"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "bd7b9d5b51d1c90d88e70520f10267545a7bb94f", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f88d532734dbddecf81bc1d0ce51d30cb9fc9731/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88d532734dbddecf81bc1d0ce51d30cb9fc9731/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=f88d532734dbddecf81bc1d0ce51d30cb9fc9731", "patch": "@@ -273,7 +273,7 @@ mod tests {\n     use super::*;\n     use std::cmp::Eq;\n     use std::kinds::Copy;\n-    use std::int;\n+    use std::{int, uint};\n     use extra::test;\n \n     #[test]\n@@ -536,6 +536,8 @@ mod tests {\n     #[test]\n     fn test_iter() {\n         let mut d = Deque::new();\n+        assert_eq!(d.iter().next(), None);\n+\n         for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n@@ -550,6 +552,8 @@ mod tests {\n     #[test]\n     fn test_rev_iter() {\n         let mut d = Deque::new();\n+        assert_eq!(d.rev_iter().next(), None);\n+\n         for int::range(0,5) |i| {\n             d.add_back(i);\n         }\n@@ -561,6 +565,52 @@ mod tests {\n         assert_eq!(d.rev_iter().collect::<~[&int]>(), ~[&4,&3,&2,&1,&0,&6,&7,&8]);\n     }\n \n+    #[test]\n+    fn test_mut_iter() {\n+        let mut d = Deque::new();\n+        assert!(d.mut_iter().next().is_none());\n+\n+        for uint::range(0,3) |i| {\n+            d.add_front(i);\n+        }\n+\n+        for d.mut_iter().enumerate().advance |(i, elt)| {\n+            assert_eq!(*elt, 2 - i);\n+            *elt = i;\n+        }\n+\n+        {\n+            let mut it = d.mut_iter();\n+            assert_eq!(*it.next().unwrap(), 0);\n+            assert_eq!(*it.next().unwrap(), 1);\n+            assert_eq!(*it.next().unwrap(), 2);\n+            assert!(it.next().is_none());\n+        }\n+    }\n+\n+    #[test]\n+    fn test_mut_rev_iter() {\n+        let mut d = Deque::new();\n+        assert!(d.mut_rev_iter().next().is_none());\n+\n+        for uint::range(0,3) |i| {\n+            d.add_front(i);\n+        }\n+\n+        for d.mut_rev_iter().enumerate().advance |(i, elt)| {\n+            assert_eq!(*elt, i);\n+            *elt = i;\n+        }\n+\n+        {\n+            let mut it = d.mut_rev_iter();\n+            assert_eq!(*it.next().unwrap(), 0);\n+            assert_eq!(*it.next().unwrap(), 1);\n+            assert_eq!(*it.next().unwrap(), 2);\n+            assert!(it.next().is_none());\n+        }\n+    }\n+\n     #[test]\n     fn test_from_iterator() {\n         use std::iterator;"}]}