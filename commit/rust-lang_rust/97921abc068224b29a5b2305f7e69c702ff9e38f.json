{"sha": "97921abc068224b29a5b2305f7e69c702ff9e38f", "node_id": "C_kwDOAAsO6NoAKDk3OTIxYWJjMDY4MjI0YjI5YTViMjMwNWY3ZTY5YzcwMmZmOWUzOGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-04-10T08:43:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-10T08:43:16Z"}, "message": "Rollup merge of #110124 - Nilstrieb:\ud83d\udcce-told-me-so, r=compiler-errors\n\nSome clippy fixes in the compiler\n\nBest reviewed commit-by-commit \ud83d\udcce.", "tree": {"sha": "cbd5c2fd6cd05fb87eeac8f6af9611b632eb639c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd5c2fd6cd05fb87eeac8f6af9611b632eb639c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97921abc068224b29a5b2305f7e69c702ff9e38f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkM8wkCRBK7hj4Ov3rIwAAwwQIAAhd7GEimDqWiy85kOjus8ZK\n+AlKBbsKIhuNCQYisMl+s7GOUfJD2rm+ijFop2x6IiCmyOSW7UMYbjB2tNx5sUbj\n9HDP9/av90Hf6dU6s20WBgD1Tr7udpo4RwU+3KY24rBcCS8m/MNaIlUXE7JzwOpW\nAZWQVTT3UXx6Qw3x79xsfzAbmsNPJhKZyAjv4/pDCWvRJE8jYsOv9GYtLcawLxPe\n3ChYtiiOq55Japoq/6qi8J7nfeQEN8YnSGVmSUEeqSKk3+uwo9y9x1mis+eaCCtd\n42fDX6UZ+ro83uxZde1t6Fx2uNIKS5t8iA6kZiB0v8reV/9E3AIk7pamS/MkCRE=\n=NlTg\n-----END PGP SIGNATURE-----\n", "payload": "tree cbd5c2fd6cd05fb87eeac8f6af9611b632eb639c\nparent 6f2fd3e6a21e922f4f2d26b47d894da2f8fdc61b\nparent 9fc1555f74f96fd1f77d5188fe438abd1c6f72d9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1681116196 +0530\ncommitter GitHub <noreply@github.com> 1681116196 +0530\n\nRollup merge of #110124 - Nilstrieb:\ud83d\udcce-told-me-so, r=compiler-errors\n\nSome clippy fixes in the compiler\n\nBest reviewed commit-by-commit \ud83d\udcce.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97921abc068224b29a5b2305f7e69c702ff9e38f", "html_url": "https://github.com/rust-lang/rust/commit/97921abc068224b29a5b2305f7e69c702ff9e38f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97921abc068224b29a5b2305f7e69c702ff9e38f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2fd3e6a21e922f4f2d26b47d894da2f8fdc61b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2fd3e6a21e922f4f2d26b47d894da2f8fdc61b", "html_url": "https://github.com/rust-lang/rust/commit/6f2fd3e6a21e922f4f2d26b47d894da2f8fdc61b"}, {"sha": "9fc1555f74f96fd1f77d5188fe438abd1c6f72d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc1555f74f96fd1f77d5188fe438abd1c6f72d9", "html_url": "https://github.com/rust-lang/rust/commit/9fc1555f74f96fd1f77d5188fe438abd1c6f72d9"}], "stats": {"total": 280, "additions": 141, "deletions": 139}, "files": [{"sha": "b0c0ee942ea8f5074cb2e6bfd8792395e8efe411", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1176,7 +1176,7 @@ impl FieldsShape {\n \n     /// Gets source indices of the fields by increasing offsets.\n     #[inline]\n-    pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item = usize> + 'a {\n+    pub fn index_by_increasing_offset(&self) -> impl Iterator<Item = usize> + '_ {\n         let mut inverse_small = [0u8; 64];\n         let mut inverse_big = IndexVec::new();\n         let use_small = self.count() <= inverse_small.len();"}, {"sha": "345e058e1134a4a5c1ba516b326f01335addb152", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -22,6 +22,7 @@\n #![feature(strict_provenance)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n+#![allow(clippy::mut_from_ref)] // Arena allocators are one of the places where this pattern is fine.\n \n use smallvec::SmallVec;\n \n@@ -568,7 +569,9 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     }\n \n     pub trait ArenaAllocatable<'tcx, C = rustc_arena::IsNotCopy>: Sized {\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_from_iter<'a>(\n             arena: &'a Arena<'tcx>,\n             iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -578,10 +581,12 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     // Any type that impls `Copy` can be arena-allocated in the `DroplessArena`.\n     impl<'tcx, T: Copy> ArenaAllocatable<'tcx, rustc_arena::IsCopy> for T {\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n             arena.dropless.alloc(self)\n         }\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         fn allocate_from_iter<'a>(\n             arena: &'a Arena<'tcx>,\n             iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -601,6 +606,7 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n             }\n \n             #[inline]\n+            #[allow(clippy::mut_from_ref)]\n             fn allocate_from_iter<'a>(\n                 arena: &'a Arena<'tcx>,\n                 iter: impl ::std::iter::IntoIterator<Item = Self>,\n@@ -616,19 +622,22 @@ pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n \n     impl<'tcx> Arena<'tcx> {\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc<T: ArenaAllocatable<'tcx, C>, C>(&self, value: T) -> &mut T {\n             value.allocate_on(self)\n         }\n \n         // Any type that impls `Copy` can have slices be arena-allocated in the `DroplessArena`.\n         #[inline]\n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n             if value.is_empty() {\n                 return &mut [];\n             }\n             self.dropless.alloc_slice(value)\n         }\n \n+        #[allow(clippy::mut_from_ref)]\n         pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, C>, C>(\n             &'a self,\n             iter: impl ::std::iter::IntoIterator<Item = T>,"}, {"sha": "1389acabfcbd55e34c7a876009b8d821d70f75c5", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -691,7 +691,7 @@ fn validate_generic_param_order(\n                 GenericParamKind::Lifetime => (),\n                 GenericParamKind::Const { ty: _, kw_span: _, default: Some(default) } => {\n                     ordered_params += \" = \";\n-                    ordered_params += &pprust::expr_to_string(&*default.value);\n+                    ordered_params += &pprust::expr_to_string(&default.value);\n                 }\n                 GenericParamKind::Const { ty: _, kw_span: _, default: None } => (),\n             }"}, {"sha": "007d64f681f76d156cab9e4c1afdca08a8626e6c", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -404,11 +404,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     );\n                 } else {\n                     // And if it isn't, cancel the early-pass warning.\n-                    self.sess\n+                    if let Some(err) = self\n+                        .sess\n                         .parse_sess\n                         .span_diagnostic\n                         .steal_diagnostic(e.span, StashKey::EarlySyntaxWarning)\n-                        .map(|err| err.cancel());\n+                    {\n+                        err.cancel()\n+                    }\n                 }\n             }\n             ast::ExprKind::TryBlock(_) => {"}, {"sha": "1f6838a02784477720b5c4839b47ea9da5cdf5e0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -686,7 +686,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn bclose_maybe_open(&mut self, span: rustc_span::Span, empty: bool, close_box: bool) {\n         let has_comment = self.maybe_print_comment(span.hi());\n         if !empty || has_comment {\n-            self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+            self.break_offset_if_not_bol(1, -INDENT_UNIT);\n         }\n         self.word(\"}\");\n         if close_box {\n@@ -988,7 +988,9 @@ impl<'a> State<'a> {\n \n     pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocConstraint) {\n         self.print_ident(constraint.ident);\n-        constraint.gen_args.as_ref().map(|args| self.print_generic_args(args, false));\n+        if let Some(args) = constraint.gen_args.as_ref() {\n+            self.print_generic_args(args, false)\n+        }\n         self.space();\n         match &constraint.kind {\n             ast::AssocConstraintKind::Equality { term } => {"}, {"sha": "9ff401c3c7aad19d78a73c057b4001bce31d123e", "filename": "compiler/rustc_data_structures/src/graph/implementation/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fimplementation%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -206,17 +206,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         AdjacentEdges { graph: self, direction, next: first_edge }\n     }\n \n-    pub fn successor_nodes<'a>(\n-        &'a self,\n-        source: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn successor_nodes(&self, source: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes<'a>(\n-        &'a self,\n-        target: NodeIndex,\n-    ) -> impl Iterator<Item = NodeIndex> + 'a {\n+    pub fn predecessor_nodes(&self, target: NodeIndex) -> impl Iterator<Item = NodeIndex> + '_ {\n         self.incoming_edges(target).sources()\n     }\n "}, {"sha": "ef37a606f313e59221624f90bd2a8e272b3dea11", "filename": "compiler/rustc_data_structures/src/memmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -40,7 +40,7 @@ impl Deref for Mmap {\n \n impl AsRef<[u8]> for Mmap {\n     fn as_ref(&self) -> &[u8] {\n-        &*self.0\n+        &self.0\n     }\n }\n "}, {"sha": "1ed584eafad307f7d2f121d30b9dccf23dd4c952", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -778,7 +778,7 @@ pub fn print_time_passes_entry(\n                 \"rss_start\": start_rss,\n                 \"rss_end\": end_rss,\n             });\n-            eprintln!(\"time: {}\", json.to_string());\n+            eprintln!(\"time: {json}\");\n             return;\n         }\n         TimePassesFormat::Text => (),"}, {"sha": "bd7a86f67800f8d81b306ed3d100fcb8b7ba9fd8", "filename": "compiler/rustc_data_structures/src/sharded.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsharded.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -140,6 +140,7 @@ pub fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {\n /// `hash` can be computed with any hasher, so long as that hasher is used\n /// consistently for each `Sharded` instance.\n #[inline]\n+#[allow(clippy::modulo_one)]\n pub fn get_shard_index_by_hash(hash: u64) -> usize {\n     let hash_len = mem::size_of::<usize>();\n     // Ignore the top 7 bits as hashbrown uses these and get the next SHARD_BITS highest bits."}, {"sha": "3ed1de1bc3ca1ebbd712c3f847e95d5c6aca5a95", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -312,14 +312,14 @@ impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n \n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u32 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u32 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }\n \n impl<CTX> HashStable<CTX> for f64 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n-        let val: u64 = unsafe { ::std::mem::transmute(*self) };\n+        let val: u64 = self.to_bits();\n         val.hash_stable(ctx, hasher);\n     }\n }"}, {"sha": "7ff1339c5ab34c554f9ee754f42e403fad0ed79a", "filename": "compiler/rustc_data_structures/src/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstack.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -5,7 +5,7 @@ const RED_ZONE: usize = 100 * 1024; // 100k\n \n // Only the first stack that is pushed, grows exponentially (2^n * STACK_PER_RECURSION) from then\n // on. This flag has performance relevant characteristics. Don't set it too high.\n-const STACK_PER_RECURSION: usize = 1 * 1024 * 1024; // 1MB\n+const STACK_PER_RECURSION: usize = 1024 * 1024; // 1MB\n \n /// Grows the stack on demand to prevent stack overflow. Call this in strategic locations\n /// to \"break up\" recursive calls. E.g. almost any call to `visit_expr` or equivalent can benefit"}, {"sha": "1783b4b357257aa5789e2b3601e069d772d79e98", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -84,7 +84,7 @@ impl<T: Copy> AppendOnlyVec<T> {\n     }\n \n     pub fn iter(&self) -> impl Iterator<Item = T> + '_ {\n-        (0..).map(|i| self.get(i)).take_while(|o| o.is_some()).filter_map(|o| o)\n+        (0..).map(|i| self.get(i)).take_while(|o| o.is_some()).flatten()\n     }\n }\n "}, {"sha": "6c8d541463158398178f6a9cc927c537c8cd2431", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -224,7 +224,7 @@ impl<V: Eq + Hash> UnordSet<V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<&'a V, impl Iterator<Item = &'a V>> {\n+    pub fn items(&self) -> UnordItems<&V, impl Iterator<Item = &V>> {\n         UnordItems(self.inner.iter())\n     }\n \n@@ -415,7 +415,7 @@ impl<K: Eq + Hash, V> UnordMap<K, V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<(&'a K, &'a V), impl Iterator<Item = (&'a K, &'a V)>> {\n+    pub fn items(&self) -> UnordItems<(&K, &V), impl Iterator<Item = (&K, &V)>> {\n         UnordItems(self.inner.iter())\n     }\n "}, {"sha": "e09ef34b93dbc405ae0a0105bb42c0ff23e318ff", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -956,7 +956,7 @@ impl Diagnostic {\n     // Exact iteration order of diagnostic arguments shouldn't make a difference to output because\n     // they're only used in interpolation.\n     #[allow(rustc::potential_query_instability)]\n-    pub fn args<'a>(&'a self) -> impl Iterator<Item = DiagnosticArg<'a, 'static>> {\n+    pub fn args(&self) -> impl Iterator<Item = DiagnosticArg<'_, 'static>> {\n         self.args.iter()\n     }\n "}, {"sha": "81e8bcbf7cd54995dad10c325589cc7dd5a15109", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1407,7 +1407,7 @@ impl EmitterWriter {\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(&text).lines().enumerate() {\n                     buffer.append(\n-                        0 + line,\n+                        line,\n                         &format!(\n                             \"{}{}\",\n                             if line == 0 { String::new() } else { \" \".repeat(label_width) },\n@@ -1918,7 +1918,7 @@ impl EmitterWriter {\n                         let last_line = unhighlighted_lines.pop();\n                         let first_line = unhighlighted_lines.drain(..).next();\n \n-                        first_line.map(|(p, l)| {\n+                        if let Some((p, l)) = first_line {\n                             self.draw_code_line(\n                                 &mut buffer,\n                                 &mut row_num,\n@@ -1930,12 +1930,12 @@ impl EmitterWriter {\n                                 &file_lines,\n                                 is_multiline,\n                             )\n-                        });\n+                        }\n \n                         buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n                         row_num += 1;\n \n-                        last_line.map(|(p, l)| {\n+                        if let Some((p, l)) = last_line {\n                             self.draw_code_line(\n                                 &mut buffer,\n                                 &mut row_num,\n@@ -1947,7 +1947,7 @@ impl EmitterWriter {\n                                 &file_lines,\n                                 is_multiline,\n                             )\n-                        });\n+                        }\n                     }\n                 }\n "}, {"sha": "4ff8e409d88e3f2cb4d90dc3226557256ec23fac", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -466,7 +466,7 @@ impl<'a> StripUnconfigured<'a> {\n         //\n         // N.B., this is intentionally not part of the visit_expr() function\n         //     in order for filter_map_expr() to be able to avoid this check\n-        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(*a)) {\n+        if let Some(attr) = expr.attrs().iter().find(|a| is_cfg(a)) {\n             self.sess.emit_err(RemoveExprNotSupported { span: attr.span });\n         }\n "}, {"sha": "fb3a00d86d4f73a45f12b3cc796aa6bb4e388d64", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -41,7 +41,7 @@ impl MetaVarExpr {\n         };\n         check_trailing_token(&mut tts, sess)?;\n         let mut iter = args.trees();\n-        let rslt = match &*ident.as_str() {\n+        let rslt = match ident.as_str() {\n             \"count\" => parse_count(&mut iter, sess, ident.span)?,\n             \"ignore\" => MetaVarExpr::Ignore(parse_ident(&mut iter, sess, ident.span)?),\n             \"index\" => MetaVarExpr::Index(parse_depth(&mut iter, sess, ident.span)?),"}, {"sha": "8f91a96f964aba3bb73297faaa5f23484c188c72", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -49,7 +49,7 @@ impl LanguageItems {\n         self.get(it).ok_or_else(|| LangItemError(it))\n     }\n \n-    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (LangItem, DefId)> + 'a {\n+    pub fn iter(&self) -> impl Iterator<Item = (LangItem, DefId)> + '_ {\n         self.items\n             .iter()\n             .enumerate()"}, {"sha": "ad76e2bed2023ddf1a59192d841223c9a55d8b33", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                         .iter()\n                         .flatten()\n                         .map(|r| r.impl_blocks.len() as isize - avg as isize)\n-                        .map(|v| v.abs() as usize)\n+                        .map(|v| v.unsigned_abs())\n                         .sum::<usize>();\n                     s / connected_regions.len()\n                 },"}, {"sha": "74f5b359021d291fd86b35dd808fa86f0c257b36", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -242,7 +242,7 @@ pub fn enum_def_to_string(\n impl<'a> State<'a> {\n     pub fn bclose_maybe_open(&mut self, span: rustc_span::Span, close_box: bool) {\n         self.maybe_print_comment(span.hi());\n-        self.break_offset_if_not_bol(1, -(INDENT_UNIT as isize));\n+        self.break_offset_if_not_bol(1, -INDENT_UNIT);\n         self.word(\"}\");\n         if close_box {\n             self.end(); // close the outer-box"}, {"sha": "6c2ce62722a548054339b5709df3550305168074", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -538,8 +538,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 // FIXME(rpitit): This will need to be fixed when we move to associated types\n                                 assert!(matches!(\n                                     *trait_pred.trait_ref.self_ty().kind(),\n-                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                                    if def_id == rpit_def_id && substs == substs\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs: alias_substs, .. })\n+                                    if def_id == rpit_def_id && substs == alias_substs\n                                 ));\n                                 ty::PredicateKind::Clause(ty::Clause::Trait(\n                                     trait_pred.with_self_ty(self.tcx, ty),\n@@ -548,8 +548,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ty::PredicateKind::Clause(ty::Clause::Projection(mut proj_pred)) => {\n                                 assert!(matches!(\n                                     *proj_pred.projection_ty.self_ty().kind(),\n-                                    ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                                    if def_id == rpit_def_id && substs == substs\n+                                    ty::Alias(_, ty::AliasTy { def_id, substs: alias_substs, .. })\n+                                    if def_id == rpit_def_id && substs == alias_substs\n                                 ));\n                                 proj_pred = proj_pred.with_self_ty(self.tcx, ty);\n                                 ty::PredicateKind::Clause(ty::Clause::Projection(proj_pred))"}, {"sha": "3e0c2bf2a55382635d472e56c8e207e118fc21dc", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -242,8 +242,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let Some(arg) = segment\n             .args()\n             .args\n-            .iter()\n-            .nth(index) else { return false; };\n+            .get(index) else { return false; };\n         error.obligation.cause.span = arg\n             .span()\n             .find_ancestor_in_same_ctxt(error.obligation.cause.span)"}, {"sha": "3e9a9ce1b31147c02a36631834cc7dc7635b243a", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -526,8 +526,9 @@ impl DropRangesBuilder {\n         let mut next = <_>::from(0u32);\n         for value in tracked_values {\n             for_each_consumable(hir, value, |value| {\n-                if !tracked_value_map.contains_key(&value) {\n-                    tracked_value_map.insert(value, next);\n+                if let std::collections::hash_map::Entry::Vacant(e) = tracked_value_map.entry(value)\n+                {\n+                    e.insert(next);\n                     next = next + 1;\n                 }\n             });"}, {"sha": "5faa6ab13dd7de1a9e8149ade04145d7e02cc086", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -313,8 +313,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list_from_iter(type_causes.iter().map(|cause| cause.ty));\n     let bound_vars = fcx.tcx.mk_bound_variable_kinds(&bound_vars);\n-    let witness =\n-        fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n+    let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars));\n \n     drop(typeck_results);\n     // Store the generator types and spans into the typeck results for this generator."}, {"sha": "08cd6085d7f30d6f4e6f818860361b7936fbf90d", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1764,16 +1764,15 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     fn probe_for_similar_candidate(&mut self) -> Result<Option<ty::AssocItem>, MethodError<'tcx>> {\n         debug!(\"probing for method names similar to {:?}\", self.method_name);\n \n-        let steps = self.steps.clone();\n         self.probe(|_| {\n             let mut pcx = ProbeContext::new(\n                 self.fcx,\n                 self.span,\n                 self.mode,\n                 self.method_name,\n                 self.return_type,\n-                &self.orig_steps_var_values,\n-                steps,\n+                self.orig_steps_var_values,\n+                self.steps,\n                 self.scope_expr_id,\n             );\n             pcx.allow_similar_names = true;"}, {"sha": "271ab830694bb522381a569a848253dc7018b53e", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1850,7 +1850,7 @@ impl<R: Idx, C: Idx> SparseBitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {\n+    pub fn iter(&self, row: R) -> impl Iterator<Item = C> + '_ {\n         self.row(row).into_iter().flat_map(|r| r.iter())\n     }\n "}, {"sha": "ae2f52c513e9f4398526ad0ebd9a1a97702282c4", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -201,18 +201,15 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn drain<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n-        range: R,\n-    ) -> impl Iterator<Item = T> + 'a {\n+    pub fn drain<R: RangeBounds<usize>>(&mut self, range: R) -> impl Iterator<Item = T> + '_ {\n         self.raw.drain(range)\n     }\n \n     #[inline]\n-    pub fn drain_enumerated<'a, R: RangeBounds<usize>>(\n-        &'a mut self,\n+    pub fn drain_enumerated<R: RangeBounds<usize>>(\n+        &mut self,\n         range: R,\n-    ) -> impl Iterator<Item = (I, T)> + 'a {\n+    ) -> impl Iterator<Item = (I, T)> + '_ {\n         let begin = match range.start_bound() {\n             std::ops::Bound::Included(i) => *i,\n             std::ops::Bound::Excluded(i) => i.checked_add(1).unwrap(),"}, {"sha": "a2a7c93a7ca957428f50531e84b55364c8779548", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -266,12 +266,12 @@ impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n         let LintExpectationId::Stable { attr_id: Some(attr_id), hir_id, attr_index, .. } = id else { bug!(\"unstable expectation id should already be mapped\") };\n         let key = LintExpectationId::Unstable { attr_id, lint_index: None };\n \n-        if !self.unstable_to_stable_ids.contains_key(&key) {\n-            self.unstable_to_stable_ids.insert(\n-                key,\n-                LintExpectationId::Stable { hir_id, attr_index, lint_index: None, attr_id: None },\n-            );\n-        }\n+        self.unstable_to_stable_ids.entry(key).or_insert(LintExpectationId::Stable {\n+            hir_id,\n+            attr_index,\n+            lint_index: None,\n+            attr_id: None,\n+        });\n \n         self.expectations.push((id.normalize(), expectation));\n     }"}, {"sha": "ec3cf34d7109f5ab67e1af763374db5bfde2f83d", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -30,7 +30,7 @@ pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     ptr: *const c_char,\n     size: size_t,\n ) {\n-    let slice = slice::from_raw_parts(ptr as *const u8, size as usize);\n+    let slice = slice::from_raw_parts(ptr as *const u8, size);\n \n     sr.bytes.borrow_mut().extend_from_slice(slice);\n }"}, {"sha": "4540ded0f41a33dd29a6fcadc7c8e840f9341d96", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -119,7 +119,7 @@ impl DiagnosticDeriveBuilder {\n impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     /// Generates calls to `code` and similar functions based on the attributes on the type or\n     /// variant.\n-    pub fn preamble<'s>(&mut self, variant: &VariantInfo<'s>) -> TokenStream {\n+    pub fn preamble(&mut self, variant: &VariantInfo<'_>) -> TokenStream {\n         let ast = variant.ast();\n         let attrs = &ast.attrs;\n         let preamble = attrs.iter().map(|attr| {\n@@ -133,7 +133,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n \n     /// Generates calls to `span_label` and similar functions based on the attributes on fields or\n     /// calls to `set_arg` when no attributes are present.\n-    pub fn body<'s>(&mut self, variant: &VariantInfo<'s>) -> TokenStream {\n+    pub fn body(&mut self, variant: &VariantInfo<'_>) -> TokenStream {\n         let mut body = quote! {};\n         // Generate `set_arg` calls first..\n         for binding in variant.bindings().iter().filter(|bi| should_generate_set_arg(bi.ast())) {"}, {"sha": "607d51f5608d38ed56e4fc63d3accfac5946d581", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             Diagnostic::spanned(\n                 resource_span,\n                 Level::Error,\n-                format!(\"could not open Fluent resource: {}\", e.to_string()),\n+                format!(\"could not open Fluent resource: {e}\"),\n             )\n             .emit();\n             return failed(&crate_name);"}, {"sha": "c6af8d6328983a564f05ea6d666308f1433dd000", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -762,14 +762,14 @@ impl<'a> CrateLocator<'a> {\n     }\n \n     pub(crate) fn into_error(self, root: Option<CratePaths>) -> CrateError {\n-        CrateError::LocatorCombined(CombinedLocatorError {\n+        CrateError::LocatorCombined(Box::new(CombinedLocatorError {\n             crate_name: self.crate_name,\n             root,\n             triple: self.triple,\n             dll_prefix: self.target.dll_prefix.to_string(),\n             dll_suffix: self.target.dll_suffix.to_string(),\n             crate_rejections: self.crate_rejections,\n-        })\n+        }))\n     }\n }\n \n@@ -958,7 +958,7 @@ pub(crate) enum CrateError {\n     StableCrateIdCollision(Symbol, Symbol),\n     DlOpen(String),\n     DlSym(String),\n-    LocatorCombined(CombinedLocatorError),\n+    LocatorCombined(Box<CombinedLocatorError>),\n     NonDylibPlugin(Symbol),\n }\n "}, {"sha": "9d97a75a2fa6f96e728b3c64a3ff7ff345a5d6fb", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -74,18 +74,17 @@ impl<'hir> Iterator for ParentHirIterator<'hir> {\n         if self.current_id == CRATE_HIR_ID {\n             return None;\n         }\n-        loop {\n-            // There are nodes that do not have entries, so we need to skip them.\n-            let parent_id = self.map.parent_id(self.current_id);\n \n-            if parent_id == self.current_id {\n-                self.current_id = CRATE_HIR_ID;\n-                return None;\n-            }\n+        // There are nodes that do not have entries, so we need to skip them.\n+        let parent_id = self.map.parent_id(self.current_id);\n \n-            self.current_id = parent_id;\n-            return Some(parent_id);\n+        if parent_id == self.current_id {\n+            self.current_id = CRATE_HIR_ID;\n+            return None;\n         }\n+\n+        self.current_id = parent_id;\n+        return Some(parent_id);\n     }\n }\n "}, {"sha": "1a8e48264471c51d17a9851ec52183556e51e048", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -109,26 +109,34 @@ const MAX_HASHED_BUFFER_LEN: usize = 2 * MAX_BYTES_TO_HASH;\n // large.\n impl hash::Hash for Allocation {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        let Self {\n+            bytes,\n+            provenance,\n+            init_mask,\n+            align,\n+            mutability,\n+            extra: (), // don't bother hashing ()\n+        } = self;\n+\n         // Partially hash the `bytes` buffer when it is large. To limit collisions with common\n         // prefixes and suffixes, we hash the length and some slices of the buffer.\n-        let byte_count = self.bytes.len();\n+        let byte_count = bytes.len();\n         if byte_count > MAX_HASHED_BUFFER_LEN {\n             // Hash the buffer's length.\n             byte_count.hash(state);\n \n             // And its head and tail.\n-            self.bytes[..MAX_BYTES_TO_HASH].hash(state);\n-            self.bytes[byte_count - MAX_BYTES_TO_HASH..].hash(state);\n+            bytes[..MAX_BYTES_TO_HASH].hash(state);\n+            bytes[byte_count - MAX_BYTES_TO_HASH..].hash(state);\n         } else {\n-            self.bytes.hash(state);\n+            bytes.hash(state);\n         }\n \n         // Hash the other fields as usual.\n-        self.provenance.hash(state);\n-        self.init_mask.hash(state);\n-        self.align.hash(state);\n-        self.mutability.hash(state);\n-        self.extra.hash(state);\n+        provenance.hash(state);\n+        init_mask.hash(state);\n+        align.hash(state);\n+        mutability.hash(state);\n     }\n }\n "}, {"sha": "56755e588cb45604568c04e1781da272e12b60d3", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -915,7 +915,7 @@ pub enum LocalInfo<'tcx> {\n \n impl<'tcx> LocalDecl<'tcx> {\n     pub fn local_info(&self) -> &LocalInfo<'tcx> {\n-        &**self.local_info.as_ref().assert_crate_local()\n+        &self.local_info.as_ref().assert_crate_local()\n     }\n \n     /// Returns `true` only if local is a binding that can itself be"}, {"sha": "f62853c3e740304e661f13aad808280de4d45c30", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -133,21 +133,21 @@ impl<'tcx> MirPatch<'tcx> {\n         let mut new_decl = LocalDecl::new(ty, span).internal();\n         **new_decl.local_info.as_mut().assert_crate_local() = local_info;\n         self.new_locals.push(new_decl);\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         self.new_locals.push(LocalDecl::new(ty, span));\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         self.new_locals.push(LocalDecl::new(ty, span).internal());\n-        Local::new(index as usize)\n+        Local::new(index)\n     }\n \n     pub fn new_block(&mut self, data: BasicBlockData<'tcx>) -> BasicBlock {"}, {"sha": "4f00abf7fabc148e97b54c1c87a0ac04fe70e962", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                     ty::Array(inner, _) if !from_end => tcx.mk_array(*inner, (to - from) as u64),\n                     ty::Array(inner, size) if from_end => {\n                         let size = size.eval_target_usize(tcx, param_env);\n-                        let len = size - (from as u64) - (to as u64);\n+                        let len = size - from - to;\n                         tcx.mk_array(*inner, len)\n                     }\n                     _ => bug!(\"cannot subslice non-array type: `{:?}`\", self),"}, {"sha": "7d247eeb656c2cfe953f77c21c450a062ece2a32", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -178,17 +178,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but\n         // since we've already visited `E`, that child isn't added to the stack. The last\n         // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n-        loop {\n-            let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {\n-                if let Some(bb) = iter.next() {\n-                    bb\n-                } else {\n-                    break;\n-                }\n-            } else {\n-                break;\n-            };\n-\n+        while let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() && let Some(bb) = iter.next() {\n             if self.visited.insert(bb) {\n                 if let Some(term) = &self.basic_blocks[bb].terminator {\n                     self.visit_stack.push((bb, term.successors()));"}, {"sha": "6a8ae525069c0f8eaa65c8f6bb5ea8c76347f938", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -923,7 +923,7 @@ impl ObjectSafetyViolation {\n                 }\n             }\n             ObjectSafetyViolation::SupertraitNonLifetimeBinder(_) => {\n-                format!(\"where clause cannot reference non-lifetime `for<...>` variables\").into()\n+                \"where clause cannot reference non-lifetime `for<...>` variables\".into()\n             }\n             ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()"}, {"sha": "fef2be133e81f2c5914d5b44bdaed9248100333b", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n     type Target = ExternalConstraintsData<'tcx>;\n \n     fn deref(&self) -> &Self::Target {\n-        &*self.0\n+        &self.0\n     }\n }\n "}, {"sha": "c0e557d480d3d0a52e399fa0c45dc4b8fcd81f65", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -337,7 +337,7 @@ impl ScalarInt {\n     /// Fails if the size of the `ScalarInt` is not equal to `Size { raw: 16 }`\n     /// and returns the `ScalarInt`s size in that case.\n     pub fn try_to_i128(self) -> Result<i128, Size> {\n-        self.try_to_int(Size::from_bits(128)).map(|v| i128::try_from(v).unwrap())\n+        self.try_to_int(Size::from_bits(128))\n     }\n }\n "}, {"sha": "c312aaf6819aa955530b1485da845724a72955e2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -924,7 +924,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             crate_name,\n             // Don't print the whole stable crate id. That's just\n             // annoying in debug output.\n-            stable_crate_id.to_u64() >> 8 * 6,\n+            stable_crate_id.to_u64() >> (8 * 6),\n             self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }\n@@ -2379,7 +2379,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {\n         let map = self.in_scope_traits_map(id.owner)?;\n         let candidates = map.get(&id.local_id)?;\n-        Some(&*candidates)\n+        Some(candidates)\n     }\n \n     pub fn named_bound_var(self, id: HirId) -> Option<resolve_bound_vars::ResolvedArg> {"}, {"sha": "5bbd396d6f3b052bf80233be4bc09ef2bdb2e19a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1891,7 +1891,7 @@ impl<'tcx> Ty<'tcx> {\n                         // The way we evaluate the `N` in `[T; N]` here only works since we use\n                         // `simd_size_and_type` post-monomorphization. It will probably start to ICE\n                         // if we use it in generic code. See the `simd-array-trait` ui test.\n-                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n+                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()), *f0_elem_ty)\n                     }\n                     // Otherwise, the fields of this Adt are the SIMD components (and we assume they\n                     // all have the same type)."}, {"sha": "e41d0f7047b3bd8a9bf3e21afdcb4fa5aa8cc713", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -558,8 +558,8 @@ impl<'a> StringReader<'a> {\n         }\n \n         if let Some(possible_offset) = possible_offset {\n-            let lo = start + BytePos(possible_offset as u32);\n-            let hi = lo + BytePos(found_terminators as u32);\n+            let lo = start + BytePos(possible_offset);\n+            let hi = lo + BytePos(found_terminators);\n             let span = self.mk_sp(lo, hi);\n             err.span_suggestion(\n                 span,"}, {"sha": "1f027c08fc3b5fe8e3fd7a52e124ea93d907eaca", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -336,8 +336,8 @@ const ASCII_ARRAY: &[(&str, &str, Option<token::TokenKind>)] = &[\n     (\"\\\"\", \"Quotation Mark\", None),\n ];\n \n-pub(super) fn check_for_substitution<'a>(\n-    reader: &StringReader<'a>,\n+pub(super) fn check_for_substitution(\n+    reader: &StringReader<'_>,\n     pos: BytePos,\n     ch: char,\n     count: usize,"}, {"sha": "f8ef1307c988e187d13ea1035fbf2b3594b94f15", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -53,7 +53,7 @@ impl<'a> Parser<'a> {\n                 let snapshot = self.create_snapshot_for_diagnostic();\n                 match self.parse_ty() {\n                     Ok(p) => {\n-                        if let TyKind::ImplTrait(_, bounds) = &(*p).kind {\n+                        if let TyKind::ImplTrait(_, bounds) = &p.kind {\n                             let span = impl_span.to(self.token.span.shrink_to_lo());\n                             let mut err = self.struct_span_err(\n                                 span,"}, {"sha": "29f6a07e81bebac0b9852753af5ea24197fb1ffa", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -136,7 +136,9 @@ where\n     }\n \n     fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n-        self.cache.lock().as_ref().map(|value| f(&(), &value.0, value.1));\n+        if let Some(value) = self.cache.lock().as_ref() {\n+            f(&(), &value.0, value.1)\n+        }\n     }\n }\n "}, {"sha": "31ac3f1c151eee95507534a07e8de3227ec82255", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1224,7 +1224,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             lifetime_ribs: Vec::new(),\n             lifetime_elision_candidates: None,\n             current_trait_ref: None,\n-            diagnostic_metadata: Box::new(DiagnosticMetadata::default()),\n+            diagnostic_metadata: Default::default(),\n             // errors at module scope should always be reported\n             in_func_body: false,\n             lifetime_uses: Default::default(),"}, {"sha": "acfb36c97d0c6fd3a3ec0623eea54954a2ae445c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1426,7 +1426,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n         opt::opt_s(\n             \"\",\n             \"edition\",\n-            &*EDITION_STRING,\n+            &EDITION_STRING,\n             EDITION_NAME_LIST,\n         ),\n         opt::multi_s("}, {"sha": "15e27952cf50f34a873b5fccd6e7c3bd29c08f74", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -84,12 +84,12 @@ impl SymbolGallery {\n \n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n-pub fn feature_err<'a>(\n-    sess: &'a ParseSess,\n+pub fn feature_err(\n+    sess: &ParseSess,\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     explain: impl Into<DiagnosticMessage>,\n-) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     feature_err_issue(sess, feature, span, GateIssue::Language, explain)\n }\n \n@@ -98,20 +98,21 @@ pub fn feature_err<'a>(\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_err`.\n #[track_caller]\n-pub fn feature_err_issue<'a>(\n-    sess: &'a ParseSess,\n+pub fn feature_err_issue(\n+    sess: &ParseSess,\n     feature: Symbol,\n     span: impl Into<MultiSpan>,\n     issue: GateIssue,\n     explain: impl Into<DiagnosticMessage>,\n-) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n     let span = span.into();\n \n     // Cancel an earlier warning for this same error, if it exists.\n     if let Some(span) = span.primary_span() {\n-        sess.span_diagnostic\n-            .steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n-            .map(|err| err.cancel());\n+        if let Some(err) = sess.span_diagnostic.steal_diagnostic(span, StashKey::EarlySyntaxWarning)\n+        {\n+            err.cancel()\n+        }\n     }\n \n     let mut err = sess.create_err(FeatureGateError { span, explain: explain.into() });"}, {"sha": "aa8859ed1a358e4871209ca000ad8adf4664a051", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -1353,16 +1353,16 @@ impl Clone for SourceFile {\n         Self {\n             name: self.name.clone(),\n             src: self.src.clone(),\n-            src_hash: self.src_hash.clone(),\n+            src_hash: self.src_hash,\n             external_src: Lock::new(self.external_src.borrow().clone()),\n-            start_pos: self.start_pos.clone(),\n-            end_pos: self.end_pos.clone(),\n+            start_pos: self.start_pos,\n+            end_pos: self.end_pos,\n             lines: Lock::new(self.lines.borrow().clone()),\n             multibyte_chars: self.multibyte_chars.clone(),\n             non_narrow_chars: self.non_narrow_chars.clone(),\n             normalized_pos: self.normalized_pos.clone(),\n-            name_hash: self.name_hash.clone(),\n-            cnum: self.cnum.clone(),\n+            name_hash: self.name_hash,\n+            cnum: self.cnum,\n         }\n     }\n }\n@@ -2051,13 +2051,13 @@ pub type FileLinesResult = Result<FileLines, SpanLinesError>;\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum SpanLinesError {\n-    DistinctSources(DistinctSources),\n+    DistinctSources(Box<DistinctSources>),\n }\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum SpanSnippetError {\n     IllFormedSpan(Span),\n-    DistinctSources(DistinctSources),\n+    DistinctSources(Box<DistinctSources>),\n     MalformedForSourcemap(MalformedSourceMapPositions),\n     SourceNotAvailable { filename: FileName },\n }"}, {"sha": "88e3674f8994344460913c8486168b1cfba2f3b2", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -542,10 +542,10 @@ impl SourceMap {\n         let hi = self.lookup_char_pos(sp.hi());\n         trace!(?hi);\n         if lo.file.start_pos != hi.file.start_pos {\n-            return Err(SpanLinesError::DistinctSources(DistinctSources {\n+            return Err(SpanLinesError::DistinctSources(Box::new(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),\n                 end: (hi.file.name.clone(), hi.file.start_pos),\n-            }));\n+            })));\n         }\n         Ok((lo, hi))\n     }\n@@ -603,10 +603,10 @@ impl SourceMap {\n         let local_end = self.lookup_byte_offset(sp.hi());\n \n         if local_begin.sf.start_pos != local_end.sf.start_pos {\n-            Err(SpanSnippetError::DistinctSources(DistinctSources {\n+            Err(SpanSnippetError::DistinctSources(Box::new(DistinctSources {\n                 begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),\n                 end: (local_end.sf.name.clone(), local_end.sf.start_pos),\n-            }))\n+            })))\n         } else {\n             self.ensure_source_file_source_present(local_begin.sf.clone());\n "}, {"sha": "5582d909f6b10a5326a66e1adddfe98bb8a91fd2", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -324,8 +324,6 @@ impl Abi {\n \n impl fmt::Display for Abi {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            abi => write!(f, \"\\\"{}\\\"\", abi.name()),\n-        }\n+        write!(f, \"\\\"{}\\\"\", self.name())\n     }\n }"}, {"sha": "a93a42987ed5399404ad6ef561f19dbb156f770a", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97921abc068224b29a5b2305f7e69c702ff9e38f/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=97921abc068224b29a5b2305f7e69c702ff9e38f", "patch": "@@ -149,7 +149,7 @@ mod rustc {\n                     .iter()\n                     .enumerate()\n                     .find(|(_, field_def)| name == field_def.name)\n-                    .expect(&format!(\"There were no fields named `{name}`.\"));\n+                    .unwrap_or_else(|| panic!(\"There were no fields named `{name}`.\"));\n                 fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n             };\n "}]}