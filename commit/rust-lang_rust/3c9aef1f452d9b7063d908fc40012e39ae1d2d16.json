{"sha": "3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOWFlZjFmNDUyZDliNzA2M2Q5MDhmYzQwMDEyZTM5YWUxZDJkMTY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T22:40:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-12T09:36:00Z"}, "message": "Use `TokenStream::concat` more.\n\nIt's a better choice in a few places.", "tree": {"sha": "eb9c965c9ad3849c1a7a93a08eb1045476f7cf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb9c965c9ad3849c1a7a93a08eb1045476f7cf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "html_url": "https://github.com/rust-lang/rust/commit/3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f8fb5960551fbe80cc49ace1103a9fe393f9f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f8fb5960551fbe80cc49ace1103a9fe393f9f4", "html_url": "https://github.com/rust-lang/rust/commit/67f8fb5960551fbe80cc49ace1103a9fe393f9f4"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "e433f8d8dfdb473b6de5e905d10ece0b890c3aa7", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9aef1f452d9b7063d908fc40012e39ae1d2d16/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=3c9aef1f452d9b7063d908fc40012e39ae1d2d16", "patch": "@@ -167,9 +167,9 @@ impl TokenStream {\n     /// separating the two arguments with a comma for diagnostic suggestions.\n     pub(crate) fn add_comma(&self) -> Option<(TokenStream, Span)> {\n         // Used to suggest if a user writes `foo!(a b);`\n-        if let TokenStreamKind::Stream(ref slice) = self.kind {\n+        if let TokenStreamKind::Stream(ref stream) = self.kind {\n             let mut suggestion = None;\n-            let mut iter = slice.iter().enumerate().peekable();\n+            let mut iter = stream.iter().enumerate().peekable();\n             while let Some((pos, ts)) = iter.next() {\n                 if let Some((_, next)) = iter.peek() {\n                     let sp = match (&ts.kind, &next.kind) {\n@@ -189,13 +189,12 @@ impl TokenStream {\n                 }\n             }\n             if let Some((pos, comma, sp)) = suggestion {\n-                let mut new_slice = vec![];\n-                let parts = slice.split_at(pos + 1);\n-                new_slice.extend_from_slice(parts.0);\n-                new_slice.push(comma);\n-                new_slice.extend_from_slice(parts.1);\n-                let slice = Lrc::new(new_slice);\n-                return Some((TokenStream { kind: TokenStreamKind::Stream(slice) }, sp));\n+                let mut new_stream = vec![];\n+                let parts = stream.split_at(pos + 1);\n+                new_stream.extend_from_slice(parts.0);\n+                new_stream.push(comma);\n+                new_stream.extend_from_slice(parts.1);\n+                return Some((TokenStream::concat(new_stream), sp));\n             }\n         }\n         None\n@@ -273,12 +272,7 @@ impl Extend<TokenStream> for TokenStream {\n         // Build the resulting token stream. If it contains more than one token,\n         // preserve capacity in the vector in anticipation of the caller\n         // performing additional calls to extend.\n-        let mut tts = builder.0;\n-        *self = match tts.len() {\n-            0 => TokenStream::empty(),\n-            1 => tts.pop().unwrap(),\n-            _ => TokenStream::concat_rc_vec(Lrc::new(tts)),\n-        };\n+        *self = TokenStream::concat(builder.0);\n     }\n }\n \n@@ -483,7 +477,7 @@ impl TokenStreamBuilder {\n             match len {\n                 1 => {}\n                 2 => self.0.push(streams[0].clone().into()),\n-                _ => self.0.push(TokenStream::concat_rc_vec( Lrc::new(streams[0 .. len - 1].to_vec()))),\n+                _ => self.0.push(TokenStream::concat(streams[0 .. len - 1].to_vec())),\n             }\n             self.push_all_but_last_tree(&streams[len - 1])\n         }\n@@ -495,7 +489,7 @@ impl TokenStreamBuilder {\n             match len {\n                 1 => {}\n                 2 => self.0.push(streams[1].clone().into()),\n-                _ => self.0.push(TokenStream::concat_rc_vec(Lrc::new(streams[1 .. len].to_vec()))),\n+                _ => self.0.push(TokenStream::concat(streams[1 .. len].to_vec())),\n             }\n             self.push_all_but_first_tree(&streams[0])\n         }"}]}