{"sha": "ad8c5e14800ed5a47530b3e45fff536479d3ff21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOGM1ZTE0ODAwZWQ1YTQ3NTMwYjNlNDVmZmY1MzY0NzlkM2ZmMjE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:46:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:46:47Z"}, "message": "Rollup merge of #75214 - chansuke:fix-intra-doc-links, r=jyn514\n\nUse intra-doc links in `mem::manually_drop` & `mem::maybe_uninit`\n\nThis is partial fixes for https://github.com/rust-lang/rust/issues/75080.", "tree": {"sha": "34a586b73ffd0cf1e1ec79958d09c2dbc4865a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a586b73ffd0cf1e1ec79958d09c2dbc4865a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad8c5e14800ed5a47530b3e45fff536479d3ff21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZHCRBK7hj4Ov3rIwAAdHIIABNXClKgTqQcPd8gSEQzq77d\np7kIYzlGFTeJvWocwd9XR/O9ExYyrpdW/9oswGaCt1Xkka+nJ9/F49jpQqe/C+Dh\nG3Cj9DJ2KxX65xMcdEyqn3gAFfFrFb0Ec47A5k3PQpbG7LehncxVtl/jA1/qkuhb\nMlGHlLf+6N//VFpB0BQMeRLi+ndyMwpr3pjVyT28/+cUp/UpRKwn+ypKGb1HvFw8\nMBu3WZYfBl8pHzCoYNqdW5LpVzw6a9SWlH+tavM+2k9/qgZsNBUgC2rno1b75KmP\n5aT5EyCwPcbI5CNNIA9fSQij1Yi6ew3dGoJIC638Af0xlSEkQOBSnEJodetD5es=\n=jjzI\n-----END PGP SIGNATURE-----\n", "payload": "tree 34a586b73ffd0cf1e1ec79958d09c2dbc4865a70\nparent 83e75acdec5c3e7f90bb34d0827ed1656eec07d2\nparent 61866bc60cab64677c710dd7146c35b0ecdb40cc\nauthor Tyler Mandry <tmandry@gmail.com> 1597441607 -0700\ncommitter GitHub <noreply@github.com> 1597441607 -0700\n\nRollup merge of #75214 - chansuke:fix-intra-doc-links, r=jyn514\n\nUse intra-doc links in `mem::manually_drop` & `mem::maybe_uninit`\n\nThis is partial fixes for https://github.com/rust-lang/rust/issues/75080.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8c5e14800ed5a47530b3e45fff536479d3ff21", "html_url": "https://github.com/rust-lang/rust/commit/ad8c5e14800ed5a47530b3e45fff536479d3ff21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad8c5e14800ed5a47530b3e45fff536479d3ff21/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "html_url": "https://github.com/rust-lang/rust/commit/83e75acdec5c3e7f90bb34d0827ed1656eec07d2"}, {"sha": "61866bc60cab64677c710dd7146c35b0ecdb40cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/61866bc60cab64677c710dd7146c35b0ecdb40cc", "html_url": "https://github.com/rust-lang/rust/commit/61866bc60cab64677c710dd7146c35b0ecdb40cc"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "e45aa86c0795a915d7f5b079e4189d8a7999e3a7", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad8c5e14800ed5a47530b3e45fff536479d3ff21/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8c5e14800ed5a47530b3e45fff536479d3ff21/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=ad8c5e14800ed5a47530b3e45fff536479d3ff21", "patch": "@@ -56,9 +56,9 @@ use crate::ptr;\n /// working with [pinned] data, where reusing the memory without calling the destructor could lead\n /// to Undefined Behaviour.\n ///\n-/// [`mem::zeroed`]: fn.zeroed.html\n-/// [`MaybeUninit<T>`]: union.MaybeUninit.html\n-/// [pinned]: ../pin/index.html\n+/// [`mem::zeroed`]: crate::mem::zeroed\n+/// [`MaybeUninit<T>`]: crate::mem::MaybeUninit\n+/// [pinned]: crate::pin\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -116,8 +116,6 @@ impl<T> ManuallyDrop<T> {\n     /// leaving the state of this container unchanged.\n     /// It is your responsibility to ensure that this `ManuallyDrop` is not used again.\n     ///\n-    /// [`ManuallyDrop::drop`]: #method.drop\n-    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n     #[must_use = \"if you don't need the value, you can use `ManuallyDrop::drop` instead\"]\n     #[stable(feature = \"manually_drop_take\", since = \"1.42.0\")]\n     #[inline]\n@@ -148,9 +146,7 @@ impl<T: ?Sized> ManuallyDrop<T> {\n     /// This is normally prevented by the type system, but users of `ManuallyDrop` must\n     /// uphold those guarantees without assistance from the compiler.\n     ///\n-    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n-    /// [`ptr::drop_in_place`]: ../ptr/fn.drop_in_place.html\n-    /// [pinned]: ../pin/index.html\n+    /// [pinned]: crate::pin\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {"}, {"sha": "d2d65fd2fa517027c365215f4e88c28e3dc98125", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad8c5e14800ed5a47530b3e45fff536479d3ff21/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8c5e14800ed5a47530b3e45fff536479d3ff21/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=ad8c5e14800ed5a47530b3e45fff536479d3ff21", "patch": "@@ -247,7 +247,7 @@ impl<T> MaybeUninit<T> {\n     /// Note that dropping a `MaybeUninit<T>` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n     ///\n-    /// [`assume_init`]: #method.assume_init\n+    /// [`assume_init`]: MaybeUninit::assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n@@ -525,7 +525,7 @@ impl<T> MaybeUninit<T> {\n     /// to ensure that that data may indeed be duplicated.\n     ///\n     /// [inv]: #initialization-invariant\n-    /// [`assume_init`]: #method.assume_init\n+    /// [`assume_init`]: MaybeUninit::assume_init\n     ///\n     /// # Examples\n     ///"}]}