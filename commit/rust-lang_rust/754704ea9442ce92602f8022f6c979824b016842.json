{"sha": "754704ea9442ce92602f8022f6c979824b016842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NDcwNGVhOTQ0MmNlOTI2MDJmODAyMmY2Yzk3OTgyNGIwMTY4NDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-18T20:29:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-18T21:29:18Z"}, "message": "rustc: Implement intra-crate static methods on anonymous trait implementations. r=nmatsakis", "tree": {"sha": "d6fd35c2993740d742f86151444c3939068d7582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fd35c2993740d742f86151444c3939068d7582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/754704ea9442ce92602f8022f6c979824b016842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/754704ea9442ce92602f8022f6c979824b016842", "html_url": "https://github.com/rust-lang/rust/commit/754704ea9442ce92602f8022f6c979824b016842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/754704ea9442ce92602f8022f6c979824b016842/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeae55208cfc393d6886e9b7a94d14f99e9bd7b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeae55208cfc393d6886e9b7a94d14f99e9bd7b8", "html_url": "https://github.com/rust-lang/rust/commit/eeae55208cfc393d6886e9b7a94d14f99e9bd7b8"}], "stats": {"total": 337, "additions": 276, "deletions": 61}, "files": [{"sha": "f494d5648168579148ac029542a1ddf061705f86", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -7,34 +7,6 @@ use std::serialization::{Serializable,\n use codemap::{span, filename};\n use parse::token;\n \n-#[cfg(stage0)]\n-impl span: Serializable {\n-    /* Note #1972 -- spans are serialized but not deserialized */\n-    fn serialize<S: Serializer>(&self, _s: &S) { }\n-}\n-\n-#[cfg(stage0)]\n-impl span: Deserializable {\n-    static fn deserialize<D: Deserializer>(_d: &D) -> span {\n-        ast_util::dummy_sp()\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-impl<S: Serializer> span: Serializable<S> {\n-    /* Note #1972 -- spans are serialized but not deserialized */\n-    fn serialize(&self, _s: &S) { }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-impl<D: Deserializer> span: Deserializable<D> {\n-    static fn deserialize(_d: &D) -> span {\n-        ast_util::dummy_sp()\n-    }\n-}\n-\n #[auto_serialize]\n #[auto_deserialize]\n type spanned<T> = {node: T, span: span};\n@@ -168,7 +140,7 @@ type ty_param = {ident: ident, id: node_id, bounds: @~[ty_param_bound]};\n enum def {\n     def_fn(def_id, purity),\n     def_static_method(/* method */ def_id,\n-                      /* trait */  def_id,\n+                      /* trait */  Option<def_id>,\n                       purity),\n     def_self(node_id),\n     def_mod(def_id),"}, {"sha": "69a80d0bac13a628d609a097357dd3a58f1503f6", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -1,4 +1,8 @@\n use dvec::DVec;\n+use std::serialization::{Serializable,\n+                         Deserializable,\n+                         Serializer,\n+                         Deserializer};\n \n export filename;\n export filemap;\n@@ -178,6 +182,34 @@ impl span : cmp::Eq {\n     pure fn ne(other: &span) -> bool { !self.eq(other) }\n }\n \n+#[cfg(stage0)]\n+impl span: Serializable {\n+    /* Note #1972 -- spans are serialized but not deserialized */\n+    fn serialize<S: Serializer>(&self, _s: &S) { }\n+}\n+\n+#[cfg(stage0)]\n+impl span: Deserializable {\n+    static fn deserialize<D: Deserializer>(_d: &D) -> span {\n+        ast_util::dummy_sp()\n+    }\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl<S: Serializer> span: Serializable<S> {\n+    /* Note #1972 -- spans are serialized but not deserialized */\n+    fn serialize(&self, _s: &S) { }\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+impl<D: Deserializer> span: Deserializable<D> {\n+    static fn deserialize(_d: &D) -> span {\n+        ast_util::dummy_sp()\n+    }\n+}\n+\n fn span_to_str_no_adj(sp: span, cm: CodeMap) -> ~str {\n     let lo = lookup_char_pos(cm, sp.lo);\n     let hi = lookup_char_pos(cm, sp.hi);"}, {"sha": "06f1dfdab1aa5b1fe9c1a51057d7c18cf38f8e06", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -126,5 +126,7 @@ enum astencode_tag { // Reserves 0x50 -- 0x6f\n \n const tag_item_trait_method_sort: uint = 0x70;\n \n+const tag_item_impl_type_basename: uint = 0x71;\n+\n type link_meta = {name: ~str, vers: ~str, extras_hash: ~str};\n "}, {"sha": "141613c2240d896dbe466c9dd4dea028abf99a5e", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -25,6 +25,8 @@ export get_impls_for_mod;\n export get_trait_methods;\n export get_provided_trait_methods;\n export get_method_names_if_trait;\n+export get_type_name_if_impl;\n+export get_static_methods_if_impl;\n export get_item_attrs;\n export each_path;\n export get_type;\n@@ -33,12 +35,19 @@ export get_impl_method;\n export get_item_path;\n export maybe_get_item_ast, found_ast, found, found_parent, not_found;\n export ProvidedTraitMethodInfo;\n+export StaticMethodInfo;\n \n struct ProvidedTraitMethodInfo {\n     ty: ty::method,\n     def_id: ast::def_id\n }\n \n+struct StaticMethodInfo {\n+    ident: ast::ident,\n+    def_id: ast::def_id,\n+    purity: ast::purity\n+}\n+\n fn get_symbol(cstore: cstore::CStore, def: ast::def_id) -> ~str {\n     let cdata = cstore::get_crate_data(cstore, def.crate).data;\n     return decoder::get_symbol(cdata, def.node);\n@@ -120,6 +129,18 @@ fn get_method_names_if_trait(cstore: cstore::CStore, def: ast::def_id)\n     return decoder::get_method_names_if_trait(cstore.intr, cdata, def.node);\n }\n \n+fn get_type_name_if_impl(cstore: cstore::CStore, def: ast::def_id) ->\n+        Option<ast::ident> {\n+    let cdata = cstore::get_crate_data(cstore, def.crate);\n+    decoder::get_type_name_if_impl(cstore.intr, cdata, def.node)\n+}\n+\n+fn get_static_methods_if_impl(cstore: cstore::CStore, def: ast::def_id) ->\n+        Option<~[StaticMethodInfo]> {\n+    let cdata = cstore::get_crate_data(cstore, def.crate);\n+    decoder::get_static_methods_if_impl(cstore.intr, cdata, def.node)\n+}\n+\n fn get_item_attrs(cstore: cstore::CStore,\n                   def_id: ast::def_id,\n                   f: fn(~[@ast::meta_item])) {"}, {"sha": "4e30132b1a73fd342ae214d9cc939e33a43ae8d3", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -19,7 +19,7 @@ use syntax::diagnostic::span_handler;\n use common::*;\n use syntax::parse::token::ident_interner;\n use hash::{Hash, HashUtil};\n-use csearch::ProvidedTraitMethodInfo;\n+use csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n \n export class_dtor;\n export get_class_fields;\n@@ -31,6 +31,7 @@ export get_type_param_count;\n export get_impl_traits;\n export get_class_method;\n export get_impl_method;\n+export get_static_methods_if_impl;\n export lookup_def;\n export resolve_path;\n export get_crate_attributes;\n@@ -43,6 +44,7 @@ export get_impls_for_mod;\n export get_trait_methods;\n export get_provided_trait_methods;\n export get_method_names_if_trait;\n+export get_type_name_if_impl;\n export get_item_attrs;\n export get_crate_module_paths;\n export def_like;\n@@ -185,6 +187,12 @@ fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n     None\n }\n \n+fn translated_parent_item_opt(cnum: ast::crate_num, d: ebml::Doc) ->\n+        Option<ast::def_id> {\n+    let trait_did_opt = item_parent_item(d);\n+    trait_did_opt.map(|trait_did| {crate: cnum, node: trait_did.node})\n+}\n+\n fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n                                         d: ebml::Doc) -> ast::def_id {\n     let trait_did = item_parent_item(d).expect(~\"item without parent\");\n@@ -321,16 +329,16 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n         PureFn    => dl_def(ast::def_fn(did, ast::pure_fn)),\n         ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n         UnsafeStaticMethod => {\n-            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did, ast::unsafe_fn))\n+            let trait_did_opt = translated_parent_item_opt(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did_opt, ast::unsafe_fn))\n         }\n         StaticMethod => {\n-            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did, ast::impure_fn))\n+            let trait_did_opt = translated_parent_item_opt(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did_opt, ast::impure_fn))\n         }\n         PureStaticMethod => {\n-            let trait_did = item_reqd_and_translated_parent_item(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did, ast::pure_fn))\n+            let trait_did_opt = translated_parent_item_opt(cnum, item);\n+            dl_def(ast::def_static_method(did, trait_did_opt, ast::pure_fn))\n         }\n         Type | ForeignType => dl_def(ast::def_ty(did)),\n         Mod => dl_def(ast::def_mod(did)),\n@@ -783,6 +791,67 @@ fn get_method_names_if_trait(intr: @ident_interner, cdata: cmd,\n     return Some(resulting_methods);\n }\n \n+fn get_type_name_if_impl(intr: @ident_interner,\n+                         cdata: cmd,\n+                         node_id: ast::node_id) -> Option<ast::ident> {\n+    let item = lookup_item(node_id, cdata.data);\n+    if item_family(item) != Impl {\n+        return None;\n+    }\n+\n+    for ebml::tagged_docs(item, tag_item_impl_type_basename) |doc| {\n+        return Some(intr.intern(@str::from_bytes(ebml::doc_data(doc))));\n+    }\n+\n+    return None;\n+}\n+\n+fn get_static_methods_if_impl(intr: @ident_interner,\n+                               cdata: cmd,\n+                               node_id: ast::node_id) ->\n+                               Option<~[StaticMethodInfo]> {\n+    let item = lookup_item(node_id, cdata.data);\n+    if item_family(item) != Impl {\n+        return None;\n+    }\n+\n+    // If this impl has a trait ref, don't consider it.\n+    for ebml::tagged_docs(item, tag_impl_trait) |_doc| {\n+        return None;\n+    }\n+\n+    let impl_method_ids = DVec();\n+    for ebml::tagged_docs(item, tag_item_impl_method) |impl_method_doc| {\n+        impl_method_ids.push(parse_def_id(ebml::doc_data(impl_method_doc)));\n+    }\n+\n+    let static_impl_methods = DVec();\n+    for impl_method_ids.each |impl_method_id| {\n+        let impl_method_doc = lookup_item(impl_method_id.node, cdata.data);\n+        let family = item_family(impl_method_doc);\n+        match family {\n+            StaticMethod | UnsafeStaticMethod | PureStaticMethod => {\n+                let purity;\n+                match item_family(impl_method_doc) {\n+                    StaticMethod => purity = ast::impure_fn,\n+                    UnsafeStaticMethod => purity = ast::unsafe_fn,\n+                    PureStaticMethod => purity = ast::pure_fn,\n+                    _ => fail\n+                }\n+\n+                static_impl_methods.push(StaticMethodInfo {\n+                    ident: item_name(intr, impl_method_doc),\n+                    def_id: item_def_id(impl_method_doc, cdata),\n+                    purity: purity\n+                });\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    return Some(dvec::unwrap(move static_impl_methods));\n+}\n+\n fn get_item_attrs(cdata: cmd,\n                   node_id: ast::node_id,\n                   f: fn(~[@ast::meta_item])) {"}, {"sha": "a1d85a63ee1487050902840528177e46e822ea31", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -90,6 +90,12 @@ fn encode_name(ecx: @encode_ctxt, ebml_w: ebml::Serializer, name: ident) {\n     ebml_w.wr_tagged_str(tag_paths_data_name, ecx.tcx.sess.str_of(name));\n }\n \n+fn encode_impl_type_basename(ecx: @encode_ctxt, ebml_w: ebml::Serializer,\n+                             name: ident) {\n+    ebml_w.wr_tagged_str(tag_item_impl_type_basename,\n+                         ecx.tcx.sess.str_of(name));\n+}\n+\n fn encode_def_id(ebml_w: ebml::Serializer, id: def_id) {\n     ebml_w.wr_tagged_str(tag_def_id, def_to_str(id));\n }\n@@ -484,7 +490,12 @@ fn encode_info_for_method(ecx: @encode_ctxt, ebml_w: ebml::Serializer,\n            ecx.tcx.sess.str_of(m.ident), all_tps.len());\n     ebml_w.start_tag(tag_items_data_item);\n     encode_def_id(ebml_w, local_def(m.id));\n-    encode_family(ebml_w, purity_fn_family(m.purity));\n+    match m.self_ty.node {\n+        ast::sty_static => {\n+            encode_family(ebml_w, purity_static_method_family(m.purity));\n+        }\n+        _ => encode_family(ebml_w, purity_fn_family(m.purity))\n+    }\n     encode_type_param_bounds(ebml_w, ecx, all_tps);\n     encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, m.id));\n     encode_name(ecx, ebml_w, m.ident);\n@@ -701,7 +712,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Serializer,\n         encode_index(ebml_w, bkts, write_int);\n         ebml_w.end_tag();\n       }\n-      item_impl(tps, opt_trait, _, methods) => {\n+      item_impl(tps, opt_trait, ty, methods) => {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n@@ -711,6 +722,13 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Serializer,\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_name(ecx, ebml_w, item.ident);\n         encode_attributes(ebml_w, item.attrs);\n+        match ty.node {\n+            ast::ty_path(path, _) if path.idents.len() == 1 => {\n+                encode_impl_type_basename(ecx, ebml_w,\n+                                          ast_util::path_to_ident(path));\n+            }\n+            _ => {}\n+        }\n         for methods.each |m| {\n             ebml_w.start_tag(tag_item_impl_method);\n             ebml_w.writer.write(str::to_bytes(def_to_str(local_def(m.id))));"}, {"sha": "d264188e65d34168e3d0b08a92cb34f69f7cabc4", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -326,8 +326,10 @@ impl ast::def: tr {\n     fn tr(xcx: extended_decode_ctxt) -> ast::def {\n         match self {\n           ast::def_fn(did, p) => { ast::def_fn(did.tr(xcx), p) }\n-          ast::def_static_method(did, did2, p) => {\n-            ast::def_static_method(did.tr(xcx), did2.tr(xcx), p)\n+          ast::def_static_method(did, did2_opt, p) => {\n+            ast::def_static_method(did.tr(xcx),\n+                                   did2_opt.map(|did2| did2.tr(xcx)),\n+                                   p)\n           }\n           ast::def_self(nid) => { ast::def_self(xcx.tr_id(nid)) }\n           ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }"}, {"sha": "33b56d7fabe0d0de00d3912a24bfceaf550134d4", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 93, "deletions": 17, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -1,5 +1,6 @@\n use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n+use metadata::csearch::{get_static_methods_if_impl, get_type_name_if_impl};\n use metadata::cstore::find_use_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n@@ -1082,7 +1083,6 @@ impl Resolver {\n     fn build_reduced_graph_for_item(item: @item,\n                                     parent: ReducedGraphParent,\n                                     &&visitor: vt<ReducedGraphParent>) {\n-\n         let ident = item.ident;\n         let sp = item.span;\n         let legacy = match parent {\n@@ -1276,7 +1276,7 @@ impl Resolver {\n                             self.add_child(ident, new_parent,\n                                            ForbidDuplicateValues, ty_m.span);\n                         let def = def_static_method(local_def(ty_m.id),\n-                                                    local_def(item.id),\n+                                                    Some(local_def(item.id)),\n                                                     ty_m.purity);\n                         (*method_name_bindings).define_value\n                             (Public, def, ty_m.span);\n@@ -1734,27 +1734,105 @@ impl Resolver {\n                 current_module = (*child_name_bindings).get_module();\n             }\n \n-            // Add the new child item.\n-            let (child_name_bindings, new_parent) =\n-                self.add_child(final_ident,\n-                               ModuleReducedGraphParent(current_module),\n-                               OverwriteDuplicates,\n-                               dummy_sp());\n-\n             match path_entry.def_like {\n                 dl_def(def) => {\n+                    // Add the new child item.\n+                    let (child_name_bindings, new_parent) =\n+                        self.add_child(final_ident,\n+                                       ModuleReducedGraphParent(\n+                                            current_module),\n+                                       OverwriteDuplicates,\n+                                       dummy_sp());\n+\n                     self.handle_external_def(def, modules,\n                                              child_name_bindings,\n                                              self.session.str_of(final_ident),\n                                              final_ident, new_parent);\n                 }\n-                dl_impl(_) => {\n+                dl_impl(def) => {\n                     // We only process static methods of impls here.\n                     debug!(\"(building reduced graph for external crate) \\\n                             processing impl %s\", final_ident_str);\n \n-                    // FIXME (#3786): Cross-crate static methods in anonymous\n-                    // traits.\n+                    match get_type_name_if_impl(self.session.cstore, def) {\n+                        None => {}\n+                        Some(final_ident) => {\n+                            let static_methods_opt =\n+                                get_static_methods_if_impl(\n+                                    self.session.cstore, def);\n+                            match static_methods_opt {\n+                                Some(static_methods) if\n+                                    static_methods.len() >= 1 => {\n+                                    debug!(\"(building reduced graph for \\\n+                                            external crate) processing \\\n+                                            static methods for type name %s\",\n+                                            self.session.str_of(final_ident));\n+\n+                                    let (child_name_bindings, new_parent) =\n+                                        self.add_child(final_ident,\n+                                            ModuleReducedGraphParent(\n+                                                            current_module),\n+                                            OverwriteDuplicates,\n+                                            dummy_sp());\n+\n+                                    // Process the static methods. First,\n+                                    // create the module.\n+                                    let type_module;\n+                                    match copy child_name_bindings.type_def {\n+                                        Some(TypeNsDef {\n+                                            module_def: Some(copy module_def),\n+                                            _\n+                                        }) => {\n+                                            // We already have a module. This\n+                                            // is OK.\n+                                            type_module = module_def;\n+                                        }\n+                                        Some(_) | None => {\n+                                            let parent_link =\n+                                                self.get_parent_link(\n+                                                    new_parent, final_ident);\n+                                            child_name_bindings.define_module(\n+                                                Public,\n+                                                parent_link,\n+                                                Some(def),\n+                                                false,\n+                                                dummy_sp());\n+                                            type_module =\n+                                                child_name_bindings.\n+                                                    get_module();\n+                                        }\n+                                    }\n+\n+                                    // Add each static method to the module.\n+                                    let new_parent = ModuleReducedGraphParent(\n+                                        type_module);\n+                                    for static_methods.each\n+                                            |static_method_info| {\n+                                        let ident = static_method_info.ident;\n+                                        debug!(\"(building reduced graph for \\\n+                                                 external crate) creating \\\n+                                                 static method '%s'\",\n+                                               self.session.str_of(ident));\n+\n+                                        let (method_name_bindings, _) =\n+                                            self.add_child(\n+                                                ident,\n+                                                new_parent,\n+                                                OverwriteDuplicates,\n+                                                dummy_sp());\n+                                        let def = def_fn(\n+                                            static_method_info.def_id,\n+                                            static_method_info.purity);\n+                                        method_name_bindings.define_value(\n+                                            Public, def, dummy_sp());\n+                                    }\n+                                }\n+\n+                                // Otherwise, do nothing.\n+                                Some(_) | None => {}\n+                            }\n+                        }\n+                    }\n                 }\n                 dl_field => {\n                     debug!(\"(building reduced graph for external crate) \\\n@@ -1770,7 +1848,6 @@ impl Resolver {\n                               module_path: @DVec<ident>,\n                               subclass: @ImportDirectiveSubclass,\n                               span: span) {\n-\n         let directive = @ImportDirective(privacy, module_path,\n                                          subclass, span);\n         module_.imports.push(directive);\n@@ -2453,7 +2530,6 @@ impl Resolver {\n                                      xray: XrayFlag,\n                                      span: span)\n                                   -> ResolveResult<@Module> {\n-\n         let mut search_module = module_;\n         let mut index = index;\n         let module_path_len = (*module_path).len();\n@@ -2648,7 +2724,6 @@ impl Resolver {\n \n     fn resolve_module_in_lexical_scope(module_: @Module, name: ident)\n                                     -> ResolveResult<@Module> {\n-\n         match self.resolve_item_in_lexical_scope(module_, name, TypeNS) {\n             Success(target) => {\n                 match target.bindings.type_def {\n@@ -4035,9 +4110,10 @@ impl Resolver {\n                         match self.resolve_path(path, TypeNS, true, visitor) {\n                             Some(def) => {\n                                 debug!(\"(resolving type) resolved `%s` to \\\n-                                        type\",\n+                                        type %?\",\n                                        self.session.str_of(\n-                                            path.idents.last()));\n+                                            path.idents.last()),\n+                                       def);\n                                 result_def = Some(def);\n                             }\n                             None => {"}, {"sha": "175381a7bd1eedc9e370d43c2cedfbecb8ffa66e", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -75,10 +75,10 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n \n     fn trans_def(bcx: block, def: ast::def, ref_expr: @ast::expr) -> Callee {\n         match def {\n-            ast::def_fn(did, _) => {\n+            ast::def_fn(did, _) | ast::def_static_method(did, None, _) => {\n                 fn_callee(bcx, trans_fn_ref(bcx, did, ref_expr.id))\n             }\n-            ast::def_static_method(impl_did, trait_did, _) => {\n+            ast::def_static_method(impl_did, Some(trait_did), _) => {\n                 fn_callee(bcx, meth::trans_static_method_callee(bcx, impl_did,\n                                                                 trait_did,\n                                                                 ref_expr.id))"}, {"sha": "30bea1376c000212a849b1dbac6431cf29d8cc74", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -637,11 +637,11 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n     };\n \n     match def {\n-        ast::def_fn(did, _) => {\n+        ast::def_fn(did, _) | ast::def_static_method(did, None, _) => {\n             let fn_data = callee::trans_fn_ref(bcx, did, ref_expr.id);\n             return fn_data_to_datum(bcx, did, fn_data, lldest);\n         }\n-        ast::def_static_method(impl_did, trait_did, _) => {\n+        ast::def_static_method(impl_did, Some(trait_did), _) => {\n             let fn_data = meth::trans_static_method_callee(bcx, impl_did,\n                                                            trait_did,\n                                                            ref_expr.id);"}, {"sha": "ec9398dea15ec317fea7fd34a35e290bb27c46a2", "filename": "src/test/auxiliary/anon_trait_static_method_lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -0,0 +1,10 @@\n+pub struct Foo {\n+    x: int\n+}\n+\n+pub impl Foo {\n+    static fn new() -> Foo {\n+        Foo { x: 3 }\n+    }\n+}\n+"}, {"sha": "052f95ed3b54478e0c35d8e764cf55f82c14b498", "filename": "src/test/run-pass/anon_trait_static_method_exe.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/754704ea9442ce92602f8022f6c979824b016842/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/754704ea9442ce92602f8022f6c979824b016842/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs?ref=754704ea9442ce92602f8022f6c979824b016842", "patch": "@@ -0,0 +1,13 @@\n+// xfail-fast - check-fast doesn't understand aux-build\n+// aux-build:anon_trait_static_method_lib.rs\n+\n+extern mod anon_trait_static_method_lib;\n+use anon_trait_static_method_lib::Foo;\n+\n+fn main() {\n+    let x = Foo::new();\n+    io::println(x.x.to_str());\n+}\n+\n+\n+"}]}