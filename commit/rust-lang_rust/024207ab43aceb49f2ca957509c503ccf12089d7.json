{"sha": "024207ab43aceb49f2ca957509c503ccf12089d7", "node_id": "C_kwDOAAsO6NoAKDAyNDIwN2FiNDNhY2ViNDlmMmNhOTU3NTA5YzUwM2NjZjEyMDg5ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T23:03:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-31T23:03:39Z"}, "message": "Auto merge of #102950 - oli-obk:check_miri, r=RalfJung\n\nEnable `x.py check` for miri\n\nNow that the miri subtree is working properly, let's add it to x.py check.\n\ncc `@rust-lang/miri`", "tree": {"sha": "484845063afb30c6f8270c800724f89e091125b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484845063afb30c6f8270c800724f89e091125b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/024207ab43aceb49f2ca957509c503ccf12089d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/024207ab43aceb49f2ca957509c503ccf12089d7", "html_url": "https://github.com/rust-lang/rust/commit/024207ab43aceb49f2ca957509c503ccf12089d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/024207ab43aceb49f2ca957509c503ccf12089d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a3a7277b44bbd2dd3485703d9a05f64652b60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a3a7277b44bbd2dd3485703d9a05f64652b60e", "html_url": "https://github.com/rust-lang/rust/commit/95a3a7277b44bbd2dd3485703d9a05f64652b60e"}, {"sha": "b35e2bf9470c0a6f474e47a431d539ce7ca8ead9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b35e2bf9470c0a6f474e47a431d539ce7ca8ead9", "html_url": "https://github.com/rust-lang/rust/commit/b35e2bf9470c0a6f474e47a431d539ce7ca8ead9"}], "stats": {"total": 79, "additions": 26, "deletions": 53}, "files": [{"sha": "c8285c85d03582fcb8425d77eb1bf8b8cd8b313f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -621,6 +621,7 @@ impl<'a> Builder<'a> {\n                 check::CodegenBackend,\n                 check::Clippy,\n                 check::Miri,\n+                check::CargoMiri,\n                 check::Rls,\n                 check::RustAnalyzer,\n                 check::Rustfmt,"}, {"sha": "4450dd7e80f95bf960d761b5654111fb4ffb4599", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -451,14 +451,13 @@ macro_rules! tool_check_step {\n }\n \n tool_check_step!(Rustdoc, \"src/tools/rustdoc\", \"src/librustdoc\", SourceType::InTree);\n-// Clippy and Rustfmt are hybrids. They are external tools, but use a git subtree instead\n+// Clippy, miri and Rustfmt are hybrids. They are external tools, but use a git subtree instead\n // of a submodule. Since the SourceType only drives the deny-warnings\n // behavior, treat it as in-tree so that any new warnings in clippy will be\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n-// Miri on the other hand is treated as out of tree, since InTree also causes it to\n-// be run as part of `check`, which can fail on platforms which libffi-sys has no support for.\n-tool_check_step!(Miri, \"src/tools/miri\", SourceType::Submodule);\n+tool_check_step!(Miri, \"src/tools/miri\", SourceType::InTree);\n+tool_check_step!(CargoMiri, \"src/tools/miri/cargo-miri\", SourceType::InTree);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::InTree);\n tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n "}, {"sha": "5d265b9ad0c19eb5473620dfe65f8ddbfc948557", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -765,7 +765,7 @@ impl Step for Rustc {\n }\n \n macro_rules! tool_doc {\n-    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?], in_tree = $in_tree:expr $(,)?) => {\n+    ($tool: ident, $should_run: literal, $path: literal, [$($krate: literal),+ $(,)?] $(,)?) => {\n         #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $tool {\n             target: TargetSelection,\n@@ -821,12 +821,6 @@ macro_rules! tool_doc {\n                 t!(fs::create_dir_all(&out_dir));\n                 t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n-                let source_type = if $in_tree == true {\n-                    SourceType::InTree\n-                } else {\n-                    SourceType::Submodule\n-                };\n-\n                 // Build cargo command.\n                 let mut cargo = prepare_tool_cargo(\n                     builder,\n@@ -835,7 +829,7 @@ macro_rules! tool_doc {\n                     target,\n                     \"doc\",\n                     $path,\n-                    source_type,\n+                    SourceType::InTree,\n                     &[],\n                 );\n \n@@ -851,38 +845,21 @@ macro_rules! tool_doc {\n                 cargo.rustdocflag(\"--show-type-layout\");\n                 cargo.rustdocflag(\"--generate-link-to-definition\");\n                 cargo.rustdocflag(\"-Zunstable-options\");\n-                if $in_tree == true {\n-                    builder.run(&mut cargo.into());\n-                } else {\n-                    // Allow out-of-tree docs to fail (since the tool might be in a broken state).\n-                    if !builder.try_run(&mut cargo.into()) {\n-                        builder.info(&format!(\n-                            \"WARNING: tool {} failed to document; ignoring failure because it is an out-of-tree tool\",\n-                            stringify!($tool).to_lowercase(),\n-                        ));\n-                    }\n-                }\n+                builder.run(&mut cargo.into());\n             }\n         }\n     }\n }\n \n-tool_doc!(\n-    Rustdoc,\n-    \"rustdoc-tool\",\n-    \"src/tools/rustdoc\",\n-    [\"rustdoc\", \"rustdoc-json-types\"],\n-    in_tree = true\n-);\n+tool_doc!(Rustdoc, \"rustdoc-tool\", \"src/tools/rustdoc\", [\"rustdoc\", \"rustdoc-json-types\"],);\n tool_doc!(\n     Rustfmt,\n     \"rustfmt-nightly\",\n     \"src/tools/rustfmt\",\n     [\"rustfmt-nightly\", \"rustfmt-config_proc_macro\"],\n-    in_tree = true\n );\n-tool_doc!(Clippy, \"clippy\", \"src/tools/clippy\", [\"clippy_utils\"], in_tree = true);\n-tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"], in_tree = false);\n+tool_doc!(Clippy, \"clippy\", \"src/tools/clippy\", [\"clippy_utils\"]);\n+tool_doc!(Miri, \"miri\", \"src/tools/miri\", [\"miri\"]);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "944fc3557f8fa328259b4f5102a93eeddf56dfe0", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -509,7 +509,7 @@ impl Step for Miri {\n             host,\n             \"run\",\n             \"src/tools/miri/cargo-miri\",\n-            SourceType::Submodule,\n+            SourceType::InTree,\n             &[],\n         );\n         cargo.add_rustc_lib_path(builder, compiler);\n@@ -557,7 +557,7 @@ impl Step for Miri {\n             host,\n             \"test\",\n             \"src/tools/miri\",\n-            SourceType::Submodule,\n+            SourceType::InTree,\n             &[],\n         );\n         cargo.add_rustc_lib_path(builder, compiler);"}, {"sha": "d395220694705e7c6c6c586df1bbdc98c88936ac", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -794,10 +794,9 @@ macro_rules! tool_extended {\n        $($name:ident,\n        $path:expr,\n        $tool_name:expr,\n-       stable = $stable:expr,\n-       $(in_tree = $in_tree:expr,)?\n-       $(tool_std = $tool_std:literal,)?\n-       $extra_deps:block;)+) => {\n+       stable = $stable:expr\n+       $(,tool_std = $tool_std:literal)?\n+       ;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n         pub struct $name {\n@@ -839,7 +838,6 @@ macro_rules! tool_extended {\n \n             #[allow(unused_mut)]\n             fn run(mut $sel, $builder: &Builder<'_>) -> Option<PathBuf> {\n-                $extra_deps\n                 $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n@@ -848,11 +846,7 @@ macro_rules! tool_extended {\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n-                    source_type: if false $(|| $in_tree)* {\n-                        SourceType::InTree\n-                    } else {\n-                        SourceType::Submodule\n-                    },\n+                    source_type: SourceType::InTree,\n                 })\n             }\n         }\n@@ -865,17 +859,17 @@ macro_rules! tool_extended {\n // Note: Most submodule updates for tools are handled by bootstrap.py, since they're needed just to\n // invoke Cargo to build bootstrap. See the comment there for more details.\n tool_extended!((self, builder),\n-    Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, in_tree=true, {};\n-    CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n-    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n-    Miri, \"src/tools/miri\", \"miri\", stable=false, in_tree=true, {};\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, in_tree=true, {};\n+    Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true;\n+    CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true;\n+    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true;\n+    Miri, \"src/tools/miri\", \"miri\", stable=false;\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true;\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n-    Rls, \"src/tools/rls\", \"rls\", stable=true, in_tree=true, tool_std=true, {};\n-    RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, in_tree=true, tool_std=true, {};\n-    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, in_tree=true, {};\n+    Rls, \"src/tools/rls\", \"rls\", stable=true, tool_std=true;\n+    RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, tool_std=true;\n+    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true;\n );\n \n impl<'a> Builder<'a> {"}, {"sha": "3b73d05907b4effea73fc1a019f943c0d7cc367f", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -38,6 +38,8 @@\n     clippy::cast_lossless,\n     clippy::cast_possible_truncation,\n )]\n+// Needed for rustdoc from bootstrap (with `-Znormalize-docs`).\n+#![recursion_limit = \"256\"]\n \n extern crate rustc_apfloat;\n extern crate rustc_ast;"}]}