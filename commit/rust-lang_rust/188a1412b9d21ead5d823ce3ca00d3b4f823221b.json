{"sha": "188a1412b9d21ead5d823ce3ca00d3b4f823221b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OGExNDEyYjlkMjFlYWQ1ZDgyM2NlM2NhMDBkM2I0ZjgyMzIyMWI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:01:05Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T17:01:05Z"}, "message": "Refactor and rename", "tree": {"sha": "ae88169bb7a92c90da18fce777e159760401ae9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae88169bb7a92c90da18fce777e159760401ae9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/188a1412b9d21ead5d823ce3ca00d3b4f823221b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/188a1412b9d21ead5d823ce3ca00d3b4f823221b", "html_url": "https://github.com/rust-lang/rust/commit/188a1412b9d21ead5d823ce3ca00d3b4f823221b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/188a1412b9d21ead5d823ce3ca00d3b4f823221b/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42661a3b27f039f4eb11ef7c5f4733bb79b4a1ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/42661a3b27f039f4eb11ef7c5f4733bb79b4a1ec", "html_url": "https://github.com/rust-lang/rust/commit/42661a3b27f039f4eb11ef7c5f4733bb79b4a1ec"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "b92312d5276aa0c838cadd2bd176e21e60f080b8", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/188a1412b9d21ead5d823ce3ca00d3b4f823221b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188a1412b9d21ead5d823ce3ca00d3b4f823221b/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=188a1412b9d21ead5d823ce3ca00d3b4f823221b", "patch": "@@ -52,23 +52,21 @@ pub(crate) struct Rule {\n     pub(crate) rhs: tt::Subtree,\n }\n \n-/// Find the \"shift\" (the highest id of the TokenId) inside a subtree\n-fn find_subtree_shift(tt: &tt::Subtree, mut cur: u32) -> u32 {\n-    use std::cmp::max;\n-\n-    for t in &tt.token_trees {\n-        cur = match t {\n-            tt::TokenTree::Leaf(leaf) => match leaf {\n-                tt::Leaf::Ident(ident) if ident.id != tt::TokenId::unspecified() => {\n-                    max(cur, ident.id.0)\n-                }\n-                _ => cur,\n-            },\n-            tt::TokenTree::Subtree(tt) => find_subtree_shift(tt, cur),\n-        }\n-    }\n-\n-    cur\n+// Find the max token id inside a subtree\n+fn max_id(subtree: &tt::Subtree) -> Option<u32> {\n+    subtree\n+        .token_trees\n+        .iter()\n+        .filter_map(|tt| match tt {\n+            tt::TokenTree::Subtree(subtree) => max_id(subtree),\n+            tt::TokenTree::Leaf(tt::Leaf::Ident(ident))\n+                if ident.id != tt::TokenId::unspecified() =>\n+            {\n+                Some(ident.id.0)\n+            }\n+            _ => None,\n+        })\n+        .max()\n }\n \n /// Shift given TokenTree token id\n@@ -77,9 +75,7 @@ fn shift_subtree(tt: &mut tt::Subtree, shift: u32) {\n         match t {\n             tt::TokenTree::Leaf(leaf) => match leaf {\n                 tt::Leaf::Ident(ident) if ident.id != tt::TokenId::unspecified() => {\n-                    // Note that TokenId is started from zero,\n-                    // We have to add 1 to prevent duplication.\n-                    ident.id.0 += shift + 1;\n+                    ident.id.0 += shift;\n                 }\n                 _ => (),\n             },\n@@ -110,7 +106,10 @@ impl MacroRules {\n             validate(&rule.lhs)?;\n         }\n \n-        Ok(MacroRules { rules, shift: find_subtree_shift(tt, 0) })\n+        // Note that TokenId is started from zero,\n+        // We have to add 1 to prevent duplication.\n+        let shift = max_id(tt).unwrap_or(0) + 1;\n+        Ok(MacroRules { rules, shift })\n     }\n \n     pub fn expand(&self, tt: &tt::Subtree) -> Result<tt::Subtree, ExpandError> {"}]}