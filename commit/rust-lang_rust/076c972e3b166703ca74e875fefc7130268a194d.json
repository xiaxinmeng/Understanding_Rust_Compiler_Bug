{"sha": "076c972e3b166703ca74e875fefc7130268a194d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NmM5NzJlM2IxNjY3MDNjYTc0ZTg3NWZlZmM3MTMwMjY4YTE5NGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T10:43:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-13T10:43:13Z"}, "message": "internal: prevent possible bugs when adding magical comments", "tree": {"sha": "13db0603e661568c9a220187ebbf90a31814abdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13db0603e661568c9a220187ebbf90a31814abdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/076c972e3b166703ca74e875fefc7130268a194d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/076c972e3b166703ca74e875fefc7130268a194d", "html_url": "https://github.com/rust-lang/rust/commit/076c972e3b166703ca74e875fefc7130268a194d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/076c972e3b166703ca74e875fefc7130268a194d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56f0414776ad7de87679d4e646828b043518787", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56f0414776ad7de87679d4e646828b043518787", "html_url": "https://github.com/rust-lang/rust/commit/c56f0414776ad7de87679d4e646828b043518787"}], "stats": {"total": 248, "additions": 139, "deletions": 109}, "files": [{"sha": "472aef26480bd3c31d061b6424738994118f6e3f", "filename": "crates/ide_assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=076c972e3b166703ca74e875fefc7130268a194d", "patch": "@@ -6,21 +6,21 @@ use syntax::{\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-/// Assist: line_to_block\n-///\n-/// Converts comments between block and single-line form\n-///\n-/// ```\n-///    // Multi-line\n-///    // comment\n-/// ```\n-/// ->\n-/// ```\n-///   /**\n-///   Multi-line\n-///   comment\n-///   */\n-/// ```\n+// Assist: line_to_block\n+//\n+// Converts comments between block and single-line form.\n+//\n+// ```\n+//    // Multi-line$0\n+//    // comment\n+// ```\n+// ->\n+// ```\n+//   /*\n+//   Multi-line\n+//   comment\n+//   */\n+// ```\n pub(crate) fn convert_comment_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let comment = ctx.find_token_at_offset::<ast::Comment>()?;\n     // Only allow comments which are alone on their line"}, {"sha": "46dd409409bc3f0dbe6c91befe24c131d0c8f5a7", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=076c972e3b166703ca74e875fefc7130268a194d", "patch": "@@ -1064,6 +1064,23 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_line_to_block() {\n+    check_doc_test(\n+        \"line_to_block\",\n+        r#####\"\n+   // Multi-line$0\n+   // comment\n+\"#####,\n+        r#####\"\n+  /*\n+  Multi-line\n+  comment\n+  */\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_make_raw_string() {\n     check_doc_test("}, {"sha": "9e6d26640e7eeac748f64fb3e5261a7847c3b3f2", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 92, "deletions": 92, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=076c972e3b166703ca74e875fefc7130268a194d", "patch": "@@ -1,95 +1,4 @@\n-//! Feature: completion with imports-on-the-fly\n-//!\n-//! When completing names in the current scope, proposes additional imports from other modules or crates,\n-//! if they can be qualified in the scope, and their name contains all symbols from the completion input.\n-//!\n-//! To be considered applicable, the name must contain all input symbols in the given order, not necessarily adjacent.\n-//! If any input symbol is not lowercased, the name must contain all symbols in exact case; otherwise the containing is checked case-insensitively.\n-//!\n-//! ```\n-//! fn main() {\n-//!     pda$0\n-//! }\n-//! # pub mod std { pub mod marker { pub struct PhantomData { } } }\n-//! ```\n-//! ->\n-//! ```\n-//! use std::marker::PhantomData;\n-//!\n-//! fn main() {\n-//!     PhantomData\n-//! }\n-//! # pub mod std { pub mod marker { pub struct PhantomData { } } }\n-//! ```\n-//!\n-//! Also completes associated items, that require trait imports.\n-//! If any unresolved and/or partially-qualified path precedes the input, it will be taken into account.\n-//! Currently, only the imports with their import path ending with the whole qualifier will be proposed\n-//! (no fuzzy matching for qualifier).\n-//!\n-//! ```\n-//! mod foo {\n-//!     pub mod bar {\n-//!         pub struct Item;\n-//!\n-//!         impl Item {\n-//!             pub const TEST_ASSOC: usize = 3;\n-//!         }\n-//!     }\n-//! }\n-//!\n-//! fn main() {\n-//!     bar::Item::TEST_A$0\n-//! }\n-//! ```\n-//! ->\n-//! ```\n-//! use foo::bar;\n-//!\n-//! mod foo {\n-//!     pub mod bar {\n-//!         pub struct Item;\n-//!\n-//!         impl Item {\n-//!             pub const TEST_ASSOC: usize = 3;\n-//!         }\n-//!     }\n-//! }\n-//!\n-//! fn main() {\n-//!     bar::Item::TEST_ASSOC\n-//! }\n-//! ```\n-//!\n-//! NOTE: currently, if an assoc item comes from a trait that's not currently imported, and it also has an unresolved and/or partially-qualified path,\n-//! no imports will be proposed.\n-//!\n-//! .Fuzzy search details\n-//!\n-//! To avoid an excessive amount of the results returned, completion input is checked for inclusion in the names only\n-//! (i.e. in `HashMap` in the `std::collections::HashMap` path).\n-//! For the same reasons, avoids searching for any path imports for inputs with their length less than 2 symbols\n-//! (but shows all associated items for any input length).\n-//!\n-//! .Import configuration\n-//!\n-//! It is possible to configure how use-trees are merged with the `importMergeBehavior` setting.\n-//! Mimics the corresponding behavior of the `Auto Import` feature.\n-//!\n-//! .LSP and performance implications\n-//!\n-//! The feature is enabled only if the LSP client supports LSP protocol version 3.16+ and reports the `additionalTextEdits`\n-//! (case-sensitive) resolve client capability in its client capabilities.\n-//! This way the server is able to defer the costly computations, doing them for a selected completion item only.\n-//! For clients with no such support, all edits have to be calculated on the completion request, including the fuzzy search completion ones,\n-//! which might be slow ergo the feature is automatically disabled.\n-//!\n-//! .Feature toggle\n-//!\n-//! The feature can be forcefully turned off in the settings with the `rust-analyzer.completion.autoimport.enable` flag.\n-//! Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corresponding\n-//! capability enabled.\n-\n+//! See [`import_on_the_fly`].\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n@@ -105,6 +14,97 @@ use crate::{\n \n use super::Completions;\n \n+// Feature: Completion With Autoimport\n+//\n+// When completing names in the current scope, proposes additional imports from other modules or crates,\n+// if they can be qualified in the scope, and their name contains all symbols from the completion input.\n+//\n+// To be considered applicable, the name must contain all input symbols in the given order, not necessarily adjacent.\n+// If any input symbol is not lowercased, the name must contain all symbols in exact case; otherwise the containing is checked case-insensitively.\n+//\n+// ```\n+// fn main() {\n+//     pda$0\n+// }\n+// # pub mod std { pub mod marker { pub struct PhantomData { } } }\n+// ```\n+// ->\n+// ```\n+// use std::marker::PhantomData;\n+//\n+// fn main() {\n+//     PhantomData\n+// }\n+// # pub mod std { pub mod marker { pub struct PhantomData { } } }\n+// ```\n+//\n+// Also completes associated items, that require trait imports.\n+// If any unresolved and/or partially-qualified path precedes the input, it will be taken into account.\n+// Currently, only the imports with their import path ending with the whole qualifier will be proposed\n+// (no fuzzy matching for qualifier).\n+//\n+// ```\n+// mod foo {\n+//     pub mod bar {\n+//         pub struct Item;\n+//\n+//         impl Item {\n+//             pub const TEST_ASSOC: usize = 3;\n+//         }\n+//     }\n+// }\n+//\n+// fn main() {\n+//     bar::Item::TEST_A$0\n+// }\n+// ```\n+// ->\n+// ```\n+// use foo::bar;\n+//\n+// mod foo {\n+//     pub mod bar {\n+//         pub struct Item;\n+//\n+//         impl Item {\n+//             pub const TEST_ASSOC: usize = 3;\n+//         }\n+//     }\n+// }\n+//\n+// fn main() {\n+//     bar::Item::TEST_ASSOC\n+// }\n+// ```\n+//\n+// NOTE: currently, if an assoc item comes from a trait that's not currently imported, and it also has an unresolved and/or partially-qualified path,\n+// no imports will be proposed.\n+//\n+// .Fuzzy search details\n+//\n+// To avoid an excessive amount of the results returned, completion input is checked for inclusion in the names only\n+// (i.e. in `HashMap` in the `std::collections::HashMap` path).\n+// For the same reasons, avoids searching for any path imports for inputs with their length less than 2 symbols\n+// (but shows all associated items for any input length).\n+//\n+// .Import configuration\n+//\n+// It is possible to configure how use-trees are merged with the `importMergeBehavior` setting.\n+// Mimics the corresponding behavior of the `Auto Import` feature.\n+//\n+// .LSP and performance implications\n+//\n+// The feature is enabled only if the LSP client supports LSP protocol version 3.16+ and reports the `additionalTextEdits`\n+// (case-sensitive) resolve client capability in its client capabilities.\n+// This way the server is able to defer the costly computations, doing them for a selected completion item only.\n+// For clients with no such support, all edits have to be calculated on the completion request, including the fuzzy search completion ones,\n+// which might be slow ergo the feature is automatically disabled.\n+//\n+// .Feature toggle\n+//\n+// The feature can be forcefully turned off in the settings with the `rust-analyzer.completion.autoimport.enable` flag.\n+// Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corresponding\n+// capability enabled.\n pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;"}, {"sha": "28da6d69c8c906721f794889ddbba92ba96d58fc", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=076c972e3b166703ca74e875fefc7130268a194d", "patch": "@@ -1,4 +1,4 @@\n-//! See `complete_fn_param`.\n+//! See [`complete_fn_param`].\n \n use rustc_hash::FxHashMap;\n use syntax::{"}, {"sha": "6a332bce85d84110b7b312947e6deaed0bc9ead4", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/076c972e3b166703ca74e875fefc7130268a194d/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=076c972e3b166703ca74e875fefc7130268a194d", "patch": "@@ -48,6 +48,7 @@ pub struct CommentBlock {\n     pub id: String,\n     pub line: usize,\n     pub contents: Vec<String>,\n+    is_doc: bool,\n }\n \n impl CommentBlock {\n@@ -61,6 +62,13 @@ impl CommentBlock {\n             .filter_map(|mut block| {\n                 let first = block.contents.remove(0);\n                 first.strip_prefix(&tag).map(|id| {\n+                    if block.is_doc {\n+                        panic!(\n+                            \"Use plain (non-doc) comments with tags like {}:\\n    {}\",\n+                            tag, first\n+                        )\n+                    }\n+\n                     block.id = id.trim().to_string();\n                     block\n                 })\n@@ -73,11 +81,16 @@ impl CommentBlock {\n \n         let lines = text.lines().map(str::trim_start);\n \n-        let dummy_block = CommentBlock { id: String::new(), line: 0, contents: Vec::new() };\n+        let dummy_block =\n+            CommentBlock { id: String::new(), line: 0, contents: Vec::new(), is_doc: false };\n         let mut block = dummy_block.clone();\n         for (line_num, line) in lines.enumerate() {\n             match line.strip_prefix(\"//\") {\n                 Some(mut contents) => {\n+                    if let Some('/' | '!') = contents.chars().next() {\n+                        contents = &contents[1..];\n+                        block.is_doc = true;\n+                    }\n                     if let Some(' ') = contents.chars().next() {\n                         contents = &contents[1..];\n                     }"}]}