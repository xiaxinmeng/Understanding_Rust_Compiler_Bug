{"sha": "e5a86d7358520477b816e118200fc7dc664b3f6e", "node_id": "C_kwDOAAsO6NoAKGU1YTg2ZDczNTg1MjA0NzdiODE2ZTExODIwMGZjN2RjNjY0YjNmNmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-14T08:44:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-14T08:44:21Z"}, "message": "Rollup merge of #98705 - WaffleLapkin:closure_binder, r=cjgillot\n\nImplement `for<>` lifetime binder for closures\n\nThis PR implements RFC 3216 ([TI](https://github.com/rust-lang/rust/issues/97362)) and allows code like the following:\n\n```rust\nlet _f = for<'a, 'b> |a: &'a A, b: &'b B| -> &'b C { b.c(a) };\n//       ^^^^^^^^^^^--- new!\n```\n\ncc ``@Aaron1011`` ``@cjgillot``", "tree": {"sha": "cc3b8f12948902b3551659742f499570ccce5951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3b8f12948902b3551659742f499570ccce5951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5a86d7358520477b816e118200fc7dc664b3f6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiz9dlCRBK7hj4Ov3rIwAA05oIAJiR+GWYrsWimMvhInGA6LiD\ny42kfBrDf750uu3WD46FscfDQadUqD4RA6ItN/RLNS1BHczm8YkTok29XGuP/CTz\nuFqORVIDDb/INmrHuliOOYtwCk1pKULCGJMbqsxhvy1YWggFhG5e7/TXr3ghWmsv\nFSDZEYQ4cbQA6GwDmt+1JtmmS4ZkJBhA6xj67niiLbHiFS5WxfrOfIwdSYxVjbrT\npjtx60jH0jAQHPlEhKq6GMu16QCbkcyeeumPB/svQHJYQay0hmPvCYj2MtCle8m3\nWvr/lojzxLiM5KLJuxdXbKSfTp3MnImmzq/2j6GGUsmTP+75N2AoCbWLFiQZxoM=\n=U1pj\n-----END PGP SIGNATURE-----\n", "payload": "tree cc3b8f12948902b3551659742f499570ccce5951\nparent 103b8602b7e3cfc8301ab9e0981563bde3789ea7\nparent 9aa142b5f1cf85e9941f7f9a35caa604500dab8b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657788261 +0530\ncommitter GitHub <noreply@github.com> 1657788261 +0530\n\nRollup merge of #98705 - WaffleLapkin:closure_binder, r=cjgillot\n\nImplement `for<>` lifetime binder for closures\n\nThis PR implements RFC 3216 ([TI](https://github.com/rust-lang/rust/issues/97362)) and allows code like the following:\n\n```rust\nlet _f = for<'a, 'b> |a: &'a A, b: &'b B| -> &'b C { b.c(a) };\n//       ^^^^^^^^^^^--- new!\n```\n\ncc ``@Aaron1011`` ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a86d7358520477b816e118200fc7dc664b3f6e", "html_url": "https://github.com/rust-lang/rust/commit/e5a86d7358520477b816e118200fc7dc664b3f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5a86d7358520477b816e118200fc7dc664b3f6e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "103b8602b7e3cfc8301ab9e0981563bde3789ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/103b8602b7e3cfc8301ab9e0981563bde3789ea7", "html_url": "https://github.com/rust-lang/rust/commit/103b8602b7e3cfc8301ab9e0981563bde3789ea7"}, {"sha": "9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa142b5f1cf85e9941f7f9a35caa604500dab8b", "html_url": "https://github.com/rust-lang/rust/commit/9aa142b5f1cf85e9941f7f9a35caa604500dab8b"}], "stats": {"total": 1045, "additions": 840, "deletions": 205}, "files": [{"sha": "ac2328a582418587a9cfdee68f23ad1d2ac91c0d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1390,7 +1390,7 @@ pub enum ExprKind {\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n     ///\n     /// The final span is the span of the argument block `|...|`.\n-    Closure(CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n+    Closure(ClosureBinder, CaptureBy, Async, Movability, P<FnDecl>, P<Expr>, Span),\n     /// A block (`'label: { ... }`).\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n@@ -1518,6 +1518,31 @@ pub enum Movability {\n     Movable,\n }\n \n+/// Closure lifetime binder, `for<'a, 'b>` in `for<'a, 'b> |_: &'a (), _: &'b ()|`.\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub enum ClosureBinder {\n+    /// The binder is not present, all closure lifetimes are inferred.\n+    NotPresent,\n+    /// The binder is present.\n+    For {\n+        /// Span of the whole `for<>` clause\n+        ///\n+        /// ```text\n+        /// for<'a, 'b> |_: &'a (), _: &'b ()| { ... }\n+        /// ^^^^^^^^^^^ -- this\n+        /// ```\n+        span: Span,\n+\n+        /// Lifetimes in the `for<>` closure\n+        ///\n+        /// ```text\n+        /// for<'a, 'b> |_: &'a (), _: &'b ()| { ... }\n+        ///     ^^^^^^ -- this\n+        /// ```\n+        generic_params: P<[GenericParam]>,\n+    },\n+}\n+\n /// Represents a macro invocation. The `path` indicates which macro\n /// is being invoked, and the `args` are arguments passed to it.\n #[derive(Clone, Encodable, Decodable, Debug)]"}, {"sha": "d933ea2da9ed744801922681ae6f1bde316fbb70", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -125,6 +125,10 @@ pub trait MutVisitor: Sized {\n         noop_visit_asyncness(a, self);\n     }\n \n+    fn visit_closure_binder(&mut self, b: &mut ClosureBinder) {\n+        noop_visit_closure_binder(b, self);\n+    }\n+\n     fn visit_block(&mut self, b: &mut P<Block>) {\n         noop_visit_block(b, self);\n     }\n@@ -825,6 +829,17 @@ pub fn visit_constness<T: MutVisitor>(constness: &mut Const, vis: &mut T) {\n     }\n }\n \n+pub fn noop_visit_closure_binder<T: MutVisitor>(binder: &mut ClosureBinder, vis: &mut T) {\n+    match binder {\n+        ClosureBinder::NotPresent => {}\n+        ClosureBinder::For { span: _, generic_params } => {\n+            let mut vec = std::mem::take(generic_params).into_vec();\n+            vec.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n+            *generic_params = P::from_vec(vec);\n+        }\n+    }\n+}\n+\n pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut Async, vis: &mut T) {\n     match asyncness {\n         Async::Yes { span: _, closure_id, return_impl_trait_id } => {\n@@ -1336,7 +1351,8 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(expr);\n             arms.flat_map_in_place(|arm| vis.flat_map_arm(arm));\n         }\n-        ExprKind::Closure(_capture_by, asyncness, _movability, decl, body, span) => {\n+        ExprKind::Closure(binder, _capture_by, asyncness, _movability, decl, body, span) => {\n+            vis.visit_closure_binder(binder);\n             vis.visit_asyncness(asyncness);\n             vis.visit_fn_decl(decl);\n             vis.visit_expr(body);"}, {"sha": "3f830acbf27a61f139fb4aa79f5edea564ba70e8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -56,14 +56,14 @@ pub enum FnKind<'a> {\n     Fn(FnCtxt, Ident, &'a FnSig, &'a Visibility, &'a Generics, Option<&'a Block>),\n \n     /// E.g., `|x, y| body`.\n-    Closure(&'a FnDecl, &'a Expr),\n+    Closure(&'a ClosureBinder, &'a FnDecl, &'a Expr),\n }\n \n impl<'a> FnKind<'a> {\n     pub fn header(&self) -> Option<&'a FnHeader> {\n         match *self {\n             FnKind::Fn(_, _, sig, _, _, _) => Some(&sig.header),\n-            FnKind::Closure(_, _) => None,\n+            FnKind::Closure(_, _, _) => None,\n         }\n     }\n \n@@ -77,7 +77,7 @@ impl<'a> FnKind<'a> {\n     pub fn decl(&self) -> &'a FnDecl {\n         match self {\n             FnKind::Fn(_, _, sig, _, _, _) => &sig.decl,\n-            FnKind::Closure(decl, _) => decl,\n+            FnKind::Closure(_, decl, _) => decl,\n         }\n     }\n \n@@ -155,6 +155,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generics(&mut self, g: &'ast Generics) {\n         walk_generics(self, g)\n     }\n+    fn visit_closure_binder(&mut self, b: &'ast ClosureBinder) {\n+        walk_closure_binder(self, b)\n+    }\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)\n     }\n@@ -636,6 +639,15 @@ pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics\n     walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n }\n \n+pub fn walk_closure_binder<'a, V: Visitor<'a>>(visitor: &mut V, binder: &'a ClosureBinder) {\n+    match binder {\n+        ClosureBinder::NotPresent => {}\n+        ClosureBinder::For { generic_params, span: _ } => {\n+            walk_list!(visitor, visit_generic_param, generic_params)\n+        }\n+    }\n+}\n+\n pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a WherePredicate) {\n     match *predicate {\n         WherePredicate::BoundPredicate(WhereBoundPredicate {\n@@ -682,7 +694,8 @@ pub fn walk_fn<'a, V: Visitor<'a>>(visitor: &mut V, kind: FnKind<'a>, _span: Spa\n             walk_fn_decl(visitor, &sig.decl);\n             walk_list!(visitor, visit_block, body);\n         }\n-        FnKind::Closure(decl, body) => {\n+        FnKind::Closure(binder, decl, body) => {\n+            visitor.visit_closure_binder(binder);\n             walk_fn_decl(visitor, decl);\n             visitor.visit_expr(body);\n         }\n@@ -856,8 +869,8 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(_, _, _, ref decl, ref body, _decl_span) => {\n-            visitor.visit_fn(FnKind::Closure(decl, body), expression.span, expression.id)\n+        ExprKind::Closure(ref binder, _, _, _, ref decl, ref body, _decl_span) => {\n+            visitor.visit_fn(FnKind::Closure(binder, decl, body), expression.span, expression.id)\n         }\n         ExprKind::Block(ref block, ref opt_label) => {\n             walk_list!(visitor, visit_label, opt_label);"}, {"sha": "983efa48a457982bf8ab37e2b9f0651c68a990a7", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 56, "deletions": 15, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -155,6 +155,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_await(span, expr)\n                 }\n                 ExprKind::Closure(\n+                    ref binder,\n                     capture_clause,\n                     asyncness,\n                     movability,\n@@ -164,6 +165,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ) => {\n                     if let Async::Yes { closure_id, .. } = asyncness {\n                         self.lower_expr_async_closure(\n+                            binder,\n                             capture_clause,\n                             e.id,\n                             closure_id,\n@@ -173,6 +175,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         )\n                     } else {\n                         self.lower_expr_closure(\n+                            binder,\n                             capture_clause,\n                             e.id,\n                             movability,\n@@ -605,13 +608,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = hir::ExprKind::Closure {\n-            capture_clause,\n-            bound_generic_params: &[],\n-            fn_decl,\n-            body,\n-            fn_decl_span: self.lower_span(span),\n-            movability: Some(hir::Movability::Static),\n+        let generator_kind = {\n+            let c = self.arena.alloc(hir::Closure {\n+                binder: hir::ClosureBinder::Default,\n+                capture_clause,\n+                bound_generic_params: &[],\n+                fn_decl,\n+                body,\n+                fn_decl_span: self.lower_span(span),\n+                movability: Some(hir::Movability::Static),\n+            });\n+\n+            hir::ExprKind::Closure(c)\n         };\n         let generator = hir::Expr {\n             hir_id: self.lower_node_id(closure_node_id),\n@@ -831,14 +839,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_expr_closure(\n         &mut self,\n+        binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n         movability: Movability,\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n-        let (body, generator_option) = self.with_new_scopes(move |this| {\n+        let (binder_clause, generic_params) = self.lower_closure_binder(binder);\n+\n+        let (body_id, generator_option) = self.with_new_scopes(move |this| {\n             let prev = this.current_item;\n             this.current_item = Some(fn_decl_span);\n             let mut generator_kind = None;\n@@ -853,18 +864,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             (body_id, generator_option)\n         });\n \n-        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n             // Lower outside new scope to preserve `is_in_loop_condition`.\n             let fn_decl = this.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n-            hir::ExprKind::Closure {\n+            let c = self.arena.alloc(hir::Closure {\n+                binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n-                body,\n+                body: body_id,\n                 fn_decl_span: this.lower_span(fn_decl_span),\n                 movability: generator_option,\n-            }\n+            });\n+\n+            hir::ExprKind::Closure(c)\n         })\n     }\n \n@@ -906,15 +920,40 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n+    fn lower_closure_binder<'c>(\n+        &mut self,\n+        binder: &'c ClosureBinder,\n+    ) -> (hir::ClosureBinder, &'c [GenericParam]) {\n+        let (binder, params) = match binder {\n+            ClosureBinder::NotPresent => (hir::ClosureBinder::Default, &[][..]),\n+            &ClosureBinder::For { span, ref generic_params } => {\n+                let span = self.lower_span(span);\n+                (hir::ClosureBinder::For { span }, &**generic_params)\n+            }\n+        };\n+\n+        (binder, params)\n+    }\n+\n     fn lower_expr_async_closure(\n         &mut self,\n+        binder: &ClosureBinder,\n         capture_clause: CaptureBy,\n         closure_id: NodeId,\n         inner_closure_id: NodeId,\n         decl: &FnDecl,\n         body: &Expr,\n         fn_decl_span: Span,\n     ) -> hir::ExprKind<'hir> {\n+        if let &ClosureBinder::For { span, .. } = binder {\n+            self.tcx.sess.span_err(\n+                span,\n+                \"`for<...>` binders on `async` closures are not currently supported\",\n+            );\n+        }\n+\n+        let (binder_clause, generic_params) = self.lower_closure_binder(binder);\n+\n         let outer_decl =\n             FnDecl { inputs: decl.inputs.clone(), output: FnRetTy::Default(fn_decl_span) };\n \n@@ -952,20 +991,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             body_id\n         });\n \n-        self.with_lifetime_binder(closure_id, &[], |this, bound_generic_params| {\n+        self.with_lifetime_binder(closure_id, generic_params, |this, bound_generic_params| {\n             // We need to lower the declaration outside the new scope, because we\n             // have to conserve the state of being inside a loop condition for the\n             // closure argument types.\n             let fn_decl = this.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n-            hir::ExprKind::Closure {\n+            let c = self.arena.alloc(hir::Closure {\n+                binder: binder_clause,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body,\n                 fn_decl_span: this.lower_span(fn_decl_span),\n                 movability: None,\n-            }\n+            });\n+            hir::ExprKind::Closure(c)\n         })\n     }\n "}, {"sha": "f284bf4650acc86db048fdcfeffc9b8a139a7622", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1597,6 +1597,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 .emit();\n         }\n \n+        if let FnKind::Closure(ClosureBinder::For { generic_params, .. }, ..) = fk {\n+            self.check_late_bound_lifetime_defs(generic_params);\n+        }\n+\n         if let FnKind::Fn(\n             _,\n             _,"}, {"sha": "e69f85eacf7cd44cda4a74691a7bf8f0ac1c3815", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -744,6 +744,11 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"async closures are unstable\",\n         \"to use an async block, remove the `||`: `async {`\"\n     );\n+    gate_all!(\n+        closure_lifetime_binder,\n+        \"`for<...>` binders for closures are experimental\",\n+        \"consider removing `for<...>`\"\n+    );\n     gate_all!(more_qualified_paths, \"usage of qualified paths in this context is experimental\");\n     gate_all!(generators, \"yield syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");"}, {"sha": "ead38caee287fb0e5fdab685628bd06e0b4338d3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -389,13 +389,15 @@ impl<'a> State<'a> {\n                 self.bclose(expr.span, empty);\n             }\n             ast::ExprKind::Closure(\n+                ref binder,\n                 capture_clause,\n                 asyncness,\n                 movability,\n                 ref decl,\n                 ref body,\n                 _,\n             ) => {\n+                self.print_closure_binder(binder);\n                 self.print_movability(movability);\n                 self.print_asyncness(asyncness);\n                 self.print_capture_clause(capture_clause);\n@@ -594,6 +596,15 @@ impl<'a> State<'a> {\n         self.end(); // Close enclosing cbox.\n     }\n \n+    fn print_closure_binder(&mut self, binder: &ast::ClosureBinder) {\n+        match binder {\n+            ast::ClosureBinder::NotPresent => {}\n+            ast::ClosureBinder::For { generic_params, .. } => {\n+                self.print_formal_generic_params(&generic_params)\n+            }\n+        }\n+    }\n+\n     fn print_movability(&mut self, movability: ast::Movability) {\n         match movability {\n             ast::Movability::Static => self.word_space(\"static\"),"}, {"sha": "53c07a3d481e0912d509944ba441de351c47906c", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -891,7 +891,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(local_did);\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n-        if let hir::ExprKind::Closure { body, fn_decl_span, .. } = expr {\n+        if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = expr {\n             for (captured_place, place) in self\n                 .infcx\n                 .tcx\n@@ -904,11 +904,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if target_place == place.as_ref() =>\n                     {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n-                        let body = self.infcx.tcx.hir().body(*body);\n+                        let body = self.infcx.tcx.hir().body(body);\n                         let generator_kind = body.generator_kind();\n \n                         return Some((\n-                            *fn_decl_span,\n+                            fn_decl_span,\n                             generator_kind,\n                             captured_place.get_capture_kind_span(self.infcx.tcx),\n                             captured_place.get_path_span(self.infcx.tcx),"}, {"sha": "e41af17fbf9b3be6efa7e33867d6d006a6a83908", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -325,7 +325,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         // Can't have BrEnv in functions, constants or generators.\n                         bug!(\"BrEnv outside of closure.\");\n                     };\n-                    let hir::ExprKind::Closure { fn_decl_span, .. }\n+                    let hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. })\n                         = tcx.hir().expect_expr(self.mir_hir_id()).kind\n                     else {\n                         bug!(\"Closure is not defined by a closure expr\");\n@@ -701,16 +701,16 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let (return_span, mir_description, hir_ty) = match hir.get(mir_hir_id) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl, body, fn_decl_span, .. }),\n                 ..\n             }) => {\n                 let (mut span, mut hir_ty) = match fn_decl.output {\n                     hir::FnRetTy::DefaultReturn(_) => {\n-                        (tcx.sess.source_map().end_point(*fn_decl_span), None)\n+                        (tcx.sess.source_map().end_point(fn_decl_span), None)\n                     }\n                     hir::FnRetTy::Return(hir_ty) => (fn_decl.output.span(), Some(hir_ty)),\n                 };\n-                let mir_description = match hir.body(*body).generator_kind {\n+                let mir_description = match hir.body(body).generator_kind {\n                     Some(hir::GeneratorKind::Async(gen)) => match gen {\n                         hir::AsyncGeneratorKind::Block => \" of async block\",\n                         hir::AsyncGeneratorKind::Closure => \" of async closure\",\n@@ -841,9 +841,9 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let yield_span = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                 ..\n-            }) => (tcx.sess.source_map().end_point(*fn_decl_span)),\n+            }) => (tcx.sess.source_map().end_point(fn_decl_span)),\n             _ => self.body.span,\n         };\n "}, {"sha": "01152ff7df58a63fb6234a2c80e22f9e9e049e14", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -294,7 +294,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Block(_, _)\n             | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n-            | ExprKind::Closure(_, _, _, _, _, _)\n+            | ExprKind::Closure(_, _, _, _, _, _, _)\n             | ExprKind::ConstBlock(_)\n             | ExprKind::Continue(_)\n             | ExprKind::Err"}, {"sha": "fa3e2a4a5b81ca83614b6d2a708b080abe6166b6", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -520,6 +520,7 @@ impl<'a> ExtCtxt<'a> {\n         self.expr(\n             span,\n             ast::ExprKind::Closure(\n+                ast::ClosureBinder::NotPresent,\n                 ast::CaptureBy::Ref,\n                 ast::Async::No,\n                 ast::Movability::Movable,"}, {"sha": "ef4a17564167a184b341f456f4c6ffdf1fa12302", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -330,6 +330,8 @@ declare_features! (\n     (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n+    /// Allows `for<...>` on closures and generators.\n+    (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators.\n     (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n     /// Allows to use the `#[cmse_nonsecure_entry]` attribute."}, {"sha": "44335b7f42ef92b3d080baa7478da566149e0eaa", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -12,6 +12,7 @@ macro_rules! arena_types {\n             [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, rustc_span::Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n+            [] closure: rustc_hir::Closure<'tcx>,\n             [] block: rustc_hir::Block<'tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<'tcx>,\n             [] body: rustc_hir::Body<'tcx>,"}, {"sha": "9dab577d84bcec1a3d9a45187d57229fac6dd758", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -922,6 +922,17 @@ pub struct Crate<'hir> {\n     pub hir_hash: Fingerprint,\n }\n \n+#[derive(Debug, HashStable_Generic)]\n+pub struct Closure<'hir> {\n+    pub binder: ClosureBinder,\n+    pub capture_clause: CaptureBy,\n+    pub bound_generic_params: &'hir [GenericParam<'hir>],\n+    pub fn_decl: &'hir FnDecl<'hir>,\n+    pub body: BodyId,\n+    pub fn_decl_span: Span,\n+    pub movability: Option<Movability>,\n+}\n+\n /// A block of statements `{ .. }`, which may have a label (in this case the\n /// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n /// the `rules` being anything but `DefaultBlock`.\n@@ -1915,14 +1926,7 @@ pub enum ExprKind<'hir> {\n     ///\n     /// This may also be a generator literal or an `async block` as indicated by the\n     /// `Option<Movability>`.\n-    Closure {\n-        capture_clause: CaptureBy,\n-        bound_generic_params: &'hir [GenericParam<'hir>],\n-        fn_decl: &'hir FnDecl<'hir>,\n-        body: BodyId,\n-        fn_decl_span: Span,\n-        movability: Option<Movability>,\n-    },\n+    Closure(&'hir Closure<'hir>),\n     /// A block (e.g., `'label: { ... }`).\n     Block(&'hir Block<'hir>, Option<Label>),\n \n@@ -2700,6 +2704,17 @@ impl FnRetTy<'_> {\n     }\n }\n \n+/// Represents `for<...>` binder before a closure\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n+pub enum ClosureBinder {\n+    /// Binder is not specified.\n+    Default,\n+    /// Binder is specified.\n+    ///\n+    /// Span points to the whole `for<...>`.\n+    For { span: Span },\n+}\n+\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct Mod<'hir> {\n     pub spans: ModSpans,\n@@ -3464,7 +3479,7 @@ impl<'hir> Node<'hir> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Block<'static>, 48);\n-    rustc_data_structures::static_assert_size!(super::Expr<'static>, 64);\n+    rustc_data_structures::static_assert_size!(super::Expr<'static>, 56);\n     rustc_data_structures::static_assert_size!(super::Pat<'static>, 88);\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);"}, {"sha": "d00b65da7e6a5418eda8363542c29b8dc146d6a6", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -928,7 +928,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n         FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(..) | FnKind::Closure => {}\n+        FnKind::Closure | FnKind::Method(..) => {}\n     }\n }\n \n@@ -1147,14 +1147,15 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure {\n+        ExprKind::Closure(&Closure {\n+            binder: _,\n             bound_generic_params,\n-            ref fn_decl,\n+            fn_decl,\n             body,\n             capture_clause: _,\n             fn_decl_span: _,\n             movability: _,\n-        } => {\n+        }) => {\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n             visitor.visit_fn(FnKind::Closure, fn_decl, body, expression.span, expression.hir_id)\n         }"}, {"sha": "18b671d410dc7129205ab35dac08fd187d75a829", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,6 +6,7 @@ use rustc_ast_pretty::pp::Breaks::{Consistent, Inconsistent};\n use rustc_ast_pretty::pp::{self, Breaks};\n use rustc_ast_pretty::pprust::{Comments, PrintState};\n use rustc_hir as hir;\n+use rustc_hir::LifetimeParamKind;\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, Node, Term};\n use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::SourceMap;\n@@ -1452,15 +1453,16 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(expr.span);\n             }\n-            hir::ExprKind::Closure {\n+            hir::ExprKind::Closure(&hir::Closure {\n+                binder,\n                 capture_clause,\n                 bound_generic_params,\n                 fn_decl,\n                 body,\n                 fn_decl_span: _,\n                 movability: _,\n-            } => {\n-                self.print_formal_generic_params(bound_generic_params);\n+            }) => {\n+                self.print_closure_binder(binder, bound_generic_params);\n                 self.print_capture_clause(capture_clause);\n \n                 self.print_closure_params(fn_decl, body);\n@@ -2045,6 +2047,42 @@ impl<'a> State<'a> {\n         }\n     }\n \n+    pub fn print_closure_binder(\n+        &mut self,\n+        binder: hir::ClosureBinder,\n+        generic_params: &[GenericParam<'_>],\n+    ) {\n+        let generic_params = generic_params\n+            .iter()\n+            .filter(|p| {\n+                matches!(\n+                    p,\n+                    GenericParam {\n+                        kind: GenericParamKind::Lifetime { kind: LifetimeParamKind::Explicit },\n+                        ..\n+                    }\n+                )\n+            })\n+            .collect::<Vec<_>>();\n+\n+        match binder {\n+            hir::ClosureBinder::Default => {}\n+            // we need to distinguish `|...| {}` from `for<> |...| {}` as `for<>` adds additional restrictions\n+            hir::ClosureBinder::For { .. } if generic_params.is_empty() => self.word(\"for<>\"),\n+            hir::ClosureBinder::For { .. } => {\n+                self.word(\"for\");\n+                self.word(\"<\");\n+\n+                self.commasep(Inconsistent, &generic_params, |s, param| {\n+                    s.print_generic_param(param)\n+                });\n+\n+                self.word(\">\");\n+                self.nbsp();\n+            }\n+        }\n+    }\n+\n     pub fn print_bounds<'b>(\n         &mut self,\n         prefix: &'static str,"}, {"sha": "066bf9681b6bbc2e20defd70bc402185f722d759", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n+use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n@@ -1051,7 +1051,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n \n         if let Some(node_ty) = self.opt_node_type(expr.hir_id) {\n             if let (\n-                &ExprKind::Closure { fn_decl, body, fn_decl_span, .. },\n+                &ExprKind::Closure(&Closure { fn_decl, body, fn_decl_span, .. }),\n                 ty::Closure(_, substs),\n             ) = (&expr.kind, node_ty.kind())\n             {"}, {"sha": "87cb2651dd31403edfe2a38651c5f5e8319309ce", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -154,6 +154,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n                 self.check_id(closure_id);\n             }\n         }\n+\n         run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n@@ -218,7 +219,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n-            ast::ExprKind::Closure(_, ast::Async::Yes { closure_id, .. }, ..)\n+            ast::ExprKind::Closure(_, _, ast::Async::Yes { closure_id, .. }, ..)\n             | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n             _ => {}\n         }"}, {"sha": "bd06c209632955cf4019c01ba4bc548b447e6c83", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -22,7 +22,7 @@ fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n         Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })\n         | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })\n         | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),\n-        Node::Expr(Expr { kind: ExprKind::Closure { fn_decl, .. }, .. })\n+        Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl, .. }), .. })\n         | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {\n             Some(fn_decl)\n         }\n@@ -54,7 +54,7 @@ pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n             kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),\n             ..\n         })\n-        | Node::Expr(Expr { kind: ExprKind::Closure { body, .. }, .. }) => Some(*body),\n+        | Node::Expr(Expr { kind: ExprKind::Closure(Closure { body, .. }), .. }) => Some(*body),\n \n         Node::AnonConst(constant) => Some(constant.body),\n \n@@ -279,8 +279,8 @@ impl<'hir> Map<'hir> {\n             }\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n-                ExprKind::Closure { movability: None, .. } => DefKind::Closure,\n-                ExprKind::Closure { movability: Some(_), .. } => DefKind::Generator,\n+                ExprKind::Closure(Closure { movability: None, .. }) => DefKind::Closure,\n+                ExprKind::Closure(Closure { movability: Some(_), .. }) => DefKind::Generator,\n                 _ => bug!(\"def_kind: unsupported node: {}\", self.node_to_string(hir_id)),\n             },\n             Node::GenericParam(param) => match param.kind {\n@@ -1021,7 +1021,9 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n-            Node::Expr(Expr { kind: ExprKind::Closure { fn_decl_span, .. }, .. }) => *fn_decl_span,\n+            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl_span, .. }), .. }) => {\n+                *fn_decl_span\n+            }\n             _ => self.span_with_body(hir_id),\n         };\n         Some(span)"}, {"sha": "7ae26cccb3848c75852731e1b08070e92f264ca1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -68,9 +68,10 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n-        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { fn_decl, body, .. }, .. }) => {\n-            (*body, fn_decl.output.span(), None)\n-        }\n+        Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Closure(hir::Closure { fn_decl, body, .. }),\n+            ..\n+        }) => (*body, fn_decl.output.span(), None),\n         Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n             span,"}, {"sha": "478d5e4792a1553ccb6800390dfb792c28db2264", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -15,10 +15,10 @@ use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n use rustc_ast::visit::Visitor;\n-use rustc_ast::StmtKind;\n use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n+use rustc_ast::{ClosureBinder, StmtKind};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, PResult};\n@@ -1343,11 +1343,7 @@ impl<'a> Parser<'a> {\n             self.parse_if_expr(attrs)\n         } else if self.check_keyword(kw::For) {\n             if self.choose_generics_over_qpath(1) {\n-                // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,\n-                // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.\n-                // When `for <Foo as Bar>::Proj in $expr $block` is wanted,\n-                // you can disambiguate in favor of a pattern with `(...)`.\n-                self.recover_quantified_closure_expr(attrs)\n+                self.parse_closure_expr(attrs)\n             } else {\n                 assert!(self.eat_keyword(kw::For));\n                 self.parse_for_expr(None, self.prev_token.span, attrs)\n@@ -2096,29 +2092,21 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()))\n     }\n \n-    /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.\n-    fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    /// Parses a closure expression (e.g., `move |args| expr`).\n+    fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n-        let _ = self.parse_late_bound_lifetime_defs()?;\n-        let span_for = lo.to(self.prev_token.span);\n-        let closure = self.parse_closure_expr(attrs)?;\n \n-        self.struct_span_err(span_for, \"cannot introduce explicit parameters for a closure\")\n-            .span_label(closure.span, \"the parameters are attached to this closure\")\n-            .span_suggestion(\n-                span_for,\n-                \"remove the parameters\",\n-                \"\",\n-                Applicability::MachineApplicable,\n-            )\n-            .emit();\n+        let binder = if self.check_keyword(kw::For) {\n+            let lo = self.token.span;\n+            let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+            let span = lo.to(self.prev_token.span);\n \n-        Ok(self.mk_expr_err(lo.to(closure.span)))\n-    }\n+            self.sess.gated_spans.gate(sym::closure_lifetime_binder, span);\n \n-    /// Parses a closure expression (e.g., `move |args| expr`).\n-    fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n-        let lo = self.token.span;\n+            ClosureBinder::For { span, generic_params: P::from_vec(lifetime_defs) }\n+        } else {\n+            ClosureBinder::NotPresent\n+        };\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n@@ -2162,7 +2150,15 @@ impl<'a> Parser<'a> {\n \n         let closure = self.mk_expr(\n             lo.to(body.span),\n-            ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),\n+            ExprKind::Closure(\n+                binder,\n+                capture_clause,\n+                asyncness,\n+                movability,\n+                decl,\n+                body,\n+                lo.to(decl_hi),\n+            ),\n             attrs,\n         );\n "}, {"sha": "cdda0e388ddf049d470b27a1cacf7078257be5b5", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -57,7 +57,13 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Loop(ref b, _, source, _) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Closure { ref fn_decl, body, fn_decl_span, movability, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure {\n+                ref fn_decl,\n+                body,\n+                fn_decl_span,\n+                movability,\n+                ..\n+            }) => {\n                 let cx = if let Some(Movability::Static) = movability {\n                     AsyncClosure(fn_decl_span)\n                 } else {"}, {"sha": "f7e3fac6b2e20c4f906f6a32fa8639c54a5115c9", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -273,7 +273,10 @@ impl<'tcx> ReachableContext<'tcx> {\n                 }\n                 hir::ImplItemKind::TyAlias(_) => {}\n             },\n-            Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) => {\n+            Node::Expr(&hir::Expr {\n+                kind: hir::ExprKind::Closure(&hir::Closure { body, .. }),\n+                ..\n+            }) => {\n                 self.visit_nested_body(body);\n             }\n             // Nothing to recurse on for these"}, {"sha": "66641fb2cb248dc15446f722b0bb88f6f530a536", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &'a Expr) {\n         let parent_def = match expr.kind {\n             ExprKind::MacCall(..) => return self.visit_macro_invoc(expr.id),\n-            ExprKind::Closure(_, asyncness, ..) => {\n+            ExprKind::Closure(_, _, asyncness, ..) => {\n                 // Async closures desugar to closures inside of closures, so\n                 // we must create two defs.\n                 let closure_def = self.create_def(expr.id, DefPathData::ClosureExpr, expr.span);"}, {"sha": "3ea285b723b0dd850a0dbed8c10e58ac7c0ef76e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -268,6 +268,7 @@ enum LifetimeBinderKind {\n     WhereBound,\n     Item,\n     Function,\n+    Closure,\n     ImplBlock,\n }\n \n@@ -281,6 +282,7 @@ impl LifetimeBinderKind {\n             Item => \"item\",\n             ImplBlock => \"impl block\",\n             Function => \"function\",\n+            Closure => \"closure\",\n         }\n     }\n }\n@@ -866,19 +868,30 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             this.in_func_body = previous_state;\n                         }\n                     }\n-                    FnKind::Closure(declaration, body) => {\n-                        // We do not have any explicit generic lifetime parameter.\n-                        // FIXME(rfc3216): Change when implementing `for<>` bounds on closures.\n+                    FnKind::Closure(binder, declaration, body) => {\n+                        this.visit_closure_binder(binder);\n+\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousCreateParameter {\n-                                binder: fn_id,\n-                                report_in_path: false,\n+                            match binder {\n+                                // We do not have any explicit generic lifetime parameter.\n+                                ClosureBinder::NotPresent => {\n+                                    LifetimeRibKind::AnonymousCreateParameter {\n+                                        binder: fn_id,\n+                                        report_in_path: false,\n+                                    }\n+                                }\n+                                ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n                             },\n                             // Add each argument to the rib.\n                             |this| this.resolve_params(&declaration.inputs),\n                         );\n                         this.with_lifetime_rib(\n-                            LifetimeRibKind::AnonymousPassThrough(fn_id, true),\n+                            match binder {\n+                                ClosureBinder::NotPresent => {\n+                                    LifetimeRibKind::AnonymousPassThrough(fn_id, true)\n+                                }\n+                                ClosureBinder::For { .. } => LifetimeRibKind::AnonymousReportError,\n+                            },\n                             |this| visit::walk_fn_ret_ty(this, &declaration.output),\n                         );\n \n@@ -913,6 +926,18 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    fn visit_closure_binder(&mut self, b: &'ast ClosureBinder) {\n+        match b {\n+            ClosureBinder::NotPresent => {}\n+            ClosureBinder::For { generic_params, .. } => {\n+                self.visit_generic_params(\n+                    &generic_params,\n+                    self.diagnostic_metadata.current_self_item.is_some(),\n+                );\n+            }\n+        }\n+    }\n+\n     fn visit_generic_arg(&mut self, arg: &'ast GenericArg) {\n         debug!(\"visit_generic_arg({:?})\", arg);\n         let prev = replace(&mut self.diagnostic_metadata.currently_processing_generics, true);\n@@ -3517,7 +3542,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // `async |x| ...` gets desugared to `|x| future_from_generator(|| ...)`, so we need to\n             // resolve the arguments within the proper scopes so that usages of them inside the\n             // closure are detected as upvars rather than normal closure arg usages.\n-            ExprKind::Closure(_, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n+            ExprKind::Closure(_, _, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n                     this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n                         // Resolve arguments:\n@@ -3537,6 +3562,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             }\n             // For closures, ClosureOrAsyncRibKind is added in visit_fn\n+            ExprKind::Closure(ClosureBinder::For { ref generic_params, span }, ..) => {\n+                self.with_generic_param_rib(\n+                    &generic_params,\n+                    NormalRibKind,\n+                    LifetimeRibKind::Generics {\n+                        binder: expr.id,\n+                        kind: LifetimeBinderKind::Closure,\n+                        span,\n+                    },\n+                    |this| visit::walk_expr(this, expr),\n+                );\n+            }\n             ExprKind::Closure(..) => visit::walk_expr(self, expr),\n             ExprKind::Async(..) => {\n                 self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));"}, {"sha": "1e53c73620a08a2f7a9b820ffe874b55726c2297", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -70,20 +70,24 @@ pub(crate) enum ForLifetimeSpanType {\n     BoundTail,\n     TypeEmpty,\n     TypeTail,\n+    ClosureEmpty,\n+    ClosureTail,\n }\n \n impl ForLifetimeSpanType {\n     pub(crate) fn descr(&self) -> &'static str {\n         match self {\n             Self::BoundEmpty | Self::BoundTail => \"bound\",\n             Self::TypeEmpty | Self::TypeTail => \"type\",\n+            Self::ClosureEmpty | Self::ClosureTail => \"closure\",\n         }\n     }\n \n     pub(crate) fn suggestion(&self, sugg: &str) -> String {\n         match self {\n             Self::BoundEmpty | Self::TypeEmpty => format!(\"for<{}> \", sugg),\n-            Self::BoundTail | Self::TypeTail => format!(\", {}\", sugg),\n+            Self::ClosureEmpty => format!(\"for<{}>\", sugg),\n+            Self::BoundTail | Self::TypeTail | Self::ClosureTail => format!(\", {}\", sugg),\n         }\n     }\n }"}, {"sha": "0eb11cd3e9fad9cafac6b21a4c54eb0bbe5e3436", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -15,7 +15,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefIdMap, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node};\n-use rustc_hir::{GenericParamKind, HirIdMap};\n+use rustc_hir::{GenericParamKind, HirIdMap, LifetimeParamKind};\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n@@ -571,7 +571,54 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        if let hir::ExprKind::Closure { bound_generic_params, .. } = e.kind {\n+        if let hir::ExprKind::Closure(hir::Closure {\n+            binder, bound_generic_params, fn_decl, ..\n+        }) = e.kind\n+        {\n+            if let &hir::ClosureBinder::For { span: for_sp, .. } = binder {\n+                fn span_of_infer(ty: &hir::Ty<'_>) -> Option<Span> {\n+                    struct V(Option<Span>);\n+\n+                    impl<'v> Visitor<'v> for V {\n+                        fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n+                            match t.kind {\n+                                _ if self.0.is_some() => (),\n+                                hir::TyKind::Infer => {\n+                                    self.0 = Some(t.span);\n+                                }\n+                                _ => intravisit::walk_ty(self, t),\n+                            }\n+                        }\n+                    }\n+\n+                    let mut v = V(None);\n+                    v.visit_ty(ty);\n+                    v.0\n+                }\n+\n+                let infer_in_rt_sp = match fn_decl.output {\n+                    hir::FnRetTy::DefaultReturn(sp) => Some(sp),\n+                    hir::FnRetTy::Return(ty) => span_of_infer(ty),\n+                };\n+\n+                let infer_spans = fn_decl\n+                    .inputs\n+                    .into_iter()\n+                    .filter_map(span_of_infer)\n+                    .chain(infer_in_rt_sp)\n+                    .collect::<Vec<_>>();\n+\n+                if !infer_spans.is_empty() {\n+                    self.tcx.sess\n+                        .struct_span_err(\n+                            infer_spans,\n+                            \"implicit types in closure signatures are forbidden when `for<...>` is present\",\n+                        )\n+                        .span_label(for_sp, \"`for<...>` is here\")\n+                        .emit();\n+                }\n+            }\n+\n             let next_early_index = self.next_early_index();\n             let (lifetimes, binders): (FxIndexMap<LocalDefId, Region>, Vec<_>) =\n                 bound_generic_params\n@@ -584,6 +631,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         (pair, r)\n                     })\n                     .unzip();\n+\n             self.map.late_bound_vars.insert(e.hir_id, binders);\n             let scope = Scope::Binder {\n                 hir_id: e.hir_id,\n@@ -595,11 +643,41 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 allow_late_bound: true,\n                 where_bound_origin: None,\n             };\n+\n+            if let &hir::ClosureBinder::For { span, .. } = binder {\n+                let last_lt = bound_generic_params\n+                    .iter()\n+                    .filter(|p| {\n+                        matches!(\n+                            p,\n+                            GenericParam {\n+                                kind: GenericParamKind::Lifetime {\n+                                    kind: LifetimeParamKind::Explicit\n+                                },\n+                                ..\n+                            }\n+                        )\n+                    })\n+                    .last();\n+                let (span, span_type) = match last_lt {\n+                    Some(GenericParam { span: last_sp, .. }) => {\n+                        (last_sp.shrink_to_hi(), ForLifetimeSpanType::ClosureTail)\n+                    }\n+                    None => (span, ForLifetimeSpanType::ClosureEmpty),\n+                };\n+                self.missing_named_lifetime_spots\n+                    .push(MissingLifetimeSpot::HigherRanked { span, span_type });\n+            }\n+\n             self.with(scope, |this| {\n                 // a closure has no bounds, so everything\n                 // contained within is scoped within its binder.\n                 intravisit::walk_expr(this, e)\n             });\n+\n+            if let hir::ClosureBinder::For { .. } = binder {\n+                self.missing_named_lifetime_spots.pop();\n+            }\n         } else {\n             intravisit::walk_expr(self, e)\n         }"}, {"sha": "e2e0e1f5b300ad345ef4bf9837bab4eb49c8b29a", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1353,7 +1353,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprKind::Closure { ref fn_decl, body, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { ref fn_decl, body, .. }) => {\n                 let id = format!(\"${}\", ex.hir_id);\n \n                 // walk arg and return types"}, {"sha": "dd0732387be11654dca6e0679eb46701e30a784a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -460,6 +460,7 @@ symbols! {\n         clone_closures,\n         clone_from,\n         closure,\n+        closure_lifetime_binder,\n         closure_to_fn_coercion,\n         closure_track_caller,\n         cmp,"}, {"sha": "3ab9bc5622da4f5d098c106c399d7ce8dc4e32c3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1086,7 +1086,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         Some(match node {\n             Node::Expr(&hir::Expr {\n-                kind: hir::ExprKind::Closure { body, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }),\n                 ..\n             }) => (\n                 sm.guess_head_span(fn_decl_span),"}, {"sha": "7e8872d90182824ba2bb007c7b8be1e016434158", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 })\n             }),\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { body, movability, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { body, movability, .. }),\n                 ..\n             }) => self.describe_generator(*body).or_else(|| {\n                 Some(if movability.is_some() { \"an async closure\" } else { \"a closure\" })"}, {"sha": "ff4ef92f42e71b6efc6b6d3eb392d4efd0877d9e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -786,7 +786,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // Get the name of the callable and the arguments to be used in the suggestion.\n         let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl, fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { fn_decl, fn_decl_span, .. }),\n                 ..\n             })) => {\n                 err.span_label(*fn_decl_span, \"consider calling this closure\");"}, {"sha": "d14d06237be309cc198619e552cac640fd7512df", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -285,29 +285,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let parent_node = hir.get(parent_hir_id);\n         if let (\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, body, .. },\n+                kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, body, .. }),\n                 ..\n             }),\n             hir::ExprKind::Block(..),\n         ) = (parent_node, callee_node)\n         {\n-            let fn_decl_span = if hir.body(*body).generator_kind\n+            let fn_decl_span = if hir.body(body).generator_kind\n                 == Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure))\n             {\n                 // Actually need to unwrap a few more layers of HIR to get to\n                 // the _real_ closure...\n                 let async_closure = hir.get_parent_node(hir.get_parent_node(parent_hir_id));\n                 if let hir::Node::Expr(hir::Expr {\n-                    kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                    kind: hir::ExprKind::Closure(&hir::Closure { fn_decl_span, .. }),\n                     ..\n                 }) = hir.get(async_closure)\n                 {\n-                    *fn_decl_span\n+                    fn_decl_span\n                 } else {\n                     return;\n                 }\n             } else {\n-                *fn_decl_span\n+                fn_decl_span\n             };\n \n             let start = fn_decl_span.shrink_to_lo();"}, {"sha": "9c9a2096ae9a481ecec8f697bf150495e4cf8bda", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1577,8 +1577,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let parent = fcx.tcx.hir().get(parent_id);\n         if let Some(expr) = expression\n-            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure { body, .. }, .. }) = parent\n-            && !matches!(fcx.tcx.hir().body(*body).value.kind, hir::ExprKind::Block(..))\n+            && let hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(&hir::Closure { body, .. }), .. }) = parent\n+            && !matches!(fcx.tcx.hir().body(body).value.kind, hir::ExprKind::Block(..))\n         {\n             fcx.suggest_missing_semicolon(&mut err, expr, expected, true);\n         }"}, {"sha": "740261cfe743ba034fdb6a5ce174be252be0f795", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -483,7 +483,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let param_parent = self.tcx.hir().get_parent_node(*param_hir_id);\n         let Some(Node::Expr(hir::Expr {\n             hir_id: expr_hir_id,\n-            kind: hir::ExprKind::Closure { fn_decl: closure_fn_decl, .. },\n+            kind: hir::ExprKind::Closure(hir::Closure { fn_decl: closure_fn_decl, .. }),\n             ..\n         })) = self.tcx.hir().find(param_parent) else {\n             return None;"}, {"sha": "2400211394eaf1c1c3fcf7cbe2d6f202cdbee6e8", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -35,7 +35,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{ExprKind, HirId, QPath};\n+use rustc_hir::{Closure, ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Match(discrim, arms, match_src) => {\n                 self.check_match(expr, &discrim, arms, expected, match_src)\n             }\n-            ExprKind::Closure { capture_clause, fn_decl, body, movability, .. } => {\n+            ExprKind::Closure(&Closure { capture_clause, fn_decl, body, movability, .. }) => {\n                 self.check_expr_closure(expr, capture_clause, &fn_decl, body, movability, expected)\n             }\n             ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),"}, {"sha": "b1e391bf1c71f2f4863f3622d1adfb507524980b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1825,7 +1825,7 @@ fn label_fn_like<'tcx>(\n     } else {\n         match tcx.hir().get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure { fn_decl_span, .. },\n+                kind: hir::ExprKind::Closure(hir::Closure { fn_decl_span, .. }),\n                 ..\n             })) => {\n                 let spans: MultiSpan = (*fn_decl_span).into();"}, {"sha": "0c33a243e108b83a2d6fc5c5f9d5f1e24f661dd5", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -335,7 +335,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n     match expr.kind {\n         // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure { body, .. }\n+        hir::ExprKind::Closure(&hir::Closure { body, .. })\n         | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);"}, {"sha": "08890f299672237b4aaf4e586b5e238ea0b7a78b", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -142,7 +142,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n-            hir::ExprKind::Closure { capture_clause, body: body_id, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { capture_clause, body: body_id, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body_id);\n                 self.visit_body(body);\n                 self.fcx.analyze_closure(expr.hir_id, expr.span, body_id, body, capture_clause);"}, {"sha": "0cbb0e25d0d429cb6340b9e19671985c856e0bf4", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -263,7 +263,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         self.fix_index_builtin_expr(e);\n \n         match e.kind {\n-            hir::ExprKind::Closure { body, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n                 let body = self.fcx.tcx.hir().body(body);\n                 for param in body.params {\n                     self.visit_node_id(e.span, param.hir_id);"}, {"sha": "6ec741269e8eb85a61dfb9c965fabe52e1765b38", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1717,8 +1717,10 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     // provide junk type parameter defs - the only place that\n     // cares about anything but the length is instantiation,\n     // and we don't do that for closures.\n-    if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { movability: gen, .. }, .. }) =\n-        node\n+    if let Node::Expr(&hir::Expr {\n+        kind: hir::ExprKind::Closure(hir::Closure { movability: gen, .. }),\n+        ..\n+    }) = node\n     {\n         let dummy_args = if gen.is_some() {\n             &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\", \"<upvars>\"][..]\n@@ -2564,7 +2566,7 @@ fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Expr(&rustc_hir::Expr {\n-            kind: rustc_hir::ExprKind::Closure { body, .. },\n+            kind: rustc_hir::ExprKind::Closure(&rustc_hir::Closure { body, .. }),\n             ..\n         })) => tcx.hir().body(body).generator_kind(),\n         Some(_) => None,"}, {"sha": "a679b7b4e191329ada37b4588c47d33ca257931b", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -114,6 +114,7 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                 let decl = P(FnDecl { inputs: vec![], output: FnRetTy::Default(DUMMY_SP) });\n                 iter_exprs(depth - 1, &mut |e| {\n                     g(ExprKind::Closure(\n+                        ClosureBinder::NotPresent,\n                         CaptureBy::Value,\n                         Async::No,\n                         Movability::Movable,"}, {"sha": "4fa599d37cbd170005aa9e9e94366a2267ea8df9", "filename": "src/test/ui/closures/binder/async-closure-with-binder.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,8 @@\n+// edition:2021\n+#![feature(closure_lifetime_binder)]\n+#![feature(async_closure)]\n+fn main() {\n+    for<'a> async || ();\n+    //~^ ERROR `for<...>` binders on `async` closures are not currently supported\n+    //~^^ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+}"}, {"sha": "1d4628b1a494a726b43c4d85d9162f0a8bccb49a", "filename": "src/test/ui/closures/binder/async-closure-with-binder.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fasync-closure-with-binder.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,16 @@\n+error: `for<...>` binders on `async` closures are not currently supported\n+  --> $DIR/async-closure-with-binder.rs:5:5\n+   |\n+LL |     for<'a> async || ();\n+   |     ^^^^^^^\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/async-closure-with-binder.rs:5:5\n+   |\n+LL |     for<'a> async || ();\n+   |     -------^^^^^^^^^\n+   |     |\n+   |     `for<...>` is here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d34e5721d919b6d6aead9fdad98ea9fc73b1410f", "filename": "src/test/ui/closures/binder/implicit-return.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,6 @@\n+#![feature(closure_lifetime_binder)]\n+\n+fn main() {\n+    let _f = for<'a> |_: &'a ()| {};\n+    //~^ implicit types in closure signatures are forbidden when `for<...>` is present\n+}"}, {"sha": "5bfb97113344a1ea4896a216e93105339ab50352", "filename": "src/test/ui/closures/binder/implicit-return.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-return.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,10 @@\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-return.rs:4:34\n+   |\n+LL |     let _f = for<'a> |_: &'a ()| {};\n+   |              -------             ^\n+   |              |\n+   |              `for<...>` is here\n+\n+error: aborting due to previous error\n+"}, {"sha": "09e4c747afee833f7f1787a30d0022c195e6b470", "filename": "src/test/ui/closures/binder/implicit-stuff.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,27 @@\n+#![feature(closure_lifetime_binder)]\n+\n+fn main() {\n+    // Implicit types\n+    let _ = for<> || {};                                      //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> || -> &'a _ { &() };                      //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x| -> &'a () { x };                      //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x: &'a _| -> &'a () { x };               //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x: &'a Vec::<_>| -> &'a Vec::<()> { x }; //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x: &'a Vec<()>| -> &'a Vec<_> { x };     //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x: &'a _| -> &'a &'a () { x };           //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+    let _ = for<'a> |x: &'a _, y, z: _| -> &'a _ {            //~ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n+        let _: &u8 = x;\n+        let _: u32 = y;\n+        let _: i32 = z;\n+        x\n+    };\n+\n+    // Lifetime elision\n+    let _ = for<> |_: &()| -> () {};           //~ ERROR `&` without an explicit lifetime name cannot be used here\n+    let _ = for<> |x: &()| -> &() { x };       //~ ERROR `&` without an explicit lifetime name cannot be used here\n+                                               //~| ERROR `&` without an explicit lifetime name cannot be used here\n+    let _ = for<> |x: &'_ ()| -> &'_ () { x }; //~ ERROR `'_` cannot be used here\n+                                               //~| ERROR `'_` cannot be used here\n+    let _ = for<'a> |x: &()| -> &'a () { x };  //~ ERROR `&` without an explicit lifetime name cannot be used here\n+    let _ = for<'a> |x: &'a ()| -> &() { x };  //~ ERROR `&` without an explicit lifetime name cannot be used here\n+}"}, {"sha": "779a08a44e5a838abf31a70031f7cdf45e5bada8", "filename": "src/test/ui/closures/binder/implicit-stuff.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fimplicit-stuff.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,107 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/implicit-stuff.rs:20:23\n+   |\n+LL |     let _ = for<> |_: &()| -> () {};\n+   |                       ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/implicit-stuff.rs:21:23\n+   |\n+LL |     let _ = for<> |x: &()| -> &() { x };\n+   |                       ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/implicit-stuff.rs:21:31\n+   |\n+LL |     let _ = for<> |x: &()| -> &() { x };\n+   |                               ^ explicit lifetime name needed here\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/implicit-stuff.rs:23:24\n+   |\n+LL |     let _ = for<> |x: &'_ ()| -> &'_ () { x };\n+   |                        ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/implicit-stuff.rs:23:35\n+   |\n+LL |     let _ = for<> |x: &'_ ()| -> &'_ () { x };\n+   |                                   ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/implicit-stuff.rs:25:25\n+   |\n+LL |     let _ = for<'a> |x: &()| -> &'a () { x };\n+   |                         ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/implicit-stuff.rs:26:36\n+   |\n+LL |     let _ = for<'a> |x: &'a ()| -> &() { x };\n+   |                                    ^ explicit lifetime name needed here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:5:22\n+   |\n+LL |     let _ = for<> || {};\n+   |             -----    ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:6:31\n+   |\n+LL |     let _ = for<'a> || -> &'a _ { &() };\n+   |             -------           ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:7:22\n+   |\n+LL |     let _ = for<'a> |x| -> &'a () { x };\n+   |             -------  ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:8:29\n+   |\n+LL |     let _ = for<'a> |x: &'a _| -> &'a () { x };\n+   |             -------         ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:9:35\n+   |\n+LL |     let _ = for<'a> |x: &'a Vec::<_>| -> &'a Vec::<()> { x };\n+   |             -------               ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:10:49\n+   |\n+LL |     let _ = for<'a> |x: &'a Vec<()>| -> &'a Vec<_> { x };\n+   |             ------- `for<...>` is here          ^\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:11:29\n+   |\n+LL |     let _ = for<'a> |x: &'a _| -> &'a &'a () { x };\n+   |             -------         ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/implicit-stuff.rs:12:29\n+   |\n+LL |     let _ = for<'a> |x: &'a _, y, z: _| -> &'a _ {\n+   |             -------         ^  ^     ^         ^\n+   |             |\n+   |             `for<...>` is here\n+\n+error: aborting due to 15 previous errors\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "b476dd50cc986486e62d601ac7f3ea207a06ae73", "filename": "src/test/ui/closures/binder/suggestion-for-introducing-lifetime-into-binder.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,7 @@\n+#![feature(closure_lifetime_binder)]\n+fn main() {\n+    for<> |_: &'a ()| -> () {};\n+    //~^ ERROR use of undeclared lifetime name `'a`\n+    for<'a> |_: &'b ()| -> () {};\n+    //~^ ERROR use of undeclared lifetime name `'b`\n+}"}, {"sha": "1381acc15ca462952bc5541b8fa5517c7a1d112e", "filename": "src/test/ui/closures/binder/suggestion-for-introducing-lifetime-into-binder.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fbinder%2Fsuggestion-for-introducing-lifetime-into-binder.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,33 @@\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/suggestion-for-introducing-lifetime-into-binder.rs:3:16\n+   |\n+LL |     for<> |_: &'a ()| -> () {};\n+   |                ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     for<'a, > |_: &'a ()| -> () {};\n+   |         +++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | fn main<'a>() {\n+   |        ++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/suggestion-for-introducing-lifetime-into-binder.rs:5:18\n+   |\n+LL |     for<'a> |_: &'b ()| -> () {};\n+   |                  ^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     for<'b, 'a> |_: &'b ()| -> () {};\n+   |         +++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | fn main<'b>() {\n+   |        ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "b0b494fa3ff13240a558a4a215f55f43013c4201", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    for<> || -> () {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    for<'a> || -> () {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    for<'a, 'b> |_: &'a ()| -> () {};\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+}"}, {"sha": "aea5cfeed0705825ce554186d4b2c91aafb5c28b", "filename": "src/test/ui/feature-gates/feature-gate-closure_lifetime_binder.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-closure_lifetime_binder.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -0,0 +1,33 @@\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:2:5\n+   |\n+LL |     for<> || -> () {};\n+   |     ^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:4:5\n+   |\n+LL |     for<'a> || -> () {};\n+   |     ^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/feature-gate-closure_lifetime_binder.rs:6:5\n+   |\n+LL |     for<'a, 'b> |_: &'a ()| -> () {};\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "10af39b70074882ef906f592ac57975f4df7beba", "filename": "src/test/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1,10 +1,12 @@\n fn main() {\n     for<'a> |x: &'a u8| *x + 1;\n-    //~^ ERROR cannot introduce explicit parameters for a closure\n+    //~^ ERROR `for<...>` binders for closures are experimental\n+    //~^^ ERROR implicit types in closure signatures are forbidden when `for<...>` is present\n }\n \n enum Foo { Bar }\n fn foo(x: impl Iterator<Item = Foo>) {\n     for <Foo>::Bar in x {}\n     //~^ ERROR expected one of `move`, `static`, `|`\n+    //~^^ ERROR `for<...>` binders for closures are experimental\n }"}, {"sha": "39eec80f658ad9344ab64a8091c32381806b2b81", "filename": "src/test/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1,16 +1,37 @@\n-error: cannot introduce explicit parameters for a closure\n+error: expected one of `move`, `static`, `|`, or `||`, found `::`\n+  --> $DIR/recover-quantified-closure.rs:9:14\n+   |\n+LL |     for <Foo>::Bar in x {}\n+   |              ^^ expected one of `move`, `static`, `|`, or `||`\n+\n+error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5\n    |\n LL |     for<'a> |x: &'a u8| *x + 1;\n-   |     ^^^^^^^ ------------------ the parameters are attached to this closure\n-   |     |\n-   |     help: remove the parameters\n+   |     ^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n \n-error: expected one of `move`, `static`, `|`, or `||`, found `::`\n-  --> $DIR/recover-quantified-closure.rs:8:14\n+error[E0658]: `for<...>` binders for closures are experimental\n+  --> $DIR/recover-quantified-closure.rs:9:5\n    |\n LL |     for <Foo>::Bar in x {}\n-   |              ^^ expected one of `move`, `static`, `|`, or `||`\n+   |     ^^^^^^^^^\n+   |\n+   = note: see issue #97362 <https://github.com/rust-lang/rust/issues/97362> for more information\n+   = help: add `#![feature(closure_lifetime_binder)]` to the crate attributes to enable\n+   = help: consider removing `for<...>`\n+\n+error: implicit types in closure signatures are forbidden when `for<...>` is present\n+  --> $DIR/recover-quantified-closure.rs:2:25\n+   |\n+LL |     for<'a> |x: &'a u8| *x + 1;\n+   |     -------             ^\n+   |     |\n+   |     `for<...>` is here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad206b5fb304f04e3e79a465eff631cadae1da64", "filename": "src/tools/clippy/clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n+use rustc_hir::{BlockCheckMode, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure { body, .. } = expr.kind {\n+        if let ExprKind::Closure(&Closure { body, .. }) = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);"}, {"sha": "326ce34082af7c233b8f2d1dc44cc185a81fdb08", "filename": "src/tools/clippy/clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbytecount.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::visitors::is_local_used;\n use clippy_utils::{path_to_local_id, paths, peel_blocks, peel_ref_operators, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, PatKind};\n+use rustc_hir::{BinOpKind, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = filter_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;"}, {"sha": "80c84014bfdeb7c864c2ceab833c52bd50b27f26", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::{higher, is_adjusted, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, Param, PatKind, Unsafety};\n+use rustc_hir::{Closure, Expr, ExprKind, Param, PatKind, Unsafety};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n+            ExprKind::Closure(&Closure { body, .. }) => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "01c7eef4e04da87e91fbf45433b532b3911b3600", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{higher, match_def_path, path_def_id, paths};\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n+use rustc_hir::{BorrowKind, Closure, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{sym, Symbol};\n@@ -159,7 +159,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                if let ExprKind::Closure(&Closure { body, .. }) = args[1].kind {\n                     let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }"}, {"sha": "a7ef562b21fc48880a253b2d8a612920f550832f", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n+use rustc_hir::{BinOpKind, BorrowKind, Closure, Expr, ExprKind, HirId, Mutability, Pat, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n@@ -369,7 +369,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },"}, {"sha": "b94bbd2bd417de88fe6293b832cc79183cda7130", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{Closure, def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n@@ -220,7 +220,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+            } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -260,7 +260,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -307,7 +307,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n+                } else if let ExprKind::Closure(&Closure { body: id, .. }) = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "93a34f452f6d67d8ee79c25568ce62484e4f733c", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    AsyncGeneratorKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n+    AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound, HirId,\n     IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -177,7 +177,7 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        if let Expr{kind: ExprKind::Closure(&Closure { body, .. }), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "9abf2507b921c79f915e779d02e0adfeb774fd73", "filename": "src/tools/clippy/clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_lang_ctor, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n-use rustc_hir::{Expr, ExprKind, PatKind};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -88,7 +88,7 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        if let ExprKind::Closure(&Closure { body, .. }) = map_expr.kind;\n         let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;"}, {"sha": "42d2577cc3161f48cb1242d23d88b9633dc64fa4", "filename": "src/tools/clippy/clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -148,7 +148,7 @@ fn check_to_owned(\n \n fn suggest(cx: &LateContext<'_>, parent_expr: &hir::Expr<'_>, left_expr: &hir::Expr<'_>, filter_expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(_, [_, closure], _) = filter_expr.kind\n-        && let hir::ExprKind::Closure{ body, ..} = closure.kind\n+        && let hir::ExprKind::Closure(&hir::Closure { body, ..}) = closure.kind\n         && let filter_body = cx.tcx.hir().body(body)\n         && let [filter_params] = filter_body.params\n         && let Some(sugg) = match filter_params.pat.kind {"}, {"sha": "95c312f1fe26b19216c0573697d3ca5cca040920", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = args[1].kind;\n             then {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);"}, {"sha": "21d0e19eb0a489998a98b2ebcee90f9f514b86a1", "filename": "src/tools/clippy/clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n+use rustc_hir::{CaptureBy, Closure, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -119,12 +119,12 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n                 // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n                 // fields\n-                if let ExprKind::Closure {\n+                if let ExprKind::Closure(&Closure {\n                     capture_clause,\n                     body,\n                     fn_decl_span,\n                     ..\n-                } = args[1].kind\n+                }) = args[1].kind\n                 {\n                     // check if this is by Reference (meaning there's no move statement)\n                     if capture_clause == CaptureBy::Ref {"}, {"sha": "af9d948af00e68e7425f3166e5f09f5da7fd01a2", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -169,7 +169,7 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        if let hir::ExprKind::Closure(&hir::Closure { fn_decl, body, .. }) = expr.kind;\n         let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n         if fn_decl.inputs.len() == 1;"}, {"sha": "2f117e4dcc3746abd71f918d0e3efa88661a9c0f", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -150,7 +150,7 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+            hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) => {\n                 let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "7dbfd95c50db40d1e0215690e6eff7d1f7ca942f", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind, PathSegment, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol};\n@@ -22,8 +22,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure { body, .. } => {\n-            let body = cx.tcx.hir().body(*body);\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n+            let body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -106,7 +106,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: filter_body_id, .. }) = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -129,7 +129,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n+            if let ExprKind::Closure(&Closure { body: map_body_id, .. }) = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "20cad0f181e951dcb22d5b69cc7a90c717eef42e", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -51,7 +51,7 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure { body, .. } => {\n+        hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "5a39b82b027d1643536ec0c4f2fd9237fad57ccf", "filename": "src/tools/clippy/clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, fn_decl_span, .. }) = map_arg.kind;\n             let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n             let body = cx.tcx.hir().body(body);\n             if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);"}, {"sha": "7572ba3fe9a943150211b38568167ffa9a1e3f9f", "filename": "src/tools/clippy/clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -41,7 +41,7 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = search_arg.kind;\n                 let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {"}, {"sha": "bafa6fc584d48548e595d218fac04d29d129a54b", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -18,7 +18,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+    if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n         let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg ="}, {"sha": "c3531d4d0511e9e8f730dbc64e35190fc2228f53", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -29,7 +29,7 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = acc.kind;\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n "}, {"sha": "21767d74c87b8cb9ba2781ba6daaae980a4d4933", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n-        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        if let hir::ExprKind::Closure(&hir::Closure { body, .. }) = arg.kind {\n             let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n "}, {"sha": "10e188ecb79a6af8365f832e17926fff68b50d0b", "filename": "src/tools/clippy/clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1,7 +1,7 @@\n use rustc_errors::Applicability;\n use rustc_hir::{\n     intravisit::{walk_expr, Visitor},\n-    Expr, ExprKind, Stmt, StmtKind,\n+    Closure, Expr, ExprKind, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            if let ExprKind::Closure(&Closure { body, .. }) = for_each_arg.kind;\n             let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {"}, {"sha": "d461668077e0a51f3f2c39b6db51b4bd7913d3d5", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n-    Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n+    Arm, Closure, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n     QPath, Stmt, StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -298,7 +298,7 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure { body, .. } => {\n+            ExprKind::Closure(&Closure { body, .. }) => {\n                 let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);"}, {"sha": "f5a93cebab8ca65707c1151a85346c34081a071c", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -69,7 +69,7 @@ impl EarlyLintPass for RedundantClosureCall {\n         if_chain! {\n             if let ast::ExprKind::Call(ref paren, _) = expr.kind;\n             if let ast::ExprKind::Paren(ref closure) = paren.kind;\n-            if let ast::ExprKind::Closure(_, _, _, ref decl, ref block, _) = closure.kind;\n+            if let ast::ExprKind::Closure(_, _, _, _, ref decl, ref block, _) = closure.kind;\n             then {\n                 let mut visitor = ReturnVisitor::new();\n                 visitor.visit_expr(block);"}, {"sha": "fe8859905953ff0fb35b870e71e1bfab8eb493be", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -582,7 +582,7 @@ fn ident_difference_expr_with_base_location(\n         | (Await(_), Await(_))\n         | (Async(_, _, _), Async(_, _, _))\n         | (Block(_, _), Block(_, _))\n-        | (Closure(_, _, _, _, _, _), Closure(_, _, _, _, _, _))\n+        | (Closure(_, _, _, _, _, _, _), Closure(_, _, _, _, _, _, _))\n         | (Match(_, _), Match(_, _))\n         | (Loop(_, _), Loop(_, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))"}, {"sha": "b0fce91abeb7d3fd44cd750321140aafa1d97454", "filename": "src/tools/clippy/clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::{get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Expr, ExprKind, StmtKind};\n+use rustc_hir::{Closure, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n@@ -116,7 +116,7 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n+        if let ExprKind::Closure(&Closure { body, fn_decl_span, .. }) = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);"}, {"sha": "ea5aadbbca1c614e597ed843bedbf3de09267db3", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n+use rustc_hir::{Closure, Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure(Closure { body: closure_body_id, .. }), .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "bbb04c9945a09871bbb8f16acab81419d08c73a6", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::LitIntType;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::{ArrayLen, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n+use rustc_hir::{ArrayLen, Closure, ExprKind, FnRetTy, HirId, Lit, PatKind, QPath, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -466,13 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause,\n                 fn_decl,\n                 body: body_id,\n                 movability,\n                 ..\n-            } => {\n+            }) => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {"}, {"sha": "431b09d53c33b25a9542f719aa75deb899771692", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -168,8 +168,8 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AssignOp(lo, lp, lv), AssignOp(ro, rp, rv)) => lo.node == ro.node && eq_expr(lp, rp) && eq_expr(lv, rv),\n         (Field(lp, lf), Field(rp, rf)) => eq_id(*lf, *rf) && eq_expr(lp, rp),\n         (Match(ls, la), Match(rs, ra)) => eq_expr(ls, rs) && over(la, ra, eq_arm),\n-        (Closure(lc, la, lm, lf, lb, _), Closure(rc, ra, rm, rf, rb, _)) => {\n-            lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(lb, rb)\n+        (Closure(lb, lc, la, lm, lf, le, _), Closure(rb, rc, ra, rm, rf, re, _)) => {\n+            eq_closure_binder(lb, rb) && lc == rc && la.is_async() == ra.is_async() && lm == rm && eq_fn_decl(lf, rf) && eq_expr(le, re)\n         },\n         (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n@@ -561,6 +561,15 @@ pub fn eq_fn_decl(l: &FnDecl, r: &FnDecl) -> bool {\n         })\n }\n \n+pub fn eq_closure_binder(l: &ClosureBinder, r: &ClosureBinder) -> bool {\n+    match (l, r) {\n+        (ClosureBinder::NotPresent, ClosureBinder::NotPresent) => true,\n+        (ClosureBinder::For { generic_params: lp, .. }, ClosureBinder::For { generic_params: rp, .. }) => \n+            lp.len() == rp.len() && std::iter::zip(lp.iter(), rp.iter()).all(|(l, r)| eq_generic_param(l, r)),\n+        _ => false,\n+    }\n+}\n+\n pub fn eq_fn_ret_ty(l: &FnRetTy, r: &FnRetTy) -> bool {\n     match (l, r) {\n         (FnRetTy::Default(_), FnRetTy::Default(_)) => true,"}, {"sha": "1a8e8c996316ff75a9e8df8b74905794b2f1aa9d", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fx::FxHasher;\n use rustc_hir::def::Res;\n use rustc_hir::HirIdMap;\n use rustc_hir::{\n-    ArrayLen, BinOpKind, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n+    ArrayLen, BinOpKind, Closure, Block, BodyId, Expr, ExprField, ExprKind, FnRetTy, GenericArg, GenericArgs, Guard, HirId,\n     InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path, PathSegment, QPath, Stmt,\n     StmtKind, Ty, TyKind, TypeBinding,\n };\n@@ -663,9 +663,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(&Closure {\n                 capture_clause, body, ..\n-            } => {\n+            }) => {\n                 std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n                 self.hash_expr(&self.cx.tcx.hir().body(body).value);"}, {"sha": "242d4315378e382169a0474fbd5a271171986ae6", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -79,10 +79,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node,\n-    Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n-    UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n+    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n+    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n@@ -1699,7 +1699,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure { body, .. },\n+                kind: ExprKind::Closure(&Closure { body, .. }),\n                 ..\n             },\n         ],\n@@ -1786,7 +1786,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n+        ExprKind::Closure(&Closure { body, .. }) => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "4326a103d44b70aad43661e1ec6bfa9f69643b96", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::{ast, token};\n use rustc_ast_pretty::pprust::token_kind_to_string;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{ExprKind, HirId, MutTy, TyKind};\n+use rustc_hir::{Closure, ExprKind, HirId, MutTy, TyKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{EarlyContext, LateContext, LintContext};\n use rustc_middle::hir::place::ProjectionKind;\n@@ -790,7 +790,7 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+    if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`"}, {"sha": "88a6bebb68c84157ecd08400e7b116483bae8518", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -11,6 +11,7 @@ use crate::overflow::OverflowableItem;\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::Shape;\n use crate::source_map::SpanUtils;\n+use crate::types::rewrite_lifetime_param;\n use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n // This module is pretty messy because of the rules around closures and blocks:\n@@ -24,6 +25,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n //     can change whether it is treated as an expression or statement.\n \n pub(crate) fn rewrite_closure(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -36,7 +38,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -227,6 +229,7 @@ fn rewrite_closure_block(\n \n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n+    binder: &ast::ClosureBinder,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -236,6 +239,17 @@ fn rewrite_closure_fn_decl(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n ) -> Option<(String, usize)> {\n+    let binder = match binder {\n+        ast::ClosureBinder::For { generic_params, .. } if generic_params.is_empty() => {\n+            \"for<> \".to_owned()\n+        }\n+        ast::ClosureBinder::For { generic_params, .. } => {\n+            let lifetime_str = rewrite_lifetime_param(context, shape, generic_params)?;\n+            format!(\"for<{lifetime_str}> \")\n+        }\n+        ast::ClosureBinder::NotPresent => \"\".to_owned(),\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -250,7 +264,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -288,7 +302,7 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}|{}|\", immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -312,8 +326,15 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) =\n-        expr.kind\n+    if let ast::ExprKind::Closure(\n+        ref binder,\n+        capture,\n+        ref is_async,\n+        movability,\n+        ref fn_decl,\n+        ref body,\n+        _,\n+    ) = expr.kind\n     {\n         let body = match body.kind {\n             ast::ExprKind::Block(ref block, _)\n@@ -326,7 +347,7 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {"}, {"sha": "a7b73ba78c59ef97286e9643e7efc490d9953c0a", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -203,11 +203,17 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) => {\n-            closures::rewrite_closure(\n-                capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n-            )\n-        }\n+        ast::ExprKind::Closure(\n+            ref binder,\n+            capture,\n+            ref is_async,\n+            movability,\n+            ref fn_decl,\n+            ref body,\n+            _,\n+        ) => closures::rewrite_closure(\n+            binder, capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n+        ),\n         ast::ExprKind::Try(..)\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::MethodCall(..)"}, {"sha": "2627886db109d7fc5aa0547f394a6b5f2d9c0a8b", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -1067,7 +1067,7 @@ pub(crate) fn can_be_overflowed_type(\n }\n \n /// Returns `None` if there is no `LifetimeDef` in the given generic parameters.\n-fn rewrite_lifetime_param(\n+pub(crate) fn rewrite_lifetime_param(\n     context: &RewriteContext<'_>,\n     shape: Shape,\n     generic_params: &[ast::GenericParam],"}, {"sha": "cd852855602e867ad5027be306810cdb69adb3cd", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -479,7 +479,7 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Binary(_, _, ref expr)\n         | ast::ExprKind::Index(_, ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n-        | ast::ExprKind::Closure(_, _, _, _, ref expr, _)\n+        | ast::ExprKind::Closure(_, _, _, _, _, ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Yield(Some(ref expr)) => is_block_expr(context, expr, repr),\n         // This can only be a string lit"}, {"sha": "b2d28b305d0ade1791099fcd95b3c6ff4938c8b1", "filename": "src/tools/rustfmt/tests/source/closure.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fclosure.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -51,6 +51,16 @@ fn main() {\n                 \"--emit=dep-info\"\n             } else { a }\n         });\n+\n+    for<>          || -> () {};\n+    for<         >|| -> () {};\n+    for<\n+>   || -> () {};\n+\n+for<   'a\n+   ,'b,\n+'c  >   |_: &'a (), _: &'b (), _: &'c ()| -> () {};\n+\n }\n \n fn issue311() {"}, {"sha": "e8b4ff7a96bb8c004bd7011c663a0051041f87dc", "filename": "src/tools/rustfmt/tests/target/closure.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5a86d7358520477b816e118200fc7dc664b3f6e/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fclosure.rs?ref=e5a86d7358520477b816e118200fc7dc664b3f6e", "patch": "@@ -71,6 +71,12 @@ fn main() {\n             a\n         }\n     });\n+\n+    for<> || -> () {};\n+    for<> || -> () {};\n+    for<> || -> () {};\n+\n+    for<'a, 'b, 'c> |_: &'a (), _: &'b (), _: &'c ()| -> () {};\n }\n \n fn issue311() {"}]}