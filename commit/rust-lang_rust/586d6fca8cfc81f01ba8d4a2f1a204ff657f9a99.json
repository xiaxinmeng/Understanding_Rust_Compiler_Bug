{"sha": "586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NmQ2ZmNhOGNmYzgxZjAxYmE4ZDRhMmYxYTIwNGZmNjU3ZjlhOTk=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-19T10:39:06Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-19T11:31:16Z"}, "message": "Fix codegen for is_method documentation\n\nPreviously the generated paths were invalid. This fixes that.", "tree": {"sha": "e9489c082e39d94926b94978b19605a5cf3103e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9489c082e39d94926b94978b19605a5cf3103e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "html_url": "https://github.com/rust-lang/rust/commit/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4505f396249234bba05bfdbd14ae2a9d813004", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4505f396249234bba05bfdbd14ae2a9d813004", "html_url": "https://github.com/rust-lang/rust/commit/ee4505f396249234bba05bfdbd14ae2a9d813004"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "94216f2dff91fdd52e689b90ec6b0b5736d6450b", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "patch": "@@ -28,6 +28,8 @@ use crate::{\n //\n // impl Version {\n //     /// Returns `true` if the version is [`Minor`].\n+//     ///\n+//     /// [`Minor`]: Version::Minor\n //     fn is_minor(&self) -> bool {\n //         matches!(self, Self::Minor)\n //     }\n@@ -43,7 +45,8 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n         ast::StructKind::Unit => \"\",\n     };\n \n-    let enum_lowercase_name = to_lower_snake_case(&parent_enum.name()?.to_string());\n+    let enum_name = parent_enum.name()?;\n+    let enum_lowercase_name = to_lower_snake_case(&enum_name.to_string()).replace('_', \" \");\n     let fn_name = format!(\"is_{}\", &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n@@ -57,11 +60,18 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n         |builder| {\n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n             let method = format!(\n-                \"    /// Returns `true` if the {} is [`{}`].\n+                \"    /// Returns `true` if the {} is [`{variant}`].\n+    ///\n+    /// [`{variant}`]: {}::{variant}\n     {}fn {}(&self) -> bool {{\n-        matches!(self, Self::{}{})\n+        matches!(self, Self::{variant}{})\n     }}\",\n-                enum_lowercase_name, variant_name, vis, fn_name, variant_name, pattern_suffix,\n+                enum_lowercase_name,\n+                enum_name,\n+                vis,\n+                fn_name,\n+                pattern_suffix,\n+                variant = variant_name\n             );\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);\n@@ -93,6 +103,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -137,6 +149,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor(..))\n     }\n@@ -162,6 +176,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor { .. })\n     }\n@@ -179,6 +195,8 @@ enum Variant { Undefined }\n \n impl Variant {\n     /// Returns `true` if the variant is [`Undefined`].\n+    ///\n+    /// [`Undefined`]: Variant::Undefined\n     fn is_undefined(&self) -> bool {\n         matches!(self, Self::Undefined)\n     }\n@@ -204,6 +222,8 @@ pub(crate) enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     pub(crate) fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -224,6 +244,8 @@ enum Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n@@ -236,14 +258,45 @@ impl Variant {\n \n impl Variant {\n     /// Returns `true` if the variant is [`Minor`].\n+    ///\n+    /// [`Minor`]: Variant::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n \n     /// Returns `true` if the variant is [`Major`].\n+    ///\n+    /// [`Major`]: Variant::Major\n     fn is_major(&self) -> bool {\n         matches!(self, Self::Major)\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_enum_is_variant_names() {\n+        check_assist(\n+            generate_enum_is_method,\n+            r#\"\n+enum GeneratorState {\n+    Yielded,\n+    Complete$0,\n+    Major,\n+}\"#,\n+            r#\"enum GeneratorState {\n+    Yielded,\n+    Complete,\n+    Major,\n+}\n+\n+impl GeneratorState {\n+    /// Returns `true` if the generator state is [`Complete`].\n+    ///\n+    /// [`Complete`]: GeneratorState::Complete\n+    fn is_complete(&self) -> bool {\n+        matches!(self, Self::Complete)\n+    }\n }\"#,\n         );\n     }"}, {"sha": "20233f21736cb0a1b2ddd64c4499055ed3c13d37", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=586d6fca8cfc81f01ba8d4a2f1a204ff657f9a99", "patch": "@@ -723,6 +723,8 @@ enum Version {\n \n impl Version {\n     /// Returns `true` if the version is [`Minor`].\n+    ///\n+    /// [`Minor`]: Version::Minor\n     fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }"}]}