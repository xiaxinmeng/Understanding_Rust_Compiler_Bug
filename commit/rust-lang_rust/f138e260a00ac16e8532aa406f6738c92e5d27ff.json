{"sha": "f138e260a00ac16e8532aa406f6738c92e5d27ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzhlMjYwYTAwYWMxNmU4NTMyYWE0MDZmNjczOGM5MmU1ZDI3ZmY=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2020-12-09T10:29:42Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-02-14T22:39:42Z"}, "message": "Apply suggestion", "tree": {"sha": "485a1f244519432c6c7f631b2351f49376b14dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485a1f244519432c6c7f631b2351f49376b14dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f138e260a00ac16e8532aa406f6738c92e5d27ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f138e260a00ac16e8532aa406f6738c92e5d27ff", "html_url": "https://github.com/rust-lang/rust/commit/f138e260a00ac16e8532aa406f6738c92e5d27ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f138e260a00ac16e8532aa406f6738c92e5d27ff/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52197d356c2703e23aa7acea0128e50174edee33", "url": "https://api.github.com/repos/rust-lang/rust/commits/52197d356c2703e23aa7acea0128e50174edee33", "html_url": "https://github.com/rust-lang/rust/commit/52197d356c2703e23aa7acea0128e50174edee33"}], "stats": {"total": 73, "additions": 33, "deletions": 40}, "files": [{"sha": "c3ad7398aa19e1d0b4e8a83cdfd6deb64bd9b5ae", "filename": "library/core/src/macros/internals.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Finternals.rs?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -4,28 +4,7 @@ use crate::{fmt, panic};\n #[doc(hidden)]\n #[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n #[track_caller]\n-pub fn assert_failed<T, U>(op: &str, left: &T, right: &U) -> !\n-where\n-    T: fmt::Debug + ?Sized,\n-    U: fmt::Debug + ?Sized,\n-{\n-    #[track_caller]\n-    fn inner(op: &str, left: &dyn fmt::Debug, right: &dyn fmt::Debug) -> ! {\n-        panic!(\n-            r#\"assertion failed: `(left {} right)`\n-  left: `{:?}`,\n- right: `{:?}`\"#,\n-            op, left, right\n-        )\n-    }\n-    inner(op, &left, &right)\n-}\n-\n-#[cold]\n-#[doc(hidden)]\n-#[unstable(feature = \"macros_internals\", reason = \"macros implementation detail\", issue = \"none\")]\n-#[track_caller]\n-pub fn assert_failed_args<T, U>(op: &str, left: &T, right: &U, args: fmt::Arguments<'_>) -> !\n+pub fn assert_failed<T, U>(op: &str, left: &T, right: &U, args: Option<fmt::Arguments<'_>>) -> !\n where\n     T: fmt::Debug + ?Sized,\n     U: fmt::Debug + ?Sized,\n@@ -35,14 +14,22 @@ where\n         op: &str,\n         left: &dyn fmt::Debug,\n         right: &dyn fmt::Debug,\n-        args: fmt::Arguments<'_>,\n+        args: Option<fmt::Arguments<'_>>,\n     ) -> ! {\n-        panic!(\n-            r#\"assertion failed: `(left {} right)`\n+        match args {\n+            Some(args) => panic!(\n+                r#\"assertion failed: `(left {} right)`\n   left: `{:?}`,\n  right: `{:?}: {}`\"#,\n-            op, left, right, args\n-        )\n+                op, left, right, args\n+            ),\n+            None => panic!(\n+                r#\"assertion failed: `(left {} right)`\n+  left: `{:?}`,\n+ right: `{:?}`\"#,\n+                op, left, right,\n+            ),\n+        }\n     }\n     inner(op, &left, &right, args)\n }"}, {"sha": "f505b7021ed59c5939ec760b684230c51ad6cb00", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -66,7 +66,7 @@ macro_rules! assert_eq {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"==\", &*left_val, &*right_val);\n+                    $crate::macros_internals::assert_failed(\"==\", &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n@@ -78,7 +78,7 @@ macro_rules! assert_eq {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed_args(\"==\", &*left_val, &*right_val, $crate::format_args!($($arg)+));\n+                    $crate::macros_internals::assert_failed(\"==\", &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }\n@@ -113,7 +113,7 @@ macro_rules! assert_ne {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed(\"!=\", &*left_val, &*right_val);\n+                    $crate::macros_internals::assert_failed(\"!=\", &*left_val, &*right_val, $crate::option::Option::None);\n                 }\n             }\n         }\n@@ -125,7 +125,7 @@ macro_rules! assert_ne {\n                     // The reborrows below are intentional. Without them, the stack slot for the\n                     // borrow is initialized even before the values are compared, leading to a\n                     // noticeable slow down.\n-                    $crate::macros_internals::assert_failed_args(\"!=\", &*left_val, &*right_val, $crate::format_args!($($arg)+));\n+                    $crate::macros_internals::assert_failed(\"!=\", &*left_val, &*right_val, $crate::option::Option::Some($crate::format_args!($($arg)+)));\n                 }\n             }\n         }"}, {"sha": "46404f5e33c2902eef8fa1767c7318fa1d7f5329", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -14,6 +14,7 @@\n       let mut _10: &str;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _12: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _13: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -71,10 +72,12 @@\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [61, 61], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n-          core::macros::internals::assert_failed::<i32, i32>(move _10, move _11, move _12); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_13) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::macros::internals::assert_failed::<i32, i32>(move _10, move _11, move _12, move _13); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s i32, &'t0 i32) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0, 't1> fn(&'r str, &'s i32, &'t0 i32, std::option::Option<std::fmt::Arguments<'t1>>) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "cf1db80bcfc03de4e0d8423f3e474adc73b44318", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -26,14 +26,15 @@\n       let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _27: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n           scope 3 {\n               debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n               let _13: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               let _14: &i32;               // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _27: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _28: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n               scope 4 {\n                   debug left_val => _13;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _14;  // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -77,14 +78,14 @@\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _27 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _28 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n-          _11 = _27;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -127,10 +128,12 @@\n           StorageLive(_26);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _26 = _14;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _25 = _26;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          core::macros::internals::assert_failed::<i32, i32>(move _21, move _23, move _25); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_27);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_27) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          core::macros::internals::assert_failed::<i32, i32>(move _21, move _23, move _25, move _27); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s i32, &'t0 i32) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r, 's, 't0, 't1> fn(&'r str, &'s i32, &'t0 i32, std::option::Option<std::fmt::Arguments<'t1>>) -> ! {core::macros::internals::assert_failed::<i32, i32>}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb4: {"}, {"sha": "835ecce94b97a759346f0855eafc2a628a6b2cdf", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f138e260a00ac16e8532aa406f6738c92e5d27ff/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=f138e260a00ac16e8532aa406f6738c92e5d27ff", "patch": "@@ -29,5 +29,5 @@ LL |         ().clone()\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0282, E0433, E0599.\n-For more information about an error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0433, E0599.\n+For more information about an error, try `rustc --explain E0433`."}]}