{"sha": "df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNTgzMGE0ZWNlNWVhZTg0NTFlN2IzZDRmNzdiOGFmOTJhOWY5ZmM=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-25T17:28:12Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-26T12:35:12Z"}, "message": "Added links throughout std::net::ToSocketAddrs' documentation\n\nPart of #29363\n\nIn the section about the default implementations of ToSocketAddrs,\nI moved the bulletpoint of SocketAddrV4 & SocketAddrV6 to the one\nstating that SocketAddr is constructed trivially, as this is what's\nactually the case", "tree": {"sha": "00922c39aec5ef6aeace42bead159e3b5c203d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00922c39aec5ef6aeace42bead159e3b5c203d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc", "html_url": "https://github.com/rust-lang/rust/commit/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0df7398558cb7d8fbf5d191d7e07a601a4a30702", "url": "https://api.github.com/repos/rust-lang/rust/commits/0df7398558cb7d8fbf5d191d7e07a601a4a30702", "html_url": "https://github.com/rust-lang/rust/commit/0df7398558cb7d8fbf5d191d7e07a601a4a30702"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "ea78843aa8c0cf63f3298149bdbae9a5efb76e84", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=df5830a4ece5eae8451e7b3d4f77b8af92a9f9fc", "patch": "@@ -559,37 +559,51 @@ impl hash::Hash for SocketAddrV6 {\n }\n \n /// A trait for objects which can be converted or resolved to one or more\n-/// `SocketAddr` values.\n+/// [`SocketAddr`] values.\n ///\n /// This trait is used for generic address resolution when constructing network\n /// objects.  By default it is implemented for the following types:\n ///\n-///  * `SocketAddr`, `SocketAddrV4`, `SocketAddrV6` - `to_socket_addrs` is\n-///    identity function.\n+///  * [`SocketAddr`]: [`to_socket_addrs`] is the identity function.\n ///\n-///  * `(IpvNAddr, u16)` - `to_socket_addrs` constructs `SocketAddr` trivially.\n+///  * [`SocketAddrV4`], [`SocketAddrV6`], `(`[`IpAddr`]`, `[`u16`]`)`,\n+///    `(`[`Ipv4Addr`]`, `[`u16`]`)`, `(`[`Ipv6Addr`]`, `[`u16`]`)`:\n+///    [`to_socket_addrs`] constructs a [`SocketAddr`] trivially.\n ///\n-///  * `(&str, u16)` - the string should be either a string representation of an\n-///    IP address expected by `FromStr` implementation for `IpvNAddr` or a host\n+///  * `(`[`&str`]`, `[`u16`]`)`: the string should be either a string representation\n+///    of an [`IpAddr`] address as expected by [`FromStr`] implementation or a host\n ///    name.\n ///\n-///  * `&str` - the string should be either a string representation of a\n-///    `SocketAddr` as expected by its `FromStr` implementation or a string like\n-///    `<host_name>:<port>` pair where `<port>` is a `u16` value.\n+///  * [`&str`]: the string should be either a string representation of a\n+///    [`SocketAddr`] as expected by its [`FromStr`] implementation or a string like\n+///    `<host_name>:<port>` pair where `<port>` is a [`u16`] value.\n ///\n-/// This trait allows constructing network objects like `TcpStream` or\n-/// `UdpSocket` easily with values of various types for the bind/connection\n+/// This trait allows constructing network objects like [`TcpStream`] or\n+/// [`UdpSocket`] easily with values of various types for the bind/connection\n /// address. It is needed because sometimes one type is more appropriate than\n /// the other: for simple uses a string like `\"localhost:12345\"` is much nicer\n-/// than manual construction of the corresponding `SocketAddr`, but sometimes\n-/// `SocketAddr` value is *the* main source of the address, and converting it to\n+/// than manual construction of the corresponding [`SocketAddr`], but sometimes\n+/// [`SocketAddr`] value is *the* main source of the address, and converting it to\n /// some other type (e.g. a string) just for it to be converted back to\n-/// `SocketAddr` in constructor methods is pointless.\n+/// [`SocketAddr`] in constructor methods is pointless.\n ///\n /// Addresses returned by the operating system that are not IP addresses are\n /// silently ignored.\n ///\n-/// Some examples:\n+/// [`FromStr`]: ../../std/str/trait.FromStr.html\n+/// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n+/// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html\n+/// [`Ipv6Addr`]: ../../std/net/struct.Ipv6Addr.html\n+/// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+/// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n+/// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n+/// [`&str`]: ../../std/primitive.str.html\n+/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n+/// [`to_socket_addrs`]: #tymethod.to_socket_addrs\n+/// [`UdpSocket`]: ../../std/net/struct.UdpSocket.html\n+/// [`u16`]: ../../std/primitive.u16.html\n+///\n+/// # Examples\n ///\n /// ```no_run\n /// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n@@ -622,17 +636,21 @@ pub trait ToSocketAddrs {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Iter: Iterator<Item=SocketAddr>;\n \n-    /// Converts this object to an iterator of resolved `SocketAddr`s.\n+    /// Converts this object to an iterator of resolved [`SocketAddr`]s.\n     ///\n     /// The returned iterator may not actually yield any values depending on the\n     /// outcome of any resolution performed.\n     ///\n     /// Note that this function may block the current thread while resolution is\n     /// performed.\n     ///\n+    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+    ///\n     /// # Errors\n     ///\n-    /// Any errors encountered during resolution will be returned as an `Err`.\n+    /// Any errors encountered during resolution will be returned as an [`Err`].\n+    ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;\n }"}]}