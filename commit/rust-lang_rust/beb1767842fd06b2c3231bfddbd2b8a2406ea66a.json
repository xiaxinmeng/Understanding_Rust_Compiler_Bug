{"sha": "beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "node_id": "C_kwDOAAsO6NoAKGJlYjE3Njc4NDJmZDA2YjJjMzIzMWJmZGRiZDJiOGEyNDA2ZWE2NmE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-26T08:59:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-02-27T09:14:50Z"}, "message": "Don't export global allocs which are not statics\n\nThey aren't be referenced outside of the current cgu anyway. This should make\noptimizations a bit more effective.", "tree": {"sha": "6858faeb3245f8b66c83b8623ae4fc5648e6dd8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6858faeb3245f8b66c83b8623ae4fc5648e6dd8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "html_url": "https://github.com/rust-lang/rust/commit/beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "710b7415cdc677f91645d5b649f02252001ff7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/710b7415cdc677f91645d5b649f02252001ff7ae", "html_url": "https://github.com/rust-lang/rust/commit/710b7415cdc677f91645d5b649f02252001ff7ae"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "598bcdc31b6f60332d1d8b725e7282004dd58ef2", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "patch": "@@ -170,11 +170,9 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             match kind {\n                 Some(kind) if !self.tcx.sess.fewer_names() => {\n                     let name = self.generate_local_symbol_name(kind);\n-                    // TODO(antoyo): check if it's okay that TLS is off here.\n-                    // TODO(antoyo): check if it's okay that link_section is None here.\n+                    // TODO(antoyo): check if it's okay that no link_section is set.\n                     // TODO(antoyo): set alignment here as well.\n-                    let global = self.define_global(&name[..], self.val_ty(cv), false, None);\n-                    // TODO(antoyo): set linkage.\n+                    let global = self.declare_private_global(&name[..], self.val_ty(cv));\n                     global\n                 }\n                 _ => {\n@@ -183,8 +181,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                     global\n                 },\n             };\n-        // FIXME(antoyo): I think the name coming from generate_local_symbol_name() above cannot be used\n-        // globally.\n         global.global_set_initializer_rvalue(cv);\n         // TODO(antoyo): set unnamed address.\n         let rvalue = global.get_address(None);"}, {"sha": "fa556b0b7f2f21db9444f4019cda19a2869f8527", "filename": "src/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "patch": "@@ -18,7 +18,6 @@ use rustc_target::abi::{call::FnAbi, HasDataLayout, PointeeInfo, Size, TargetDat\n use rustc_target::spec::{HasTargetSpec, Target, TlsModel};\n \n use crate::callee::get_fn;\n-use crate::declare::mangle_name;\n \n #[derive(Clone)]\n pub struct FuncSig<'gcc> {\n@@ -96,7 +95,6 @@ pub struct CodegenCx<'gcc, 'tcx> {\n \n     /// A counter that is used for generating local symbol names\n     local_gen_sym_counter: Cell<usize>,\n-    pub global_gen_sym_counter: Cell<usize>,\n \n     eh_personality: Cell<Option<RValue<'gcc>>>,\n \n@@ -221,7 +219,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             struct_types: Default::default(),\n             types_with_fields_to_set: Default::default(),\n             local_gen_sym_counter: Cell::new(0),\n-            global_gen_sym_counter: Cell::new(0),\n             eh_personality: Cell::new(None),\n             pointee_infos: Default::default(),\n             structs_as_pointer: Default::default(),\n@@ -503,11 +500,6 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n     }\n }\n \n-pub fn unit_name<'tcx>(codegen_unit: &CodegenUnit<'tcx>) -> String {\n-    let name = &codegen_unit.name().to_string();\n-    mangle_name(&name.replace('-', \"_\"))\n-}\n-\n fn to_gcc_tls_mode(tls_model: TlsModel) -> gccjit::TlsModel {\n     match tls_model {\n         TlsModel::GeneralDynamic => gccjit::TlsModel::GlobalDynamic,"}, {"sha": "4bd7a17381d0251983cf3f0326f02588050fd633", "filename": "src/declare.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb1767842fd06b2c3231bfddbd2b8a2406ea66a/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=beb1767842fd06b2c3231bfddbd2b8a2406ea66a", "patch": "@@ -5,7 +5,7 @@ use rustc_span::Symbol;\n use rustc_target::abi::call::FnAbi;\n \n use crate::abi::FnAbiGccExt;\n-use crate::context::{CodegenCx, unit_name};\n+use crate::context::CodegenCx;\n use crate::intrinsic::llvm;\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -27,10 +27,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n \n     pub fn declare_unnamed_global(&self, ty: Type<'gcc>) -> LValue<'gcc> {\n-        let index = self.global_gen_sym_counter.get();\n-        self.global_gen_sym_counter.set(index + 1);\n-        let name = format!(\"global_{}_{}\", index, unit_name(&self.codegen_unit));\n-        self.context.new_global(None, GlobalKind::Exported, ty, &name)\n+        let name = self.generate_local_symbol_name(\"global\");\n+        self.context.new_global(None, GlobalKind::Internal, ty, &name)\n     }\n \n     pub fn declare_global_with_linkage(&self, name: &str, ty: Type<'gcc>, linkage: GlobalKind) -> LValue<'gcc> {"}]}