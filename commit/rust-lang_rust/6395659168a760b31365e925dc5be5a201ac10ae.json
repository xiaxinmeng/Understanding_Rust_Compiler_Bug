{"sha": "6395659168a760b31365e925dc5be5a201ac10ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTU2NTkxNjhhNzYwYjMxMzY1ZTkyNWRjNWJlNWEyMDFhYzEwYWU=", "commit": {"author": {"name": "Tim Diekmann", "email": "21277928+TimDiekmann@users.noreply.github.com", "date": "2020-08-03T22:21:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-03T22:21:05Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>", "tree": {"sha": "790d6bbc907a0320ed4b144c751b2e368f1dbaf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790d6bbc907a0320ed4b144c751b2e368f1dbaf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6395659168a760b31365e925dc5be5a201ac10ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKI3RCRBK7hj4Ov3rIwAAdHIIABIpSNVhHUF14RGlodS22ESj\njfcHoxn6iY1Fi2X/VfM7l5TMdnKLJD5Ql4oS+EN+hKT4eVbyGoj04uM4HYi5JfuY\nngQ++Yq4jWjEEKIpkOEYhUA6cZrWhhUcacJyBNJqrUbYkJYQzWOuxilC1SPYgkeP\nlfHEcGSIALoUrQ+lrurzVINmZFIh1XDub6wiMqJz4PfUGlHEIVfPsZmA+iT7Yofw\nrMTjP3TAo9Ne/9L/jomlb/rWcsQ8WrqoFZbifxMWU4vJSVVeziHV6K+ypJ3zXomf\n0nX8HO0tXhgOuLA2kyy20B0ehZcKt62CEiEZIKD6o1pDKy/EfTCutij06Jb0TmI=\n=aFJf\n-----END PGP SIGNATURE-----\n", "payload": "tree 790d6bbc907a0320ed4b144c751b2e368f1dbaf7\nparent 24ddf76ed7bc453826e6e843cd0ca289e02185f1\nauthor Tim Diekmann <21277928+TimDiekmann@users.noreply.github.com> 1596493265 +0200\ncommitter GitHub <noreply@github.com> 1596493265 +0200\n\nApply suggestions from code review\n\nCo-authored-by: Amanieu d'Antras <amanieu@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6395659168a760b31365e925dc5be5a201ac10ae", "html_url": "https://github.com/rust-lang/rust/commit/6395659168a760b31365e925dc5be5a201ac10ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6395659168a760b31365e925dc5be5a201ac10ae/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ddf76ed7bc453826e6e843cd0ca289e02185f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ddf76ed7bc453826e6e843cd0ca289e02185f1", "html_url": "https://github.com/rust-lang/rust/commit/24ddf76ed7bc453826e6e843cd0ca289e02185f1"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "9ab5352c1dd098cb81c172ec5845c3fbf4347924", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6395659168a760b31365e925dc5be5a201ac10ae/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6395659168a760b31365e925dc5be5a201ac10ae/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=6395659168a760b31365e925dc5be5a201ac10ae", "patch": "@@ -117,7 +117,7 @@ pub unsafe trait AllocRef {\n     /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html\n     fn alloc(&mut self, layout: Layout) -> Result<MemoryBlock, AllocErr>;\n \n-    /// Behaves like `alloc`, but also ensures that the contents are set to zero before being returned.\n+    /// Behaves like `alloc`, but also ensures that the returned memory is zero-initialized.\n     ///\n     /// # Errors\n     ///\n@@ -156,20 +156,19 @@ pub unsafe trait AllocRef {\n     /// memory. The pointer is suitable for holding data described by a new layout with `layout`\u2019s\n     /// alignment and a size given by `new_size`. To accomplish this, the allocator may extend the\n     /// allocation referenced by `ptr` to fit the new layout.\n-    ///~\n+    ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n     ///\n     /// # Safety\n     ///\n     /// * `ptr` must denote a block of memory [*currently allocated*] via this allocator,\n     /// * `layout` must [*fit*] that block of memory (The `new_size` argument need not fit it.),\n-    // We can't require that `new_size` is strictly greater than `memory.size` because of ZSTs.\n-    // An alternative would be\n-    // * `new_size must be strictly greater than `memory.size` or both are zero\n     /// * `new_size` must be greater than or equal to `layout.size()`, and\n     /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\n     ///   (i.e., the rounded value must be less than or equal to `usize::MAX`).\n+    // Note: We can't require that `new_size` is strictly greater than `layout.size()` because of ZSTs.\n+    // alternative: `new_size must be strictly greater than `layout.size()` or both are zero\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting\n@@ -283,7 +282,7 @@ pub unsafe trait AllocRef {\n             // SAFETY: the caller must ensure that the `new_size` does not overflow.\n             // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid for a Layout.\n             // The caller must ensure that `new_size` is greater than or equal to zero. If it's equal\n-            // to zero, it's catched beforehand.\n+            // to zero, it's caught beforehand.\n             unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };\n         let new_memory = self.alloc_zeroed(new_layout)?;\n "}]}