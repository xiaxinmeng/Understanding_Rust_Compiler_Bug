{"sha": "66c88392b4594507b8b0282d8a3de5f43922acc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Yzg4MzkyYjQ1OTQ1MDdiOGIwMjgyZDhhM2RlNWY0MzkyMmFjYzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:47:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:49:43Z"}, "message": "use query boiler plate for `normalize_projection_ty` too", "tree": {"sha": "31ea09df206fce23fb45e26ece5c137e4a3943ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ea09df206fce23fb45e26ece5c137e4a3943ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66c88392b4594507b8b0282d8a3de5f43922acc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66c88392b4594507b8b0282d8a3de5f43922acc4", "html_url": "https://github.com/rust-lang/rust/commit/66c88392b4594507b8b0282d8a3de5f43922acc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66c88392b4594507b8b0282d8a3de5f43922acc4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c8c632b73962184e5cc33106e54de95dcec8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c8c632b73962184e5cc33106e54de95dcec8ae", "html_url": "https://github.com/rust-lang/rust/commit/e6c8c632b73962184e5cc33106e54de95dcec8ae"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "473b2c8e99850176d4eb5a417e76415f0a90d509", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/66c88392b4594507b8b0282d8a3de5f43922acc4/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66c88392b4594507b8b0282d8a3de5f43922acc4/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=66c88392b4594507b8b0282d8a3de5f43922acc4", "patch": "@@ -9,43 +9,49 @@\n // except according to those terms.\n \n use rustc::infer::canonical::{Canonical, QueryResult};\n-use rustc::traits::{self, FulfillmentContext, ObligationCause, SelectionContext};\n-use rustc::traits::query::{CanonicalProjectionGoal, NoSolution, normalize::NormalizationResult};\n+use rustc::infer::InferOk;\n+use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution};\n+use rustc::traits::{self, ObligationCause, SelectionContext};\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n+use std::sync::atomic::Ordering;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n-use std::sync::atomic::Ordering;\n \n crate fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n-    tcx.sess.perf_stats.normalize_projection_ty.fetch_add(1, Ordering::Relaxed);\n-    tcx.infer_ctxt().enter(|ref infcx| {\n-        let (\n-            ParamEnvAnd {\n+    tcx.sess\n+        .perf_stats\n+        .normalize_projection_ty\n+        .fetch_add(1, Ordering::Relaxed);\n+    tcx.infer_ctxt().enter_canonical_trait_query(\n+        &goal,\n+        |infcx,\n+         ParamEnvAnd {\n+             param_env,\n+             value: goal,\n+         }| {\n+            let selcx = &mut SelectionContext::new(infcx);\n+            let cause = ObligationCause::misc(DUMMY_SP, DUMMY_NODE_ID);\n+            let mut obligations = vec![];\n+            let answer = traits::normalize_projection_type(\n+                selcx,\n                 param_env,\n-                value: goal,\n-            },\n-            canonical_inference_vars,\n-        ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &goal);\n-        let fulfill_cx = &mut FulfillmentContext::new();\n-        let selcx = &mut SelectionContext::new(infcx);\n-        let cause = ObligationCause::misc(DUMMY_SP, DUMMY_NODE_ID);\n-        let mut obligations = vec![];\n-        let answer =\n-            traits::normalize_projection_type(selcx, param_env, goal, cause, 0, &mut obligations);\n-        fulfill_cx.register_predicate_obligations(infcx, obligations);\n-\n-        // Now that we have fulfilled as much as we can, create a solution\n-        // from what we've learned.\n-        infcx.make_canonicalized_query_result(\n-            canonical_inference_vars,\n-            NormalizationResult { normalized_ty: answer },\n-            fulfill_cx,\n-        )\n-    })\n+                goal,\n+                cause,\n+                0,\n+                &mut obligations,\n+            );\n+            Ok(InferOk {\n+                value: NormalizationResult {\n+                    normalized_ty: answer,\n+                },\n+                obligations,\n+            })\n+        },\n+    )\n }"}]}