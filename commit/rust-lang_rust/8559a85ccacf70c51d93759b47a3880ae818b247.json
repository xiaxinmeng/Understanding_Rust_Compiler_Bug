{"sha": "8559a85ccacf70c51d93759b47a3880ae818b247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NTlhODVjY2FjZjcwYzUxZDkzNzU5YjQ3YTM4ODBhZTgxOGIyNDc=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-26T21:44:03Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-26T21:44:11Z"}, "message": "When copying function values, null out the destination's binding iff the source's binding is null.", "tree": {"sha": "a876043c326e22a467f644c4bdd3994aaa8fb083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a876043c326e22a467f644c4bdd3994aaa8fb083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8559a85ccacf70c51d93759b47a3880ae818b247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8559a85ccacf70c51d93759b47a3880ae818b247", "html_url": "https://github.com/rust-lang/rust/commit/8559a85ccacf70c51d93759b47a3880ae818b247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8559a85ccacf70c51d93759b47a3880ae818b247/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee04c0236c731a1ca3f3a885c16bce5e1ae0a72d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee04c0236c731a1ca3f3a885c16bce5e1ae0a72d", "html_url": "https://github.com/rust-lang/rust/commit/ee04c0236c731a1ca3f3a885c16bce5e1ae0a72d"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "d83f6c522be0710851a65dce307cca5b94238bf0", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8559a85ccacf70c51d93759b47a3880ae818b247/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8559a85ccacf70c51d93759b47a3880ae818b247/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=8559a85ccacf70c51d93759b47a3880ae818b247", "patch": "@@ -2933,12 +2933,18 @@ let trans_visitor\n       : unit =\n     drop_ty (get_ty_params_of_current_frame()) cell ty None\n \n+  (* Returns a mark for a jmp that must be patched to the continuation of\n+   * the null case (i.e. fall-through means not null).\n+   *)\n   and null_check (cell:Il.cell) : quad_idx =\n     emit (Il.cmp (Il.Cell cell) zero);\n     let j = mark() in\n       emit (Il.jmp Il.JE Il.CodeNone);\n       j\n \n+  (* Returns a mark for a jmp that must be patched to the continuation of\n+   * the non-zero refcount case (i.e. fall-through means zero refcount).\n+   *)\n   and drop_refcount_and_cmp (boxed:Il.cell) : quad_idx =\n     iflog (fun _ -> annotate \"drop refcount and maybe free\");\n     let rc = box_rc_cell boxed in\n@@ -3268,7 +3274,14 @@ let trans_visitor\n                       dst_binding (Ast.TY_box Ast.TY_int)\n                       src_binding (Ast.TY_box Ast.TY_int)\n                       curr_iso;\n-                    patch null_jmp\n+                    let end_jmp = mark() in\n+                      emit (Il.jmp Il.JMP Il.CodeNone);\n+                      patch null_jmp;\n+                      (* The src had a null binding, so make sure the dst\n+                       * does now too.\n+                       *)\n+                      mov dst_binding zero;\n+                      patch end_jmp\n               end\n \n           | _ ->"}, {"sha": "51285c067c4e4250c2dfe348150cdefac80a7d6d", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8559a85ccacf70c51d93759b47a3880ae818b247/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8559a85ccacf70c51d93759b47a3880ae818b247/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=8559a85ccacf70c51d93759b47a3880ae818b247", "patch": "@@ -13,11 +13,8 @@ fn test_simple() {\n     ret u;\n   }\n \n-  // FIXME we don't really want to bind here but if we don't then the\n-  // hashmap's drop glue UMRs when trying to drop these functions, which\n-  // it stores internally.\n-  let map.hashfn[uint] hasher = bind hash(_);\n-  let map.eqfn[uint] eqer = bind eq(_, _);\n+  let map.hashfn[uint] hasher = hash;\n+  let map.eqfn[uint] eqer = eq;\n   let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n \n   hm.insert(10u, 12u);\n@@ -43,7 +40,7 @@ fn test_simple() {\n fn test_growth() {\n   log \"*** starting test_growth\";\n \n-  let uint map_capacity = 64u;  // Keep in sync with map.mk_hashmap\n+  let uint num_to_insert = 64u;\n \n   fn eq(&uint x, &uint y) -> bool { ret x == y; }\n   fn hash(&uint u) -> uint {\n@@ -52,13 +49,12 @@ fn test_growth() {\n     ret u;\n   }\n \n-  // FIXME: as in test_simple(), don't really want to bind.\n-  let map.hashfn[uint] hasher = bind hash(_);\n-  let map.eqfn[uint] eqer = bind eq(_, _);\n+  let map.hashfn[uint] hasher = hash;\n+  let map.eqfn[uint] eqer = eq;\n   let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n \n   let uint i = 0u;\n-  while (i < map_capacity) {\n+  while (i < num_to_insert) {\n     hm.insert(i, i * i);\n     log \"inserting \" + std._uint.to_str(i, 10u)\n       + \" -> \" + std._uint.to_str(i * i, 10u);\n@@ -68,22 +64,22 @@ fn test_growth() {\n   log \"-----\";\n \n   i = 0u;\n-  while (i < map_capacity) {\n+  while (i < num_to_insert) {\n     log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n       + std._uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);\n     i += 1u;\n   }\n \n-  hm.insert(map_capacity, 17u);\n-  check (hm.get(map_capacity) == 17u);\n+  hm.insert(num_to_insert, 17u);\n+  check (hm.get(num_to_insert) == 17u);\n \n   log \"-----\";\n \n   hm.rehash();\n \n   i = 0u;\n-  while (i < map_capacity) {\n+  while (i < num_to_insert) {\n     log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n       + std._uint.to_str(hm.get(i), 10u);\n     check (hm.get(i) == i * i);"}]}