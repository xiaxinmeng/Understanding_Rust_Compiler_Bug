{"sha": "1e3a2def678477ce81e2a8c03b9df998acc289a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlM2EyZGVmNjc4NDc3Y2U4MWUyYThjMDNiOWRmOTk4YWNjMjg5YTU=", "commit": {"author": {"name": "Daniel Conley", "email": "danielc030417@gmail.com", "date": "2021-01-22T21:58:21Z"}, "committer": {"name": "Daniel Conley", "email": "danielc030417@gmail.com", "date": "2021-01-22T21:58:21Z"}, "message": "library/core/test/iter add newlines between tests", "tree": {"sha": "7e5f4065c52dc232c41aff6c4dd46ff859ca0788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e5f4065c52dc232c41aff6c4dd46ff859ca0788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3a2def678477ce81e2a8c03b9df998acc289a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3a2def678477ce81e2a8c03b9df998acc289a5", "html_url": "https://github.com/rust-lang/rust/commit/1e3a2def678477ce81e2a8c03b9df998acc289a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3a2def678477ce81e2a8c03b9df998acc289a5/comments", "author": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danii", "id": 39541871, "node_id": "MDQ6VXNlcjM5NTQxODcx", "avatar_url": "https://avatars.githubusercontent.com/u/39541871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danii", "html_url": "https://github.com/danii", "followers_url": "https://api.github.com/users/danii/followers", "following_url": "https://api.github.com/users/danii/following{/other_user}", "gists_url": "https://api.github.com/users/danii/gists{/gist_id}", "starred_url": "https://api.github.com/users/danii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danii/subscriptions", "organizations_url": "https://api.github.com/users/danii/orgs", "repos_url": "https://api.github.com/users/danii/repos", "events_url": "https://api.github.com/users/danii/events{/privacy}", "received_events_url": "https://api.github.com/users/danii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce97000e1a4909dc106ac0a50d936c604f96725", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce97000e1a4909dc106ac0a50d936c604f96725", "html_url": "https://github.com/rust-lang/rust/commit/3ce97000e1a4909dc106ac0a50d936c604f96725"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "b20105259aaa3d39aa1ae2156711ff759768ef9f", "filename": "library/core/tests/iter/adapters/chain.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fchain.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -23,6 +23,7 @@ fn test_iterator_chain() {\n     }\n     assert_eq!(i, expected.len());\n }\n+\n #[test]\n fn test_iterator_chain_advance_by() {\n     fn test_chain(xs: &[i32], ys: &[i32]) {\n@@ -55,6 +56,7 @@ fn test_iterator_chain_advance_by() {\n     test_chain(&[0, 1, 2, 3, 4, 5], &[]);\n     test_chain(&[0, 1, 2, 3, 4, 5], &[30, 40, 50, 60]);\n }\n+\n #[test]\n fn test_iterator_chain_advance_back_by() {\n     fn test_chain(xs: &[i32], ys: &[i32]) {\n@@ -87,6 +89,7 @@ fn test_iterator_chain_advance_back_by() {\n     test_chain(&[0, 1, 2, 3, 4, 5], &[]);\n     test_chain(&[0, 1, 2, 3, 4, 5], &[30, 40, 50, 60]);\n }\n+\n #[test]\n fn test_iterator_chain_nth() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -102,6 +105,7 @@ fn test_iterator_chain_nth() {\n     assert_eq!(it.nth(5), Some(&5));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_iterator_chain_nth_back() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -117,6 +121,7 @@ fn test_iterator_chain_nth_back() {\n     assert_eq!(it.nth_back(5), Some(&0));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_iterator_chain_last() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -127,6 +132,7 @@ fn test_iterator_chain_last() {\n     assert_eq!(ys.iter().chain(&zs).last(), Some(&60));\n     assert_eq!(zs.iter().chain(&zs).last(), None);\n }\n+\n #[test]\n fn test_iterator_chain_count() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -135,6 +141,7 @@ fn test_iterator_chain_count() {\n     assert_eq!(xs.iter().chain(&ys).count(), 10);\n     assert_eq!(zs.iter().chain(&ys).count(), 4);\n }\n+\n #[test]\n fn test_iterator_chain_find() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -147,6 +154,7 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.find(|&&i| i == 100), None);\n     assert_eq!(iter.next(), None);\n }\n+\n #[test]\n fn test_iterator_chain_size_hint() {\n     // this chains an iterator of length 0 with an iterator of length 1,\n@@ -161,6 +169,7 @@ fn test_iterator_chain_size_hint() {\n     assert_eq!(iter.next_back(), Some(()));\n     assert_eq!(iter.size_hint(), (0, Some(0)));\n }\n+\n #[test]\n fn test_iterator_chain_unfused() {\n     // Chain shouldn't be fused in its second iterator, depending on direction\n@@ -174,6 +183,7 @@ fn test_iterator_chain_unfused() {\n     iter.next_back().unwrap();\n     iter.next_back().unwrap_none();\n }\n+\n #[test]\n fn test_chain_fold() {\n     let xs = [1, 2, 3];\n@@ -185,6 +195,7 @@ fn test_chain_fold() {\n     iter.fold((), |(), &elt| result.push(elt));\n     assert_eq!(&[2, 3, 1, 2, 0], &result[..]);\n }\n+\n #[test]\n fn test_chain_try_folds() {\n     let c = || (0..10).chain(10..20);"}, {"sha": "78babb7feab18534c546f2bf2ff7e45d3e523714", "filename": "library/core/tests/iter/adapters/cloned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fcloned.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -16,6 +16,7 @@ fn test_cloned() {\n     assert_eq!(it.len(), 0);\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_cloned_side_effects() {\n     let mut count = 0;\n@@ -32,6 +33,7 @@ fn test_cloned_side_effects() {\n     }\n     assert_eq!(count, 2);\n }\n+\n #[test]\n fn test_cloned_try_folds() {\n     let a = [1, 2, 3, 4, 5, 6, 7, 8, 9];"}, {"sha": "9a11a28f9b01297f170ab2df23c8d1e96d50bdcd", "filename": "library/core/tests/iter/adapters/enumerate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fenumerate.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -8,6 +8,7 @@ fn test_iterator_enumerate() {\n         assert_eq!(i, x);\n     }\n }\n+\n #[test]\n fn test_iterator_enumerate_nth() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -29,6 +30,7 @@ fn test_iterator_enumerate_nth() {\n     assert_eq!(i, x);\n     assert_eq!(i, 3);\n }\n+\n #[test]\n fn test_iterator_enumerate_nth_back() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -46,11 +48,13 @@ fn test_iterator_enumerate_nth_back() {\n     assert_eq!(i, x);\n     assert_eq!(i, 2);\n }\n+\n #[test]\n fn test_iterator_enumerate_count() {\n     let xs = [0, 1, 2, 3, 4, 5];\n     assert_eq!(xs.iter().enumerate().count(), 6);\n }\n+\n #[test]\n fn test_iterator_enumerate_fold() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -74,6 +78,7 @@ fn test_iterator_enumerate_fold() {\n     });\n     assert_eq!(i, 0);\n }\n+\n #[test]\n fn test_enumerate_try_folds() {\n     let f = &|acc, (i, x)| usize::checked_add(2 * acc, x / (i + 1) + i);"}, {"sha": "e39cb7e39c6d0064189cd177b47131d6cb1a7831", "filename": "library/core/tests/iter/adapters/filter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -5,6 +5,7 @@ fn test_iterator_filter_count() {\n     let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n     assert_eq!(xs.iter().filter(|&&x| x % 2 == 0).count(), 5);\n }\n+\n #[test]\n fn test_iterator_filter_fold() {\n     let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n@@ -23,6 +24,7 @@ fn test_iterator_filter_fold() {\n     });\n     assert_eq!(i, 0);\n }\n+\n #[test]\n fn test_filter_try_folds() {\n     fn p(&x: &i32) -> bool {"}, {"sha": "083ee85c950d937f5555f99674982ab1be29fbcf", "filename": "library/core/tests/iter/adapters/filter_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffilter_map.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -5,6 +5,7 @@ fn test_filter_map() {\n     let it = (0..).step_by(1).take(10).filter_map(|x| if x % 2 == 0 { Some(x * x) } else { None });\n     assert_eq!(it.collect::<Vec<usize>>(), [0 * 0, 2 * 2, 4 * 4, 6 * 6, 8 * 8]);\n }\n+\n #[test]\n fn test_filter_map_fold() {\n     let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8];"}, {"sha": "e21b82a7fe7f497ab627a14b1478f69db7032d7d", "filename": "library/core/tests/iter/adapters/flat_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflat_map.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -12,6 +12,7 @@ fn test_iterator_flat_map() {\n     }\n     assert_eq!(i, ys.len());\n }\n+\n #[test]\n fn test_iterator_flat_map_fold() {\n     let xs = [0, 3, 6];\n@@ -34,6 +35,7 @@ fn test_iterator_flat_map_fold() {\n     });\n     assert_eq!(i, 0);\n }\n+\n #[test]\n fn test_flat_map_try_folds() {\n     let f = &|acc, x| i32::checked_add(acc * 2 / 3, x);"}, {"sha": "084229bb0920dcb4c72f542efbee2d498fc51901", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -13,6 +13,7 @@ fn test_iterator_flatten() {\n     }\n     assert_eq!(i, ys.len());\n }\n+\n #[test]\n fn test_iterator_flatten_fold() {\n     let xs = [0, 3, 6];\n@@ -35,6 +36,7 @@ fn test_iterator_flatten_fold() {\n     });\n     assert_eq!(i, 0);\n }\n+\n #[test]\n fn test_flatten_try_folds() {\n     let f = &|acc, x| i32::checked_add(acc * 2 / 3, x);\n@@ -52,6 +54,7 @@ fn test_flatten_try_folds() {\n     assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n     assert_eq!(iter.next_back(), Some(35));\n }\n+\n #[test]\n fn test_flatten_non_fused_outer() {\n     let mut iter = NonFused::new(once(0..2)).flatten();\n@@ -60,6 +63,7 @@ fn test_flatten_non_fused_outer() {\n     assert_eq!(iter.next(), Some(0));\n     assert_eq!(iter.next(), None);\n }\n+\n #[test]\n fn test_flatten_non_fused_inner() {\n     let mut iter = once(0..1).chain(once(1..3)).flat_map(NonFused::new);"}, {"sha": "5b9f8065fe1adca5ff5096fe69974d08feed509c", "filename": "library/core/tests/iter/adapters/fuse.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ffuse.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -11,6 +11,7 @@ fn test_fuse_nth() {\n     assert_eq!(it.nth(2), None);\n     assert_eq!(it.len(), 0);\n }\n+\n #[test]\n fn test_fuse_last() {\n     let xs = [0, 1, 2];\n@@ -19,6 +20,7 @@ fn test_fuse_last() {\n     assert_eq!(it.len(), 3);\n     assert_eq!(it.last(), Some(&2));\n }\n+\n #[test]\n fn test_fuse_count() {\n     let xs = [0, 1, 2];\n@@ -28,6 +30,7 @@ fn test_fuse_count() {\n     assert_eq!(it.count(), 3);\n     // Can't check len now because count consumes.\n }\n+\n #[test]\n fn test_fuse_fold() {\n     let xs = [0, 1, 2];"}, {"sha": "939e3a28a7204ef2bf92ec7246fd13e052049107", "filename": "library/core/tests/iter/adapters/inspect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Finspect.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -10,6 +10,7 @@ fn test_inspect() {\n     assert_eq!(n, xs.len());\n     assert_eq!(&xs[..], &ys[..]);\n }\n+\n #[test]\n fn test_inspect_fold() {\n     let xs = [1, 2, 3, 4];"}, {"sha": "4f65f1bdee3d0c1a200e02cf044e5919b864fa8f", "filename": "library/core/tests/iter/adapters/intersperse.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fintersperse.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -17,6 +17,7 @@ fn test_intersperse() {\n     let mut it = ys[..0].iter().map(|x| *x).intersperse(1);\n     assert!(it.next() == None);\n }\n+\n #[test]\n fn test_intersperse_size_hint() {\n     let iter = std::iter::empty::<i32>().intersperse(0);\n@@ -33,6 +34,7 @@ fn test_intersperse_size_hint() {\n \n     assert_eq!([].iter().intersperse(&()).size_hint(), (0, Some(0)));\n }\n+\n #[test]\n fn test_fold_specialization_intersperse() {\n     let mut iter = (1..2).intersperse(0);\n@@ -44,6 +46,7 @@ fn test_fold_specialization_intersperse() {\n     let mut iter = (1..4).intersperse(0);\n     iter.clone().for_each(|x| assert_eq!(Some(x), iter.next()));\n }\n+\n #[test]\n fn test_try_fold_specialization_intersperse_ok() {\n     let mut iter = (1..2).intersperse(0);\n@@ -64,6 +67,7 @@ fn test_try_fold_specialization_intersperse_ok() {\n         Some(())\n     });\n }\n+\n #[test]\n fn test_intersperse_with() {\n     #[derive(PartialEq, Debug)]\n@@ -84,6 +88,7 @@ fn test_intersperse_with() {\n     let r = (0..3).intersperse_with(separator).collect::<Vec<_>>();\n     assert_eq!(r, vec![0, 200, 1, 400, 2]);\n }\n+\n #[test]\n fn test_intersperse_fold() {\n     let v = (1..4).intersperse(9).fold(Vec::new(), |mut acc, x| {\n@@ -112,6 +117,7 @@ fn test_intersperse_fold() {\n     let v = NoneAtStart(0).intersperse(1000).fold(0, |a, b| a + b);\n     assert_eq!(v, 0);\n }\n+\n #[test]\n fn test_intersperse_collect_string() {\n     let contents = vec![1, 2, 3];"}, {"sha": "704acc12307e1b613c54680ac6257a05f5032ac0", "filename": "library/core/tests/iter/adapters/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmap.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -22,6 +22,7 @@ fn test_find_map() {\n         if x % 2 == 0 { Some(x / 2) } else { None }\n     }\n }\n+\n #[test]\n fn test_map_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);\n@@ -34,6 +35,7 @@ fn test_map_try_folds() {\n     assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n     assert_eq!(iter.next_back(), Some(46));\n }\n+\n #[test]\n fn test_filter_map_try_folds() {\n     let mp = &|x| if 0 <= x && x < 10 { Some(x * 2) } else { None };"}, {"sha": "390414d4aa213b14f489d82de0acb84d01ebd89b", "filename": "library/core/tests/iter/adapters/peekable.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fpeekable.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -59,6 +59,7 @@ fn test_iterator_peekable() {\n     assert!(it.next_back().is_none());\n     assert_eq!(it.len(), 0);\n }\n+\n #[test]\n fn test_iterator_peekable_count() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -82,6 +83,7 @@ fn test_iterator_peekable_count() {\n     let mut it = zs.iter().peekable();\n     assert_eq!(it.peek(), None);\n }\n+\n #[test]\n fn test_iterator_peekable_nth() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -95,6 +97,7 @@ fn test_iterator_peekable_nth() {\n     assert_eq!(it.nth(2), Some(&5));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_iterator_peekable_last() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -113,6 +116,7 @@ fn test_iterator_peekable_last() {\n     assert_eq!(it.peek(), None);\n     assert_eq!(it.last(), None);\n }\n+\n #[test]\n fn test_iterator_peekable_fold() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -124,6 +128,7 @@ fn test_iterator_peekable_fold() {\n     });\n     assert_eq!(i, xs.len());\n }\n+\n #[test]\n fn test_iterator_peekable_rfold() {\n     let xs = [0, 1, 2, 3, 4, 5];\n@@ -135,6 +140,7 @@ fn test_iterator_peekable_rfold() {\n     });\n     assert_eq!(i, xs.len());\n }\n+\n #[test]\n fn test_iterator_peekable_next_if_eq() {\n     // first, try on references\n@@ -158,6 +164,7 @@ fn test_iterator_peekable_next_if_eq() {\n     assert_eq!(it.next_if_eq(\"speed\"), Some(\"speed\".into()));\n     assert_eq!(it.next_if_eq(\"\"), None);\n }\n+\n #[test]\n fn test_iterator_peekable_mut() {\n     let mut it = vec![1, 2, 3].into_iter().peekable();\n@@ -168,6 +175,7 @@ fn test_iterator_peekable_mut() {\n     }\n     assert_eq!(it.collect::<Vec<_>>(), vec![5, 2, 3]);\n }\n+\n #[test]\n fn test_iterator_peekable_remember_peek_none_1() {\n     // Check that the loop using .peek() terminates\n@@ -185,6 +193,7 @@ fn test_iterator_peekable_remember_peek_none_1() {\n     }\n     assert_eq!(n, data.len());\n }\n+\n #[test]\n fn test_iterator_peekable_remember_peek_none_2() {\n     let data = [0];\n@@ -193,6 +202,7 @@ fn test_iterator_peekable_remember_peek_none_2() {\n     assert_eq!(iter.peek(), None);\n     assert_eq!(iter.last(), None);\n }\n+\n #[test]\n fn test_iterator_peekable_remember_peek_none_3() {\n     let data = [0];\n@@ -205,6 +215,7 @@ fn test_iterator_peekable_remember_peek_none_3() {\n     assert_eq!(iter.peek(), None);\n     assert_eq!(iter.nth(0), None);\n }\n+\n #[test]\n fn test_peek_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);\n@@ -251,6 +262,7 @@ fn test_peek_try_folds() {\n     assert_eq!(iter.peek(), None);\n     assert_eq!(iter.try_rfold((), |(), x| Err(x)), Ok(()));\n }\n+\n #[test]\n fn test_peekable_non_fused() {\n     let mut iter = NonFused::new(empty::<i32>()).peekable();"}, {"sha": "cf60057a1644ad1977b85771367239f298ce3f18", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -14,6 +14,7 @@ fn test_iterator_skip() {\n     assert_eq!(i, ys.len());\n     assert_eq!(it.len(), 0);\n }\n+\n #[test]\n fn test_iterator_skip_doubleended() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -51,6 +52,7 @@ fn test_iterator_skip_doubleended() {\n     let it = xs.iter().skip(5).rev();\n     assert_eq!(it.last(), Some(&13));\n }\n+\n #[test]\n fn test_iterator_skip_nth() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -66,6 +68,7 @@ fn test_iterator_skip_nth() {\n     let mut it = xs.iter().skip(12);\n     assert_eq!(it.nth(0), None);\n }\n+\n #[test]\n fn test_iterator_skip_count() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -76,6 +79,7 @@ fn test_iterator_skip_count() {\n     assert_eq!(xs.iter().skip(12).count(), 0);\n     assert_eq!(xs.iter().skip(13).count(), 0);\n }\n+\n #[test]\n fn test_iterator_skip_last() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -90,6 +94,7 @@ fn test_iterator_skip_last() {\n     assert_eq!(it.next(), Some(&13));\n     assert_eq!(it.last(), Some(&30));\n }\n+\n #[test]\n fn test_iterator_skip_fold() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n@@ -127,6 +132,7 @@ fn test_iterator_skip_fold() {\n     });\n     assert_eq!(i, 1);\n }\n+\n #[test]\n fn test_skip_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);\n@@ -139,6 +145,7 @@ fn test_skip_try_folds() {\n     assert_eq!(iter.try_rfold(0, i8::checked_add), None);\n     assert_eq!(iter.next_back(), Some(24));\n }\n+\n #[test]\n fn test_skip_nth_back() {\n     let xs = [0, 1, 2, 3, 4, 5];"}, {"sha": "929d4f6e64fd0be71640333ee6273442c07dfb03", "filename": "library/core/tests/iter/adapters/skip_while.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip_while.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -12,6 +12,7 @@ fn test_iterator_skip_while() {\n     }\n     assert_eq!(i, ys.len());\n }\n+\n #[test]\n fn test_iterator_skip_while_fold() {\n     let xs = [0, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n@@ -31,6 +32,7 @@ fn test_iterator_skip_while_fold() {\n     });\n     assert_eq!(i, ys.len());\n }\n+\n #[test]\n fn test_skip_while_try_fold() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);"}, {"sha": "3d82a40cd294180669a6d5828e9cee64593fc329", "filename": "library/core/tests/iter/adapters/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -23,6 +23,7 @@ fn test_steps_between() {\n         None,\n     );\n }\n+\n #[test]\n fn test_step_forward() {\n     assert_eq!(Step::forward_checked(55_u8, 200_usize), Some(255_u8));\n@@ -59,6 +60,7 @@ fn test_step_forward() {\n         None\n     );\n }\n+\n #[test]\n fn test_step_backward() {\n     assert_eq!(Step::backward_checked(255_u8, 200_usize), Some(55_u8));"}, {"sha": "6502c7fb795884b7c158c1c1b3bb36f7cffc13a5", "filename": "library/core/tests/iter/adapters/step_by.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fstep_by.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -29,6 +29,7 @@ fn test_iterator_step_by() {\n     assert_eq!(it.next_back(), Some(0));\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_iterator_step_by_nth() {\n     let mut it = (0..16).step_by(5);\n@@ -46,6 +47,7 @@ fn test_iterator_step_by_nth() {\n     assert_eq!(it.clone().nth(4), None);\n     assert_eq!(it.clone().nth(42), None);\n }\n+\n #[test]\n fn test_iterator_step_by_nth_overflow() {\n     #[cfg(target_pointer_width = \"8\")]\n@@ -91,6 +93,7 @@ fn test_iterator_step_by_nth_overflow() {\n     (&mut it).step_by(1).nth(usize::MAX);\n     assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n }\n+\n #[test]\n fn test_iterator_step_by_nth_try_fold() {\n     let mut it = (0..).step_by(10);\n@@ -107,6 +110,7 @@ fn test_iterator_step_by_nth_try_fold() {\n     assert_eq!(it.next(), Some(100));\n     assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n }\n+\n #[test]\n fn test_iterator_step_by_nth_back() {\n     let mut it = (0..16).step_by(5);\n@@ -131,6 +135,7 @@ fn test_iterator_step_by_nth_back() {\n     assert_eq!(it().nth_back(4), None);\n     assert_eq!(it().nth_back(42), None);\n }\n+\n #[test]\n fn test_iterator_step_by_nth_try_rfold() {\n     let mut it = (0..100).step_by(10);\n@@ -148,12 +153,14 @@ fn test_iterator_step_by_nth_try_rfold() {\n     assert_eq!(it.next_back(), Some(100));\n     assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n }\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {\n     let mut it = (0..).step_by(0);\n     it.next();\n }\n+\n #[test]\n fn test_iterator_step_by_size_hint() {\n     struct StubSizeHint(usize, Option<usize>);\n@@ -232,6 +239,7 @@ fn test_iterator_step_by_size_hint() {\n     assert!(TrustedLenCheck::test(a.iter()));\n     assert!(!TrustedLenCheck::test(a.iter().step_by(1)));\n }\n+\n #[test]\n fn test_step_by_skip() {\n     assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);"}, {"sha": "89f9cb1e2ed1bd6af4597e3f8e4aa4ace0d6598a", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -27,6 +27,7 @@ fn test_iterator_take() {\n     assert_eq!(i, ys.len());\n     assert_eq!(it.len(), 0);\n }\n+\n #[test]\n fn test_iterator_take_nth() {\n     let xs = [0, 1, 2, 4, 5];\n@@ -50,6 +51,7 @@ fn test_iterator_take_nth() {\n         i += 2;\n     }\n }\n+\n #[test]\n fn test_iterator_take_nth_back() {\n     let xs = [0, 1, 2, 4, 5];\n@@ -70,6 +72,7 @@ fn test_iterator_take_nth_back() {\n     assert_eq!(it.nth_back(1), Some(&1));\n     assert_eq!(it.nth_back(1), None);\n }\n+\n #[test]\n fn test_iterator_take_short() {\n     let xs = [0, 1, 2, 3];\n@@ -96,6 +99,7 @@ fn test_iterator_take_short() {\n     assert_eq!(i, xs.len());\n     assert_eq!(it.len(), 0);\n }\n+\n #[test]\n fn test_take_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);"}, {"sha": "6f1ebab29b31c367afbc3a5cee9068484ada18ba", "filename": "library/core/tests/iter/adapters/take_while.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake_while.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -12,6 +12,7 @@ fn test_iterator_take_while() {\n     }\n     assert_eq!(i, ys.len());\n }\n+\n #[test]\n fn test_take_while_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);"}, {"sha": "a5bf19c43c9d40e6dc085f8f76675a21c02649f3", "filename": "library/core/tests/iter/adapters/zip.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -17,6 +17,7 @@ fn test_zip_nth() {\n     let mut it = ys.iter().zip(&xs);\n     assert_eq!(it.nth(3), None);\n }\n+\n #[test]\n fn test_zip_nth_side_effects() {\n     let mut a = Vec::new();\n@@ -38,6 +39,7 @@ fn test_zip_nth_side_effects() {\n     assert_eq!(a, vec![1, 2, 3, 4, 5]);\n     assert_eq!(b, vec![200, 300, 400, 500, 600]);\n }\n+\n #[test]\n fn test_zip_next_back_side_effects() {\n     let mut a = Vec::new();\n@@ -63,6 +65,7 @@ fn test_zip_next_back_side_effects() {\n     assert_eq!(a, vec![6, 5, 4, 3]);\n     assert_eq!(b, vec![800, 700, 600, 500, 400]);\n }\n+\n #[test]\n fn test_zip_nth_back_side_effects() {\n     let mut a = Vec::new();\n@@ -83,6 +86,7 @@ fn test_zip_nth_back_side_effects() {\n     assert_eq!(a, vec![6, 5, 4, 3]);\n     assert_eq!(b, vec![800, 700, 600, 500, 400]);\n }\n+\n #[test]\n fn test_zip_next_back_side_effects_exhausted() {\n     let mut a = Vec::new();\n@@ -107,6 +111,7 @@ fn test_zip_next_back_side_effects_exhausted() {\n     assert_eq!(a, vec![1, 2, 3, 4, 6, 5]);\n     assert_eq!(b, vec![200, 300, 400]);\n }\n+\n #[test]\n fn test_zip_cloned_sideffectful() {\n     let xs = [CountClone::new(), CountClone::new(), CountClone::new(), CountClone::new()];\n@@ -125,6 +130,7 @@ fn test_zip_cloned_sideffectful() {\n     assert_eq!(&xs, &[1, 1][..]);\n     assert_eq!(&ys, &[1, 1, 0, 0][..]);\n }\n+\n #[test]\n fn test_zip_map_sideffectful() {\n     let mut xs = [0; 6];\n@@ -143,6 +149,7 @@ fn test_zip_map_sideffectful() {\n     assert_eq!(&xs, &[1, 1, 1, 1]);\n     assert_eq!(&ys, &[1, 1, 1, 1, 0, 0]);\n }\n+\n #[test]\n fn test_zip_map_rev_sideffectful() {\n     let mut xs = [0; 6];\n@@ -166,6 +173,7 @@ fn test_zip_map_rev_sideffectful() {\n     assert_eq!(&xs, &[1, 1, 1, 1, 1, 1]);\n     assert_eq!(&ys, &[1, 1, 1, 1]);\n }\n+\n #[test]\n fn test_zip_nested_sideffectful() {\n     let mut xs = [0; 6];\n@@ -178,6 +186,7 @@ fn test_zip_nested_sideffectful() {\n     }\n     assert_eq!(&xs, &[1, 1, 1, 1, 1, 0]);\n }\n+\n #[test]\n fn test_zip_nth_back_side_effects_exhausted() {\n     let mut a = Vec::new();\n@@ -202,6 +211,7 @@ fn test_zip_nth_back_side_effects_exhausted() {\n     assert_eq!(a, vec![1, 2, 3, 4, 6, 5]);\n     assert_eq!(b, vec![200, 300, 400]);\n }\n+\n #[test]\n fn test_zip_trusted_random_access_composition() {\n     let a = [0, 1, 2, 3, 4];"}, {"sha": "ac51ec797ac00e9a21fbb306bb539a3932d32509", "filename": "library/core/tests/iter/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fmod.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -6,21 +6,24 @@ mod traits;\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n+\n+pub fn is_trusted_len<I: TrustedLen>(_: I) {}\n+\n #[test]\n fn test_multi_iter() {\n     let xs = [1, 2, 3, 4];\n     let ys = [4, 3, 2, 1];\n     assert!(xs.iter().eq(ys.iter().rev()));\n     assert!(xs.iter().lt(xs.iter().skip(2)));\n }\n+\n #[test]\n fn test_counter_from_iter() {\n     let it = (0..).step_by(5).take(10);\n     let xs: Vec<isize> = FromIterator::from_iter(it);\n     assert_eq!(xs, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n }\n \n-pub fn is_trusted_len<I: TrustedLen>(_: I) {}\n #[test]\n fn test_functor_laws() {\n     // identity:\n@@ -41,17 +44,20 @@ fn test_functor_laws() {\n     }\n     assert_eq!((0..10).map(f).map(g).sum::<usize>(), (0..10).map(h).sum());\n }\n+\n #[test]\n fn test_monad_laws_left_identity() {\n     fn f(x: usize) -> impl Iterator<Item = usize> {\n         (0..10).map(move |y| x * y)\n     }\n     assert_eq!(once(42).flat_map(f.clone()).sum::<usize>(), f(42).sum());\n }\n+\n #[test]\n fn test_monad_laws_right_identity() {\n     assert_eq!((0..10).flat_map(|x| once(x)).sum::<usize>(), (0..10).sum());\n }\n+\n #[test]\n fn test_monad_laws_associativity() {\n     fn f(x: usize) -> impl Iterator<Item = usize> {\n@@ -77,6 +83,7 @@ pub fn extend_for_unit() {\n     }\n     assert_eq!(x, 5);\n }\n+\n #[test]\n fn test_try_fold_specialization_intersperse_err() {\n     let orig_iter = [\"a\", \"b\"].iter().copied().intersperse(\"-\");"}, {"sha": "68cc34d5ddb275bd91b85b8c302533d5dd72f89e", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -23,6 +23,7 @@ fn test_range() {\n         (isize::MAX as usize + 2, Some(isize::MAX as usize + 2))\n     );\n }\n+\n #[test]\n fn test_char_range() {\n     use std::char;\n@@ -37,6 +38,7 @@ fn test_char_range() {\n     assert_eq!(('\\u{D7FF}'..'\\u{E000}').count(), 1);\n     assert_eq!(('\\u{D7FF}'..'\\u{E000}').size_hint(), (1, Some(1)));\n }\n+\n #[test]\n fn test_range_exhaustion() {\n     let mut r = 10..10;\n@@ -65,6 +67,7 @@ fn test_range_exhaustion() {\n     assert_eq!(r.next_back(), None);\n     assert_eq!(r, 100..10);\n }\n+\n #[test]\n fn test_range_inclusive_exhaustion() {\n     let mut r = 10..=10;\n@@ -124,6 +127,7 @@ fn test_range_inclusive_exhaustion() {\n     assert_eq!(r.next_back(), None);\n     assert_eq!(r, 100..=10);\n }\n+\n #[test]\n fn test_range_nth() {\n     assert_eq!((10..15).nth(0), Some(10));\n@@ -139,6 +143,7 @@ fn test_range_nth() {\n     assert_eq!(r.nth(10), None);\n     assert_eq!(r, 20..20);\n }\n+\n #[test]\n fn test_range_nth_back() {\n     assert_eq!((10..15).nth_back(0), Some(14));\n@@ -155,6 +160,7 @@ fn test_range_nth_back() {\n     assert_eq!(r.nth_back(10), None);\n     assert_eq!(r, 10..10);\n }\n+\n #[test]\n fn test_range_from_nth() {\n     assert_eq!((10..).nth(0), Some(10));\n@@ -171,6 +177,7 @@ fn test_range_from_nth() {\n \n     assert_eq!((0..).size_hint(), (usize::MAX, None));\n }\n+\n #[test]\n fn test_range_from_take() {\n     let mut it = (0..).take(3);\n@@ -183,11 +190,13 @@ fn test_range_from_take() {\n     assert_eq!((0..).take(0).size_hint(), (0, Some(0)));\n     assert_eq!((0..).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n+\n #[test]\n fn test_range_from_take_collect() {\n     let v: Vec<_> = (0..).take(3).collect();\n     assert_eq!(v, vec![0, 1, 2]);\n }\n+\n #[test]\n fn test_range_inclusive_nth() {\n     assert_eq!((10..=15).nth(0), Some(10));\n@@ -210,6 +219,7 @@ fn test_range_inclusive_nth() {\n     assert_eq!(r, exhausted_via_next);\n     assert_eq!(ExactSizeIterator::is_empty(&r), true);\n }\n+\n #[test]\n fn test_range_inclusive_nth_back() {\n     assert_eq!((10..=15).nth_back(0), Some(15));\n@@ -233,6 +243,7 @@ fn test_range_inclusive_nth_back() {\n     assert_eq!(r, exhausted_via_next_back);\n     assert_eq!(ExactSizeIterator::is_empty(&r), true);\n }\n+\n #[test]\n fn test_range_len() {\n     assert_eq!((0..10_u8).len(), 10);\n@@ -241,6 +252,7 @@ fn test_range_len() {\n     assert_eq!((11..10_u8).len(), 0);\n     assert_eq!((100..10_u8).len(), 0);\n }\n+\n #[test]\n fn test_range_inclusive_len() {\n     assert_eq!((0..=10_u8).len(), 11);\n@@ -249,6 +261,7 @@ fn test_range_inclusive_len() {\n     assert_eq!((11..=10_u8).len(), 0);\n     assert_eq!((100..=10_u8).len(), 0);\n }\n+\n #[test]\n fn test_range_step() {\n     #![allow(deprecated)]\n@@ -271,13 +284,15 @@ fn test_range_step() {\n     assert_eq!((i16::MIN..i16::MAX).step_by(i16::MAX as usize).size_hint(), (3, Some(3)));\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n+\n #[test]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n     assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);\n     assert_eq!((200..=255u8).step_by(10).collect::<Vec<_>>(), [200, 210, 220, 230, 240, 250]);\n     assert_eq!((250..=255u8).step_by(1).collect::<Vec<_>>(), [250, 251, 252, 253, 254, 255]);\n }\n+\n #[test]\n fn test_range_last_max() {\n     assert_eq!((0..20).last(), Some(19));\n@@ -288,6 +303,7 @@ fn test_range_last_max() {\n     assert_eq!((-20..0).max(), Some(-1));\n     assert_eq!((5..5).max(), None);\n }\n+\n #[test]\n fn test_range_inclusive_last_max() {\n     assert_eq!((0..=20).last(), Some(20));\n@@ -304,12 +320,14 @@ fn test_range_inclusive_last_max() {\n     r.next();\n     assert_eq!(r.max(), None);\n }\n+\n #[test]\n fn test_range_min() {\n     assert_eq!((0..20).min(), Some(0));\n     assert_eq!((-20..0).min(), Some(-20));\n     assert_eq!((5..5).min(), None);\n }\n+\n #[test]\n fn test_range_inclusive_min() {\n     assert_eq!((0..=20).min(), Some(0));\n@@ -319,6 +337,7 @@ fn test_range_inclusive_min() {\n     r.next();\n     assert_eq!(r.min(), None);\n }\n+\n #[test]\n fn test_range_inclusive_folds() {\n     assert_eq!((1..=10).sum::<i32>(), 55);\n@@ -356,6 +375,7 @@ fn test_range_inclusive_folds() {\n     assert_eq!(it.try_rfold(0, |a, b| Some(a + b)), Some(0));\n     assert!(it.is_empty());\n }\n+\n #[test]\n fn test_range_size_hint() {\n     assert_eq!((0..0usize).size_hint(), (0, Some(0)));\n@@ -379,6 +399,7 @@ fn test_range_size_hint() {\n     assert_eq!((imin..imax).size_hint(), (usize::MAX, Some(usize::MAX)));\n     assert_eq!((imin..imax + 1).size_hint(), (usize::MAX, None));\n }\n+\n #[test]\n fn test_range_inclusive_size_hint() {\n     assert_eq!((1..=0usize).size_hint(), (0, Some(0)));"}, {"sha": "d0114ade6e4634828b42619d5472a5178446ba2b", "filename": "library/core/tests/iter/sources.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fsources.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -9,6 +9,7 @@ fn test_repeat() {\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(repeat(42).size_hint(), (usize::MAX, None));\n }\n+\n #[test]\n fn test_repeat_take() {\n     let mut it = repeat(42).take(3);\n@@ -21,11 +22,13 @@ fn test_repeat_take() {\n     assert_eq!(repeat(42).take(0).size_hint(), (0, Some(0)));\n     assert_eq!(repeat(42).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n+\n #[test]\n fn test_repeat_take_collect() {\n     let v: Vec<_> = repeat(42).take(3).collect();\n     assert_eq!(v, vec![42, 42, 42]);\n }\n+\n #[test]\n fn test_repeat_with() {\n     #[derive(PartialEq, Debug)]\n@@ -36,6 +39,7 @@ fn test_repeat_with() {\n     assert_eq!(it.next(), Some(NotClone(42)));\n     assert_eq!(repeat_with(|| NotClone(42)).size_hint(), (usize::MAX, None));\n }\n+\n #[test]\n fn test_repeat_with_take() {\n     let mut it = repeat_with(|| 42).take(3);\n@@ -48,6 +52,7 @@ fn test_repeat_with_take() {\n     assert_eq!(repeat_with(|| 42).take(0).size_hint(), (0, Some(0)));\n     assert_eq!(repeat_with(|| 42).take(usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n+\n #[test]\n fn test_repeat_with_take_collect() {\n     let mut curr = 1;\n@@ -60,6 +65,7 @@ fn test_repeat_with_take_collect() {\n     .collect();\n     assert_eq!(v, vec![1, 2, 4, 8, 16]);\n }\n+\n #[test]\n fn test_successors() {\n     let mut powers_of_10 = successors(Some(1_u16), |n| n.checked_mul(10));\n@@ -70,12 +76,14 @@ fn test_successors() {\n     assert_eq!(empty.next(), None);\n     assert_eq!(empty.next(), None);\n }\n+\n #[test]\n fn test_once() {\n     let mut it = once(42);\n     assert_eq!(it.next(), Some(42));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_once_with() {\n     let count = Cell::new(0);\n@@ -92,6 +100,7 @@ fn test_once_with() {\n     assert_eq!(it.next(), None);\n     assert_eq!(count.get(), 1);\n }\n+\n #[test]\n fn test_empty() {\n     let mut it = empty::<i32>();"}, {"sha": "f3eeb31fe580333366928af57d356eba48daf596", "filename": "library/core/tests/iter/traits/accum.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Faccum.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -7,6 +7,7 @@ fn test_iterator_sum() {\n     assert_eq!(v.iter().cloned().sum::<i32>(), 55);\n     assert_eq!(v[..0].iter().cloned().sum::<i32>(), 0);\n }\n+\n #[test]\n fn test_iterator_sum_result() {\n     let v: &[Result<i32, ()>] = &[Ok(1), Ok(2), Ok(3), Ok(4)];\n@@ -31,27 +32,31 @@ fn test_iterator_sum_result() {\n     let v: &[Result<i32, ()>] = &[Ok(1), Err(()), Ok(3), Ok(4)];\n     assert_eq!(v.iter().cloned().sum::<S>(), S(Err(())));\n }\n+\n #[test]\n fn test_iterator_sum_option() {\n     let v: &[Option<i32>] = &[Some(1), Some(2), Some(3), Some(4)];\n     assert_eq!(v.iter().cloned().sum::<Option<i32>>(), Some(10));\n     let v: &[Option<i32>] = &[Some(1), None, Some(3), Some(4)];\n     assert_eq!(v.iter().cloned().sum::<Option<i32>>(), None);\n }\n+\n #[test]\n fn test_iterator_product() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().cloned().product::<i32>(), 0);\n     assert_eq!(v[1..5].iter().cloned().product::<i32>(), 24);\n     assert_eq!(v[..0].iter().cloned().product::<i32>(), 1);\n }\n+\n #[test]\n fn test_iterator_product_result() {\n     let v: &[Result<i32, ()>] = &[Ok(1), Ok(2), Ok(3), Ok(4)];\n     assert_eq!(v.iter().cloned().product::<Result<i32, _>>(), Ok(24));\n     let v: &[Result<i32, ()>] = &[Ok(1), Err(()), Ok(3), Ok(4)];\n     assert_eq!(v.iter().cloned().product::<Result<i32, _>>(), Err(()));\n }\n+\n #[test]\n fn test_iterator_product_option() {\n     let v: &[Option<i32>] = &[Some(1), Some(2), Some(3), Some(4)];"}, {"sha": "2452388351671f57224fc8e278ebd52e1cea55c4", "filename": "library/core/tests/iter/traits/double_ended.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -6,6 +6,7 @@ fn test_iterator_rev_nth_back() {\n     }\n     assert_eq!(v.iter().rev().nth_back(v.len()), None);\n }\n+\n #[test]\n fn test_iterator_rev_nth() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -14,13 +15,15 @@ fn test_iterator_rev_nth() {\n     }\n     assert_eq!(v.iter().rev().nth(v.len()), None);\n }\n+\n #[test]\n fn test_iterator_len() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     assert_eq!(v[..4].iter().count(), 4);\n     assert_eq!(v[..10].iter().count(), 10);\n     assert_eq!(v[..0].iter().count(), 0);\n }\n+\n #[test]\n fn test_rev() {\n     let xs = [2, 4, 6, 8, 10, 12, 14, 16];\n@@ -29,6 +32,7 @@ fn test_rev() {\n     it.next();\n     assert!(it.rev().cloned().collect::<Vec<isize>>() == vec![16, 14, 12, 10, 8, 6]);\n }\n+\n #[test]\n fn test_double_ended_map() {\n     let xs = [1, 2, 3, 4, 5, 6];\n@@ -41,6 +45,7 @@ fn test_double_ended_map() {\n     assert_eq!(it.next_back(), Some(-4));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_double_ended_enumerate() {\n     let xs = [1, 2, 3, 4, 5, 6];\n@@ -53,6 +58,7 @@ fn test_double_ended_enumerate() {\n     assert_eq!(it.next_back(), Some((2, 3)));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_double_ended_zip() {\n     let xs = [1, 2, 3, 4, 5, 6];\n@@ -66,6 +72,7 @@ fn test_double_ended_zip() {\n     assert_eq!(it.next_back(), Some((3, 3)));\n     assert_eq!(it.next(), None);\n }\n+\n #[test]\n fn test_double_ended_filter() {\n     let xs = [1, 2, 3, 4, 5, 6];\n@@ -75,6 +82,7 @@ fn test_double_ended_filter() {\n     assert_eq!(it.next().unwrap(), &2);\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_double_ended_filter_map() {\n     let xs = [1, 2, 3, 4, 5, 6];\n@@ -84,6 +92,7 @@ fn test_double_ended_filter_map() {\n     assert_eq!(it.next().unwrap(), 4);\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_double_ended_chain() {\n     let xs = [1, 2, 3, 4, 5];\n@@ -127,6 +136,7 @@ fn test_double_ended_chain() {\n     assert_eq!(CrazyIterator::new().chain(0..10).rev().last(), Some(0));\n     assert!((0..10).chain(CrazyIterator::new()).rev().any(|i| i == 0));\n }\n+\n #[test]\n fn test_double_ended_flat_map() {\n     let u = [0, 1];\n@@ -143,6 +153,7 @@ fn test_double_ended_flat_map() {\n     assert_eq!(it.next(), None);\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_double_ended_flatten() {\n     let u = [0, 1];\n@@ -159,6 +170,7 @@ fn test_double_ended_flatten() {\n     assert_eq!(it.next(), None);\n     assert_eq!(it.next_back(), None);\n }\n+\n #[test]\n fn test_double_ended_range() {\n     assert_eq!((11..14).rev().collect::<Vec<_>>(), [13, 12, 11]);\n@@ -171,6 +183,7 @@ fn test_double_ended_range() {\n         panic!(\"unreachable\");\n     }\n }\n+\n #[test]\n fn test_rev_try_folds() {\n     let f = &|acc, x| i32::checked_add(2 * acc, x);"}, {"sha": "d3799b55e409f71ffcd711985557372f0a3d6d26", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -68,6 +68,7 @@ fn test_lt() {\n     assert!(c.iter().gt(b.iter()) == (c[0] > b[0]));\n     assert!(c.iter().ge(b.iter()) == (c[0] >= b[0]));\n }\n+\n #[test]\n fn test_cmp_by() {\n     use core::cmp::Ordering;\n@@ -83,6 +84,7 @@ fn test_cmp_by() {\n     assert_eq!(xs().cmp_by(ys().rev(), f), Ordering::Less);\n     assert_eq!(xs().cmp_by(ys().take(2), f), Ordering::Greater);\n }\n+\n #[test]\n fn test_partial_cmp_by() {\n     use core::cmp::Ordering;\n@@ -105,6 +107,7 @@ fn test_partial_cmp_by() {\n     assert_eq!(xs().partial_cmp_by(ys(), f), None);\n     assert_eq!(ys().partial_cmp_by(xs(), f), Some(Ordering::Greater));\n }\n+\n #[test]\n fn test_eq_by() {\n     let f = |x: i32, y: i32| x * x == y;\n@@ -120,6 +123,7 @@ fn test_eq_by() {\n     assert!(!xs().eq_by(ys().take(3), f));\n     assert!(xs().take(3).eq_by(ys().take(3), f));\n }\n+\n #[test]\n fn test_iterator_nth() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -128,6 +132,7 @@ fn test_iterator_nth() {\n     }\n     assert_eq!(v.iter().nth(v.len()), None);\n }\n+\n #[test]\n fn test_iterator_nth_back() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -136,6 +141,7 @@ fn test_iterator_nth_back() {\n     }\n     assert_eq!(v.iter().nth_back(v.len()), None);\n }\n+\n #[test]\n fn test_iterator_advance_by() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -150,6 +156,7 @@ fn test_iterator_advance_by() {\n     assert_eq!(v.iter().advance_by(v.len()), Ok(()));\n     assert_eq!(v.iter().advance_by(100), Err(v.len()));\n }\n+\n #[test]\n fn test_iterator_advance_back_by() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -164,6 +171,7 @@ fn test_iterator_advance_back_by() {\n     assert_eq!(v.iter().advance_back_by(v.len()), Ok(()));\n     assert_eq!(v.iter().advance_back_by(100), Err(v.len()));\n }\n+\n #[test]\n fn test_iterator_rev_advance_back_by() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n@@ -178,12 +186,14 @@ fn test_iterator_rev_advance_back_by() {\n     assert_eq!(v.iter().rev().advance_back_by(v.len()), Ok(()));\n     assert_eq!(v.iter().rev().advance_back_by(100), Err(v.len()));\n }\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];\n     assert_eq!(v.iter().last().unwrap(), &4);\n     assert_eq!(v[..1].iter().last().unwrap(), &0);\n }\n+\n #[test]\n fn test_iterator_max() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n@@ -192,6 +202,7 @@ fn test_iterator_max() {\n     assert_eq!(v[..0].iter().cloned().max(), None);\n     assert_eq!(v.iter().cloned().map(Mod3).max().map(|x| x.0), Some(8));\n }\n+\n #[test]\n fn test_iterator_min() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n@@ -200,6 +211,7 @@ fn test_iterator_min() {\n     assert_eq!(v[..0].iter().cloned().min(), None);\n     assert_eq!(v.iter().cloned().map(Mod3).min().map(|x| x.0), Some(0));\n }\n+\n #[test]\n fn test_iterator_size_hint() {\n     let c = (0..).step_by(1);\n@@ -239,6 +251,7 @@ fn test_iterator_size_hint() {\n     assert_eq!(vi.clone().map(|&i| i + 1).size_hint(), (10, Some(10)));\n     assert_eq!(vi.filter_map(|_| Some(0)).size_hint(), (0, Some(10)));\n }\n+\n #[test]\n fn test_all() {\n     let v: Box<[isize]> = Box::new([1, 2, 3, 4, 5]);\n@@ -247,6 +260,7 @@ fn test_all() {\n     assert!(!v.iter().all(|&x| x > 100));\n     assert!(v[..0].iter().all(|_| panic!()));\n }\n+\n #[test]\n fn test_any() {\n     let v: Box<[isize]> = Box::new([1, 2, 3, 4, 5]);\n@@ -255,13 +269,15 @@ fn test_any() {\n     assert!(!v.iter().any(|&x| x > 100));\n     assert!(!v[..0].iter().any(|_| panic!()));\n }\n+\n #[test]\n fn test_find() {\n     let v: &[isize] = &[1, 3, 9, 27, 103, 14, 11];\n     assert_eq!(*v.iter().find(|&&x| x & 1 == 0).unwrap(), 14);\n     assert_eq!(*v.iter().find(|&&x| x % 3 == 0).unwrap(), 3);\n     assert!(v.iter().find(|&&x| x % 12 == 0).is_none());\n }\n+\n #[test]\n fn test_try_find() {\n     let xs: &[isize] = &[];\n@@ -287,6 +303,7 @@ fn test_try_find() {\n         Ok(false)\n     }\n }\n+\n #[test]\n fn test_try_find_api_usability() -> Result<(), Box<dyn std::error::Error>> {\n     let a = [\"1\", \"2\"];\n@@ -300,40 +317,47 @@ fn test_try_find_api_usability() -> Result<(), Box<dyn std::error::Error>> {\n \n     Ok(())\n }\n+\n #[test]\n fn test_position() {\n     let v = &[1, 3, 9, 27, 103, 14, 11];\n     assert_eq!(v.iter().position(|x| *x & 1 == 0).unwrap(), 5);\n     assert_eq!(v.iter().position(|x| *x % 3 == 0).unwrap(), 1);\n     assert!(v.iter().position(|x| *x % 12 == 0).is_none());\n }\n+\n #[test]\n fn test_count() {\n     let xs = &[1, 2, 2, 1, 5, 9, 0, 2];\n     assert_eq!(xs.iter().filter(|x| **x == 2).count(), 3);\n     assert_eq!(xs.iter().filter(|x| **x == 5).count(), 1);\n     assert_eq!(xs.iter().filter(|x| **x == 95).count(), 0);\n }\n+\n #[test]\n fn test_max_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n }\n+\n #[test]\n fn test_max_by() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().max_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), -10);\n }\n+\n #[test]\n fn test_min_by_key() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n }\n+\n #[test]\n fn test_min_by() {\n     let xs: &[isize] = &[-3, 0, 1, 5, -10];\n     assert_eq!(*xs.iter().min_by(|x, y| x.abs().cmp(&y.abs())).unwrap(), 0);\n }\n+\n #[test]\n fn test_by_ref() {\n     let mut xs = 0..10;\n@@ -342,6 +366,7 @@ fn test_by_ref() {\n     assert_eq!(partial_sum, 10);\n     assert_eq!(xs.next(), Some(5));\n }\n+\n #[test]\n fn test_is_sorted() {\n     assert!([1, 2, 2, 9].iter().is_sorted());\n@@ -354,6 +379,7 @@ fn test_is_sorted() {\n     assert!(![\"c\", \"bb\", \"aaa\"].iter().is_sorted());\n     assert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\n }\n+\n #[test]\n fn test_partition() {\n     fn check(xs: &mut [i32], ref p: impl Fn(&i32) -> bool, expected: usize) {\n@@ -389,6 +415,7 @@ fn test_partition() {\n     check(xs, |&x| x < 3, 3); // small\n     check(xs, |&x| x > 6, 3); // large\n }\n+\n #[test]\n fn test_iterator_rev_advance_by() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "a31b622addf0e3f48c3b7dfca34e79fa99e79692", "filename": "library/core/tests/iter/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a2def678477ce81e2a8c03b9df998acc289a5/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fmod.rs?ref=1e3a2def678477ce81e2a8c03b9df998acc289a5", "patch": "@@ -19,11 +19,13 @@ fn test_rposition() {\n     assert_eq!(v.iter().rposition(f), Some(3));\n     assert!(v.iter().rposition(g).is_none());\n }\n+\n #[test]\n fn test_rev_rposition() {\n     let v = [0, 0, 1, 1];\n     assert_eq!(v.iter().rev().rposition(|&x| x == 1), Some(1));\n }\n+\n #[test]\n #[should_panic]\n fn test_rposition_panic() {"}]}