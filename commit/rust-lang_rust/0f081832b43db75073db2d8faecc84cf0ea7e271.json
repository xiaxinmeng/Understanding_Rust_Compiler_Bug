{"sha": "0f081832b43db75073db2d8faecc84cf0ea7e271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMDgxODMyYjQzZGI3NTA3M2RiMmQ4ZmFlY2M4NGNmMGVhN2UyNzE=", "commit": {"author": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2021-08-06T15:14:27Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-18T07:31:51Z"}, "message": "remove box_syntax uses from cranelift and tools", "tree": {"sha": "5072311525d393eac776e2b9e5d46b06431d6f17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5072311525d393eac776e2b9e5d46b06431d6f17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f081832b43db75073db2d8faecc84cf0ea7e271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f081832b43db75073db2d8faecc84cf0ea7e271", "html_url": "https://github.com/rust-lang/rust/commit/0f081832b43db75073db2d8faecc84cf0ea7e271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f081832b43db75073db2d8faecc84cf0ea7e271/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4cc0c57d2b06b10f63dab0f66bff92da1ad681", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4cc0c57d2b06b10f63dab0f66bff92da1ad681", "html_url": "https://github.com/rust-lang/rust/commit/dd4cc0c57d2b06b10f63dab0f66bff92da1ad681"}], "stats": {"total": 602, "additions": 304, "deletions": 298}, "files": [{"sha": "2a9f7e58e01c2f93db91629a11a21132188bbedf", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_prelude, alloc_error_handler)]\n+#![feature(start, core_intrinsics, alloc_prelude, alloc_error_handler)]\n #![no_std]\n \n extern crate alloc;"}, {"sha": "6e13e4dcbfbffcb1084d4bb9b2c27e41c760c62e", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_core, lang_items, box_syntax, never_type, linkage, extern_types, thread_local)]\n+#![feature(no_core, lang_items, never_type, linkage, extern_types, thread_local)]\n #![no_core]\n #![allow(dead_code, non_camel_case_types)]\n "}, {"sha": "e3e8a3c2d6ab0b80754ec36a5288317b9380585a", "filename": "compiler/rustc_codegen_cranelift/example/mod_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, lang_items)]\n+#![feature(start, core_intrinsics, lang_items)]\n #![no_std]\n \n #[cfg_attr(unix, link(name = \"c\"))]"}, {"sha": "8ad09a9edc01cb3e28712c2cbdb4c119056e7aac", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             attrs: Default::default(),\n             visibility: Inherited,\n             def_id: ItemId::Auto { trait_: trait_def_id, for_: item_def_id },\n-            kind: box ImplItem(Impl {\n+            kind: Box::new(ImplItem(Impl {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n@@ -124,7 +124,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 negative_polarity,\n                 synthetic: true,\n                 blanket_impl: None,\n-            }),\n+            })),\n             cfg: None,\n         })\n     }"}, {"sha": "ff3641d6c9ab05adcf61bdca2a83228f468ef8d9", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     attrs: Default::default(),\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n-                    kind: box ImplItem(Impl {\n+                    kind: Box::new(ImplItem(Impl {\n                         span: Span::new(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n@@ -118,8 +118,8 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         negative_polarity: false,\n                         synthetic: false,\n-                        blanket_impl: Some(box trait_ref.self_ty().clean(self.cx)),\n-                    }),\n+                        blanket_impl: Some(Box::new(trait_ref.self_ty().clean(self.cx))),\n+                    })),\n                     cfg: None,\n                 });\n             }"}, {"sha": "fa29b54264948c3554531e3473fa5f5baa442ccd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -124,8 +124,14 @@ crate fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    let mut item =\n-        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n+    let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n+        did,\n+        Some(name),\n+        kind,\n+        Box::new(attrs),\n+        cx,\n+        cfg,\n+    );\n     if let Some(import_def_id) = import_def_id {\n         // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n         item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n@@ -458,7 +464,7 @@ crate fn build_impl(\n             synthetic: false,\n             blanket_impl: None,\n         }),\n-        box merged_attrs,\n+        Box::new(merged_attrs),\n         cx,\n         cfg,\n     ));\n@@ -486,10 +492,10 @@ fn build_module(\n                 let prim_ty = clean::PrimitiveType::from(p);\n                 items.push(clean::Item {\n                     name: None,\n-                    attrs: box clean::Attributes::default(),\n+                    attrs: Box::new(clean::Attributes::default()),\n                     def_id: ItemId::Primitive(prim_ty, did.krate),\n                     visibility: clean::Public,\n-                    kind: box clean::ImportItem(clean::Import::new_simple(\n+                    kind: Box::new(clean::ImportItem(clean::Import::new_simple(\n                         item.ident.name,\n                         clean::ImportSource {\n                             path: clean::Path {\n@@ -506,7 +512,7 @@ fn build_module(\n                             did: None,\n                         },\n                         true,\n-                    )),\n+                    ))),\n                     cfg: None,\n                 });\n             } else if let Some(i) ="}, {"sha": "73b5ef0857d4fcb05fea16a6e3d07d56cf5ebc30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -403,8 +403,8 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n             self_def_id: self_type.def_id(),\n-            self_type: box self_type,\n-            trait_: box trait_,\n+            self_type: Box::new(self_type),\n+            trait_: Box::new(trait_),\n         }\n     }\n }\n@@ -1305,8 +1305,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n                 self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n-                self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path, hir_id),\n+                self_type: Box::new(qself.clean(cx)),\n+                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n             }\n         }\n         hir::QPath::TypeRelative(ref qself, ref segment) => {\n@@ -1320,8 +1320,8 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             Type::QPath {\n                 name: segment.ident.name,\n                 self_def_id: res.opt_def_id(),\n-                self_type: box qself.clean(cx),\n-                trait_: box resolve_type(cx, trait_path, hir_id),\n+                self_type: Box::new(qself.clean(cx)),\n+                trait_: Box::new(resolve_type(cx, trait_path, hir_id)),\n             }\n         }\n         hir::QPath::LangItem(..) => bug!(\"clean: requiring documentation of lang item\"),\n@@ -1334,7 +1334,7 @@ impl Clean<Type> for hir::Ty<'_> {\n \n         match self.kind {\n             TyKind::Never => Never,\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(m.ty.clean(cx))),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n@@ -1346,9 +1346,9 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let elided =\n                     l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n                 let lifetime = if elided { None } else { Some(l.clean(cx)) };\n-                BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n+                BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(m.ty.clean(cx)) }\n             }\n-            TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n+            TyKind::Slice(ref ty) => Slice(Box::new(ty.clean(cx))),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n                 // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n@@ -1361,7 +1361,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let length = print_const(cx, ct.eval(cx.tcx, param_env));\n-                Array(box ty.clean(cx), length)\n+                Array(Box::new(ty.clean(cx)), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n             TyKind::OpaqueDef(item_id, _) => {\n@@ -1378,7 +1378,7 @@ impl Clean<Type> for hir::Ty<'_> {\n                 let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n                 DynTrait(bounds, lifetime)\n             }\n-            TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n+            TyKind::BareFn(ref barefn) => BareFunction(Box::new(barefn.clean(cx))),\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n         }\n@@ -1428,27 +1428,29 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n             ty::Float(float_ty) => Primitive(float_ty.into()),\n             ty::Str => Primitive(PrimitiveType::Str),\n-            ty::Slice(ty) => Slice(box ty.clean(cx)),\n+            ty::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n             ty::Array(ty, n) => {\n                 let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n                 n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n                 let n = print_const(cx, n);\n-                Array(box ty.clean(cx), n)\n-            }\n-            ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n-            ty::Ref(r, ty, mutbl) => {\n-                BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: box ty.clean(cx) }\n+                Array(Box::new(ty.clean(cx)), n)\n             }\n+            ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(mt.ty.clean(cx))),\n+            ty::Ref(r, ty, mutbl) => BorrowedRef {\n+                lifetime: r.clean(cx),\n+                mutability: mutbl,\n+                type_: Box::new(ty.clean(cx)),\n+            },\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n                 let def_id = DefId::local(CRATE_DEF_INDEX);\n-                BareFunction(box BareFunctionDecl {\n+                BareFunction(Box::new(BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n                     decl: (def_id, sig).clean(cx),\n                     abi: sig.abi(),\n-                })\n+                }))\n             }\n             ty::Adt(def, substs) => {\n                 let did = def.did;\n@@ -1988,10 +1990,10 @@ fn clean_extern_crate(\n     // FIXME: using `from_def_id_and_kind` breaks `rustdoc/masked` for some reason\n     vec![Item {\n         name: Some(name),\n-        attrs: box attrs.clean(cx),\n+        attrs: Box::new(attrs.clean(cx)),\n         def_id: crate_def_id.into(),\n         visibility: krate.vis.clean(cx),\n-        kind: box ExternCrateItem { src: orig_name },\n+        kind: Box::new(ExternCrateItem { src: orig_name }),\n         cfg: attrs.cfg(cx.sess()),\n     }]\n }"}, {"sha": "782ff8df17b581583276be828752b19bef3c6115", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -416,7 +416,7 @@ impl Item {\n             def_id,\n             name,\n             kind,\n-            box ast_attrs.clean(cx),\n+            Box::new(ast_attrs.clean(cx)),\n             cx,\n             ast_attrs.cfg(cx.sess()),\n         )\n@@ -434,7 +434,7 @@ impl Item {\n \n         Item {\n             def_id: def_id.into(),\n-            kind: box kind,\n+            kind: Box::new(kind),\n             name,\n             attrs,\n             visibility: cx.tcx.visibility(def_id).clean(cx),"}, {"sha": "512c4ed2d3cd6ff934009e26fa8f8b8b75fbfbe3", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -265,7 +265,7 @@ crate fn create_config(\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: Some(|_sess, providers, _external_providers| {\n             // Most lints will require typechecking, so just don't run them.\n             providers.lint_mod = |_, _| {};"}, {"sha": "083d82cb414d85fca06758a4618e4144e8fbeb3d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -99,7 +99,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         stderr: None,\n         lint_caps,\n         parse_sess_created: None,\n-        register_lints: Some(box crate::lint::register_lints),\n+        register_lints: Some(Box::new(crate::lint::register_lints)),\n         override_queries: None,\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n@@ -549,10 +549,10 @@ crate fn make_test(\n                     .supports_color();\n \n             let emitter =\n-                EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+                EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n \n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n-            let handler = Handler::with_emitter(false, None, box emitter);\n+            let handler = Handler::with_emitter(false, None, Box::new(emitter));\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n@@ -962,7 +962,7 @@ impl Tester for Collector {\n                 no_run,\n                 test_type: test::TestType::DocTest,\n             },\n-            testfn: test::DynTestFn(box move || {\n+            testfn: test::DynTestFn(Box::new(move || {\n                 let report_unused_externs = |uext| {\n                     unused_externs.lock().unwrap().push(uext);\n                 };\n@@ -1042,9 +1042,9 @@ impl Tester for Collector {\n                         }\n                     }\n \n-                    panic::resume_unwind(box ());\n+                    panic::resume_unwind(Box::new(()));\n                 }\n-            }),\n+            })),\n         });\n     }\n "}, {"sha": "45aae71d2dc574e97d74200dae541747260458ee", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -2,7 +2,7 @@ use crate::clean::*;\n \n crate fn strip_item(mut item: Item) -> Item {\n     if !matches!(*item.kind, StrippedItem(..)) {\n-        item.kind = box StrippedItem(item.kind);\n+        item.kind = Box::new(StrippedItem(item.kind));\n     }\n     item\n }\n@@ -65,10 +65,10 @@ crate trait DocFolder: Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, mut item: Item) -> Item {\n-        item.kind = box match *item.kind {\n-            StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),\n+        item.kind = Box::new(match *item.kind {\n+            StrippedItem(box i) => StrippedItem(Box::new(self.fold_inner_recur(i))),\n             _ => self.fold_inner_recur(*item.kind),\n-        };\n+        });\n         item\n     }\n "}, {"sha": "e02d92b11b84472d74f92a653f6d0411283d968d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -5,7 +5,6 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(test)]"}, {"sha": "807872ae4fde361d722187706e2a8449845ec34d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -61,7 +61,7 @@ enum ErrorKind<'a> {\n \n impl<'a> From<ResolutionFailure<'a>> for ErrorKind<'a> {\n     fn from(err: ResolutionFailure<'a>) -> Self {\n-        ErrorKind::Resolve(box err)\n+        ErrorKind::Resolve(Box::new(err))\n     }\n }\n "}, {"sha": "6f12d34e66b6eedaefad7da103120a03907e5804", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         // prevent folding of `cfg!` macros and the like\n         if !e.span.from_expansion() {\n             match &e.kind {\n-                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n+                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(Box::new(self.run(inner)?))),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {\n                     BinOpKind::Or => {\n                         return Ok(Bool::Or(self.extract(BinOpKind::Or, &[lhs, rhs], Vec::new())?));"}, {"sha": "cb2b7f5be70addb065d7efb2196ec96290275fd2", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -578,8 +578,8 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n-                let handler = Handler::with_emitter(false, None, box emitter);\n+                let emitter = EmitterWriter::new(Box::new(io::sink()), None, false, false, false, None, false);\n+                let handler = Handler::with_emitter(false, None, Box::new(emitter));\n                 let sess = ParseSess::with_span_handler(handler, sm);\n \n                 let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code) {"}, {"sha": "19719502870bd0df3f2fe2fc70fbe7b3c45660e7", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 244, "deletions": 245, "changes": 489, "blob_url": "https://github.com/rust-lang/rust/blob/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f081832b43db75073db2d8faecc84cf0ea7e271/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=0f081832b43db75073db2d8faecc84cf0ea7e271", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_patterns)]\n-#![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n@@ -393,9 +392,9 @@ use crate::utils::conf::TryConf;\n /// Used in `./src/driver.rs`.\n pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore) {\n     // NOTE: Do not add any more pre-expansion passes. These should be removed eventually.\n-    store.register_pre_expansion_pass(|| box write::Write::default());\n-    store.register_pre_expansion_pass(|| box attrs::EarlyAttributes);\n-    store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n+    store.register_pre_expansion_pass(|| Box::new(write::Write::default()));\n+    store.register_pre_expansion_pass(|| Box::new(attrs::EarlyAttributes));\n+    store.register_pre_expansion_pass(|| Box::new(dbg_macro::DbgMacro));\n }\n \n #[doc(hidden)]\n@@ -1810,65 +1809,65 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     #[cfg(feature = \"metadata-collector-lint\")]\n     {\n         if std::env::var(\"ENABLE_METADATA_COLLECTION\").eq(&Ok(\"1\".to_string())) {\n-            store.register_late_pass(|| box utils::internal_lints::metadata_collector::MetadataCollector::new());\n+            store.register_late_pass(|| Box::new(utils::internal_lints::metadata_collector::MetadataCollector::new()));\n             return;\n         }\n     }\n \n     // all the internal lints\n     #[cfg(feature = \"internal-lints\")]\n     {\n-        store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n-        store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n-        store.register_late_pass(|| box utils::inspector::DeepCodeInspector);\n-        store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n-        store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n-        store.register_late_pass(|| box utils::internal_lints::IfChainStyle);\n-        store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n-        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n-        store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n-        store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n-        store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n+        store.register_early_pass(|| Box::new(utils::internal_lints::ClippyLintsInternal));\n+        store.register_early_pass(|| Box::new(utils::internal_lints::ProduceIce));\n+        store.register_late_pass(|| Box::new(utils::inspector::DeepCodeInspector));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::CollapsibleCalls));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::IfChainStyle));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::InvalidPaths));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n+        store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n     }\n \n-    store.register_late_pass(|| box utils::author::Author);\n-    store.register_late_pass(|| box await_holding_invalid::AwaitHolding);\n-    store.register_late_pass(|| box serde_api::SerdeApi);\n+    store.register_late_pass(|| Box::new(utils::author::Author));\n+    store.register_late_pass(|| Box::new(await_holding_invalid::AwaitHolding));\n+    store.register_late_pass(|| Box::new(serde_api::SerdeApi));\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n-    store.register_late_pass(|| box booleans::NonminimalBool);\n-    store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n-    store.register_late_pass(|| box eq_op::EqOp);\n-    store.register_late_pass(|| box enum_clike::UnportableVariant);\n-    store.register_late_pass(|| box float_literal::FloatLiteral);\n+    store.register_late_pass(move || Box::new(types::Types::new(vec_box_size_threshold, type_complexity_threshold)));\n+    store.register_late_pass(|| Box::new(booleans::NonminimalBool));\n+    store.register_late_pass(|| Box::new(needless_bitwise_bool::NeedlessBitwiseBool));\n+    store.register_late_pass(|| Box::new(eq_op::EqOp));\n+    store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n+    store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n-    store.register_late_pass(|| box ptr::Ptr);\n-    store.register_late_pass(|| box ptr_eq::PtrEq);\n-    store.register_late_pass(|| box needless_bool::NeedlessBool);\n-    store.register_late_pass(|| box needless_bool::BoolComparison);\n-    store.register_late_pass(|| box needless_for_each::NeedlessForEach);\n-    store.register_late_pass(|| box approx_const::ApproxConstant);\n-    store.register_late_pass(|| box misc::MiscLints);\n-    store.register_late_pass(|| box eta_reduction::EtaReduction);\n-    store.register_late_pass(|| box identity_op::IdentityOp);\n-    store.register_late_pass(|| box erasing_op::ErasingOp);\n-    store.register_late_pass(|| box mut_mut::MutMut);\n-    store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n-    store.register_late_pass(|| box len_zero::LenZero);\n-    store.register_late_pass(|| box attrs::Attributes);\n-    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n-    store.register_late_pass(|| box collapsible_match::CollapsibleMatch);\n-    store.register_late_pass(|| box unicode::Unicode);\n-    store.register_late_pass(|| box unit_return_expecting_ord::UnitReturnExpectingOrd);\n-    store.register_late_pass(|| box strings::StringAdd);\n-    store.register_late_pass(|| box implicit_return::ImplicitReturn);\n-    store.register_late_pass(|| box implicit_saturating_sub::ImplicitSaturatingSub);\n-    store.register_late_pass(|| box default_numeric_fallback::DefaultNumericFallback);\n-    store.register_late_pass(|| box inconsistent_struct_constructor::InconsistentStructConstructor);\n-    store.register_late_pass(|| box non_octal_unix_permissions::NonOctalUnixPermissions);\n-    store.register_early_pass(|| box unnecessary_self_imports::UnnecessarySelfImports);\n+    store.register_late_pass(move || Box::new(bit_mask::BitMask::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|| Box::new(ptr::Ptr));\n+    store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n+    store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n+    store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n+    store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n+    store.register_late_pass(|| Box::new(approx_const::ApproxConstant));\n+    store.register_late_pass(|| Box::new(misc::MiscLints));\n+    store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n+    store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n+    store.register_late_pass(|| Box::new(erasing_op::ErasingOp));\n+    store.register_late_pass(|| Box::new(mut_mut::MutMut));\n+    store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|| Box::new(len_zero::LenZero));\n+    store.register_late_pass(|| Box::new(attrs::Attributes));\n+    store.register_late_pass(|| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n+    store.register_late_pass(|| Box::new(collapsible_match::CollapsibleMatch));\n+    store.register_late_pass(|| Box::new(unicode::Unicode));\n+    store.register_late_pass(|| Box::new(unit_return_expecting_ord::UnitReturnExpectingOrd));\n+    store.register_late_pass(|| Box::new(strings::StringAdd));\n+    store.register_late_pass(|| Box::new(implicit_return::ImplicitReturn));\n+    store.register_late_pass(|| Box::new(implicit_saturating_sub::ImplicitSaturatingSub));\n+    store.register_late_pass(|| Box::new(default_numeric_fallback::DefaultNumericFallback));\n+    store.register_late_pass(|| Box::new(inconsistent_struct_constructor::InconsistentStructConstructor));\n+    store.register_late_pass(|| Box::new(non_octal_unix_permissions::NonOctalUnixPermissions));\n+    store.register_early_pass(|| Box::new(unnecessary_self_imports::UnnecessarySelfImports));\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n@@ -1878,231 +1877,231 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n \n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n-    store.register_late_pass(move || box methods::Methods::new(avoid_breaking_exported_api, msrv));\n-    store.register_late_pass(move || box matches::Matches::new(msrv));\n-    store.register_early_pass(move || box manual_non_exhaustive::ManualNonExhaustive::new(msrv));\n-    store.register_late_pass(move || box manual_strip::ManualStrip::new(msrv));\n-    store.register_early_pass(move || box redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv));\n-    store.register_early_pass(move || box redundant_field_names::RedundantFieldNames::new(msrv));\n-    store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n-    store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n-    store.register_late_pass(move || box ranges::Ranges::new(msrv));\n-    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n-    store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n-    store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n-    store.register_late_pass(move || box needless_question_mark::NeedlessQuestionMark);\n-    store.register_late_pass(move || box casts::Casts::new(msrv));\n-    store.register_early_pass(move || box unnested_or_patterns::UnnestedOrPatterns::new(msrv));\n+    store.register_late_pass(move || Box::new(methods::Methods::new(avoid_breaking_exported_api, msrv)));\n+    store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n+    store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustive::new(msrv)));\n+    store.register_late_pass(move || Box::new(manual_strip::ManualStrip::new(msrv)));\n+    store.register_early_pass(move || Box::new(redundant_static_lifetimes::RedundantStaticLifetimes::new(msrv)));\n+    store.register_early_pass(move || Box::new(redundant_field_names::RedundantFieldNames::new(msrv)));\n+    store.register_late_pass(move || Box::new(checked_conversions::CheckedConversions::new(msrv)));\n+    store.register_late_pass(move || Box::new(mem_replace::MemReplace::new(msrv)));\n+    store.register_late_pass(move || Box::new(ranges::Ranges::new(msrv)));\n+    store.register_late_pass(move || Box::new(from_over_into::FromOverInto::new(msrv)));\n+    store.register_late_pass(move || Box::new(use_self::UseSelf::new(msrv)));\n+    store.register_late_pass(move || Box::new(missing_const_for_fn::MissingConstForFn::new(msrv)));\n+    store.register_late_pass(move || Box::new(needless_question_mark::NeedlessQuestionMark));\n+    store.register_late_pass(move || Box::new(casts::Casts::new(msrv)));\n+    store.register_early_pass(move || Box::new(unnested_or_patterns::UnnestedOrPatterns::new(msrv)));\n \n-    store.register_late_pass(|| box size_of_in_element_count::SizeOfInElementCount);\n-    store.register_late_pass(|| box map_clone::MapClone);\n-    store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n-    store.register_late_pass(|| box shadow::Shadow);\n-    store.register_late_pass(|| box unit_types::UnitTypes);\n-    store.register_late_pass(|| box loops::Loops);\n-    store.register_late_pass(|| box main_recursion::MainRecursion::default());\n-    store.register_late_pass(|| box lifetimes::Lifetimes);\n-    store.register_late_pass(|| box entry::HashMapPass);\n-    store.register_late_pass(|| box minmax::MinMaxPass);\n-    store.register_late_pass(|| box open_options::OpenOptions);\n-    store.register_late_pass(|| box zero_div_zero::ZeroDiv);\n-    store.register_late_pass(|| box mutex_atomic::Mutex);\n-    store.register_late_pass(|| box needless_update::NeedlessUpdate);\n-    store.register_late_pass(|| box needless_borrow::NeedlessBorrow::default());\n-    store.register_late_pass(|| box needless_borrowed_ref::NeedlessBorrowedRef);\n-    store.register_late_pass(|| box no_effect::NoEffect);\n-    store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n-    store.register_late_pass(|| box transmute::Transmute);\n+    store.register_late_pass(|| Box::new(size_of_in_element_count::SizeOfInElementCount));\n+    store.register_late_pass(|| Box::new(map_clone::MapClone));\n+    store.register_late_pass(|| Box::new(map_err_ignore::MapErrIgnore));\n+    store.register_late_pass(|| Box::new(shadow::Shadow));\n+    store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n+    store.register_late_pass(|| Box::new(loops::Loops));\n+    store.register_late_pass(|| Box::new(main_recursion::MainRecursion::default()));\n+    store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n+    store.register_late_pass(|| Box::new(entry::HashMapPass));\n+    store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n+    store.register_late_pass(|| Box::new(open_options::OpenOptions));\n+    store.register_late_pass(|| Box::new(zero_div_zero::ZeroDiv));\n+    store.register_late_pass(|| Box::new(mutex_atomic::Mutex));\n+    store.register_late_pass(|| Box::new(needless_update::NeedlessUpdate));\n+    store.register_late_pass(|| Box::new(needless_borrow::NeedlessBorrow::default()));\n+    store.register_late_pass(|| Box::new(needless_borrowed_ref::NeedlessBorrowedRef));\n+    store.register_late_pass(|| Box::new(no_effect::NoEffect));\n+    store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n+    store.register_late_pass(|| Box::new(transmute::Transmute));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n+    store.register_late_pass(move || Box::new(cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold)));\n     let too_large_for_stack = conf.too_large_for_stack;\n-    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n-    store.register_late_pass(move || box vec::UselessVec{too_large_for_stack});\n-    store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n-    store.register_late_pass(|| box strings::StringLitAsBytes);\n-    store.register_late_pass(|| box derive::Derive);\n-    store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n-    store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n-    store.register_late_pass(|| box empty_enum::EmptyEnum);\n-    store.register_late_pass(|| box absurd_extreme_comparisons::AbsurdExtremeComparisons);\n-    store.register_late_pass(|| box invalid_upcast_comparisons::InvalidUpcastComparisons);\n-    store.register_late_pass(|| box regex::Regex::default());\n-    store.register_late_pass(|| box copies::CopyAndPaste);\n-    store.register_late_pass(|| box copy_iterator::CopyIterator);\n-    store.register_late_pass(|| box format::UselessFormat);\n-    store.register_late_pass(|| box swap::Swap);\n-    store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n-    store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n+    store.register_late_pass(move || Box::new(escape::BoxedLocal{too_large_for_stack}));\n+    store.register_late_pass(move || Box::new(vec::UselessVec{too_large_for_stack}));\n+    store.register_late_pass(|| Box::new(panic_unimplemented::PanicUnimplemented));\n+    store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n+    store.register_late_pass(|| Box::new(derive::Derive));\n+    store.register_late_pass(|| Box::new(get_last_with_len::GetLastWithLen));\n+    store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n+    store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n+    store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));\n+    store.register_late_pass(|| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));\n+    store.register_late_pass(|| Box::new(regex::Regex::default()));\n+    store.register_late_pass(|| Box::new(copies::CopyAndPaste));\n+    store.register_late_pass(|| Box::new(copy_iterator::CopyIterator));\n+    store.register_late_pass(|| Box::new(format::UselessFormat));\n+    store.register_late_pass(|| Box::new(swap::Swap));\n+    store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n+    store.register_late_pass(|| Box::new(new_without_default::NewWithoutDefault::default()));\n     let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n+    store.register_late_pass(move || Box::new(blacklisted_name::BlacklistedName::new(blacklisted_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n     let too_many_lines_threshold = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold));\n+    store.register_late_pass(move || Box::new(functions::Functions::new(too_many_arguments_threshold, too_many_lines_threshold)));\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n-    store.register_late_pass(|| box neg_multiply::NegMultiply);\n-    store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n-    store.register_late_pass(|| box mem_forget::MemForget);\n-    store.register_late_pass(|| box arithmetic::Arithmetic::default());\n-    store.register_late_pass(|| box assign_ops::AssignOps);\n-    store.register_late_pass(|| box let_if_seq::LetIfSeq);\n-    store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n-    store.register_late_pass(|| box missing_doc::MissingDoc::new());\n-    store.register_late_pass(|| box missing_inline::MissingInline);\n-    store.register_late_pass(move || box exhaustive_items::ExhaustiveItems);\n-    store.register_late_pass(|| box if_let_some_result::OkIfLet);\n-    store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n-    store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n+    store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n+    store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n+    store.register_late_pass(|| Box::new(mem_discriminant::MemDiscriminant));\n+    store.register_late_pass(|| Box::new(mem_forget::MemForget));\n+    store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n+    store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n+    store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n+    store.register_late_pass(|| Box::new(eval_order_dependence::EvalOrderDependence));\n+    store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n+    store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n+    store.register_late_pass(|| Box::new(if_let_some_result::OkIfLet));\n+    store.register_late_pass(|| Box::new(partialeq_ne_impl::PartialEqNeImpl));\n+    store.register_late_pass(|| Box::new(unused_io_amount::UnusedIoAmount));\n     let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold));\n-    store.register_late_pass(|| box explicit_write::ExplicitWrite);\n-    store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n+    store.register_late_pass(move || Box::new(large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold)));\n+    store.register_late_pass(|| Box::new(explicit_write::ExplicitWrite));\n+    store.register_late_pass(|| Box::new(needless_pass_by_value::NeedlessPassByValue));\n     let pass_by_ref_or_value = pass_by_ref_or_value::PassByRefOrValue::new(\n         conf.trivial_copy_size_limit,\n         conf.pass_by_value_size_limit,\n         conf.avoid_breaking_exported_api,\n         &sess.target,\n     );\n-    store.register_late_pass(move || box pass_by_ref_or_value);\n-    store.register_late_pass(|| box ref_option_ref::RefOptionRef);\n-    store.register_late_pass(|| box try_err::TryErr);\n-    store.register_late_pass(|| box bytecount::ByteCount);\n-    store.register_late_pass(|| box infinite_iter::InfiniteIter);\n-    store.register_late_pass(|| box inline_fn_without_body::InlineFnWithoutBody);\n-    store.register_late_pass(|| box useless_conversion::UselessConversion::default());\n-    store.register_late_pass(|| box implicit_hasher::ImplicitHasher);\n-    store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box double_comparison::DoubleComparisons);\n-    store.register_late_pass(|| box question_mark::QuestionMark);\n-    store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n-    store.register_late_pass(|| box suspicious_trait_impl::SuspiciousImpl);\n-    store.register_late_pass(|| box map_unit_fn::MapUnit);\n-    store.register_late_pass(|| box inherent_impl::MultipleInherentImpl);\n-    store.register_late_pass(|| box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n-    store.register_late_pass(|| box unwrap::Unwrap);\n-    store.register_late_pass(|| box duration_subsec::DurationSubsec);\n-    store.register_late_pass(|| box indexing_slicing::IndexingSlicing);\n-    store.register_late_pass(|| box non_copy_const::NonCopyConst);\n-    store.register_late_pass(|| box ptr_offset_with_cast::PtrOffsetWithCast);\n-    store.register_late_pass(|| box redundant_clone::RedundantClone);\n-    store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n-    store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n-    store.register_late_pass(move || box unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api));\n-    store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n-    store.register_late_pass(|| box transmuting_null::TransmutingNull);\n-    store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);\n-    store.register_late_pass(|| box integer_division::IntegerDivision);\n-    store.register_late_pass(|| box inherent_to_string::InherentToString);\n+    store.register_late_pass(move || Box::new(pass_by_ref_or_value));\n+    store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n+    store.register_late_pass(|| Box::new(try_err::TryErr));\n+    store.register_late_pass(|| Box::new(bytecount::ByteCount));\n+    store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n+    store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n+    store.register_late_pass(|| Box::new(useless_conversion::UselessConversion::default()));\n+    store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n+    store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n+    store.register_late_pass(|| Box::new(double_comparison::DoubleComparisons));\n+    store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n+    store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n+    store.register_late_pass(|| Box::new(suspicious_trait_impl::SuspiciousImpl));\n+    store.register_late_pass(|| Box::new(map_unit_fn::MapUnit));\n+    store.register_late_pass(|| Box::new(inherent_impl::MultipleInherentImpl));\n+    store.register_late_pass(|| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n+    store.register_late_pass(|| Box::new(unwrap::Unwrap));\n+    store.register_late_pass(|| Box::new(duration_subsec::DurationSubsec));\n+    store.register_late_pass(|| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(|| Box::new(non_copy_const::NonCopyConst));\n+    store.register_late_pass(|| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n+    store.register_late_pass(|| Box::new(redundant_clone::RedundantClone));\n+    store.register_late_pass(|| Box::new(slow_vector_initialization::SlowVectorInit));\n+    store.register_late_pass(|| Box::new(unnecessary_sort_by::UnnecessarySortBy));\n+    store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n+    store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n+    store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n+    store.register_late_pass(|| Box::new(integer_division::IntegerDivision));\n+    store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n-    store.register_late_pass(move || box trait_bounds::TraitBounds::new(max_trait_bounds));\n-    store.register_late_pass(|| box comparison_chain::ComparisonChain);\n-    store.register_late_pass(|| box mut_key::MutableKeyType);\n-    store.register_late_pass(|| box modulo_arithmetic::ModuloArithmetic);\n-    store.register_early_pass(|| box reference::DerefAddrOf);\n-    store.register_early_pass(|| box reference::RefInDeref);\n-    store.register_early_pass(|| box double_parens::DoubleParens);\n-    store.register_late_pass(|| box to_string_in_display::ToStringInDisplay::new());\n-    store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n-    store.register_early_pass(|| box if_not_else::IfNotElse);\n-    store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n-    store.register_early_pass(|| box int_plus_one::IntPlusOne);\n-    store.register_early_pass(|| box formatting::Formatting);\n-    store.register_early_pass(|| box misc_early::MiscEarlyLints);\n-    store.register_early_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_late_pass(|| box redundant_closure_call::RedundantClosureCall);\n-    store.register_early_pass(|| box unused_unit::UnusedUnit);\n-    store.register_late_pass(|| box returns::Return);\n-    store.register_early_pass(|| box collapsible_if::CollapsibleIf);\n-    store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n-    store.register_early_pass(|| box precedence::Precedence);\n-    store.register_early_pass(|| box needless_continue::NeedlessContinue);\n-    store.register_early_pass(|| box redundant_else::RedundantElse);\n-    store.register_late_pass(|| box create_dir::CreateDir);\n-    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n+    store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n+    store.register_late_pass(|| Box::new(comparison_chain::ComparisonChain));\n+    store.register_late_pass(|| Box::new(mut_key::MutableKeyType));\n+    store.register_late_pass(|| Box::new(modulo_arithmetic::ModuloArithmetic));\n+    store.register_early_pass(|| Box::new(reference::DerefAddrOf));\n+    store.register_early_pass(|| Box::new(reference::RefInDeref));\n+    store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n+    store.register_late_pass(|| Box::new(to_string_in_display::ToStringInDisplay::new()));\n+    store.register_early_pass(|| Box::new(unsafe_removed_from_name::UnsafeNameRemoval));\n+    store.register_early_pass(|| Box::new(if_not_else::IfNotElse));\n+    store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n+    store.register_early_pass(|| Box::new(int_plus_one::IntPlusOne));\n+    store.register_early_pass(|| Box::new(formatting::Formatting));\n+    store.register_early_pass(|| Box::new(misc_early::MiscEarlyLints));\n+    store.register_early_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_late_pass(|| Box::new(redundant_closure_call::RedundantClosureCall));\n+    store.register_early_pass(|| Box::new(unused_unit::UnusedUnit));\n+    store.register_late_pass(|| Box::new(returns::Return));\n+    store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n+    store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n+    store.register_early_pass(|| Box::new(precedence::Precedence));\n+    store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));\n+    store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n+    store.register_late_pass(|| Box::new(create_dir::CreateDir));\n+    store.register_early_pass(|| Box::new(needless_arbitrary_self_type::NeedlessArbitrarySelfType));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || box cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish));\n-    store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n-    store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n+    store.register_late_pass(move || Box::new(cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish)));\n+    store.register_late_pass(|| Box::new(multiple_crate_versions::MultipleCrateVersions));\n+    store.register_late_pass(|| Box::new(wildcard_dependencies::WildcardDependencies));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n-    store.register_early_pass(move || box literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability));\n+    store.register_early_pass(move || Box::new(literal_representation::LiteralDigitGrouping::new(literal_representation_lint_fraction_readability)));\n     let literal_representation_threshold = conf.literal_representation_threshold;\n-    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n+    store.register_early_pass(move || Box::new(literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold)));\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n-    store.register_late_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api));\n-    store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n+    store.register_late_pass(move || Box::new(enum_variants::EnumVariantNames::new(enum_variant_name_threshold, avoid_breaking_exported_api)));\n+    store.register_early_pass(|| Box::new(tabs_in_doc_comments::TabsInDocComments));\n     let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n-    store.register_late_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive));\n-    store.register_late_pass(|| box default::Default::default());\n-    store.register_late_pass(|| box unused_self::UnusedSelf);\n-    store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n-    store.register_late_pass(|| box exit::Exit);\n-    store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n+    store.register_late_pass(move || Box::new(upper_case_acronyms::UpperCaseAcronyms::new(avoid_breaking_exported_api, upper_case_acronyms_aggressive)));\n+    store.register_late_pass(|| Box::new(default::Default::default()));\n+    store.register_late_pass(|| Box::new(unused_self::UnusedSelf));\n+    store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n+    store.register_late_pass(|| Box::new(exit::Exit));\n+    store.register_late_pass(|| Box::new(to_digit_is_some::ToDigitIsSome));\n     let array_size_threshold = conf.array_size_threshold;\n-    store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n-    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n-    store.register_late_pass(|| box floating_point_arithmetic::FloatingPointArithmetic);\n-    store.register_early_pass(|| box as_conversions::AsConversions);\n-    store.register_late_pass(|| box let_underscore::LetUnderscore);\n-    store.register_early_pass(|| box single_component_path_imports::SingleComponentPathImports);\n+    store.register_late_pass(move || Box::new(large_stack_arrays::LargeStackArrays::new(array_size_threshold)));\n+    store.register_late_pass(move || Box::new(large_const_arrays::LargeConstArrays::new(array_size_threshold)));\n+    store.register_late_pass(|| Box::new(floating_point_arithmetic::FloatingPointArithmetic));\n+    store.register_early_pass(|| Box::new(as_conversions::AsConversions));\n+    store.register_late_pass(|| Box::new(let_underscore::LetUnderscore));\n+    store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n-    store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n-    store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n+    store.register_early_pass(move || Box::new(excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools)));\n+    store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n-    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n-    store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n-    store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n-    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n-    store.register_late_pass(|| box dereference::Dereferencing::default());\n-    store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n-    store.register_late_pass(|| box future_not_send::FutureNotSend);\n-    store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n-    store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n-    store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n-    store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n-    store.register_late_pass(|| box vec_resize_to_zero::VecResizeToZero);\n-    store.register_late_pass(|| box panic_in_result_fn::PanicInResultFn);\n+    store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n+    store.register_late_pass(|| Box::new(verbose_file_reads::VerboseFileReads));\n+    store.register_late_pass(|| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n+    store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n+    store.register_late_pass(|| Box::new(dereference::Dereferencing::default()));\n+    store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n+    store.register_late_pass(|| Box::new(future_not_send::FutureNotSend));\n+    store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n+    store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n+    store.register_late_pass(|| Box::new(match_on_vec_items::MatchOnVecItems));\n+    store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n+    store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n+    store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));\n     let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n-    store.register_early_pass(move || box non_expressive_names::NonExpressiveNames {\n+    store.register_early_pass(move || Box::new(non_expressive_names::NonExpressiveNames {\n         single_char_binding_names_threshold,\n-    });\n+    }));\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_early_pass(move || box nonstandard_macro_braces::MacroBraces::new(&macro_matcher));\n-    store.register_late_pass(|| box macro_use::MacroUseImports::default());\n-    store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n-    store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n-    store.register_late_pass(|| box repeat_once::RepeatOnce);\n-    store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n-    store.register_late_pass(|| box self_assignment::SelfAssignment);\n-    store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n-    store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n-    store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n-    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n-    store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n+    store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n+    store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n+    store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n+    store.register_late_pass(|| Box::new(stable_sort_primitive::StableSortPrimitive));\n+    store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n+    store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n+    store.register_late_pass(|| Box::new(self_assignment::SelfAssignment));\n+    store.register_late_pass(|| Box::new(manual_unwrap_or::ManualUnwrapOr));\n+    store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n+    store.register_late_pass(|| Box::new(float_equality_without_abs::FloatEqualityWithoutAbs));\n+    store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n+    store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n-    store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n-    store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n-    store.register_late_pass(|| box strings::StrToString);\n-    store.register_late_pass(|| box strings::StringToString);\n-    store.register_late_pass(|| box zero_sized_map_values::ZeroSizedMapValues);\n-    store.register_late_pass(|| box vec_init_then_push::VecInitThenPush::default());\n-    store.register_late_pass(|| box case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons);\n-    store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n-    store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n-    store.register_late_pass(|| box manual_map::ManualMap);\n-    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n-    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n-    store.register_late_pass(|| box unused_async::UnusedAsync);\n+    store.register_late_pass(move || Box::new(disallowed_method::DisallowedMethod::new(&disallowed_methods)));\n+    store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86AttSyntax));\n+    store.register_early_pass(|| Box::new(asm_syntax::InlineAsmX86IntelSyntax));\n+    store.register_late_pass(|| Box::new(undropped_manually_drops::UndroppedManuallyDrops));\n+    store.register_late_pass(|| Box::new(strings::StrToString));\n+    store.register_late_pass(|| Box::new(strings::StringToString));\n+    store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n+    store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n+    store.register_late_pass(|| Box::new(case_sensitive_file_extension_comparisons::CaseSensitiveFileExtensionComparisons));\n+    store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n+    store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n+    store.register_late_pass(|| Box::new(manual_map::ManualMap));\n+    store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n+    store.register_early_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n+    store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n     let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box disallowed_type::DisallowedType::new(&disallowed_types));\n+    store.register_late_pass(move || Box::new(disallowed_type::DisallowedType::new(&disallowed_types)));\n     let import_renames = conf.enforced_import_renames.clone();\n-    store.register_late_pass(move || box missing_enforced_import_rename::ImportRename::new(import_renames.clone()));\n+    store.register_late_pass(move || Box::new(missing_enforced_import_rename::ImportRename::new(import_renames.clone())));\n     let scripts = conf.allowed_scripts.clone();\n-    store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n-    store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n-    store.register_late_pass(move || box self_named_constructors::SelfNamedConstructors);\n+    store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n+    store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n+    store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n }\n \n #[rustfmt::skip]"}]}