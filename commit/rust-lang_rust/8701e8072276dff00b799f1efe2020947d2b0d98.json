{"sha": "8701e8072276dff00b799f1efe2020947d2b0d98", "node_id": "C_kwDOAAsO6NoAKDg3MDFlODA3MjI3NmRmZjAwYjc5OWYxZWZlMjAyMDk0N2QyYjBkOTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-13T10:34:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-13T10:34:59Z"}, "message": "Rollup merge of #107986 - lcnr:layout-placeholder, r=petrochenkov\n\nlayout: deal with placeholders, ICE on bound types\n\nA placeholder type is the same as a param as they represent \"this could be any type\". A bound type represents a type inside of a `for<T>` or `exists<T>`. When entering a forall or exists `T` should be instantiated as a existential (inference var) or universal (placeholder). You should never observe a bound variable without its binder.", "tree": {"sha": "874ec703f68d311e09a07198a1417593163f15fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/874ec703f68d311e09a07198a1417593163f15fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8701e8072276dff00b799f1efe2020947d2b0d98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6hJTCRBK7hj4Ov3rIwAAwDcIABI6zoK29BPxYbKiDy4LlUWB\nWNFh9RJNpK0zkPRhIipqZsP8N6zVazZGX/+DVAxPCwubfmqon7o0B9/a48b0qcmk\nsf7FFGHLvB0kOWzcY5J/BpdwhAKra8Xq5Q4NGRSJFscOWe6bVc7s6fSIgwBA2wAp\nYQoOT+0GixHZ95IuUS8knv7uKUpUFgHjLAmR8d0wWHiAS/zEqTMpTNtCOg1DGqKZ\nTf0dC2Ckgj2pxWbAfLYfwhd+Ok4+n7NWNqy6VyUG/1GGNc/LXmdgR+ZiNz4QiyeT\nXQxwXHJPTKoZYNAEtNJQ3RRwtgds4rKxtqK54wp3L93oJhl8Mz46YE1jFPaX74M=\n=VNnf\n-----END PGP SIGNATURE-----\n", "payload": "tree 874ec703f68d311e09a07198a1417593163f15fd\nparent 99d36b137d4f20126239112fe03a43bc17117047\nparent 9e84b00d447b5cb878a6b4e4001a94d4ea3531ca\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676284499 +0100\ncommitter GitHub <noreply@github.com> 1676284499 +0100\n\nRollup merge of #107986 - lcnr:layout-placeholder, r=petrochenkov\n\nlayout: deal with placeholders, ICE on bound types\n\nA placeholder type is the same as a param as they represent \"this could be any type\". A bound type represents a type inside of a `for<T>` or `exists<T>`. When entering a forall or exists `T` should be instantiated as a existential (inference var) or universal (placeholder). You should never observe a bound variable without its binder.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8701e8072276dff00b799f1efe2020947d2b0d98", "html_url": "https://github.com/rust-lang/rust/commit/8701e8072276dff00b799f1efe2020947d2b0d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8701e8072276dff00b799f1efe2020947d2b0d98/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d36b137d4f20126239112fe03a43bc17117047", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d36b137d4f20126239112fe03a43bc17117047", "html_url": "https://github.com/rust-lang/rust/commit/99d36b137d4f20126239112fe03a43bc17117047"}, {"sha": "9e84b00d447b5cb878a6b4e4001a94d4ea3531ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e84b00d447b5cb878a6b4e4001a94d4ea3531ca", "html_url": "https://github.com/rust-lang/rust/commit/9e84b00d447b5cb878a6b4e4001a94d4ea3531ca"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "137289198786ecec502666436f221e8d7631e46a", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8701e8072276dff00b799f1efe2020947d2b0d98/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8701e8072276dff00b799f1efe2020947d2b0d98/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=8701e8072276dff00b799f1efe2020947d2b0d98", "patch": "@@ -470,14 +470,11 @@ fn layout_of_uncached<'tcx>(\n             return Err(LayoutError::Unknown(ty));\n         }\n \n-        ty::Placeholder(..)\n-        | ty::GeneratorWitness(..)\n-        | ty::GeneratorWitnessMIR(..)\n-        | ty::Infer(_) => {\n+        ty::Bound(..) | ty::GeneratorWitness(..) | ty::GeneratorWitnessMIR(..) | ty::Infer(_) => {\n             bug!(\"Layout::compute: unexpected type `{}`\", ty)\n         }\n \n-        ty::Bound(..) | ty::Param(_) | ty::Error(_) => {\n+        ty::Placeholder(..) | ty::Param(_) | ty::Error(_) => {\n             return Err(LayoutError::Unknown(ty));\n         }\n     })"}]}