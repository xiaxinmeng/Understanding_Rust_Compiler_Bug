{"sha": "d34e725f09994af145884464942dd205bfc7717e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNGU3MjVmMDk5OTRhZjE0NTg4NDQ2NDk0MmRkMjA1YmZjNzcxN2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T10:14:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T10:14:16Z"}, "message": "Better factoring", "tree": {"sha": "63a4329bdc93f462c903faf75ba51f212023bcd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a4329bdc93f462c903faf75ba51f212023bcd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d34e725f09994af145884464942dd205bfc7717e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d34e725f09994af145884464942dd205bfc7717e", "html_url": "https://github.com/rust-lang/rust/commit/d34e725f09994af145884464942dd205bfc7717e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d34e725f09994af145884464942dd205bfc7717e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21c84abd40a04eb740f51c47c1a2d62384b3e36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21c84abd40a04eb740f51c47c1a2d62384b3e36", "html_url": "https://github.com/rust-lang/rust/commit/d21c84abd40a04eb740f51c47c1a2d62384b3e36"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "fddf0604d10b73a740e2fd512400e18c20bb2836", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d34e725f09994af145884464942dd205bfc7717e/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34e725f09994af145884464942dd205bfc7717e/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=d34e725f09994af145884464942dd205bfc7717e", "patch": "@@ -8,8 +8,10 @@ use std::{\n use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId, ModuleId};\n use hir_expand::{db::AstDatabase, diagnostics::DiagnosticSink};\n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast};\n-use rustc_hash::FxHashSet;\n+use ra_syntax::TextRange;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n+use test_utils::extract_annotations;\n \n use crate::{\n     db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator,\n@@ -155,17 +157,27 @@ impl TestDB {\n         (buf, count)\n     }\n \n-    pub fn all_files(&self) -> Vec<FileId> {\n-        let mut res = Vec::new();\n+    pub fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+        let mut files = Vec::new();\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n             for (module_id, _) in crate_def_map.modules.iter() {\n                 let file_id = crate_def_map[module_id].origin.file_id();\n-                res.extend(file_id)\n+                files.extend(file_id)\n             }\n         }\n-        res\n+        files\n+            .into_iter()\n+            .filter_map(|file_id| {\n+                let text = self.file_text(file_id);\n+                let annotations = extract_annotations(&text);\n+                if annotations.is_empty() {\n+                    return None;\n+                }\n+                Some((file_id, annotations))\n+            })\n+            .collect()\n     }\n }\n "}, {"sha": "9084c3bed2cd00a77b3a6557bb9425b1fec66843", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d34e725f09994af145884464942dd205bfc7717e/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d34e725f09994af145884464942dd205bfc7717e/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=d34e725f09994af145884464942dd205bfc7717e", "patch": "@@ -28,7 +28,6 @@ use ra_syntax::{\n     SyntaxNode,\n };\n use stdx::format_to;\n-use test_utils::extract_annotations;\n \n use crate::{\n     db::HirDatabase, display::HirDisplay, infer::TypeMismatch, test_db::TestDB, InferenceResult, Ty,\n@@ -49,9 +48,7 @@ fn check_types_source_code(ra_fixture: &str) {\n fn check_types_impl(ra_fixture: &str, display_source: bool) {\n     let db = TestDB::with_files(ra_fixture);\n     let mut checked_one = false;\n-    for file_id in db.all_files() {\n-        let text = db.parse(file_id).syntax_node().to_string();\n-        let annotations = extract_annotations(&text);\n+    for (file_id, annotations) in db.extract_annotations() {\n         for (range, expected) in annotations {\n             let ty = type_at_range(&db, FileRange { file_id, range });\n             let actual = if display_source {"}]}