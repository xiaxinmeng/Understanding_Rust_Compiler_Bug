{"sha": "b0ec43f5692754c06701a534755f346aecc1d122", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZWM0M2Y1NjkyNzU0YzA2NzAxYTUzNDc1NWYzNDZhZWNjMWQxMjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-23T23:19:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-23T23:19:52Z"}, "message": "Rollup merge of #57730 - Zoxc:combined-ast-validator, r=cramertj\n\nMerge visitors in AST validation\n\nCuts runtime for AST validation on `syntex_syntax` from 31.5 ms to 17 ms.", "tree": {"sha": "0e9adf574e838b9793cdb3ab3660666d8438379c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e9adf574e838b9793cdb3ab3660666d8438379c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ec43f5692754c06701a534755f346aecc1d122", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSPaYCRBK7hj4Ov3rIwAAdHIIAEyIJ4vnti7XsKbciRChMJtQ\nhss4WQ5t+1/6+BgBW8V7Q6xIoYiQC1oLaggnVdw0/jkq5G03pKNYnO3XG/SFwIdJ\n8Icj/j6Ez232LC0WWa1Owr9APRNJ9QIu8P6QkMdgdS5VnzRjWY1Vuv/bE6B7zFMZ\nw04pwlDp1RKXf/QgpcDlIZ/aA2bhWzIIIxjKhlRGflNxLpJllD1h87pgy8jlKIfd\nWFd5mdwZsiBIcH5VhtbiFA00I84KnZ8zkT+0YAfrs3+m0ryU4thTBwJTph6ADMp6\nbHqkmfOm1C/We8XhSAmoKerq7X+6XWv007XmiCYJyd+lX5ujpvMsSFcoHcYsRCc=\n=GO+n\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e9adf574e838b9793cdb3ab3660666d8438379c\nparent e7b584cee17c9c3a03eeffe77fa098b09bf6a231\nparent a5d4aeddc8e2ecf1279f2138788777a29fedc3c5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548285592 +0100\ncommitter GitHub <noreply@github.com> 1548285592 +0100\n\nRollup merge of #57730 - Zoxc:combined-ast-validator, r=cramertj\n\nMerge visitors in AST validation\n\nCuts runtime for AST validation on `syntex_syntax` from 31.5 ms to 17 ms.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec43f5692754c06701a534755f346aecc1d122", "html_url": "https://github.com/rust-lang/rust/commit/b0ec43f5692754c06701a534755f346aecc1d122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec43f5692754c06701a534755f346aecc1d122/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b584cee17c9c3a03eeffe77fa098b09bf6a231", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b584cee17c9c3a03eeffe77fa098b09bf6a231", "html_url": "https://github.com/rust-lang/rust/commit/e7b584cee17c9c3a03eeffe77fa098b09bf6a231"}, {"sha": "a5d4aeddc8e2ecf1279f2138788777a29fedc3c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d4aeddc8e2ecf1279f2138788777a29fedc3c5", "html_url": "https://github.com/rust-lang/rust/commit/a5d4aeddc8e2ecf1279f2138788777a29fedc3c5"}], "stats": {"total": 250, "additions": 106, "deletions": 144}, "files": [{"sha": "d1a3d7c1f81e038343f2249c821764b10a7abe59", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 106, "deletions": 144, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/b0ec43f5692754c06701a534755f346aecc1d122/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ec43f5692754c06701a534755f346aecc1d122/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b0ec43f5692754c06701a534755f346aecc1d122", "patch": "@@ -6,6 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use std::mem;\n use rustc::lint;\n use rustc::session::Session;\n use syntax::ast::*;\n@@ -20,9 +21,73 @@ use errors::Applicability;\n \n struct AstValidator<'a> {\n     session: &'a Session,\n+\n+    // Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n+    // Nested `impl Trait` _is_ allowed in associated type position,\n+    // e.g `impl Iterator<Item=impl Debug>`\n+    outer_impl_trait: Option<Span>,\n+\n+    // Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n+    // or `Foo::Bar<impl Trait>`\n+    is_impl_trait_banned: bool,\n }\n \n impl<'a> AstValidator<'a> {\n+    fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.is_impl_trait_banned, true);\n+        f(self);\n+        self.is_impl_trait_banned = old;\n+    }\n+\n+    fn with_impl_trait(&mut self, outer_impl_trait: Option<Span>, f: impl FnOnce(&mut Self)) {\n+        let old = mem::replace(&mut self.outer_impl_trait, outer_impl_trait);\n+        f(self);\n+        self.outer_impl_trait = old;\n+    }\n+\n+    // Mirrors visit::walk_ty, but tracks relevant state\n+    fn walk_ty(&mut self, t: &'a Ty) {\n+        match t.node {\n+            TyKind::ImplTrait(..) => {\n+                self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n+            }\n+            TyKind::Path(ref qself, ref path) => {\n+                // We allow these:\n+                //  - `Option<impl Trait>`\n+                //  - `option::Option<impl Trait>`\n+                //  - `option::Option<T>::Foo<impl Trait>\n+                //\n+                // But not these:\n+                //  - `<impl Trait>::Foo`\n+                //  - `option::Option<impl Trait>::Foo`.\n+                //\n+                // To implement this, we disallow `impl Trait` from `qself`\n+                // (for cases like `<impl Trait>::Foo>`)\n+                // but we allow `impl Trait` in `GenericArgs`\n+                // iff there are no more PathSegments.\n+                if let Some(ref qself) = *qself {\n+                    // `impl Trait` in `qself` is always illegal\n+                    self.with_banned_impl_trait(|this| this.visit_ty(&qself.ty));\n+                }\n+\n+                // Note that there should be a call to visit_path here,\n+                // so if any logic is added to process `Path`s a call to it should be\n+                // added both in visit_path and here. This code mirrors visit::walk_path.\n+                for (i, segment) in path.segments.iter().enumerate() {\n+                    // Allow `impl Trait` iff we're on the final path segment\n+                    if i == path.segments.len() - 1 {\n+                        self.visit_path_segment(path.span, segment);\n+                    } else {\n+                        self.with_banned_impl_trait(|this| {\n+                            this.visit_path_segment(path.span, segment)\n+                        });\n+                    }\n+                }\n+            }\n+            _ => visit::walk_ty(self, t),\n+        }\n+    }\n+\n     fn err_handler(&self) -> &errors::Handler {\n         &self.session.diagnostic()\n     }\n@@ -267,6 +332,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 self.no_questions_in_bounds(bounds, \"trait object types\", false);\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n+                if self.is_impl_trait_banned {\n+                    struct_span_err!(self.session, ty.span, E0667,\n+                        \"`impl Trait` is not allowed in path parameters\").emit();\n+                }\n+\n+                if let Some(outer_impl_trait) = self.outer_impl_trait {\n+                    struct_span_err!(self.session, ty.span, E0666,\n+                                    \"nested `impl Trait` is not allowed\")\n+                        .span_label(outer_impl_trait, \"outer `impl Trait`\")\n+                        .span_label(ty.span, \"nested `impl Trait` here\")\n+                        .emit();\n+\n+                }\n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n@@ -275,7 +353,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             _ => {}\n         }\n \n-        visit::walk_ty(self, ty)\n+        self.walk_ty(ty)\n     }\n \n     fn visit_label(&mut self, label: &'a Label) {\n@@ -414,6 +492,28 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_foreign_item(self, fi)\n     }\n \n+    // Mirrors visit::walk_generic_args, but tracks relevant state\n+    fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n+        match *generic_args {\n+            GenericArgs::AngleBracketed(ref data) => {\n+                walk_list!(self, visit_generic_arg, &data.args);\n+                // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n+                // are allowed to contain nested `impl Trait`.\n+                self.with_impl_trait(None, |this| {\n+                    walk_list!(this, visit_assoc_type_binding, &data.bindings);\n+                });\n+            }\n+            GenericArgs::Parenthesized(ref data) => {\n+                walk_list!(self, visit_ty, &data.inputs);\n+                if let Some(ref type_) = data.output {\n+                    // `-> Foo` syntax is essentially an associated type binding,\n+                    // so it is also allowed to contain nested `impl Trait`.\n+                    self.with_impl_trait(None, |this| visit::walk_ty(this, type_));\n+                }\n+            }\n+        }\n+    }\n+\n     fn visit_generics(&mut self, generics: &'a Generics) {\n         let mut seen_non_lifetime_param = false;\n         let mut seen_default = None;\n@@ -490,148 +590,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-// Bans nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n-// Nested `impl Trait` _is_ allowed in associated type position,\n-// e.g `impl Iterator<Item=impl Debug>`\n-struct NestedImplTraitVisitor<'a> {\n-    session: &'a Session,\n-    outer_impl_trait: Option<Span>,\n-}\n-\n-impl<'a> NestedImplTraitVisitor<'a> {\n-    fn with_impl_trait<F>(&mut self, outer_impl_trait: Option<Span>, f: F)\n-        where F: FnOnce(&mut NestedImplTraitVisitor<'a>)\n-    {\n-        let old_outer_impl_trait = self.outer_impl_trait;\n-        self.outer_impl_trait = outer_impl_trait;\n-        f(self);\n-        self.outer_impl_trait = old_outer_impl_trait;\n-    }\n-}\n-\n-\n-impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n-    fn visit_ty(&mut self, t: &'a Ty) {\n-        if let TyKind::ImplTrait(..) = t.node {\n-            if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                struct_span_err!(self.session, t.span, E0666,\n-                                 \"nested `impl Trait` is not allowed\")\n-                    .span_label(outer_impl_trait, \"outer `impl Trait`\")\n-                    .span_label(t.span, \"nested `impl Trait` here\")\n-                    .emit();\n-\n-            }\n-            self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t));\n-        } else {\n-            visit::walk_ty(self, t);\n-        }\n-    }\n-    fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n-        match *generic_args {\n-            GenericArgs::AngleBracketed(ref data) => {\n-                for arg in &data.args {\n-                    self.visit_generic_arg(arg)\n-                }\n-                for type_binding in &data.bindings {\n-                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n-                    // are allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| visit::walk_ty(this, &type_binding.ty));\n-                }\n-            }\n-            GenericArgs::Parenthesized(ref data) => {\n-                for type_ in &data.inputs {\n-                    self.visit_ty(type_);\n-                }\n-                if let Some(ref type_) = data.output {\n-                    // `-> Foo` syntax is essentially an associated type binding,\n-                    // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| visit::walk_ty(this, type_));\n-                }\n-            }\n-        }\n-    }\n-\n-    fn visit_mac(&mut self, _mac: &Spanned<Mac_>) {\n-        // covered in AstValidator\n-    }\n-}\n-\n-// Bans `impl Trait` in path projections like `<impl Iterator>::Item` or `Foo::Bar<impl Trait>`.\n-struct ImplTraitProjectionVisitor<'a> {\n-    session: &'a Session,\n-    is_banned: bool,\n-}\n-\n-impl<'a> ImplTraitProjectionVisitor<'a> {\n-    fn with_ban<F>(&mut self, f: F)\n-        where F: FnOnce(&mut ImplTraitProjectionVisitor<'a>)\n-    {\n-        let old_is_banned = self.is_banned;\n-        self.is_banned = true;\n-        f(self);\n-        self.is_banned = old_is_banned;\n-    }\n-}\n-\n-impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n-    fn visit_ty(&mut self, t: &'a Ty) {\n-        match t.node {\n-            TyKind::ImplTrait(..) => {\n-                if self.is_banned {\n-                    struct_span_err!(self.session, t.span, E0667,\n-                        \"`impl Trait` is not allowed in path parameters\").emit();\n-                }\n-            }\n-            TyKind::Path(ref qself, ref path) => {\n-                // We allow these:\n-                //  - `Option<impl Trait>`\n-                //  - `option::Option<impl Trait>`\n-                //  - `option::Option<T>::Foo<impl Trait>\n-                //\n-                // But not these:\n-                //  - `<impl Trait>::Foo`\n-                //  - `option::Option<impl Trait>::Foo`.\n-                //\n-                // To implement this, we disallow `impl Trait` from `qself`\n-                // (for cases like `<impl Trait>::Foo>`)\n-                // but we allow `impl Trait` in `GenericArgs`\n-                // iff there are no more PathSegments.\n-                if let Some(ref qself) = *qself {\n-                    // `impl Trait` in `qself` is always illegal\n-                    self.with_ban(|this| this.visit_ty(&qself.ty));\n-                }\n-\n-                for (i, segment) in path.segments.iter().enumerate() {\n-                    // Allow `impl Trait` iff we're on the final path segment\n-                    if i == path.segments.len() - 1 {\n-                        visit::walk_path_segment(self, path.span, segment);\n-                    } else {\n-                        self.with_ban(|this|\n-                            visit::walk_path_segment(this, path.span, segment));\n-                    }\n-                }\n-            }\n-            _ => visit::walk_ty(self, t),\n-        }\n-    }\n-\n-    fn visit_mac(&mut self, _mac: &Spanned<Mac_>) {\n-        // covered in AstValidator\n-    }\n-}\n-\n pub fn check_crate(session: &Session, krate: &Crate) {\n-    visit::walk_crate(\n-        &mut NestedImplTraitVisitor {\n-            session,\n-            outer_impl_trait: None,\n-        }, krate);\n-\n-    visit::walk_crate(\n-        &mut ImplTraitProjectionVisitor {\n-            session,\n-            is_banned: false,\n-        }, krate);\n-\n-    visit::walk_crate(&mut AstValidator { session }, krate)\n+    visit::walk_crate(&mut AstValidator {\n+        session,\n+        outer_impl_trait: None,\n+        is_impl_trait_banned: false,\n+    }, krate)\n }"}]}