{"sha": "cde2a1de3616d2e186555572996eecbd37e597e5", "node_id": "C_kwDOAAsO6NoAKGNkZTJhMWRlMzYxNmQyZTE4NjU1NTU3Mjk5NmVlY2JkMzdlNTk3ZTU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-12T17:39:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-12T17:39:19Z"}, "message": "Add trailing `;` when typing `=` in assignment", "tree": {"sha": "0f8a4f5c3ef12153be578b3e00c3b4ba112c54f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8a4f5c3ef12153be578b3e00c3b4ba112c54f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde2a1de3616d2e186555572996eecbd37e597e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde2a1de3616d2e186555572996eecbd37e597e5", "html_url": "https://github.com/rust-lang/rust/commit/cde2a1de3616d2e186555572996eecbd37e597e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde2a1de3616d2e186555572996eecbd37e597e5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce2df4b0a349c68869959de0c2376bfa0e924d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce2df4b0a349c68869959de0c2376bfa0e924d7", "html_url": "https://github.com/rust-lang/rust/commit/7ce2df4b0a349c68869959de0c2376bfa0e924d7"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "62c6ae5c1ded4899c00d3b3548e6f904c1c2b1e0", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cde2a1de3616d2e186555572996eecbd37e597e5/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde2a1de3616d2e186555572996eecbd37e597e5/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=cde2a1de3616d2e186555572996eecbd37e597e5", "patch": "@@ -166,23 +166,61 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     if !stdx::always!(file.syntax().text().char_at(offset) == Some('=')) {\n         return None;\n     }\n-    let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n-    if let_stmt.semicolon_token().is_some() {\n-        return None;\n+\n+    if let Some(edit) = let_stmt(file, offset) {\n+        return Some(edit);\n+    }\n+    if let Some(edit) = assign_expr(file, offset) {\n+        return Some(edit);\n     }\n-    if let Some(expr) = let_stmt.initializer() {\n+\n+    return None;\n+\n+    fn assign_expr(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let binop: ast::BinExpr = find_node_at_offset(file.syntax(), offset)?;\n+        if !matches!(binop.op_kind(), Some(ast::BinaryOp::Assignment { op: None })) {\n+            return None;\n+        }\n+\n+        if let Some(expr_stmt) = ast::ExprStmt::cast(binop.syntax().parent()?) {\n+            if expr_stmt.semicolon_token().is_some() {\n+                return None;\n+            }\n+        } else {\n+            if !ast::StmtList::can_cast(binop.syntax().parent()?.kind()) {\n+                // Parent must be `ExprStmt` or `StmtList` for `;` to be valid.\n+                return None;\n+            }\n+        }\n+\n+        let expr = binop.rhs()?;\n         let expr_range = expr.syntax().text_range();\n         if expr_range.contains(offset) && offset != expr_range.start() {\n             return None;\n         }\n         if file.syntax().text().slice(offset..expr_range.start()).contains_char('\\n') {\n             return None;\n         }\n-    } else {\n-        return None;\n+        let offset = expr.syntax().text_range().end();\n+        Some(TextEdit::insert(offset, \";\".to_string()))\n+    }\n+\n+    fn let_stmt(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n+        let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n+        if let_stmt.semicolon_token().is_some() {\n+            return None;\n+        }\n+        let expr = let_stmt.initializer()?;\n+        let expr_range = expr.syntax().text_range();\n+        if expr_range.contains(offset) && offset != expr_range.start() {\n+            return None;\n+        }\n+        if file.syntax().text().slice(offset..expr_range.start()).contains_char('\\n') {\n+            return None;\n+        }\n+        let offset = let_stmt.syntax().text_range().end();\n+        Some(TextEdit::insert(offset, \";\".to_string()))\n     }\n-    let offset = let_stmt.syntax().text_range().end();\n-    Some(TextEdit::insert(offset, \";\".to_string()))\n }\n \n /// Returns an edit which should be applied when a dot ('.') is typed on a blank line, indenting the line appropriately.\n@@ -286,7 +324,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_on_eq_typed() {\n+    fn test_semi_after_let() {\n         //     do_check(r\"\n         // fn foo() {\n         //     let foo =$0\n@@ -322,6 +360,54 @@ fn foo() {\n         // \");\n     }\n \n+    #[test]\n+    fn test_semi_after_assign() {\n+        type_char(\n+            '=',\n+            r#\"\n+fn f() {\n+    i $0 0\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    i = 0;\n+}\n+\"#,\n+        );\n+        type_char(\n+            '=',\n+            r#\"\n+fn f() {\n+    i $0 0\n+    i\n+}\n+\"#,\n+            r#\"\n+fn f() {\n+    i = 0;\n+    i\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f(x: u8) {\n+    if x $0\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn f() {\n+    g(i $0 0);\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn indents_new_chain_call() {\n         type_char("}]}