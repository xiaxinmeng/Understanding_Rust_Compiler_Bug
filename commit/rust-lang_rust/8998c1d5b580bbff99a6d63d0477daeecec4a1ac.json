{"sha": "8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OThjMWQ1YjU4MGJiZmY5OWE2ZDYzZDA0NzdkYWVlY2VjNGExYWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-17T06:42:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-17T06:42:19Z"}, "message": "Merge pull request #2286 from topecongiro/issue-2123\n\nRespect leading whitespace when wrapping comment", "tree": {"sha": "9d31623f813c6a63baeedbfbd9e1fe6765da5421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d31623f813c6a63baeedbfbd9e1fe6765da5421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaNhHLCRBK7hj4Ov3rIwAAdHIIAC3uNX5cRJ3s/4PT4ORq7Fe0\n+iLu0YGrq/QdPvisA8ErRqdAcqfFMIGOOfFNVQO6B5m5duPx/uGHouVvX0j4qDAV\nsj2zolvPtMtGA0CVxJ8M8DxzY+GyJkoQnDHVcs/OtDQB2fJCE9JOfvZBbz2QQibl\nYqcqMhI/QWoJyurGdXDjzRnWQetnOTiaXMGduVSpxQBPyE+fTDO967oUAMrftLcv\nxQ6ttDRpCCmk4fH0IGxQBQnBOHPZlCNL78+vzkonIiMIKqItoOyT3v/RaO3Ahqi3\ne0Eh4JRNMEX6bId2df8jusD0gOJqNEvVIJ4hUhqYPT6lPoJP/1i8Uc5r1+xoOC8=\n=ssTn\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d31623f813c6a63baeedbfbd9e1fe6765da5421\nparent 331124a42ae94af076c6f2b5c72a2d7e3d950cf9\nparent ccc487ade798231a41cff965672c14d1a19145a4\nauthor Nick Cameron <nrc@ncameron.org> 1513492939 +1300\ncommitter GitHub <noreply@github.com> 1513492939 +1300\n\nMerge pull request #2286 from topecongiro/issue-2123\n\nRespect leading whitespace when wrapping comment"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "html_url": "https://github.com/rust-lang/rust/commit/8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "331124a42ae94af076c6f2b5c72a2d7e3d950cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/331124a42ae94af076c6f2b5c72a2d7e3d950cf9", "html_url": "https://github.com/rust-lang/rust/commit/331124a42ae94af076c6f2b5c72a2d7e3d950cf9"}, {"sha": "ccc487ade798231a41cff965672c14d1a19145a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc487ade798231a41cff965672c14d1a19145a4", "html_url": "https://github.com/rust-lang/rust/commit/ccc487ade798231a41cff965672c14d1a19145a4"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "441bb858e2a887b3b82244a0c3189647c41a041e", "filename": "src/comment.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "patch": "@@ -305,27 +305,42 @@ fn rewrite_comment_inner(\n             line\n         })\n         .map(|s| left_trim_comment_line(s, &style))\n-        .map(|line| {\n+        .map(|(line, has_leading_whitespace)| {\n             if orig.starts_with(\"/*\") && line_breaks == 0 {\n-                line.trim_left()\n+                (\n+                    line.trim_left(),\n+                    has_leading_whitespace || config.normalize_comments(),\n+                )\n             } else {\n-                line\n+                (line, has_leading_whitespace || config.normalize_comments())\n             }\n         });\n \n-    let mut result = opener.to_owned();\n+    let mut result = String::with_capacity(orig.len() * 2);\n+    result.push_str(opener);\n     let mut is_prev_line_multi_line = false;\n     let mut inside_code_block = false;\n     let comment_line_separator = format!(\"\\n{}{}\", indent_str, line_start);\n-    for line in lines {\n+    for (i, (line, has_leading_whitespace)) in lines.enumerate() {\n+        let is_last = i == count_newlines(orig);\n         if result == opener {\n+            let force_leading_whitespace = opener == \"/* \" && count_newlines(orig) == 0;\n+            if !has_leading_whitespace && !force_leading_whitespace && result.ends_with(' ') {\n+                result.pop();\n+            }\n             if line.is_empty() {\n                 continue;\n             }\n         } else if is_prev_line_multi_line && !line.is_empty() {\n             result.push(' ')\n+        } else if is_last && !closer.is_empty() && line.is_empty() {\n+            result.push('\\n');\n+            result.push_str(&indent_str);\n         } else {\n             result.push_str(&comment_line_separator);\n+            if !has_leading_whitespace && result.ends_with(' ') {\n+                result.pop();\n+            }\n         }\n \n         if line.starts_with(\"```\") {\n@@ -381,7 +396,7 @@ fn rewrite_comment_inner(\n                 Shape::legacy(max_chars, fmt_indent)\n             };\n         } else {\n-            if line.is_empty() && result.ends_with(' ') {\n+            if line.is_empty() && result.ends_with(' ') && !is_last {\n                 // Remove space if this is an empty comment or a doc comment.\n                 result.pop();\n             }\n@@ -473,32 +488,33 @@ fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<\n }\n \n /// Trims comment characters and possibly a single space from the left of a string.\n-/// Does not trim all whitespace.\n-fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> &'a str {\n+/// Does not trim all whitespace. If a single space is trimmed from the left of the string,\n+/// this function returns true.\n+fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle) -> (&'a str, bool) {\n     if line.starts_with(\"//! \") || line.starts_with(\"/// \") || line.starts_with(\"/*! \")\n         || line.starts_with(\"/** \")\n     {\n-        &line[4..]\n+        (&line[4..], true)\n     } else if let CommentStyle::Custom(opener) = *style {\n         if line.starts_with(opener) {\n-            &line[opener.len()..]\n+            (&line[opener.len()..], true)\n         } else {\n-            &line[opener.trim_right().len()..]\n+            (&line[opener.trim_right().len()..], false)\n         }\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\")\n         || line.starts_with(\"///\") || line.starts_with(\"** \")\n         || line.starts_with(\"/*!\")\n         || (line.starts_with(\"/**\") && !line.starts_with(\"/**/\"))\n     {\n-        &line[3..]\n+        (&line[3..], line.chars().nth(2).unwrap() == ' ')\n     } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\")\n         || line.starts_with(\"**\")\n     {\n-        &line[2..]\n+        (&line[2..], line.chars().nth(1).unwrap() == ' ')\n     } else if line.starts_with('*') {\n-        &line[1..]\n+        (&line[1..], false)\n     } else {\n-        line\n+        (line, line.starts_with(' '))\n     }\n }\n "}, {"sha": "ac7c835f80a08cb45bb0227449c22870f4dbc164", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "patch": "@@ -58,7 +58,7 @@ enum X {\n }\n \n pub enum EnumWithAttributes {\n-    // This is a pre comment\n+    //This is a pre comment\n     // AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     TupleVar(usize, usize, usize), /* AAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA\n                                     * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */"}, {"sha": "5e9917b40234ca188adabe219fcae874baae6cdd", "filename": "tests/target/issue-2123.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fissue-2123.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fissue-2123.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2123.rs?ref=8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-wrap_comments: true\n+\n+//hello\n+//world\n+\n+fn main() {}"}, {"sha": "2b3647eb8e798c8ee8a7e110f110ed9dd8b441a5", "filename": "tests/target/structs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "patch": "@@ -271,7 +271,7 @@ struct Foo {\n     aaaaaaa: u32, /* multi\n                    * line\n                    * comment\n-                   * */\n+                   */\n     b: u32, // hi\n \n     do_not_push_this_comment1: u32, // comment1"}, {"sha": "2394d9656e4138fbe8b5eb6db6b3d49bd64743e2", "filename": "tests/target/unions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8998c1d5b580bbff99a6d63d0477daeecec4a1ac/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=8998c1d5b580bbff99a6d63d0477daeecec4a1ac", "patch": "@@ -176,7 +176,7 @@ union Foo {\n     aaaaaaa: u32, /* multi\n                    * line\n                    * comment\n-                   * */\n+                   */\n     b: u32, // hi\n \n     do_not_push_this_comment1: u32, // comment1"}]}