{"sha": "653124ac44d30244262fc3b9e2f8d10850ff079f", "node_id": "C_kwDOAAsO6NoAKDY1MzEyNGFjNDRkMzAyNDQyNjJmYzNiOWUyZjhkMTA4NTBmZjA3OWY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T11:08:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T11:08:07Z"}, "message": "Fix clippy.", "tree": {"sha": "90f9ae3f745e8e4b02996a1420ccb992c0615610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f9ae3f745e8e4b02996a1420ccb992c0615610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653124ac44d30244262fc3b9e2f8d10850ff079f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653124ac44d30244262fc3b9e2f8d10850ff079f", "html_url": "https://github.com/rust-lang/rust/commit/653124ac44d30244262fc3b9e2f8d10850ff079f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653124ac44d30244262fc3b9e2f8d10850ff079f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995e57b89efc00e967100d6e7c36b55315bf3cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/995e57b89efc00e967100d6e7c36b55315bf3cd7", "html_url": "https://github.com/rust-lang/rust/commit/995e57b89efc00e967100d6e7c36b55315bf3cd7"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "c0e32068ecaccecb39ee2ca6d5fd476559163f54", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/653124ac44d30244262fc3b9e2f8d10850ff079f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653124ac44d30244262fc3b9e2f8d10850ff079f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=653124ac44d30244262fc3b9e2f8d10850ff079f", "patch": "@@ -533,6 +533,14 @@ struct FormatArgsValues<'tcx> {\n }\n \n impl<'tcx> FormatArgsValues<'tcx> {\n+    fn new_empty(format_string_span: SpanData) -> Self {\n+        Self {\n+            value_args: Vec::new(),\n+            pos_to_value_index: Vec::new(),\n+            format_string_span,\n+        }\n+    }\n+\n     fn new(args: &'tcx Expr<'tcx>, format_string_span: SpanData) -> Self {\n         let mut pos_to_value_index = Vec::new();\n         let mut value_args = Vec::new();\n@@ -997,12 +1005,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n             .find(|&name| matches!(name, sym::const_format_args | sym::format_args | sym::format_args_nl))?;\n         let newline = macro_name == sym::format_args_nl;\n \n+        // ::core::fmt::Arguments::new_const(pieces)\n         // ::core::fmt::Arguments::new_v1(pieces, args)\n         // ::core::fmt::Arguments::new_v1_formatted(pieces, args, fmt, _unsafe_arg)\n-        if let ExprKind::Call(callee, [pieces, args, rest @ ..]) = expr.kind\n+        if let ExprKind::Call(callee, [pieces, rest @ ..]) = expr.kind\n             && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind\n             && let TyKind::Path(QPath::LangItem(LangItem::FormatArguments, _, _)) = ty.kind\n-            && matches!(seg.ident.as_str(), \"new_v1\" | \"new_v1_formatted\")\n+            && matches!(seg.ident.as_str(), \"new_const\" | \"new_v1\" | \"new_v1_formatted\")\n         {\n             let format_string = FormatString::new(cx, pieces)?;\n \n@@ -1026,7 +1035,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                 return None;\n             }\n \n-            let positions = if let Some(fmt_arg) = rest.first() {\n+            let positions = if let Some(fmt_arg) = rest.get(1) {\n                 // If the argument contains format specs, `new_v1_formatted(_, _, fmt, _)`, parse\n                 // them.\n \n@@ -1042,7 +1051,11 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                 }))\n             };\n \n-            let values = FormatArgsValues::new(args, format_string.span.data());\n+            let values = if let Some(args) = rest.first() {\n+                FormatArgsValues::new(args, format_string.span.data())\n+            } else {\n+                FormatArgsValues::new_empty(format_string.span.data())\n+            };\n \n             let args = izip!(positions, parsed_args, parser.arg_places)\n                 .map(|(position, parsed_arg, arg_span)| {"}]}