{"sha": "947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0N2ZhMWZhMjZjYTVlYmMxOWRkOGIzOWVlODI4OWNlNTRlMGM4ZGI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-16T18:12:20Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-02-23T21:36:03Z"}, "message": "Miscellaneous review comments", "tree": {"sha": "481d45dd272e92a70051945eafa2158adee00df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481d45dd272e92a70051945eafa2158adee00df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db", "html_url": "https://github.com/rust-lang/rust/commit/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341212acd67d2409265333f2c598d446525b5468", "url": "https://api.github.com/repos/rust-lang/rust/commits/341212acd67d2409265333f2c598d446525b5468", "html_url": "https://github.com/rust-lang/rust/commit/341212acd67d2409265333f2c598d446525b5468"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "6dcdf5717c01dd70f59b88103d73199d1d88074b", "filename": "src/shims/fs.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=947fa1fa26ca5ebc19dd8b39ee8289ce54e0c8db", "patch": "@@ -785,7 +785,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"mkdir\")?;\n \n-        let mode = if this.tcx.sess.target.target.target_os.to_lowercase() == \"macos\" {\n+        let _mode = if this.tcx.sess.target.target.target_os.to_lowercase() == \"macos\" {\n             this.read_scalar(mode_op)?.not_undef()?.to_u16()? as u32\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n@@ -794,13 +794,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let path = this.read_os_str_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let mut builder = DirBuilder::new();\n+\n+        // If the host supports it, forward on the mode of the directory\n+        // (i.e. permission bits and the sticky bit)\n         #[cfg(target_family = \"unix\")]\n         {\n             use std::os::unix::fs::DirBuilderExt;\n-            builder.mode(mode.into());\n+            builder.mode(_mode.into());\n         }\n-        #[cfg(not(target_family = \"unix\"))]\n-        let _mode = mode;\n+\n         let result = builder.create(path).map(|_| 0i32);\n \n         this.try_unwrap_io_result(result)\n@@ -842,7 +844,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .streams\n                     .insert(dir_ptr, dir_iter);\n                 if let Some(_) = prev {\n-                    throw_unsup_format!(\"The pointer allocated for opendir was already registered by a previous call to opendir\")\n+                    panic!(\"The pointer allocated for opendir was already registered by a previous call to opendir\")\n                 } else {\n                     Ok(Scalar::Ptr(dir_ptr))\n                 }\n@@ -868,11 +870,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n         let dirent64_layout = this.libc_ty_layout(\"dirent64\")?;\n-        this.memory.check_ptr_access(\n-            Scalar::Ptr(entry_ptr),\n-            dirent64_layout.size,\n-            dirent64_layout.align.abi,\n-        )?;\n \n         if let Some(dir_iter) = this.machine.dir_handler.streams.get_mut(&dirp) {\n             match dir_iter.next() {\n@@ -945,11 +942,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let entry_ptr = this.force_ptr(this.read_scalar(entry_op)?.not_undef()?)?;\n         let dirent_layout = this.libc_ty_layout(\"dirent\")?;\n-        this.memory.check_ptr_access(\n-            Scalar::Ptr(entry_ptr),\n-            dirent_layout.size,\n-            dirent_layout.align.abi,\n-        )?;\n \n         if let Some(dir_iter) = this.machine.dir_handler.streams.get_mut(&dirp) {\n             match dir_iter.next() {"}]}