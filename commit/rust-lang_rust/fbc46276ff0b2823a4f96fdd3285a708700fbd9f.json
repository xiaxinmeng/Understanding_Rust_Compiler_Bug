{"sha": "fbc46276ff0b2823a4f96fdd3285a708700fbd9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzQ2Mjc2ZmYwYjI4MjNhNGY5NmZkZDMyODVhNzA4NzAwZmJkOWY=", "commit": {"author": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-05-31T14:43:36Z"}, "committer": {"name": "David Renshaw", "email": "david@sandstorm.io", "date": "2017-05-31T14:43:36Z"}, "message": "prevent 'attempt to shift left with overflow' panic on platforms where pthread_key_t is 64 bits", "tree": {"sha": "d0e242fcbe30094f1c89e998c69469e5178adad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0e242fcbe30094f1c89e998c69469e5178adad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc46276ff0b2823a4f96fdd3285a708700fbd9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc46276ff0b2823a4f96fdd3285a708700fbd9f", "html_url": "https://github.com/rust-lang/rust/commit/fbc46276ff0b2823a4f96fdd3285a708700fbd9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc46276ff0b2823a4f96fdd3285a708700fbd9f/comments", "author": null, "committer": null, "parents": [{"sha": "c817e6e4b3bc2879b08390fb2f5a421467397910", "url": "https://api.github.com/repos/rust-lang/rust/commits/c817e6e4b3bc2879b08390fb2f5a421467397910", "html_url": "https://github.com/rust-lang/rust/commit/c817e6e4b3bc2879b08390fb2f5a421467397910"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3c254734b328d6a40bbabaec1cf68c5417b9659e", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fbc46276ff0b2823a4f96fdd3285a708700fbd9f/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc46276ff0b2823a4f96fdd3285a708700fbd9f/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=fbc46276ff0b2823a4f96fdd3285a708700fbd9f", "patch": "@@ -724,11 +724,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             // Hook pthread calls that go to the thread-local storage memory subsystem\n             \"pthread_key_create\" => {\n                 let key_ptr = args[0].read_ptr(&self.memory)?;\n-                \n+\n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves...)\n                 let dtor_ptr = args[1].read_ptr(&self.memory)?;\n                 let dtor = if dtor_ptr.is_null_ptr() { None } else { Some(self.memory.get_fn(dtor_ptr.alloc_id)?) };\n-                \n+\n                 // Figure out how large a pthread TLS key actually is. This is libc::pthread_key_t.\n                 let key_size = match self.operand_ty(&arg_operands[0]).sty {\n                     TypeVariants::TyRawPtr(TypeAndMut { ty, .. }) => {\n@@ -737,14 +737,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                     _ => return Err(EvalError::AbiViolation(\"Wrong signature used for pthread_key_create: First argument must be a raw pointer.\".to_owned()))\n                 };\n-                \n+\n                 // Create key and write it into the memory where key_ptr wants it\n-                let key = self.memory.create_tls_key(dtor);\n-                if key >= (1 << key_size.bits()) {\n+                let key = self.memory.create_tls_key(dtor) as u128;\n+                if key_size.bits() < 128 && key >= (1u128 << key_size.bits() as u128) {\n                     return Err(EvalError::OutOfTls);\n                 }\n-                self.memory.write_int(key_ptr, key as i128, key_size.bytes())?;\n-                \n+                self.memory.write_uint(key_ptr, key, key_size.bytes())?;\n+\n                 // Return success (0)\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n             }"}]}