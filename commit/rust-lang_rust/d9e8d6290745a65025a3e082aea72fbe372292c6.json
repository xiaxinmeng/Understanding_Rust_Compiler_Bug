{"sha": "d9e8d6290745a65025a3e082aea72fbe372292c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZThkNjI5MDc0NWE2NTAyNWEzZTA4MmFlYTcyZmJlMzcyMjkyYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-15T08:44:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-15T08:44:46Z"}, "message": "Auto merge of #74214 - nnethercote:change-SymbolName-name, r=eddyb\n\nChange `SymbolName::name` to a `&str`.\n\nThis eliminates a bunch of `Symbol::intern()` and `Symbol::as_str()`\ncalls, which is good, because they require locking the interner.\n\nNote that the unsafety in `from_cycle_error()` is identical to the\nunsafety on other adjacent impls.\n\nr? @eddyb", "tree": {"sha": "46262e3847727b0aa0f3604830c9f44b87433392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46262e3847727b0aa0f3604830c9f44b87433392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9e8d6290745a65025a3e082aea72fbe372292c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e8d6290745a65025a3e082aea72fbe372292c6", "html_url": "https://github.com/rust-lang/rust/commit/d9e8d6290745a65025a3e082aea72fbe372292c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9e8d6290745a65025a3e082aea72fbe372292c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c714eae0e3b4ba263c193d54f6e46bb9a1feb2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c714eae0e3b4ba263c193d54f6e46bb9a1feb2cc", "html_url": "https://github.com/rust-lang/rust/commit/c714eae0e3b4ba263c193d54f6e46bb9a1feb2cc"}, {"sha": "a1b8540390bb9bf9861757ef9f3703f140d6f73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b8540390bb9bf9861757ef9f3703f140d6f73a", "html_url": "https://github.com/rust-lang/rust/commit/a1b8540390bb9bf9861757ef9f3703f140d6f73a"}], "stats": {"total": 143, "additions": 76, "deletions": 67}, "files": [{"sha": "7b341651adf3dec5d0de0ef748257b44047b3cd9", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -35,7 +35,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance).name.as_str();\n+    let sym = tcx.symbol_name(instance).name;\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.monomorphic_ty(cx.tcx()), sym);\n \n     let fn_abi = FnAbi::of_instance(cx, instance, &[]);"}, {"sha": "90887b760fb7d20c53fb1b38b0dbb68c09c0f62c", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size};\n \n@@ -107,11 +107,10 @@ fn check_and_apply_linkage(\n     cx: &CodegenCx<'ll, 'tcx>,\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n-    sym: Symbol,\n+    sym: &str,\n     span: Span,\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n-    let sym = sym.as_str();\n     if let Some(linkage) = attrs.linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n@@ -215,14 +214,13 @@ impl CodegenCx<'ll, 'tcx> {\n             // FIXME: refactor this to work without accessing the HIR\n             let (g, attrs) = match self.tcx.hir().get(id) {\n                 Node::Item(&hir::Item { attrs, span, kind: hir::ItemKind::Static(..), .. }) => {\n-                    let sym_str = sym.as_str();\n-                    if let Some(g) = self.get_declared_value(&sym_str) {\n+                    if let Some(g) = self.get_declared_value(sym) {\n                         if self.val_ty(g) != self.type_ptr_to(llty) {\n                             span_bug!(span, \"Conflicting types for static\");\n                         }\n                     }\n \n-                    let g = self.declare_global(&sym_str, llty);\n+                    let g = self.declare_global(sym, llty);\n \n                     if !self.tcx.is_reachable_non_generic(def_id) {\n                         unsafe {"}, {"sha": "ef9d42968ae2e0a1ae27a2fe6c92f9ffbea48405", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -2468,8 +2468,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(def_id).as_str();\n-    let linkage_name: &str =\n-        &mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name.as_str();\n+    let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name;\n     // When empty, linkage_name field is omitted,\n     // which is what we want for no_mangle statics\n     let linkage_name = if var_name == linkage_name { \"\" } else { linkage_name };"}, {"sha": "44993d7602fe6e89ca9f16c0dce53391b527a88d", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -267,7 +267,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let substs = instance.substs.truncate_to(self.tcx(), generics);\n         let template_parameters = get_template_parameters(self, &generics, substs, &mut name);\n \n-        let linkage_name: &str = &mangled_name_of_instance(self, instance).name.as_str();\n+        let linkage_name = &mangled_name_of_instance(self, instance).name;\n         // Omit the linkage_name if it is the same as subprogram name.\n         let linkage_name = if &name == linkage_name { \"\" } else { linkage_name };\n "}, {"sha": "d1a55335c44e7e62705feae9fe23b6f0906f37f6", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::definitions::DefPathData;\n pub fn mangled_name_of_instance<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     instance: Instance<'tcx>,\n-) -> ty::SymbolName {\n+) -> ty::SymbolName<'tcx> {\n     let tcx = cx.tcx;\n     tcx.symbol_name(instance)\n }"}, {"sha": "d095587a1e8cb81d9cecd25fae428e132e538f24", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -196,7 +196,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 // and/or monomorphization invalidates these assumptions.\n                 let coverageinfo = tcx.coverageinfo(caller_instance.def_id());\n                 let mangled_fn = tcx.symbol_name(caller_instance);\n-                let (mangled_fn_name, _len_val) = self.const_str(mangled_fn.name);\n+                let (mangled_fn_name, _len_val) = self.const_str(Symbol::intern(mangled_fn.name));\n                 let hash = self.const_u64(coverageinfo.hash);\n                 let num_counters = self.const_u32(coverageinfo.num_counters);\n                 use coverage::count_code_region_args::*;"}, {"sha": "e0910c693b1320181950c51375f6512195eea3ec", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n use rustc_session::config::{CrateType, SanitizerSet};\n-use rustc_span::symbol::sym;\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types())\n@@ -117,9 +116,9 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n                 // In general though we won't link right if these\n                 // symbols are stripped, and LTO currently strips them.\n                 match name {\n-                    sym::rust_eh_personality\n-                    | sym::rust_eh_register_frames\n-                    | sym::rust_eh_unregister_frames =>\n+                    \"rust_eh_personality\"\n+                    | \"rust_eh_register_frames\"\n+                    | \"rust_eh_unregister_frames\" =>\n                         SymbolExportLevel::C,\n                     _ => SymbolExportLevel::Rust,\n                 }\n@@ -177,15 +176,15 @@ fn exported_symbols_provider_local(\n         .collect();\n \n     if tcx.entry_fn(LOCAL_CRATE).is_some() {\n-        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(\"main\"));\n+        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));\n     }\n \n     if tcx.allocator_kind().is_some() {\n         for method in ALLOCATOR_METHODS {\n             let symbol_name = format!(\"__rust_{}\", method.name);\n-            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n             symbols.push((exported_symbol, SymbolExportLevel::Rust));\n         }\n@@ -199,7 +198,7 @@ fn exported_symbols_provider_local(\n             [\"__llvm_profile_raw_version\", \"__llvm_profile_filename\"];\n \n         symbols.extend(PROFILER_WEAK_SYMBOLS.iter().map(|sym| {\n-            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(sym));\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n             (exported_symbol, SymbolExportLevel::C)\n         }));\n     }\n@@ -209,14 +208,14 @@ fn exported_symbols_provider_local(\n         const MSAN_WEAK_SYMBOLS: [&str; 2] = [\"__msan_track_origins\", \"__msan_keep_going\"];\n \n         symbols.extend(MSAN_WEAK_SYMBOLS.iter().map(|sym| {\n-            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(sym));\n+            let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n             (exported_symbol, SymbolExportLevel::C)\n         }));\n     }\n \n     if tcx.sess.crate_types().contains(&CrateType::Dylib) {\n         let symbol_name = metadata_symbol_name(tcx);\n-        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));\n+        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, &symbol_name));\n \n         symbols.push((exported_symbol, SymbolExportLevel::Rust));\n     }"}, {"sha": "fc65149937ffe64a18adfbc0ad46af30e976d25b", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n             cx.codegen_unit().name()\n         );\n \n-        let symbol_name = self.symbol_name(cx.tcx()).name.as_str();\n+        let symbol_name = self.symbol_name(cx.tcx()).name;\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "5f44bcc1b5409a7195f46e0c149f128ea8c3be0f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -558,7 +558,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode\n         // this late to give the prefetching as much time as possible to complete.\n         i = self.position();\n-        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n+        let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);\n         let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n         let exported_symbols_bytes = self.position() - i;\n \n@@ -622,7 +622,7 @@ impl<'tcx> EncodeContext<'tcx> {\n \n         let total_bytes = self.position();\n \n-        if self.tcx.sess.meta_stats() {\n+        if tcx.sess.meta_stats() {\n             let mut zero_bytes = 0;\n             for e in self.opaque.data.iter() {\n                 if *e == 0 {\n@@ -1541,7 +1541,7 @@ impl EncodeContext<'tcx> {\n     ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates.\n-        let metadata_symbol_name = SymbolName::new(&metadata_symbol_name(self.tcx));\n+        let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));\n \n         self.lazy(\n             exported_symbols"}, {"sha": "569af70c5b5fc5063290ad4678bcb846317b7d54", "filename": "src/librustc_middle/middle/exported_symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fexported_symbols.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -26,13 +26,13 @@ pub enum ExportedSymbol<'tcx> {\n     NonGeneric(DefId),\n     Generic(DefId, SubstsRef<'tcx>),\n     DropGlue(Ty<'tcx>),\n-    NoDefId(ty::SymbolName),\n+    NoDefId(ty::SymbolName<'tcx>),\n }\n \n impl<'tcx> ExportedSymbol<'tcx> {\n     /// This is the symbol name of an instance if it is instantiated in the\n     /// local crate.\n-    pub fn symbol_name_for_local_instance(&self, tcx: TyCtxt<'tcx>) -> ty::SymbolName {\n+    pub fn symbol_name_for_local_instance(&self, tcx: TyCtxt<'tcx>) -> ty::SymbolName<'tcx> {\n         match *self {\n             ExportedSymbol::NonGeneric(def_id) => tcx.symbol_name(ty::Instance::mono(tcx, def_id)),\n             ExportedSymbol::Generic(def_id, substs) => {"}, {"sha": "474552d68b9239574f76c522460b4380c75fea57", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -68,13 +68,13 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n     }\n \n-    pub fn symbol_name(&self, tcx: TyCtxt<'tcx>) -> SymbolName {\n+    pub fn symbol_name(&self, tcx: TyCtxt<'tcx>) -> SymbolName<'tcx> {\n         match *self {\n             MonoItem::Fn(instance) => tcx.symbol_name(instance),\n             MonoItem::Static(def_id) => tcx.symbol_name(Instance::mono(tcx, def_id)),\n             MonoItem::GlobalAsm(hir_id) => {\n                 let def_id = tcx.hir().local_def_id(hir_id);\n-                SymbolName { name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)) }\n+                SymbolName::new(tcx, &format!(\"global_asm_{:?}\", def_id))\n             }\n         }\n     }\n@@ -335,9 +335,9 @@ impl<'tcx> CodegenUnit<'tcx> {\n         // The codegen tests rely on items being process in the same order as\n         // they appear in the file, so for local items, we sort by node_id first\n         #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-        pub struct ItemSortKey(Option<HirId>, SymbolName);\n+        pub struct ItemSortKey<'tcx>(Option<HirId>, SymbolName<'tcx>);\n \n-        fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx>, item: MonoItem<'tcx>) -> ItemSortKey {\n+        fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx>, item: MonoItem<'tcx>) -> ItemSortKey<'tcx> {\n             ItemSortKey(\n                 match item {\n                     MonoItem::Fn(ref instance) => {"}, {"sha": "942fba478f1f1f6fdf443e96e7ac1c907fb2eb8d", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -691,7 +691,7 @@ rustc_queries! {\n         /// The `symbol_name` query provides the symbol name for calling a\n         /// given instance from the local crate. In particular, it will also\n         /// look up the correct symbol name of instances from upstream crates.\n-        query symbol_name(key: ty::Instance<'tcx>) -> ty::SymbolName {\n+        query symbol_name(key: ty::Instance<'tcx>) -> ty::SymbolName<'tcx> {\n             desc { \"computing the symbol for `{}`\", key }\n             cache_on_disk_if { true }\n         }"}, {"sha": "a7c7b16048039386290eef78c30dffe041f5074c", "filename": "src/librustc_middle/ty/codec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcodec.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -262,6 +262,14 @@ where\n     Ok(decoder.tcx().adt_def(def_id))\n }\n \n+#[inline]\n+pub fn decode_symbol_name<D>(decoder: &mut D) -> Result<ty::SymbolName<'tcx>, D::Error>\n+where\n+    D: TyDecoder<'tcx>,\n+{\n+    Ok(ty::SymbolName::new(decoder.tcx(), &decoder.read_str()?))\n+}\n+\n #[inline]\n pub fn decode_existential_predicate_slice<D>(\n     decoder: &mut D,\n@@ -504,6 +512,13 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n+            impl<'_x, $($typaram),*> SpecializedDecoder<ty::SymbolName<'_x>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<ty::SymbolName<'_x>, Self::Error> {\n+                    unsafe { transmute(decode_symbol_name(self)) }\n+                }\n+            }\n+\n             impl<'_x, '_y, $($typaram),*> SpecializedDecoder<&'_x ty::List<ty::ExistentialPredicate<'_y>>>\n             for $DecoderName<$($typaram),*>\n             where &'_x ty::List<ty::ExistentialPredicate<'_y>>: UseSpecializedDecodable {"}, {"sha": "f352f3a397d4f800d05d3f36d6ac60630f956756", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -50,6 +50,7 @@ use std::hash::{Hash, Hasher};\n use std::marker::PhantomData;\n use std::ops::Range;\n use std::ptr;\n+use std::str;\n \n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n@@ -2988,40 +2989,37 @@ pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Vec<DefId>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct SymbolName {\n-    // FIXME: we don't rely on interning or equality here - better have\n-    // this be a `&'tcx str`.\n-    pub name: Symbol,\n-}\n-\n-impl SymbolName {\n-    pub fn new(name: &str) -> SymbolName {\n-        SymbolName { name: Symbol::intern(name) }\n-    }\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n+pub struct SymbolName<'tcx> {\n+    /// `&str` gives a consistent ordering, which ensures reproducible builds.\n+    pub name: &'tcx str,\n }\n \n-impl PartialOrd for SymbolName {\n-    fn partial_cmp(&self, other: &SymbolName) -> Option<Ordering> {\n-        self.name.as_str().partial_cmp(&other.name.as_str())\n+impl<'tcx> SymbolName<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {\n+        SymbolName {\n+            name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },\n+        }\n     }\n }\n \n-/// Ordering must use the chars to ensure reproducible builds.\n-impl Ord for SymbolName {\n-    fn cmp(&self, other: &SymbolName) -> Ordering {\n-        self.name.as_str().cmp(&other.name.as_str())\n+impl<'tcx> fmt::Display for SymbolName<'tcx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.name, fmt)\n     }\n }\n \n-impl fmt::Display for SymbolName {\n+impl<'tcx> fmt::Debug for SymbolName<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, fmt)\n     }\n }\n \n-impl fmt::Debug for SymbolName {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.name, fmt)\n+impl<'tcx> rustc_serialize::UseSpecializedEncodable for SymbolName<'tcx> {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_str(self.name)\n     }\n }\n+\n+// The decoding takes place in `decode_symbol_name()`.\n+impl<'tcx> rustc_serialize::UseSpecializedDecodable for SymbolName<'tcx> {}"}, {"sha": "f28b0f499f082fe9ba3920c2121c80c5eb14bf72", "filename": "src/librustc_middle/ty/query/values.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fvalues.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -1,7 +1,5 @@\n use crate::ty::{self, AdtSizedConstraint, Ty, TyCtxt, TyS};\n \n-use rustc_span::symbol::Symbol;\n-\n pub(super) trait Value<'tcx>: Sized {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self;\n }\n@@ -21,9 +19,15 @@ impl<'tcx> Value<'tcx> for &'_ TyS<'_> {\n     }\n }\n \n-impl<'tcx> Value<'tcx> for ty::SymbolName {\n-    fn from_cycle_error(_: TyCtxt<'tcx>) -> Self {\n-        ty::SymbolName { name: Symbol::intern(\"<error>\") }\n+impl<'tcx> Value<'tcx> for ty::SymbolName<'_> {\n+    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n+        // SAFETY: This is never called when `Self` is not `SymbolName<'tcx>`.\n+        // FIXME: Represent the above fact in the trait system somehow.\n+        unsafe {\n+            std::mem::transmute::<ty::SymbolName<'tcx>, ty::SymbolName<'_>>(ty::SymbolName::new(\n+                tcx, \"<error>\",\n+            ))\n+        }\n     }\n }\n "}, {"sha": "65ed76c558c51d856e4b92fe3392ebebf7875e7c", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -817,7 +817,7 @@ where\n             debug!(\"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).name.as_str();\n+                let symbol_name = mono_item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash =\n                     symbol_hash_start.map(|i| &symbol_name[i..]).unwrap_or(\"<no hash>\");"}, {"sha": "8b93b8a7aa74a47613edb1149fb04b47550e5a7d", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -856,8 +856,6 @@ symbols! {\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n         rust_eh_personality,\n-        rust_eh_register_frames,\n-        rust_eh_unregister_frames,\n         rustfmt,\n         rust_oom,\n         rvalue_static_promotion,"}, {"sha": "2579cf53d3d509bb71e062ef7115c9e154fe90d0", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -106,8 +106,6 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::config::SymbolManglingVersion;\n \n-use rustc_span::symbol::Symbol;\n-\n use log::debug;\n \n mod legacy;\n@@ -133,7 +131,7 @@ pub fn provide(providers: &mut Providers) {\n // The `symbol_name` query provides the symbol name for calling a given\n // instance from the local crate. In particular, it will also look up the\n // correct symbol name of instances from upstream crates.\n-fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName {\n+fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::SymbolName<'tcx> {\n     let symbol_name = compute_symbol_name(tcx, instance, || {\n         // This closure determines the instantiating crate for instances that\n         // need an instantiating-crate-suffix for their symbol name, in order\n@@ -149,7 +147,7 @@ fn symbol_name_provider(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::Symb\n         }\n     });\n \n-    ty::SymbolName { name: Symbol::intern(&symbol_name) }\n+    ty::SymbolName::new(tcx, &symbol_name)\n }\n \n /// Computes the symbol name for the given instance. This function will call"}, {"sha": "2f1c896ce2f1671f9d7442806f1bd0749f289993", "filename": "src/librustc_symbol_mangling/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_symbol_mangling%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9e8d6290745a65025a3e082aea72fbe372292c6/src%2Flibrustc_symbol_mangling%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Ftest.rs?ref=d9e8d6290745a65025a3e082aea72fbe372292c6", "patch": "@@ -39,7 +39,7 @@ impl SymbolNamesTest<'tcx> {\n                 let instance = Instance::mono(tcx, def_id.to_def_id());\n                 let mangled = self.tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n-                if let Ok(demangling) = rustc_demangle::try_demangle(&mangled.name.as_str()) {\n+                if let Ok(demangling) = rustc_demangle::try_demangle(mangled.name) {\n                     tcx.sess.span_err(attr.span, &format!(\"demangling({})\", demangling));\n                     tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n                 }"}]}