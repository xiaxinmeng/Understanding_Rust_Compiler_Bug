{"sha": "4462b4af52e753e79de737857ff620fd267fb58f", "node_id": "C_kwDOAAsO6NoAKDQ0NjJiNGFmNTJlNzUzZTc5ZGU3Mzc4NTdmZjYyMGZkMjY3ZmI1OGY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-08-01T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-08-25T08:38:00Z"}, "message": "Elaborate all box dereferences in `ElaborateBoxDerefs`\n\nso that it is the only pass responsible for elaboration, instead of\nsplitting this responsibility between the `StateTransform` and\n`ElaborateBoxDerefs`.", "tree": {"sha": "827b531154a5ee6a3f5ed8be30a0da455968de2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/827b531154a5ee6a3f5ed8be30a0da455968de2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4462b4af52e753e79de737857ff620fd267fb58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4462b4af52e753e79de737857ff620fd267fb58f", "html_url": "https://github.com/rust-lang/rust/commit/4462b4af52e753e79de737857ff620fd267fb58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4462b4af52e753e79de737857ff620fd267fb58f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d892a942bd490b3478ceb6624c387b75690279", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d892a942bd490b3478ceb6624c387b75690279", "html_url": "https://github.com/rust-lang/rust/commit/31d892a942bd490b3478ceb6624c387b75690279"}], "stats": {"total": 111, "additions": 9, "deletions": 102}, "files": [{"sha": "294af2455d069607b2b8e348d3087cf047a28413", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4462b4af52e753e79de737857ff620fd267fb58f/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462b4af52e753e79de737857ff620fd267fb58f/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=4462b4af52e753e79de737857ff620fd267fb58f", "patch": "@@ -107,27 +107,8 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n             let mut visitor =\n                 ElaborateBoxDerefVisitor { tcx, unique_did, nonnull_did, local_decls, patch };\n \n-            for (block, BasicBlockData { statements, terminator, .. }) in\n-                body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut()\n-            {\n-                let mut index = 0;\n-                for statement in statements {\n-                    let location = Location { block, statement_index: index };\n-                    visitor.visit_statement(statement, location);\n-                    index += 1;\n-                }\n-\n-                let location = Location { block, statement_index: index };\n-                match terminator {\n-                    // yielding into a box is handled when lowering generators\n-                    Some(Terminator { kind: TerminatorKind::Yield { value, .. }, .. }) => {\n-                        visitor.visit_operand(value, location);\n-                    }\n-                    Some(terminator) => {\n-                        visitor.visit_terminator(terminator, location);\n-                    }\n-                    None => {}\n-                }\n+            for (block, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n+                visitor.visit_basic_block_data(block, data);\n             }\n \n             visitor.patch.apply(body);"}, {"sha": "5b0d9900c0fb5cb5a3ef1db6425c00926790aee4", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 7, "deletions": 81, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4462b4af52e753e79de737857ff620fd267fb58f/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4462b4af52e753e79de737857ff620fd267fb58f/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=4462b4af52e753e79de737857ff620fd267fb58f", "patch": "@@ -1182,8 +1182,6 @@ fn create_cases<'tcx>(\n     transform: &TransformVisitor<'tcx>,\n     operation: Operation,\n ) -> Vec<(usize, BasicBlock)> {\n-    let tcx = transform.tcx;\n-\n     let source_info = SourceInfo::outermost(body.span);\n \n     transform\n@@ -1216,85 +1214,13 @@ fn create_cases<'tcx>(\n                 if operation == Operation::Resume {\n                     // Move the resume argument to the destination place of the `Yield` terminator\n                     let resume_arg = Local::new(2); // 0 = return, 1 = self\n-\n-                    // handle `box yield` properly\n-                    let box_place = if let [projection @ .., ProjectionElem::Deref] =\n-                        &**point.resume_arg.projection\n-                    {\n-                        let box_place =\n-                            Place::from(point.resume_arg.local).project_deeper(projection, tcx);\n-\n-                        let box_ty = box_place.ty(&body.local_decls, tcx).ty;\n-\n-                        if box_ty.is_box() { Some((box_place, box_ty)) } else { None }\n-                    } else {\n-                        None\n-                    };\n-\n-                    if let Some((box_place, box_ty)) = box_place {\n-                        let unique_did = box_ty\n-                            .ty_adt_def()\n-                            .expect(\"expected Box to be an Adt\")\n-                            .non_enum_variant()\n-                            .fields[0]\n-                            .did;\n-\n-                        let Some(nonnull_def) = tcx.type_of(unique_did).ty_adt_def() else {\n-                            span_bug!(tcx.def_span(unique_did), \"expected Box to contain Unique\")\n-                        };\n-\n-                        let nonnull_did = nonnull_def.non_enum_variant().fields[0].did;\n-\n-                        let (unique_ty, nonnull_ty, ptr_ty) =\n-                            crate::elaborate_box_derefs::build_ptr_tys(\n-                                tcx,\n-                                box_ty.boxed_ty(),\n-                                unique_did,\n-                                nonnull_did,\n-                            );\n-\n-                        let ptr_local = body.local_decls.push(LocalDecl::new(ptr_ty, body.span));\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::StorageLive(ptr_local),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                Place::from(ptr_local),\n-                                Rvalue::Use(Operand::Copy(box_place.project_deeper(\n-                                    &crate::elaborate_box_derefs::build_projection(\n-                                        unique_ty, nonnull_ty, ptr_ty,\n-                                    ),\n-                                    tcx,\n-                                ))),\n-                            ))),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                Place::from(ptr_local)\n-                                    .project_deeper(&[ProjectionElem::Deref], tcx),\n-                                Rvalue::Use(Operand::Move(resume_arg.into())),\n-                            ))),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::StorageDead(ptr_local),\n-                        });\n-                    } else {\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                point.resume_arg,\n-                                Rvalue::Use(Operand::Move(resume_arg.into())),\n-                            ))),\n-                        });\n-                    }\n+                    statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(Box::new((\n+                            point.resume_arg,\n+                            Rvalue::Use(Operand::Move(resume_arg.into())),\n+                        ))),\n+                    });\n                 }\n \n                 // Then jump to the real target"}]}