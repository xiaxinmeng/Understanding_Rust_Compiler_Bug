{"sha": "2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGQxZmYxYjUwYjdjNzFlOWY4YWFmMDNhNTg1MDFhNGFmOTdkY2U=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-02-28T20:15:26Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-02-28T20:18:30Z"}, "message": "hir_ty: use default type generic for box expressions", "tree": {"sha": "b581a78b79b40bffbe72c2fd7241ded8caea97b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b581a78b79b40bffbe72c2fd7241ded8caea97b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "html_url": "https://github.com/rust-lang/rust/commit/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d7dbfa5e7ba2cebf8c3f79b5d31285d79c1527", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d7dbfa5e7ba2cebf8c3f79b5d31285d79c1527", "html_url": "https://github.com/rust-lang/rust/commit/23d7dbfa5e7ba2cebf8c3f79b5d31285d79c1527"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "98bc2317321443d58988b843e072e6c26eb5dfb8", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "patch": "@@ -488,6 +488,12 @@ impl<'a> InferenceContext<'a> {\n                 if let Some(box_) = self.resolve_boxed_box() {\n                     let mut sb = Substs::builder(generics(self.db.upcast(), box_.into()).len());\n                     sb = sb.push(inner_ty);\n+                    match self.db.generic_defaults(box_.into()).as_ref() {\n+                        [_, alloc_ty, ..] if !alloc_ty.value.is_unknown() => {\n+                            sb = sb.push(alloc_ty.value.clone());\n+                        }\n+                        _ => (),\n+                    }\n                     sb = sb.fill(repeat_with(|| self.table.new_type_var()));\n                     Ty::Adt(box_, sb.build())\n                 } else {"}, {"sha": "2947857a5fd29ce37594444e03d9307822c06b2b", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=2cdd1ff1b50b7c71e9f8aaf03a58501a4af97dce", "patch": "@@ -2491,3 +2491,58 @@ fn inner_use_enum_rename() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn box_into_vec() {\n+    check_infer(\n+        r#\"\n+#[lang = \"sized\"]\n+pub trait Sized {}\n+\n+#[lang = \"unsize\"]\n+pub trait Unsize<T: ?Sized> {}\n+\n+#[lang = \"coerce_unsized\"]\n+pub trait CoerceUnsized<T> {}\n+\n+pub unsafe trait Allocator {}\n+\n+pub struct Global;\n+unsafe impl Allocator for Global {}\n+\n+#[lang = \"owned_box\"]\n+#[fundamental]\n+pub struct Box<T: ?Sized, A: Allocator = Global>;\n+\n+impl<T: ?Sized + Unsize<U>, U: ?Sized, A: Allocator> CoerceUnsized<Box<U, A>> for Box<T, A> {}\n+\n+pub struct Vec<T, A: Allocator = Global> {}\n+\n+#[lang = \"slice\"]\n+impl<T> [T] {}\n+\n+#[lang = \"slice_alloc\"]\n+impl<T> [T] {\n+    pub fn into_vec<A: Allocator>(self: Box<Self, A>) -> Vec<T, A> {\n+        unimplemented!()\n+    }\n+}\n+\n+fn test() {\n+    let vec = <[_]>::into_vec(box [1i32]);\n+}\n+\"#,\n+        expect![[r#\"\n+            569..573 'self': Box<[T], A>\n+            602..634 '{     ...     }': Vec<T, A>\n+            612..628 'unimpl...ted!()': Vec<T, A>\n+            648..694 '{     ...2]); }': ()\n+            658..661 'vec': Vec<i32, Global>\n+            664..679 '<[_]>::into_vec': fn into_vec<i32, Global>(Box<[i32], Global>) -> Vec<i32, Global>\n+            664..691 '<[_]>:...1i32])': Vec<i32, Global>\n+            680..690 'box [1i32]': Box<[i32; _], Global>\n+            684..690 '[1i32]': [i32; _]\n+            685..689 '1i32': i32\n+        \"#]],\n+    )\n+}"}]}