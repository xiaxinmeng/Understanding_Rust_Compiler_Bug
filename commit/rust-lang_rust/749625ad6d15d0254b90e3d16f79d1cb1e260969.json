{"sha": "749625ad6d15d0254b90e3d16f79d1cb1e260969", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OTYyNWFkNmQxNWQwMjU0YjkwZTNkMTZmNzlkMWNiMWUyNjA5Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-03T01:23:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-03T01:23:10Z"}, "message": "Auto merge of #29500 - vadimcn:rustlib, r=alexcrichton\n\nAccording to a recent [discussion on IRC](https://botbot.me/mozilla/rust-tools/2015-10-27/?msg=52887517&page=2), there's no good reason for Windows builds to store target libraries under `bin`, when on every other platform they are under `lib`.\r\n\r\nThis might be a [breaking-change] for some users.  I am pretty sure VisualRust has that path hard-coded somewhere.\r\n\r\nr? @brson", "tree": {"sha": "171730812e843524330c80017b1b5a409faab302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171730812e843524330c80017b1b5a409faab302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/749625ad6d15d0254b90e3d16f79d1cb1e260969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/749625ad6d15d0254b90e3d16f79d1cb1e260969", "html_url": "https://github.com/rust-lang/rust/commit/749625ad6d15d0254b90e3d16f79d1cb1e260969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/749625ad6d15d0254b90e3d16f79d1cb1e260969/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2bb53ca527b0fb86849b34f166f9835eb145203", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bb53ca527b0fb86849b34f166f9835eb145203", "html_url": "https://github.com/rust-lang/rust/commit/e2bb53ca527b0fb86849b34f166f9835eb145203"}, {"sha": "8cf50bc1fdaea47832a2b7404b435bf942cefd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf50bc1fdaea47832a2b7404b435bf942cefd5a", "html_url": "https://github.com/rust-lang/rust/commit/8cf50bc1fdaea47832a2b7404b435bf942cefd5a"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "76bee8618228276ad73ae23ec2c329d19b3213fa", "filename": "configure", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/749625ad6d15d0254b90e3d16f79d1cb1e260969/configure", "raw_url": "https://github.com/rust-lang/rust/raw/749625ad6d15d0254b90e3d16f79d1cb1e260969/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=749625ad6d15d0254b90e3d16f79d1cb1e260969", "patch": "@@ -632,18 +632,9 @@ putvar CFG_BUILD # Yes, this creates a duplicate entry, but the last one wins.\n CFG_HOST=$(to_llvm_triple $CFG_HOST)\n CFG_TARGET=$(to_llvm_triple $CFG_TARGET)\n \n-# On windows we just store the libraries in the bin directory because\n-# there's no rpath. This is where the build system itself puts libraries;\n-# --libdir is used to configure the installation directory.\n-# FIXME: This needs to parameterized over target triples. Do it in platform.mk\n-if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n-then\n-    CFG_LIBDIR_RELATIVE=bin\n-else\n-    CFG_LIBDIR_RELATIVE=lib\n-fi\n-\n-valopt libdir \"${CFG_PREFIX}/${CFG_LIBDIR_RELATIVE}\" \"install libraries (do not set it on windows platform)\"\n+# On Windows this determines root of the subtree for target libraries.\n+# Host runtime libs always go to 'bin'.\n+valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\"\n \n case \"$CFG_LIBDIR\" in\n     \"$CFG_PREFIX\"/*) CAT_INC=2;;\n@@ -654,11 +645,6 @@ esac\n \n CFG_LIBDIR_RELATIVE=`echo ${CFG_LIBDIR} | cut -c$((${#CFG_PREFIX}+${CAT_INC}))-`\n \n-if ( [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ] ) \\\n-\t&& [ \"$CFG_LIBDIR_RELATIVE\" != \"bin\" ]; then\n-    err \"libdir on windows should be set to 'bin'\"\n-fi\n-\n if [ $HELP -eq 1 ]\n then\n     echo"}, {"sha": "07186bd41b46921dcaf12544d10810a990496b1a", "filename": "mk/main.mk", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/749625ad6d15d0254b90e3d16f79d1cb1e260969/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/749625ad6d15d0254b90e3d16f79d1cb1e260969/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=749625ad6d15d0254b90e3d16f79d1cb1e260969", "patch": "@@ -376,18 +376,29 @@ define SREQ\n # Destinations of artifacts for the host compiler\n HROOT$(1)_H_$(3) = $(3)/stage$(1)\n HBIN$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n+\n ifeq ($$(CFG_WINDOWSY_$(3)),1)\n-HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)\n+# On Windows we always store host runtime libraries in the 'bin' directory because\n+# there's no rpath. Target libraries go under $CFG_LIBDIR_RELATIVE (usually 'lib').\n+HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n+TROOT$(1)_T_$(2)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)/rustlib/$(2)\n+# Remove the next 3 lines after a snapshot\n+ifeq ($(1),0)\n+RUSTFLAGS_STAGE0 += -L $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n+endif\n+\n else\n+\n ifeq ($(1),0)\n HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/lib\n else\n HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)\n endif\n+TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustlib/$(2)\n+\n endif\n \n # Destinations of artifacts for target architectures\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustlib/$(2)\n TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n "}, {"sha": "817215ffba0708b83940b5f7d0b5b699d24b06cd", "filename": "src/etc/make-win-dist.py", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/749625ad6d15d0254b90e3d16f79d1cb1e260969/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/749625ad6d15d0254b90e3d16f79d1cb1e260969/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=749625ad6d15d0254b90e3d16f79d1cb1e260969", "patch": "@@ -33,7 +33,11 @@ def find_files(files, path):\n     return found\n \n \n-def make_win_dist(rust_root, gcc_root, target_triple):\n+# rust_root - root directory of the host binaries image\n+# plat_root - root directory of the target platform tools and libs image\n+#             (the two get overlayed on top of each other during installation)\n+# target_triple - triple of the target image being layed out\n+def make_win_dist(rust_root, plat_root, target_triple):\n     # Ask gcc where it keeps its stuff\n     gcc_out = subprocess.check_output([\"gcc.exe\", \"-print-search-dirs\"])\n     bin_path = os.environ[\"PATH\"].split(os.pathsep)\n@@ -107,14 +111,14 @@ def make_win_dist(rust_root, gcc_root, target_triple):\n         shutil.copy(src, dist_bin_dir)\n \n     # Copy platform tools to platform-specific bin directory\n-    target_bin_dir = os.path.join(gcc_root, \"bin\", \"rustlib\", target_triple, \"bin\")\n+    target_bin_dir = os.path.join(plat_root, \"lib\", \"rustlib\", target_triple, \"bin\")\n     if not os.path.exists(target_bin_dir):\n         os.makedirs(target_bin_dir)\n     for src in target_tools:\n         shutil.copy(src, target_bin_dir)\n \n     # Copy platform libs to platform-specific lib directory\n-    target_lib_dir = os.path.join(gcc_root, \"bin\", \"rustlib\", target_triple, \"lib\")\n+    target_lib_dir = os.path.join(plat_root, \"lib\", \"rustlib\", target_triple, \"lib\")\n     if not os.path.exists(target_lib_dir):\n         os.makedirs(target_lib_dir)\n     for src in target_libs:"}, {"sha": "546c205f99c0466484e36bda40bc9389cb48ac39", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/749625ad6d15d0254b90e3d16f79d1cb1e260969/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749625ad6d15d0254b90e3d16f79d1cb1e260969/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=749625ad6d15d0254b90e3d16f79d1cb1e260969", "patch": "@@ -258,8 +258,6 @@ pub fn rust_path() -> Vec<PathBuf> {\n }\n \n // The name of the directory rustc expects libraries to be located.\n-// On Unix should be \"lib\", on windows \"bin\"\n-#[cfg(unix)]\n fn find_libdir(sysroot: &Path) -> String {\n     // FIXME: This is a quick hack to make the rustc binary able to locate\n     // Rust libraries in Linux environments where libraries might be installed\n@@ -293,11 +291,6 @@ fn find_libdir(sysroot: &Path) -> String {\n     }\n }\n \n-#[cfg(windows)]\n-fn find_libdir(_sysroot: &Path) -> String {\n-    \"bin\".to_string()\n-}\n-\n // The name of rustc's own place to organize libraries.\n // Used to be \"rustc\", now the default is \"rustlib\"\n pub fn rustlibdir() -> String {"}]}