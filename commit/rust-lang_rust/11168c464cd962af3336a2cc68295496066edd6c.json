{"sha": "11168c464cd962af3336a2cc68295496066edd6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTY4YzQ2NGNkOTYyYWYzMzM2YTJjYzY4Mjk1NDk2MDY2ZWRkNmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T00:25:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T00:25:20Z"}, "message": "move db basics to ra_db\n\nThis should allow to move hir to a separate crate", "tree": {"sha": "2c3b0bceea0dcf092ae8bf9d16c1508295606b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3b0bceea0dcf092ae8bf9d16c1508295606b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11168c464cd962af3336a2cc68295496066edd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11168c464cd962af3336a2cc68295496066edd6c", "html_url": "https://github.com/rust-lang/rust/commit/11168c464cd962af3336a2cc68295496066edd6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11168c464cd962af3336a2cc68295496066edd6c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2de95879a8d48cc4077895376b0aaed1e972169", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2de95879a8d48cc4077895376b0aaed1e972169", "html_url": "https://github.com/rust-lang/rust/commit/b2de95879a8d48cc4077895376b0aaed1e972169"}], "stats": {"total": 645, "additions": 352, "deletions": 293}, "files": [{"sha": "5113317b02c3abab3840eef5c4c07509ce32c444", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -607,6 +607,7 @@ dependencies = [\n  \"id-arena 1.0.2 (git+https://github.com/fitzgen/id-arena/?rev=43ecd67)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_db 0.1.0\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -628,6 +629,21 @@ dependencies = [\n  \"tools 0.1.0\",\n ]\n \n+[[package]]\n+name = \"ra_db\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"id-arena 1.0.2 (git+https://github.com/fitzgen/id-arena/?rev=43ecd67)\",\n+ \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_editor 0.1.0\",\n+ \"ra_syntax 0.1.0\",\n+ \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"test_utils 0.1.0\",\n+]\n+\n [[package]]\n name = \"ra_editor\"\n version = \"0.1.0\""}, {"sha": "48d8e56e372588778a8d0d189877d64adba942b9", "filename": "crates/ra_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2FCargo.toml?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -15,4 +15,5 @@ parking_lot = \"0.6.4\"\n id-arena = { git = \"https://github.com/fitzgen/id-arena/\", rev = \"43ecd67\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_editor = { path = \"../ra_editor\" }\n+ra_db = { path = \"../ra_db\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "538b51633fa1b24b232cb415d508050125d2a639", "filename": "crates/ra_analysis/src/completion/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fmod.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -7,10 +7,11 @@ use ra_syntax::{\n     AstNode, AtomEdit,\n     SyntaxNodeRef,\n };\n+use ra_db::SyntaxDatabase;\n use rustc_hash::{FxHashMap};\n \n use crate::{\n-    db::{self, SyntaxDatabase},\n+    db,\n     hir,\n     Cancelable, FilePosition\n };"}, {"sha": "1b2dd4b3daf0b8dc0c2270efb4aac1bd6d115968", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 16, "deletions": 53, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -1,15 +1,13 @@\n use std::sync::Arc;\n #[cfg(test)]\n use parking_lot::Mutex;\n-use ra_editor::LineIndex;\n-use ra_syntax::{SourceFileNode};\n use salsa::{self, Database};\n+use ra_db::{LocationIntener, BaseDatabase};\n \n use crate::{\n     hir,\n     symbol_index,\n-    loc2id::{IdMaps, LocationIntener, DefId, DefLoc, FnId},\n-    Cancelable, Canceled, FileId,\n+    loc2id::{IdMaps, DefId, DefLoc, FnId},\n };\n \n #[derive(Debug)]\n@@ -47,11 +45,11 @@ impl Default for RootDatabase {\n             runtime: salsa::Runtime::default(),\n             id_maps: Default::default(),\n         };\n-        db.query_mut(crate::input::SourceRootQuery)\n-            .set(crate::input::WORKSPACE, Default::default());\n-        db.query_mut(crate::input::CrateGraphQuery)\n+        db.query_mut(ra_db::SourceRootQuery)\n+            .set(ra_db::WORKSPACE, Default::default());\n+        db.query_mut(ra_db::CrateGraphQuery)\n             .set((), Default::default());\n-        db.query_mut(crate::input::LibrariesQuery)\n+        db.query_mut(ra_db::LibrariesQuery)\n             .set((), Default::default());\n         db\n     }\n@@ -67,22 +65,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n     }\n }\n \n-pub(crate) trait BaseDatabase: salsa::Database {\n-    fn id_maps(&self) -> &IdMaps;\n-    fn check_canceled(&self) -> Cancelable<()> {\n-        if self.salsa_runtime().is_current_revision_canceled() {\n-            Err(Canceled)\n-        } else {\n-            Ok(())\n-        }\n-    }\n-}\n-\n-impl BaseDatabase for RootDatabase {\n-    fn id_maps(&self) -> &IdMaps {\n-        &self.id_maps\n-    }\n-}\n+impl BaseDatabase for RootDatabase {}\n \n impl AsRef<LocationIntener<DefLoc, DefId>> for RootDatabase {\n     fn as_ref(&self) -> &LocationIntener<DefLoc, DefId> {\n@@ -121,16 +104,16 @@ impl RootDatabase {\n \n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n-        impl crate::input::FilesDatabase {\n-            fn file_text() for crate::input::FileTextQuery;\n-            fn file_source_root() for crate::input::FileSourceRootQuery;\n-            fn source_root() for crate::input::SourceRootQuery;\n-            fn libraries() for crate::input::LibrariesQuery;\n-            fn crate_graph() for crate::input::CrateGraphQuery;\n+        impl ra_db::FilesDatabase {\n+            fn file_text() for ra_db::FileTextQuery;\n+            fn file_source_root() for ra_db::FileSourceRootQuery;\n+            fn source_root() for ra_db::SourceRootQuery;\n+            fn libraries() for ra_db::LibrariesQuery;\n+            fn crate_graph() for ra_db::CrateGraphQuery;\n         }\n-        impl SyntaxDatabase {\n-            fn source_file() for SourceFileQuery;\n-            fn file_lines() for FileLinesQuery;\n+        impl ra_db::SyntaxDatabase {\n+            fn source_file() for ra_db::SourceFileQuery;\n+            fn file_lines() for ra_db::FileLinesQuery;\n         }\n         impl symbol_index::SymbolsDatabase {\n             fn file_symbols() for symbol_index::FileSymbolsQuery;\n@@ -148,23 +131,3 @@ salsa::database_storage! {\n         }\n     }\n }\n-\n-salsa::query_group! {\n-    pub(crate) trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n-        fn source_file(file_id: FileId) -> SourceFileNode {\n-            type SourceFileQuery;\n-        }\n-        fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n-            type FileLinesQuery;\n-        }\n-    }\n-}\n-\n-fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n-    let text = db.file_text(file_id);\n-    SourceFileNode::parse(&*text)\n-}\n-fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n-    let text = db.file_text(file_id);\n-    Arc::new(LineIndex::new(&*text))\n-}"}, {"sha": "0ae2086ff65b8b564883db9c9fad80f264520c66", "filename": "crates/ra_analysis/src/hir/db.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -4,19 +4,18 @@ use ra_syntax::{\n     SyntaxNode,\n     ast::FnDefNode,\n };\n+use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase};\n \n use crate::{\n     FileId,\n-    db::SyntaxDatabase,\n     hir::{\n         SourceFileItems, SourceItemId,\n         query_definitions,\n         function::{FnScopes},\n         module::{ModuleId, ModuleTree, ModuleSource,\n         nameres::{ItemMap, InputModuleItems}},\n     },\n-    input::SourceRootId,\n-    loc2id::{DefLoc, DefId, FnId, LocationIntener},\n+    loc2id::{DefLoc, DefId, FnId},\n     Cancelable,\n };\n "}, {"sha": "ed789fede2ec5c9365e15274b8ce20d180a20093", "filename": "crates/ra_analysis/src/hir/function/scope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fscope.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -5,9 +5,10 @@ use ra_syntax::{\n     algo::generate,\n     ast::{self, ArgListOwner, LoopBodyOwner, NameOwner},\n };\n+use ra_db::LocalSyntaxPtr;\n \n use crate::{\n-    syntax_ptr::LocalSyntaxPtr,\n+\n     arena::{Arena, Id},\n };\n "}, {"sha": "c8f7ed58d19d8b687e7dd9a7694a8cf7ec1d4630", "filename": "crates/ra_analysis/src/hir/module/imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -6,11 +6,11 @@ use ra_syntax::{\n };\n use relative_path::RelativePathBuf;\n use rustc_hash::{FxHashMap, FxHashSet};\n+use ra_db::{SourceRoot, SourceRootId, FileResolverImp};\n \n use crate::{\n     hir::HirDatabase,\n-    input::{SourceRoot, SourceRootId},\n-    Cancelable, FileId, FileResolverImp,\n+    Cancelable, FileId,\n };\n \n use super::{"}, {"sha": "683cb5d4c0718834753d1efa12227ad2f35285a3", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -10,12 +10,12 @@ use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     SmolStr, SyntaxNode,\n };\n+use ra_db::SourceRootId;\n use relative_path::RelativePathBuf;\n \n use crate::{\n     FileId, FilePosition, Cancelable,\n     hir::{Path, PathKind, HirDatabase, SourceItemId},\n-    input::SourceRootId,\n     arena::{Arena, Id},\n     loc2id::{DefLoc, DefId},\n };"}, {"sha": "5c87e7af205bfdd320db509830c646285990431c", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -19,12 +19,12 @@ use std::{\n };\n \n use rustc_hash::FxHashMap;\n-\n use ra_syntax::{\n     TextRange,\n     SmolStr, SyntaxKind::{self, *},\n     ast::{self, AstNode}\n };\n+use ra_db::SourceRootId;\n \n use crate::{\n     Cancelable, FileId,\n@@ -35,7 +35,6 @@ use crate::{\n         HirDatabase,\n         module::{ModuleId, ModuleTree},\n     },\n-    input::SourceRootId,\n };\n \n /// Item map is the result of the name resolution. Item map contains, for each\n@@ -342,11 +341,11 @@ where\n \n #[cfg(test)]\n mod tests {\n+    use ra_db::FilesDatabase;\n     use crate::{\n         AnalysisChange,\n         mock_analysis::{MockAnalysis, analysis_and_position},\n         hir::{self, HirDatabase},\n-        input::FilesDatabase,\n };\n     use super::*;\n "}, {"sha": "fbdf8eb6784e7bb6db455782d79826e85ce36462", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -8,6 +8,7 @@ use ra_syntax::{\n     AstNode,  SyntaxNode, SmolStr,\n     ast::{self, FnDef, FnDefNode, NameOwner, ModuleItemOwner}\n };\n+use ra_db::SourceRootId;\n \n use crate::{\n     FileId, Cancelable,\n@@ -21,7 +22,6 @@ use crate::{\n             nameres::{InputModuleItems, ItemMap, Resolver},\n         },\n     },\n-    input::SourceRootId,\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`"}, {"sha": "9a86942214f9759d093a31dabbcffb38786d6123", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 15, "deletions": 86, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -1,6 +1,5 @@\n use std::{\n     fmt,\n-    hash::{Hash, Hasher},\n     sync::Arc,\n };\n \n@@ -11,84 +10,24 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n+use ra_db::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE, SyntaxDatabase, SourceFileQuery};\n use rayon::prelude::*;\n-use relative_path::RelativePath;\n use rustc_hash::FxHashSet;\n use salsa::{Database, ParallelDatabase};\n \n use crate::{\n     completion::{completions, CompletionItem},\n-    db::{self, SourceFileQuery, SyntaxDatabase},\n+    db,\n     hir::{\n         self,\n         FnSignatureInfo,\n         Problem,\n     },\n-    input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n     symbol_index::{SymbolIndex, SymbolsDatabase},\n-    AnalysisChange, Cancelable, CrateGraph, CrateId, Diagnostic, FileId, FileResolver,\n+    AnalysisChange, Cancelable, CrateId, Diagnostic, FileId,\n     FileSystemEdit, FilePosition, Query, SourceChange, SourceFileNodeEdit,\n };\n \n-#[derive(Clone, Debug)]\n-pub(crate) struct FileResolverImp {\n-    inner: Arc<FileResolver>,\n-}\n-\n-impl PartialEq for FileResolverImp {\n-    fn eq(&self, other: &FileResolverImp) -> bool {\n-        self.inner() == other.inner()\n-    }\n-}\n-\n-impl Eq for FileResolverImp {}\n-\n-impl Hash for FileResolverImp {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.inner().hash(hasher);\n-    }\n-}\n-\n-impl FileResolverImp {\n-    pub(crate) fn new(inner: Arc<FileResolver>) -> FileResolverImp {\n-        FileResolverImp { inner }\n-    }\n-    pub(crate) fn file_stem(&self, file_id: FileId) -> String {\n-        self.inner.file_stem(file_id)\n-    }\n-    pub(crate) fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n-        self.inner.resolve(file_id, path)\n-    }\n-    pub(crate) fn debug_path(&self, file_id: FileId) -> Option<std::path::PathBuf> {\n-        self.inner.debug_path(file_id)\n-    }\n-    fn inner(&self) -> *const FileResolver {\n-        &*self.inner\n-    }\n-}\n-\n-impl Default for FileResolverImp {\n-    fn default() -> FileResolverImp {\n-        #[derive(Debug)]\n-        struct DummyResolver;\n-        impl FileResolver for DummyResolver {\n-            fn file_stem(&self, _file_: FileId) -> String {\n-                panic!(\"file resolver not set\")\n-            }\n-            fn resolve(\n-                &self,\n-                _file_id: FileId,\n-                _path: &::relative_path::RelativePath,\n-            ) -> Option<FileId> {\n-                panic!(\"file resolver not set\")\n-            }\n-        }\n-        FileResolverImp {\n-            inner: Arc::new(DummyResolver),\n-        }\n-    }\n-}\n-\n #[derive(Debug, Default)]\n pub(crate) struct AnalysisHostImpl {\n     db: db::RootDatabase,\n@@ -105,7 +44,7 @@ impl AnalysisHostImpl {\n \n         for (file_id, text) in change.files_changed {\n             self.db\n-                .query_mut(crate::input::FileTextQuery)\n+                .query_mut(ra_db::FileTextQuery)\n                 .set(file_id, Arc::new(text))\n         }\n         if !(change.files_added.is_empty() && change.files_removed.is_empty()) {\n@@ -115,22 +54,22 @@ impl AnalysisHostImpl {\n             let mut source_root = SourceRoot::clone(&self.db.source_root(WORKSPACE));\n             for (file_id, text) in change.files_added {\n                 self.db\n-                    .query_mut(crate::input::FileTextQuery)\n+                    .query_mut(ra_db::FileTextQuery)\n                     .set(file_id, Arc::new(text));\n                 self.db\n-                    .query_mut(crate::input::FileSourceRootQuery)\n-                    .set(file_id, crate::input::WORKSPACE);\n+                    .query_mut(ra_db::FileSourceRootQuery)\n+                    .set(file_id, ra_db::WORKSPACE);\n                 source_root.files.insert(file_id);\n             }\n             for file_id in change.files_removed {\n                 self.db\n-                    .query_mut(crate::input::FileTextQuery)\n+                    .query_mut(ra_db::FileTextQuery)\n                     .set(file_id, Arc::new(String::new()));\n                 source_root.files.remove(&file_id);\n             }\n             source_root.file_resolver = file_resolver;\n             self.db\n-                .query_mut(crate::input::SourceRootQuery)\n+                .query_mut(ra_db::SourceRootQuery)\n                 .set(WORKSPACE, Arc::new(source_root))\n         }\n         if !change.libraries_added.is_empty() {\n@@ -147,30 +86,30 @@ impl AnalysisHostImpl {\n                         library.file_resolver.debug_path(file_id)\n                     );\n                     self.db\n-                        .query_mut(crate::input::FileSourceRootQuery)\n+                        .query_mut(ra_db::FileSourceRootQuery)\n                         .set_constant(file_id, source_root_id);\n                     self.db\n-                        .query_mut(crate::input::FileTextQuery)\n+                        .query_mut(ra_db::FileTextQuery)\n                         .set_constant(file_id, Arc::new(text));\n                 }\n                 let source_root = SourceRoot {\n                     files,\n                     file_resolver: library.file_resolver,\n                 };\n                 self.db\n-                    .query_mut(crate::input::SourceRootQuery)\n+                    .query_mut(ra_db::SourceRootQuery)\n                     .set(source_root_id, Arc::new(source_root));\n                 self.db\n                     .query_mut(crate::symbol_index::LibrarySymbolsQuery)\n                     .set(source_root_id, Arc::new(library.symbol_index));\n             }\n             self.db\n-                .query_mut(crate::input::LibrariesQuery)\n+                .query_mut(ra_db::LibrariesQuery)\n                 .set((), Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n             self.db\n-                .query_mut(crate::input::CrateGraphQuery)\n+                .query_mut(ra_db::CrateGraphQuery)\n                 .set((), Arc::new(crate_graph))\n         }\n     }\n@@ -261,7 +200,7 @@ impl AnalysisImpl {\n         Ok(crate_id.into_iter().collect())\n     }\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n-        self.db.crate_graph().crate_roots[&crate_id]\n+        self.db.crate_graph().crate_root(crate_id)\n     }\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         completions(&self.db, position)\n@@ -546,16 +485,6 @@ impl SourceChange {\n     }\n }\n \n-impl CrateGraph {\n-    fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n-        let (&crate_id, _) = self\n-            .crate_roots\n-            .iter()\n-            .find(|(_crate_id, &root_id)| root_id == file_id)?;\n-        Some(crate_id)\n-    }\n-}\n-\n enum FnCallNode<'a> {\n     CallExpr(ast::CallExpr<'a>),\n     MethodCallExpr(ast::MethodCallExpr<'a>),"}, {"sha": "012d36b8ed372f66710280036e2ca274b43d29e0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -19,8 +19,6 @@ macro_rules! ctry {\n }\n \n mod arena;\n-mod syntax_ptr;\n-mod input;\n mod db;\n mod loc2id;\n mod imp;\n@@ -32,35 +30,27 @@ pub mod mock_analysis;\n use std::{fmt, sync::Arc};\n \n use ra_syntax::{AtomEdit, SourceFileNode, TextRange, TextUnit};\n+use ra_db::FileResolverImp;\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n \n use crate::{\n-    imp::{AnalysisHostImpl, AnalysisImpl, FileResolverImp},\n+    imp::{AnalysisHostImpl, AnalysisImpl},\n     symbol_index::SymbolIndex,\n };\n \n pub use crate::{\n     completion::CompletionItem,\n     hir::FnSignatureInfo,\n-    input::{CrateGraph, CrateId, FileId, FileResolver},\n };\n pub use ra_editor::{\n     FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable, RunnableKind, StructureNode,\n };\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct Canceled;\n-\n-pub type Cancelable<T> = Result<T, Canceled>;\n-\n-impl std::fmt::Display for Canceled {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        fmt.write_str(\"Canceled\")\n-    }\n-}\n-\n-impl std::error::Error for Canceled {}\n+pub use ra_db::{\n+    Canceled, Cancelable,\n+    CrateGraph, CrateId, FileId, FileResolver\n+};\n \n #[derive(Default)]\n pub struct AnalysisChange {"}, {"sha": "7956431ab059d4a87f15740bc1c2ec2e5c0ca171", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "modified", "additions": 2, "deletions": 100, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -1,74 +1,10 @@\n-use parking_lot::Mutex;\n-\n-use std::hash::Hash;\n-\n-use rustc_hash::FxHashMap;\n+use ra_db::SourceRootId;\n \n use crate::{\n     hir::{SourceItemId, ModuleId},\n-    input::SourceRootId,\n };\n \n-/// There are two principle ways to refer to things:\n-///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n-///   - by their numeric id (module `ModuleId(42)`)\n-///\n-/// The first one is more powerful (you can actually find the thing in question\n-/// by id), but the second one is so much more compact.\n-///\n-/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n-/// bidirectional mapping between positional and numeric ids, we can use compact\n-/// representation wich still allows us to get the actual item\n-#[derive(Debug)]\n-struct Loc2IdMap<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    loc2id: FxHashMap<LOC, ID>,\n-    id2loc: FxHashMap<ID, LOC>,\n-}\n-\n-impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        Loc2IdMap {\n-            loc2id: FxHashMap::default(),\n-            id2loc: FxHashMap::default(),\n-        }\n-    }\n-}\n-\n-impl<LOC, ID> Loc2IdMap<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    pub fn loc2id(&mut self, loc: &LOC) -> ID {\n-        match self.loc2id.get(loc) {\n-            Some(id) => return id.clone(),\n-            None => (),\n-        }\n-        let id = self.loc2id.len();\n-        assert!(id < u32::max_value() as usize);\n-        let id = ID::from_u32(id as u32);\n-        self.loc2id.insert(loc.clone(), id.clone());\n-        self.id2loc.insert(id.clone(), loc.clone());\n-        id\n-    }\n-\n-    pub fn id2loc(&self, id: ID) -> LOC {\n-        self.id2loc[&id].clone()\n-    }\n-}\n-\n-pub(crate) trait NumericId: Clone + Eq + Hash {\n-    fn from_u32(id: u32) -> Self;\n-    fn to_u32(self) -> u32;\n-}\n+use ra_db::{NumericId, LocationIntener};\n \n macro_rules! impl_numeric_id {\n     ($id:ident) => {\n@@ -131,37 +67,3 @@ pub(crate) struct IdMaps {\n     pub(crate) fns: LocationIntener<SourceItemId, FnId>,\n     pub(crate) defs: LocationIntener<DefLoc, DefId>,\n }\n-\n-#[derive(Debug)]\n-pub(crate) struct LocationIntener<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    map: Mutex<Loc2IdMap<LOC, ID>>,\n-}\n-\n-impl<LOC, ID> Default for LocationIntener<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn default() -> Self {\n-        LocationIntener {\n-            map: Default::default(),\n-        }\n-    }\n-}\n-\n-impl<LOC, ID> LocationIntener<LOC, ID>\n-where\n-    ID: NumericId,\n-    LOC: Clone + Eq + Hash,\n-{\n-    fn loc2id(&self, loc: &LOC) -> ID {\n-        self.map.lock().loc2id(loc)\n-    }\n-    fn id2loc(&self, id: ID) -> LOC {\n-        self.map.lock().id2loc(id)\n-    }\n-}"}, {"sha": "b48a372298746cee6dbed07d1ebc05f4af33604c", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -9,13 +9,12 @@ use ra_syntax::{\n     SourceFileNode,\n     SyntaxKind::{self, *},\n };\n+use ra_db::{SyntaxDatabase, SourceRootId};\n use rayon::prelude::*;\n \n use crate::{\n     Cancelable,\n     FileId, Query,\n-    db::SyntaxDatabase,\n-    input::SourceRootId,\n };\n \n salsa::query_group! {"}, {"sha": "fbe89f44489547054376930c042a44801ff3efaf", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -126,7 +126,7 @@ fn test_resolve_crate_root() {\n     let mut host = mock.analysis_host();\n     assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n \n-    let mut crate_graph = CrateGraph::new();\n+    let mut crate_graph = CrateGraph::default();\n     let crate_id = crate_graph.add_crate_root(root_file);\n     let mut change = AnalysisChange::new();\n     change.set_crate_graph(crate_graph);"}, {"sha": "3bf2f635e755fe1f7b8d066140790cf3712206c4", "filename": "crates/ra_db/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_db\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]\n+log = \"0.4.5\"\n+relative-path = \"0.4.0\"\n+salsa = \"0.8.0\"\n+rustc-hash = \"1.0\"\n+parking_lot = \"0.6.4\"\n+id-arena = { git = \"https://github.com/fitzgen/id-arena/\", rev = \"43ecd67\" }\n+ra_syntax = { path = \"../ra_syntax\" }\n+ra_editor = { path = \"../ra_editor\" }\n+test_utils = { path = \"../test_utils\" }"}, {"sha": "f849ac75214c81d23eff6dd0bfc748358bdaabd1", "filename": "crates/ra_db/src/file_resolver.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffile_resolver.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -0,0 +1,76 @@\n+use std::{\n+    sync::Arc,\n+    hash::{Hash, Hasher},\n+    fmt,\n+};\n+\n+use relative_path::RelativePath;\n+\n+use crate::input::FileId;\n+\n+pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n+    fn file_stem(&self, file_id: FileId) -> String;\n+    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n+    fn debug_path(&self, _1file_id: FileId) -> Option<std::path::PathBuf> {\n+        None\n+    }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub struct FileResolverImp {\n+    inner: Arc<FileResolver>,\n+}\n+\n+impl PartialEq for FileResolverImp {\n+    fn eq(&self, other: &FileResolverImp) -> bool {\n+        self.inner() == other.inner()\n+    }\n+}\n+\n+impl Eq for FileResolverImp {}\n+\n+impl Hash for FileResolverImp {\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.inner().hash(hasher);\n+    }\n+}\n+\n+impl FileResolverImp {\n+    pub fn new(inner: Arc<FileResolver>) -> FileResolverImp {\n+        FileResolverImp { inner }\n+    }\n+    pub fn file_stem(&self, file_id: FileId) -> String {\n+        self.inner.file_stem(file_id)\n+    }\n+    pub fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId> {\n+        self.inner.resolve(file_id, path)\n+    }\n+    pub fn debug_path(&self, file_id: FileId) -> Option<std::path::PathBuf> {\n+        self.inner.debug_path(file_id)\n+    }\n+    fn inner(&self) -> *const FileResolver {\n+        &*self.inner\n+    }\n+}\n+\n+impl Default for FileResolverImp {\n+    fn default() -> FileResolverImp {\n+        #[derive(Debug)]\n+        struct DummyResolver;\n+        impl FileResolver for DummyResolver {\n+            fn file_stem(&self, _file_: FileId) -> String {\n+                panic!(\"file resolver not set\")\n+            }\n+            fn resolve(\n+                &self,\n+                _file_id: FileId,\n+                _path: &::relative_path::RelativePath,\n+            ) -> Option<FileId> {\n+                panic!(\"file resolver not set\")\n+            }\n+        }\n+        FileResolverImp {\n+            inner: Arc::new(DummyResolver),\n+        }\n+    }\n+}"}, {"sha": "9101ac7a8a37a6f109780200125dd8e965bea8c0", "filename": "crates/ra_db/src/input.rs", "status": "renamed", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -1,11 +1,10 @@\n-use std::{fmt, sync::Arc};\n+use std::sync::Arc;\n \n-use relative_path::RelativePath;\n use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n use salsa;\n \n-use crate::FileResolverImp;\n+use crate::file_resolver::FileResolverImp;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct FileId(pub u32);\n@@ -19,27 +18,26 @@ pub struct CrateGraph {\n }\n \n impl CrateGraph {\n-    pub fn new() -> CrateGraph {\n-        CrateGraph::default()\n+    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n+        self.crate_roots[&crate_id]\n     }\n     pub fn add_crate_root(&mut self, file_id: FileId) -> CrateId {\n         let crate_id = CrateId(self.crate_roots.len() as u32);\n         let prev = self.crate_roots.insert(crate_id, file_id);\n         assert!(prev.is_none());\n         crate_id\n     }\n-}\n-\n-pub trait FileResolver: fmt::Debug + Send + Sync + 'static {\n-    fn file_stem(&self, file_id: FileId) -> String;\n-    fn resolve(&self, file_id: FileId, path: &RelativePath) -> Option<FileId>;\n-    fn debug_path(&self, _1file_id: FileId) -> Option<std::path::PathBuf> {\n-        None\n+    pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n+        let (&crate_id, _) = self\n+            .crate_roots\n+            .iter()\n+            .find(|(_crate_id, &root_id)| root_id == file_id)?;\n+        Some(crate_id)\n     }\n }\n \n salsa::query_group! {\n-    pub(crate) trait FilesDatabase: salsa::Database {\n+    pub trait FilesDatabase: salsa::Database {\n         fn file_text(file_id: FileId) -> Arc<String> {\n             type FileTextQuery;\n             storage input;\n@@ -64,12 +62,12 @@ salsa::query_group! {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub(crate) struct SourceRootId(pub(crate) u32);\n+pub struct SourceRootId(pub u32);\n \n #[derive(Default, Clone, Debug, PartialEq, Eq)]\n-pub(crate) struct SourceRoot {\n-    pub(crate) file_resolver: FileResolverImp,\n-    pub(crate) files: FxHashSet<FileId>,\n+pub struct SourceRoot {\n+    pub file_resolver: FileResolverImp,\n+    pub files: FxHashSet<FileId>,\n }\n \n-pub(crate) const WORKSPACE: SourceRootId = SourceRootId(0);\n+pub const WORKSPACE: SourceRootId = SourceRootId(0);", "previous_filename": "crates/ra_analysis/src/input.rs"}, {"sha": "833f95eeb01e88e5be115193f70c8ebcaf93ad52", "filename": "crates/ra_db/src/lib.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -0,0 +1,69 @@\n+//! ra_db defines basic database traits. Concrete DB is defined by ra_analysis.\n+\n+extern crate ra_editor;\n+extern crate ra_syntax;\n+extern crate relative_path;\n+extern crate rustc_hash;\n+extern crate salsa;\n+\n+mod syntax_ptr;\n+mod file_resolver;\n+mod input;\n+mod loc2id;\n+\n+use std::sync::Arc;\n+use ra_editor::LineIndex;\n+use ra_syntax::SourceFileNode;\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct Canceled;\n+\n+pub type Cancelable<T> = Result<T, Canceled>;\n+\n+impl std::fmt::Display for Canceled {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        fmt.write_str(\"Canceled\")\n+    }\n+}\n+\n+impl std::error::Error for Canceled {}\n+\n+pub use crate::{\n+    syntax_ptr::LocalSyntaxPtr,\n+    file_resolver::{FileResolver, FileResolverImp},\n+    input::{\n+        FilesDatabase, FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, WORKSPACE,\n+        FileTextQuery, FileSourceRootQuery, SourceRootQuery, LibrariesQuery, CrateGraphQuery,\n+    },\n+    loc2id::{LocationIntener, NumericId},\n+};\n+\n+pub trait BaseDatabase: salsa::Database {\n+    fn check_canceled(&self) -> Cancelable<()> {\n+        if self.salsa_runtime().is_current_revision_canceled() {\n+            Err(Canceled)\n+        } else {\n+            Ok(())\n+        }\n+    }\n+}\n+\n+salsa::query_group! {\n+    pub trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n+        fn source_file(file_id: FileId) -> SourceFileNode {\n+            type SourceFileQuery;\n+        }\n+        fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n+            type FileLinesQuery;\n+        }\n+    }\n+}\n+\n+fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n+    let text = db.file_text(file_id);\n+    SourceFileNode::parse(&*text)\n+}\n+fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n+    let text = db.file_text(file_id);\n+    Arc::new(LineIndex::new(&*text))\n+}"}, {"sha": "69ba43d0f76c0ef5e208c268367acf38487bc35e", "filename": "crates/ra_db/src/loc2id.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Floc2id.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -0,0 +1,100 @@\n+use parking_lot::Mutex;\n+\n+use std::hash::Hash;\n+\n+use rustc_hash::FxHashMap;\n+\n+/// There are two principle ways to refer to things:\n+///   - by their locatinon (module in foo/bar/baz.rs at line 42)\n+///   - by their numeric id (module `ModuleId(42)`)\n+///\n+/// The first one is more powerful (you can actually find the thing in question\n+/// by id), but the second one is so much more compact.\n+///\n+/// `Loc2IdMap` allows us to have a cake an eat it as well: by maintaining a\n+/// bidirectional mapping between positional and numeric ids, we can use compact\n+/// representation wich still allows us to get the actual item\n+#[derive(Debug)]\n+struct Loc2IdMap<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    loc2id: FxHashMap<LOC, ID>,\n+    id2loc: FxHashMap<ID, LOC>,\n+}\n+\n+impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    fn default() -> Self {\n+        Loc2IdMap {\n+            loc2id: FxHashMap::default(),\n+            id2loc: FxHashMap::default(),\n+        }\n+    }\n+}\n+\n+impl<LOC, ID> Loc2IdMap<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    pub fn loc2id(&mut self, loc: &LOC) -> ID {\n+        match self.loc2id.get(loc) {\n+            Some(id) => return id.clone(),\n+            None => (),\n+        }\n+        let id = self.loc2id.len();\n+        assert!(id < u32::max_value() as usize);\n+        let id = ID::from_u32(id as u32);\n+        self.loc2id.insert(loc.clone(), id.clone());\n+        self.id2loc.insert(id.clone(), loc.clone());\n+        id\n+    }\n+\n+    pub fn id2loc(&self, id: ID) -> LOC {\n+        self.id2loc[&id].clone()\n+    }\n+}\n+\n+pub trait NumericId: Clone + Eq + Hash {\n+    fn from_u32(id: u32) -> Self;\n+    fn to_u32(self) -> u32;\n+}\n+\n+#[derive(Debug)]\n+pub struct LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    map: Mutex<Loc2IdMap<LOC, ID>>,\n+}\n+\n+impl<LOC, ID> Default for LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    fn default() -> Self {\n+        LocationIntener {\n+            map: Default::default(),\n+        }\n+    }\n+}\n+\n+impl<LOC, ID> LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    pub fn loc2id(&self, loc: &LOC) -> ID {\n+        self.map.lock().loc2id(loc)\n+    }\n+    pub fn id2loc(&self, id: ID) -> LOC {\n+        self.map.lock().id2loc(id)\n+    }\n+}"}, {"sha": "dac94dd36ddfba692c67f64da61dec384e61f2a0", "filename": "crates/ra_db/src/syntax_ptr.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -2,20 +2,20 @@ use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, TextRange\n \n /// A pionter to a syntax node inside a file.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct LocalSyntaxPtr {\n+pub struct LocalSyntaxPtr {\n     range: TextRange,\n     kind: SyntaxKind,\n }\n \n impl LocalSyntaxPtr {\n-    pub(crate) fn new(node: SyntaxNodeRef) -> LocalSyntaxPtr {\n+    pub fn new(node: SyntaxNodeRef) -> LocalSyntaxPtr {\n         LocalSyntaxPtr {\n             range: node.range(),\n             kind: node.kind(),\n         }\n     }\n \n-    pub(crate) fn resolve(self, file: &SourceFileNode) -> SyntaxNode {\n+    pub fn resolve(self, file: &SourceFileNode) -> SyntaxNode {\n         let mut curr = file.syntax();\n         loop {\n             if curr.range() == self.range && curr.kind() == self.kind {\n@@ -28,7 +28,7 @@ impl LocalSyntaxPtr {\n         }\n     }\n \n-    pub(crate) fn range(self) -> TextRange {\n+    pub fn range(self) -> TextRange {\n         self.range\n     }\n }", "previous_filename": "crates/ra_analysis/src/syntax_ptr.rs"}, {"sha": "12faeb93afe7a2fa2f96de8f5c03aa8100b72dc0", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11168c464cd962af3336a2cc68295496066edd6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=11168c464cd962af3336a2cc68295496066edd6c", "patch": "@@ -140,7 +140,7 @@ impl ServerWorldState {\n         Ok(file_id)\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n-        let mut crate_graph = CrateGraph::new();\n+        let mut crate_graph = CrateGraph::default();\n         ws.iter()\n             .flat_map(|ws| {\n                 ws.packages()"}]}