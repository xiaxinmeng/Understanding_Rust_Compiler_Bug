{"sha": "689f6ce5d06439ad39ee6f82774689e399f23422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWY2Y2U1ZDA2NDM5YWQzOWVlNmY4Mjc3NDY4OWUzOTlmMjM0MjI=", "commit": {"author": {"name": "Gareth Daniel Smith", "email": "garethdanielsmith@gmail.com", "date": "2012-11-25T13:28:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-26T22:34:50Z"}, "message": "Add insert and remove methods to vecs - as proposed in issue #4028.", "tree": {"sha": "0a90c3b74ee3676c98c03d22d78117866ec68c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a90c3b74ee3676c98c03d22d78117866ec68c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689f6ce5d06439ad39ee6f82774689e399f23422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689f6ce5d06439ad39ee6f82774689e399f23422", "html_url": "https://github.com/rust-lang/rust/commit/689f6ce5d06439ad39ee6f82774689e399f23422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689f6ce5d06439ad39ee6f82774689e399f23422/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee0b767bca4b92c4a3c29d06727627fce335208", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee0b767bca4b92c4a3c29d06727627fce335208", "html_url": "https://github.com/rust-lang/rust/commit/aee0b767bca4b92c4a3c29d06727627fce335208"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "7ea63ae40a2b91fa9c412899047e65f1c4eb1058", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/689f6ce5d06439ad39ee6f82774689e399f23422/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f6ce5d06439ad39ee6f82774689e399f23422/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=689f6ce5d06439ad39ee6f82774689e399f23422", "patch": "@@ -419,6 +419,34 @@ pub fn unshift<T>(v: &mut ~[T], x: T) {\n     v.push_all_move(move vv);\n }\n \n+/// Insert an element at position i within v, shifting all\n+/// elements after position i one position to the right.\n+pub fn insert<T>(v: &mut ~[T], i: uint, x: T) {\n+    let len = v.len();\n+    assert i <= len;\n+\n+    v.push(move x);\n+    let mut j = len;\n+    while j > i {\n+        v[j] <-> v[j - 1];\n+        j -= 1;\n+    }\n+}\n+\n+/// Remove and return the element at position i within v, shifting\n+/// all elements after position i one position to the left.\n+pub fn remove<T>(v: &mut ~[T], i: uint) -> T {\n+    let len = v.len();\n+    assert i < len;\n+\n+    let mut j = i;\n+    while j < len - 1 {\n+        v[j] <-> v[j + 1];\n+        j += 1;\n+    }\n+    move v.pop()\n+}\n+\n pub fn consume<T>(v: ~[T], f: fn(uint, v: T)) unsafe {\n     let mut v = move v; // FIXME(#3488)\n \n@@ -1685,6 +1713,8 @@ pub trait MutableVector<T> {\n     fn pop(&mut self) -> T;\n     fn shift(&mut self) -> T;\n     fn unshift(&mut self, x: T);\n+    fn insert(&mut self, i: uint, x:T);\n+    fn remove(&mut self, i: uint) -> T;\n     fn swap_remove(&mut self, index: uint) -> T;\n     fn truncate(&mut self, newlen: uint);\n     fn retain(&mut self, f: pure fn(t: &T) -> bool);\n@@ -1722,6 +1752,14 @@ impl<T> ~[T]: MutableVector<T> {\n         unshift(self, move x)\n     }\n \n+    fn insert(&mut self, i: uint, x:T) {\n+        insert(self, i, move x)\n+    }\n+\n+    fn remove(&mut self, i: uint) -> T {\n+        remove(self, i)\n+    }\n+\n     fn swap_remove(&mut self, index: uint) -> T {\n         swap_remove(self, index)\n     }\n@@ -2925,6 +2963,54 @@ mod tests {\n         assert x == ~[0, 1, 2, 3];\n     }\n \n+    #[test]\n+    fn test_insert() {\n+        let mut a = ~[1, 2, 4];\n+        a.insert(2, 3);\n+        assert a == ~[1, 2, 3, 4];\n+\n+        let mut a = ~[1, 2, 3];\n+        a.insert(0, 0);\n+        assert a == ~[0, 1, 2, 3];\n+\n+        let mut a = ~[1, 2, 3];\n+        a.insert(3, 4);\n+        assert a == ~[1, 2, 3, 4];\n+\n+        let mut a = ~[];\n+        a.insert(0, 1);\n+        assert a == ~[1];\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_insert_oob() {\n+        let mut a = ~[1, 2, 3];\n+        a.insert(4, 5);\n+    }\n+\n+    #[test]\n+    fn test_remove() {\n+        let mut a = ~[1, 2, 3, 4];\n+        a.remove(2);\n+        assert a == ~[1, 2, 4];\n+\n+        let mut a = ~[1, 2, 3];\n+        a.remove(0);\n+        assert a == ~[2, 3];\n+\n+        let mut a = ~[1];\n+        a.remove(0);\n+        assert a == ~[];\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_remove_oob() {\n+        let mut a = ~[1, 2, 3];\n+        a.remove(3);\n+    }\n+\n     #[test]\n     fn test_capacity() {\n         let mut v = ~[0u64];"}]}