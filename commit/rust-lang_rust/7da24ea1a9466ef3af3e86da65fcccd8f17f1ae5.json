{"sha": "7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYTI0ZWExYTk0NjZlZjNhZjNlODZkYTY1ZmNjY2Q4ZjE3ZjFhZTU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T08:19:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-11T17:30:19Z"}, "message": "hashmap: port to the new allocator API", "tree": {"sha": "94aba90e634200671b8635708483eee8ee594445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94aba90e634200671b8635708483eee8ee594445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "html_url": "https://github.com/rust-lang/rust/commit/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032510bae206a789ce9a18f1c8d692f6120591ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/032510bae206a789ce9a18f1c8d692f6120591ab", "html_url": "https://github.com/rust-lang/rust/commit/032510bae206a789ce9a18f1c8d692f6120591ab"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "7dfc89b01de745a745d6e772da194eb277adc958", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=7da24ea1a9466ef3af3e86da65fcccd8f17f1ae5", "patch": "@@ -30,8 +30,6 @@ use std::result::{Ok, Err};\n use std::slice::ImmutableVector;\n \n mod table {\n-    extern crate libc;\n-\n     use std::clone::Clone;\n     use std::cmp;\n     use std::cmp::Eq;\n@@ -42,10 +40,10 @@ mod table {\n     use std::prelude::Drop;\n     use std::ptr;\n     use std::ptr::RawPtr;\n-    use std::rt::libc_heap;\n-    use std::intrinsics::{size_of, min_align_of, transmute};\n-    use std::intrinsics::{move_val_init, set_memory};\n+    use std::mem::{min_align_of, size_of};\n+    use std::intrinsics::{move_val_init, set_memory, transmute};\n     use std::iter::{Iterator, range_step_inclusive};\n+    use std::rt::heap::{allocate, deallocate};\n \n     static EMPTY_BUCKET: u64 = 0u64;\n \n@@ -185,10 +183,6 @@ mod table {\n         assert_eq!(round_up_to_next(5, 4), 8);\n     }\n \n-    fn has_alignment(n: uint, alignment: uint) -> bool {\n-        round_up_to_next(n, alignment) == n\n-    }\n-\n     // Returns a tuple of (minimum required malloc alignment, hash_offset,\n     // key_offset, val_offset, array_size), from the start of a mallocated array.\n     fn calculate_offsets(\n@@ -243,12 +237,7 @@ mod table {\n                     keys_size,   min_align_of::< K >(),\n                     vals_size,   min_align_of::< V >());\n \n-            let buffer = libc_heap::malloc_raw(size) as *mut u8;\n-\n-            // FIXME #13094: If malloc was not at as aligned as we expected,\n-            // our offset calculations are just plain wrong. We could support\n-            // any alignment if we switched from `malloc` to `posix_memalign`.\n-            assert!(has_alignment(buffer as uint, malloc_alignment));\n+            let buffer = allocate(size, malloc_alignment);\n \n             let hashes = buffer.offset(hash_offset as int) as *mut u64;\n             let keys   = buffer.offset(keys_offset as int) as *mut K;\n@@ -418,7 +407,7 @@ mod table {\n     // modified to no longer assume this.\n     #[test]\n     fn can_alias_safehash_as_u64() {\n-        unsafe { assert_eq!(size_of::<SafeHash>(), size_of::<u64>()) };\n+        assert_eq!(size_of::<SafeHash>(), size_of::<u64>())\n     }\n \n     pub struct Entries<'a, K, V> {\n@@ -560,8 +549,15 @@ mod table {\n \n             assert_eq!(self.size, 0);\n \n+            let hashes_size = self.capacity * size_of::<u64>();\n+            let keys_size = self.capacity * size_of::<K>();\n+            let vals_size = self.capacity * size_of::<V>();\n+            let (align, _, _, _, size) = calculate_offsets(hashes_size, min_align_of::<u64>(),\n+                                                           keys_size, min_align_of::<K>(),\n+                                                           vals_size, min_align_of::<V>());\n+\n             unsafe {\n-                libc::free(self.hashes as *mut libc::c_void);\n+                deallocate(self.hashes as *mut u8, size, align);\n                 // Remember how everything was allocated out of one buffer\n                 // during initialization? We only need one call to free here.\n             }"}]}