{"sha": "382f9a7a3d15580c15531428f39bf47f55093d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MmY5YTdhM2QxNTU4MGMxNTUzMTQyOGYzOWJmNDdmNTUwOTNkNDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-03-31T21:39:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-04-01T12:29:53Z"}, "message": "wasi: Load arguments via syscalls\n\nThis commit switches the wasi target to loading CLI arguments via the\nsyscalls provided by wasi rather than through the argc/argv passed to\nthe main function. While serving the same purpose it's hoped that using\nsyscalls will make us a bit more portable (less reliance from libstd on\nan external C library) as well as avoiding the need for a lock!", "tree": {"sha": "2f070019f6203c4bf2fc024608a27dc24e224768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f070019f6203c4bf2fc024608a27dc24e224768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382f9a7a3d15580c15531428f39bf47f55093d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382f9a7a3d15580c15531428f39bf47f55093d42", "html_url": "https://github.com/rust-lang/rust/commit/382f9a7a3d15580c15531428f39bf47f55093d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382f9a7a3d15580c15531428f39bf47f55093d42/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab3eb38df8dca99110b6149b3a15deeb4ef0413", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab3eb38df8dca99110b6149b3a15deeb4ef0413", "html_url": "https://github.com/rust-lang/rust/commit/eab3eb38df8dca99110b6149b3a15deeb4ef0413"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "9c8e59e4fb5e1e47a04c7ef1ecc2193a46c4057e", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/382f9a7a3d15580c15531428f39bf47f55093d42/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382f9a7a3d15580c15531428f39bf47f55093d42/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=382f9a7a3d15580c15531428f39bf47f55093d42", "patch": "@@ -1,30 +1,15 @@\n-use crate::any::Any;\n use crate::ffi::CStr;\n+use crate::io;\n+use crate::sys::cvt_wasi;\n use crate::ffi::OsString;\n use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStringExt;\n-use crate::ptr;\n use crate::vec;\n \n-static mut ARGC: isize = 0;\n-static mut ARGV: *const *const u8 = ptr::null();\n-\n-#[cfg(not(target_feature = \"atomics\"))]\n-pub unsafe fn args_lock() -> impl Any {\n-    // No need for a lock if we're single-threaded, but this function will need\n-    // to get implemented for multi-threaded scenarios\n-}\n-\n-pub unsafe fn init(argc: isize, argv: *const *const u8) {\n-    let _guard = args_lock();\n-    ARGC = argc;\n-    ARGV = argv;\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n }\n \n pub unsafe fn cleanup() {\n-    let _guard = args_lock();\n-    ARGC = 0;\n-    ARGV = ptr::null();\n }\n \n pub struct Args {\n@@ -34,18 +19,31 @@ pub struct Args {\n \n /// Returns the command line arguments\n pub fn args() -> Args {\n+    maybe_args().unwrap_or_else(|_| {\n+        Args {\n+            iter: Vec::new().into_iter(),\n+            _dont_send_or_sync_me: PhantomData\n+        }\n+    })\n+}\n+\n+fn maybe_args() -> io::Result<Args> {\n     unsafe {\n-        let _guard = args_lock();\n-        let args = (0..ARGC)\n-            .map(|i| {\n-                let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n-                OsStringExt::from_vec(cstr.to_bytes().to_vec())\n-            })\n+        let (mut argc, mut argv_buf_size) = (0, 0);\n+        cvt_wasi(libc::__wasi_args_sizes_get(&mut argc, &mut argv_buf_size))?;\n+\n+        let mut argc = vec![0 as *mut libc::c_char; argc];\n+        let mut argv_buf = vec![0; argv_buf_size];\n+        cvt_wasi(libc::__wasi_args_get(argc.as_mut_ptr(), argv_buf.as_mut_ptr()))?;\n+\n+        let args = argc.into_iter()\n+            .map(|ptr| CStr::from_ptr(ptr).to_bytes().to_vec())\n+            .map(|bytes| OsString::from_vec(bytes))\n             .collect::<Vec<_>>();\n-        Args {\n+        Ok(Args {\n             iter: args.into_iter(),\n             _dont_send_or_sync_me: PhantomData,\n-        }\n+        })\n     }\n }\n "}]}