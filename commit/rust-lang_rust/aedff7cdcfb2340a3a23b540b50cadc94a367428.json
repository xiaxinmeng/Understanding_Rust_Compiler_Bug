{"sha": "aedff7cdcfb2340a3a23b540b50cadc94a367428", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZGZmN2NkY2ZiMjM0MGEzYTIzYjU0MGI1MGNhZGM5NGEzNjc0Mjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T10:00:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T10:29:43Z"}, "message": "Move utility functions down", "tree": {"sha": "ac43872656e88ec3ec26fefb89aa934294729dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac43872656e88ec3ec26fefb89aa934294729dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aedff7cdcfb2340a3a23b540b50cadc94a367428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aedff7cdcfb2340a3a23b540b50cadc94a367428", "html_url": "https://github.com/rust-lang/rust/commit/aedff7cdcfb2340a3a23b540b50cadc94a367428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aedff7cdcfb2340a3a23b540b50cadc94a367428/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8989f9e4b0fd7ceb6e9f28505c2173341a217e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8989f9e4b0fd7ceb6e9f28505c2173341a217e", "html_url": "https://github.com/rust-lang/rust/commit/eb8989f9e4b0fd7ceb6e9f28505c2173341a217e"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "f0511c742c4e07f3958e2924f329cd01fcf36e4f", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/aedff7cdcfb2340a3a23b540b50cadc94a367428/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aedff7cdcfb2340a3a23b540b50cadc94a367428/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=aedff7cdcfb2340a3a23b540b50cadc94a367428", "patch": "@@ -40,64 +40,6 @@ use crate::{\n     TypeParam,\n };\n \n-fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -> Option<Resolver> {\n-    match_ast! {\n-        match (node.value) {\n-            ast::Module(it) => {\n-                let src = node.with_value(it);\n-                Some(crate::Module::from_declaration(db, src)?.id.resolver(db))\n-            },\n-             ast::SourceFile(it) => {\n-                let src = node.with_value(ModuleSource::SourceFile(it));\n-                Some(crate::Module::from_definition(db, src)?.id.resolver(db))\n-            },\n-            ast::StructDef(it) => {\n-                let src = node.with_value(it);\n-                Some(Struct::from_source(db, src)?.id.resolver(db))\n-            },\n-            ast::EnumDef(it) => {\n-                let src = node.with_value(it);\n-                Some(Enum::from_source(db, src)?.id.resolver(db))\n-            },\n-            ast::ImplBlock(it) => {\n-                let src = node.with_value(it);\n-                Some(ImplBlock::from_source(db, src)?.id.resolver(db))\n-            },\n-            ast::TraitDef(it) => {\n-                let src = node.with_value(it);\n-                Some(Trait::from_source(db, src)?.id.resolver(db))\n-            },\n-            _ => match node.value.kind() {\n-                FN_DEF | CONST_DEF | STATIC_DEF => {\n-                    let def = def_with_body_from_child_node(db, node)?;\n-                    let def = DefWithBodyId::from(def);\n-                    Some(def.resolver(db))\n-                }\n-                // FIXME add missing cases\n-                _ => None\n-            }\n-        }\n-    }\n-}\n-\n-fn def_with_body_from_child_node(\n-    db: &impl HirDatabase,\n-    child: InFile<&SyntaxNode>,\n-) -> Option<DefWithBody> {\n-    let _p = profile(\"def_with_body_from_child_node\");\n-    child.cloned().ancestors_with_macros(db).find_map(|node| {\n-        let n = &node.value;\n-        match_ast! {\n-            match n {\n-                ast::FnDef(def)  => { return Function::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n-                ast::ConstDef(def) => { return Const::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n-                ast::StaticDef(def) => { return Static::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n-                _ => { None },\n-            }\n-        }\n-    })\n-}\n-\n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n@@ -487,6 +429,64 @@ impl SourceAnalyzer {\n     }\n }\n \n+fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -> Option<Resolver> {\n+    match_ast! {\n+        match (node.value) {\n+            ast::Module(it) => {\n+                let src = node.with_value(it);\n+                Some(crate::Module::from_declaration(db, src)?.id.resolver(db))\n+            },\n+             ast::SourceFile(it) => {\n+                let src = node.with_value(ModuleSource::SourceFile(it));\n+                Some(crate::Module::from_definition(db, src)?.id.resolver(db))\n+            },\n+            ast::StructDef(it) => {\n+                let src = node.with_value(it);\n+                Some(Struct::from_source(db, src)?.id.resolver(db))\n+            },\n+            ast::EnumDef(it) => {\n+                let src = node.with_value(it);\n+                Some(Enum::from_source(db, src)?.id.resolver(db))\n+            },\n+            ast::ImplBlock(it) => {\n+                let src = node.with_value(it);\n+                Some(ImplBlock::from_source(db, src)?.id.resolver(db))\n+            },\n+            ast::TraitDef(it) => {\n+                let src = node.with_value(it);\n+                Some(Trait::from_source(db, src)?.id.resolver(db))\n+            },\n+            _ => match node.value.kind() {\n+                FN_DEF | CONST_DEF | STATIC_DEF => {\n+                    let def = def_with_body_from_child_node(db, node)?;\n+                    let def = DefWithBodyId::from(def);\n+                    Some(def.resolver(db))\n+                }\n+                // FIXME add missing cases\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+fn def_with_body_from_child_node(\n+    db: &impl HirDatabase,\n+    child: InFile<&SyntaxNode>,\n+) -> Option<DefWithBody> {\n+    let _p = profile(\"def_with_body_from_child_node\");\n+    child.cloned().ancestors_with_macros(db).find_map(|node| {\n+        let n = &node.value;\n+        match_ast! {\n+            match n {\n+                ast::FnDef(def)  => { return Function::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n+                ast::ConstDef(def) => { return Const::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n+                ast::StaticDef(def) => { return Static::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n+                _ => { None },\n+            }\n+        }\n+    })\n+}\n+\n fn scope_for(\n     scopes: &ExprScopes,\n     source_map: &BodySourceMap,"}]}