{"sha": "7022ae4f8c5df525e7dc3912dd56bd2565d47794", "node_id": "C_kwDOAAsO6NoAKDcwMjJhZTRmOGM1ZGY1MjVlN2RjMzkxMmRkNTZiZDI1NjVkNDc3OTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-20T21:12:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-20T21:12:18Z"}, "message": "Rollup merge of #108255 - fee1-dead-contrib:fix-old-fixme, r=cjgillot\n\nRemove old FIXMEs referring to #19596\n\nHaving an inner function that accepts a mutable reference seems to be the only way this can be expressed. Taking a mutable reference would call the same function with a new type &mut F which then causes the infinite recursion error in #19596.", "tree": {"sha": "147468cea86170a815bfe89bdcb253dde45c92ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147468cea86170a815bfe89bdcb253dde45c92ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7022ae4f8c5df525e7dc3912dd56bd2565d47794", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8+IyCRBK7hj4Ov3rIwAAuxIIAG+ftdaYsDPS9hstjxAXItly\nsZMvt7XuFJJ8ngjp8tPgp9GYuPmTfwr/VQuUvLFAufeUpTzwr0GJ83apbVO0vXOt\naTmmNDi1V+OH2xJFAJ11KqZds5P1JkznC/kKvcGZXZtQDdWQ9EKQBaCk7waidasZ\nquySEasApTHr54IzLW1f10e/VujJbFeTvSbimLzPzoYYH4WBwFthivg4FvmMKtXq\nUUVsySBktnIOTOX9WpTCoeajskrTohU/j8LGj8hMZ2KJU2ssbCPS9DmjgwphL6ki\nES4WH3EnuLT1w6Da0MC/1z27I+5CVURxVr4rXzRK95I7a/uAO6KqEJUKiZwKPBo=\n=8d7o\n-----END PGP SIGNATURE-----\n", "payload": "tree 147468cea86170a815bfe89bdcb253dde45c92ed\nparent 194d52cc182241348e2372dfaf96896565fb51d9\nparent 6b36c3078a5b42cdaeb62b1c0c11b2e17982496d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676927538 +0100\ncommitter GitHub <noreply@github.com> 1676927538 +0100\n\nRollup merge of #108255 - fee1-dead-contrib:fix-old-fixme, r=cjgillot\n\nRemove old FIXMEs referring to #19596\n\nHaving an inner function that accepts a mutable reference seems to be the only way this can be expressed. Taking a mutable reference would call the same function with a new type &mut F which then causes the infinite recursion error in #19596.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7022ae4f8c5df525e7dc3912dd56bd2565d47794", "html_url": "https://github.com/rust-lang/rust/commit/7022ae4f8c5df525e7dc3912dd56bd2565d47794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7022ae4f8c5df525e7dc3912dd56bd2565d47794/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194d52cc182241348e2372dfaf96896565fb51d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/194d52cc182241348e2372dfaf96896565fb51d9", "html_url": "https://github.com/rust-lang/rust/commit/194d52cc182241348e2372dfaf96896565fb51d9"}, {"sha": "6b36c3078a5b42cdaeb62b1c0c11b2e17982496d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b36c3078a5b42cdaeb62b1c0c11b2e17982496d", "html_url": "https://github.com/rust-lang/rust/commit/6b36c3078a5b42cdaeb62b1c0c11b2e17982496d"}], "stats": {"total": 3, "additions": 0, "deletions": 3}, "files": [{"sha": "3f52f174cdf6d55cefbb42039f20e50ed2455de8", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7022ae4f8c5df525e7dc3912dd56bd2565d47794/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ae4f8c5df525e7dc3912dd56bd2565d47794/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7022ae4f8c5df525e7dc3912dd56bd2565d47794", "patch": "@@ -987,7 +987,6 @@ pub struct Pat<'hir> {\n }\n \n impl<'hir> Pat<'hir> {\n-    // FIXME(#19596) this is a workaround, but there should be a better way\n     fn walk_short_(&self, it: &mut impl FnMut(&Pat<'hir>) -> bool) -> bool {\n         if !it(self) {\n             return false;\n@@ -1015,7 +1014,6 @@ impl<'hir> Pat<'hir> {\n         self.walk_short_(&mut it)\n     }\n \n-    // FIXME(#19596) this is a workaround, but there should be a better way\n     fn walk_(&self, it: &mut impl FnMut(&Pat<'hir>) -> bool) {\n         if !it(self) {\n             return;"}, {"sha": "4b08832eddc9d08b24aaa4d4d839c1f9a7c05c82", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7022ae4f8c5df525e7dc3912dd56bd2565d47794/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7022ae4f8c5df525e7dc3912dd56bd2565d47794/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=7022ae4f8c5df525e7dc3912dd56bd2565d47794", "patch": "@@ -601,7 +601,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         }\n     }\n \n-    // FIXME(#19596) This is a workaround, but there should be a better way to do this\n     fn cat_pattern_<F>(\n         &self,\n         mut place_with_id: PlaceWithHirId<'tcx>,"}]}