{"sha": "e0409200d978a377d4646e8da7be60483206ed64", "node_id": "C_kwDOAAsO6NoAKGUwNDA5MjAwZDk3OGEzNzdkNDY0NmU4ZGE3YmU2MDQ4MzIwNmVkNjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-08T20:32:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T20:32:20Z"}, "message": "Rollup merge of #97856 - compiler-errors:bad-let-suggestions, r=estebank\n\nDon't suggest adding `let` in certain `if` conditions\n\nAvoid being too eager to suggest `let` in an `if` condition with an `=`, namely when the LHS of the `=` isn't even valid as a pattern (to a first degree approximation).\n\nThis heustic I came up with kinda sucks. Let me know if it needs to be refined.", "tree": {"sha": "4dfdf1ba3f1f5f711bc3cd1e1d8a11fd8eb58a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfdf1ba3f1f5f711bc3cd1e1d8a11fd8eb58a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0409200d978a377d4646e8da7be60483206ed64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioQdUCRBK7hj4Ov3rIwAAR3kIAByCTwdNRhsJCmaKrKK10//P\npva72yYVzrqnXN848F0vmwCCkAfVui30gTlswL1xWo1OBY7Yoy7e4VanfZkvf1DS\ne+iLqtd2R1035P90K29OmcHdTk3x2lGnJAfCyyCZA4HZrR2oqgD6eoS7kPJMWash\njvCrMZIjecv70tGhSlYvd+Nl9bN7zE4HnMRXvioLgQze+e2lIXsCDkHq/T58NnAp\nNapKkZ+AhA/YYH2bpwkgnLiGu3ywPOAuQ4dfaJAIK9hWHCMErcFxOxwknRkG3eGz\nP5bxqV3mBZItIsjPhuyH2tFYlypT8dKFMES63aKQ70F89YaRPn5fR424dWl7nhc=\n=XYpM\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dfdf1ba3f1f5f711bc3cd1e1d8a11fd8eb58a0f\nparent 888d72c2bfd1f3755ee370e83f3248efa0689fc6\nparent 2ae1ec911939331256ed5ab79e7971e859030d94\nauthor Michael Goulet <michael@errs.io> 1654720340 -0700\ncommitter GitHub <noreply@github.com> 1654720340 -0700\n\nRollup merge of #97856 - compiler-errors:bad-let-suggestions, r=estebank\n\nDon't suggest adding `let` in certain `if` conditions\n\nAvoid being too eager to suggest `let` in an `if` condition with an `=`, namely when the LHS of the `=` isn't even valid as a pattern (to a first degree approximation).\n\nThis heustic I came up with kinda sucks. Let me know if it needs to be refined.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0409200d978a377d4646e8da7be60483206ed64", "html_url": "https://github.com/rust-lang/rust/commit/e0409200d978a377d4646e8da7be60483206ed64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0409200d978a377d4646e8da7be60483206ed64/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888d72c2bfd1f3755ee370e83f3248efa0689fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/888d72c2bfd1f3755ee370e83f3248efa0689fc6", "html_url": "https://github.com/rust-lang/rust/commit/888d72c2bfd1f3755ee370e83f3248efa0689fc6"}, {"sha": "2ae1ec911939331256ed5ab79e7971e859030d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae1ec911939331256ed5ab79e7971e859030d94", "html_url": "https://github.com/rust-lang/rust/commit/2ae1ec911939331256ed5ab79e7971e859030d94"}], "stats": {"total": 150, "additions": 142, "deletions": 8}, "files": [{"sha": "e5b61d7000a32c1d1d56b463ec2c97e2007003cf", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -1278,6 +1278,22 @@ impl Expr {\n             },\n         )\n     }\n+\n+    // To a first-order approximation, is this a pattern\n+    pub fn is_approximately_pattern(&self) -> bool {\n+        match &self.peel_parens().kind {\n+            ExprKind::Box(_)\n+            | ExprKind::Array(_)\n+            | ExprKind::Call(_, _)\n+            | ExprKind::Tup(_)\n+            | ExprKind::Lit(_)\n+            | ExprKind::Range(_, _, _)\n+            | ExprKind::Underscore\n+            | ExprKind::Path(_, _)\n+            | ExprKind::Struct(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Limit types of a range (inclusive or exclusive)"}, {"sha": "2f5f271dc50efefe81bcaea8f735b0515d04b76e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -1813,6 +1813,20 @@ impl Expr<'_> {\n             | ExprKind::Err => true,\n         }\n     }\n+\n+    // To a first-order approximation, is this a pattern\n+    pub fn is_approximately_pattern(&self) -> bool {\n+        match &self.kind {\n+            ExprKind::Box(_)\n+            | ExprKind::Array(_)\n+            | ExprKind::Call(..)\n+            | ExprKind::Tup(_)\n+            | ExprKind::Lit(_)\n+            | ExprKind::Path(_)\n+            | ExprKind::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n /// Checks if the specified expression is a built-in range literal."}, {"sha": "5e52e9b40f044b62437996be52d7f989f891fe5f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -265,13 +265,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             );\n         }\n         match (source, self.diagnostic_metadata.in_if_condition) {\n-            (PathSource::Expr(_), Some(Expr { span, kind: ExprKind::Assign(..), .. })) => {\n-                err.span_suggestion_verbose(\n-                    span.shrink_to_lo(),\n-                    \"you might have meant to use pattern matching\",\n-                    \"let \".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+            (\n+                PathSource::Expr(_),\n+                Some(Expr { span: expr_span, kind: ExprKind::Assign(lhs, _, _), .. }),\n+            ) => {\n+                // Icky heuristic so we don't suggest:\n+                // `if (i + 2) = 2` => `if let (i + 2) = 2` (approximately pattern)\n+                // `if 2 = i` => `if let 2 = i` (lhs needs to contain error span)\n+                if lhs.is_approximately_pattern() && lhs.span.contains(span) {\n+                    err.span_suggestion_verbose(\n+                        expr_span.shrink_to_lo(),\n+                        \"you might have meant to use pattern matching\",\n+                        \"let \".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "9f82bb67bd03d3d29ecb73606283cafa1fd6381f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -1035,7 +1035,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 (Applicability::MaybeIncorrect, false)\n             };\n-            if !lhs.is_syntactic_place_expr() && !matches!(lhs.kind, hir::ExprKind::Lit(_)) {\n+            if !lhs.is_syntactic_place_expr()\n+                && lhs.is_approximately_pattern()\n+                && !matches!(lhs.kind, hir::ExprKind::Lit(_))\n+            {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) ="}, {"sha": "a8b2a283039fd2fbf320285c38d376c856e3e028", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -0,0 +1,24 @@\n+// FIXME(compiler-errors): This really should suggest `let` on the RHS of the\n+// `&&` operator, but that's kinda hard to do because of precedence.\n+// Instead, for now we just make sure not to suggest `if let let`.\n+fn a() {\n+    if let x = 1 && i = 2 {}\n+    //~^ ERROR cannot find value `i` in this scope\n+    //~| ERROR `let` expressions in this position are unstable\n+    //~| ERROR mismatched types\n+    //~| ERROR `let` expressions are not supported here\n+}\n+\n+fn b() {\n+    if (i + j) = i {}\n+    //~^ ERROR cannot find value `i` in this scope\n+    //~| ERROR cannot find value `i` in this scope\n+    //~| ERROR cannot find value `j` in this scope\n+}\n+\n+fn c() {\n+    if x[0] = 1 {}\n+    //~^ ERROR cannot find value `x` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "60d286fedf58ab8f463df319e40770afd8eb7596", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e0409200d978a377d4646e8da7be60483206ed64/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0409200d978a377d4646e8da7be60483206ed64/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr?ref=e0409200d978a377d4646e8da7be60483206ed64", "patch": "@@ -0,0 +1,69 @@\n+error: `let` expressions are not supported here\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: only supported directly in conditions of `if` and `while` expressions\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:5:21\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |                     ^ not found in this scope\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:9\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |         ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `j` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:13\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |             ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:13:18\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if (i + j) = i {}\n+   |                  ^ help: a function with a similar name exists: `a`\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/bad-if-let-suggestion.rs:20:8\n+   |\n+LL | fn a() {\n+   | ------ similarly named function `a` defined here\n+...\n+LL |     if x[0] = 1 {}\n+   |        ^ help: a function with a similar name exists: `a`\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425, E0658.\n+For more information about an error, try `rustc --explain E0308`."}]}