{"sha": "b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZGU0MjRlNDE3NWVlZmI0ZmRhNmUzZWQ2MzRhY2ZhYjNlYzBkYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T08:50:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T08:50:56Z"}, "message": "Auto merge of #28034 - alexcrichton:new-lines, r=aturon\n\nThis commit is an implementation of [RFC 1212][rfc] which tweaks the behavior of\r\nthe `str::lines` and `BufRead::lines` iterators. Both iterators now account for\r\n`\\r\\n` sequences in addition to `\\n`, allowing for less surprising behavior\r\nacross platforms (especially in the `BufRead` case). Splitting *only* on the\r\n`\\n` character can still be achieved with `split('\\n')` in both cases.\r\n\r\nThe `str::lines_any` function is also now deprecated as `str::lines` is a\r\ndrop-in replacement for it.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1212-line-endings.md\r\n\r\nCloses #28032", "tree": {"sha": "64071602a54a1c9ad7699862ace3d11667dd422a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64071602a54a1c9ad7699862ace3d11667dd422a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "html_url": "https://github.com/rust-lang/rust/commit/b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1f8200e70ade40c12a095c763041bd4cfa9f21", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1f8200e70ade40c12a095c763041bd4cfa9f21", "html_url": "https://github.com/rust-lang/rust/commit/9d1f8200e70ade40c12a095c763041bd4cfa9f21"}, {"sha": "48615a68fb01d09749a5b73816d45e0d0669d1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/48615a68fb01d09749a5b73816d45e0d0669d1f9", "html_url": "https://github.com/rust-lang/rust/commit/48615a68fb01d09749a5b73816d45e0d0669d1f9"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "7d1ed13d7640ecdcb571d4ee6014f4cc7348bc87", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -604,14 +604,14 @@ impl str {\n         UnicodeStr::split_whitespace(self)\n     }\n \n-    /// An iterator over the lines of a string, separated by `\\n`.\n+    /// An iterator over the lines of a string, separated by `\\n` or `\\r\\n`.\n     ///\n-    /// This does not include the empty string after a trailing `\\n`.\n+    /// This does not include the empty string after a trailing newline or CRLF.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// let four_lines = \"foo\\nbar\\n\\nbaz\";\n+    /// let four_lines = \"foo\\nbar\\n\\r\\nbaz\";\n     /// let v: Vec<&str> = four_lines.lines().collect();\n     ///\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n@@ -620,7 +620,7 @@ impl str {\n     /// Leaving off the trailing character:\n     ///\n     /// ```\n-    /// let four_lines = \"foo\\nbar\\n\\nbaz\\n\";\n+    /// let four_lines = \"foo\\r\\nbar\\n\\nbaz\\n\";\n     /// let v: Vec<&str> = four_lines.lines().collect();\n     ///\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n@@ -654,7 +654,9 @@ impl str {\n     /// assert_eq!(v, [\"foo\", \"bar\", \"\", \"baz\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]\n     #[inline]\n+    #[allow(deprecated)]\n     pub fn lines_any(&self) -> LinesAny {\n         core_str::StrExt::lines_any(self)\n     }"}, {"sha": "7b481f63991165d04e3e3a6357753f1a45ff6f57", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -964,11 +964,11 @@ fn test_split_whitespace() {\n \n #[test]\n fn test_lines() {\n-    let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";\n+    let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\r\\nLittle l\u00e4mb\\n\";\n     let lines: Vec<&str> = data.lines().collect();\n     assert_eq!(lines, [\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"\", \"Little l\u00e4mb\"]);\n \n-    let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\"; // no trailing \\n\n+    let data = \"\\r\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\"; // no trailing \\n\n     let lines: Vec<&str> = data.lines().collect();\n     assert_eq!(lines, [\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"\", \"Little l\u00e4mb\"]);\n }"}, {"sha": "4664162358dbc42173d347fc0a3b30999a7ee72a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -827,7 +827,7 @@ generate_pattern_iterators! {\n /// Created with the method `.lines()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n-pub struct Lines<'a>(SplitTerminator<'a, char>);\n+pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Lines<'a> {\n@@ -854,8 +854,10 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n \n /// Created with the method `.lines_any()`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n #[derive(Clone)]\n-pub struct LinesAny<'a>(Map<Lines<'a>, LinesAnyMap>);\n+#[allow(deprecated)]\n+pub struct LinesAny<'a>(Lines<'a>);\n \n /// A nameable, clonable fn type\n #[derive(Clone)]\n@@ -887,6 +889,7 @@ impl<'a> FnOnce<(&'a str,)> for LinesAnyMap {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl<'a> Iterator for LinesAny<'a> {\n     type Item = &'a str;\n \n@@ -902,6 +905,7 @@ impl<'a> Iterator for LinesAny<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl<'a> DoubleEndedIterator for LinesAny<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> {\n@@ -1289,6 +1293,7 @@ pub trait StrExt {\n     fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n     fn lines(&self) -> Lines;\n+    #[allow(deprecated)]\n     fn lines_any(&self) -> LinesAny;\n     fn char_len(&self) -> usize;\n     fn slice_chars(&self, begin: usize, end: usize) -> &str;\n@@ -1428,12 +1433,13 @@ impl StrExt for str {\n     }\n     #[inline]\n     fn lines(&self) -> Lines {\n-        Lines(self.split_terminator('\\n'))\n+        Lines(self.split_terminator('\\n').map(LinesAnyMap))\n     }\n \n     #[inline]\n+    #[allow(deprecated)]\n     fn lines_any(&self) -> LinesAny {\n-        LinesAny(self.lines().map(LinesAnyMap))\n+        LinesAny(self.lines())\n     }\n \n     #[inline]"}, {"sha": "8a57a50bdea4196959ebec022b7161ff740d9d89", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -308,7 +308,7 @@ pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n }\n \n pub fn unindent(s: &str) -> String {\n-    let lines = s.lines_any().collect::<Vec<&str> >();\n+    let lines = s.lines().collect::<Vec<&str> >();\n     let mut saw_first_line = false;\n     let mut saw_second_line = false;\n     let min_indent = lines.iter().fold(usize::MAX, |min_indent, line| {"}, {"sha": "54869807cacef4a99a447a4ed7359170dd8bf401", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -1439,7 +1439,7 @@ pub trait BufRead: Read {\n     ///\n     /// The iterator returned from this function will yield instances of\n     /// `io::Result<String>`. Each string returned will *not* have a newline\n-    /// byte (the 0xA byte) at the end.\n+    /// byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.\n     ///\n     /// # Examples\n     ///\n@@ -1763,6 +1763,9 @@ impl<B: BufRead> Iterator for Lines<B> {\n             Ok(_n) => {\n                 if buf.ends_with(\"\\n\") {\n                     buf.pop();\n+                    if buf.ends_with(\"\\r\") {\n+                        buf.pop();\n+                    }\n                 }\n                 Some(Ok(buf))\n             }\n@@ -1834,12 +1837,12 @@ mod tests {\n \n     #[test]\n     fn lines() {\n-        let buf = Cursor::new(&b\"12\"[..]);\n+        let buf = Cursor::new(&b\"12\\r\"[..]);\n         let mut s = buf.lines();\n-        assert_eq!(s.next().unwrap().unwrap(), \"12\".to_string());\n+        assert_eq!(s.next().unwrap().unwrap(), \"12\\r\".to_string());\n         assert!(s.next().is_none());\n \n-        let buf = Cursor::new(&b\"12\\n\\n\"[..]);\n+        let buf = Cursor::new(&b\"12\\r\\n\\n\"[..]);\n         let mut s = buf.lines();\n         assert_eq!(s.next().unwrap().unwrap(), \"12\".to_string());\n         assert_eq!(s.next().unwrap().unwrap(), \"\".to_string());"}, {"sha": "9033208fbdbdcea336c0bfdc37a61875c5a9cccb", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4de424e4175eefb4fda6e3ed634acfab3ec0daf/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "patch": "@@ -132,7 +132,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n \n     if comment.starts_with(\"/*\") {\n         let lines = comment[3..comment.len() - 2]\n-            .lines_any()\n+            .lines()\n             .map(|s| s.to_string())\n             .collect::<Vec<String> >();\n "}]}