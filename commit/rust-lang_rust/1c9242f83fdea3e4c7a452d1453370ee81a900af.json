{"sha": "1c9242f83fdea3e4c7a452d1453370ee81a900af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOTI0MmY4M2ZkZWEzZTRjN2E0NTJkMTQ1MzM3MGVlODFhOTAwYWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-19T22:53:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:34Z"}, "message": "Point at `Sized` bound", "tree": {"sha": "0104986ac74cc36c12a2eff6759b683bc0274c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0104986ac74cc36c12a2eff6759b683bc0274c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c9242f83fdea3e4c7a452d1453370ee81a900af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9242f83fdea3e4c7a452d1453370ee81a900af", "html_url": "https://github.com/rust-lang/rust/commit/1c9242f83fdea3e4c7a452d1453370ee81a900af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c9242f83fdea3e4c7a452d1453370ee81a900af/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fca5c64abdf3422b3dc22910abd5460cca450d54", "url": "https://api.github.com/repos/rust-lang/rust/commits/fca5c64abdf3422b3dc22910abd5460cca450d54", "html_url": "https://github.com/rust-lang/rust/commit/fca5c64abdf3422b3dc22910abd5460cca450d54"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "bca0ecb1e79dc24f8c99616b8dbcf5dd129703b5", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -26,7 +26,7 @@ use std::iter::{self};\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation {\n     /// `Self: Sized` declared on the trait.\n-    SizedSelf,\n+    SizedSelf(Span),\n \n     /// Supertrait reference references `Self` an in illegal location\n     /// (e.g., `trait Foo : Bar<Self>`).\n@@ -42,7 +42,7 @@ pub enum ObjectSafetyViolation {\n impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n         match *self {\n-            ObjectSafetyViolation::SizedSelf => {\n+            ObjectSafetyViolation::SizedSelf(_) => {\n                 \"the trait cannot require that `Self : Sized`\".into()\n             }\n             ObjectSafetyViolation::SupertraitSelf => {\n@@ -80,6 +80,7 @@ impl ObjectSafetyViolation {\n         // diagnostics use a `note` instead of a `span_label`.\n         match *self {\n             ObjectSafetyViolation::AssocConst(_, span)\n+            | ObjectSafetyViolation::SizedSelf(span)\n             | ObjectSafetyViolation::Method(_, _, span)\n                 if span != DUMMY_SP =>\n             {\n@@ -179,17 +180,20 @@ fn object_safety_violations_for_trait(\n             {\n                 // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                 // It's also hard to get a use site span, so we use the method definition span.\n-                tcx.struct_span_lint_hir(\n+                let mut err = tcx.struct_span_lint_hir(\n                     WHERE_CLAUSES_OBJECT_SAFETY,\n                     hir::CRATE_HIR_ID,\n                     *span,\n                     &format!(\n                         \"the trait `{}` cannot be made into an object\",\n                         tcx.def_path_str(trait_def_id)\n                     ),\n-                )\n-                .note(&violation.error_msg())\n-                .emit();\n+                );\n+                match violation.span() {\n+                    Some(span) => err.span_label(span, violation.error_msg()),\n+                    None => err.note(&violation.error_msg()),\n+                };\n+                err.emit();\n                 false\n             } else {\n                 true\n@@ -199,7 +203,8 @@ fn object_safety_violations_for_trait(\n \n     // Check the trait itself.\n     if trait_has_sized_self(tcx, trait_def_id) {\n-        violations.push(ObjectSafetyViolation::SizedSelf);\n+        let span = get_sized_bound(tcx, trait_def_id);\n+        violations.push(ObjectSafetyViolation::SizedSelf(span));\n     }\n     if predicates_reference_self(tcx, trait_def_id, false) {\n         violations.push(ObjectSafetyViolation::SupertraitSelf);\n@@ -219,6 +224,27 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n+fn get_sized_bound(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Span {\n+    tcx.hir()\n+        .get_if_local(trait_def_id)\n+        .and_then(|node| match node {\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., bounds, _), .. }) => bounds\n+                .iter()\n+                .filter_map(|b| match b {\n+                    hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n+                        if Some(trait_ref.trait_ref.trait_def_id())\n+                            == tcx.lang_items().sized_trait() =>\n+                    {\n+                        Some(trait_ref.span)\n+                    }\n+                    _ => None,\n+                })\n+                .next(),\n+            _ => None,\n+        })\n+        .unwrap_or(DUMMY_SP)\n+}\n+\n fn predicates_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId, supertraits_only: bool) -> bool {\n     let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     let predicates = if supertraits_only {"}, {"sha": "de362e1cef0fd182631547e23b6c4f44dcc65ff1", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n+LL | trait NonObjectSafe1: Sized {}\n+   |                       ----- the trait cannot require that `Self : Sized`\n+...\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n    |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n    |\n@@ -36,6 +39,9 @@ LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:6\n    |\n+LL | trait NonObjectSafe1: Sized {}\n+   |                       ----- the trait cannot require that `Self : Sized`\n+...\n LL | impl Trait for dyn NonObjectSafe1 {}\n    |      ^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n    |"}, {"sha": "4757742a707b18f389a6c3adb17eac0c3188cf52", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n+LL | trait Array: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     &dyn Array;\n    |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n    |\n@@ -9,6 +12,9 @@ LL |     &dyn Array;\n error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n+LL | trait Array: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object\n    |"}, {"sha": "c161e9efd1261330955af821da3d69d11af5a5cd", "filename": "src/test/ui/issues/issue-50781.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50781.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -2,7 +2,7 @@ error: the trait `X` cannot be made into an object\n   --> $DIR/issue-50781.rs:6:8\n    |\n LL |     fn foo(&self) where Self: Trait;\n-   |        ^^^\n+   |        ^^^ method `foo` references the `Self` type in where clauses\n    |\n note: the lint level is defined here\n   --> $DIR/issue-50781.rs:1:9\n@@ -11,7 +11,6 @@ LL | #![deny(where_clauses_object_safety)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>\n-   = note: method `foo` references the `Self` type in where clauses\n \n error: aborting due to previous error\n "}, {"sha": "be0a2519a469b362acae628c1660c5ce4bfaed03", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:12:30\n    |\n+LL | trait Bar : Sized {\n+   |             ----- the trait cannot require that `Self : Sized`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n    |"}, {"sha": "c20ddee54c07ece43b394fd955c3c41204e65672", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:14:5\n    |\n+LL | trait Bar : Sized {\n+   |             ----- the trait cannot require that `Self : Sized`\n+...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |"}, {"sha": "4c033cfcd898bac34a329ad3991d8baf729f2b24", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     let t_box: Box<dyn Trait> = Box::new(S);\n    |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n@@ -11,6 +14,9 @@ LL |     let t_box: Box<dyn Trait> = Box::new(S);\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     takes_box(Box::new(S));\n    |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |\n@@ -21,6 +27,9 @@ LL |     takes_box(Box::new(S));\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     Box::new(S) as Box<dyn Trait>;\n    |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |"}, {"sha": "ba3792c362e86d7fb9ab9f65d4c48afc9460581e", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -1,6 +1,9 @@\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     let t: &dyn Trait = &S;\n    |                         ^^ the trait `Trait` cannot be made into an object\n    |\n@@ -11,6 +14,9 @@ LL |     let t: &dyn Trait = &S;\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     takes_trait(&S);\n    |                 ^^ the trait `Trait` cannot be made into an object\n    |\n@@ -21,6 +27,9 @@ LL |     takes_trait(&S);\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     &S as &dyn Trait;\n    |     ^^ the trait `Trait` cannot be made into an object\n    |"}, {"sha": "a0082578d4d068d09447ea32e989acf3061d35aa", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c9242f83fdea3e4c7a452d1453370ee81a900af/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=1c9242f83fdea3e4c7a452d1453370ee81a900af", "patch": "@@ -15,6 +15,9 @@ LL | |     }\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |         Some(()) => &S,\n    |                     ^^ the trait `Trait` cannot be made into an object\n    |\n@@ -25,6 +28,9 @@ LL |         Some(()) => &S,\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n+LL | trait Trait: Sized {}\n+   |              ----- the trait cannot require that `Self : Sized`\n+...\n LL |     let t: &dyn Trait = match opt() {\n    |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n    |"}]}