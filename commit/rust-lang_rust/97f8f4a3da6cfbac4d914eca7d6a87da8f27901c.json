{"sha": "97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "node_id": "C_kwDOAAsO6NoAKDk3ZjhmNGEzZGE2Y2ZiYWM0ZDkxNGVjYTdkNmE4N2RhOGYyNzkwMWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-29T11:04:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-29T11:04:47Z"}, "message": "Auto merge of #13311 - lowr:fix/for-loop-item-resolution, r=Veykril\n\nfix: infer for-loop item type with `IntoIterator` and `Iterator`\n\nPart of #13299\n\nWe've been inferring the type of the yielded values in for-loop as `<T as IntoIterator>::Item`. We infer the correct type most of the time when we normalize the projection type, but it turns out not always. We should infer the type as `<<T as IntoIterator>::IntoIter as Iterator>::Item`.\n\nWhen one specifies `IntoIter` assoc type of `IntoIterator` but not `Item` in generic bounds, we fail to normalize `<T as IntoIterator>::Item` (even though `IntoIter` is defined like so: `type IntoIter: Iterator<Item = Self::Item>` - rustc does *not* normalize projections based on other projection's bound I believe; see [this playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=e88e19385094cb98fadbf647b4c2082e)).\n\nNote that this doesn't fully fix # 13299 - given the following code, chalk can normalize `<I as IntoIterator>::IntoIter` to `S`, but cannot normalize `<S as Iterator>::Item` to `i32`.\n\n```rust\nstruct S;\nimpl Iterator for S { type Item = i32; /* ... */ }\nfn f<I: IntoIterator<IntoIter = S>>(it: I) {\n    for elem in it {}\n      //^^^^{unknown}\n}\n```\n\nThis is because chalk finds multiple answers that satisfy the query `AliasEq(<S as Iterator>::Item = ?X`: `?X = i32` and `?X = <I as IntoIterator>::Item` - which are supposed to be the same type due to the aforementioned bound on `IntoIter` but chalk is unable to figure it out.", "tree": {"sha": "dbdf9078b8d8d2df55ab7a35e0e913bd9e9790dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdf9078b8d8d2df55ab7a35e0e913bd9e9790dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "html_url": "https://github.com/rust-lang/rust/commit/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad752bd52115186ab5ebe2fd27f09867112747c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad752bd52115186ab5ebe2fd27f09867112747c1", "html_url": "https://github.com/rust-lang/rust/commit/ad752bd52115186ab5ebe2fd27f09867112747c1"}, {"sha": "6d8903ae5f3d3a16a96e0a3e3f32ce88d7998392", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8903ae5f3d3a16a96e0a3e3f32ce88d7998392", "html_url": "https://github.com/rust-lang/rust/commit/6d8903ae5f3d3a16a96e0a3e3f32ce88d7998392"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "2679a1c3602671c35fcae81ba8f9fdef4eb90042", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "patch": "@@ -263,6 +263,7 @@ pub mod known {\n         Iterator,\n         IntoIterator,\n         Item,\n+        IntoIter,\n         Try,\n         Ok,\n         Future,"}, {"sha": "25179afaca7ade63893f317c6bbd3a92033121d9", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "patch": "@@ -883,6 +883,12 @@ impl<'a> InferenceContext<'a> {\n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n         let path = path![core::iter::IntoIterator];\n         let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n+        self.db.trait_data(trait_).associated_type_by_name(&name![IntoIter])\n+    }\n+\n+    fn resolve_iterator_item(&self) -> Option<TypeAliasId> {\n+        let path = path![core::iter::Iterator];\n+        let trait_ = self.resolver.resolve_known_trait(self.db.upcast(), &path)?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Item])\n     }\n "}, {"sha": "2643baf8a32996680b0efd0c62e1ed8ca18992fb", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "patch": "@@ -207,8 +207,10 @@ impl<'a> InferenceContext<'a> {\n             }\n             &Expr::For { iterable, body, pat, label } => {\n                 let iterable_ty = self.infer_expr(iterable, &Expectation::none());\n-                let pat_ty =\n+                let into_iter_ty =\n                     self.resolve_associated_type(iterable_ty, self.resolve_into_iter_item());\n+                let pat_ty =\n+                    self.resolve_associated_type(into_iter_ty, self.resolve_iterator_item());\n \n                 self.infer_pat(pat, &pat_ty, BindingMode::default());\n                 self.with_breakable_ctx(BreakableKind::Loop, self.err_ty(), label, |this| {"}, {"sha": "555b6972fb71eecb775979f640b33baa2e3a712e", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "patch": "@@ -279,6 +279,10 @@ fn test() {\n pub mod iter {\n     pub trait IntoIterator {\n         type Item;\n+        type IntoIter: Iterator<Item = Self::Item>;\n+    }\n+    pub trait Iterator {\n+        type Item;\n     }\n }\n pub mod prelude {\n@@ -297,7 +301,13 @@ pub mod collections {\n     }\n \n     impl<T> IntoIterator for Vec<T> {\n-        type Item=T;\n+        type Item = T;\n+        type IntoIter = IntoIter<T>;\n+    }\n+\n+    struct IntoIter<T> {}\n+    impl<T> Iterator for IntoIter<T> {\n+        type Item = T;\n     }\n }\n \"#,"}, {"sha": "34d8bf67a3016edd55ffe4083870684aa9cb00b6", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f8f4a3da6cfbac4d914eca7d6a87da8f27901c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=97f8f4a3da6cfbac4d914eca7d6a87da8f27901c", "patch": "@@ -2024,7 +2024,14 @@ impl<T> Vec<T> {\n }\n \n impl<T> IntoIterator for Vec<T> {\n-    type Item=T;\n+    type Item = T;\n+    type IntoIter = IntoIter<T>;\n+}\n+\n+struct IntoIter<T> {}\n+\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n }\n \n fn main() {"}]}