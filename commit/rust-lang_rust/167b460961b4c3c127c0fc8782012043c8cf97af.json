{"sha": "167b460961b4c3c127c0fc8782012043c8cf97af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2N2I0NjA5NjFiNGMzYzEyN2MwZmM4NzgyMDEyMDQzYzhjZjk3YWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T10:25:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-22T14:00:32Z"}, "message": "add a table to track user-provided signatures", "tree": {"sha": "e43fd939ed3b409087cb5700cae319f8e427b83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43fd939ed3b409087cb5700cae319f8e427b83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167b460961b4c3c127c0fc8782012043c8cf97af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167b460961b4c3c127c0fc8782012043c8cf97af", "html_url": "https://github.com/rust-lang/rust/commit/167b460961b4c3c127c0fc8782012043c8cf97af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167b460961b4c3c127c0fc8782012043c8cf97af/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66dc8a1489d2818b5e63f18e1464be79da1f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66dc8a1489d2818b5e63f18e1464be79da1f137", "html_url": "https://github.com/rust-lang/rust/commit/a66dc8a1489d2818b5e63f18e1464be79da1f137"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "46c99f79eced0a22660b09fbc686b5c547dba23f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=167b460961b4c3c127c0fc8782012043c8cf97af", "patch": "@@ -50,6 +50,7 @@ use ty::query;\n use ty::steal::Steal;\n use ty::BindingMode;\n use ty::CanonicalTy;\n+use ty::CanonicalPolyFnSig;\n use util::nodemap::{DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use smallvec::SmallVec;\n@@ -344,10 +345,6 @@ pub struct TypeckTables<'tcx> {\n     /// belongs, but it may not exist if it's a tuple field (`tuple.0`).\n     field_indices: ItemLocalMap<usize>,\n \n-    /// Stores the canonicalized types provided by the user. See also\n-    /// `AscribeUserType` statement in MIR.\n-    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n-\n     /// Stores the types for various nodes in the AST.  Note that this table\n     /// is not guaranteed to be populated until after typeck.  See\n     /// typeck::check::fn_ctxt for details.\n@@ -359,6 +356,14 @@ pub struct TypeckTables<'tcx> {\n     /// other items.\n     node_substs: ItemLocalMap<&'tcx Substs<'tcx>>,\n \n+    /// Stores the canonicalized types provided by the user. See also\n+    /// `AscribeUserType` statement in MIR.\n+    user_provided_tys: ItemLocalMap<CanonicalTy<'tcx>>,\n+\n+    /// Stores the canonicalized types provided by the user. See also\n+    /// `AscribeUserType` statement in MIR.\n+    user_provided_sigs: ItemLocalMap<CanonicalPolyFnSig<'tcx>>,\n+\n     /// Stores the substitutions that the user explicitly gave (if any)\n     /// attached to `id`. These will not include any inferred\n     /// values. The canonical form is used to capture things like `_`\n@@ -442,6 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             type_dependent_defs: ItemLocalMap(),\n             field_indices: ItemLocalMap(),\n             user_provided_tys: ItemLocalMap(),\n+            user_provided_sigs: Default::default(),\n             node_types: ItemLocalMap(),\n             node_substs: ItemLocalMap(),\n             user_substs: ItemLocalMap(),\n@@ -513,6 +519,20 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn user_provided_sigs(&self) -> LocalTableInContext<'_, CanonicalPolyFnSig<'tcx>> {\n+        LocalTableInContext {\n+            local_id_root: self.local_id_root,\n+            data: &self.user_provided_sigs\n+        }\n+    }\n+\n+    pub fn user_provided_sigs_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalPolyFnSig<'tcx>> {\n+        LocalTableInContextMut {\n+            local_id_root: self.local_id_root,\n+            data: &mut self.user_provided_sigs\n+        }\n+    }\n+\n     pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,\n@@ -748,6 +768,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             ref type_dependent_defs,\n             ref field_indices,\n             ref user_provided_tys,\n+            ref user_provided_sigs,\n             ref node_types,\n             ref node_substs,\n             ref user_substs,\n@@ -771,6 +792,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             type_dependent_defs.hash_stable(hcx, hasher);\n             field_indices.hash_stable(hcx, hasher);\n             user_provided_tys.hash_stable(hcx, hasher);\n+            user_provided_sigs.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             user_substs.hash_stable(hcx, hasher);"}, {"sha": "bb9346f2f468dc2431ca71b206ccf747bea7a396", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=167b460961b4c3c127c0fc8782012043c8cf97af", "patch": "@@ -64,7 +64,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n use hir;\n \n pub use self::sty::{Binder, BoundTy, BoundTyIndex, DebruijnIndex, INNERMOST};\n-pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n+pub use self::sty::{FnSig, GenSig, CanonicalPolyFnSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TyKind, PolyTraitRef};"}, {"sha": "cd9679c876355bda769abfe5a9c3c88d1e446cad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=167b460961b4c3c127c0fc8782012043c8cf97af", "patch": "@@ -11,7 +11,7 @@\n //! This module contains TyKind and its major components\n \n use hir::def_id::DefId;\n-\n+use infer::canonical::Canonical;\n use mir::interpret::ConstValue;\n use middle::region;\n use polonius_engine::Atom;\n@@ -980,6 +980,9 @@ impl<'tcx> PolyFnSig<'tcx> {\n     }\n }\n \n+pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n+\n+\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n pub struct ParamTy {\n     pub idx: u32,"}, {"sha": "d81b600d9bef4f99c0e8d5ec56668c9aa8fcfca2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167b460961b4c3c127c0fc8782012043c8cf97af/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=167b460961b4c3c127c0fc8782012043c8cf97af", "patch": "@@ -52,6 +52,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_cast_types();\n         wbcx.visit_free_region_map();\n         wbcx.visit_user_provided_tys();\n+        wbcx.visit_user_provided_sigs();\n \n         let used_trait_imports = mem::replace(\n             &mut self.tables.borrow_mut().used_trait_imports,\n@@ -388,6 +389,33 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn visit_user_provided_sigs(&mut self) {\n+        let fcx_tables = self.fcx.tables.borrow();\n+        debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n+        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n+\n+        for (&local_id, c_sig) in fcx_tables.user_provided_sigs().iter() {\n+            let hir_id = hir::HirId {\n+                owner: common_local_id_root.index,\n+                local_id,\n+            };\n+\n+            let c_sig = if let Some(c_sig) = self.tcx().lift_to_global(c_sig) {\n+                c_sig\n+            } else {\n+                span_bug!(\n+                    hir_id.to_span(&self.fcx.tcx),\n+                    \"writeback: `{:?}` missing from the global type context\",\n+                    c_sig\n+                );\n+            };\n+\n+            self.tables\n+                .user_provided_sigs_mut()\n+                .insert(hir_id, c_sig.clone());\n+        }\n+    }\n+\n     fn visit_opaque_types(&mut self, span: Span) {\n         for (&def_id, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n             let node_id = self.tcx().hir.as_local_node_id(def_id).unwrap();"}]}