{"sha": "e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWNlYmZmNjZjODllMmE1MGM4YmZjZDA4ZmJlMjIxMjY1YjMwYjA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-29T23:14:04Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-29T23:14:04Z"}, "message": "save-analysis: track associated types", "tree": {"sha": "f0230257048195446f20ce486ef25180b5d2aab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0230257048195446f20ce486ef25180b5d2aab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "html_url": "https://github.com/rust-lang/rust/commit/e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3acebff66c89e2a50c8bfcd08fbe221265b30b0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1cec5d4bf626f151a779323e16d62fe60117086", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1cec5d4bf626f151a779323e16d62fe60117086", "html_url": "https://github.com/rust-lang/rust/commit/e1cec5d4bf626f151a779323e16d62fe60117086"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "7a7fa4eda05a6fd9da7b21fd1c4ea167d6cc69b6", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e3acebff66c89e2a50c8bfcd08fbe221265b30b0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3acebff66c89e2a50c8bfcd08fbe221265b30b0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "patch": "@@ -1149,8 +1149,32 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                     &trait_item.attrs,\n                                     trait_item.span);\n             }\n-            ast::TraitItemKind::Const(_, None) |\n-            ast::TraitItemKind::Type(..) |\n+            ast::TraitItemKind::Type(ref _bounds, ref default_ty) => {\n+                // FIXME do something with _bounds (for type refs)\n+                let name = trait_item.ident.name.to_string();\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(trait_item.id));\n+                let sub_span = self.span.sub_span_after_keyword(trait_item.span, keywords::Type);\n+\n+                if !self.span.filter_generated(sub_span, trait_item.span) {\n+                    self.dumper.typedef(TypeDefData {\n+                        span: sub_span.expect(\"No span found for assoc type\"),\n+                        name: name,\n+                        id: trait_item.id,\n+                        qualname: qualname,\n+                        value: self.span.snippet(trait_item.span),\n+                        visibility: Visibility::Public,\n+                        parent: Some(trait_id),\n+                        docs: docs_for_attrs(&trait_item.attrs),\n+                        sig: None,\n+                        attributes: trait_item.attrs.clone(),\n+                    }.lower(self.tcx));\n+                }\n+\n+                if let &Some(ref default_ty) = default_ty {\n+                    self.visit_ty(default_ty)\n+                }\n+            }\n+            ast::TraitItemKind::Const(ref ty, None) => self.visit_ty(ty),\n             ast::TraitItemKind::Macro(_) => {}\n         }\n     }\n@@ -1177,7 +1201,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                     &impl_item.attrs,\n                                     impl_item.span);\n             }\n-            ast::ImplItemKind::Type(_) |\n+            ast::ImplItemKind::Type(ref ty) => self.visit_ty(ty),\n             ast::ImplItemKind::Macro(_) => {}\n         }\n     }"}, {"sha": "3fe1479f5f2ec2b0404ca6d037ebd41722adaca0", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3acebff66c89e2a50c8bfcd08fbe221265b30b0/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3acebff66c89e2a50c8bfcd08fbe221265b30b0/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=e3acebff66c89e2a50c8bfcd08fbe221265b30b0", "patch": "@@ -11,6 +11,7 @@\n #![ crate_name = \"test\" ]\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n+#![feature(associated_type_defaults)]\n \n extern crate graphviz;\n // A simple rust project\n@@ -441,3 +442,19 @@ fn test_format_args() {\n     print!(\"{0} + {} = {}\", x, y);\n     print!(\"x is {}, y is {1}, name is {n}\", x, y, n = name);\n }\n+\n+struct FrameBuffer;\n+\n+struct SilenceGenerator;\n+\n+impl Iterator for SilenceGenerator {\n+    type Item = FrameBuffer;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        panic!();\n+    }\n+}\n+\n+trait Foo {\n+    type Bar = FrameBuffer;\n+}"}]}