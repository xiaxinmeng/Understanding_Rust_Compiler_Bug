{"sha": "f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmYxMDAwNWFiMWJkYjdjNGMwZDQzZWU1NGQ1NTU2MzkxMWY1ZWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-28T16:45:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-28T16:45:10Z"}, "message": "small optimization", "tree": {"sha": "c15bc92943f963b270af679029f900bcb812542b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15bc92943f963b270af679029f900bcb812542b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "html_url": "https://github.com/rust-lang/rust/commit/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/79dd70fd9bd2de5a0b2dd4697905571f39012dc7", "html_url": "https://github.com/rust-lang/rust/commit/79dd70fd9bd2de5a0b2dd4697905571f39012dc7"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "3eafb28b8949cffe50b439b92cb191f653b39f2f", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f3ff10005ab1bdb7c4c0d43ee54d55563911f5ea", "patch": "@@ -232,10 +232,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             // we cannot determine the variant we are in. Reading from\n                             // memory would be subject to Stacked Borrows rules, leading\n                             // to all sorts of \"funny\" recursion.\n-                            self.visit_union(v)\n+                            // We only end up here if the type is *not* freeze, so we just call the\n+                            // `UnsafeCell` action.\n+                            (self.unsafe_cell_action)(v)\n                         }\n                         layout::Variants::Single { .. } => {\n-                            // Proceed further\n+                            // Proceed further, try to find where exactly that `UnsafeCell`\n+                            // is hiding.\n                             self.walk_value(v)\n                         }\n                     }"}]}