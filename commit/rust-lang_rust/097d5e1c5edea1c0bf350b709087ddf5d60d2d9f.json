{"sha": "097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5N2Q1ZTFjNWVkZWExYzBiZjM1MGI3MDkwODdkZGY1ZDYwZDJkOWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T14:03:15Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T17:58:08Z"}, "message": "1. move node_id to syntax\n2. invert rustc_session & syntax deps\n3. drop rustc_session dep in rustc_hir", "tree": {"sha": "5c1555c8d346774cab0028a3f3d73a78a8d7b9f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1555c8d346774cab0028a3f3d73a78a8d7b9f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "html_url": "https://github.com/rust-lang/rust/commit/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93a8283614e995a0cf7a866356609b7522cfda24", "url": "https://api.github.com/repos/rust-lang/rust/commits/93a8283614e995a0cf7a866356609b7522cfda24", "html_url": "https://github.com/rust-lang/rust/commit/93a8283614e995a0cf7a866356609b7522cfda24"}], "stats": {"total": 172, "additions": 83, "deletions": 89}, "files": [{"sha": "6214b56004d4642a1067345e5b57512c2806a04d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -3606,7 +3606,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_index\",\n  \"rustc_macros\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3917,6 +3916,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n+ \"syntax\",\n ]\n \n [[package]]\n@@ -4513,11 +4513,9 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n- \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"scoped-tls\",\n  \"serialize\","}, {"sha": "048c1f026be82c6ad325241d04d24c00dc12b77b", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -10,12 +10,12 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_session::node_id::NodeMap;\n use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use syntax::ast;\n+use syntax::node_id::NodeMap;\n \n use std::borrow::Borrow;\n use std::fmt::Write;"}, {"sha": "7cbe77b9e82f0c56d959fb00f693aaaf5df6cfae", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -13,11 +13,12 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n-use rustc_session::lint::{self, BuiltinLintDiagnostics, Lint, LintBuffer};\n+use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n+use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n+use rustc_session::parse::feature_err_issue;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n-use syntax::sess::feature_err_issue;\n \n use std::num::NonZeroU32;\n \n@@ -97,7 +98,7 @@ pub fn report_unstable(\n     issue: Option<NonZeroU32>,\n     is_soft: bool,\n     span: Span,\n-    soft_handler: impl FnOnce(&'static lint::Lint, Span, &str),\n+    soft_handler: impl FnOnce(&'static Lint, Span, &str),\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n@@ -119,7 +120,7 @@ pub fn report_unstable(\n     let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n     if fresh {\n         if is_soft {\n-            soft_handler(lint::builtin::SOFT_UNSTABLE, span, &msg)\n+            soft_handler(SOFT_UNSTABLE, span, &msg)\n         } else {\n             feature_err_issue(&sess.parse_sess, feature, span, GateIssue::Library(issue), &msg)\n                 .emit();\n@@ -175,19 +176,19 @@ fn deprecation_message_common(message: String, reason: Option<Symbol>) -> String\n \n pub fn deprecation_message(depr: &Deprecation, path: &str) -> (String, &'static Lint) {\n     let message = format!(\"use of deprecated item '{}'\", path);\n-    (deprecation_message_common(message, depr.note), lint::builtin::DEPRECATED)\n+    (deprecation_message_common(message, depr.note), DEPRECATED)\n }\n \n pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String, &'static Lint) {\n     let (message, lint) = if deprecation_in_effect(&depr.since.as_str()) {\n-        (format!(\"use of deprecated item '{}'\", path), lint::builtin::DEPRECATED)\n+        (format!(\"use of deprecated item '{}'\", path), DEPRECATED)\n     } else {\n         (\n             format!(\n                 \"use of item '{}' that will be deprecated in future version {}\",\n                 path, depr.since\n             ),\n-            lint::builtin::DEPRECATED_IN_FUTURE,\n+            DEPRECATED_IN_FUTURE,\n         )\n     };\n     (deprecation_message_common(message, Some(depr.reason)), lint)"}, {"sha": "f12032943f91f11389f093dea8fb5bb64462375b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -41,33 +41,34 @@ use crate::ty::{ExistentialPredicate, InferTy, ParamTy, PolyFnSig, Predicate, Pr\n use crate::ty::{InferConst, ParamConst};\n use crate::ty::{List, TyKind, TyS};\n use crate::util::common::ErrorReported;\n-use rustc_data_structures::sync;\n-use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n-use rustc_hir::{HirId, Node, TraitCandidate};\n-use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n-use rustc_session::config::CrateType;\n-use rustc_session::config::{BorrowckMode, OutputFilenames};\n-use rustc_session::Session;\n-\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n-use rustc_data_structures::sync::{Lock, Lrc, WorkerLocal};\n+use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::DiagnosticBuilder;\n+use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRATE};\n+use rustc_hir::{HirId, Node, TraitCandidate};\n+use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n+use rustc_session::config::CrateType;\n+use rustc_session::config::{BorrowckMode, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n+use syntax::ast;\n+use syntax::expand::allocator::AllocatorKind;\n+use syntax::node_id::NodeMap;\n+\n use smallvec::SmallVec;\n use std::any::Any;\n use std::borrow::Borrow;\n@@ -79,8 +80,6 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n-use syntax::ast;\n-use syntax::expand::allocator::AllocatorKind;\n \n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n "}, {"sha": "f417b907a381139c31bbf4021ace77a844722487", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -39,11 +39,13 @@ use rustc_hir::{GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n-use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n+use syntax::ast::{self, Constness, Ident, Name};\n+use syntax::node_id::{NodeId, NodeMap, NodeSet};\n+\n use smallvec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n@@ -53,7 +55,6 @@ use std::ops::Deref;\n use std::ops::Range;\n use std::slice;\n use std::{mem, ptr};\n-use syntax::ast::{self, Constness, Ident, Name, NodeId};\n \n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;"}, {"sha": "e27f2bdb8d25f83f2b1c9be563127e058eb02f33", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -7,13 +7,13 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::node_id::NodeMap;\n use syntax::visit::{self, Visitor};\n \n use log::debug;"}, {"sha": "932ca743b02c66513be0ba5b1fcc8377997d7c4c", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -49,8 +49,8 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n-use rustc_session::lint::{builtin, BuiltinLintDiagnostics, LintBuffer};\n-use rustc_session::node_id::NodeMap;\n+use rustc_session::lint::{builtin::BARE_TRAIT_OBJECTS, BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, ExpnData, ExpnKind};\n@@ -59,8 +59,8 @@ use rustc_span::Span;\n use syntax::ast;\n use syntax::ast::*;\n use syntax::attr;\n+use syntax::node_id::NodeMap;\n use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Nonterminal, Token};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::visit::{self, Visitor};\n@@ -2621,7 +2621,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .unwrap_or(true);\n         if !is_macro_callsite {\n             self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n-                builtin::BARE_TRAIT_OBJECTS,\n+                BARE_TRAIT_OBJECTS,\n                 id,\n                 span,\n                 \"trait objects without an explicit `dyn` are deprecated\","}, {"sha": "3b13ab354fdf98e75585d9110357f8db03d42430", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,13 +1,13 @@\n use rustc_errors::{struct_span_err, Handler};\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue, UnstableFeatures};\n+use rustc_session::parse::{feature_err, feature_err_issue, ParseSess};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use syntax::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};\n use syntax::ast::{GenericParam, GenericParamKind, PatKind, RangeEnd, VariantData};\n use syntax::attr;\n-use syntax::sess::{feature_err, feature_err_issue, ParseSess};\n use syntax::visit::{self, FnKind, Visitor};\n \n use log::debug;"}, {"sha": "aa373d31e0609f7bd923aa23d2acc6427db0a689", "filename": "src/librustc_builtin_macros/cmdline_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcmdline_attrs.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,10 +1,10 @@\n //! Attributes injected into the crate root from command line using `-Z crate-attr`.\n \n use rustc_expand::panictry;\n+use rustc_session::parse::ParseSess;\n use rustc_span::FileName;\n use syntax::ast::{self, AttrItem, AttrStyle};\n use syntax::attr::mk_attr;\n-use syntax::sess::ParseSess;\n use syntax::token;\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {"}, {"sha": "364d8ff8e2262bdf413dc21cf130dfb76a16e3d2", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -183,13 +183,13 @@ use std::vec;\n \n use rustc_attr as attr;\n use rustc_expand::base::{Annotatable, ExtCtxt};\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind};\n use syntax::ast::{GenericArg, GenericParamKind, VariantData};\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n \n use ty::{LifetimeBounds, Path, Ptr, PtrTy, Self_, Ty};"}, {"sha": "75bd64895b0db788bf5c3eb1259db658f6cf791e", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -2,6 +2,7 @@ use std::mem;\n \n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n+use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{Span, DUMMY_SP};\n@@ -11,7 +12,6 @@ use syntax::attr;\n use syntax::expand::is_proc_macro_attr;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::visit::{self, Visitor};\n \n struct ProcMacroDerive {"}, {"sha": "6663eecbf5f4b032d7371ffebe02f8bd05c7a11b", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,11 +1,11 @@\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::ExpansionConfig;\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::AstPass;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::{ast, attr};\n \n pub fn inject("}, {"sha": "6a73f121c99bf57b1f7a21b7edbf0a34ea0698b9", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -4,6 +4,7 @@ use log::debug;\n use rustc_expand::base::{ExtCtxt, Resolver};\n use rustc_expand::expand::{AstFragment, ExpansionConfig};\n use rustc_feature::Features;\n+use rustc_session::parse::ParseSess;\n use rustc_span::hygiene::{AstPass, SyntaxContext, Transparency};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n@@ -15,7 +16,6 @@ use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax::mut_visit::{ExpectOne, *};\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n \n use std::{iter, mem};\n "}, {"sha": "536259e05471805e6742d90555e567287e69a362", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_parse::{self, parser, DirectoryOwnership, MACRO_ARGUMENTS};\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnId, ExpnKind};\n use rustc_span::source_map::SourceMap;\n@@ -14,7 +15,6 @@ use smallvec::{smallvec, SmallVec};\n use syntax::ast::{self, Attribute, Name, NodeId, PatKind};\n use syntax::mut_visit::{self, MutVisitor};\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, TokenStream};\n use syntax::visit::Visitor;"}, {"sha": "9964818c36736a65ca2737397d6fca6667e5c691", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -13,6 +13,7 @@ use rustc_parse::configure;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use rustc_parse::DirectoryOwnership;\n+use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{FileName, Span, DUMMY_SP};\n@@ -21,7 +22,6 @@ use syntax::ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::{feature_err, ParseSess};\n use syntax::token;\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::util::map_in_place::MapInPlace;"}, {"sha": "a7d7f811c56f880d627c0f60fef8c56210629f76", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -78,11 +78,11 @@ use crate::mbe::{self, TokenTree};\n \n use rustc_parse::parser::{FollowedByType, Parser, PathStyle};\n use rustc_parse::Directory;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n use syntax::ast::{Ident, Name};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, DocComment, Nonterminal, Token};\n use syntax::tokenstream::TokenStream;\n "}, {"sha": "34a0616eadbe6d6825ddb465104969889db78be6", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -15,13 +15,13 @@ use rustc_errors::{Applicability, DiagnosticBuilder, FatalError};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n+use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use syntax::ast;\n use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, NtTT, Token, TokenKind::*};\n use syntax::tokenstream::{DelimSpan, TokenStream};\n "}, {"sha": "8cac1fa658e04417d71be82e3a696c20de941634", "filename": "src/librustc_expand/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fquoted.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,10 +1,10 @@\n use crate::mbe::macro_parser;\n use crate::mbe::{Delimited, KleeneOp, KleeneToken, SequenceRepetition, TokenTree};\n \n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n use syntax::ast;\n use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token};\n use syntax::tokenstream;\n "}, {"sha": "0a86754b23f04e6efabe8f3c9b7d17e3d66f9240", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -4,11 +4,11 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax::ast;\n use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax::util::comments;"}, {"sha": "02b394b6d798033d2ea39a8d83bcb13b8b963a26", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -17,6 +17,5 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n-rustc_session = { path = \"../librustc_session\" }\n syntax = { path = \"../libsyntax\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "0db75454aee3864c094946a89e8caf2de1458d74", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -12,21 +12,22 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_errors::FatalError;\n use rustc_macros::HashStable_Generic;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use smallvec::SmallVec;\n-use std::collections::{BTreeMap, BTreeSet};\n-use std::fmt;\n use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Constness, Movability, Mutability, Unsafety};\n+use syntax::node_id::NodeMap;\n use syntax::tokenstream::TokenStream;\n use syntax::util::parser::ExprPrecedence;\n \n+use smallvec::SmallVec;\n+use std::collections::{BTreeMap, BTreeSet};\n+use std::fmt;\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Lifetime {\n     pub hir_id: HirId,"}, {"sha": "ae758b5e3273af7c821bbe6d408a23b766c26fa0", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -14,13 +14,13 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_lint::LintStore;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_span::edition;\n use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::ast::{self, MetaItemKind};\n-use syntax::sess::ParseSess;\n+use syntax::ast::MetaItemKind;\n use syntax::token;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -106,7 +106,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n \n                 error!(r#\"expected `key` or `key=\"value\"`\"#);\n             })\n-            .collect::<ast::CrateConfig>();\n+            .collect::<CrateConfig>();\n         cfg.into_iter().map(|(a, b)| (a.to_string(), b.map(|b| b.to_string()))).collect()\n     })\n }"}, {"sha": "842b702be2ab94eda37eda32fd4fec10fd0514b3", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -14,6 +14,7 @@ use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n@@ -40,7 +41,7 @@ use syntax::{self, ast};\n /// This is performed by checking whether a whitelisted set of\n /// features is available on the target machine, by querying LLVM.\n pub fn add_configuration(\n-    cfg: &mut ast::CrateConfig,\n+    cfg: &mut CrateConfig,\n     sess: &Session,\n     codegen_backend: &dyn CodegenBackend,\n ) {"}, {"sha": "ae490a1c6ddc8f7397411b087a0f37290c95a31b", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -9,15 +9,15 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n-use rustc_hir::hir_id::HirId;\n-use rustc_hir::intravisit;\n+use rustc_hir::{intravisit, HirId};\n use rustc_session::lint::{builtin, Level, Lint};\n+use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::{sym, MultiSpan, Symbol};\n+use rustc_span::source_map::MultiSpan;\n+use rustc_span::symbol::{sym, Symbol};\n use syntax::ast;\n use syntax::attr;\n use syntax::print::pprust;\n-use syntax::sess::feature_err;\n use syntax::unwrap_or;\n \n use std::cmp;"}, {"sha": "0edd56680f9336a4a48c1a13eec6652f981ace6f", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -16,14 +16,14 @@ use rustc_feature::{Feature, Features, State as FeatureState};\n use rustc_feature::{\n     ACCEPTED_FEATURES, ACTIVE_FEATURES, REMOVED_FEATURES, STABLE_REMOVED_FEATURES,\n };\n+use rustc_session::parse::{feature_err, ParseSess};\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use syntax::ast::{self, AttrItem, Attribute, MetaItem};\n use syntax::attr::HasAttrs;\n use syntax::mut_visit::*;\n use syntax::ptr::P;\n-use syntax::sess::{feature_err, ParseSess};\n use syntax::util::map_in_place::MapInPlace;\n \n use smallvec::SmallVec;"}, {"sha": "af56e9d344d2e81733dcaf18cda59520c38ff2fc", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -2,9 +2,9 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{DiagnosticBuilder, FatalError};\n use rustc_lexer::unescape;\n use rustc_lexer::Base;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Pos, Span};\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token, TokenKind};\n use syntax::util::comments;\n "}, {"sha": "d25557855427d208c0616e9b4aa1213127599bb3", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -4,16 +4,15 @@\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(slice_patterns))]\n \n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{FileName, SourceFile, Span};\n use syntax::ast;\n use syntax::print::pprust;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Nonterminal};\n use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n-use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n-use rustc_span::{FileName, SourceFile, Span};\n-\n use std::borrow::Cow;\n use std::path::Path;\n use std::str;"}, {"sha": "4c7b37ff7e1f1f4f8e74c9c94344b5c95356fad8", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -17,14 +17,14 @@ use crate::{Directory, DirectoryOwnership};\n \n use log::debug;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, FatalError, PResult};\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, FileName, Span, DUMMY_SP};\n use syntax::ast::{self, AttrStyle, AttrVec, CrateSugar, Extern, Ident, Unsafety, DUMMY_NODE_ID};\n use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, StrLit, Visibility, VisibilityKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::sess::ParseSess;\n use syntax::token::{self, DelimToken, Token, TokenKind};\n use syntax::tokenstream::{self, DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};"}, {"sha": "e8e3b685794882e6ea73440c3e9b4e445f8e7575", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -30,9 +30,9 @@ use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n+use syntax::node_id::NodeMap;\n use syntax::visit::{self, Visitor};\n \n struct UnusedImport<'a> {"}, {"sha": "55d1be70ad71ec75b616087ba1d6d48708b8e674", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -37,7 +37,6 @@ use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n-use rustc_session::node_id::{NodeMap, NodeSet};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n@@ -47,6 +46,7 @@ use syntax::ast::{self, FloatTy, Ident, IntTy, Name, NodeId, UintTy};\n use syntax::ast::{Crate, CRATE_NODE_ID};\n use syntax::ast::{ItemKind, Path};\n use syntax::attr;\n+use syntax::node_id::{NodeMap, NodeSet};\n use syntax::print::pprust;\n use syntax::unwrap_or;\n use syntax::visit::{self, Visitor};"}, {"sha": "c74011e26aae8efa1875493264dd7e643bff206a", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -19,3 +19,4 @@ rustc_span = { path = \"../librustc_span\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n num_cpus = \"1.0\"\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "4101c32d547aad70bdae8246ab2394d89b0bc88b", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -10,7 +10,6 @@ pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]\n pub mod lint;\n-pub mod node_id;\n pub mod parse;\n \n mod code_stats;"}, {"sha": "983dfb19919dd1c4f26a1a25f0ac8902329c922e", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,8 +1,8 @@\n pub use self::Level::*;\n-use crate::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+use syntax::node_id::{NodeId, NodeMap};\n \n pub mod builtin;\n "}, {"sha": "32642300262952bc3ebaaddb9e5ecbce1b3a82ed", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -2,8 +2,6 @@\n //! It also serves as an input to the parser itself.\n \n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n-use crate::node_id::NodeId;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc, Once};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n@@ -13,6 +11,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{MultiSpan, Span, Symbol};\n+use syntax::node_id::NodeId;\n \n use std::path::PathBuf;\n use std::str;"}, {"sha": "da3a277dc2ac6d9412a210adeab2a22e0c17bcd9", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -8,9 +8,9 @@ use std::mem;\n use std::ops;\n \n use rustc_feature::Features;\n+use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use syntax::ast::{LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n-use syntax::sess::ParseSess;\n \n use rustc_span::Span;\n "}, {"sha": "1ea053605ec1e485be951b6555e89a6ccaf34aec", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -12,10 +12,10 @@ use std::io;\n use std::io::prelude::*;\n \n use rustc_parse::lexer;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::{FileName, Span};\n-use syntax::sess::ParseSess;\n use syntax::token::{self, Token};\n \n /// Highlights `src`, returning the HTML output."}, {"sha": "3b7c0db05a5e24e6310517956bd58de93ed782ee", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -1,9 +1,9 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n use rustc_parse::lexer::StringReader as Lexer;\n+use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n use rustc_span::{FileName, InnerSpan};\n-use syntax::sess::ParseSess;\n use syntax::token;\n \n use crate::clean;"}, {"sha": "381308ac6be1cd736109fd6891b26b103f229367", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -395,8 +395,8 @@ pub fn make_test(\n             use rustc_errors::emitter::EmitterWriter;\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n+            use rustc_session::parse::ParseSess;\n             use rustc_span::source_map::FilePathMapping;\n-            use syntax::sess::ParseSess;\n \n             let filename = FileName::anon_source_code(s);\n             let source = crates + &everything_else;"}, {"sha": "b3e16f740fdb6f1626f6760429e33bbc8d11bd5b", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -16,9 +16,7 @@ scoped-tls = \"1.0\"\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-rustc_session = { path = \"../librustc_session\" }"}, {"sha": "49f559de1b123d9b0632b6d6a5c675d2f9b7553a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -256,15 +256,7 @@ impl ParenthesizedArgs {\n     }\n }\n \n-pub use rustc_session::node_id::NodeId;\n-\n-/// `NodeId` used to represent the root of the crate.\n-pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n-\n-/// When parsing and doing expansions, we initially give all AST nodes this AST\n-/// node value. Then later, in the renumber pass, we renumber them to have\n-/// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n+pub use crate::node_id::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n \n /// A modifier on a bound, e.g., `?Sized` or `?const Trait`.\n ///\n@@ -432,8 +424,6 @@ pub struct WhereEqPredicate {\n     pub rhs_ty: P<Ty>,\n }\n \n-pub use rustc_session::parse::CrateConfig;\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,"}, {"sha": "a0b2d50cef3f69fada8cc6b78e6c38a6b8638c8c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -41,8 +41,8 @@ pub mod attr;\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;\n+pub mod node_id;\n pub mod ptr;\n-pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n pub mod visit;"}, {"sha": "58d2334a7b148ccf150bd0acb04d04489b582710", "filename": "src/libsyntax/node_id.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097d5e1c5edea1c0bf350b709087ddf5d60d2d9f/src%2Flibsyntax%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fnode_id.rs?ref=097d5e1c5edea1c0bf350b709087ddf5d60d2d9f", "patch": "@@ -11,6 +11,14 @@ rustc_index::newtype_index! {\n \n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n \n+/// `NodeId` used to represent the root of the crate.\n+pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n+\n+/// When parsing and doing expansions, we initially give all AST nodes this AST\n+/// node value. Then later, in the renumber pass, we renumber them to have\n+/// small, positive ids.\n+pub const DUMMY_NODE_ID: NodeId = NodeId::MAX;\n+\n impl NodeId {\n     pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n         NodeId::from_u32(expn_id.as_u32())", "previous_filename": "src/librustc_session/node_id.rs"}]}