{"sha": "15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YTI4Zjc5YjhmYzE2ZjI4YWFiNWY3Y2M0NWIzZTE0ZmY3ZjdlNDc=", "commit": {"author": {"name": "Valentine Valyaeff", "email": "valentine.valyaeff@gmail.com", "date": "2019-09-04T14:02:10Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-04T14:02:10Z"}, "message": "Another fix for `merge_imports` (#3769)", "tree": {"sha": "67d483886412afb172ff1ad26601444368d300bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d483886412afb172ff1ad26601444368d300bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "html_url": "https://github.com/rust-lang/rust/commit/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47/comments", "author": {"login": "valff", "id": 12503689, "node_id": "MDQ6VXNlcjEyNTAzNjg5", "avatar_url": "https://avatars.githubusercontent.com/u/12503689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valff", "html_url": "https://github.com/valff", "followers_url": "https://api.github.com/users/valff/followers", "following_url": "https://api.github.com/users/valff/following{/other_user}", "gists_url": "https://api.github.com/users/valff/gists{/gist_id}", "starred_url": "https://api.github.com/users/valff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valff/subscriptions", "organizations_url": "https://api.github.com/users/valff/orgs", "repos_url": "https://api.github.com/users/valff/repos", "events_url": "https://api.github.com/users/valff/events{/privacy}", "received_events_url": "https://api.github.com/users/valff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "950b288d6fa3179d9a19c6762125be7fbc7c66e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/950b288d6fa3179d9a19c6762125be7fbc7c66e8", "html_url": "https://github.com/rust-lang/rust/commit/950b288d6fa3179d9a19c6762125be7fbc7c66e8"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "61a359a498b79926130e991d548075c8d956aaf3", "filename": "src/imports.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "patch": "@@ -166,23 +166,16 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n         }\n \n         for flattened in use_tree.flatten() {\n-            merge_use_trees_inner(&mut result, flattened);\n+            if let Some(tree) = result.iter_mut().find(|tree| tree.share_prefix(&flattened)) {\n+                tree.merge(&flattened);\n+            } else {\n+                result.push(flattened);\n+            }\n         }\n     }\n     result\n }\n \n-fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree) {\n-    for tree in trees.iter_mut() {\n-        if tree.share_prefix(&use_tree) {\n-            tree.merge(&use_tree);\n-            return;\n-        }\n-    }\n-\n-    trees.push(use_tree);\n-}\n-\n impl fmt::Debug for UseTree {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n@@ -595,7 +588,6 @@ fn merge_rest(a: &[UseSegment], b: &[UseSegment], mut len: usize) -> Option<Vec<\n     if a.len() != len && b.len() != len {\n         if let UseSegment::List(mut list) = a[len].clone() {\n             merge_use_trees_inner(&mut list, UseTree::from_path(b[len..].to_vec(), DUMMY_SP));\n-            list.sort();\n             let mut new_path = b[..len].to_vec();\n             new_path.push(UseSegment::List(list));\n             return Some(new_path);\n@@ -622,6 +614,26 @@ fn merge_rest(a: &[UseSegment], b: &[UseSegment], mut len: usize) -> Option<Vec<\n     Some(new_path)\n }\n \n+fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree) {\n+    let similar_trees = trees.iter_mut().filter(|tree| tree.share_prefix(&use_tree));\n+    if use_tree.path.len() == 1 {\n+        if let Some(tree) = similar_trees.min_by_key(|tree| tree.path.len()) {\n+            if tree.path.len() == 1 {\n+                return;\n+            }\n+        }\n+    } else {\n+        if let Some(tree) = similar_trees.max_by_key(|tree| tree.path.len()) {\n+            if tree.path.len() > 1 {\n+                tree.merge(&use_tree);\n+                return;\n+            }\n+        }\n+    }\n+    trees.push(use_tree);\n+    trees.sort();\n+}\n+\n impl PartialOrd for UseSegment {\n     fn partial_cmp(&self, other: &UseSegment) -> Option<Ordering> {\n         Some(self.cmp(other))\n@@ -988,7 +1000,12 @@ mod test {\n         test_merge!([\"a::b::{c, d}\", \"a::b::{e, f}\"], [\"a::b::{c, d, e, f}\"]);\n         test_merge!([\"a::b::c\", \"a::b\"], [\"a::{b, b::c}\"]);\n         test_merge!([\"a::b\", \"a::b\"], [\"a::b\"]);\n-        test_merge!([\"a\", \"a::b\", \"a::b::c\"], [\"a::{self, b::{self, c}}\"]);\n+        test_merge!([\"a\", \"a::b\", \"a::b::c\"], [\"a::{self, b, b::c}\"]);\n+        test_merge!(\n+            [\"a\", \"a::b\", \"a::b::c\", \"a::b::c::d\"],\n+            [\"a::{self, b, b::{c, c::d}}\"]\n+        );\n+        test_merge!([\"a\", \"a::b\", \"a::b::c\", \"a::b\"], [\"a::{self, b, b::c}\"]);\n         test_merge!(\n             [\"a::{b::{self, c}, d::e}\", \"a::d::f\"],\n             [\"a::{b::{self, c}, d::{e, f}}\"]"}, {"sha": "2200d7dec6d534fcd7db06e1edf75848bbb05cdf", "filename": "tests/target/configs/imports_layout/merge_mixed.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fimports_layout%2Fmerge_mixed.rs?ref=15a28f79b8fc16f28aab5f7cc45b3e14ff7f7e47", "patch": "@@ -2,7 +2,4 @@\n // rustfmt-merge_imports: true\n // rustfmt-imports_layout: Mixed\n \n-use std::{\n-    fmt, io,\n-    str::{self, FromStr},\n-};\n+use std::{fmt, io, str, str::FromStr};"}]}