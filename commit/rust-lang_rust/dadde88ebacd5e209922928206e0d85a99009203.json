{"sha": "dadde88ebacd5e209922928206e0d85a99009203", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGRlODhlYmFjZDVlMjA5OTIyOTI4MjA2ZTBkODVhOTkwMDkyMDM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-21T13:33:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-08-21T16:08:19Z"}, "message": "Unify checks for lint missing_doc_code_examples and --show-coverage", "tree": {"sha": "ff53ec2e9a253d457d40c680f3b6ebf0f5677b39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff53ec2e9a253d457d40c680f3b6ebf0f5677b39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadde88ebacd5e209922928206e0d85a99009203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadde88ebacd5e209922928206e0d85a99009203", "html_url": "https://github.com/rust-lang/rust/commit/dadde88ebacd5e209922928206e0d85a99009203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadde88ebacd5e209922928206e0d85a99009203/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adeedf52435fe893156f93e2771dc66adf02abc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/adeedf52435fe893156f93e2771dc66adf02abc9", "html_url": "https://github.com/rust-lang/rust/commit/adeedf52435fe893156f93e2771dc66adf02abc9"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "671e082556722e8e08ef94c0700cbc52135e6d24", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dadde88ebacd5e209922928206e0d85a99009203/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadde88ebacd5e209922928206e0d85a99009203/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=dadde88ebacd5e209922928206e0d85a99009203", "patch": "@@ -3,7 +3,7 @@ use crate::config::OutputFormat;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n-use crate::passes::doc_test_lints::Tests;\n+use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n@@ -231,19 +231,6 @@ impl fold::DocFolder for CoverageCalculator {\n                 let has_docs = !i.attrs.doc_strings.is_empty();\n                 let mut tests = Tests { found_tests: 0 };\n \n-                let should_have_doc_examples = !matches!(i.inner,\n-                    clean::StructFieldItem(_)\n-                    | clean::VariantItem(_)\n-                    | clean::AssocConstItem(_, _)\n-                    | clean::AssocTypeItem(_, _)\n-                    | clean::TypedefItem(_, _)\n-                    | clean::StaticItem(_)\n-                    | clean::ConstantItem(_)\n-                    | clean::ExternCrateItem(_, _)\n-                    | clean::ImportItem(_)\n-                    | clean::PrimitiveItem(_)\n-                    | clean::KeywordItem(_)\n-                );\n                 find_testable_code(\n                     &i.attrs.doc_strings.iter().map(|d| d.as_str()).collect::<Vec<_>>().join(\"\\n\"),\n                     &mut tests,\n@@ -257,7 +244,7 @@ impl fold::DocFolder for CoverageCalculator {\n                 self.items.entry(i.source.filename.clone()).or_default().count_item(\n                     has_docs,\n                     has_doc_example,\n-                    should_have_doc_examples,\n+                    should_have_doc_example(&i.inner),\n                 );\n             }\n         }"}, {"sha": "a465a5f681f5c16e5e1da949b604aa7757e0b846", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dadde88ebacd5e209922928206e0d85a99009203/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadde88ebacd5e209922928206e0d85a99009203/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=dadde88ebacd5e209922928206e0d85a99009203", "patch": "@@ -4,6 +4,7 @@\n //! - PRIVATE_DOC_TESTS: this looks for private items with doc-tests.\n \n use super::{span_of_attrs, Pass};\n+use crate::clean;\n use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n@@ -59,6 +60,22 @@ impl crate::test::Tester for Tests {\n     }\n }\n \n+pub fn should_have_doc_example(item_kind: &clean::ItemEnum) -> bool {\n+    !matches!(item_kind,\n+        clean::StructFieldItem(_)\n+        | clean::VariantItem(_)\n+        | clean::AssocConstItem(_, _)\n+        | clean::AssocTypeItem(_, _)\n+        | clean::TypedefItem(_, _)\n+        | clean::StaticItem(_)\n+        | clean::ConstantItem(_)\n+        | clean::ExternCrateItem(_, _)\n+        | clean::ImportItem(_)\n+        | clean::PrimitiveItem(_)\n+        | clean::KeywordItem(_)\n+    )\n+}\n+\n pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n         Some(hir_id) => hir_id,\n@@ -73,13 +90,7 @@ pub fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n     find_testable_code(&dox, &mut tests, ErrorCodes::No, false, None);\n \n     if tests.found_tests == 0 {\n-        use ItemEnum::*;\n-\n-        let should_report = match item.inner {\n-            ExternCrateItem(_, _) | ImportItem(_) | PrimitiveItem(_) | KeywordItem(_) => false,\n-            _ => true,\n-        };\n-        if should_report {\n+        if should_have_doc_example(&item.inner) {\n             debug!(\"reporting error for {:?} (hir_id={:?})\", item, hir_id);\n             let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n             cx.tcx.struct_span_lint_hir("}]}