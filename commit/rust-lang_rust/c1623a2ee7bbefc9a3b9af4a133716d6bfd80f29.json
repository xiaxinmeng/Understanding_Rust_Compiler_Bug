{"sha": "c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNjIzYTJlZTdiYmVmYzlhM2I5YWY0YTEzMzcxNmQ2YmZkODBmMjk=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-02-02T21:01:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-02T21:01:32Z"}, "message": "Rollup merge of #80593 - jackh726:chalk-upgrade, r=nikomatsakis\n\nUpgrade Chalk\n\n~~Blocked on rust-lang/chalk#670~~\n~~Now blocked on rust-lang/chalk#680 and release~~\n\nIn addition to the straight upgrade, I also tried to fix some tests by properly returning variables and max universes in the solution. Unfortunately, this actually triggers the same perf problem that rustc traits code runs into in `canonicalizer`. Not sure what the root cause of this problem is, or why it's supposed to be solved in chalk.\n\nr? ```@nikomatsakis```", "tree": {"sha": "21971f8418602f21d5edf6b822415f1225c6d8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21971f8418602f21d5edf6b822415f1225c6d8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGb2sCRBK7hj4Ov3rIwAAdHIIAGi5BLsOCmOpOzpxH/egKY3k\n5tQtGqIX5ktGwu5ekfvdazF0csHzdxvC87iBQNmFKaCd99tTiB2za4oUCn51CJFL\noRVN+Wy9s1y+2sd4M49p8SUSzqSNqkA2GI1ay5au3geiJbqdaDERP4wgtIEPDJz3\nbBLoey9ip0TM2MKE9d0xmUrEb/PkxnNovCbJ3YCykmpk/qau5uUzsF+pRbmElDWP\ntNGmwrw9QsG/iqPG0MBPremuJC52W+p0Rr91aFv//UpVoWNi7in1Bo85whh5VmJQ\nLGQAWSTHdAEUzxeXRztgQO7E267y9Z+qggkPnREEaJmKmriXPIlBfGrieQSO3gg=\n=E4vQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 21971f8418602f21d5edf6b822415f1225c6d8c0\nparent 3182375e064b8fa90437aee1465bccafd8187d89\nparent a0622d60e0679878950ebe13383eb960ebea6fd6\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1612299692 -0500\ncommitter GitHub <noreply@github.com> 1612299692 -0500\n\nRollup merge of #80593 - jackh726:chalk-upgrade, r=nikomatsakis\n\nUpgrade Chalk\n\n~~Blocked on rust-lang/chalk#670~~\n~~Now blocked on rust-lang/chalk#680 and release~~\n\nIn addition to the straight upgrade, I also tried to fix some tests by properly returning variables and max universes in the solution. Unfortunately, this actually triggers the same perf problem that rustc traits code runs into in `canonicalizer`. Not sure what the root cause of this problem is, or why it's supposed to be solved in chalk.\n\nr? ```@nikomatsakis```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "html_url": "https://github.com/rust-lang/rust/commit/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3182375e064b8fa90437aee1465bccafd8187d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/3182375e064b8fa90437aee1465bccafd8187d89", "html_url": "https://github.com/rust-lang/rust/commit/3182375e064b8fa90437aee1465bccafd8187d89"}, {"sha": "a0622d60e0679878950ebe13383eb960ebea6fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0622d60e0679878950ebe13383eb960ebea6fd6", "html_url": "https://github.com/rust-lang/rust/commit/a0622d60e0679878950ebe13383eb960ebea6fd6"}], "stats": {"total": 213, "additions": 174, "deletions": 39}, "files": [{"sha": "e3e631613a9ec639569388b989ada362f85dd378", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -496,9 +496,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9f88ce4deae1dace71e49b7611cfae2d5489de3530d6daba5758043c47ac3a10\"\n+checksum = \"3983193cacd81f0f924acb666b7fe5e1a0d81db9f113fa69203eda7ea8ce8b6c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -508,9 +508,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e34c9b1b10616782143d7f49490f91ae94afaf2202de3ab0b2835e78b4f0ccc\"\n+checksum = \"05a171ce5abbf0fbd06f221ab80ab182c7ef78603d23b858bc44e7ce8a86a396\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -521,19 +521,20 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"63362c629c2014ab639b04029070763fb8224df136d1363d30e9ece4c8877da3\"\n+checksum = \"a522f53af971e7678f472d687e053120157b3ae26e2ebd5ecbc0f5ab124f2cb6\"\n dependencies = [\n+ \"bitflags\",\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cac338a67af52a7f50bb2f8232e730a3518ce432dbe303246acfe525ddd838c7\"\n+checksum = \"cdf79fb77a567e456a170f7ec84ea6584163d4ba3f13660cd182013d34ca667c\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -4313,6 +4314,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-solve\",\n  \"rustc_ast\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_index\","}, {"sha": "aa4fd055d5ee01ff85fa184b284a0b409c7ef74e", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -353,10 +353,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `TyVar(vid)` is unresolved, track its universe index in the canonicalized\n                     // result.\n                     Err(mut ui) => {\n-                        if !self.infcx.unwrap().tcx.sess.opts.debugging_opts.chalk {\n-                            // FIXME: perf problem described in #55921.\n-                            ui = ty::UniverseIndex::ROOT;\n-                        }\n+                        // FIXME: perf problem described in #55921.\n+                        ui = ty::UniverseIndex::ROOT;\n                         self.canonicalize_ty_var(\n                             CanonicalVarInfo {\n                                 kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n@@ -440,10 +438,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `ConstVar(vid)` is unresolved, track its universe index in the\n                     // canonicalized result\n                     Err(mut ui) => {\n-                        if !self.infcx.unwrap().tcx.sess.opts.debugging_opts.chalk {\n-                            // FIXME: perf problem described in #55921.\n-                            ui = ty::UniverseIndex::ROOT;\n-                        }\n+                        // FIXME: perf problem described in #55921.\n+                        ui = ty::UniverseIndex::ROOT;\n                         return self.canonicalize_const_var(\n                             CanonicalVarInfo { kind: CanonicalVarKind::Const(ui) },\n                             ct,"}, {"sha": "d33aad3b71040e1ba5195d75a6043bb89ccfdf6a", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.36.0\"\n+chalk-ir = \"0.55.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"9.0.0\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "74873778f74ba16dc213d9edbd9a6a98a80c3ac3", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -72,6 +72,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n+    type InternedVariances = Vec<chalk_ir::Variance>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type DefId = DefId;\n     type InternedAdtId = &'tcx AdtDef;\n@@ -86,17 +87,34 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n             write!(fmt, \"{:?}\", pci.consequence)?;\n \n             let conditions = pci.conditions.interned();\n+            let constraints = pci.constraints.interned();\n \n             let conds = conditions.len();\n-            if conds == 0 {\n+            let consts = constraints.len();\n+            if conds == 0 && consts == 0 {\n                 return Ok(());\n             }\n \n             write!(fmt, \" :- \")?;\n-            for cond in &conditions[..conds - 1] {\n-                write!(fmt, \"{:?}, \", cond)?;\n+\n+            if conds != 0 {\n+                for cond in &conditions[..conds - 1] {\n+                    write!(fmt, \"{:?}, \", cond)?;\n+                }\n+                write!(fmt, \"{:?}\", conditions[conds - 1])?;\n+            }\n+\n+            if conds != 0 && consts != 0 {\n+                write!(fmt, \" ; \")?;\n             }\n-            write!(fmt, \"{:?}\", conditions[conds - 1])?;\n+\n+            if consts != 0 {\n+                for constraint in &constraints[..consts - 1] {\n+                    write!(fmt, \"{:?}, \", constraint)?;\n+                }\n+                write!(fmt, \"{:?}\", constraints[consts - 1])?;\n+            }\n+\n             Ok(())\n         };\n         Some(write())\n@@ -351,6 +369,20 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n+\n+    fn intern_variances<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<chalk_ir::Variance, E>>,\n+    ) -> Result<Self::InternedVariances, E> {\n+        data.into_iter().collect::<Result<Vec<_>, _>>()\n+    }\n+\n+    fn variances_data<'a>(\n+        &self,\n+        variances: &'a Self::InternedVariances,\n+    ) -> &'a [chalk_ir::Variance] {\n+        variances\n+    }\n }\n \n impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {"}, {"sha": "8fdbc3b76b45933afda7b00d8a731f98ad539103", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -6,15 +6,16 @@ edition = \"2018\"\n \n [dependencies]\n tracing = \"0.1\"\n+rustc_attr = { path = \"../rustc_attr\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.36.0\"\n-chalk-solve = \"0.36.0\"\n-chalk-engine = \"0.36.0\"\n+chalk-ir = \"0.55.0\"\n+chalk-solve = \"0.55.0\"\n+chalk-engine = \"0.55.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "916186f4204e2c200f8a3ab30f4c53ebe11df1fd", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -10,6 +10,9 @@ use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n \n+use rustc_ast::ast;\n+use rustc_attr as attr;\n+\n use rustc_hir::def_id::DefId;\n \n use rustc_span::symbol::sym;\n@@ -18,7 +21,6 @@ use std::fmt;\n use std::sync::Arc;\n \n use crate::chalk::lowering::{self, LowerInto};\n-use rustc_ast::ast;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n@@ -205,12 +207,32 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn adt_repr(\n         &self,\n         adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n-    ) -> chalk_solve::rust_ir::AdtRepr {\n+    ) -> Arc<chalk_solve::rust_ir::AdtRepr<RustInterner<'tcx>>> {\n         let adt_def = adt_id.0;\n-        chalk_solve::rust_ir::AdtRepr {\n-            repr_c: adt_def.repr.c(),\n-            repr_packed: adt_def.repr.packed(),\n-        }\n+        let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i)).intern(&self.interner);\n+        let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i)).intern(&self.interner);\n+        Arc::new(chalk_solve::rust_ir::AdtRepr {\n+            c: adt_def.repr.c(),\n+            packed: adt_def.repr.packed(),\n+            int: adt_def.repr.int.map(|i| match i {\n+                attr::IntType::SignedInt(ty) => match ty {\n+                    ast::IntTy::Isize => int(chalk_ir::IntTy::Isize),\n+                    ast::IntTy::I8 => int(chalk_ir::IntTy::I8),\n+                    ast::IntTy::I16 => int(chalk_ir::IntTy::I16),\n+                    ast::IntTy::I32 => int(chalk_ir::IntTy::I32),\n+                    ast::IntTy::I64 => int(chalk_ir::IntTy::I64),\n+                    ast::IntTy::I128 => int(chalk_ir::IntTy::I128),\n+                },\n+                attr::IntType::UnsignedInt(ty) => match ty {\n+                    ast::UintTy::Usize => uint(chalk_ir::UintTy::Usize),\n+                    ast::UintTy::U8 => uint(chalk_ir::UintTy::U8),\n+                    ast::UintTy::U16 => uint(chalk_ir::UintTy::U16),\n+                    ast::UintTy::U32 => uint(chalk_ir::UintTy::U32),\n+                    ast::UintTy::U64 => uint(chalk_ir::UintTy::U64),\n+                    ast::UintTy::U128 => uint(chalk_ir::UintTy::U128),\n+                },\n+            }),\n+        })\n     }\n \n     fn fn_def_datum(\n@@ -316,7 +338,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(&self.interner);\n \n-            parameters[0].assert_ty_ref(&self.interner).could_match(&self.interner, &lowered_ty)\n+            parameters[0].assert_ty_ref(&self.interner).could_match(\n+                &self.interner,\n+                self.unification_database(),\n+                &lowered_ty,\n+            )\n         });\n \n         let impls = matched_impls.map(chalk_ir::ImplId).collect();\n@@ -541,6 +567,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Unsize => lang_items.unsize_trait(),\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n+            DiscriminantKind => lang_items.discriminant_kind_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }\n@@ -586,7 +613,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let sig = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 2];\n         match sig.assert_ty_ref(&self.interner).kind(&self.interner) {\n             chalk_ir::TyKind::Function(f) => {\n-                let substitution = f.substitution.as_slice(&self.interner);\n+                let substitution = f.substitution.0.as_slice(&self.interner);\n                 let return_type =\n                     substitution.last().unwrap().assert_ty_ref(&self.interner).clone();\n                 // Closure arguments are tupled\n@@ -644,6 +671,51 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<RustInterner<'tcx>>> {\n         unimplemented!()\n     }\n+\n+    fn unification_database(&self) -> &dyn chalk_ir::UnificationDatabase<RustInterner<'tcx>> {\n+        self\n+    }\n+\n+    fn discriminant_type(\n+        &self,\n+        _: chalk_ir::Ty<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Ty<RustInterner<'tcx>> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<'tcx> {\n+    fn fn_def_variance(\n+        &self,\n+        def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n+        let variances = self.interner.tcx.variances_of(def_id.0);\n+        chalk_ir::Variances::from_iter(\n+            &self.interner,\n+            variances.iter().map(|v| match v {\n+                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+                ty::Variance::Bivariant => unimplemented!(),\n+            }),\n+        )\n+    }\n+\n+    fn adt_variance(\n+        &self,\n+        def_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n+        let variances = self.interner.tcx.variances_of(def_id.0.did);\n+        chalk_ir::Variances::from_iter(\n+            &self.interner,\n+            variances.iter().map(|v| match v {\n+                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+                ty::Variance::Bivariant => unimplemented!(),\n+            }),\n+        )\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "7d3589c4b6bd870420e484f6329fb3eb31eac97b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -287,12 +287,12 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: binders.len(interner),\n                     sig: sig.lower_into(interner),\n-                    substitution: chalk_ir::Substitution::from_iter(\n+                    substitution: chalk_ir::FnSubst(chalk_ir::Substitution::from_iter(\n                         interner,\n                         inputs_and_outputs.iter().map(|ty| {\n                             chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner)\n                         }),\n-                    ),\n+                    )),\n                 })\n             }\n             ty::Dynamic(predicates, region) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n@@ -478,6 +478,10 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n             }\n             chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n             chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n+            chalk_ir::LifetimeData::Empty(ui) => {\n+                ty::RegionKind::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n+            }\n+            chalk_ir::LifetimeData::Erased => ty::RegionKind::ReErased,\n         };\n         interner.tcx.mk_region(kind)\n     }"}, {"sha": "d98f18182c843194f82d12d665a8641af0fb7cf0", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=c1623a2ee7bbefc9a3b9af4a133716d6bfd80f29", "patch": "@@ -105,14 +105,40 @@ crate fn evaluate_goal<'tcx>(\n     // really need this and so it's really minimal.\n     // Right now, we also treat a `Unique` solution the same as\n     // `Ambig(Definite)`. This really isn't right.\n-    let make_solution = |subst: chalk_ir::Substitution<_>| {\n+    let make_solution = |subst: chalk_ir::Substitution<_>,\n+                         binders: chalk_ir::CanonicalVarKinds<_>| {\n+        use rustc_middle::infer::canonical::CanonicalVarInfo;\n+\n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n         subst.as_slice(&interner).iter().for_each(|p| {\n             var_values.push(p.lower_into(&interner));\n         });\n+        let variables: Vec<_> = binders\n+            .iter(&interner)\n+            .map(|var| {\n+                let kind = match var.kind {\n+                    chalk_ir::VariableKind::Ty(ty_kind) => CanonicalVarKind::Ty(match ty_kind {\n+                        chalk_ir::TyVariableKind::General => CanonicalTyVarKind::General(\n+                            ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                        ),\n+                        chalk_ir::TyVariableKind::Integer => CanonicalTyVarKind::Int,\n+                        chalk_ir::TyVariableKind::Float => CanonicalTyVarKind::Float,\n+                    }),\n+                    chalk_ir::VariableKind::Lifetime => CanonicalVarKind::Region(\n+                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                    ),\n+                    chalk_ir::VariableKind::Const(_) => CanonicalVarKind::Const(\n+                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                    ),\n+                };\n+                CanonicalVarInfo { kind }\n+            })\n+            .collect();\n+        let max_universe =\n+            binders.iter(&interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n         let sol = Canonical {\n-            max_universe: ty::UniverseIndex::from_usize(0),\n-            variables: obligation.variables.clone(),\n+            max_universe: ty::UniverseIndex::from_usize(max_universe),\n+            variables: tcx.intern_canonical_var_infos(&variables),\n             value: QueryResponse {\n                 var_values: CanonicalVarValues { var_values },\n                 region_constraints: QueryRegionConstraints::default(),\n@@ -126,11 +152,13 @@ crate fn evaluate_goal<'tcx>(\n         .map(|s| match s {\n             Solution::Unique(subst) => {\n                 // FIXME(chalk): handle constraints\n-                make_solution(subst.value.subst)\n+                make_solution(subst.value.subst, subst.binders)\n             }\n             Solution::Ambig(guidance) => {\n                 match guidance {\n-                    chalk_solve::Guidance::Definite(subst) => make_solution(subst.value),\n+                    chalk_solve::Guidance::Definite(subst) => {\n+                        make_solution(subst.value, subst.binders)\n+                    }\n                     chalk_solve::Guidance::Suggested(_) => unimplemented!(),\n                     chalk_solve::Guidance::Unknown => {\n                         // chalk_fulfill doesn't use the var_values here, so"}]}