{"sha": "fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWNmZTRjYTU2ZDViYTQ3NjYyZTc5ODBmOGU3MzM1MjUwYmM2YzE=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-13T14:21:42Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2019-06-13T14:21:42Z"}, "message": "rustbuild: don't set cxx if not configured\n\nSigned-off-by: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>", "tree": {"sha": "eaa11ad4453516572dde379856b77d6ccb2b9ac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaa11ad4453516572dde379856b77d6ccb2b9ac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "html_url": "https://github.com/rust-lang/rust/commit/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6", "html_url": "https://github.com/rust-lang/rust/commit/00b6015c078fc3ab76d4ca9ab869c6f0e5b8a1f6"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "2281a45e014a9cb0d89ddb4004bc8ae01c274076", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -1135,10 +1135,12 @@ impl<'a> Builder<'a> {\n                     .env(format!(\"RANLIB_{}\", target), ranlib);\n             }\n \n-            let cxx = ccacheify(&self.cxx(target));\n-            cargo\n-                .env(format!(\"CXX_{}\", target), &cxx)\n-                .env(format!(\"CXXFLAGS_{}\", target), cflags);\n+            if let Ok(cxx) = self.cxx(target) {\n+                let cxx = ccacheify(&cxx);\n+                cargo\n+                    .env(format!(\"CXX_{}\", target), &cxx)\n+                    .env(format!(\"CXXFLAGS_{}\", target), cflags);\n+            }\n         }\n \n         if (cmd == \"build\" || cmd == \"rustc\")"}, {"sha": "e0fef972f74ccc08d4247a41df9ee44d2afb7426", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -102,18 +102,25 @@ pub fn find(build: &mut Build) {\n         let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(2).warnings(false).debug(false).cpp(true)\n             .target(&target).host(&build.build);\n-        if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n+\n+        let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n+            true\n         } else {\n-            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build);\n+            set_compiler(&mut cfg, Language::CPlusPlus, target, config, build)\n+        };\n+\n+        if cxx_configured {\n+            let compiler = cfg.get_compiler();\n+            build.cxx.insert(target, compiler);\n         }\n-        let compiler = cfg.get_compiler();\n-        build.cxx.insert(target, compiler);\n \n         build.verbose(&format!(\"CC_{} = {:?}\", &target, build.cc(target)));\n         build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target, cflags));\n-        build.verbose(&format!(\"CXX_{} = {:?}\", &target, build.cxx(target)));\n-        build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target, cflags));\n+        if let Ok(cxx) = build.cxx(target) {\n+            build.verbose(&format!(\"CXX_{} = {:?}\", &target, cxx));\n+            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target, cflags));\n+        }\n         if let Some(ar) = ar {\n             build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n             build.ar.insert(target, ar);\n@@ -125,7 +132,7 @@ fn set_compiler(cfg: &mut cc::Build,\n                 compiler: Language,\n                 target: Interned<String>,\n                 config: Option<&Target>,\n-                build: &Build) {\n+                build: &Build) -> bool {\n     match &*target {\n         // When compiling for android we may have the NDK configured in the\n         // config.toml in which case we look there. Otherwise the default\n@@ -138,6 +145,7 @@ fn set_compiler(cfg: &mut cc::Build,\n                                    .replace(\"thumbv7\", \"arm\");\n                 let compiler = format!(\"{}-{}\", target, compiler.clang());\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n+                return true;\n             }\n         }\n \n@@ -147,32 +155,35 @@ fn set_compiler(cfg: &mut cc::Build,\n             let c = cfg.get_compiler();\n             let gnu_compiler = compiler.gcc();\n             if !c.path().ends_with(gnu_compiler) {\n-                return\n+                return false;\n             }\n \n             let output = output(c.to_command().arg(\"--version\"));\n             let i = match output.find(\" 4.\") {\n                 Some(i) => i,\n-                None => return,\n+                None => return false,\n             };\n             match output[i + 3..].chars().next().unwrap() {\n                 '0' ..= '6' => {}\n-                _ => return,\n+                _ => return false,\n             }\n             let alternative = format!(\"e{}\", gnu_compiler);\n             if Command::new(&alternative).output().is_ok() {\n                 cfg.compiler(alternative);\n+                return true;\n             }\n         }\n \n         \"mips-unknown-linux-musl\" => {\n             if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n                 cfg.compiler(\"mips-linux-musl-gcc\");\n+                return true;\n             }\n         }\n         \"mipsel-unknown-linux-musl\" => {\n             if cfg.get_compiler().path().to_str() == Some(\"gcc\") {\n                 cfg.compiler(\"mipsel-linux-musl-gcc\");\n+                return true;\n             }\n         }\n \n@@ -181,12 +192,14 @@ fn set_compiler(cfg: &mut cc::Build,\n                 let guess = root.join(\"bin/musl-gcc\");\n                 if guess.exists() {\n                     cfg.compiler(guess);\n+                    return true;\n                 }\n             }\n         }\n \n         _ => {}\n     }\n+    false\n }\n \n /// The target programming language for a native compiler."}, {"sha": "c7fa8e788b573b02350f0445800853a284a2c180", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -782,7 +782,7 @@ pub fn build_codegen_backend(builder: &Builder<'_>,\n                !target.contains(\"windows\") &&\n                !target.contains(\"apple\") {\n                 let file = compiler_file(builder,\n-                                         builder.cxx(target),\n+                                         builder.cxx(target).unwrap(),\n                                          target,\n                                          \"libstdc++.a\");\n                 cargo.env(\"LLVM_STATIC_STDCPP\", file);"}, {"sha": "b9d287abb0c7e6c3371eaad39bab3a591bf1a90e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -815,8 +815,13 @@ impl Build {\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n-    fn cxx(&self, target: Interned<String>) -> &Path {\n-        self.cxx[&target].path()\n+    fn cxx(&self, target: Interned<String>) -> Result<&Path, String> {\n+        match self.cxx.get(&target) {\n+            Some(p) => Ok(p.path()),\n+            None => Err(format!(\n+                    \"target `{}` is not configured as a host, only as a target\",\n+                    target))\n+        }\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden."}, {"sha": "bf3601cb312fdf0519f0c1f06b7604db92afce1b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -358,7 +358,7 @@ fn configure_cmake(builder: &Builder<'_>,\n \n     let (cc, cxx) = match builder.config.llvm_clang_cl {\n         Some(ref cl) => (cl.as_ref(), cl.as_ref()),\n-        None => (builder.cc(target), builder.cxx(target)),\n+        None => (builder.cc(target), builder.cxx(target).unwrap()),\n     };\n \n     // Handle msvc + ninja + ccache specially (this is what the bots use)"}, {"sha": "dc65fb9b79706b579f23935a445576676a63aa70", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -146,7 +146,7 @@ pub fn check(build: &mut Build) {\n \n     for host in &build.hosts {\n         if !build.config.dry_run {\n-            cmd_finder.must_have(build.cxx(*host));\n+            cmd_finder.must_have(build.cxx(*host).unwrap());\n         }\n     }\n "}, {"sha": "74caaae2840c5b2b88b2b960321ef12e241d3a94", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdecfe4ca56d5ba47662e7980f8e7335250bc6c1/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=fdecfe4ca56d5ba47662e7980f8e7335250bc6c1", "patch": "@@ -1211,7 +1211,7 @@ impl Step for Compiletest {\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n-                    .arg(builder.cxx(target))\n+                    .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n                     .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n                     .arg(\"--llvm-components\")"}]}