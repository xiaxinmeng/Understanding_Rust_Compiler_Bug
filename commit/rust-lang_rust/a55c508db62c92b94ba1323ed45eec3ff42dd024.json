{"sha": "a55c508db62c92b94ba1323ed45eec3ff42dd024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NWM1MDhkYjYyYzkyYjk0YmExMzIzZWQ0NWVlYzNmZjQyZGQwMjQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-06-27T22:51:04Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-07-02T00:27:37Z"}, "message": "Guide: variable bindings.\n\nWhew! Who knew there was so much to say about variables.\n\nWe probably want to move the guessing game to the rust-lang org, rather than\njust having it on my GitHub. Or, I could put the code inline. I think it'd be\nneat to have it as a project, so people can pull it down with Cargo. Until we\nmake that decision, I'll just leave this here.", "tree": {"sha": "8c83a8a64e69026c387dd13a78a5aceb47e24e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c83a8a64e69026c387dd13a78a5aceb47e24e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a55c508db62c92b94ba1323ed45eec3ff42dd024", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a55c508db62c92b94ba1323ed45eec3ff42dd024", "html_url": "https://github.com/rust-lang/rust/commit/a55c508db62c92b94ba1323ed45eec3ff42dd024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a55c508db62c92b94ba1323ed45eec3ff42dd024/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c90950ea60f09330f3c637201afddda475aa504d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c90950ea60f09330f3c637201afddda475aa504d", "html_url": "https://github.com/rust-lang/rust/commit/c90950ea60f09330f3c637201afddda475aa504d"}], "stats": {"total": 210, "additions": 210, "deletions": 0}, "files": [{"sha": "0fc9671c4db292c4bcc05baa38eea38c1a52c261", "filename": "src/doc/guide.md", "status": "modified", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/a55c508db62c92b94ba1323ed45eec3ff42dd024/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/a55c508db62c92b94ba1323ed45eec3ff42dd024/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=a55c508db62c92b94ba1323ed45eec3ff42dd024", "patch": "@@ -413,6 +413,202 @@ rest of your Rust career.\n Next, we'll learn more about Rust itself, by starting to write a more complicated\n program. We hope you want to do more with Rust than just print \"Hello, world!\"\n \n+## Guessing Game\n+\n+Let's write a bigger program in Rust. We could just go through a laundry list\n+of Rust features, but that's boring. Instead, we'll learn more about how to\n+code in Rust by writing a few example projects.\n+\n+For our first project, we'll implement a classic beginner programming problem:\n+the guessing game. Here's how it works: Our program will generate a random\n+integer between one and a hundred. It will then prompt us to enter a guess.\n+Upon entering our guess, it will tell us if we're too low or too high. Once we\n+guess correctly, it will congratulate us, and print the number of guesses we've\n+taken to the screen. Sound good? It sounds easy, but it'll end up showing off a\n+number of basic features of Rust.\n+\n+### Set up\n+\n+Let's set up a new project. Go to your projects directory, and make a new\n+directory for the project, as well as a `src` directory for our code:\n+\n+```{bash}\n+$ cd ~/projects\n+$ mkdir guessing_game\n+$ cd guessing_game\n+$ mkdir src\n+```\n+\n+Great. Next, let's make a `Cargo.toml` file so Cargo knows how to build our\n+project:\n+\n+```{ignore}\n+[package]\n+\n+name = \"guessing_game\"\n+version = \"0.1.0\"\n+authors = [ \"someone@example.com\" ]\n+\n+[[bin]]\n+\n+name = \"guessing_game\"\n+```\n+\n+Finally, we need our source file. Let's just make it hello world for now, so we\n+can check that our setup works. In `src/guessing_game.rs`:\n+\n+```{rust}\n+fn main() {\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+Let's make sure that worked:\n+\n+```{bash}\n+$ cargo build\n+   Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n+$\n+```\n+\n+Excellent! Open up your `src/guessing_game.rs` again. We'll be writing all of\n+our code in this file. The next section of the tutorial will show you how to\n+build multiple-file projects.\n+\n+## Variable bindings\n+\n+The first thing we'll learn about are 'variable bindings.' They look like this:\n+\n+```{rust}\n+let x = 5i;\n+```\n+\n+In many languages, this is called a 'variable.' But Rust's variable bindings\n+have a few tricks up their sleeves. Rust has a very powerful feature called\n+'pattern matching' that we'll get into detail with later, but the left\n+hand side of a `let` expression is a full pattern, not just a variable name.\n+This means we can do things like:\n+\n+```{rust}\n+let (x, y) = (1i, 2i);\n+```\n+\n+After this expression is evaluated, `x` will be one, and `y` will be two.\n+Patterns are really powerful, but this is about all we can do with them so far.\n+So let's just keep this in the back of our minds as we go forward.\n+\n+By the way, in these examples, `i` indicates that the number is an integer.\n+\n+Rust is a statically typed language, which means that we specify our types up\n+front. So why does our first example compile? Well, Rust has this thing called\n+\"[Hindley-Milner type\n+inference](http://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system)\",\n+named after some really smart type theorists. If you clicked that link, don't\n+be scared: what this means for you is that Rust will attempt to infer the types\n+in your program, and it's pretty good at it. If it can infer the type, Rust\n+doesn't require you to actually type it out.\n+\n+We can add the type if we want to. Types come after a colon (`:`):\n+\n+```{rust}\n+let x: int = 5;\n+```\n+\n+If I asked you to read this out loud to the rest of the class, you'd say \"`x`\n+is a binding with the type `int` and the value `five`.\" Rust requires you to\n+initialize the binding with a value before you're allowed to use it. If\n+we try...\n+\n+```{ignore}\n+let x;\n+```\n+\n+...we'll get an error:\n+\n+```{ignore}\n+src/guessing_game.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n+src/guessing_game.rs:2     let x;\n+                               ^\n+```\n+\n+Giving it a type will compile, though:\n+\n+```{ignore}\n+let x: int;\n+```\n+\n+Let's try it out. Change your `src/guessing_game.rs` file to look like this:\n+\n+```{rust}\n+fn main() {\n+    let x: int;\n+\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+You can use `cargo build` on the command line to build it. You'll get a warning,\n+but it will still print \"Hello, world!\":\n+\n+```{ignore,notrust}\n+   Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n+src/guessing_game.rs:2:9: 2:10 warning: unused variable: `x`, #[warn(unused_variable)] on by default\n+src/guessing_game.rs:2     let x: int;\n+                               ^\n+```\n+\n+Rust warns us that we never use the variable binding, but since we never use it,\n+no harm, no foul. Things change if we try to actually use this `x`, however. Let's\n+do that. Change your program to look like this:\n+\n+```{rust,ignore}\n+fn main() {\n+    let x: int;\n+\n+    println!(\"The value of x is: {}\", x);\n+}\n+```\n+\n+And try to build it. You'll get an error:\n+\n+```{bash}\n+$ cargo build\n+   Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n+src/guessing_game.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`\n+src/guessing_game.rs:4     println!(\"The value of x is: {}\", x);\n+                                                             ^\n+note: in expansion of format_args!\n+<std macros>:2:23: 2:77 note: expansion site\n+<std macros>:1:1: 3:2 note: in expansion of println!\n+src/guessing_game.rs:4:5: 4:42 note: expansion site\n+error: aborting due to previous error\n+Could not execute process `rustc src/guessing_game.rs --crate-type bin --out-dir /home/you/projects/guessing_game/target -L /home/you/projects/guessing_game/target -L /home/you/projects/guessing_game/target/deps` (status=101)\n+```\n+\n+Rust will not let us use a value that has not been initialized. So why let us\n+declare a binding without initializing it? You'd think our first example would\n+have errored. Well, Rust is smarter than that. Before we get to that, let's talk\n+about this stuff we've added to `println!`.\n+\n+If you include two curly braces (`{}`, some call them moustaches...) in your\n+string to print, Rust will interpret this as a request to interpolate some sort\n+of value. **String interpolation** is a computer science term that means \"stick\n+in the middle of a string.\" We add a comma, and then `x`, to indicate that we\n+want `x` to be the value we're interpolating. The comma is used to separate\n+arguments we pass to functions and macros, if you're passing more than one.\n+\n+When you just use the double curly braces, Rust will attempt to display the\n+value in a meaningful way by checking out its type. If you want to specify the\n+format in a more detailed manner, there are a [wide number of options\n+available](/std/fmt/index.html). Fow now, we'll just stick to the default:\n+integers aren't very complicated to print.\n+\n+So, we've cleared up all of the confusion around bindings, with one exception:\n+why does Rust let us declare a variable binding without an initial value if we\n+must initialize the binding before we use it? And how does it know that we have\n+or have not initialized the binding? For that, we need to learn our next\n+concept: `if`.\n+\n ## If\n \n ## Functions\n@@ -441,6 +637,20 @@ loop\n \n break/continue\n \n+## Guessing Game: complete\n+\n+At this point, you have successfully built the Guessing Game! Congratulations!\n+For reference, [We've placed the sample code on\n+GitHub](https://github.com/steveklabnik/guessing_game).\n+\n+You've now learned the basic syntax of Rust. All of this is relatively close to\n+various other programming languages you have used in the past. These\n+fundamental syntactical and semantic elements will form the foundation for the\n+rest of your Rust education.\n+\n+Now that you're an expert at the basics, it's time to learn about some of\n+Rust's more unique features.\n+\n ## iterators\n \n ## Lambdas"}]}