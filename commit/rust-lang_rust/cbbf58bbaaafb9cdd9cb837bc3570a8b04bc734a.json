{"sha": "cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYmY1OGJiYWFhZmI5Y2RkOWNiODM3YmMzNTcwYThiMDRiYzczNGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T10:47:24Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T10:47:24Z"}, "message": "the statement/terminator has already been computed, don't do it again", "tree": {"sha": "36cd3576531efb05bb2e31a03fd1d15267d18c8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cd3576531efb05bb2e31a03fd1d15267d18c8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXV/e8AAoJEFbW7qD8Z6xGxhcP/iZWYwqGx8y12DPLTAmk9Xgk\n0ROL165aifa7ed95XQqcNhYkmodUIrqVpSWUU/YmjZKeEsHs5a5mLCoBKwZtLtCf\nqKkUGQF4gGLum/BUUspBUIrmtOBzxps0kWBAkimxFJF4oyHwSvc5PUC3IDUb1fOX\nSa/z9Fuz885mX61PvBAJ4fNtlSX6Z8geTRig1souiJ8PCKYF3VeGz7djtsowrKf6\nVK6IhbVcMiiBLT90PI07mu2Wa1OL6TWHoDWCx3gGDgtl+dXT9Uk0bnCsjTFBxfg3\nOyavFLN59IKlGqUpMUC0QucH/wRaHCFceR0wYWj+LLXbPa7ZTVjwY1N8WifW7Nqy\n/m/dW6cARr2npeEJt590Z1D4iUkqXQIBrqBWqp/5qHsSXvno1+ufd5cnhi/4XSyB\nd3g2Az6hltvpD/2/OYZ4xoLSkEBsEFEwR2WjVrQf0n1XAHzSHniPF73girJmysg3\nycIE0HbI/4obKN3UEVM8Rmqj1UeLy+fnErvfBzltVC0ErKV73YCrXGd1kUjzmdtU\nly8QvnRGi1vombPqu6TcIy1OdxXJt5FxyI8iqu6aeL7E/FMC/OQzcfgZou2HLp+r\n90SOwFdUXiJIPFWLqnYgmO3qRVtuhXRrU53S+TeGux05jOlpEwQrZtVk4D504ALX\nfQOlpoynH5hbX5sgQ8pg\n=202F\n-----END PGP SIGNATURE-----", "payload": "tree 36cd3576531efb05bb2e31a03fd1d15267d18c8a\nparent 2178961262e464151bb33feeaaae04fb272d4856\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465382844 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465382844 +0200\n\nthe statement/terminator has already been computed, don't do it again"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "html_url": "https://github.com/rust-lang/rust/commit/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2178961262e464151bb33feeaaae04fb272d4856", "url": "https://api.github.com/repos/rust-lang/rust/commits/2178961262e464151bb33feeaaae04fb272d4856", "html_url": "https://github.com/rust-lang/rust/commit/2178961262e464151bb33feeaaae04fb272d4856"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "60eae047f1bf114ab7abb5b61d41273b194b82ce", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "patch": "@@ -41,10 +41,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         }\n     }\n \n-    fn statement<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F) -> EvalResult<()> {\n-        let mir = self.fncx.mir();\n-        let block_data = mir.basic_block_data(self.fncx.frame().next_block);\n-        let stmt = &block_data.statements[self.fncx.frame().stmt];\n+    fn statement<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F, stmt: &mir::Statement<'tcx>) -> EvalResult<()> {\n         f(Event::Assignment(stmt));\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n@@ -53,13 +50,10 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         Ok(())\n     }\n \n-    fn terminator<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F) -> EvalResult<()> {\n+    fn terminator<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F, terminator: &mir::Terminator<'tcx>) -> EvalResult<()> {\n         // after a terminator we go to a new block\n         self.fncx.frame_mut().stmt = 0;\n         let term = {\n-            let mir = self.fncx.mir();\n-            let block_data = mir.basic_block_data(self.fncx.frame().next_block);\n-            let terminator = block_data.terminator();\n             f(Event::Terminator(terminator));\n             let result = self.fncx.eval_terminator(terminator);\n             self.fncx.maybe_report(result)?\n@@ -98,7 +92,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 mir: &mir,\n             }.visit_statement(block, stmt);\n             if self.constants.is_empty() {\n-                return self.statement(f);\n+                return self.statement(f, stmt);\n             } else {\n                 return self.extract_constants(f);\n             }\n@@ -115,7 +109,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             mir: &mir,\n         }.visit_terminator(block, terminator);\n         if self.constants.is_empty() {\n-            self.terminator(f)\n+            self.terminator(f, terminator)\n         } else {\n             self.extract_constants(f)\n         }\n@@ -133,6 +127,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n struct ConstantExtractor<'a, 'b: 'mir, 'mir: 'a, 'tcx: 'b> {\n     span: Span,\n+    // FIXME: directly push the new stackframes instead of doing this intermediate caching\n     constants: &'a mut Vec<(ConstantId<'tcx>, Span, Pointer, CachedMir<'mir, 'tcx>)>,\n     gecx: &'a mut GlobalEvalContext<'b, 'tcx>,\n     mir: &'a mir::Mir<'tcx>,"}]}