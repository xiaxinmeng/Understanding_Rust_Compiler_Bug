{"sha": "418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOGQxYmZjOWEzYTcxY2UxYmVhY2VkOWVjNjU5MmFkNjE0NjQ2YjA=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-05T14:30:25Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2014-12-11T18:38:11Z"}, "message": "Fix ICE when a struct variant enum is imported from an external crate\n\nFixes the first case of #19340.", "tree": {"sha": "741ee2f57f4495fc4a94c986da8ad612f4ea7cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/741ee2f57f4495fc4a94c986da8ad612f4ea7cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "html_url": "https://github.com/rust-lang/rust/commit/418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf0b4e068227dd33fa15f3ffe24f29e0535d197f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0b4e068227dd33fa15f3ffe24f29e0535d197f", "html_url": "https://github.com/rust-lang/rust/commit/cf0b4e068227dd33fa15f3ffe24f29e0535d197f"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "37e05ac8a7323882de14997474da88841266d706", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "patch": "@@ -681,14 +681,22 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n         let ctor_ty = item_type(ast::DefId { krate: cdata.cnum, node: id},\n                                 item, tcx, cdata);\n         let name = item_name(&*intr, item);\n-        let (ctor_ty, arg_tys) = match ctor_ty.sty {\n+        let (ctor_ty, arg_tys, arg_names) = match ctor_ty.sty {\n             ty::ty_bare_fn(ref f) =>\n-                (Some(ctor_ty), f.sig.inputs.clone()),\n-            _ => // Nullary or struct enum variant.\n-                (None, get_struct_fields(intr.clone(), cdata, did.node)\n+                (Some(ctor_ty), f.sig.inputs.clone(), None),\n+            _ => { // Nullary or struct enum variant.\n+                let mut arg_names = Vec::new();\n+                let arg_tys = get_struct_fields(intr.clone(), cdata, did.node)\n                     .iter()\n-                    .map(|field_ty| get_type(cdata, field_ty.id.node, tcx).ty)\n-                    .collect())\n+                    .map(|field_ty| {\n+                        arg_names.push(ast::Ident::new(field_ty.name));\n+                        get_type(cdata, field_ty.id.node, tcx).ty\n+                    })\n+                    .collect();\n+                let arg_names = if arg_names.len() == 0 { None } else { Some(arg_names) };\n+\n+                (None, arg_tys, arg_names)\n+            }\n         };\n         match variant_disr_val(item) {\n             Some(val) => { disr_val = val; }\n@@ -698,7 +706,7 @@ pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::Nod\n         disr_val += 1;\n         Rc::new(ty::VariantInfo {\n             args: arg_tys,\n-            arg_names: None,\n+            arg_names: arg_names,\n             ctor_ty: ctor_ty,\n             name: name,\n             // I'm not even sure if we encode visibility"}, {"sha": "fc61b78d8a7eea983b004031246e47e04e68f5c5", "filename": "src/test/auxiliary/issue-19340-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-19340-1.rs?ref=418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub enum Homura {\n+    Madoka { name: String },\n+}"}, {"sha": "b7a6391ee04751cdb81221b501c8030ecccb8e7f", "filename": "src/test/run-pass/issue-19340-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/418d1bfc9a3a71ce1beaced9ec6592ad614646b0/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19340-1.rs?ref=418d1bfc9a3a71ce1beaced9ec6592ad614646b0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-19340-1.rs\n+\n+extern crate \"issue-19340-1\" as lib;\n+\n+use lib::Homura;\n+\n+fn main() {\n+    let homura = Homura::Madoka { name: \"Kaname\".into_string() };\n+\n+    match homura {\n+        Homura::Madoka { name } => (),\n+    };\n+}"}]}