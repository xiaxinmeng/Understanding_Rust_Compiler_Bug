{"sha": "9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjM2OWRjOWY1NWEyMmNmYzBiYzhiNjJhODU4OGFmZTJjOGIyY2E=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T11:09:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-02T14:15:27Z"}, "message": "Box arrays of parameter bounds", "tree": {"sha": "770413f0ec4d4279742ffaac21d3db40c9f7c9b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770413f0ec4d4279742ffaac21d3db40c9f7c9b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "html_url": "https://github.com/rust-lang/rust/commit/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270b4273e79aac33f424673caf455f839da2bb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/270b4273e79aac33f424673caf455f839da2bb40", "html_url": "https://github.com/rust-lang/rust/commit/270b4273e79aac33f424673caf455f839da2bb40"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "49536b6e1c9eff3b1f358680f71830a326321bf0", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -117,14 +117,14 @@ fn item_type(item: ebml::doc, this_cnum: ast::crate_num, tcx: ty::ctxt,\n \n fn item_ty_param_bounds(item: ebml::doc, this_cnum: ast::crate_num,\n                         tcx: ty::ctxt, extres: external_resolver)\n-    -> [@[ty::param_bound]] {\n+    -> @[ty::param_bounds] {\n     let bounds = [];\n     let def_parser = bind parse_external_def_id(this_cnum, extres, _);\n     ebml::tagged_docs(item, tag_items_data_item_ty_param_bounds) {|p|\n         bounds += [tydecode::parse_bounds_data(@ebml::doc_data(p), this_cnum,\n                                                def_parser, tcx)];\n     }\n-    bounds\n+    @bounds\n }\n \n fn item_ty_param_count(item: ebml::doc) -> uint {\n@@ -209,8 +209,8 @@ fn get_type(data: @[u8], def: ast::def_id, tcx: ty::ctxt,\n     let t = item_type(item, this_cnum, tcx, extres);\n     let tp_bounds = if family_has_type_params(item_family(item)) {\n         item_ty_param_bounds(item, this_cnum, tcx, extres)\n-    } else { [] };\n-    ret @{bounds: tp_bounds, ty: t};\n+    } else { @[] };\n+    ret {bounds: tp_bounds, ty: t};\n }\n \n fn get_type_param_count(data: @[u8], id: ast::node_id) -> uint {"}, {"sha": "1a083bf8fb63b45e6109b36145a69dd48b77dd39", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -267,7 +267,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n             while peek(st) as char != '[' {\n                 name += str::unsafe_from_byte(next(st));\n             }\n-            methods += [{ident: name, tps: [],\n+            methods += [{ident: name, tps: @[],\n                          fty: {proto: proto with parse_ty_fn(st, sd)}}];\n         }\n         st.pos += 1u;"}, {"sha": "f78e0ffef85b62625129245792b90bd28ddc3141", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -450,7 +450,7 @@ fn gen_tag_shapes(ccx: @crate_ctxt) -> ValueRef {\n         let did = ccx.shape_cx.tag_order[i];\n         let variants = ty::tag_variants(ccx.tcx, did);\n         let item_tyt = ty::lookup_item_type(ccx.tcx, did);\n-        let ty_param_count = vec::len(item_tyt.bounds);\n+        let ty_param_count = vec::len(*item_tyt.bounds);\n \n         for v: ty::variant_info in *variants {\n             offsets += [vec::len(data) as u16];"}, {"sha": "4c385d56ac3132bf72c781a970dca74c3fbb7c56", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -236,7 +236,7 @@ fn type_of_ty_param_bounds_and_ty(lcx: @local_ctxt, sp: span,\n     alt ty::struct(cx.tcx, t) {\n       ty::ty_fn(_) | ty::ty_native_fn(_, _) {\n         check returns_non_ty_var(cx, t);\n-        ret type_of_fn_from_ty(cx, sp, t, tpt.bounds);\n+        ret type_of_fn_from_ty(cx, sp, t, *tpt.bounds);\n       }\n       _ {\n         // fall through\n@@ -2565,7 +2565,7 @@ type generic_info =\n     {item_type: ty::t,\n      static_tis: [option::t<@tydesc_info>],\n      tydescs: [ValueRef],\n-     param_bounds: [ty::param_bounds]};\n+     param_bounds: @[ty::param_bounds]};\n \n tag lval_kind {\n     temporary; //< Temporary value passed by value if of immediate type\n@@ -2739,7 +2739,7 @@ fn trans_var(cx: @block_ctxt, sp: span, def: ast::def, id: ast::node_id)\n             ret lval_no_env(cx, ccx.consts.get(did.node), owned);\n         } else {\n             let tp = ty::node_id_to_monotype(ccx.tcx, id);\n-            let val = trans_external_path(cx, did, @{bounds: [], ty: tp});\n+            let val = trans_external_path(cx, did, {bounds: @[], ty: tp});\n             ret lval_no_env(cx, load_if_immediate(cx, val, tp), owned_imm);\n         }\n       }"}, {"sha": "b10f72c3c938b65fa85804838ef8651cff599b87", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -437,7 +437,7 @@ fn trans_bind_1(cx: @block_ctxt, outgoing_fty: ty::t,\n \n     // Figure out which tydescs we need to pass, if any.\n     let (outgoing_fty_real, lltydescs, param_bounds) = alt f_res.generic {\n-      none. { (outgoing_fty, [], []) }\n+      none. { (outgoing_fty, [], @[]) }\n       some(ginfo) {\n         lazily_emit_all_generic_info_tydesc_glues(cx, ginfo);\n         (ginfo.item_type, ginfo.tydescs, ginfo.param_bounds)\n@@ -484,7 +484,7 @@ fn trans_bind_1(cx: @block_ctxt, outgoing_fty: ty::t,\n     // Make thunk\n     let llthunk =\n         trans_bind_thunk(cx.fcx.lcx, cx.sp, pair_ty, outgoing_fty_real, args,\n-                         box_ty, param_bounds, target_res);\n+                         box_ty, *param_bounds, target_res);\n \n     // Fill the function pair\n     fill_fn_pair(bcx, get_dest_addr(dest), llthunk.val, llbox);"}, {"sha": "5acc76e9377a34e3bf6730df06a08111789f809b", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -326,7 +326,7 @@ fn get_res_dtor(ccx: @crate_ctxt, sp: span, did: ast::def_id, inner_t: ty::t)\n     check non_ty_var(ccx, nil_res);\n     let f_t = type_of_fn(ccx, sp, false,\n                          [{mode: ast::by_ref, ty: inner_t}],\n-                         nil_res, param_bounds);\n+                         nil_res, *param_bounds);\n     ret trans::get_extern_const(ccx.externs, ccx.llmod,\n                                 csearch::get_symbol(ccx.sess.get_cstore(),\n                                                     did), f_t);"}, {"sha": "ac612dda5fb9599f7832bb8e2af55aeb37b34cd0", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -196,7 +196,7 @@ type field = {ident: ast::ident, mt: mt};\n \n type param_bounds = @[param_bound];\n \n-type method = {ident: ast::ident, tps: [param_bounds], fty: fn_ty};\n+type method = {ident: ast::ident, tps: @[param_bounds], fty: fn_ty};\n \n type constr_table = hashmap<ast::node_id, [constr]>;\n \n@@ -324,7 +324,7 @@ fn param_bounds_to_kind(bounds: param_bounds) -> kind {\n     kind\n }\n \n-type ty_param_bounds_and_ty = @{bounds: [param_bounds], ty: t};\n+type ty_param_bounds_and_ty = {bounds: @[param_bounds], ty: t};\n \n type type_cache = hashmap<ast::def_id, ty_param_bounds_and_ty>;\n "}, {"sha": "a679659b3c76eb2a9bc6249657f405f3354a24f9", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9f2369dc9f55a22cfc0bc8b62a8588afe2c8b2ca", "patch": "@@ -80,22 +80,22 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_arg(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret @{bounds: [], ty: typ};\n+        ret {bounds: @[], ty: typ};\n       }\n       ast::def_local(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret @{bounds: [], ty: typ};\n+        ret {bounds: @[], ty: typ};\n       }\n       ast::def_obj_field(id, _) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret @{bounds: [], ty: typ};\n+        ret {bounds: @[], ty: typ};\n       }\n       ast::def_self(id) {\n         alt get_self_info(fcx.ccx) {\n           some(self_obj(_, obj_t)) | some(self_impl(obj_t)) {\n-            ret @{bounds: [], ty: obj_t};\n+            ret {bounds: @[], ty: obj_t};\n           }\n         }\n       }\n@@ -106,12 +106,12 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n       ast::def_binding(id) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n-        ret @{bounds: [], ty: typ};\n+        ret {bounds: @[], ty: typ};\n       }\n       ast::def_mod(_) {\n         // Hopefully part of a path.\n         // TODO: return a type that's more poisonous, perhaps?\n-        ret @{bounds: [], ty: ty::mk_nil(fcx.ccx.tcx)};\n+        ret {bounds: @[], ty: ty::mk_nil(fcx.ccx.tcx)};\n       }\n       ast::def_ty(_) {\n         fcx.ccx.tcx.sess.span_fatal(sp, \"expected value but found type\");\n@@ -132,7 +132,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n                     tpt: ty_param_bounds_and_ty, sp: span)\n     -> ty_param_substs_opt_and_ty {\n-    let ty_param_count = vec::len(tpt.bounds);\n+    let ty_param_count = vec::len(*tpt.bounds);\n     let bind_result =\n         bind_params_in_type(sp, fcx.ccx.tcx, bind next_ty_var_id(fcx), tpt.ty,\n                             ty_param_count);\n@@ -286,13 +286,13 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         // \"foo = int\" like OCaml?\n \n         let ty_param_bounds_and_ty = getter(tcx, mode, id);\n-        if vec::len(ty_param_bounds_and_ty.bounds) == 0u {\n+        if vec::len(*ty_param_bounds_and_ty.bounds) == 0u {\n             ret ty_param_bounds_and_ty.ty;\n         }\n \n         // The typedef is type-parametric. Do the type substitution.\n         let param_bindings: [ty::t] = [];\n-        if vec::len(args) != vec::len(ty_param_bounds_and_ty.bounds) {\n+        if vec::len(args) != vec::len(*ty_param_bounds_and_ty.bounds) {\n             tcx.sess.span_fatal(sp, \"Wrong number of type arguments for a \\\n                                      polymorphic type\");\n         }\n@@ -386,7 +386,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n     alt it.node {\n       ast::item_const(t, _) {\n         let typ = ast_ty_to_ty(tcx, mode, t);\n-        let tpt = @{bounds: [], ty: typ};\n+        let tpt = {bounds: @[], ty: typ};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -405,7 +405,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         }\n         // Tell ast_ty_to_ty() that we want to perform a recursive\n         // call to resolve any named types.\n-        let tpt = @{bounds: ty_param_bounds(tcx, mode, tps),\n+        let tpt = {bounds: ty_param_bounds(tcx, mode, tps),\n                    ty: ty::mk_named(tcx, ast_ty_to_ty(tcx, mode, t),\n                                     @it.ident)};\n         tcx.tcache.insert(local_def(it.id), tpt);\n@@ -417,7 +417,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let t = ty::mk_named(tcx, ty::mk_res(tcx, local_def(it.id), t_arg.ty,\n                                              params),\n                              @it.ident);\n-        let t_res = @{bounds: bounds, ty: t};\n+        let t_res = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), t_res);\n         ret t_res;\n       }\n@@ -426,7 +426,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let {bounds, params} = mk_ty_params(tcx, tps);\n         let t = ty::mk_named(tcx, ty::mk_tag(tcx, local_def(it.id), params),\n                              @it.ident);\n-        let tpt = @{bounds: bounds, ty: t};\n+        let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -435,7 +435,7 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         let t = ty::mk_named(tcx, ty::mk_iface(tcx, local_def(it.id),\n                                                params),\n                              @it.ident);\n-        let tpt = @{bounds: bounds, ty: t};\n+        let tpt = {bounds: bounds, ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ty::store_iface_methods(tcx, it.id, @vec::map(ms, {|m|\n             ty_of_ty_method(tcx, m_collect, m)\n@@ -459,7 +459,7 @@ fn ty_of_native_item(tcx: ty::ctxt, mode: mode, it: @ast::native_item)\n           none. { }\n         }\n         let t = ty::mk_native(tcx, ast_util::local_def(it.id));\n-        let tpt = @{bounds: [], ty: t};\n+        let tpt = {bounds: @[], ty: t};\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n@@ -487,7 +487,7 @@ fn ty_of_fn(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl,\n     -> ty::ty_param_bounds_and_ty {\n     let bounds = ty_param_bounds(tcx, mode, ty_params);\n     let tofd = ty_of_fn_decl(tcx, mode, ast::proto_bare, decl);\n-    let tpt = @{bounds: bounds, ty: ty::mk_fn(tcx, tofd)};\n+    let tpt = {bounds: bounds, ty: ty::mk_fn(tcx, tofd)};\n     tcx.tcache.insert(def_id, tpt);\n     ret tpt;\n }\n@@ -499,12 +499,12 @@ fn ty_of_native_fn_decl(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl,\n     let output_ty = ast_ty_to_ty(tcx, mode, decl.output);\n \n     let t_fn = ty::mk_native_fn(tcx, input_tys, output_ty);\n-    let tpt = @{bounds: bounds, ty: t_fn};\n+    let tpt = {bounds: bounds, ty: t_fn};\n     tcx.tcache.insert(def_id, tpt);\n     ret tpt;\n }\n fn ty_param_bounds(tcx: ty::ctxt, mode: mode, params: [ast::ty_param])\n-    -> [ty::param_bounds] {\n+    -> @[ty::param_bounds] {\n     let result = [];\n     for param in params {\n         result += [alt tcx.ty_param_bounds.find(local_def(param.id)) {\n@@ -526,7 +526,7 @@ fn ty_param_bounds(tcx: ty::ctxt, mode: mode, params: [ast::ty_param])\n           }\n         }];\n     }\n-    result\n+    @result\n }\n fn ty_of_method(tcx: ty::ctxt, mode: mode, m: @ast::method) -> ty::method {\n     {ident: m.ident, tps: ty_param_bounds(tcx, mode, m.tps),\n@@ -543,7 +543,7 @@ fn ty_of_obj(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n     let methods = vec::map(ob.methods, {|m| ty_of_method(tcx, mode, m)});\n     let t_obj = ty::mk_named(tcx, ty::mk_obj(tcx, ty::sort_methods(methods)),\n                              @id);\n-    ret @{bounds: bounds, ty: t_obj};\n+    ret {bounds: bounds, ty: t_obj};\n }\n fn ty_of_obj_ctor(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n             ctor_id: ast::node_id, ty_params: [ast::ty_param])\n@@ -557,7 +557,7 @@ fn ty_of_obj_ctor(tcx: ty::ctxt, mode: mode, id: ast::ident, ob: ast::_obj,\n     let t_fn = ty::mk_fn(tcx, {proto: ast::proto_shared(ast::sugar_normal),\n                                inputs: t_inputs, output: t_obj.ty,\n                                ret_style: ast::return_val, constraints: []});\n-    let tpt = @{bounds: ty_param_bounds(tcx, mode, ty_params), ty: t_fn};\n+    let tpt = {bounds: ty_param_bounds(tcx, mode, ty_params), ty: t_fn};\n     tcx.tcache.insert(local_def(ctor_id), tpt);\n     ret tpt;\n }\n@@ -626,7 +626,7 @@ mod write {\n }\n \n fn mk_ty_params(tcx: ty::ctxt, atps: [ast::ty_param])\n-    -> {bounds: [ty::param_bounds], params: [ty::t]} {\n+    -> {bounds: @[ty::param_bounds], params: [ty::t]} {\n     let i = 0u, bounds = ty_param_bounds(tcx, m_collect, atps);\n     {bounds: bounds,\n      params: vec::map(atps, {|atp|\n@@ -678,7 +678,7 @@ mod collect {\n                            inputs: args, output: tag_ty,\n                            ret_style: ast::return_val, constraints: []})\n             };\n-            let tpt = @{bounds: ty_param_bounds(cx.tcx, m_collect, ty_params),\n+            let tpt = {bounds: ty_param_bounds(cx.tcx, m_collect, ty_params),\n                        ty: result_ty};\n             cx.tcx.tcache.insert(local_def(variant.node.id), tpt);\n             write::ty_only(cx.tcx, variant.node.id, result_ty);\n@@ -700,7 +700,7 @@ mod collect {\n                 let ty = ty::mk_fn(cx.tcx,\n                                    ty_of_fn_decl(cx.tcx, m_collect,\n                                                  ast::proto_bare, m.decl));\n-                cx.tcx.tcache.insert(local_def(m.id), @{bounds: bounds,\n+                cx.tcx.tcache.insert(local_def(m.id), {bounds: bounds,\n                                                        ty: ty});\n                 write::ty_only(cx.tcx, m.id, ty);\n             }\n@@ -758,8 +758,7 @@ mod collect {\n             write::ty_only(cx.tcx, it.id, t_res);\n             write::ty_only(cx.tcx, ctor_id, t_ctor);\n             cx.tcx.tcache.insert(local_def(ctor_id),\n-                                 @{bounds: bounds,\n-                                  ty: t_ctor});\n+                                 {bounds: bounds, ty: t_ctor});\n             write::ty_only(cx.tcx, dtor_id, t_dtor);\n           }\n           _ {\n@@ -1481,7 +1480,7 @@ fn impl_self_ty(tcx: ty::ctxt, did: ast::def_id) -> {n_tps: uint, ty: ty::t} {\n         }\n     } else {\n         let tpt = csearch::get_type(tcx, did);\n-        {n_tps: vec::len(tpt.bounds), ty: tpt.ty}\n+        {n_tps: vec::len(*tpt.bounds), ty: tpt.ty}\n     }\n }\n \n@@ -1505,7 +1504,7 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n                               {|m| m.ident == name}) {\n                   some(m) {\n                     ret some({method_ty: ty::mk_fn(tcx, m.fty),\n-                              n_tps: vec::len(m.tps),\n+                              n_tps: vec::len(*m.tps),\n                               ids: [], // FIXME[impl]\n                               origin: method_param(n)});\n                   }"}]}