{"sha": "28fbf81c407d803102e30ada87a2108c4c31fa2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZmJmODFjNDA3ZDgwMzEwMmUzMGFkYTg3YTIxMDhjNGMzMWZhMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T08:34:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T08:34:12Z"}, "message": "Auto merge of #1823 - hyd-dev:extern-crate-std, r=RalfJung\n\nDetect `std` by checking if the crate defines `#[lang = \"start\"]` rather than string comparison\n\nI also considered to compare the crate name with `sym::std`, but it's easy to name any crate `std` by using `--crate-name std`, so I don't think that is robust enough.\n\nNote that this only checks the crate, it does not check whether the call is in `sys::unix` or `sys::windows`, unlike the previous implementation, but I think it's already robust enough.\n\nFixes #1821.", "tree": {"sha": "c9b242bb48a497f7f96aaa09696a246ad777d22a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b242bb48a497f7f96aaa09696a246ad777d22a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fbf81c407d803102e30ada87a2108c4c31fa2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fbf81c407d803102e30ada87a2108c4c31fa2e", "html_url": "https://github.com/rust-lang/rust/commit/28fbf81c407d803102e30ada87a2108c4c31fa2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fbf81c407d803102e30ada87a2108c4c31fa2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28717a0e907ef427946a39adca1cbe3fa4b1e0f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/28717a0e907ef427946a39adca1cbe3fa4b1e0f4", "html_url": "https://github.com/rust-lang/rust/commit/28717a0e907ef427946a39adca1cbe3fa4b1e0f4"}, {"sha": "0ece55d748a04aba9c4950937de226c259630719", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ece55d748a04aba9c4950937de226c259630719", "html_url": "https://github.com/rust-lang/rust/commit/0ece55d748a04aba9c4950937de226c259630719"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "52176342057e48735c83a796bd7adce2d511a7fb", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -628,6 +628,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+\n+    fn frame_in_std(&self) -> bool {\n+        let this = self.eval_context_ref();\n+        this.tcx.lang_items().start_fn().map_or(false, |start_fn| {\n+            this.tcx.def_path(this.frame().instance.def_id()).krate\n+                == this.tcx.def_path(start_fn).krate\n+        })\n+    }\n }\n \n /// Check that the number of args is what we expect."}, {"sha": "2ecea4d9f41e527bd373dda8e242dfac4ae061df", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -475,7 +475,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n             \"pthread_attr_getguardsize\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _attr, ref guard_size] = check_arg_count(args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n@@ -488,28 +488,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             | \"pthread_attr_init\"\n             | \"pthread_attr_destroy\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"pthread_attr_setstacksize\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n \n             | \"signal\"\n             | \"sigaltstack\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;\n             }\n             | \"sigaction\"\n             | \"mprotect\"\n-            if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[_, _, _] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "9017dc368b69cfc057f871a1c313c4368ad305ff", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -207,9 +207,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"pthread_getattr_np\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") =>\n-            {\n+            \"pthread_getattr_np\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 let &[ref _thread, ref _attr] = check_arg_count(args)?;\n                 this.write_null(dest)?;"}, {"sha": "313d38c80b6f5a50a3c0f96de4fe4a67ccb8474c", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -149,7 +149,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"mmap\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n+            \"mmap\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::C { unwind: false })?;\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[ref addr, _, _, _, _, _] = check_arg_count(args)?;"}, {"sha": "76657a535541adb0dcdb29b132db74738b21aa0c", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -348,35 +348,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library.\n-            \"GetProcessHeap\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"GetProcessHeap\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 let &[] = check_arg_count(args)?;\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n-            \"SetConsoleTextAttribute\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"SetConsoleTextAttribute\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _hConsoleOutput, ref _wAttribute] = check_arg_count(args)?;\n                 // Pretend these does not exist / nothing happened, by returning zero.\n                 this.write_null(dest)?;\n             }\n-            \"AddVectoredExceptionHandler\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"AddVectoredExceptionHandler\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _First, ref _Handler] = check_arg_count(args)?;\n                 // Any non zero value works for the stdlib. This is just used for stack overflows anyway.\n                 this.write_scalar(Scalar::from_machine_usize(1, this), dest)?;\n             }\n-            \"SetThreadStackGuarantee\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"SetThreadStackGuarantee\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[_StackSizeInBytes] = check_arg_count(args)?;\n@@ -387,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"EnterCriticalSection\"\n             | \"LeaveCriticalSection\"\n             | \"DeleteCriticalSection\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n+                if this.frame_in_std() =>\n             {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n@@ -401,9 +393,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // (Windows locks are reentrant, and we have only 1 thread,\n                 // so not doing any futher checks here is at least not incorrect.)\n             }\n-            \"TryEnterCriticalSection\"\n-                if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") =>\n-            {\n+            \"TryEnterCriticalSection\" if this.frame_in_std() => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n                 #[allow(non_snake_case)]\n                 let &[ref _lpCriticalSection] = check_arg_count(args)?;"}, {"sha": "3e76d1c3f38472e5018eb849c38f600c24477316", "filename": "tests/compile-fail/unsupported_signal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Fcompile-fail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Fcompile-fail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsupported_signal.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -0,0 +1,13 @@\n+//! `signal()` is special on Linux and macOS that it's only supported within libstd.\n+//! The implementation is not complete enough to permit user code to call it.\n+// ignore-windows: No libc on Windows\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n+        //~^ ERROR unsupported operation: can't call foreign function: signal\n+    }\n+}"}, {"sha": "8f71e613375e30536b1db948a4e669ad2e467991", "filename": "tests/run-pass/extern_crate_std_in_main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Frun-pass%2Fextern_crate_std_in_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Frun-pass%2Fextern_crate_std_in_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fextern_crate_std_in_main.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -0,0 +1,5 @@\n+#![no_std]\n+\n+fn main() {\n+    extern crate std;\n+}"}, {"sha": "7e82e53e6be8553a542be42c9e3e3576243ae415", "filename": "tests/run-pass/rename_std.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Frun-pass%2Frename_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fbf81c407d803102e30ada87a2108c4c31fa2e/tests%2Frun-pass%2Frename_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frename_std.rs?ref=28fbf81c407d803102e30ada87a2108c4c31fa2e", "patch": "@@ -0,0 +1,5 @@\n+#![no_std]\n+\n+extern crate std as foo;\n+\n+fn main() {}"}]}