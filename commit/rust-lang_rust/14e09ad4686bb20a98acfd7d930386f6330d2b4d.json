{"sha": "14e09ad4686bb20a98acfd7d930386f6330d2b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZTA5YWQ0Njg2YmIyMGE5OGFjZmQ3ZDkzMDM4NmY2MzMwZDJiNGQ=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T11:05:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::MetaItem_", "tree": {"sha": "f039e28bbba5283c4d7fbcf1aca8112e81f98a03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f039e28bbba5283c4d7fbcf1aca8112e81f98a03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14e09ad4686bb20a98acfd7d930386f6330d2b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14e09ad4686bb20a98acfd7d930386f6330d2b4d", "html_url": "https://github.com/rust-lang/rust/commit/14e09ad4686bb20a98acfd7d930386f6330d2b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14e09ad4686bb20a98acfd7d930386f6330d2b4d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e797e1961df00ec7725c47225dcf9b5a0e9fce64", "url": "https://api.github.com/repos/rust-lang/rust/commits/e797e1961df00ec7725c47225dcf9b5a0e9fce64", "html_url": "https://github.com/rust-lang/rust/commit/e797e1961df00ec7725c47225dcf9b5a0e9fce64"}], "stats": {"total": 167, "additions": 83, "deletions": 84}, "files": [{"sha": "5af184385d909f3c0949178b65672595ff583b47", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -374,7 +374,7 @@ pub fn gather_attr(attr: &ast::Attribute)\n \n     let meta = &attr.node.value;\n     let metas = match meta.node {\n-        ast::MetaList(_, ref metas) => metas,\n+        ast::MetaItemKind::List(_, ref metas) => metas,\n         _ => {\n             out.push(Err(meta.span));\n             return out;\n@@ -383,7 +383,7 @@ pub fn gather_attr(attr: &ast::Attribute)\n \n     for meta in metas {\n         out.push(match meta.node {\n-            ast::MetaWord(ref lint_name) => Ok((lint_name.clone(), level, meta.span)),\n+            ast::MetaItemKind::Word(ref lint_name) => Ok((lint_name.clone(), level, meta.span)),\n             _ => Err(meta.span),\n         });\n     }"}, {"sha": "fdee13cb71587f677de8332f0c5bca874a97089a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -560,18 +560,18 @@ impl RustcDefaultCalls {\n                 PrintRequest::Cfg => {\n                     for cfg in config::build_configuration(sess) {\n                         match cfg.node {\n-                            ast::MetaWord(ref word) => println!(\"{}\", word),\n-                            ast::MetaNameValue(ref name, ref value) => {\n+                            ast::MetaItemKind::Word(ref word) => println!(\"{}\", word),\n+                            ast::MetaItemKind::NameValue(ref name, ref value) => {\n                                 println!(\"{}=\\\"{}\\\"\", name, match value.node {\n                                     ast::LitKind::Str(ref s, _) => s,\n                                     _ => continue,\n                                 });\n                             }\n                             // Right now there are not and should not be any\n-                            // MetaList items in the configuration returned by\n+                            // MetaItemKind::List items in the configuration returned by\n                             // `build_configuration`.\n-                            ast::MetaList(..) => {\n-                                panic!(\"MetaList encountered in default cfg\")\n+                            ast::MetaItemKind::List(..) => {\n+                                panic!(\"MetaItemKind::List encountered in default cfg\")\n                             }\n                         }\n                     }"}, {"sha": "4e2729f3dab9d1c9e6811c0c7066b5b0c92eb29d", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -13,7 +13,7 @@\n \n use hir::*;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, Attribute, Attribute_, MetaItem};\n-use syntax::ast::{MetaWord, MetaList, MetaNameValue};\n+use syntax::ast::MetaItemKind;\n use syntax::attr::ThinAttributesExt;\n use hir;\n use syntax::codemap::{respan, Span, Spanned};\n@@ -522,11 +522,11 @@ pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaIte\n     mi.map(|Spanned { node, span }| {\n         Spanned {\n             node: match node {\n-                MetaWord(id) => MetaWord(id),\n-                MetaList(id, mis) => {\n-                    MetaList(id, mis.move_map(|e| fld.fold_meta_item(e)))\n+                MetaItemKind::Word(id) => MetaItemKind::Word(id),\n+                MetaItemKind::List(id, mis) => {\n+                    MetaItemKind::List(id, mis.move_map(|e| fld.fold_meta_item(e)))\n                 }\n-                MetaNameValue(id, s) => MetaNameValue(id, s),\n+                MetaItemKind::NameValue(id, s) => MetaItemKind::NameValue(id, s),\n             },\n             span: fld.new_span(span),\n         }"}, {"sha": "ed16a11f5501a6a790abac5c86576f085ae919ea", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -308,7 +308,7 @@ impl MissingDoc {\n \n         let has_doc = attrs.iter().any(|a| {\n             match a.node.value.node {\n-                ast::MetaNameValue(ref name, _) if *name == \"doc\" => true,\n+                ast::MetaItemKind::NameValue(ref name, _) if *name == \"doc\" => true,\n                 _ => false\n             }\n         });"}, {"sha": "5ba9e566e0090b8b95a21610e78cb7e2edf6c37b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -1170,7 +1170,7 @@ fn get_meta_items(md: rbml::Doc) -> Vec<P<ast::MetaItem>> {\n         let vd = reader::get_doc(meta_item_doc, tag_meta_item_value);\n         let n = token::intern_and_get_ident(nd.as_str_slice());\n         let v = token::intern_and_get_ident(vd.as_str_slice());\n-        // FIXME (#623): Should be able to decode MetaNameValue variants,\n+        // FIXME (#623): Should be able to decode MetaItemKind::NameValue variants,\n         // but currently the encoder just drops them\n         attr::mk_name_value_item_str(n, v)\n     })).chain(reader::tagged_docs(md, tag_meta_item_list).map(|meta_item_doc| {"}, {"sha": "6375f82b2c5ed878c745c8c808f8c7657d01b064", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -1541,12 +1541,12 @@ fn encode_item_index(rbml_w: &mut Encoder, index: IndexData) {\n \n fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n     match mi.node {\n-      ast::MetaWord(ref name) => {\n+      ast::MetaItemKind::Word(ref name) => {\n         rbml_w.start_tag(tag_meta_item_word);\n         rbml_w.wr_tagged_str(tag_meta_item_name, name);\n         rbml_w.end_tag();\n       }\n-      ast::MetaNameValue(ref name, ref value) => {\n+      ast::MetaItemKind::NameValue(ref name, ref value) => {\n         match value.node {\n           ast::LitKind::Str(ref value, _) => {\n             rbml_w.start_tag(tag_meta_item_name_value);\n@@ -1557,7 +1557,7 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n           _ => {/* FIXME (#623): encode other variants */ }\n         }\n       }\n-      ast::MetaList(ref name, ref items) => {\n+      ast::MetaItemKind::List(ref name, ref items) => {\n         rbml_w.start_tag(tag_meta_item_list);\n         rbml_w.wr_tagged_str(tag_meta_item_name, name);\n         for inner_item in items {"}, {"sha": "102bcc10face13c51e98f17c2438b52f6c4c021e", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'v> Visitor<'v> for MacroLoader<'a> {\n                     }\n                     if let (Some(sel), Some(names)) = (import.as_mut(), names) {\n                         for attr in names {\n-                            if let ast::MetaWord(ref name) = attr.node {\n+                            if let ast::MetaItemKind::Word(ref name) = attr.node {\n                                 sel.insert(name.clone(), attr.span);\n                             } else {\n                                 span_err!(self.sess, attr.span, E0466, \"bad macro import\");\n@@ -113,7 +113,7 @@ impl<'a, 'v> Visitor<'v> for MacroLoader<'a> {\n                     };\n \n                     for attr in names {\n-                        if let ast::MetaWord(ref name) = attr.node {\n+                        if let ast::MetaItemKind::Word(ref name) = attr.node {\n                             reexport.insert(name.clone(), attr.span);\n                         } else {\n                             call_bad_macro_reexport(self.sess, attr.span);"}, {"sha": "6171d05fef098bfca0dda9457d629c6708d4484e", "filename": "src/librustc_trans/trans/assert_dep_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fassert_dep_graph.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n                 let mut id = None;\n                 for meta_item in attr.meta_item_list().unwrap_or_default() {\n                     match meta_item.node {\n-                        ast::MetaWord(ref s) if id.is_none() => id = Some(s.clone()),\n+                        ast::MetaItemKind::Word(ref s) if id.is_none() => id = Some(s.clone()),\n                         _ => {\n                             self.tcx.sess.span_err(\n                                 meta_item.span,\n@@ -113,9 +113,9 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n                 let mut id = None;\n                 for meta_item in attr.meta_item_list().unwrap_or_default() {\n                     match meta_item.node {\n-                        ast::MetaWord(ref s) if dep_node_interned.is_none() =>\n+                        ast::MetaItemKind::Word(ref s) if dep_node_interned.is_none() =>\n                             dep_node_interned = Some(s.clone()),\n-                        ast::MetaWord(ref s) if id.is_none() =>\n+                        ast::MetaItemKind::Word(ref s) if id.is_none() =>\n                             id = Some(s.clone()),\n                         _ => {\n                             self.tcx.sess.span_err("}, {"sha": "e581e19d4330e256b44ff2d613e4b6bad90af1d2", "filename": "src/librustc_trans/trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Futils.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -48,7 +48,7 @@ pub fn contains_nodebug_attribute(attributes: &[ast::Attribute]) -> bool {\n     attributes.iter().any(|attr| {\n         let meta_item: &ast::MetaItem = &*attr.node.value;\n         match meta_item.node {\n-            ast::MetaWord(ref value) => &value[..] == \"no_debug\",\n+            ast::MetaItemKind::Word(ref value) => &value[..] == \"no_debug\",\n             _ => false\n         }\n     })"}, {"sha": "ca05806d8f95a181f7d242fb74e10e517c4a14d8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -451,11 +451,11 @@ pub enum Attribute {\n impl Clean<Attribute> for ast::MetaItem {\n     fn clean(&self, cx: &DocContext) -> Attribute {\n         match self.node {\n-            ast::MetaWord(ref s) => Word(s.to_string()),\n-            ast::MetaList(ref s, ref l) => {\n+            ast::MetaItemKind::Word(ref s) => Word(s.to_string()),\n+            ast::MetaItemKind::List(ref s, ref l) => {\n                 List(s.to_string(), l.clean(cx))\n             }\n-            ast::MetaNameValue(ref s, ref v) => {\n+            ast::MetaItemKind::NameValue(ref s, ref v) => {\n                 NameValue(s.to_string(), lit_to_string(v))\n             }\n         }"}, {"sha": "a3a59b7898b4f521febf3baa40c81e0efdbe670b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::MetaItem_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n@@ -476,31 +475,32 @@ pub struct Crate {\n     pub exported_macros: Vec<MacroDef>,\n }\n \n-pub type MetaItem = Spanned<MetaItem_>;\n+pub type MetaItem = Spanned<MetaItemKind>;\n \n #[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum MetaItem_ {\n-    MetaWord(InternedString),\n-    MetaList(InternedString, Vec<P<MetaItem>>),\n-    MetaNameValue(InternedString, Lit),\n+pub enum MetaItemKind {\n+    Word(InternedString),\n+    List(InternedString, Vec<P<MetaItem>>),\n+    NameValue(InternedString, Lit),\n }\n \n-// can't be derived because the MetaList requires an unordered comparison\n-impl PartialEq for MetaItem_ {\n-    fn eq(&self, other: &MetaItem_) -> bool {\n+// can't be derived because the MetaItemKind::List requires an unordered comparison\n+impl PartialEq for MetaItemKind {\n+    fn eq(&self, other: &MetaItemKind) -> bool {\n+        use self::MetaItemKind::*;\n         match *self {\n-            MetaWord(ref ns) => match *other {\n-                MetaWord(ref no) => (*ns) == (*no),\n+            Word(ref ns) => match *other {\n+                Word(ref no) => (*ns) == (*no),\n                 _ => false\n             },\n-            MetaNameValue(ref ns, ref vs) => match *other {\n-                MetaNameValue(ref no, ref vo) => {\n+            NameValue(ref ns, ref vs) => match *other {\n+                NameValue(ref no, ref vo) => {\n                     (*ns) == (*no) && vs.node == vo.node\n                 }\n                 _ => false\n             },\n-            MetaList(ref ns, ref miss) => match *other {\n-                MetaList(ref no, ref miso) => {\n+            List(ref ns, ref miss) => match *other {\n+                List(ref no, ref miso) => {\n                     ns == no &&\n                         miss.iter().all(|mi| miso.iter().any(|x| x.node == mi.node))\n                 }"}, {"sha": "53ab4e1b6d5181778b640b31cb677d0a5879148e", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -15,7 +15,7 @@ pub use self::ReprAttr::*;\n pub use self::IntType::*;\n \n use ast;\n-use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n+use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaItemKind};\n use ast::{Stmt, StmtKind, DeclKind};\n use ast::{Expr, Item, Local, Decl};\n use codemap::{Span, Spanned, spanned, dummy_spanned};\n@@ -66,7 +66,7 @@ pub trait AttrMetaMethods {\n     /// `#[foo=\"bar\"]` and `#[foo(bar)]`\n     fn name(&self) -> InternedString;\n \n-    /// Gets the string value if self is a MetaNameValue variant\n+    /// Gets the string value if self is a MetaItemKind::NameValue variant\n     /// containing a string, otherwise None.\n     fn value_str(&self) -> Option<InternedString>;\n     /// Gets a list of inner meta items from a list MetaItem type.\n@@ -96,15 +96,15 @@ impl AttrMetaMethods for Attribute {\n impl AttrMetaMethods for MetaItem {\n     fn name(&self) -> InternedString {\n         match self.node {\n-            MetaWord(ref n) => (*n).clone(),\n-            MetaNameValue(ref n, _) => (*n).clone(),\n-            MetaList(ref n, _) => (*n).clone(),\n+            MetaItemKind::Word(ref n) => (*n).clone(),\n+            MetaItemKind::NameValue(ref n, _) => (*n).clone(),\n+            MetaItemKind::List(ref n, _) => (*n).clone(),\n         }\n     }\n \n     fn value_str(&self) -> Option<InternedString> {\n         match self.node {\n-            MetaNameValue(_, ref v) => {\n+            MetaItemKind::NameValue(_, ref v) => {\n                 match v.node {\n                     ast::LitKind::Str(ref s, _) => Some((*s).clone()),\n                     _ => None,\n@@ -116,7 +116,7 @@ impl AttrMetaMethods for MetaItem {\n \n     fn meta_item_list(&self) -> Option<&[P<MetaItem>]> {\n         match self.node {\n-            MetaList(_, ref l) => Some(&l[..]),\n+            MetaItemKind::List(_, ref l) => Some(&l[..]),\n             _ => None\n         }\n     }\n@@ -179,15 +179,15 @@ pub fn mk_name_value_item_str(name: InternedString, value: InternedString)\n \n pub fn mk_name_value_item(name: InternedString, value: ast::Lit)\n                           -> P<MetaItem> {\n-    P(dummy_spanned(MetaNameValue(name, value)))\n+    P(dummy_spanned(MetaItemKind::NameValue(name, value)))\n }\n \n pub fn mk_list_item(name: InternedString, items: Vec<P<MetaItem>>) -> P<MetaItem> {\n-    P(dummy_spanned(MetaList(name, items)))\n+    P(dummy_spanned(MetaItemKind::List(name, items)))\n }\n \n pub fn mk_word_item(name: InternedString) -> P<MetaItem> {\n-    P(dummy_spanned(MetaWord(name)))\n+    P(dummy_spanned(MetaItemKind::Word(name)))\n }\n \n thread_local! { static NEXT_ATTR_ID: Cell<usize> = Cell::new(0) }\n@@ -229,8 +229,7 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,\n     let attr = Attribute_ {\n         id: id,\n         style: style,\n-        value: P(spanned(lo, hi, MetaNameValue(InternedString::new(\"doc\"),\n-                                               lit))),\n+        value: P(spanned(lo, hi, MetaItemKind::NameValue(InternedString::new(\"doc\"), lit))),\n         is_sugared_doc: true\n     };\n     spanned(lo, hi, attr)\n@@ -286,7 +285,7 @@ pub fn sort_meta_items(items: Vec<P<MetaItem>>) -> Vec<P<MetaItem>> {\n     v.into_iter().map(|(_, m)| m.map(|Spanned {node, span}| {\n         Spanned {\n             node: match node {\n-                MetaList(n, mis) => MetaList(n, sort_meta_items(mis)),\n+                MetaItemKind::List(n, mis) => MetaItemKind::List(n, sort_meta_items(mis)),\n                 _ => node\n             },\n             span: span\n@@ -329,11 +328,11 @@ pub enum InlineAttr {\n pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> InlineAttr {\n     attrs.iter().fold(InlineAttr::None, |ia,attr| {\n         match attr.node.value.node {\n-            MetaWord(ref n) if *n == \"inline\" => {\n+            MetaItemKind::Word(ref n) if *n == \"inline\" => {\n                 mark_used(attr);\n                 InlineAttr::Hint\n             }\n-            MetaList(ref n, ref items) if *n == \"inline\" => {\n+            MetaItemKind::List(ref n, ref items) if *n == \"inline\" => {\n                 mark_used(attr);\n                 if items.len() != 1 {\n                     diagnostic.map(|d|{ d.span_err(attr.span, \"expected one argument\"); });\n@@ -365,11 +364,11 @@ pub fn cfg_matches<T: CfgDiag>(cfgs: &[P<MetaItem>],\n                            cfg: &ast::MetaItem,\n                            diag: &mut T) -> bool {\n     match cfg.node {\n-        ast::MetaList(ref pred, ref mis) if &pred[..] == \"any\" =>\n+        ast::MetaItemKind::List(ref pred, ref mis) if &pred[..] == \"any\" =>\n             mis.iter().any(|mi| cfg_matches(cfgs, &**mi, diag)),\n-        ast::MetaList(ref pred, ref mis) if &pred[..] == \"all\" =>\n+        ast::MetaItemKind::List(ref pred, ref mis) if &pred[..] == \"all\" =>\n             mis.iter().all(|mi| cfg_matches(cfgs, &**mi, diag)),\n-        ast::MetaList(ref pred, ref mis) if &pred[..] == \"not\" => {\n+        ast::MetaItemKind::List(ref pred, ref mis) if &pred[..] == \"not\" => {\n             if mis.len() != 1 {\n                 diag.emit_error(|diagnostic| {\n                     diagnostic.span_err(cfg.span, \"expected 1 cfg-pattern\");\n@@ -378,14 +377,14 @@ pub fn cfg_matches<T: CfgDiag>(cfgs: &[P<MetaItem>],\n             }\n             !cfg_matches(cfgs, &*mis[0], diag)\n         }\n-        ast::MetaList(ref pred, _) => {\n+        ast::MetaItemKind::List(ref pred, _) => {\n             diag.emit_error(|diagnostic| {\n                 diagnostic.span_err(cfg.span,\n                     &format!(\"invalid predicate `{}`\", pred));\n             });\n             false\n         },\n-        ast::MetaWord(_) | ast::MetaNameValue(..) => {\n+        ast::MetaItemKind::Word(_) | ast::MetaItemKind::NameValue(..) => {\n             diag.flag_gated(|feature_gated_cfgs| {\n                 feature_gated_cfgs.extend(\n                     GatedCfg::gate(cfg).map(GatedCfgAttr::GatedCfg));\n@@ -707,11 +706,11 @@ pub fn require_unique_names(diagnostic: &Handler, metas: &[P<MetaItem>]) {\n pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr> {\n     let mut acc = Vec::new();\n     match attr.node.value.node {\n-        ast::MetaList(ref s, ref items) if *s == \"repr\" => {\n+        ast::MetaItemKind::List(ref s, ref items) if *s == \"repr\" => {\n             mark_used(attr);\n             for item in items {\n                 match item.node {\n-                    ast::MetaWord(ref word) => {\n+                    ast::MetaItemKind::Word(ref word) => {\n                         let hint = match &word[..] {\n                             // Can't use \"extern\" because it's not a lexical identifier.\n                             \"C\" => Some(ReprExtern),"}, {"sha": "09408f68dfd039924d01f234bceeb7d98d98547f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -270,7 +270,7 @@ fn in_cfg<T: CfgDiag>(cfg: &[P<ast::MetaItem>],\n                       diag: &mut T) -> bool {\n     attrs.iter().all(|attr| {\n         let mis = match attr.node.value.node {\n-            ast::MetaList(_, ref mis) if is_cfg(&attr) => mis,\n+            ast::MetaItemKind::List(_, ref mis) if is_cfg(&attr) => mis,\n             _ => return true\n         };\n "}, {"sha": "a807fbb93fb7a182c5a2e8d536aff28335dcba76", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -1102,21 +1102,21 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn meta_word(&self, sp: Span, w: InternedString) -> P<ast::MetaItem> {\n-        P(respan(sp, ast::MetaWord(w)))\n+        P(respan(sp, ast::MetaItemKind::Word(w)))\n     }\n     fn meta_list(&self,\n                  sp: Span,\n                  name: InternedString,\n                  mis: Vec<P<ast::MetaItem>> )\n                  -> P<ast::MetaItem> {\n-        P(respan(sp, ast::MetaList(name, mis)))\n+        P(respan(sp, ast::MetaItemKind::List(name, mis)))\n     }\n     fn meta_name_value(&self,\n                        sp: Span,\n                        name: InternedString,\n                        value: ast::LitKind)\n                        -> P<ast::MetaItem> {\n-        P(respan(sp, ast::MetaNameValue(name, respan(sp, value))))\n+        P(respan(sp, ast::MetaItemKind::NameValue(name, respan(sp, value))))\n     }\n \n     fn item_use(&self, sp: Span,"}, {"sha": "c53001e665e71c2acdfdb1a5d7dc6f04199c70df", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -348,7 +348,7 @@ fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool\n \n         if is_use {\n             match attr.node.value.node {\n-                ast::MetaWord(..) => (),\n+                ast::MetaItemKind::Word(..) => (),\n                 _ => fld.cx.span_err(attr.span, \"arguments to macro_use are not allowed here\"),\n             }\n             return true;"}, {"sha": "b04f6b066397a7b8eda8d8f7e1296e86642dbb35", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -1138,7 +1138,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n             Some(list) => {\n                 for mi in list {\n                     let name = match mi.node {\n-                        ast::MetaWord(ref word) => (*word).clone(),\n+                        ast::MetaItemKind::Word(ref word) => (*word).clone(),\n                         _ => {\n                             span_handler.span_err(mi.span,\n                                                   \"malformed feature, expected just \\"}, {"sha": "722a65fa526904728f418392d6f09e330652698c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -556,11 +556,11 @@ pub fn noop_fold_mac<T: Folder>(Spanned {node, span}: Mac, fld: &mut T) -> Mac {\n pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaItem> {\n     mi.map(|Spanned {node, span}| Spanned {\n         node: match node {\n-            MetaWord(id) => MetaWord(id),\n-            MetaList(id, mis) => {\n-                MetaList(id, mis.move_map(|e| fld.fold_meta_item(e)))\n+            MetaItemKind::Word(id) => MetaItemKind::Word(id),\n+            MetaItemKind::List(id, mis) => {\n+                MetaItemKind::List(id, mis.move_map(|e| fld.fold_meta_item(e)))\n             }\n-            MetaNameValue(id, s) => MetaNameValue(id, s)\n+            MetaItemKind::NameValue(id, s) => MetaItemKind::NameValue(id, s)\n         },\n         span: fld.new_span(span)\n     })"}, {"sha": "505e543a3fba3c51a00e72f9fdb8542dacb53a55", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -182,16 +182,16 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 let hi = self.span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaNameValue(name, lit))))\n+                Ok(P(spanned(lo, hi, ast::MetaItemKind::NameValue(name, lit))))\n             }\n             token::OpenDelim(token::Paren) => {\n                 let inner_items = try!(self.parse_meta_seq());\n                 let hi = self.span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaList(name, inner_items))))\n+                Ok(P(spanned(lo, hi, ast::MetaItemKind::List(name, inner_items))))\n             }\n             _ => {\n                 let hi = self.last_span.hi;\n-                Ok(P(spanned(lo, hi, ast::MetaWord(name))))\n+                Ok(P(spanned(lo, hi, ast::MetaItemKind::Word(name))))\n             }\n         }\n     }"}, {"sha": "8495853c2c9b37c2885dee1336550bb1be74f54a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -766,15 +766,15 @@ pub trait PrintState<'a> {\n     fn print_meta_item(&mut self, item: &ast::MetaItem) -> io::Result<()> {\n         try!(self.ibox(INDENT_UNIT));\n         match item.node {\n-            ast::MetaWord(ref name) => {\n+            ast::MetaItemKind::Word(ref name) => {\n                 try!(word(self.writer(), &name));\n             }\n-            ast::MetaNameValue(ref name, ref value) => {\n+            ast::MetaItemKind::NameValue(ref name, ref value) => {\n                 try!(self.word_space(&name[..]));\n                 try!(self.word_space(\"=\"));\n                 try!(self.print_literal(value));\n             }\n-            ast::MetaList(ref name, ref items) => {\n+            ast::MetaItemKind::List(ref name, ref items) => {\n                 try!(word(self.writer(), &name));\n                 try!(self.popen());\n                 try!(self.commasep(Consistent,"}, {"sha": "996a2ee006e1e0d61574edca0c6ac90b06974620", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -157,7 +157,7 @@ impl fold::Folder for PreludeInjector {\n                     style: ast::AttrStyle::Outer,\n                     value: P(ast::MetaItem {\n                         span: self.span,\n-                        node: ast::MetaWord(special_idents::prelude_import.name.as_str()),\n+                        node: ast::MetaItemKind::Word(special_idents::prelude_import.name.as_str()),\n                     }),\n                     is_sugared_doc: false,\n                 },"}, {"sha": "4e2142f1fb482a963da3426f8432c031ea07214a", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -13,7 +13,7 @@\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n \n-use syntax::ast::{MetaItem, MetaWord};\n+use syntax::ast::{MetaItem, MetaItemKind};\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{ExtCtxt, SyntaxEnv, Annotatable};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n@@ -94,7 +94,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n \n             for titem in traits.iter().rev() {\n                 let tname = match titem.node {\n-                    MetaWord(ref tname) => tname,\n+                    MetaItemKind::Word(ref tname) => tname,\n                     _ => {\n                         cx.span_err(titem.span, \"malformed `derive` entry\");\n                         continue;"}, {"sha": "c4cfa36542f9c65aa4ea76de6cd0ab15f644e9e7", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14e09ad4686bb20a98acfd7d930386f6330d2b4d/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=14e09ad4686bb20a98acfd7d930386f6330d2b4d", "patch": "@@ -101,8 +101,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n                     push: &mut FnMut(Annotatable))\n {\n     let copy_name = match mi.node {\n-        ast::MetaItem_::MetaList(_, ref xs) => {\n-            if let ast::MetaItem_::MetaWord(ref w) = xs[0].node {\n+        ast::MetaItemKind::List(_, ref xs) => {\n+            if let ast::MetaItemKind::Word(ref w) = xs[0].node {\n                 token::str_to_ident(&w)\n             } else {\n                 cx.span_err(mi.span, \"Expected word\");"}]}