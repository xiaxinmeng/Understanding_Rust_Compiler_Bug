{"sha": "81f64b7fa31de97930560fe6d18b6e291f76a626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjY0YjdmYTMxZGU5NzkzMDU2MGZlNmQxOGI2ZTI5MWY3NmE2MjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-06T16:39:38Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-09-06T23:58:23Z"}, "message": "universal_regions.rs: rustfmt", "tree": {"sha": "2be9b4e707e5f593370d986a4ec9c6fa8a45fe6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be9b4e707e5f593370d986a4ec9c6fa8a45fe6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f64b7fa31de97930560fe6d18b6e291f76a626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f64b7fa31de97930560fe6d18b6e291f76a626", "html_url": "https://github.com/rust-lang/rust/commit/81f64b7fa31de97930560fe6d18b6e291f76a626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f64b7fa31de97930560fe6d18b6e291f76a626/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da12d02b37dc872a090de96a0517d9966286cc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da12d02b37dc872a090de96a0517d9966286cc9b", "html_url": "https://github.com/rust-lang/rust/commit/da12d02b37dc872a090de96a0517d9966286cc9b"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "5115312825605c18b11f0e99d532d42b4a1a8fc5", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81f64b7fa31de97930560fe6d18b6e291f76a626/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f64b7fa31de97930560fe6d18b6e291f76a626/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=81f64b7fa31de97930560fe6d18b6e291f76a626", "patch": "@@ -241,8 +241,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(\n-            tcx, closure_base_def_id, |r| { region_mapping.push(r); });\n+        for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+            region_mapping.push(r);\n+        });\n \n         assert_eq!(\n             region_mapping.len(),\n@@ -352,9 +353,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         //     let c = || { let x: &'a u32 = ...; }\n         // }\n         if self.mir_def_id != closure_base_def_id {\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n-                self.mir_def_id,\n-                &mut indices)\n+            self.infcx\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices)\n         }\n \n         let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n@@ -371,9 +371,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         // Converse of above, if this is a function then the late-bound regions declared on its\n         // signature are local to the fn.\n         if self.mir_def_id == closure_base_def_id {\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n-                self.mir_def_id,\n-                &mut indices);\n+            self.infcx\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices);\n         }\n \n         let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n@@ -582,11 +581,10 @@ trait InferCtxtExt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>;\n \n-\n     fn replace_late_bound_regions_with_nll_infer_vars(\n         &self,\n         mir_def_id: DefId,\n-        indices: &mut UniversalRegionIndices<'tcx>\n+        indices: &mut UniversalRegionIndices<'tcx>,\n     );\n }\n \n@@ -710,11 +708,14 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n fn for_each_late_bound_region_defined_on<'tcx>(\n     tcx: TyCtxt<'_, '_, 'tcx>,\n     fn_def_id: DefId,\n-    mut f: impl FnMut(ty::Region<'tcx>)\n-    ) {\n+    mut f: impl FnMut(ty::Region<'tcx>),\n+) {\n     if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.index) {\n         for late_bound in late_bounds.iter() {\n-            let hir_id = HirId{ owner: fn_def_id.index, local_id: *late_bound };\n+            let hir_id = HirId {\n+                owner: fn_def_id.index,\n+                local_id: *late_bound,\n+            };\n             let region_node_id = tcx.hir.hir_to_node_id(hir_id);\n             let name = tcx.hir.name(region_node_id).as_interned_str();\n             let region_def_id = tcx.hir.local_def_id(region_node_id);"}]}