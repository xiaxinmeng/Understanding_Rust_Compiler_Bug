{"sha": "b22559f547f963df83987dfcf2aeb070a84d42bf", "node_id": "C_kwDOAAsO6NoAKGIyMjU1OWY1NDdmOTYzZGY4Mzk4N2RmY2YyYWViMDcwYTg0ZDQyYmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-22T10:58:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-22T10:58:09Z"}, "message": "Rollup merge of #103346 - HeroicKatora:metadata_of_const_pointer_argument, r=dtolnay\n\nAdjust argument type for mutable with_metadata_of (#75091)\n\nThe method takes two pointer arguments: one `self` supplying the pointer value, and a second pointer supplying the metadata.\n\nThe new parameter type more clearly reflects the actual requirements. The provenance of the metadata parameter is disregarded completely. Using a mutable pointer in the call site can be coerced to a const pointer while the reverse is not true.\n\nIn some cases, the current parameter type can thus lead to a very slightly confusing additional cast. [Example](https://github.com/HeroicKatora/static-alloc/commit/cad93775eb9adc62f744651e3abf19513e69e7d0).\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = val as *const _ as *mut T;\nlet ptr = uninit.as_ptr().with_metadata_of(ptr);\n```\n\nThis could then instead be simplified to:\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = uninit.as_ptr().with_metadata_of(&**val);\n```\n\nTracking issue: https://github.com/rust-lang/rust/issues/75091\n\n``@dtolnay`` you're reviewed #95249, would you mind chiming in?", "tree": {"sha": "ab9cd6ef97c921d201cd06a8fdef3f2390707665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab9cd6ef97c921d201cd06a8fdef3f2390707665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22559f547f963df83987dfcf2aeb070a84d42bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjU8zBCRBK7hj4Ov3rIwAAp3MIABpdTHmOiTuRCGq/fICpg6sZ\nnLeObfNKjr+H8zLxB3Be41cwxUvZ4YB+ofEEPmTGLi4ItYKKAKjGsn5saYdOMBcp\nRnO4ti2DoA2QneoUIgaewz6+XfvLsEHaE1SYDJhuEVcXFkRILJZZCW5zGGuGbJEa\nAEMQj5M1bjaHApnXS/ckvQ8yd1P90B0zpVYFpa6zluffaCRA0P0Fuo3o5vKfI5Vn\nur89d7vJD0+cPk73YN+UZ0zdX0r8IO8bFFiJfDXvXW1+K9KFSCffbLJTpBBjrJhy\nVWZtXn3vy4GEwG88JtUjcgu8nvwONqNqtLn/IGpzzRYc5rQlidBQ+2IzGEX4fx4=\n=4nRO\n-----END PGP SIGNATURE-----\n", "payload": "tree ab9cd6ef97c921d201cd06a8fdef3f2390707665\nparent 3f49f9506f124097b9f773d08248432eca625f1c\nparent e3606b2b0298be6122d002257b50ba42f0b4d4d2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666436289 +0530\ncommitter GitHub <noreply@github.com> 1666436289 +0530\n\nRollup merge of #103346 - HeroicKatora:metadata_of_const_pointer_argument, r=dtolnay\n\nAdjust argument type for mutable with_metadata_of (#75091)\n\nThe method takes two pointer arguments: one `self` supplying the pointer value, and a second pointer supplying the metadata.\n\nThe new parameter type more clearly reflects the actual requirements. The provenance of the metadata parameter is disregarded completely. Using a mutable pointer in the call site can be coerced to a const pointer while the reverse is not true.\n\nIn some cases, the current parameter type can thus lead to a very slightly confusing additional cast. [Example](https://github.com/HeroicKatora/static-alloc/commit/cad93775eb9adc62f744651e3abf19513e69e7d0).\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = val as *const _ as *mut T;\nlet ptr = uninit.as_ptr().with_metadata_of(ptr);\n```\n\nThis could then instead be simplified to:\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = uninit.as_ptr().with_metadata_of(&**val);\n```\n\nTracking issue: https://github.com/rust-lang/rust/issues/75091\n\n``@dtolnay`` you're reviewed #95249, would you mind chiming in?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22559f547f963df83987dfcf2aeb070a84d42bf", "html_url": "https://github.com/rust-lang/rust/commit/b22559f547f963df83987dfcf2aeb070a84d42bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22559f547f963df83987dfcf2aeb070a84d42bf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f49f9506f124097b9f773d08248432eca625f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f49f9506f124097b9f773d08248432eca625f1c", "html_url": "https://github.com/rust-lang/rust/commit/3f49f9506f124097b9f773d08248432eca625f1c"}, {"sha": "e3606b2b0298be6122d002257b50ba42f0b4d4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3606b2b0298be6122d002257b50ba42f0b4d4d2", "html_url": "https://github.com/rust-lang/rust/commit/e3606b2b0298be6122d002257b50ba42f0b4d4d2"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "9c229665c7e91b4169e2976342df87e7b2356b90", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=b22559f547f963df83987dfcf2aeb070a84d42bf", "patch": "@@ -1386,7 +1386,7 @@ impl<T: ?Sized> Rc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| mem.with_metadata_of(ptr as *mut RcBox<T>),\n+                |mem| mem.with_metadata_of(ptr as *const RcBox<T>),\n             )\n         }\n     }"}, {"sha": "e8d9de4fb3ce505750a281a734ecd20a1505cea0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=b22559f547f963df83987dfcf2aeb070a84d42bf", "patch": "@@ -1204,7 +1204,7 @@ impl<T: ?Sized> Arc<T> {\n             Self::allocate_for_layout(\n                 Layout::for_value(&*ptr),\n                 |layout| Global.allocate(layout),\n-                |mem| mem.with_metadata_of(ptr as *mut ArcInner<T>),\n+                |mem| mem.with_metadata_of(ptr as *const ArcInner<T>),\n             )\n         }\n     }"}, {"sha": "0bb2566fd4c98b32f91b5afc9a19cf2e127a0b24", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22559f547f963df83987dfcf2aeb070a84d42bf/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b22559f547f963df83987dfcf2aeb070a84d42bf", "patch": "@@ -80,10 +80,14 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, mut val: *mut U) -> *mut U\n+    pub fn with_metadata_of<U>(self, val: *const U) -> *mut U\n     where\n         U: ?Sized,\n     {\n+        // Prepare in the type system that we will replace the pointer value with a mutable\n+        // pointer, taking the mutable provenance from the `self` pointer.\n+        let mut val = val as *mut U;\n+        // Pointer to the pointer value within the value.\n         let target = &mut val as *mut *mut U as *mut *mut u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current"}]}