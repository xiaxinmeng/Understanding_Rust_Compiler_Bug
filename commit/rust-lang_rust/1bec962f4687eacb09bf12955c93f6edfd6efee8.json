{"sha": "1bec962f4687eacb09bf12955c93f6edfd6efee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZWM5NjJmNDY4N2VhY2IwOWJmMTI5NTVjOTNmNmVkZmQ2ZWZlZTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-08-15T20:58:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-23T16:34:44Z"}, "message": "bootstrap: Remove need for `RUSTC_RPATH` variable", "tree": {"sha": "0f93684dee34871681c4e400c0fdd0d51d6bafa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f93684dee34871681c4e400c0fdd0d51d6bafa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bec962f4687eacb09bf12955c93f6edfd6efee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bec962f4687eacb09bf12955c93f6edfd6efee8", "html_url": "https://github.com/rust-lang/rust/commit/1bec962f4687eacb09bf12955c93f6edfd6efee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bec962f4687eacb09bf12955c93f6edfd6efee8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82d86ed60e92ad9e0aa14fc52db25d0b9d23440", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82d86ed60e92ad9e0aa14fc52db25d0b9d23440", "html_url": "https://github.com/rust-lang/rust/commit/b82d86ed60e92ad9e0aa14fc52db25d0b9d23440"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "8be70c5a28713f821d98be15e55a168220eaba8b", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1bec962f4687eacb09bf12955c93f6edfd6efee8/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec962f4687eacb09bf12955c93f6edfd6efee8/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1bec962f4687eacb09bf12955c93f6edfd6efee8", "patch": "@@ -184,54 +184,6 @@ fn main() {\n             cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n         }\n \n-        // Dealing with rpath here is a little special, so let's go into some\n-        // detail. First off, `-rpath` is a linker option on Unix platforms\n-        // which adds to the runtime dynamic loader path when looking for\n-        // dynamic libraries. We use this by default on Unix platforms to ensure\n-        // that our nightlies behave the same on Windows, that is they work out\n-        // of the box. This can be disabled, of course, but basically that's why\n-        // we're gated on RUSTC_RPATH here.\n-        //\n-        // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n-        // here?\" and that is indeed a good question to task. This codegen\n-        // option is the compiler's current interface to generating an rpath.\n-        // Unfortunately it doesn't quite suffice for us. The flag currently\n-        // takes no value as an argument, so the compiler calculates what it\n-        // should pass to the linker as `-rpath`. This unfortunately is based on\n-        // the **compile time** directory structure which when building with\n-        // Cargo will be very different than the runtime directory structure.\n-        //\n-        // All that's a really long winded way of saying that if we use\n-        // `-Crpath` then the executables generated have the wrong rpath of\n-        // something like `$ORIGIN/deps` when in fact the way we distribute\n-        // rustc requires the rpath to be `$ORIGIN/../lib`.\n-        //\n-        // So, all in all, to set up the correct rpath we pass the linker\n-        // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n-        // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n-        // to change a flag in a binary?\n-        if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n-            let rpath = if target.contains(\"apple\") {\n-\n-                // Note that we need to take one extra step on macOS to also pass\n-                // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n-                // do that we pass a weird flag to the compiler to get it to do\n-                // so. Note that this is definitely a hack, and we should likely\n-                // flesh out rpath support more fully in the future.\n-                cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n-                Some(\"-Wl,-rpath,@loader_path/../lib\")\n-            } else if !target.contains(\"windows\") &&\n-                      !target.contains(\"wasm32\") &&\n-                      !target.contains(\"fuchsia\") {\n-                Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n-            } else {\n-                None\n-            };\n-            if let Some(rpath) = rpath {\n-                cmd.arg(\"-C\").arg(format!(\"link-args={}\", rpath));\n-            }\n-        }\n-\n         if let Ok(map) = env::var(\"RUSTC_DEBUGINFO_MAP\") {\n             cmd.arg(\"--remap-path-prefix\").arg(&map);\n         }"}, {"sha": "095770f76508719bb8ac153d558ba87243b6e91c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1bec962f4687eacb09bf12955c93f6edfd6efee8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bec962f4687eacb09bf12955c93f6edfd6efee8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1bec962f4687eacb09bf12955c93f6edfd6efee8", "patch": "@@ -908,7 +908,6 @@ impl<'a> Builder<'a> {\n             )\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n             .env(\"RUSTC_LIBDIR\", &libdir)\n-            .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n             .env(\n                 \"RUSTDOC_REAL\",\n@@ -921,6 +920,54 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir())\n             .env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n \n+        // Dealing with rpath here is a little special, so let's go into some\n+        // detail. First off, `-rpath` is a linker option on Unix platforms\n+        // which adds to the runtime dynamic loader path when looking for\n+        // dynamic libraries. We use this by default on Unix platforms to ensure\n+        // that our nightlies behave the same on Windows, that is they work out\n+        // of the box. This can be disabled, of course, but basically that's why\n+        // we're gated on RUSTC_RPATH here.\n+        //\n+        // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n+        // here?\" and that is indeed a good question to task. This codegen\n+        // option is the compiler's current interface to generating an rpath.\n+        // Unfortunately it doesn't quite suffice for us. The flag currently\n+        // takes no value as an argument, so the compiler calculates what it\n+        // should pass to the linker as `-rpath`. This unfortunately is based on\n+        // the **compile time** directory structure which when building with\n+        // Cargo will be very different than the runtime directory structure.\n+        //\n+        // All that's a really long winded way of saying that if we use\n+        // `-Crpath` then the executables generated have the wrong rpath of\n+        // something like `$ORIGIN/deps` when in fact the way we distribute\n+        // rustc requires the rpath to be `$ORIGIN/../lib`.\n+        //\n+        // So, all in all, to set up the correct rpath we pass the linker\n+        // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n+        // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n+        // to change a flag in a binary?\n+        if self.config.rust_rpath {\n+            let rpath = if target.contains(\"apple\") {\n+\n+                // Note that we need to take one extra step on macOS to also pass\n+                // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n+                // do that we pass a weird flag to the compiler to get it to do\n+                // so. Note that this is definitely a hack, and we should likely\n+                // flesh out rpath support more fully in the future.\n+                rustflags.arg(\"-Zosx-rpath-install-name\");\n+                Some(\"-Wl,-rpath,@loader_path/../lib\")\n+            } else if !target.contains(\"windows\") &&\n+                      !target.contains(\"wasm32\") &&\n+                      !target.contains(\"fuchsia\") {\n+                Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n+            } else {\n+                None\n+            };\n+            if let Some(rpath) = rpath {\n+                rustflags.arg(&format!(\"-Clink-args={}\", rpath));\n+            }\n+        }\n+\n         if let Some(host_linker) = self.linker(compiler.host) {\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }"}]}