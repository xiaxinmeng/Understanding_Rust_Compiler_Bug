{"sha": "2a68c719f4a32123fbd428fe280f41af47d00fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNjhjNzE5ZjRhMzIxMjNmYmQ0MjhmZTI4MGY0MWFmNDdkMDBmZWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-27T01:36:51Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-28T06:41:09Z"}, "message": "to_either + fixes", "tree": {"sha": "a5aaa1c62e6c19672955e417ab534e522a62dd95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5aaa1c62e6c19672955e417ab534e522a62dd95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a68c719f4a32123fbd428fe280f41af47d00fea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a68c719f4a32123fbd428fe280f41af47d00fea", "html_url": "https://github.com/rust-lang/rust/commit/2a68c719f4a32123fbd428fe280f41af47d00fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a68c719f4a32123fbd428fe280f41af47d00fea/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad53cb6e298192cc75cd5769a1b997a3457666c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad53cb6e298192cc75cd5769a1b997a3457666c", "html_url": "https://github.com/rust-lang/rust/commit/aad53cb6e298192cc75cd5769a1b997a3457666c"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "4cd67d6ebacf3587e50d58f610904c76ecb50e31", "filename": "src/libextra/json.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -1867,35 +1867,34 @@ mod tests {\n                 col: 8u,\n                 msg: @~\"EOF while parsing object\"}));\n \n-        assert_eq!(result::unwrap(from_str(\"{}\")), mk_object([]));\n-        assert_eq!(result::unwrap(from_str(\"{\\\"a\\\": 3}\")),\n+        assert_eq!(from_str(\"{}\").unwrap(), mk_object([]));\n+        assert_eq!(from_str(\"{\\\"a\\\": 3}\").unwrap(),\n                   mk_object([(~\"a\", Number(3.0f))]));\n \n-        assert_eq!(result::unwrap(from_str(\n-                      \"{ \\\"a\\\": null, \\\"b\\\" : true }\")),\n+        assert_eq!(from_str(\n+                      \"{ \\\"a\\\": null, \\\"b\\\" : true }\").unwrap(),\n                   mk_object([\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        assert_eq!(result::unwrap(\n-                      from_str(\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\")),\n+        assert_eq!(from_str(\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\").unwrap(),\n                   mk_object([\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        assert_eq!(result::unwrap(from_str(\n-                      \"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\")),\n+        assert_eq!(from_str(\n+                      \"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\").unwrap(),\n                   mk_object([\n                       (~\"a\", Number(1.0)),\n                       (~\"b\", List(~[Boolean(true)]))\n                   ]));\n-        assert_eq!(result::unwrap(from_str(\n+        assert_eq!(from_str(\n                       ~\"{\" +\n                           \"\\\"a\\\": 1.0, \" +\n                           \"\\\"b\\\": [\" +\n                               \"true,\" +\n                               \"\\\"foo\\\\nbar\\\", \" +\n                               \"{ \\\"c\\\": {\\\"d\\\": null} } \" +\n                           \"]\" +\n-                      \"}\")),\n+                      \"}\").unwrap(),\n                   mk_object([\n                       (~\"a\", Number(1.0f)),\n                       (~\"b\", List(~["}, {"sha": "f926572dad61726a7ccb7356c1ffeba2f9023aa7", "filename": "src/libextra/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -1132,13 +1132,13 @@ mod tests {\n         assert!(test(\"6\", \"%w\"));\n         assert!(test(\"2009\", \"%Y\"));\n         assert!(test(\"09\", \"%y\"));\n-        assert!(result::unwrap(strptime(\"UTC\", \"%Z\")).tm_zone ==\n+        assert!(strptime(\"UTC\", \"%Z\").unwrap().tm_zone ==\n             ~\"UTC\");\n-        assert!(result::unwrap(strptime(\"PST\", \"%Z\")).tm_zone ==\n+        assert!(strptime(\"PST\", \"%Z\").unwrap().tm_zone ==\n             ~\"\");\n-        assert!(result::unwrap(strptime(\"-0000\", \"%z\")).tm_gmtoff ==\n+        assert!(strptime(\"-0000\", \"%z\").unwrap().tm_gmtoff ==\n             0);\n-        assert!(result::unwrap(strptime(\"-0800\", \"%z\")).tm_gmtoff ==\n+        assert!(strptime(\"-0800\", \"%z\").unwrap().tm_gmtoff ==\n             0);\n         assert!(test(\"%\", \"%%\"));\n "}, {"sha": "a203fccfb5f3c7520ff3dbff0a78bccc5193e54a", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -62,9 +62,7 @@ fn git_repo_pkg() -> PkgId {\n }\n \n fn writeFile(file_path: &Path, contents: &str) {\n-    let out: @io::Writer =\n-        result::unwrap(io::file_writer(file_path,\n-                                       [io::Create, io::Truncate]));\n+    let out = io::file_writer(file_path, [io::Create, io::Truncate]).unwrap();\n     out.write_line(contents);\n }\n "}, {"sha": "f43b3e73113056ed9f1f5d8f1fa546b7bc568ab8", "filename": "src/libstd/result.rs", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -31,27 +31,21 @@ pub enum Result<T, U> {\n     Err(U)\n }\n \n-/**\n- * Convert to the `either` type\n- *\n- * `ok` result variants are converted to `either::right` variants, `err`\n- * result variants are converted to `either::left`.\n- */\n-#[inline]\n-pub fn to_either<T:Clone,U:Clone>(res: &Result<U, T>)\n-    -> Either<T, U> {\n-    match *res {\n-      Ok(ref res) => either::Right((*res).clone()),\n-      Err(ref fail_) => either::Left((*fail_).clone())\n+impl<T, E> Result<T, E> {\n+    /**\n+     * Convert to the `either` type\n+     *\n+     * `ok` result variants are converted to `either::right` variants, `err`\n+     * result variants are converted to `either::left`.\n+     */\n+    #[inline]\n+    pub fn to_either(self)-> Either<E, T>{\n+        match self {\n+            Ok(t) => either::Right(t),\n+            Err(e) => either::Left(e),\n+        }\n     }\n-}\n-\n-\n-\n \n-\n-\n-impl<T, E> Result<T, E> {\n     /**\n      * Get a reference to the value out of a successful result\n      *\n@@ -84,7 +78,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /**\n-     * Call a function based on a previous result\n+     * Call a method based on a previous result\n      *\n      * If `*self` is `ok` then the value is extracted and passed to `op` whereupon\n      * `op`s result is returned. if `*self` is `err` then it is immediately\n@@ -106,7 +100,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /**\n-     * Call a function based on a previous result\n+     * Call a method based on a previous result\n      *\n      * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n      * `op`s result is returned. if `*self` is `ok` then it is immediately returned.\n@@ -140,7 +134,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /**\n-     * Call a function based on a previous result\n+     * Call a method based on a previous result\n      *\n      * If `self` is `ok` then the value is extracted and passed to `op` whereupon\n      * `op`s result is returned. if `self` is `err` then it is immediately\n@@ -149,9 +143,9 @@ impl<T, E> Result<T, E> {\n      *\n      * Example:\n      *\n-     *     let res = read_file(file).chain(op) { |buf|\n+     *     let res = do read_file(file).chain |buf| {\n      *         ok(parse_bytes(buf))\n-     *     }\n+     *     };\n      */\n     #[inline]\n     pub fn chain<U>(self, op: &fn(T) -> Result<U,E>) -> Result<U,E> {\n@@ -162,7 +156,7 @@ impl<T, E> Result<T, E> {\n     }\n \n     /**\n-    * Call a function based on a previous result\n+    * Call a method based on a previous result\n     *\n     * If `self` is `err` then the value is extracted and passed to `op`\n     * whereupon `op`s result is returned. if `self` is `ok` then it is\n@@ -195,13 +189,13 @@ impl<T:Clone,E> Result<T, E> {\n     }\n \n     /**\n-    * Call a function based on a previous result\n-    *\n-    * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n-    * `op`s result is wrapped in an `err` and returned. if `*self` is `ok` then it\n-    * is immediately returned.  This function can be used to pass through a\n-    * successful result while handling an error.\n-    */\n+     * Call a method based on a previous result\n+     *\n+     * If `*self` is `err` then the value is extracted and passed to `op` whereupon\n+     * `op`s result is wrapped in an `err` and returned. if `*self` is `ok` then it\n+     * is immediately returned.  This function can be used to pass through a\n+     * successful result while handling an error.\n+     */\n     #[inline]\n     pub fn map_err<F:Clone>(&self, op: &fn(&E) -> F) -> Result<T,F> {\n         match *self {\n@@ -228,19 +222,19 @@ impl<T, E:Clone> Result<T, E> {\n     }\n \n     /**\n-    * Call a function based on a previous result\n-    *\n-    * If `res` is `ok` then the value is extracted and passed to `op` whereupon\n-    * `op`s result is wrapped in `ok` and returned. if `res` is `err` then it is\n-    * immediately returned.  This function can be used to compose the results of\n-    * two functions.\n-    *\n-    * Example:\n-    *\n-    *     let res = map(read_file(file)) { |buf|\n-    *         parse_bytes(buf)\n-    *     }\n-    */\n+     * Call a method based on a previous result\n+     *\n+     * If `res` is `ok` then the value is extracted and passed to `op` whereupon\n+     * `op`s result is wrapped in `ok` and returned. if `res` is `err` then it is\n+     * immediately returned.  This function can be used to compose the results of\n+     * two functions.\n+     *\n+     * Example:\n+     *\n+     *     let res = read_file(file).map() { |buf|\n+     *         parse_bytes(buf)\n+     *     });\n+     */\n     #[inline]\n     pub fn map<U:Clone>(&self, op: &fn(&T) -> U) -> Result<U,E> {\n         match *self {\n@@ -351,6 +345,7 @@ pub fn iter_vec2<S,T,U>(ss: &[S], ts: &[T],\n mod tests {\n     use result::{Err, Ok, Result};\n     use result;\n+    use either;\n \n     pub fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n \n@@ -408,4 +403,13 @@ mod tests {\n         let foo: Result<int, ()> = Ok(100);\n         assert_eq!(*foo.get_ref(), 100);\n     }\n+\n+    #[test]\n+    pub fn test_to_either() {\n+        let r: Result<int, ()> = Ok(100);\n+        let err: Result<(), int> = Err(404);\n+\n+        assert_eq!(r.to_either(), either::Right(100));\n+        assert_eq!(err.to_either(), either::Left(404));\n+    }\n }"}, {"sha": "754181f9cd848ba7f83cb0acb72db6d629548b6f", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -75,7 +75,7 @@ fn read_line() {\n         .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n \n     for int::range(0, 3) |_i| {\n-        let reader = result::unwrap(io::file_reader(&path));\n+        let reader = io::file_reader(&path).unwrap();\n         while !reader.eof() {\n             reader.read_line();\n         }"}, {"sha": "4597212b390eb90cc6bf72a22e2140f401dec1e9", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -124,8 +124,8 @@ fn main() {\n     };\n \n     let writer = if os::getenv(\"RUST_BENCH\").is_some() {\n-        result::unwrap(io::file_writer(&Path(\"./shootout-fasta.data\"),\n-                                       [io::Truncate, io::Create]))\n+        io::file_writer(&Path(\"./shootout-fasta.data\"),\n+                        [io::Truncate, io::Create]).unwrap()\n     } else {\n         io::stdout()\n     };"}, {"sha": "8b4664ac0606e94dbb049100f9501b4b58f49d2f", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -161,7 +161,7 @@ fn main() {\n        // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n-       result::unwrap(io::file_reader(&path))\n+       io::file_reader(&path).unwrap()\n    } else {\n       io::stdin()\n    };"}, {"sha": "6e5005fe03dc12aa003db7d3b9c8c5910ad6a6e2", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -13,5 +13,5 @@\n use std::result;\n \n fn main() {\n-  error!(result::get(&result::Err::<int,~str>(~\"kitty\")));\n+  error!(result::Err::<int,~str>(~\"kitty\").get());\n }"}, {"sha": "45375efe9d630a0d7e5e6a04d9fd867e7c66954c", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -16,7 +16,7 @@ use std::task;\n fn adder(x: @int, y: @int) -> int { return *x + *y; }\n fn failer() -> @int { fail!(); }\n pub fn main() {\n-    assert!(result::is_err(&task::try(|| {\n+    assert!(task::try(|| {\n         adder(@2, failer()); ()\n-    })));\n+    }).is_err());\n }"}, {"sha": "c4178961d9e6946577d558a0018cdf8df04ca640", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a68c719f4a32123fbd428fe280f41af47d00fea/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=2a68c719f4a32123fbd428fe280f41af47d00fea", "patch": "@@ -11,14 +11,13 @@\n \n extern mod extra;\n \n-use std::result;\n use extra::json;\n use extra::serialize::Decodable;\n \n trait JD : Decodable<json::Decoder> { }\n \n fn exec<T: JD>() {\n-    let doc = result::unwrap(json::from_str(\"\"));\n+    let doc = json::from_str(\"\").unwrap();\n     let mut decoder = json::Decoder(doc);\n     let _v: T = Decodable::decode(&mut decoder);\n     fail!()"}]}