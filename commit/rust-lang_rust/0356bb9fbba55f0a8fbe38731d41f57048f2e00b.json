{"sha": "0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTZiYjlmYmJhNTVmMGE4ZmJlMzg3MzFkNDFmNTcwNDhmMmUwMGI=", "commit": {"author": {"name": "Nathaniel McCallum", "email": "npmccallum@redhat.com", "date": "2020-08-11T18:07:08Z"}, "committer": {"name": "Nathaniel McCallum", "email": "npmccallum@redhat.com", "date": "2020-08-11T19:00:23Z"}, "message": "Revert \"Suppress debuginfo on naked function arguments\"\n\nThis reverts commit 25670749b44a9c7a4cfd3fbf780bbe3344a9a6c5.\n\nThis commit does not actually fix the problem. It merely removes the name of\nthe argument from the LLVM output. Even without the name, Rust codegen still\nspills the (nameless) variable onto the stack which is the root cause. The root\ncause is solved in the next commit.", "tree": {"sha": "c1a6bb9840d5c0a466e3a8676843d080a62a0c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a6bb9840d5c0a466e3a8676843d080a62a0c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "html_url": "https://github.com/rust-lang/rust/commit/0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0356bb9fbba55f0a8fbe38731d41f57048f2e00b/comments", "author": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe7c5ce705896d4e22bf6096590bc1f17993b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "html_url": "https://github.com/rust-lang/rust/commit/cbe7c5ce705896d4e22bf6096590bc1f17993b78"}], "stats": {"total": 58, "additions": 3, "deletions": 55}, "files": [{"sha": "215a0c7dfdf2712dbb1c6ad3909775e41d35b688", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0356bb9fbba55f0a8fbe38731d41f57048f2e00b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0356bb9fbba55f0a8fbe38731d41f57048f2e00b/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::lang_items;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n@@ -798,22 +797,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         argument_scope: region::Scope,\n         ast_body: &'tcx hir::Expr<'tcx>,\n     ) -> BlockAnd<()> {\n-        let tcx = self.hir.tcx();\n-        let attrs = tcx.codegen_fn_attrs(fn_def_id);\n-        let naked = attrs.flags.contains(CodegenFnAttrFlags::NAKED);\n-\n         // Allocate locals for the function arguments\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n             let source_info =\n                 SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n-            // Emit function argument debuginfo only for non-naked functions.\n-            // See: https://github.com/rust-lang/rust/issues/42779\n-            if naked {\n-                continue;\n-            }\n-\n             // If this is a simple binding pattern, give debuginfo a nice name.\n             if let Some(arg) = arg_opt {\n                 if let Some(ident) = arg.pat.simple_ident() {\n@@ -826,6 +815,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n+        let tcx = self.hir.tcx();\n         let tcx_hir = tcx.hir();\n         let hir_typeck_results = self.hir.typeck_results();\n "}, {"sha": "493c1b9f0ba6b9a2655d506a4c62b551a21b4fe1", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0356bb9fbba55f0a8fbe38731d41f57048f2e00b/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0356bb9fbba55f0a8fbe38731d41f57048f2e00b/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=0356bb9fbba55f0a8fbe38731d41f57048f2e00b", "patch": "@@ -18,7 +18,7 @@ pub fn naked_empty() {\n // CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n@@ -39,7 +39,7 @@ pub fn naked_with_return() -> isize {\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n     a"}, {"sha": "5f3a1eb44e4e55179eeb49b90ae3182d6198aed7", "filename": "src/test/debuginfo/function-arguments-naked.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -1,42 +0,0 @@\n-// min-lldb-version: 310\n-\n-// We have to ignore android because of this issue:\n-// https://github.com/rust-lang/rust/issues/74847\n-// ignore-android\n-//\n-// We need to use inline assembly, so just use one platform\n-// only-x86_64\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:info args\n-// gdb-check:No arguments.\n-// gdb-command:continue\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:frame variable\n-// lldbg-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldbr-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldb-command:continue\n-\n-\n-#![feature(asm)]\n-#![feature(naked_functions)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-fn main() {\n-    naked(111, 222);\n-}\n-\n-#[naked]\n-extern \"C\" fn naked(x: usize, y: usize) {\n-    unsafe { asm!(\"ret\"); } // #break\n-}"}]}