{"sha": "59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "node_id": "C_kwDOAAsO6NoAKDU5ZTdhMzA4ZTQwZmJjNmIwOTAxYzlhOGVlOGVkNTFiMTdmOWU3NzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-11T19:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-11T19:50:41Z"}, "message": "Auto merge of #101299 - saethlin:vecdeque-drain-drop, r=thomcc\n\nRemove &[T] from vec_deque::Drain\n\nFixes https://github.com/rust-lang/rust/issues/60076\n\nI don't know what the right approach is here. There were a few suggestions in the issue, and they all seem a bit thorny to implement. So I just picked one that was kind of familiar.", "tree": {"sha": "752c20c2cd7890d649ed99a64b8df2227c8b34fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752c20c2cd7890d649ed99a64b8df2227c8b34fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "html_url": "https://github.com/rust-lang/rust/commit/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d56e340472882fa673d4b98d0802b9a799879d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d56e340472882fa673d4b98d0802b9a799879d0", "html_url": "https://github.com/rust-lang/rust/commit/0d56e340472882fa673d4b98d0802b9a799879d0"}, {"sha": "54684c438f83f84c01024fb44fdfdba54c88b7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/54684c438f83f84c01024fb44fdfdba54c88b7da", "html_url": "https://github.com/rust-lang/rust/commit/54684c438f83f84c01024fb44fdfdba54c88b7da"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "41baa7102cdcedb2866ca80c913b81781ef6de3f", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "patch": "@@ -1,10 +1,12 @@\n+use core::fmt;\n use core::iter::FusedIterator;\n+use core::marker::PhantomData;\n+use core::mem::{self, MaybeUninit};\n use core::ptr::{self, NonNull};\n-use core::{fmt, mem};\n \n use crate::alloc::{Allocator, Global};\n \n-use super::{count, Iter, VecDeque};\n+use super::{count, wrap_index, VecDeque};\n \n /// A draining iterator over the elements of a `VecDeque`.\n ///\n@@ -20,18 +22,24 @@ pub struct Drain<\n > {\n     after_tail: usize,\n     after_head: usize,\n-    iter: Iter<'a, T>,\n+    ring: NonNull<[T]>,\n+    tail: usize,\n+    head: usize,\n     deque: NonNull<VecDeque<T, A>>,\n+    _phantom: PhantomData<&'a T>,\n }\n \n impl<'a, T, A: Allocator> Drain<'a, T, A> {\n     pub(super) unsafe fn new(\n         after_tail: usize,\n         after_head: usize,\n-        iter: Iter<'a, T>,\n+        ring: &'a [MaybeUninit<T>],\n+        tail: usize,\n+        head: usize,\n         deque: NonNull<VecDeque<T, A>>,\n     ) -> Self {\n-        Drain { after_tail, after_head, iter, deque }\n+        let ring = unsafe { NonNull::new_unchecked(ring as *const [MaybeUninit<T>] as *mut _) };\n+        Drain { after_tail, after_head, ring, tail, head, deque, _phantom: PhantomData }\n     }\n }\n \n@@ -41,7 +49,9 @@ impl<T: fmt::Debug, A: Allocator> fmt::Debug for Drain<'_, T, A> {\n         f.debug_tuple(\"Drain\")\n             .field(&self.after_tail)\n             .field(&self.after_head)\n-            .field(&self.iter)\n+            .field(&self.ring)\n+            .field(&self.tail)\n+            .field(&self.head)\n             .finish()\n     }\n }\n@@ -118,20 +128,36 @@ impl<T, A: Allocator> Iterator for Drain<'_, T, A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        self.iter.next().map(|elt| unsafe { ptr::read(elt) })\n+        if self.tail == self.head {\n+            return None;\n+        }\n+        let tail = self.tail;\n+        self.tail = wrap_index(self.tail.wrapping_add(1), self.ring.len());\n+        // Safety:\n+        // - `self.tail` in a ring buffer is always a valid index.\n+        // - `self.head` and `self.tail` equality is checked above.\n+        unsafe { Some(ptr::read(self.ring.as_ptr().get_unchecked_mut(tail))) }\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.iter.size_hint()\n+        let len = count(self.tail, self.head, self.ring.len());\n+        (len, Some(len))\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<T, A: Allocator> DoubleEndedIterator for Drain<'_, T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n-        self.iter.next_back().map(|elt| unsafe { ptr::read(elt) })\n+        if self.tail == self.head {\n+            return None;\n+        }\n+        self.head = wrap_index(self.head.wrapping_sub(1), self.ring.len());\n+        // Safety:\n+        // - `self.head` in a ring buffer is always a valid index.\n+        // - `self.head` and `self.tail` equality is checked above.\n+        unsafe { Some(ptr::read(self.ring.as_ptr().get_unchecked_mut(self.head))) }\n     }\n }\n "}, {"sha": "e3f4deb0875b9e86fe9a122ef68aa3762df7ebe9", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=59e7a308e40fbc6b0901c9a8ee8ed51b17f9e772", "patch": "@@ -1334,9 +1334,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n             // it.  We do not write to `self` nor reborrow to a mutable reference.\n             // Hence the raw pointer we created above, for `deque`, remains valid.\n             let ring = self.buffer_as_slice();\n-            let iter = Iter::new(ring, drain_tail, drain_head);\n \n-            Drain::new(drain_head, head, iter, deque)\n+            Drain::new(drain_head, head, ring, drain_tail, drain_head, deque)\n         }\n     }\n "}]}