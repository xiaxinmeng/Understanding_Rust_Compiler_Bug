{"sha": "c4318502bca669f399b7428d3e9a180b1de041bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MzE4NTAyYmNhNjY5ZjM5OWI3NDI4ZDNlOWExODBiMWRlMDQxYmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-18T05:06:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-18T06:33:20Z"}, "message": "Avoid pointing at multiple places on return type error", "tree": {"sha": "707a9d3ffc0279536b334085f78a9384fe34515f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707a9d3ffc0279536b334085f78a9384fe34515f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4318502bca669f399b7428d3e9a180b1de041bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4318502bca669f399b7428d3e9a180b1de041bc", "html_url": "https://github.com/rust-lang/rust/commit/c4318502bca669f399b7428d3e9a180b1de041bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4318502bca669f399b7428d3e9a180b1de041bc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19255dc2e670085a7bf6864feccb323077309325", "url": "https://api.github.com/repos/rust-lang/rust/commits/19255dc2e670085a7bf6864feccb323077309325", "html_url": "https://github.com/rust-lang/rust/commit/19255dc2e670085a7bf6864feccb323077309325"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "f040781e56f7c0df541f737ab299b91f25878e4d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c4318502bca669f399b7428d3e9a180b1de041bc", "patch": "@@ -1216,7 +1216,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                                       \"supposed to be part of a block tail expression, but the \\\n                                        expression is empty\");\n                         });\n-                        fcx.suggest_mismatched_types_on_tail(\n+                        let pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n                             &mut db,\n                             expr,\n                             expected,\n@@ -1244,7 +1244,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         // as prior return coercions would not be relevant (#57664).\n                         let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n                         let parent = fcx.tcx.hir().get(fcx.tcx.hir().get_parent_node(parent_id));\n-                        if fcx.get_node_fn_decl(parent).is_some() {\n+                        if fcx.get_node_fn_decl(parent).is_some() && !pointing_at_return_type {\n                             if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n                                 db.span_label(*sp, reason_label);\n                             }"}, {"sha": "ce876a799644a00ca99b7d552c4802f9b8eacc0d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c4318502bca669f399b7428d3e9a180b1de041bc", "patch": "@@ -5089,12 +5089,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         found: Ty<'tcx>,\n         cause_span: Span,\n         blk_id: ast::NodeId,\n-    ) {\n+    ) -> bool {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n+        let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n-            self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);\n+            pointing_at_return_type = self.suggest_missing_return_type(\n+                err, &fn_decl, expected, found, can_suggest);\n         }\n         self.suggest_ref_or_into(err, expression, expected, found);\n+        pointing_at_return_type\n     }\n \n     pub fn suggest_ref_or_into(\n@@ -5193,12 +5196,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// This routine checks if the return type is left as default, the method is not part of an\n     /// `impl` block and that it isn't the `main` method. If so, it suggests setting the return\n     /// type.\n-    fn suggest_missing_return_type(&self,\n-                                   err: &mut DiagnosticBuilder<'tcx>,\n-                                   fn_decl: &hir::FnDecl,\n-                                   expected: Ty<'tcx>,\n-                                   found: Ty<'tcx>,\n-                                   can_suggest: bool) {\n+    fn suggest_missing_return_type(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        fn_decl: &hir::FnDecl,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        can_suggest: bool,\n+    ) -> bool {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n         match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n@@ -5208,16 +5213,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     \"try adding a return type\",\n                     format!(\"-> {} \", self.resolve_type_vars_with_obligations(found)),\n                     Applicability::MachineApplicable);\n+                true\n             }\n             (&hir::FunctionRetTy::DefaultReturn(span), false, true, true) => {\n                 err.span_label(span, \"possibly return type missing here?\");\n+                true\n             }\n             (&hir::FunctionRetTy::DefaultReturn(span), _, false, true) => {\n                 // `fn main()` must return `()`, do not suggest changing return type\n                 err.span_label(span, \"expected `()` because of default return type\");\n+                true\n             }\n             // expectation was caused by something else, not the default return\n-            (&hir::FunctionRetTy::DefaultReturn(_), _, _, false) => {}\n+            (&hir::FunctionRetTy::DefaultReturn(_), _, _, false) => false,\n             (&hir::FunctionRetTy::Return(ref ty), _, _, _) => {\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n@@ -5229,7 +5237,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if ty.sty == expected.sty {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\",\n                                                expected));\n+                    return true;\n                 }\n+                false\n             }\n         }\n     }"}, {"sha": "c399650d3258b950db82ff31fe48c18475880905", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=c4318502bca669f399b7428d3e9a180b1de041bc", "patch": "@@ -15,10 +15,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2) //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^-^\n-   |     |                 |\n-   |     |                 expected because of this statement\n-   |     expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n    |\n    = note: expected type `isize`\n               found type `(!, !)`"}, {"sha": "45482447ebe2c02ad2b5ddf4eae831707c7a23ff", "filename": "src/test/ui/issues/issue-10176.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4318502bca669f399b7428d3e9a180b1de041bc/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr?ref=c4318502bca669f399b7428d3e9a180b1de041bc", "patch": "@@ -4,10 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^-^\n-   |     |                 |\n-   |     |                 expected because of this statement\n-   |     expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n    |\n    = note: expected type `isize`\n               found type `(!, !)`"}]}