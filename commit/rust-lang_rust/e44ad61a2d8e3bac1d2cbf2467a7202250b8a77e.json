{"sha": "e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NGFkNjFhMmQ4ZTNiYWMxZDJjYmYyNDY3YTcyMDIyNTBiOGE3N2U=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-04-30T08:55:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-06-03T11:46:19Z"}, "message": "implement #[panic_implementation]", "tree": {"sha": "e9b2eede0e5f2703640bb76f3e7f1b1c8e23fbd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b2eede0e5f2703640bb76f3e7f1b1c8e23fbd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "html_url": "https://github.com/rust-lang/rust/commit/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3575be60eab140e69e5a75fe5c3b4119c2a17179", "url": "https://api.github.com/repos/rust-lang/rust/commits/3575be60eab140e69e5a75fe5c3b4119c2a17179", "html_url": "https://github.com/rust-lang/rust/commit/3575be60eab140e69e5a75fe5c3b4119c2a17179"}], "stats": {"total": 397, "additions": 379, "deletions": 18}, "files": [{"sha": "f98626d939d1006196df80f7a5d5ce57c4c9e0c8", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n /// Entry point of thread panic, for details, see std::macros\n+#[cfg(stage0)]\n #[macro_export]\n #[allow_internal_unstable]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -28,6 +29,27 @@ macro_rules! panic {\n     });\n }\n \n+/// Entry point of thread panic, for details, see std::macros\n+#[cfg(not(stage0))]\n+#[macro_export]\n+#[allow_internal_unstable]\n+#[stable(feature = \"core\", since = \"1.6.0\")]\n+macro_rules! panic {\n+    () => (\n+        panic!(\"explicit panic\")\n+    );\n+    ($msg:expr) => ({\n+        $crate::panicking::panic_payload($msg, &(file!(), line!(), __rust_unstable_column!()))\n+    });\n+    ($msg:expr,) => (\n+        panic!($msg)\n+    );\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n+                                     &(file!(), line!(), __rust_unstable_column!()))\n+    });\n+}\n+\n /// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their"}, {"sha": "37ae05309af1dca6eb75cf6f2cfa0fca60fb6e16", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -35,6 +35,7 @@ use fmt;\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[cfg_attr(not(stage0), lang = \"panic_info\")]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n@@ -53,7 +54,8 @@ impl<'a> PanicInfo<'a> {\n     pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n-        PanicInfo { payload: &(), location, message }\n+        struct NoPayload;\n+        PanicInfo { payload: &NoPayload, location, message }\n     }\n \n     #[doc(hidden)]\n@@ -121,7 +123,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook.\n+        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "1470a01e0e6dd922601e52bbef272231c8ce939f", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -36,7 +36,33 @@\n                       and related macros\",\n             issue = \"0\")]\n \n+#[cfg(not(stage0))]\n+use any::Any;\n use fmt;\n+#[cfg(not(stage0))]\n+use panic::{Location, PanicInfo};\n+\n+#[cfg(not(stage0))]\n+#[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+extern \"C\" {\n+    #[lang = \"panic_impl\"]\n+    fn panic_impl(pi: &PanicInfo) -> !;\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)]\n+pub fn panic_payload<M>(msg: M, file_line_col: &(&'static str, u32, u32)) -> !\n+where\n+    M: Any + Send,\n+{\n+    let (file, line, col) = *file_line_col;\n+    let mut pi = PanicInfo::internal_constructor(\n+        None,\n+        Location::internal_constructor(file, line, col),\n+    );\n+    pi.set_payload(&msg);\n+    unsafe { panic_impl(&pi) }\n+}\n \n #[cold] #[inline(never)] // this is the slow path, always\n #[lang = \"panic\"]\n@@ -59,6 +85,7 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n+#[cfg(stage0)]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     #[allow(improper_ctypes)]\n@@ -70,3 +97,16 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     let (file, line, col) = *file_line_col;\n     unsafe { panic_impl(fmt, file, line, col) }\n }\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)]\n+pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n+    struct NoPayload;\n+\n+    let (file, line, col) = *file_line_col;\n+    let pi = PanicInfo::internal_constructor(\n+        Some(&fmt),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    unsafe { panic_impl(&pi) }\n+}"}, {"sha": "7ebc0d4a4de5a4a358566bb002ad670eeb730ff0", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -284,7 +284,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt,\n                                     id: ast::NodeId,\n                                     attrs: &[ast::Attribute]) -> bool {\n-    if attr::contains_name(attrs, \"lang\") {\n+    if attr::contains_name(attrs, \"lang\") || attr::contains_name(attrs, \"panic_implementation\") {\n         return true;\n     }\n "}, {"sha": "fe676919a7d14d23aa08e0050e01869bcfdfb7e2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -185,6 +185,8 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n             if let Some(value) = attribute.value_str() {\n                 return Some((value, attribute.span));\n             }\n+        } else if attribute.check_name(\"panic_implementation\") {\n+            return Some((Symbol::intern(\"panic_impl\"), attribute.span))\n         }\n     }\n \n@@ -299,7 +301,8 @@ language_item_table! {\n     // lang item, but do not have it defined.\n     PanicFnLangItem,                 \"panic\",                   panic_fn;\n     PanicBoundsCheckFnLangItem,      \"panic_bounds_check\",      panic_bounds_check_fn;\n-    PanicFmtLangItem,                \"panic_fmt\",               panic_fmt;\n+    PanicInfoLangItem,               \"panic_info\",              panic_info;\n+    PanicImplLangItem,               \"panic_impl\",              panic_impl;\n \n     ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n     BoxFreeFnLangItem,               \"box_free\",                box_free_fn;"}, {"sha": "3c2ea047218a7bfb16d119383a0b23af10c24a94", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n ) }\n \n weak_lang_items! {\n-    panic_fmt,          PanicFmtLangItem,           rust_begin_unwind;\n+    panic_impl,         PanicImplLangItem,          rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n     eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n     oom,                OomLangItem,                rust_oom;"}, {"sha": "5c33eb5f0af12427ab0d104cb0a13349fde2fc4f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -96,7 +96,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n-use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n+use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::maps::Providers;\n@@ -1129,6 +1129,48 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n         }\n     }\n \n+    // Check that a function marked as `#[panic_implementation]` has signature `fn(&PanicInfo) -> !`\n+    if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n+        if panic_impl_did == fn_hir_id.owner_def_id() {\n+            if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n+                if ret_ty.sty != ty::TyNever {\n+                    fcx.tcx.sess.span_err(\n+                        decl.output.span(),\n+                        \"return type should be `!`\",\n+                    );\n+                }\n+\n+                let inputs = fn_sig.inputs();\n+                let span = fcx.tcx.hir.span(fn_id);\n+                if inputs.len() == 1 {\n+                    let arg_is_panic_info = match inputs[0].sty {\n+                        ty::TyRef(region, ty::TypeAndMut { ty, mutbl }) => match ty.sty {\n+                            ty::TyAdt(ref adt, _) => {\n+                                adt.did == panic_info_did &&\n+                                    mutbl == hir::Mutability::MutImmutable &&\n+                                    *region != RegionKind::ReStatic\n+                            },\n+                            _ => false,\n+                        },\n+                        _ => false,\n+                    };\n+\n+                    if !arg_is_panic_info {\n+                        fcx.tcx.sess.span_err(\n+                            decl.inputs[0].span,\n+                            \"argument should be `&PanicInfo`\",\n+                        );\n+                    }\n+                } else {\n+                    fcx.tcx.sess.span_err(span, \"function should have one argument\");\n+                }\n+            } else {\n+                fcx.tcx.sess.err(\"language item required, but not found: `panic_info`\");\n+            }\n+        }\n+\n+    }\n+\n     (fcx, gen_ty)\n }\n "}, {"sha": "c576245edb755c1d271fbf04f431951efe50a265", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -317,6 +317,8 @@\n #![cfg_attr(windows, feature(used))]\n #![feature(doc_alias)]\n #![feature(float_internals)]\n+#![feature(panic_info_message)]\n+#![cfg_attr(not(stage0), feature(panic_implementation))]\n \n #![default_lib_allocator]\n "}, {"sha": "6bb098310de22d8f99bb6b872b02cd513758cdef", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -186,7 +186,7 @@ fn default_hook(info: &PanicInfo) {\n \n     let location = info.location().unwrap();  // The current implementation always returns Some\n \n-    let msg = match info.payload().downcast_ref::<&'static str>() {\n+    let msg = match info.payload().downcast_ref::<&str>() {\n         Some(s) => *s,\n         None => match info.payload().downcast_ref::<String>() {\n             Some(s) => &s[..],\n@@ -319,6 +319,7 @@ pub fn panicking() -> bool {\n \n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n+#[cfg(stage0)]\n #[lang = \"panic_fmt\"]\n #[unwind(allowed)]\n pub extern fn rust_begin_panic(msg: fmt::Arguments,\n@@ -328,12 +329,22 @@ pub extern fn rust_begin_panic(msg: fmt::Arguments,\n     begin_panic_fmt(&msg, &(file, line, col))\n }\n \n+/// Entry point of panic from the libcore crate.\n+#[cfg(not(test))]\n+#[cfg(not(stage0))]\n+#[panic_implementation]\n+#[unwind(allowed)]\n+pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n+    continue_panic_fmt(&info)\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n+#[cfg(stage0)]\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n@@ -381,12 +392,92 @@ pub fn begin_panic_fmt(msg: &fmt::Arguments,\n     }\n }\n \n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[cfg(not(stage0))]\n+#[unstable(feature = \"libstd_sys_internals\",\n+           reason = \"used by the panic! macro\",\n+           issue = \"0\")]\n+#[inline(never)] #[cold]\n+pub fn begin_panic_fmt(msg: &fmt::Arguments,\n+                       file_line_col: &(&'static str, u32, u32)) -> ! {\n+    let (file, line, col) = *file_line_col;\n+    let info = PanicInfo::internal_constructor(\n+        Some(msg),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    continue_panic_fmt(&info)\n+}\n+\n+#[cfg(not(stage0))]\n+fn continue_panic_fmt(info: &PanicInfo) -> ! {\n+    use fmt::Write;\n+\n+    // We do two allocations here, unfortunately. But (a) they're\n+    // required with the current scheme, and (b) we don't handle\n+    // panic + OOM properly anyway (see comment in begin_panic\n+    // below).\n+\n+    let loc = info.location().unwrap(); // The current implementation always returns Some\n+    let file_line_col = (loc.file(), loc.line(), loc.column());\n+    rust_panic_with_hook(\n+        &mut PanicPayload::new(info.payload(), info.message()),\n+        info.message(),\n+        &file_line_col);\n+\n+    struct PanicPayload<'a> {\n+        payload: &'a (Any + Send),\n+        msg: Option<&'a fmt::Arguments<'a>>,\n+        string: Option<String>,\n+    }\n+\n+    impl<'a> PanicPayload<'a> {\n+        fn new(payload: &'a (Any + Send), msg: Option<&'a fmt::Arguments<'a>>) -> PanicPayload<'a> {\n+            PanicPayload { payload, msg, string: None }\n+        }\n+\n+\n+        fn fill(&mut self) -> Option<&mut String> {\n+            if let Some(msg) = self.msg.take() {\n+                Some(self.string.get_or_insert_with(|| {\n+                    let mut s = String::new();\n+                    drop(s.write_fmt(*msg));\n+                    s\n+                }))\n+            } else {\n+                None\n+            }\n+        }\n+    }\n+\n+    unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n+        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+            if let Some(string) = self.fill() {\n+                let contents = mem::replace(string, String::new());\n+                Box::into_raw(Box::new(contents))\n+            } else {\n+                // We can't go from &(Any+Send) to Box<Any+Send> so the payload is lost here\n+                struct NoPayload;\n+                Box::into_raw(Box::new(NoPayload))\n+            }\n+        }\n+\n+        fn get(&mut self) -> &(Any + Send) {\n+            self.payload\n+        }\n+    }\n+}\n+\n /// This is the entry point of panicking for panic!() and assert!().\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u32)) -> ! {\n+pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&str, u32, u32)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n     // but then again we're not really ready for panic on OOM anyway. If\n@@ -431,7 +522,7 @@ pub fn begin_panic<M: Any + Send>(msg: M, file_line_col: &(&'static str, u32, u3\n /// abort or unwind.\n fn rust_panic_with_hook(payload: &mut BoxMeUp,\n                         message: Option<&fmt::Arguments>,\n-                        file_line_col: &(&'static str, u32, u32)) -> ! {\n+                        file_line_col: &(&str, u32, u32)) -> ! {\n     let (file, line, col) = *file_line_col;\n \n     let panics = update_panic_count(1);"}, {"sha": "7349745fefea100b1b9b1c6de4739e7ee089dd49", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -475,6 +475,9 @@ declare_features! (\n \n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n+\n+    // #[panic_implementation]\n+    (active, panic_implementation, \"1.28.0\", Some(44489), None),\n );\n \n declare_features! (\n@@ -1069,6 +1072,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"attribute is currently unstable\",\n                                  cfg_fn!(wasm_custom_section))),\n \n+    // RFC 2070\n+    (\"panic_implementation\", Normal, Gated(Stability::Unstable,\n+                           \"panic_implementation\",\n+                           \"#[panic_implementation] is an unstable feature\",\n+                           cfg_fn!(panic_implementation))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "176aa7cca53576065e0044acb25ff7660be18536", "filename": "src/test/compile-fail/duplicate_entry_error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate_entry_error.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -14,9 +14,11 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() -> ! {\n-//~^ ERROR: duplicate lang item found: `panic_fmt`.\n+use std::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! {\n+//~^ ERROR: duplicate lang item found: `panic_impl`.\n     loop {}\n }\n "}, {"sha": "ae9fbc7b13bd53db338dfc94f6e316e40194f767", "filename": "src/test/compile-fail/feature-gate-panic-implementation.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-panic-implementation.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation] //~ ERROR #[panic_implementation] is an unstable feature (see issue #44489)\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}"}, {"sha": "1c2bf1573dcc1900e2f2becbc6396ccc58a016f0", "filename": "src/test/compile-fail/no_owned_box_lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_owned_box_lang_item.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -21,4 +21,4 @@ fn main() {\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"panic_impl\"] fn panic_impl() -> ! { loop {} }"}, {"sha": "fec11fdbd7ba13c247029efd2e81bbacffe88cb1", "filename": "src/test/compile-fail/panic-implementation-bad-signature-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-1.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> () //~ ERROR return type should be `!`\n+{\n+}"}, {"sha": "2a628c05699cc57cd4fea776f700686dccc0e9b4", "filename": "src/test/compile-fail/panic-implementation-bad-signature-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-2.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(\n+    info: &'static PanicInfo, //~ ERROR argument should be `&PanicInfo`\n+) -> !\n+{\n+    loop {}\n+}"}, {"sha": "29337025b707667924b002781b83114bc558031b", "filename": "src/test/compile-fail/panic-implementation-bad-signature-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-3.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic() -> ! { //~ ERROR function should have one argument\n+    loop {}\n+}"}, {"sha": "017113af409bb2870e798d8bd9c94bbce3a46a72", "filename": "src/test/compile-fail/panic-implementation-duplicate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-duplicate.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(lang_items)]\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic(info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"panic_impl\"]\n+fn panic2(info: &PanicInfo) -> ! { //~ ERROR duplicate lang item found: `panic_impl`.\n+    loop {}\n+}"}, {"sha": "597f44d98326dc6e441cb4ea81bcd76462f44cf4", "filename": "src/test/compile-fail/panic-implementation-requires-panic-info.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-requires-panic-info.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+// error-pattern: language item required, but not found: `panic_info`\n+\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![feature(panic_implementation)]\n+#![no_core]\n+#![no_main]\n+\n+#[panic_implementation]\n+fn panic() -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}"}, {"sha": "d9848a554aba5bbde1a5c0a0458e7d29c72e36c4", "filename": "src/test/compile-fail/panic-runtime/auxiliary/panic-runtime-lang-items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -15,8 +15,10 @@\n #![no_std]\n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n-fn panic_fmt() {}\n+use core::panic::PanicInfo;\n+\n+#[lang = \"panic_impl\"]\n+fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n #[lang = \"eh_personality\"]\n fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"]"}, {"sha": "7b988c3595f5eb123a90e1f299e1199d0c7030c0", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:weak-lang-items.rs\n-// error-pattern: language item required, but not found: `panic_fmt`\n+// error-pattern: language item required, but not found: `panic_impl`\n // error-pattern: language item required, but not found: `eh_personality`\n // ignore-wasm32-bare compiled with panic=abort, personality not required\n "}, {"sha": "8fbad7b3ff301c0acd32e4cff9c11de2ec973051", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(lang_items)]\n \n-#[lang = \"panic_fmt\"]\n+#[lang = \"panic_impl\"]\n struct Foo; //~ ERROR E0152\n \n fn main() {"}, {"sha": "c7f5f362efb28492ccadfc82b5102ba16bb82731", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=e44ad61a2d8e3bac1d2cbf2467a7202250b8a77e", "patch": "@@ -1,4 +1,4 @@\n-error[E0152]: duplicate lang item found: `panic_fmt`.\n+error[E0152]: duplicate lang item found: `panic_impl`.\n   --> $DIR/E0152.rs:14:1\n    |\n LL | struct Foo; //~ ERROR E0152"}]}