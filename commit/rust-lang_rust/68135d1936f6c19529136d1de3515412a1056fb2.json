{"sha": "68135d1936f6c19529136d1de3515412a1056fb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTM1ZDE5MzZmNmMxOTUyOTEzNmQxZGUzNTE1NDEyYTEwNTZmYjI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-31T18:26:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-31T18:26:48Z"}, "message": "Rollup merge of #47677 - etaoins:avoid-underflow-in-rennder-source-line, r=estebank\n\nAvoid underflow in render_source_line\n\nWhile testing rust-lang/rust#47655 I was able to make the compiler panic when it's compiled with debug assertions:\n\n```shell\n> rustc /dev/null --crate-type proc-macro\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.25.0-dev running on x86_64-apple-darwin\n\nnote: run with `RUST_BACKTRACE=1` for a backtrace\n\nthread 'rustc' panicked at 'attempt to subtract with overflow', librustc_errors/emitter.rs:287:49\n```\n\nWithout debug assertions the following warning is emitted:\n\n```shell\n> rustc /dev/null --crate-type proc-macro\n\nwarning: unused variable: `registrar`\n --> /dev/null:0:1\n  |\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_registrar` instead\n```\n\nThe panic is due to the unused variable warning being spanned to `/dev/null:0:1`. When `render_source_line` subtracts 1 from the line number to look up the source line it panics due to underflow. Without debug assertions this would wrap and cause us to return a blank string instead.\n\nFix by explicitly testing for 0 and exiting early. I'm unsure how to automatically test this now that rust-lang/rust#46655 has been approved.", "tree": {"sha": "04166e4d6a46e239987b0846c5603536b916951a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04166e4d6a46e239987b0846c5603536b916951a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68135d1936f6c19529136d1de3515412a1056fb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpyCroACgkQ/vbIBR0O\nATxb9BAAln2OXerG+Du5XchVyWOH1aM7aAPASksz7A89sidOQ66cbfrh7Scri3jO\nb4UmTXOp7Vp0RqAeag/lNEiZvhuJpjFjFF2lX0xcAA27pq5UAgsYhXXeDWzekJpF\nROdCOoJ8nYhQ3vdwwu9n4tCThSy3gHk0AtC9jOHpo3ZqP6bw8zA2ua33+clTqB1e\nTNdne1PcZacUvNq80dCRsIoJq/lplKs0oGApdG8vYvdWl+tJZ7Rpv/tk3+1G+6u8\nUCGRaqzPUPJs1/7DZ0AeH7jlKTZKEU6v9A3jI2+fnCMYFV0hHHxcuy14eHt34s6d\nKLoOnfe3GYfEVlKyFPlpj3ADOZZt72L5ViF5q/OQAECKSRzIim+PXM93LU0/ZprR\nj5yrqGqjlIT1cTDZ9UnxIeNx4l9Cji1RBwlP07FQaOdUiMbhV6bdFs4SoKRBRvAa\nAQ4+0psgho1K/Ywk8W7MTf7Vge3CtDDG6LH6w0H6aFVF7bgIul8qRxQa6B+GuKQh\nPIr+u2AMTyhg5CgXE3iwMIhrTT30VtJw+uFuYhnt9So01XkuRf4x0oBU3JakPTQw\nEbiWFPslikrePO8iEu/A0BGUQyucRILSjk1Joh375LdJ5A0UVj/2AXKEyl8jnwud\nIGq5VCko+ZFdrETatkM1jQIj6+skW2RETGnDoT9xqwRK2ExfMQA=\n=ntug\n-----END PGP SIGNATURE-----", "payload": "tree 04166e4d6a46e239987b0846c5603536b916951a\nparent 64fc9d2b9e7c64f8eff6c8464406d62cbf1ea6ac\nparent c6377f8e17cd7f3cf906397f3f48b522b0521471\nauthor kennytm <kennytm@gmail.com> 1517423208 +0800\ncommitter kennytm <kennytm@gmail.com> 1517423208 +0800\n\nRollup merge of #47677 - etaoins:avoid-underflow-in-rennder-source-line, r=estebank\n\nAvoid underflow in render_source_line\n\nWhile testing rust-lang/rust#47655 I was able to make the compiler panic when it's compiled with debug assertions:\n\n```shell\n> rustc /dev/null --crate-type proc-macro\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.25.0-dev running on x86_64-apple-darwin\n\nnote: run with `RUST_BACKTRACE=1` for a backtrace\n\nthread 'rustc' panicked at 'attempt to subtract with overflow', librustc_errors/emitter.rs:287:49\n```\n\nWithout debug assertions the following warning is emitted:\n\n```shell\n> rustc /dev/null --crate-type proc-macro\n\nwarning: unused variable: `registrar`\n --> /dev/null:0:1\n  |\n  |\n  = note: #[warn(unused_variables)] on by default\n  = note: to avoid this warning, consider using `_registrar` instead\n```\n\nThe panic is due to the unused variable warning being spanned to `/dev/null:0:1`. When `render_source_line` subtracts 1 from the line number to look up the source line it panics due to underflow. Without debug assertions this would wrap and cause us to return a blank string instead.\n\nFix by explicitly testing for 0 and exiting early. I'm unsure how to automatically test this now that rust-lang/rust#46655 has been approved.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68135d1936f6c19529136d1de3515412a1056fb2", "html_url": "https://github.com/rust-lang/rust/commit/68135d1936f6c19529136d1de3515412a1056fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68135d1936f6c19529136d1de3515412a1056fb2/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fc9d2b9e7c64f8eff6c8464406d62cbf1ea6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fc9d2b9e7c64f8eff6c8464406d62cbf1ea6ac", "html_url": "https://github.com/rust-lang/rust/commit/64fc9d2b9e7c64f8eff6c8464406d62cbf1ea6ac"}, {"sha": "c6377f8e17cd7f3cf906397f3f48b522b0521471", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6377f8e17cd7f3cf906397f3f48b522b0521471", "html_url": "https://github.com/rust-lang/rust/commit/c6377f8e17cd7f3cf906397f3f48b522b0521471"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "c4f256be96a19ca0e737717d3db9f48c5a291d1d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68135d1936f6c19529136d1de3515412a1056fb2/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68135d1936f6c19529136d1de3515412a1056fb2/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=68135d1936f6c19529136d1de3515412a1056fb2", "patch": "@@ -284,6 +284,10 @@ impl EmitterWriter {\n                           line: &Line,\n                           width_offset: usize,\n                           code_offset: usize) -> Vec<(usize, Style)> {\n+        if line.line_index == 0 {\n+            return Vec::new();\n+        }\n+\n         let source_string = match file.get_line(line.line_index - 1) {\n             Some(s) => s,\n             None => return Vec::new(),"}]}