{"sha": "25c1c635e5b7df5b651f587b1427751bfe463339", "node_id": "C_kwDOAAsO6NoAKDI1YzFjNjM1ZTViN2RmNWI2NTFmNTg3YjE0Mjc3NTFiZmU0NjMzMzk", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-01T21:12:03Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-09T08:33:36Z"}, "message": "Pass 128-bit C-style enum enumerator values to LLVM", "tree": {"sha": "3036885bab7a439cbde8cb2b18582acaa54bcbde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3036885bab7a439cbde8cb2b18582acaa54bcbde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c1c635e5b7df5b651f587b1427751bfe463339", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCY0KHYAAKCRCHkb11QZHr\n1g4eAP9S7n049G+UQ6JaurqaQ7mRUtOQZgDj4fZuArtlxniJ8wEAod17oQFa65zF\n+9v4yiim0f+N7L56pBfKbjA9J2AYNQA=\n=ElmK\n-----END PGP SIGNATURE-----", "payload": "tree 3036885bab7a439cbde8cb2b18582acaa54bcbde\nparent 24ac6a26bcf5be1ac841e7fe969bd992b3461f9d\nauthor beetrees <b@beetr.ee> 1664658723 +0100\ncommitter beetrees <b@beetr.ee> 1665304416 +0100\n\nPass 128-bit C-style enum enumerator values to LLVM\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c1c635e5b7df5b651f587b1427751bfe463339", "html_url": "https://github.com/rust-lang/rust/commit/25c1c635e5b7df5b651f587b1427751bfe463339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c1c635e5b7df5b651f587b1427751bfe463339/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ac6a26bcf5be1ac841e7fe969bd992b3461f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ac6a26bcf5be1ac841e7fe969bd992b3461f9d", "html_url": "https://github.com/rust-lang/rust/commit/24ac6a26bcf5be1ac841e7fe969bd992b3461f9d"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "53e8a291d1e8aa4d9a4cd90530b27ed0ad04edfa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=25c1c635e5b7df5b651f587b1427751bfe463339", "patch": "@@ -462,7 +462,7 @@ fn build_variant_names_type_di_node<'ll, 'tcx>(\n         cx,\n         \"VariantNames\",\n         variant_names_enum_base_type(cx),\n-        variants.map(|(variant_index, variant_name)| (variant_name, variant_index.as_u32() as u64)),\n+        variants.map(|(variant_index, variant_name)| (variant_name, variant_index.as_u32().into())),\n         containing_scope,\n     )\n }"}, {"sha": "cb558a50d9148ffde836b3e534aa85c18e9bfb67", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=25c1c635e5b7df5b651f587b1427751bfe463339", "patch": "@@ -91,9 +91,7 @@ fn build_c_style_enum_di_node<'ll, 'tcx>(\n             tag_base_type(cx, enum_type_and_layout),\n             enum_adt_def.discriminants(cx.tcx).map(|(variant_index, discr)| {\n                 let name = Cow::from(enum_adt_def.variant(variant_index).name.as_str());\n-                // Is there anything we can do to support 128-bit C-Style enums?\n-                let value = discr.val as u64;\n-                (name, value)\n+                (name, discr.val)\n             }),\n             containing_scope,\n         ),\n@@ -147,36 +145,34 @@ fn tag_base_type<'ll, 'tcx>(\n /// This is a helper function and does not register anything in the type map by itself.\n ///\n /// `variants` is an iterator of (discr-value, variant-name).\n-///\n-// NOTE: Handling of discriminant values is somewhat inconsistent. They can appear as u128,\n-//       u64, and i64. Here everything gets mapped to i64 because that's what LLVM's API expects.\n fn build_enumeration_type_di_node<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     type_name: &str,\n     base_type: Ty<'tcx>,\n-    enumerators: impl Iterator<Item = (Cow<'tcx, str>, u64)>,\n+    enumerators: impl Iterator<Item = (Cow<'tcx, str>, u128)>,\n     containing_scope: &'ll DIType,\n ) -> &'ll DIType {\n     let is_unsigned = match base_type.kind() {\n         ty::Int(_) => false,\n         ty::Uint(_) => true,\n         _ => bug!(\"build_enumeration_type_di_node() called with non-integer tag type.\"),\n     };\n+    let (size, align) = cx.size_and_align_of(base_type);\n \n     let enumerator_di_nodes: SmallVec<Option<&'ll DIType>> = enumerators\n         .map(|(name, value)| unsafe {\n+            let value = [value as u64, (value >> 64) as u64];\n             Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                 DIB(cx),\n                 name.as_ptr().cast(),\n                 name.len(),\n-                value as i64,\n+                value.as_ptr(),\n+                size.bits() as libc::c_uint,\n                 is_unsigned,\n             ))\n         })\n         .collect();\n \n-    let (size, align) = cx.size_and_align_of(base_type);\n-\n     unsafe {\n         llvm::LLVMRustDIBuilderCreateEnumerationType(\n             DIB(cx),"}, {"sha": "3b8a9f3f77f5a05cda33dc2c35a012fb1aa51799", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=25c1c635e5b7df5b651f587b1427751bfe463339", "patch": "@@ -2118,7 +2118,8 @@ extern \"C\" {\n         Builder: &DIBuilder<'a>,\n         Name: *const c_char,\n         NameLen: size_t,\n-        Value: i64,\n+        Value: *const u64,\n+        SizeInBits: c_uint,\n         IsUnsigned: bool,\n     ) -> &'a DIEnumerator;\n "}, {"sha": "f5adffd1f06d1a265cdefeb2b0b541d146bb1dba", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/25c1c635e5b7df5b651f587b1427751bfe463339/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=25c1c635e5b7df5b651f587b1427751bfe463339", "patch": "@@ -998,8 +998,9 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n-    int64_t Value, bool IsUnsigned) {\n-  return wrap(Builder->createEnumerator(StringRef(Name, NameLen), Value, IsUnsigned));\n+    const uint64_t Value[2], unsigned SizeInBits, bool IsUnsigned) {\n+  return wrap(Builder->createEnumerator(StringRef(Name, NameLen),\n+      APSInt(APInt(SizeInBits, makeArrayRef(Value, 2)), IsUnsigned)));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType("}]}