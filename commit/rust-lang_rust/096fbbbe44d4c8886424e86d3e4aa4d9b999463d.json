{"sha": "096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NmZiYmJlNDRkNGM4ODg2NDI0ZTg2ZDNlNGFhNGQ5Yjk5OTQ2M2Q=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-21T19:10:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-21T19:10:53Z"}, "message": "Account for bindings with types and in crate macros", "tree": {"sha": "25d0f29f0024ccf7e725238336d1c7443468b299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d0f29f0024ccf7e725238336d1c7443468b299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "html_url": "https://github.com/rust-lang/rust/commit/096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c88e500c6085cd2f79e4889856254aa335842c", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c88e500c6085cd2f79e4889856254aa335842c", "html_url": "https://github.com/rust-lang/rust/commit/70c88e500c6085cd2f79e4889856254aa335842c"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "92a96a997bbae1565f2401eef4a878855c60286b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "patch": "@@ -25,7 +25,8 @@ use util::nodemap::FxHashSet;\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n use errors::DiagnosticBuilder;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, FileName};\n+\n \n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir;\n@@ -263,6 +264,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         let span = tcx.hir.span(node_id);\n                                         let snippet = tcx.sess.codemap().span_to_snippet(span)\n                                             .unwrap();\n+                                        let filename = tcx.sess.codemap().span_to_filename(span);\n+                                        let is_real_filename = match filename {\n+                                            FileName::Real(_) => true,\n+                                            _ => false,\n+                                        };\n \n                                         let parent_node = self.tcx.hir.get(\n                                             self.tcx.hir.get_parent_node(node_id),\n@@ -271,13 +277,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             \"you must specify a type for this binding, like `{}`\",\n                                             concrete_type,\n                                         );\n-                                        match parent_node {\n-                                            hir_map::NodeLocal(hir::Local {\n+\n+                                        match (is_real_filename, parent_node) {\n+                                            (true, hir_map::NodeLocal(hir::Local {\n                                                 source: hir::LocalSource::Normal,\n+                                                ty,\n                                                 ..\n-                                            }) => {\n+                                            })) => {\n                                                 err.span_suggestion(\n-                                                    span,\n+                                                    // account for `let x: _ = 42;`\n+                                                    //                  ^^^^\n+                                                    span.to(ty.as_ref().map(|ty| ty.span)\n+                                                        .unwrap_or(span)),\n                                                     &msg,\n                                                     format!(\"{}: {}\", snippet, concrete_type),\n                                                 );"}, {"sha": "01282f2ad24b2daf57af8ae346e724947a3e9a4b", "filename": "src/test/ui/suggestions/auxiliary/macro-in-other-crate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fmacro-in-other-crate.rs?ref=096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! mac {\n+    ($ident:ident) => { let $ident = 42; }\n+}"}, {"sha": "2b6e830ec59622f871a177d317dea34d461aa2e9", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs?ref=096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "patch": "@@ -8,15 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// aux-build:macro-in-other-crate.rs\n+\n+#[macro_use] extern crate macro_in_other_crate;\n+\n+macro_rules! local_mac {\n+    ($ident:ident) => { let $ident = 42; }\n+}\n+\n fn main() {\n     let x = 2.0.neg();\n     //~^ ERROR can't call method `neg` on ambiguous numeric type `{float}`\n+\n     let y = 2.0;\n     let x = y.neg();\n     //~^ ERROR can't call method `neg` on ambiguous numeric type `{float}`\n     println!(\"{:?}\", x);\n+\n     for i in 0..100 {\n         println!(\"{}\", i.pow(2));\n         //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n     }\n+\n+    local_mac!(local_bar);\n+    local_bar.pow(2);\n+    //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n+}\n+\n+fn qux() {\n+    mac!(bar);\n+    bar.pow(2);\n+    //~^ ERROR can't call method `pow` on ambiguous numeric type `{integer}`\n }"}, {"sha": "796520e0ec71ba3849cb37fba9c756d9ff5d9c29", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/096fbbbe44d4c8886424e86d3e4aa4d9b999463d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=096fbbbe44d4c8886424e86d3e4aa4d9b999463d", "patch": "@@ -1,5 +1,5 @@\n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n-  --> $DIR/method-on-ambiguous-numeric-type.rs:12:17\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:20:17\n    |\n LL |     let x = 2.0.neg();\n    |                 ^^^\n@@ -9,7 +9,7 @@ LL |     let x = 2.0_f32.neg();\n    |             ^^^^^^^\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n-  --> $DIR/method-on-ambiguous-numeric-type.rs:15:15\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:24:15\n    |\n LL |     let x = y.neg();\n    |               ^^^\n@@ -19,13 +19,33 @@ LL |     let y: f32 = 2.0;\n    |         ^^^^^^\n \n error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n-  --> $DIR/method-on-ambiguous-numeric-type.rs:19:26\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:29:26\n    |\n LL |     for i in 0..100 {\n    |         - you must specify a type for this binding, like `i32`\n LL |         println!(\"{}\", i.pow(2));\n    |                          ^^^\n \n-error: aborting due to 3 previous errors\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:34:15\n+   |\n+LL |     local_bar.pow(2);\n+   |               ^^^\n+help: you must specify a type for this binding, like `i32`\n+   |\n+LL |     ($ident:ident) => { let $ident: i32 = 42; }\n+   |                             ^^^^^^^^^^^\n+\n+error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:40:9\n+   |\n+LL |     mac!(bar);\n+   |     ---------- you must specify a type for this binding, like `i32`\n+LL |     bar.pow(2);\n+   |         ^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0689`."}]}