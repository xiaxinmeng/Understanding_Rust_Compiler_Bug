{"sha": "30bd586bec5efb8317a6fdf6ce53b64fac567270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmQ1ODZiZWM1ZWZiODMxN2E2ZmRmNmNlNTNiNjRmYWM1NjcyNzA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-06T20:30:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-05-21T17:48:12Z"}, "message": "Stabilize suggestion applicability field in json output", "tree": {"sha": "bfc2249547e1d47a203d7c2056ad68355cbb6079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc2249547e1d47a203d7c2056ad68355cbb6079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bd586bec5efb8317a6fdf6ce53b64fac567270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bd586bec5efb8317a6fdf6ce53b64fac567270", "html_url": "https://github.com/rust-lang/rust/commit/30bd586bec5efb8317a6fdf6ce53b64fac567270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bd586bec5efb8317a6fdf6ce53b64fac567270/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6a4b1957e2407563f3c9005504f95138ffe28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4b1957e2407563f3c9005504f95138ffe28f", "html_url": "https://github.com/rust-lang/rust/commit/6e6a4b1957e2407563f3c9005504f95138ffe28f"}], "stats": {"total": 26, "additions": 4, "deletions": 22}, "files": [{"sha": "960bbfdd1ef713076bbc0172541132ddf0fc53f1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=30bd586bec5efb8317a6fdf6ce53b64fac567270", "patch": "@@ -1316,8 +1316,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n-    suggestion_applicability: bool = (false, parse_bool, [UNTRACKED],\n-        \"include machine-applicability of suggestions in JSON output\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"Present the input source, unstable (and less-pretty) variants;\n         valid types are any of the types for `--pretty`, as well as:"}, {"sha": "8df66d8d68855b63d30b1d633bd102012739b6a5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=30bd586bec5efb8317a6fdf6ce53b64fac567270", "patch": "@@ -1018,7 +1018,6 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n@@ -1027,7 +1026,6 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Short(color_config), None) => Box::new("}, {"sha": "458ed105d2650b04c54cc56658c94988f06cf2b8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=30bd586bec5efb8317a6fdf6ce53b64fac567270", "patch": "@@ -144,7 +144,6 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n                     None,\n                     codemap,\n                     pretty,\n-                    sessopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sessopts.debugging_opts.ui_testing)\n             )\n         },"}, {"sha": "f129aea32b8fea36b39c43297def6c93b78513a3", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bd586bec5efb8317a6fdf6ce53b64fac567270/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=30bd586bec5efb8317a6fdf6ce53b64fac567270", "patch": "@@ -38,43 +38,37 @@ pub struct JsonEmitter {\n     registry: Option<Registry>,\n     cm: Lrc<CodeMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n-    /// Whether \"approximate suggestions\" are enabled in the config\n-    suggestion_applicability: bool,\n     ui_testing: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Lrc<CodeMap>,\n-                  pretty: bool,\n-                  suggestion_applicability: bool) -> JsonEmitter {\n+                  pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n             pretty,\n-            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n \n     pub fn basic(pretty: bool) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(CodeMap::new(file_path_mapping)),\n-                            pretty, false)\n+                            pretty)\n     }\n \n     pub fn new(dst: Box<Write + Send>,\n                registry: Option<Registry>,\n                code_map: Lrc<CodeMap>,\n-               pretty: bool,\n-               suggestion_applicability: bool) -> JsonEmitter {\n+               pretty: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n             pretty,\n-            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n@@ -137,7 +131,6 @@ struct DiagnosticSpan {\n     /// that should be sliced in atop this span.\n     suggested_replacement: Option<String>,\n     /// If the suggestion is approximate\n-    #[rustc_serialize_exclude_null]\n     suggestion_applicability: Option<Applicability>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n@@ -301,12 +294,6 @@ impl DiagnosticSpan {\n             })\n         });\n \n-        let suggestion_applicability = if je.suggestion_applicability {\n-             suggestion.map(|x| x.1)\n-        } else {\n-            None\n-        };\n-\n         DiagnosticSpan {\n             file_name: start.file.name.to_string(),\n             byte_start: span.lo().0 - start.file.start_pos.0,\n@@ -318,7 +305,7 @@ impl DiagnosticSpan {\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n             suggested_replacement: suggestion.map(|x| x.0.clone()),\n-            suggestion_applicability,\n+            suggestion_applicability: suggestion.map(|x| x.1),\n             expansion: backtrace_step,\n             label,\n         }"}]}