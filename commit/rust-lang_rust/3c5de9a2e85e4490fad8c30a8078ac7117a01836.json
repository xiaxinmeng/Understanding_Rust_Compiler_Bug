{"sha": "3c5de9a2e85e4490fad8c30a8078ac7117a01836", "node_id": "C_kwDOAAsO6NoAKDNjNWRlOWEyZTg1ZTQ0OTBmYWQ4YzMwYTgwNzhhYzcxMTdhMDE4MzY", "commit": {"author": {"name": "whtahy", "email": "whtahy@users.noreply.github.com", "date": "2023-04-20T05:16:21Z"}, "committer": {"name": "whtahy", "email": "whtahy@users.noreply.github.com", "date": "2023-04-22T04:51:49Z"}, "message": "add known-bug test for unsound issue 85099", "tree": {"sha": "d04175987f19dde4d8142a0448a736a54019b54d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04175987f19dde4d8142a0448a736a54019b54d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c5de9a2e85e4490fad8c30a8078ac7117a01836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5de9a2e85e4490fad8c30a8078ac7117a01836", "html_url": "https://github.com/rust-lang/rust/commit/3c5de9a2e85e4490fad8c30a8078ac7117a01836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c5de9a2e85e4490fad8c30a8078ac7117a01836/comments", "author": {"login": "whtahy", "id": 19783477, "node_id": "MDQ6VXNlcjE5NzgzNDc3", "avatar_url": "https://avatars.githubusercontent.com/u/19783477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whtahy", "html_url": "https://github.com/whtahy", "followers_url": "https://api.github.com/users/whtahy/followers", "following_url": "https://api.github.com/users/whtahy/following{/other_user}", "gists_url": "https://api.github.com/users/whtahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/whtahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whtahy/subscriptions", "organizations_url": "https://api.github.com/users/whtahy/orgs", "repos_url": "https://api.github.com/users/whtahy/repos", "events_url": "https://api.github.com/users/whtahy/events{/privacy}", "received_events_url": "https://api.github.com/users/whtahy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whtahy", "id": 19783477, "node_id": "MDQ6VXNlcjE5NzgzNDc3", "avatar_url": "https://avatars.githubusercontent.com/u/19783477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whtahy", "html_url": "https://github.com/whtahy", "followers_url": "https://api.github.com/users/whtahy/followers", "following_url": "https://api.github.com/users/whtahy/following{/other_user}", "gists_url": "https://api.github.com/users/whtahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/whtahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whtahy/subscriptions", "organizations_url": "https://api.github.com/users/whtahy/orgs", "repos_url": "https://api.github.com/users/whtahy/repos", "events_url": "https://api.github.com/users/whtahy/events{/privacy}", "received_events_url": "https://api.github.com/users/whtahy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be68c69e7123fbe513c1f5689f61018e3f94220e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be68c69e7123fbe513c1f5689f61018e3f94220e", "html_url": "https://github.com/rust-lang/rust/commit/be68c69e7123fbe513c1f5689f61018e3f94220e"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "03602144e5001b83efcce174edf9e384d92e8cd7", "filename": "tests/ui/typeck/pin-unsound-issue-85099-derefmut.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3c5de9a2e85e4490fad8c30a8078ac7117a01836/tests%2Fui%2Ftypeck%2Fpin-unsound-issue-85099-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c5de9a2e85e4490fad8c30a8078ac7117a01836/tests%2Fui%2Ftypeck%2Fpin-unsound-issue-85099-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fpin-unsound-issue-85099-derefmut.rs?ref=3c5de9a2e85e4490fad8c30a8078ac7117a01836", "patch": "@@ -0,0 +1,68 @@\n+// check-pass\n+// known-bug: #85099\n+\n+// Should fail. Can coerce `Pin<T>` into `Pin<U>` where\n+// `T: Deref<Target: Unpin>` and `U: Deref<Target: !Unpin>`, using the\n+// `CoerceUnsized` impl on `Pin` and an unorthodox `DerefMut` impl for\n+// `Pin<&_>`.\n+\n+// This should not be allowed, since one can unpin `T::Target` (since it is\n+// `Unpin`) to gain unpinned access to the previously pinned `U::Target` (which\n+// is `!Unpin`) and then move it.\n+\n+use std::{\n+    cell::{RefCell, RefMut},\n+    future::Future,\n+    ops::DerefMut,\n+    pin::Pin,\n+};\n+\n+struct SomeLocalStruct<'a, Fut>(&'a RefCell<Fut>);\n+\n+trait SomeTrait<'a, Fut> {\n+    #[allow(clippy::mut_from_ref)]\n+    fn deref_helper(&self) -> &mut (dyn SomeTrait<'a, Fut> + 'a) {\n+        unimplemented!()\n+    }\n+    fn downcast(self: Pin<&mut Self>) -> Pin<&mut Fut> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<'a, Fut: Future<Output = ()>> SomeTrait<'a, Fut> for SomeLocalStruct<'a, Fut> {\n+    fn deref_helper(&self) -> &mut (dyn SomeTrait<'a, Fut> + 'a) {\n+        let x = Box::new(self.0.borrow_mut());\n+        let x: &'a mut RefMut<'a, Fut> = Box::leak(x);\n+        &mut **x\n+    }\n+}\n+impl<'a, Fut: Future<Output = ()>> SomeTrait<'a, Fut> for Fut {\n+    fn downcast(self: Pin<&mut Self>) -> Pin<&mut Fut> {\n+        self\n+    }\n+}\n+\n+impl<'b, 'a, Fut> DerefMut for Pin<&'b dyn SomeTrait<'a, Fut>> {\n+    fn deref_mut<'c>(\n+        self: &'c mut Pin<&'b dyn SomeTrait<'a, Fut>>,\n+    ) -> &'c mut (dyn SomeTrait<'a, Fut> + 'b) {\n+        self.deref_helper()\n+    }\n+}\n+\n+// obviously a \"working\" function with this signature is problematic\n+pub fn unsound_pin<Fut: Future<Output = ()>>(\n+    fut: Fut,\n+    callback: impl FnOnce(Pin<&mut Fut>),\n+) -> Fut {\n+    let cell = RefCell::new(fut);\n+    let s: &SomeLocalStruct<'_, Fut> = &SomeLocalStruct(&cell);\n+    let p: Pin<Pin<&SomeLocalStruct<'_, Fut>>> = Pin::new(Pin::new(s));\n+    let mut p: Pin<Pin<&dyn SomeTrait<'_, Fut>>> = p;\n+    let r: Pin<&mut dyn SomeTrait<'_, Fut>> = p.as_mut();\n+    let f: Pin<&mut Fut> = r.downcast();\n+    callback(f);\n+    cell.into_inner()\n+}\n+\n+fn main() {}"}]}