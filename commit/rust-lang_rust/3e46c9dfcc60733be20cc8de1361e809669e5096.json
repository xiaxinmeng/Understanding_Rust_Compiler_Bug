{"sha": "3e46c9dfcc60733be20cc8de1361e809669e5096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDZjOWRmY2M2MDczM2JlMjBjYzhkZTEzNjFlODA5NjY5ZTUwOTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-27T18:55:14Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-08-03T10:52:36Z"}, "message": "Add doc examples for FileType struct", "tree": {"sha": "7902046010b24c7c251dc32d77d613915e7a25c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7902046010b24c7c251dc32d77d613915e7a25c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e46c9dfcc60733be20cc8de1361e809669e5096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e46c9dfcc60733be20cc8de1361e809669e5096", "html_url": "https://github.com/rust-lang/rust/commit/3e46c9dfcc60733be20cc8de1361e809669e5096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e46c9dfcc60733be20cc8de1361e809669e5096/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373b8437b205cce01a19e7cdef17a50ff7ec84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373b8437b205cce01a19e7cdef17a50ff7ec84a", "html_url": "https://github.com/rust-lang/rust/commit/a373b8437b205cce01a19e7cdef17a50ff7ec84a"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "2b2f21522d4be7d0d452fef39a7aef7a90f9209a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3e46c9dfcc60733be20cc8de1361e809669e5096/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e46c9dfcc60733be20cc8de1361e809669e5096/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3e46c9dfcc60733be20cc8de1361e809669e5096", "patch": "@@ -156,7 +156,10 @@ pub struct OpenOptions(fs_imp::OpenOptions);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Permissions(fs_imp::FilePermissions);\n \n-/// An structure representing a type of file with accessors for each file type.\n+/// A structure representing a type of file with accessors for each file type.\n+/// It is returned by [`Metadata::file_type`] method.\n+///\n+/// [`Metadata::file_type`]: struct.Metadata.html#method.file_type\n #[stable(feature = \"file_type\", since = \"1.1.0\")]\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FileType(fs_imp::FileType);\n@@ -610,6 +613,19 @@ impl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n \n impl Metadata {\n     /// Returns the file type for this metadata.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    ///\n+    /// println!(\"{:?}\", metadata.file_type());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> FileType {\n         FileType(self.0.file_type())\n@@ -788,14 +804,56 @@ impl Permissions {\n \n impl FileType {\n     /// Test whether this file type represents a directory.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let file_type = metadata.file_type();\n+    ///\n+    /// assert_eq!(file_type.is_dir(), false);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_dir(&self) -> bool { self.0.is_dir() }\n \n     /// Test whether this file type represents a regular file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let file_type = metadata.file_type();\n+    ///\n+    /// assert_eq!(file_type.is_file(), true);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_file(&self) -> bool { self.0.is_file() }\n \n     /// Test whether this file type represents a symbolic link.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    /// let file_type = metadata.file_type();\n+    ///\n+    /// assert_eq!(file_type.is_symlink(), false);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn is_symlink(&self) -> bool { self.0.is_symlink() }\n }"}]}