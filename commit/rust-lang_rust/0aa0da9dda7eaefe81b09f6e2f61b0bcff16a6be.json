{"sha": "0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "node_id": "C_kwDOAAsO6NoAKDBhYTBkYTlkZGE3ZWFlZmU4MWIwOWY2ZTJmNjFiMGJjZmYxNmE2YmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T16:22:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T16:22:33Z"}, "message": "Auto merge of #13572 - Veykril:cancellable, r=Veykril\n\ninternal: Use Cancellable in favor of Result for clarity", "tree": {"sha": "7453fdae876d166edee8470a12d6c04cdf689a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7453fdae876d166edee8470a12d6c04cdf689a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "html_url": "https://github.com/rust-lang/rust/commit/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27e4dad379453466a3d5b4500645c617c4e3dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27e4dad379453466a3d5b4500645c617c4e3dc6", "html_url": "https://github.com/rust-lang/rust/commit/a27e4dad379453466a3d5b4500645c617c4e3dc6"}, {"sha": "fa70b0a86ec89ea53c0855caba42d121cbcc5697", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa70b0a86ec89ea53c0855caba42d121cbcc5697", "html_url": "https://github.com/rust-lang/rust/commit/fa70b0a86ec89ea53c0855caba42d121cbcc5697"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "37384c4e7e07501dffe853c1e31d02309618af41", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -190,7 +190,7 @@ impl fmt::Debug for InlayHintLabelPart {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    range_limit: Option<FileRange>,\n+    range_limit: Option<TextRange>,\n     config: &InlayHintsConfig,\n ) -> Vec<InlayHint> {\n     let _p = profile::span(\"inlay_hints\");\n@@ -205,7 +205,7 @@ pub(crate) fn inlay_hints(\n \n         let hints = |node| hints(&mut acc, &famous_defs, config, file_id, node);\n         match range_limit {\n-            Some(FileRange { range, .. }) => match file.covering_element(range) {\n+            Some(range) => match file.covering_element(range) {\n                 NodeOrToken::Token(_) => return acc,\n                 NodeOrToken::Node(n) => n\n                     .descendants()\n@@ -1289,7 +1289,6 @@ fn get_callable(\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::base_db::FileRange;\n     use itertools::Itertools;\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n@@ -1913,10 +1912,7 @@ fn main() {\n             .inlay_hints(\n                 &InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG },\n                 file_id,\n-                Some(FileRange {\n-                    file_id,\n-                    range: TextRange::new(TextSize::from(500), TextSize::from(600)),\n-                }),\n+                Some(TextRange::new(TextSize::from(500), TextSize::from(600))),\n             )\n             .unwrap();\n         let actual ="}, {"sha": "7402e86f36fa411c5e6f713a0a1fc8e76030e11c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -367,7 +367,7 @@ impl Analysis {\n         &self,\n         config: &InlayHintsConfig,\n         file_id: FileId,\n-        range: Option<FileRange>,\n+        range: Option<TextRange>,\n     ) -> Cancellable<Vec<InlayHint>> {\n         self.with_db(|db| inlay_hints::inlay_hints(db, file_id, range, config))\n     }"}, {"sha": "cf51cf15a0e1d209855150a7dcd710c9bbd78442", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -3,11 +3,11 @@\n use std::mem;\n \n use cfg::{CfgAtom, CfgExpr};\n-use ide::{FileId, RunnableKind, TestId};\n+use ide::{Cancellable, FileId, RunnableKind, TestId};\n use project_model::{self, CargoFeatures, ManifestPath, TargetKind};\n use vfs::AbsPathBuf;\n \n-use crate::{global_state::GlobalStateSnapshot, Result};\n+use crate::global_state::GlobalStateSnapshot;\n \n /// Abstract representation of Cargo target.\n ///\n@@ -29,7 +29,7 @@ impl CargoTargetSpec {\n         spec: Option<CargoTargetSpec>,\n         kind: &RunnableKind,\n         cfg: &Option<CfgExpr>,\n-    ) -> Result<(Vec<String>, Vec<String>)> {\n+    ) -> (Vec<String>, Vec<String>) {\n         let mut args = Vec::new();\n         let mut extra_args = Vec::new();\n \n@@ -111,13 +111,13 @@ impl CargoTargetSpec {\n                 }\n             }\n         }\n-        Ok((args, extra_args))\n+        (args, extra_args)\n     }\n \n     pub(crate) fn for_file(\n         global_state_snapshot: &GlobalStateSnapshot,\n         file_id: FileId,\n-    ) -> Result<Option<CargoTargetSpec>> {\n+    ) -> Cancellable<Option<CargoTargetSpec>> {\n         let crate_id = match &*global_state_snapshot.analysis.crates_for(file_id)? {\n             &[crate_id, ..] => crate_id,\n             _ => return Ok(None),"}, {"sha": "d190a9f4e2ca99c0322a141c9700dcf19de8d12f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -9,9 +9,9 @@ use std::{\n \n use anyhow::Context;\n use ide::{\n-    AnnotationConfig, AssistKind, AssistResolveStrategy, FileId, FilePosition, FileRange,\n-    HoverAction, HoverGotoTypeData, Query, RangeInfo, ReferenceCategory, Runnable, RunnableKind,\n-    SingleResolve, SourceChange, TextEdit,\n+    AnnotationConfig, AssistKind, AssistResolveStrategy, Cancellable, FileId, FilePosition,\n+    FileRange, HoverAction, HoverGotoTypeData, Query, RangeInfo, ReferenceCategory, Runnable,\n+    RunnableKind, SingleResolve, SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use lsp_server::ErrorCode;\n@@ -556,7 +556,7 @@ pub(crate) fn handle_will_rename_files(\n     if source_change.source_file_edits.is_empty() {\n         Ok(None)\n     } else {\n-        to_proto::workspace_edit(&snap, source_change).map(Some)\n+        Ok(Some(to_proto::workspace_edit(&snap, source_change)?))\n     }\n }\n \n@@ -1313,7 +1313,7 @@ pub(crate) fn handle_ssr(\n         position,\n         selections,\n     )??;\n-    to_proto::workspace_edit(&snap, source_change)\n+    to_proto::workspace_edit(&snap, source_change).map_err(Into::into)\n }\n \n pub(crate) fn publish_diagnostics(\n@@ -1354,13 +1354,12 @@ pub(crate) fn handle_inlay_hints(\n ) -> Result<Option<Vec<InlayHint>>> {\n     let _p = profile::span(\"handle_inlay_hints\");\n     let document_uri = &params.text_document.uri;\n-    let file_id = from_proto::file_id(&snap, document_uri)?;\n-    let line_index = snap.file_line_index(file_id)?;\n-    let range = from_proto::file_range(\n+    let FileRange { file_id, range } = from_proto::file_range(\n         &snap,\n         TextDocumentIdentifier::new(document_uri.to_owned()),\n         params.range,\n     )?;\n+    let line_index = snap.file_line_index(file_id)?;\n     let inlay_hints_config = snap.config.inlay_hints();\n     Ok(Some(\n         snap.analysis\n@@ -1369,7 +1368,7 @@ pub(crate) fn handle_inlay_hints(\n             .map(|it| {\n                 to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n             })\n-            .collect::<Result<Vec<_>>>()?,\n+            .collect::<Cancellable<Vec<_>>>()?,\n     ))\n }\n \n@@ -1426,7 +1425,7 @@ pub(crate) fn handle_call_hierarchy_prepare(\n         .into_iter()\n         .filter(|it| it.kind == Some(SymbolKind::Function))\n         .map(|it| to_proto::call_hierarchy_item(&snap, it))\n-        .collect::<Result<Vec<_>>>()?;\n+        .collect::<Cancellable<Vec<_>>>()?;\n \n     Ok(Some(res))\n }"}, {"sha": "45a1dab9772faa8a3809436949262c97b8585243", "filename": "crates/rust-analyzer/src/mem_docs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmem_docs.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -7,7 +7,7 @@ use vfs::VfsPath;\n \n /// Holds the set of in-memory documents.\n ///\n-/// For these document, there true contents is maintained by the client. It\n+/// For these document, their true contents is maintained by the client. It\n /// might be different from what's on disk.\n #[derive(Default, Clone)]\n pub(crate) struct MemDocs {\n@@ -19,31 +19,37 @@ impl MemDocs {\n     pub(crate) fn contains(&self, path: &VfsPath) -> bool {\n         self.mem_docs.contains_key(path)\n     }\n+\n     pub(crate) fn insert(&mut self, path: VfsPath, data: DocumentData) -> Result<(), ()> {\n         self.added_or_removed = true;\n         match self.mem_docs.insert(path, data) {\n             Some(_) => Err(()),\n             None => Ok(()),\n         }\n     }\n+\n     pub(crate) fn remove(&mut self, path: &VfsPath) -> Result<(), ()> {\n         self.added_or_removed = true;\n         match self.mem_docs.remove(path) {\n             Some(_) => Ok(()),\n             None => Err(()),\n         }\n     }\n+\n     pub(crate) fn get(&self, path: &VfsPath) -> Option<&DocumentData> {\n         self.mem_docs.get(path)\n     }\n+\n     pub(crate) fn get_mut(&mut self, path: &VfsPath) -> Option<&mut DocumentData> {\n         // NB: don't set `self.added_or_removed` here, as that purposefully only\n         // tracks changes to the key set.\n         self.mem_docs.get_mut(path)\n     }\n+\n     pub(crate) fn iter(&self) -> impl Iterator<Item = &VfsPath> {\n         self.mem_docs.keys()\n     }\n+\n     pub(crate) fn take_changes(&mut self) -> bool {\n         mem::replace(&mut self.added_or_removed, false)\n     }"}, {"sha": "81cc1952ba5ca4b9d210f85b2225ed1abde4e189", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0aa0da9dda7eaefe81b09f6e2f61b0bcff16a6be", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     line_index::{LineEndings, LineIndex, PositionEncoding},\n     lsp_ext,\n     lsp_utils::invalid_params_error,\n-    semantic_tokens, Result,\n+    semantic_tokens,\n };\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n@@ -429,7 +429,7 @@ pub(crate) fn inlay_hint(\n     line_index: &LineIndex,\n     render_colons: bool,\n     mut inlay_hint: InlayHint,\n-) -> Result<lsp_types::InlayHint> {\n+) -> Cancellable<lsp_types::InlayHint> {\n     match inlay_hint.kind {\n         InlayKind::ParameterHint if render_colons => inlay_hint.label.append_str(\":\"),\n         InlayKind::TypeHint if render_colons => inlay_hint.label.prepend_str(\": \"),\n@@ -522,7 +522,7 @@ pub(crate) fn inlay_hint(\n fn inlay_hint_label(\n     snap: &GlobalStateSnapshot,\n     label: InlayHintLabel,\n-) -> Result<lsp_types::InlayHintLabel> {\n+) -> Cancellable<lsp_types::InlayHintLabel> {\n     Ok(match label.as_simple_str() {\n         Some(s) => lsp_types::InlayHintLabel::String(s.into()),\n         None => lsp_types::InlayHintLabel::LabelParts(\n@@ -540,7 +540,7 @@ fn inlay_hint_label(\n                         command: None,\n                     })\n                 })\n-                .collect::<Result<Vec<_>>>()?,\n+                .collect::<Cancellable<Vec<_>>>()?,\n         ),\n     })\n }\n@@ -798,7 +798,7 @@ pub(crate) fn optional_versioned_text_document_identifier(\n pub(crate) fn location(\n     snap: &GlobalStateSnapshot,\n     frange: FileRange,\n-) -> Result<lsp_types::Location> {\n+) -> Cancellable<lsp_types::Location> {\n     let url = url(snap, frange.file_id);\n     let line_index = snap.file_line_index(frange.file_id)?;\n     let range = range(&line_index, frange.range);\n@@ -810,7 +810,7 @@ pub(crate) fn location(\n pub(crate) fn location_from_nav(\n     snap: &GlobalStateSnapshot,\n     nav: NavigationTarget,\n-) -> Result<lsp_types::Location> {\n+) -> Cancellable<lsp_types::Location> {\n     let url = url(snap, nav.file_id);\n     let line_index = snap.file_line_index(nav.file_id)?;\n     let range = range(&line_index, nav.full_range);\n@@ -822,7 +822,7 @@ pub(crate) fn location_link(\n     snap: &GlobalStateSnapshot,\n     src: Option<FileRange>,\n     target: NavigationTarget,\n-) -> Result<lsp_types::LocationLink> {\n+) -> Cancellable<lsp_types::LocationLink> {\n     let origin_selection_range = match src {\n         Some(src) => {\n             let line_index = snap.file_line_index(src.file_id)?;\n@@ -844,7 +844,7 @@ pub(crate) fn location_link(\n fn location_info(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n-) -> Result<(lsp_types::Url, lsp_types::Range, lsp_types::Range)> {\n+) -> Cancellable<(lsp_types::Url, lsp_types::Range, lsp_types::Range)> {\n     let line_index = snap.file_line_index(target.file_id)?;\n \n     let target_uri = url(snap, target.file_id);\n@@ -858,20 +858,20 @@ pub(crate) fn goto_definition_response(\n     snap: &GlobalStateSnapshot,\n     src: Option<FileRange>,\n     targets: Vec<NavigationTarget>,\n-) -> Result<lsp_types::GotoDefinitionResponse> {\n+) -> Cancellable<lsp_types::GotoDefinitionResponse> {\n     if snap.config.location_link() {\n         let links = targets\n             .into_iter()\n             .map(|nav| location_link(snap, src, nav))\n-            .collect::<Result<Vec<_>>>()?;\n+            .collect::<Cancellable<Vec<_>>>()?;\n         Ok(links.into())\n     } else {\n         let locations = targets\n             .into_iter()\n             .map(|nav| {\n                 location(snap, FileRange { file_id: nav.file_id, range: nav.focus_or_full_range() })\n             })\n-            .collect::<Result<Vec<_>>>()?;\n+            .collect::<Cancellable<Vec<_>>>()?;\n         Ok(locations.into())\n     }\n }\n@@ -885,7 +885,7 @@ pub(crate) fn snippet_text_document_edit(\n     is_snippet: bool,\n     file_id: FileId,\n     edit: TextEdit,\n-) -> Result<lsp_ext::SnippetTextDocumentEdit> {\n+) -> Cancellable<lsp_ext::SnippetTextDocumentEdit> {\n     let text_document = optional_versioned_text_document_identifier(snap, file_id);\n     let line_index = snap.file_line_index(file_id)?;\n     let mut edits: Vec<_> =\n@@ -962,7 +962,7 @@ pub(crate) fn snippet_text_document_ops(\n pub(crate) fn snippet_workspace_edit(\n     snap: &GlobalStateSnapshot,\n     source_change: SourceChange,\n-) -> Result<lsp_ext::SnippetWorkspaceEdit> {\n+) -> Cancellable<lsp_ext::SnippetWorkspaceEdit> {\n     let mut document_changes: Vec<lsp_ext::SnippetDocumentChangeOperation> = Vec::new();\n \n     for op in source_change.file_system_edits {\n@@ -999,7 +999,7 @@ pub(crate) fn snippet_workspace_edit(\n pub(crate) fn workspace_edit(\n     snap: &GlobalStateSnapshot,\n     source_change: SourceChange,\n-) -> Result<lsp_types::WorkspaceEdit> {\n+) -> Cancellable<lsp_types::WorkspaceEdit> {\n     assert!(!source_change.is_snippet);\n     snippet_workspace_edit(snap, source_change).map(|it| it.into())\n }\n@@ -1052,7 +1052,7 @@ impl From<lsp_ext::SnippetTextEdit>\n pub(crate) fn call_hierarchy_item(\n     snap: &GlobalStateSnapshot,\n     target: NavigationTarget,\n-) -> Result<lsp_types::CallHierarchyItem> {\n+) -> Cancellable<lsp_types::CallHierarchyItem> {\n     let name = target.name.to_string();\n     let detail = target.description.clone();\n     let kind = target.kind.map(symbol_kind).unwrap_or(lsp_types::SymbolKind::FUNCTION);\n@@ -1084,7 +1084,7 @@ pub(crate) fn code_action(\n     snap: &GlobalStateSnapshot,\n     assist: Assist,\n     resolve_data: Option<(usize, lsp_types::CodeActionParams)>,\n-) -> Result<lsp_ext::CodeAction> {\n+) -> Cancellable<lsp_ext::CodeAction> {\n     let mut res = lsp_ext::CodeAction {\n         title: assist.label.to_string(),\n         group: assist.group.filter(|_| snap.config.code_action_group()).map(|gr| gr.0),\n@@ -1117,13 +1117,13 @@ pub(crate) fn code_action(\n pub(crate) fn runnable(\n     snap: &GlobalStateSnapshot,\n     runnable: Runnable,\n-) -> Result<lsp_ext::Runnable> {\n+) -> Cancellable<lsp_ext::Runnable> {\n     let config = snap.config.runnables();\n     let spec = CargoTargetSpec::for_file(snap, runnable.nav.file_id)?;\n     let workspace_root = spec.as_ref().map(|it| it.workspace_root.clone());\n     let target = spec.as_ref().map(|s| s.target.clone());\n     let (cargo_args, executable_args) =\n-        CargoTargetSpec::runnable_args(snap, spec, &runnable.kind, &runnable.cfg)?;\n+        CargoTargetSpec::runnable_args(snap, spec, &runnable.kind, &runnable.cfg);\n     let label = runnable.label(target);\n     let location = location_link(snap, None, runnable.nav)?;\n \n@@ -1146,7 +1146,7 @@ pub(crate) fn code_lens(\n     acc: &mut Vec<lsp_types::CodeLens>,\n     snap: &GlobalStateSnapshot,\n     annotation: Annotation,\n-) -> Result<()> {\n+) -> Cancellable<()> {\n     let client_commands_config = snap.config.client_commands();\n     match annotation.kind {\n         AnnotationKind::Runnable(run) => {"}]}