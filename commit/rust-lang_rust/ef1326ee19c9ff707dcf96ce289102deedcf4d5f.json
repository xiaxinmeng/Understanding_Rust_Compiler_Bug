{"sha": "ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMTMyNmVlMTljOWZmNzA3ZGNmOTZjZTI4OTEwMmRlZWRjZjRkNWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:48:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:48:28Z"}, "message": "More orthogonal path editing", "tree": {"sha": "13315f0f9fdbe1d69d228d745147b28a5edd99ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13315f0f9fdbe1d69d228d745147b28a5edd99ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "html_url": "https://github.com/rust-lang/rust/commit/ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6", "html_url": "https://github.com/rust-lang/rust/commit/7d2d3ac3db6ea7bbb3d77569495176da3b2992e6"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "56b7588efb6eb5ef60e31b5cec4a1129b8dd9159", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "patch": "@@ -2,7 +2,7 @@\n use rustc_hash::FxHashMap;\n \n use hir::{db::HirDatabase, InFile, PathResolution};\n-use ra_syntax::ast::{self, make, AstNode};\n+use ra_syntax::ast::{self, AstNode};\n \n pub trait AstTransform<'a> {\n     fn get_substitution(\n@@ -134,11 +134,18 @@ impl<'a, DB: HirDatabase> QualifyPaths<'a, DB> {\n         match resolution {\n             PathResolution::Def(def) => {\n                 let found_path = from.find_use_path(self.db, def)?;\n-                let args = p\n+                let mut path = path_to_ast(found_path);\n+\n+                let type_args = p\n                     .segment()\n                     .and_then(|s| s.type_arg_list())\n                     .map(|arg_list| apply(self, node.with_value(arg_list)));\n-                Some(make::path_with_type_arg_list(path_to_ast(found_path), args).syntax().clone())\n+                if let Some(type_args) = type_args {\n+                    let last_segment = path.segment().unwrap();\n+                    path = path.with_segment(last_segment.with_type_args(type_args))\n+                }\n+\n+                Some(path.syntax().clone())\n             }\n             PathResolution::Local(_)\n             | PathResolution::TypeParam(_)"}, {"sha": "0e78d8b63772dd67328de2f74cbb60865fedfad5", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "patch": "@@ -207,6 +207,48 @@ impl ast::TypeParam {\n     }\n }\n \n+impl ast::Path {\n+    #[must_use]\n+    pub fn with_segment(&self, segment: ast::PathSegment) -> ast::Path {\n+        if let Some(old) = self.segment() {\n+            return replace_children(\n+                self,\n+                single_node(old.syntax().clone()),\n+                iter::once(segment.syntax().clone().into()),\n+            );\n+        }\n+        self.clone()\n+    }\n+}\n+\n+impl ast::PathSegment {\n+    #[must_use]\n+    pub fn with_type_args(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+        self._with_type_args(type_args, false)\n+    }\n+\n+    #[must_use]\n+    pub fn with_turbo_fish(&self, type_args: ast::TypeArgList) -> ast::PathSegment {\n+        self._with_type_args(type_args, true)\n+    }\n+\n+    fn _with_type_args(&self, type_args: ast::TypeArgList, turbo: bool) -> ast::PathSegment {\n+        if let Some(old) = self.type_arg_list() {\n+            return replace_children(\n+                self,\n+                single_node(old.syntax().clone()),\n+                iter::once(type_args.syntax().clone().into()),\n+            );\n+        }\n+        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        if turbo {\n+            to_insert.push(make::token(T![::]).into());\n+        }\n+        to_insert.push(type_args.syntax().clone().into());\n+        insert_children(self, InsertPosition::Last, to_insert)\n+    }\n+}\n+\n #[must_use]\n pub fn strip_attrs_and_docs<N: ast::AttrsOwner>(node: &N) -> N {\n     N::cast(strip_attrs_and_docs_inner(node.syntax().clone())).unwrap()"}, {"sha": "36e648180b4ba7477dbaeddf50ac8632fcb21c19", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1326ee19c9ff707dcf96ce289102deedcf4d5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=ef1326ee19c9ff707dcf96ce289102deedcf4d5f", "patch": "@@ -2,7 +2,7 @@\n //! of smaller pieces.\n use itertools::Itertools;\n \n-use crate::{algo, ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n+use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n pub fn name(text: &str) -> ast::Name {\n     ast_from_text(&format!(\"mod {};\", text))\n@@ -21,20 +21,6 @@ pub fn path_qualified(qual: ast::Path, name_ref: ast::NameRef) -> ast::Path {\n fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }\n-pub fn path_with_type_arg_list(path: ast::Path, args: Option<ast::TypeArgList>) -> ast::Path {\n-    if let Some(args) = args {\n-        let syntax = path.syntax();\n-        // FIXME: remove existing type args\n-        let new_syntax = algo::insert_children(\n-            syntax,\n-            crate::algo::InsertPosition::Last,\n-            &mut Some(args).into_iter().map(|n| n.syntax().clone().into()),\n-        );\n-        ast::Path::cast(new_syntax).unwrap()\n-    } else {\n-        path\n-    }\n-}\n \n pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n     return match expr {\n@@ -201,7 +187,7 @@ pub mod tokens {\n     use once_cell::sync::Lazy;\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n-        Lazy::new(|| SourceFile::parse(\"const C: () = (1 != 1, 2 == 2)\\n;\"));\n+        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2)\\n;\"));\n \n     pub fn comma() -> SyntaxToken {\n         SOURCE_FILE"}]}