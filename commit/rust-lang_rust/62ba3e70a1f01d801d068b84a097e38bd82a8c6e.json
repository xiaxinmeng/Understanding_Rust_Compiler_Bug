{"sha": "62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "node_id": "C_kwDOAAsO6NoAKDYyYmEzZTcwYTFmMDFkODAxZDA2OGI4NGEwOTdlMzhiZDgyYThjNmU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-03T02:00:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T20:12:19Z"}, "message": "Modify primary span label for E0308\n\nThe previous output was unintuitive to users.", "tree": {"sha": "e7834f2924d6a0aa0ef7eddb6bb9b2db50b2be1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7834f2924d6a0aa0ef7eddb6bb9b2db50b2be1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "html_url": "https://github.com/rust-lang/rust/commit/62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006ca9b14da1e0145844598b3d6a554c042c702a", "url": "https://api.github.com/repos/rust-lang/rust/commits/006ca9b14da1e0145844598b3d6a554c042c702a", "html_url": "https://github.com/rust-lang/rust/commit/006ca9b14da1e0145844598b3d6a554c042c702a"}], "stats": {"total": 1815, "additions": 889, "deletions": 926}, "files": [{"sha": "ccd75ad0ec5a1f28f3933327bc1053d3242c0a34", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -444,7 +444,10 @@ fn check_opaque_meets_bounds<'tcx>(\n         Err(ty_err) => {\n             tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n+                &format!(\n+                    \"could not unify `{hidden_ty}` with revealed type:\\n{}\",\n+                    ty_err.to_string(tcx)\n+                ),\n             );\n         }\n     }"}, {"sha": "d58a5ceef966b54c0f61d4989da9dfbc0e99b8b5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -67,6 +67,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::relate::{self, RelateResult, TypeRelation};\n use rustc_middle::ty::{\n     self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n@@ -1612,16 +1613,31 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 {\n                     format!(\"expected this to be `{}`\", expected)\n                 } else {\n-                    terr.to_string()\n+                    terr.to_string(self.tcx)\n                 };\n                 label_or_note(sp, &terr);\n                 label_or_note(span, &msg);\n             } else {\n-                label_or_note(span, &terr.to_string());\n+                label_or_note(span, &terr.to_string(self.tcx));\n                 label_or_note(sp, &msg);\n             }\n         } else {\n-            label_or_note(span, &terr.to_string());\n+            if let Some(values) = values\n+                && let Some((e, f)) = values.ty()\n+                && let TypeError::ArgumentSorts(..) | TypeError::Sorts(_) = terr\n+            {\n+                let e = self.tcx.erase_regions(e);\n+                let f = self.tcx.erase_regions(f);\n+                let expected = with_forced_trimmed_paths!(e.sort_string(self.tcx));\n+                let found = with_forced_trimmed_paths!(f.sort_string(self.tcx));\n+                if expected == found {\n+                    label_or_note(span, &terr.to_string(self.tcx));\n+                } else {\n+                    label_or_note(span, &format!(\"expected {expected}, found {found}\"));\n+                }\n+            } else {\n+                label_or_note(span, &terr.to_string(self.tcx));\n+            }\n         }\n \n         if let Some((expected, found, exp_p, found_p)) = expected_found {"}, {"sha": "e18cfb93beddc4875747868ef784125ddbf4c0b0", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -137,25 +137,25 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             diag.help(\n                                 \"given a type parameter `T` and a method `foo`:\n ```\n-trait Trait<T> { fn foo(&tcx) -> T; }\n+trait Trait<T> { fn foo(&self) -> T; }\n ```\n the only ways to implement method `foo` are:\n - constrain `T` with an explicit type:\n ```\n impl Trait<String> for X {\n-    fn foo(&tcx) -> String { String::new() }\n+    fn foo(&self) -> String { String::new() }\n }\n ```\n - add a trait bound to `T` and call a method on that trait that returns `Self`:\n ```\n impl<T: std::default::Default> Trait<T> for X {\n-    fn foo(&tcx) -> T { <T as std::default::Default>::default() }\n+    fn foo(&self) -> T { <T as std::default::Default>::default() }\n }\n ```\n - change `foo` to return an argument of type `T`:\n ```\n impl<T> Trait<T> for X {\n-    fn foo(&tcx, x: T) -> T { x }\n+    fn foo(&self, x: T) -> T { x }\n }\n ```\",\n                             );\n@@ -389,14 +389,14 @@ impl<T> Trait<T> for X {\n ```\n trait Trait {\n type T;\n-fn foo(&tcx) -> Self::T;\n+fn foo(&self) -> Self::T;\n }\n ```\n the only way of implementing method `foo` is to constrain `T` with an explicit associated type:\n ```\n impl Trait for X {\n type T = String;\n-fn foo(&tcx) -> Self::T { String::new() }\n+fn foo(&self) -> Self::T { String::new() }\n }\n ```\",\n             );"}, {"sha": "bb87b0eea378b8422ab760745c7e854e78ed42a0", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 67, "deletions": 124, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -8,9 +8,7 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::collections::hash_map::DefaultHasher;\n-use std::fmt;\n-use std::hash::Hash;\n-use std::hash::Hasher;\n+use std::hash::{Hash, Hasher};\n use std::path::PathBuf;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n@@ -87,20 +85,16 @@ impl TypeError<'_> {\n /// in parentheses after some larger message. You should also invoke `note_and_explain_type_err()`\n /// afterwards to present additional details, particularly when it comes to lifetime-related\n /// errors.\n-impl<'tcx> fmt::Display for TypeError<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl<'tcx> TypeError<'tcx> {\n+    pub fn to_string(self, tcx: TyCtxt<'tcx>) -> String {\n         use self::TypeError::*;\n-        fn report_maybe_different(\n-            f: &mut fmt::Formatter<'_>,\n-            expected: &str,\n-            found: &str,\n-        ) -> fmt::Result {\n+        fn report_maybe_different(expected: &str, found: &str) -> String {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n-                write!(f, \"expected {}, found a different {}\", expected, found)\n+                format!(\"expected {}, found a different {}\", expected, found)\n             } else {\n-                write!(f, \"expected {}, found {}\", expected, found)\n+                format!(\"expected {}, found {}\", expected, found)\n             }\n         }\n \n@@ -109,64 +103,59 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             _ => String::new(),\n         };\n \n-        match *self {\n-            CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n-            CyclicConst(_) => write!(f, \"encountered a self-referencing constant\"),\n-            Mismatch => write!(f, \"types differ\"),\n+        match self {\n+            CyclicTy(_) => format!(\"cyclic type of infinite size\"),\n+            CyclicConst(_) => format!(\"encountered a self-referencing constant\"),\n+            Mismatch => format!(\"types differ\"),\n             ConstnessMismatch(values) => {\n-                write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n+                format!(\"expected {} bound, found {} bound\", values.expected, values.found)\n             }\n             PolarityMismatch(values) => {\n-                write!(f, \"expected {} polarity, found {} polarity\", values.expected, values.found)\n+                format!(\"expected {} polarity, found {} polarity\", values.expected, values.found)\n             }\n             UnsafetyMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n             AbiMismatch(values) => {\n-                write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n+                format!(\"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n-            ArgumentMutability(_) | Mutability => write!(f, \"types differ in mutability\"),\n-            TupleSize(values) => write!(\n-                f,\n+            ArgumentMutability(_) | Mutability => format!(\"types differ in mutability\"),\n+            TupleSize(values) => format!(\n                 \"expected a tuple with {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n             ),\n-            FixedArraySize(values) => write!(\n-                f,\n+            FixedArraySize(values) => format!(\n                 \"expected an array with a fixed size of {} element{}, found one with {} element{}\",\n                 values.expected,\n                 pluralize!(values.expected),\n                 values.found,\n                 pluralize!(values.found)\n             ),\n-            ArgCount => write!(f, \"incorrect number of function parameters\"),\n-            FieldMisMatch(adt, field) => write!(f, \"field type mismatch: {}.{}\", adt, field),\n-            RegionsDoesNotOutlive(..) => write!(f, \"lifetime mismatch\"),\n+            ArgCount => format!(\"incorrect number of function parameters\"),\n+            FieldMisMatch(adt, field) => format!(\"field type mismatch: {}.{}\", adt, field),\n+            RegionsDoesNotOutlive(..) => format!(\"lifetime mismatch\"),\n             // Actually naming the region here is a bit confusing because context is lacking\n             RegionsInsufficientlyPolymorphic(..) => {\n-                write!(f, \"one type is more general than the other\")\n+                format!(\"one type is more general than the other\")\n             }\n-            RegionsOverlyPolymorphic(br, _) => write!(\n-                f,\n+            RegionsOverlyPolymorphic(br, _) => format!(\n                 \"expected concrete lifetime, found bound lifetime parameter{}\",\n                 br_string(br)\n             ),\n-            RegionsPlaceholderMismatch => write!(f, \"one type is more general than the other\"),\n-            ArgumentSorts(values, _) | Sorts(values) => ty::tls::with(|tcx| {\n-                let (mut expected, mut found) = with_forced_trimmed_paths!((\n-                    values.expected.sort_string(tcx),\n-                    values.found.sort_string(tcx),\n-                ));\n+            RegionsPlaceholderMismatch => format!(\"one type is more general than the other\"),\n+            ArgumentSorts(values, _) | Sorts(values) => {\n+                let mut expected = values.expected.sort_string(tcx);\n+                let mut found = values.found.sort_string(tcx);\n                 if expected == found {\n                     expected = values.expected.sort_string(tcx);\n                     found = values.found.sort_string(tcx);\n                 }\n-                report_maybe_different(f, &expected, &found)\n-            }),\n-            Traits(values) => ty::tls::with(|tcx| {\n+                report_maybe_different(&expected, &found)\n+            }\n+            Traits(values) => {\n                 let (mut expected, mut found) = with_forced_trimmed_paths!((\n                     tcx.def_path_str(values.expected),\n                     tcx.def_path_str(values.found),\n@@ -175,12 +164,8 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     expected = tcx.def_path_str(values.expected);\n                     found = tcx.def_path_str(values.found);\n                 }\n-                report_maybe_different(\n-                    f,\n-                    &format!(\"trait `{expected}`\"),\n-                    &format!(\"trait `{found}`\"),\n-                )\n-            }),\n+                report_maybe_different(&format!(\"trait `{expected}`\"), &format!(\"trait `{found}`\"))\n+            }\n             IntMismatch(ref values) => {\n                 let expected = match values.expected {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n@@ -190,41 +175,34 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                     ty::IntVarValue::IntType(ty) => ty.name_str(),\n                     ty::IntVarValue::UintType(ty) => ty.name_str(),\n                 };\n-                write!(f, \"expected `{}`, found `{}`\", expected, found)\n+                format!(\"expected `{}`, found `{}`\", expected, found)\n             }\n             FloatMismatch(ref values) => {\n-                write!(\n-                    f,\n+                format!(\n                     \"expected `{}`, found `{}`\",\n                     values.expected.name_str(),\n                     values.found.name_str()\n                 )\n             }\n-            VariadicMismatch(ref values) => write!(\n-                f,\n+            VariadicMismatch(ref values) => format!(\n                 \"expected {} fn, found {} function\",\n                 if values.expected { \"variadic\" } else { \"non-variadic\" },\n                 if values.found { \"variadic\" } else { \"non-variadic\" }\n             ),\n-            ProjectionMismatched(ref values) => ty::tls::with(|tcx| {\n-                write!(\n-                    f,\n-                    \"expected {}, found {}\",\n-                    tcx.def_path_str(values.expected),\n-                    tcx.def_path_str(values.found)\n-                )\n-            }),\n+            ProjectionMismatched(ref values) => format!(\n+                \"expected {}, found {}\",\n+                tcx.def_path_str(values.expected),\n+                tcx.def_path_str(values.found)\n+            ),\n             ExistentialMismatch(ref values) => report_maybe_different(\n-                f,\n                 &format!(\"trait `{}`\", values.expected),\n                 &format!(\"trait `{}`\", values.found),\n             ),\n             ConstMismatch(ref values) => {\n-                write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n+                format!(\"expected `{}`, found `{}`\", values.expected, values.found)\n             }\n-            IntrinsicCast => write!(f, \"cannot coerce intrinsics to function pointers\"),\n-            TargetFeatureCast(_) => write!(\n-                f,\n+            IntrinsicCast => format!(\"cannot coerce intrinsics to function pointers\"),\n+            TargetFeatureCast(_) => format!(\n                 \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n             ),\n         }\n@@ -259,75 +237,23 @@ impl<'tcx> TypeError<'tcx> {\n }\n \n impl<'tcx> Ty<'tcx> {\n-    pub fn sort_string(self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n+    pub fn sort_string(self, tcx: TyCtxt<'tcx>) -> String {\n         match *self.kind() {\n-            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n-                format!(\"`{}`\", self).into()\n-            }\n-            ty::Tuple(ref tys) if tys.is_empty() => format!(\"`{}`\", self).into(),\n-\n-            ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did())).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(t, n) => {\n-                if t.is_simple_ty() {\n-                    return format!(\"array `{}`\", self).into();\n-                }\n-\n-                let n = tcx.lift(n).unwrap();\n-                if let ty::ConstKind::Value(v) = n.kind() {\n-                    if let Some(n) = v.try_to_machine_usize(tcx) {\n-                        return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n-                    }\n-                }\n-                \"array\".into()\n-            }\n-            ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n-            ty::Slice(_) => \"slice\".into(),\n-            ty::RawPtr(tymut) => {\n-                let tymut_string = match tymut.mutbl {\n-                    hir::Mutability::Mut => tymut.to_string(),\n-                    hir::Mutability::Not => format!(\"const {}\", tymut.ty),\n-                };\n-\n-                if tymut_string != \"_\" && (tymut.ty.is_simple_text() || tymut_string.len() < \"const raw pointer\".len()) {\n-                    format!(\"`*{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    \"raw pointer\".into()\n-                }\n-            },\n-            ty::Ref(_, ty, mutbl) => {\n-                let tymut = ty::TypeAndMut { ty, mutbl };\n-                let tymut_string = tymut.to_string();\n-\n-                if tymut_string != \"_\"\n-                    && (ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len())\n-                {\n-                    format!(\"`&{}`\", tymut_string).into()\n-                } else {\n-                    // Unknown type name, it's long or has type arguments\n-                    match mutbl {\n-                        hir::Mutability::Mut => \"mutable reference\",\n-                        _ => \"reference\",\n-                    }\n-                    .into()\n-                }\n-            }\n             ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n                 DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n                 DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n                 _ => \"fn item\".into(),\n             },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n-                format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n+                format!(\"`dyn {}`\", tcx.def_path_str(principal.def_id()))\n             }\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n             ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) |\n             ty::GeneratorWitnessMIR(..) => \"generator witness\".into(),\n-            ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integer\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point number\".into(),\n@@ -337,9 +263,14 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n-            ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n+            ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n             ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n             ty::Error(_) => \"type error\".into(),\n+            _ => {\n+                let width = tcx.sess.diagnostic_width();\n+                let length_limit = std::cmp::max(width / 4, 15);\n+                format!(\"`{}`\", tcx.ty_string_with_limit(self, length_limit))\n+            }\n         }\n     }\n \n@@ -386,16 +317,14 @@ impl<'tcx> Ty<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n-        let width = self.sess.diagnostic_width();\n-        let length_limit = width.saturating_sub(30);\n+    pub fn ty_string_with_limit(self, ty: Ty<'tcx>, length_limit: usize) -> String {\n         let mut type_limit = 50;\n         let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .pretty_print_type(ty)\n             .expect(\"could not write to `String`\")\n             .into_buffer();\n-        if regular.len() <= width {\n-            return (regular, None);\n+        if regular.len() <= length_limit {\n+            return regular;\n         }\n         let mut short;\n         loop {\n@@ -415,6 +344,20 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n             type_limit -= 1;\n         }\n+        short\n+    }\n+\n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let width = self.sess.diagnostic_width();\n+        let length_limit = width.saturating_sub(30);\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= width {\n+            return (regular, None);\n+        }\n+        let short = self.ty_string_with_limit(ty, length_limit);\n         if regular == short {\n             return (regular, None);\n         }"}, {"sha": "ad7d479896fd04eddacaaa4e3f58fce3a50eaff7", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2454,7 +2454,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .at(&cause, obligation.param_env)\n             .define_opaque_types(false)\n             .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n-            .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{e}`\"))?;\n+            .map_err(|e| {\n+                debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e.to_string(self.tcx()))\n+            })?;\n         nested_obligations.extend(obligations);\n \n         if !self.is_intercrate()"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "src/tools/clippy/tests/ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrack-diagnostics.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "a2a2a41c7a5a130d75f5fa6396213211d9092864", "filename": "tests/run-make-fulldeps/type-mismatch-same-crate-name/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Ftype-mismatch-same-crate-name%2FMakefile?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,7 +11,7 @@ all:\n \t\ttr -d '\\r\\n' | $(CGREP) -e \\\n \t\"mismatched types.*\\\n \tcrateB::try_foo\\(foo2\\);.*\\\n-\texpected struct \\`crateA::foo::Foo\\`, found struct \\`Foo\\`.*\\\n+\texpected \\`crateA::foo::Foo\\`, found \\`Foo\\`.*\\\n \tdifferent versions of crate \\`crateA\\`.*\\\n \tmismatched types.*\\\n \tcrateB::try_bar\\(bar2\\);.*\\"}, {"sha": "39418d359288bafbbcd4a5bb0712b81c683dc312", "filename": "tests/rustdoc-ui/track-diagnostics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Ftrack-diagnostics.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/track-diagnostics.rs:LL:CC\n    |\n LL | const S: A = B;\n-   |              ^ expected struct `A`, found struct `B`\n+   |              ^ expected `A`, found `B`\n -Ztrack-diagnostics: created at compiler/rustc_infer/src/infer/error_reporting/mod.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "de92841d7f18e835699495ea9f5e8744ea74cebb", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ LL | || ) -> ()\n LL | |  {\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected `&Layout`, found struct `Layout`\n+   | |__^ expected `&Layout`, found `Layout`\n    |\n note: function defined here\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:10:4"}, {"sha": "7a495380f2ba17376e5bf75bdf2e1f387b8035cf", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,12 +9,12 @@ LL | || ) {\n    | ||_- arguments to this function are incorrect\n LL | |      loop {}\n LL | |  }\n-   | |__^ expected struct `Layout`, found struct `core::alloc::Layout`\n+   | |__^ expected `Layout`, found `core::alloc::Layout`\n    |\n-   = note: struct `core::alloc::Layout` and struct `Layout` have similar names, but are actually distinct types\n-note: struct `core::alloc::Layout` is defined in crate `core`\n+   = note: `core::alloc::Layout` and `Layout` have similar names, but are actually distinct types\n+note: `core::alloc::Layout` is defined in crate `core`\n   --> $SRC_DIR/core/src/alloc/layout.rs:LL:COL\n-note: struct `Layout` is defined in the current crate\n+note: `Layout` is defined in the current crate\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:7:1\n    |\n LL | struct Layout;"}, {"sha": "6076b7ccb8ff6f3ef7e8cf15a7d6c7b4c017059e", "filename": "tests/ui/argument-suggestions/formal-and-expected-differ.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fformal-and-expected-differ.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:29\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |                        -    ^^^^^^^ expected `f32`, found `u32`\n+   |                        -    ^^^^^^^ expected `S<f32>`, found `S<u32>`\n    |                        |\n    |                        arguments to this struct are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/formal-and-expected-differ.rs:22:24\n    |\n LL |     let _: U<_, u32> = U(1, S(3u32));\n-   |            ---------   ^^^^^^^^^^^^^ expected `u32`, found `f32`\n+   |            ---------   ^^^^^^^^^^^^^ expected `U<_, u32>`, found `U<i32, f32>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "d26f33d098be09448c03019c15a274675836c194", "filename": "tests/ui/argument-suggestions/invalid_arguments.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Finvalid_arguments.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -100,7 +100,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:24:18\n    |\n LL |   three_arg_diff(X{}, 1.0, \"\");\n-   |   -------------- ^^^ expected `i32`, found struct `X`\n+   |   -------------- ^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -114,7 +114,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:25:21\n    |\n LL |   three_arg_diff(1, X {}, \"\");\n-   |   --------------    ^^^^ expected `f32`, found struct `X`\n+   |   --------------    ^^^^ expected `f32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -128,7 +128,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:26:26\n    |\n LL |   three_arg_diff(1, 1.0, X {});\n-   |   --------------         ^^^^ expected `&str`, found struct `X`\n+   |   --------------         ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -142,9 +142,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:28:3\n    |\n LL |   three_arg_diff(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ---- expected `f32`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -156,9 +156,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:29:3\n    |\n LL |   three_arg_diff(X {}, 1.0, X {});\n-   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----       ---- expected `&str`, found `X`\n    |                  |\n-   |                  expected `i32`, found struct `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -170,9 +170,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:30:3\n    |\n LL |   three_arg_diff(1, X {}, X {});\n-   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^    ----  ---- expected `&str`, found `X`\n    |                     |\n-   |                     expected `f32`, found struct `X`\n+   |                     expected `f32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -184,10 +184,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:32:3\n    |\n LL |   three_arg_diff(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                  |     |\n-   |                  |     expected `f32`, found struct `X`\n-   |                  expected `i32`, found struct `X`\n+   |                  |     expected `f32`, found `X`\n+   |                  expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:8:4\n@@ -199,7 +199,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:34:20\n    |\n LL |   three_arg_repeat(X {}, 1, \"\");\n-   |   ---------------- ^^^^ expected `i32`, found struct `X`\n+   |   ---------------- ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -213,7 +213,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:35:23\n    |\n LL |   three_arg_repeat(1, X {}, \"\");\n-   |   ----------------    ^^^^ expected `i32`, found struct `X`\n+   |   ----------------    ^^^^ expected `i32`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -227,7 +227,7 @@ error[E0308]: mismatched types\n   --> $DIR/invalid_arguments.rs:36:26\n    |\n LL |   three_arg_repeat(1, 1, X {});\n-   |   ----------------       ^^^^ expected `&str`, found struct `X`\n+   |   ----------------       ^^^^ expected `&str`, found `X`\n    |   |\n    |   arguments to this function are incorrect\n    |\n@@ -241,9 +241,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:38:3\n    |\n LL |   three_arg_repeat(X {}, X {}, \"\");\n-   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ---- expected `i32`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -255,9 +255,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:39:3\n    |\n LL |   three_arg_repeat(X {}, 1, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----     ---- expected `&str`, found `X`\n    |                    |\n-   |                    expected `i32`, found struct `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -269,9 +269,9 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:40:3\n    |\n LL |   three_arg_repeat(1, X {}, X{});\n-   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^    ----  --- expected `&str`, found `X`\n    |                       |\n-   |                       expected `i32`, found struct `X`\n+   |                       expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4\n@@ -283,10 +283,10 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/invalid_arguments.rs:42:3\n    |\n LL |   three_arg_repeat(X {}, X {}, X {});\n-   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found struct `X`\n+   |   ^^^^^^^^^^^^^^^^ ----  ----  ---- expected `&str`, found `X`\n    |                    |     |\n-   |                    |     expected `i32`, found struct `X`\n-   |                    expected `i32`, found struct `X`\n+   |                    |     expected `i32`, found `X`\n+   |                    expected `i32`, found `X`\n    |\n note: function defined here\n   --> $DIR/invalid_arguments.rs:9:4"}, {"sha": "e4304988f9bee1990a9f5537d7c5ffcea2ce9524", "filename": "tests/ui/argument-suggestions/issue-100478.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-100478.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -41,7 +41,7 @@ error[E0308]: arguments to this function are incorrect\n   --> $DIR/issue-100478.rs:36:5\n    |\n LL |     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default());\n-   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected struct `T4`, found struct `T3`\n+   |     ^^^^^^^^^^^^ -------------                 -------------  ------------- expected `T4`, found `T3`\n    |                  |                             |\n    |                  |                             expected `T3`, found `T1`\n    |                  expected `T1`, found `T3`"}, {"sha": "7582082ac72ac7bb546b2ea6b33fba25ccaba2d5", "filename": "tests/ui/argument-suggestions/issue-101097.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-101097.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -128,7 +128,7 @@ LL |     f(C, C, A, B, A, A);\n    |     ^ -  -  -     -  - expected `C`, found `A`\n    |       |  |  |     |\n    |       |  |  |     expected `C`, found `A`\n-   |       |  |  expected struct `B`, found struct `A`\n+   |       |  |  expected `B`, found `A`\n    |       |  expected `A`, found `C`\n    |       expected `A`, found `C`\n    |"}, {"sha": "c2e6e001b17917ad6acaae9bb7b32664aa52a4b5", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 4 arguments but 7 arguments were supplied\n LL |     foo(&&A, B, C, D, E, F, G);\n    |     ^^^      -  -     -  - argument of type `F` unexpected\n    |              |  |     |\n-   |              |  |     expected `&E`, found struct `E`\n+   |              |  |     expected `&E`, found `E`\n    |              |  argument of type `C` unexpected\n    |              argument of type `B` unexpected\n    |"}, {"sha": "8cf48060a63528185329be15170080392ef02588", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -41,7 +41,7 @@ error[E0061]: this function takes 3 arguments but 2 arguments were supplied\n LL |   three_args(1, X {});\n    |   ^^^^^^^^^^---------\n    |             |   |\n-   |             |   expected `f32`, found struct `X`\n+   |             |   expected `f32`, found `X`\n    |             an argument of type `&str` is missing\n    |\n note: function defined here\n@@ -78,7 +78,7 @@ error[E0308]: arguments to this function are incorrect\n LL |   three_args(\"\", X {}, 1);\n    |   ^^^^^^^^^^ --  ----  - expected `&str`, found `{integer}`\n    |              |   |\n-   |              |   expected `f32`, found struct `X`\n+   |              |   expected `f32`, found `X`\n    |              expected `i32`, found `&'static str`\n    |\n note: function defined here"}, {"sha": "70cc60255c71759bc250ed3126abcd9d2e71eafd", "filename": "tests/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,14 +4,14 @@ error[E0308]: arguments to this function are incorrect\n LL |     foo(f, w);\n    |     ^^^\n    |\n-note: expected `i32`, found `u32`\n+note: expected fn pointer, found fn item\n   --> $DIR/two-mismatch-notes.rs:10:9\n    |\n LL |     foo(f, w);\n    |         ^\n    = note: expected fn pointer `fn(i32)`\n                  found fn item `fn(u32) {f}`\n-note: expected `i32`, found `isize`\n+note: expected `Wrapper<i32>`, found `Wrapper<isize>`\n   --> $DIR/two-mismatch-notes.rs:10:12\n    |\n LL |     foo(f, w);"}, {"sha": "d8b5b10d59148abd6706741db7ad9360911a0aad", "filename": "tests/ui/array-slice-vec/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -1,12 +1,12 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected `i32`, found array\n+    //~| expected `i32`, found `[{integer}; 3]`\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n     //~| expected reference `&i32`\n     //~| found reference `&[i32]`\n-    //~| expected `i32`, found slice\n+    //~| expected `&i32`, found `&[i32]`\n }"}, {"sha": "f20d99524dccd36d74a29d24ba6e2d7629a3aa21", "filename": "tests/ui/array-slice-vec/array-not-vector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Farray-not-vector.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |             ---   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n+   |             ---   ^^^^^^^^^ expected `i32`, found `[{integer}; 3]`\n    |             |\n    |             expected due to this\n \n error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |             ----   ^ expected `i32`, found slice `[i32]`\n+   |             ----   ^ expected `&i32`, found `&[i32]`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "47008e1d99946f68c440bcb39cd46ca1b73af2bf", "filename": "tests/ui/array-slice-vec/slice-to-vec-comparison.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Fslice-to-vec-comparison.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/slice-to-vec-comparison.rs:4:9\n    |\n LL |     a > b;\n-   |         ^ expected array of 0 elements, found struct `Vec`\n+   |         ^ expected `&[_; 0]`, found `&Vec<u8>`\n    |\n    = note: expected reference `&[_; 0]`\n               found reference `&Vec<u8>`"}, {"sha": "d45868151b16643d546d43785551e78a65bb5c09", "filename": "tests/ui/associated-consts/associated-const-generic-obligations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-consts%2Fassociated-const-generic-obligations.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0326]: implemented const `FROM` has an incompatible type for trait\n   --> $DIR/associated-const-generic-obligations.rs:14:17\n    |\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n+   |                 ^^^^^^^^^^^^ expected associated type, found `&'static str`\n    |\n note: type in trait\n   --> $DIR/associated-const-generic-obligations.rs:10:17"}, {"sha": "b64a4dab2065d1dc4746c5cd735758f204290fd0", "filename": "tests/ui/associated-type-bounds/elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Felision.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/elision.rs:5:79\n    |\n LL | fn f(x: &mut dyn Iterator<Item: Iterator<Item = &'_ ()>>) -> Option<&'_ ()> { x.next() }\n-   |                           -----------------------------      --------------   ^^^^^^^^ expected `&()`, found type parameter `impl Iterator<Item = &'_ ()>`\n+   |                           -----------------------------      --------------   ^^^^^^^^ expected `Option<&()>`, found `Option<impl Iterator<Item = &'_ ()>>`\n    |                           |                                  |\n    |                           |                                  expected `Option<&'static ()>` because of return type\n    |                           this type parameter"}, {"sha": "15cc9646b2c8e17ce2b90e8cf780862e3647f89c", "filename": "tests/ui/associated-type-bounds/issue-71443-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fissue-71443-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn hello<F: for<'a> Iterator<Item: 'a>>() {\n    |                                           - help: try adding a return type: `-> Incorrect`\n LL |     Incorrect\n-   |     ^^^^^^^^^ expected `()`, found struct `Incorrect`\n+   |     ^^^^^^^^^ expected `()`, found `Incorrect`\n \n error: aborting due to previous error\n "}, {"sha": "5fe53a27eb8540f076931b3de0638221db129fea", "filename": "tests/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n-   |          ----         ^^^^ expected struct `Black`, found struct `Blue`\n+   |          ----         ^^^^ expected `Black`, found `Blue`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n-   |          ----         ^^^^^ expected struct `Blue`, found struct `Black`\n+   |          ----         ^^^^^ expected `Blue`, found `Black`\n    |          |\n    |          arguments to this function are incorrect\n    |\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n-   |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n+   |                 ---------- ^^^^ expected `Black`, found `Blue`\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n@@ -44,7 +44,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n-   |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n+   |                 ---------- ^^^^^ expected `Blue`, found `Black`\n    |                 |\n    |                 arguments to this method are incorrect\n    |"}, {"sha": "380d0e95c13f3e4437e09cb601c7236c7a43e2c9", "filename": "tests/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -23,7 +23,7 @@ fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n     //~| found associated type `<I as Foo>::A`\n-    //~| expected struct `Bar`, found associated type\n+    //~| expected `Bar`, found\n     //~| expected struct `Bar`\n }\n "}, {"sha": "15ce4fc91cb306921e35e32800598f203c4e08c4", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-eq-3.rs:23:18\n    |\n LL |     let _: Bar = x.boo();\n-   |            ---   ^^^^^^^ expected struct `Bar`, found associated type\n+   |            ---   ^^^^^^^ expected `Bar`, found associated type\n    |            |\n    |            expected due to this\n    |"}, {"sha": "a6dbb0716143a1bfbdf183719bef0d4260d263ba", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:58:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected `Result<u8, MyErr>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "3c01fca2f4d8d5f97dfb6ec97aa867db4dd53b76", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n    |\n LL |     async fn foo(&self) -> i32 {\n-   |                            ^^^ expected struct `Pin`, found opaque type\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found opaque type\n    |\n note: type in trait\n   --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22"}, {"sha": "b8d83d0f28a3194d1e647c6b74ee8f2556a493a3", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n    |         |\n-   |         expected `()`, found enum `Result`\n+   |         expected `()`, found `Result<(), _>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`"}, {"sha": "3cde5cca3c3cdddda0dbd6b2b1f88accb40eae5e", "filename": "tests/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -89,7 +89,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n-        //~^ NOTE expected opaque type, found struct `Tuple`\n+        //~^ NOTE expected opaque type, found `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }"}, {"sha": "5a7316edd01f55ba5bca0df7e5c1a524a68db570", "filename": "tests/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -62,7 +62,7 @@ LL |     match tuple() {\n    |           ------- this expression has type `impl Future<Output = Tuple>`\n LL |\n LL |         Tuple(_) => {}\n-   |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n+   |         ^^^^^^^^ expected opaque type, found `Tuple`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-61076.rs:56:21"}, {"sha": "85fa04446cccf51903ced200b4c466bac7386308", "filename": "tests/ui/async-await/issue-98634.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissue-98634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-98634.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n   --> $DIR/issue-98634.rs:45:23\n    |\n LL |         StructAsync { callback }.await;\n-   |                       ^^^^^^^^ expected struct `Pin`, found opaque type\n+   |                       ^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21\n@@ -21,7 +21,7 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n   --> $DIR/issue-98634.rs:45:9\n    |\n LL |         StructAsync { callback }.await;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21\n@@ -40,7 +40,7 @@ error[E0271]: expected `fn() -> impl Future<Output = ()> {callback}` to be a fn\n   --> $DIR/issue-98634.rs:45:33\n    |\n LL |         StructAsync { callback }.await;\n-   |                                 ^^^^^^ expected struct `Pin`, found opaque type\n+   |                                 ^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-98634.rs:24:21"}, {"sha": "eef711910a1a08fbef8b3ba8455f37754111d814", "filename": "tests/ui/async-await/issues/issue-102206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     std::mem::size_of_val(foo());\n    |     --------------------- ^^^^^\n    |     |                     |\n-   |     |                     expected reference, found opaque type\n+   |     |                     expected `&_`, found opaque type\n    |     |                     help: consider borrowing here: `&foo()`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "592ef7faf81379f4b54c619bf74621548504a66b", "filename": "tests/ui/async-await/proper-span-for-type-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/proper-span-for-type-error.rs:8:5\n    |\n LL |     a().await\n-   |     ^^^^^^^^^ expected enum `Result`, found `()`\n+   |     ^^^^^^^^^ expected `Result<(), i32>`, found `()`\n    |\n    = note:   expected enum `Result<(), i32>`\n            found unit type `()`"}, {"sha": "2db0666f1ae6847ed4c8c292b160b7ae9198a103", "filename": "tests/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -127,7 +127,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Ok(_) => {}\n-   |         ^^^^^ expected opaque type, found enum `Result`\n+   |         ^^^^^ expected opaque type, found `Result<_, _>`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await.rs:57:28\n@@ -148,7 +148,7 @@ LL |     match dummy_result() {\n    |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n ...\n LL |         Err(_) => {}\n-   |         ^^^^^^ expected opaque type, found enum `Result`\n+   |         ^^^^^^ expected opaque type, found `Result<_, _>`\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/suggest-missing-await.rs:57:28"}, {"sha": "8e98bfcd90fbc50a3a7ca0700ff72c3a6bb7dbf3", "filename": "tests/ui/autoref-autoderef/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fautoref-autoderef%2Fissue-38940.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-38940.rs:49:22\n    |\n LL |     let x: &Bottom = &t;\n-   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected `&Bottom`, found `&Top`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "63e6d76843d18b0f98a635157b151f59e3309763", "filename": "tests/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | mod foo { pub struct bar; }\n LL |     let bar = 5;\n    |         ^^^   - this expression has type `{integer}`\n    |         |\n-   |         expected integer, found struct `bar`\n+   |         expected integer, found `bar`\n    |         `bar` is interpreted as a unit struct, not a new binding\n    |         help: introduce a new binding instead: `other_bar`\n "}, {"sha": "d30ab1293431b59b60a1cab72af36bfde5a059a2", "filename": "tests/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:3:15\n    |\n LL | pub fn f() -> String {\n-   |        -      ^^^^^^ expected struct `String`, found `()`\n+   |        -      ^^^^^^ expected `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:8:15\n    |\n LL | pub fn g() -> String {\n-   |        -      ^^^^^^ expected struct `String`, found `()`\n+   |        -      ^^^^^^ expected `String`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();"}, {"sha": "c119b69da2294e1b259dd993581be77d23c69402", "filename": "tests/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {\n-   |    ---      ^^^^^^ expected struct `String`, found `()`\n+   |    ---      ^^^^^^ expected `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {\n-   |    ---      ^^^^^^ expected struct `String`, found `()`\n+   |    ---      ^^^^^^ expected `String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()"}, {"sha": "8f93e5a356fa670cec4ec756f619e1930535490a", "filename": "tests/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13624.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected `()`, found enum `Enum`\n+    //~| expected `()`, found `Enum`\n   }\n }\n \n@@ -19,7 +19,7 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected `()`, found enum `Enum`\n+        //~| expected `()`, found `Enum`\n         }\n       }\n     }"}, {"sha": "d41bd057f8246c0428a197d9901cd27f521ddbd8", "filename": "tests/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Enum`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Enum`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "677b40aaa9dadae3099cf32b6c1d7c100cb1b884", "filename": "tests/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -20,7 +20,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n LL |   b + 3\n-   |   ^^^^^ expected `()`, found struct `Bob`\n+   |   ^^^^^ expected `()`, found `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "de7fd39a20caa1952b37828d1580c1d4129e490a", "filename": "tests/ui/block-result/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-5500.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected unit type `()`\n     //~| found reference `&_`\n-    //~| expected `()`, found reference\n+    //~| expected `()`, found `&_`\n }"}, {"sha": "8cd4bd65871a3601421098c8e6b6a4d84f69104f", "filename": "tests/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected `()`, found reference\n+   |     ^^^^^^^^^ expected `()`, found `&_`\n    |\n    = note: expected unit type `()`\n               found reference `&_`"}, {"sha": "c03f35884b8a4099af99a4c650135c5c6f3bb84e", "filename": "tests/ui/box/issue-82446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fbox%2Fissue-82446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fbox%2Fissue-82446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Fissue-82446.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-82446.rs:11:9\n    |\n LL |         val\n-   |         ^^^ expected struct `Box`, found reference\n+   |         ^^^ expected `Box<dyn MyTrait>`, found `&Box<dyn MyTrait>`\n    |\n    = note: expected struct `Box<(dyn MyTrait + 'static)>`\n            found reference `&Box<(dyn MyTrait + 'static)>`"}, {"sha": "5d65c87b0fd612d136a3ebbf28f1027b1f3a8f70", "filename": "tests/ui/closures/issue-78720.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fclosures%2Fissue-78720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fclosures%2Fissue-78720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-78720.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-78720.rs:7:39\n    |\n LL |     fn map2<F>(self, f: F) -> Map2<F> {}\n-   |                                       ^^ expected struct `Map2`, found `()`\n+   |                                       ^^ expected `Map2<F>`, found `()`\n    |\n    = note: expected struct `Map2<F>`\n            found unit type `()`"}, {"sha": "90eb75f2bdfd181bff427bee458f8087b869698e", "filename": "tests/ui/coercion/coerce-block-tail-26978.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-26978.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-26978.rs:9:9\n    |\n LL |     f(&{x});\n-   |         ^ expected `i32`, found struct `Box`\n+   |         ^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "7e14f42eaafce851c4f2e07fc19353f9ebd21e2b", "filename": "tests/ui/coercion/coerce-block-tail-57749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-57749.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-57749.rs:33:14\n    |\n LL |     reset(&{ Homura });\n-   |              ^^^^^^ expected `u32`, found struct `Homura`\n+   |              ^^^^^^ expected `u32`, found `Homura`\n    |\n help: consider dereferencing the type\n    |"}, {"sha": "d556d013bb5838f3c9aa1671cfcf6be84bb73f09", "filename": "tests/ui/coercion/coerce-block-tail-83783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83783.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-83783.rs:7:32\n    |\n LL |     _consume_reference::<i32>(&async { Box::new(7_i32) }.await);\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "3cfebb8a54372d9a70f54f2a1373fb2739f19308", "filename": "tests/ui/coercion/coerce-block-tail-83850.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail-83850.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail-83850.rs:5:7\n    |\n LL |     f(&Box::new([1, 2]));\n-   |     - ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found struct `Box`\n+   |     - ^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&Box<[{integer}; 2]>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "7044fc3cefc4c281cf2219ce636b46f0be828c5a", "filename": "tests/ui/coercion/coerce-block-tail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-block-tail.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-block-tail.rs:4:23\n    |\n LL |     let _: &i32 = & { Box::new(1i32) };\n-   |                       ^^^^^^^^^^^^^^ expected `i32`, found struct `Box`\n+   |                       ^^^^^^^^^^^^^^ expected `i32`, found `Box<i32>`\n    |\n    = note: expected type `i32`\n             found struct `Box<i32>`"}, {"sha": "f94422a9269856b29dd7e1bb670d5e259ae92cff", "filename": "tests/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:27\n    |\n LL |     let _ = type_ascribe!(box { [1, 2, 3] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:27\n    |\n LL |     let _ = type_ascribe!(box if true { [1, 2, 3] } else { [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:27\n    |\n LL |     let _ = type_ascribe!(box match true { true => [1, 2, 3], false => [1, 3, 4] }, Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:27\n    |\n LL |     let _ = type_ascribe!(box { |x| (x as u8) }, Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:13:33]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n               found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:33: 13:36]>`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:27\n    |\n LL |     let _ = type_ascribe!(box if true { false } else { true }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<bool>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<bool>`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:27\n    |\n LL |     let _ = type_ascribe!(box match true { true => 'a', false => 'b' }, Box<dyn Debug>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Debug>`, found `Box<char>`\n    |\n    = note: expected struct `Box<dyn Debug>`\n               found struct `Box<char>`\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:27\n    |\n LL |     let _ = type_ascribe!(&{ [1, 2, 3] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:27\n    |\n LL |     let _ = type_ascribe!(&if true { [1, 2, 3] } else { [1, 3, 4] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:19:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => [1, 2, 3], false => [1, 3, 4] }, &[i32]);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[i32]`, found `&[i32; 3]`\n    |\n    = note: expected reference `&[i32]`\n               found reference `&[i32; 3]`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:27\n    |\n LL |     let _ = type_ascribe!(&{ |x| (x as u8) }, &dyn Fn(i32) -> _);\n-   |                           ^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^ expected `&dyn Fn(i32) -> u8`, found `&[closure@coerce-expect-unsized-ascribed.rs:21:30]`\n    |\n    = note: expected reference `&dyn Fn(i32) -> u8`\n               found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:30: 21:33]`\n@@ -92,7 +92,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:27\n    |\n LL |     let _ = type_ascribe!(&if true { false } else { true }, &dyn Debug);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `bool`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&bool`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&bool`\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:27\n    |\n LL |     let _ = type_ascribe!(&match true { true => 'a', false => 'b' }, &dyn Debug);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Debug`, found `char`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&dyn Debug`, found `&char`\n    |\n    = note: expected reference `&dyn Debug`\n               found reference `&char`\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:27\n    |\n LL |     let _ = type_ascribe!(Box::new([1, 2, 3]), Box<[i32]>);\n-   |                           ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n+   |                           ^^^^^^^^^^^^^^^^^^^ expected `Box<[i32]>`, found `Box<[i32; 3]>`\n    |\n    = note: expected struct `Box<[i32]>`\n               found struct `Box<[i32; 3]>`\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:27\n    |\n LL |     let _ = type_ascribe!(Box::new(|x| (x as u8)), Box<dyn Fn(i32) -> _>);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected trait object `dyn Fn`, found closure\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ expected `Box<dyn Fn(i32) -> u8>`, found `Box<[closure@coerce-expect-unsized-ascribed.rs:26:36]>`\n    |\n    = note: expected struct `Box<dyn Fn(i32) -> u8>`\n               found struct `Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:36: 26:39]>`"}, {"sha": "3c737358adc77ed1be8d99ae488f0271ddeb0872", "filename": "tests/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -82,7 +82,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n-   |            ------   ^^^^^^^^^^^^ expected `!`, found integer\n+   |            ------   ^^^^^^^^^^^^ expected `[!; 2]`, found `[{integer}; 2]`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "288e945f1f8d5eb0625bfaf5357849ff89ed4085", "filename": "tests/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n-   |    ---      ^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ---      ^^^^^^^^^^^^^^^ expected `Result<u8, u64>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);"}, {"sha": "b99235dd37f89ae0bcb2c019820fd1e60f119ff8", "filename": "tests/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected `&[i32]`, found array `[{integer}; 1]`\n+    //~| expected `&[i32]`, found `[{integer}; 1]`\n }"}, {"sha": "c7b856a57ebc9516f01c40fa6a8982cb8ac02508", "filename": "tests/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |            ------   ^^^\n    |            |        |\n-   |            |        expected `&[i32]`, found array `[{integer}; 1]`\n+   |            |        expected `&[i32]`, found `[{integer}; 1]`\n    |            |        help: consider borrowing here: `&[0]`\n    |            expected due to this\n "}, {"sha": "f632a53f264e027bbb5018662e3281fe1c7b1979", "filename": "tests/ui/compare-method/bad-self-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcompare-method%2Fbad-self-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `poll` has an incompatible type for trait\n LL |     fn poll(self, _: &mut Context<'_>) -> Poll<()> {\n    |             ^^^^\n    |             |\n-   |             expected struct `Pin`, found struct `MyFuture`\n+   |             expected `Pin<&mut MyFuture>`, found `MyFuture`\n    |             help: change the self-receiver type to match the trait: `self: Pin<&mut MyFuture>`\n    |\n    = note: expected signature `fn(Pin<&mut MyFuture>, &mut Context<'_>) -> Poll<_>`\n@@ -16,7 +16,7 @@ error[E0053]: method `foo` has an incompatible type for trait\n LL |     fn foo(self: Box<Self>) {}\n    |            ------^^^^^^^^^\n    |            |     |\n-   |            |     expected struct `MyFuture`, found struct `Box`\n+   |            |     expected `MyFuture`, found `Box<MyFuture>`\n    |            help: change the self-receiver type to match the trait: `self`\n    |\n note: type in trait\n@@ -31,7 +31,7 @@ error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/bad-self-type.rs:24:18\n    |\n LL |     fn bar(self) {}\n-   |                  ^ expected enum `Option`, found `()`\n+   |                  ^ expected `Option<()>`, found `()`\n    |\n note: type in trait\n   --> $DIR/bad-self-type.rs:18:21"}, {"sha": "9c4f0bc950b2dba0add854d123d752e82752ee5a", "filename": "tests/ui/const-generics/defaults/mismatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:7:26\n    |\n LL |     let e: Example<13> = ();\n-   |            -----------   ^^ expected struct `Example`, found `()`\n+   |            -----------   ^^ expected `Example`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:10:32\n    |\n LL |     let e: Example2<u32, 13> = ();\n-   |            -----------------   ^^ expected struct `Example2`, found `()`\n+   |            -----------------   ^^ expected `Example2`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:13:32\n    |\n LL |     let e: Example3<13, u32> = ();\n-   |            -----------------   ^^ expected struct `Example3`, found `()`\n+   |            -----------------   ^^ expected `Example3`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:16:26\n    |\n LL |     let e: Example3<7> = ();\n-   |            -----------   ^^ expected struct `Example3`, found `()`\n+   |            -----------   ^^ expected `Example3<7>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatch.rs:19:26\n    |\n LL |     let e: Example4<7> = ();\n-   |            -----------   ^^ expected struct `Example4`, found `()`\n+   |            -----------   ^^ expected `Example4<7>`, found `()`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "511ae58a1dcdd1408893b006b887bd5342208f89", "filename": "tests/ui/const-generics/generic_const_exprs/issue-79518-default_trait_method_normalization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-79518-default_trait_method_normalization.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n    |\n LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n-   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); std::mem::size_of::<Self::Assoc>()]`\n+   |         -------------------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `[(); std::mem::size_of::<Self::Assoc>()]`\n    |         |\n    |         expected because this is `<Self as Foo>::Assoc`\n    |"}, {"sha": "8879aec35e5994bf12f8b0363ab5a4f9bc30fc7f", "filename": "tests/ui/const-generics/issues/issue-67945-1.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | struct Bug<S> {\n    |            - this type parameter\n ...\n LL |         let x: S = MaybeUninit::uninit();\n-   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found union `MaybeUninit`\n+   |                -   ^^^^^^^^^^^^^^^^^^^^^ expected type parameter `S`, found `MaybeUninit<_>`\n    |                |\n    |                expected due to this\n    |"}, {"sha": "b28ae8f7e7101480651342078ed330458f4da7dc", "filename": "tests/ui/const-generics/type_mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:5:26\n    |\n LL | fn bar<const N: u8>() -> [u8; N] {}\n-   |    ---                   ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    ---                   ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "5f45550a6279633d319357f64a90f69bbd81ee13", "filename": "tests/ui/const-generics/type_not_in_scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_not_in_scope.rs:7:33\n    |\n LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n-   |    ----                         ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    ----                         ^^^^^^^ expected `[u8; N]`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n "}, {"sha": "13cd5d17d4127ab89fd31917ef437b12f374c041", "filename": "tests/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 2, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:18:41\n    |\n LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 4, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "cae3adfa128d08c338fb3fe54017b49c119a7df7", "filename": "tests/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:16:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 2, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:18:41\n    |\n LL |     let _: A<'a, u16, {4u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `A<'_, u16, 4, 3>`, found `A<'_, u32, 2, 3>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "1667c77d124c5f3e3675cd32c46b8237a27f2577", "filename": "tests/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -8,7 +8,7 @@ const CONSTANT: S = S(0);\n enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n-    //~| expected `isize`, found struct `S`\n+    //~| expected `isize`, found `S`\n }\n \n fn main() {}"}, {"sha": "fe33ad4905a5cc261d4a5e3d613c8e2dd2a227d5", "filename": "tests/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-span.rs:9:9\n    |\n LL |     V = CONSTANT,\n-   |         ^^^^^^^^ expected `isize`, found struct `S`\n+   |         ^^^^^^^^ expected `isize`, found `S`\n \n error: aborting due to previous error\n "}, {"sha": "18f4f59d3785ceb4b3a25b34a551871a94831e51", "filename": "tests/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@\n \n const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n-//~| expected tuple, found `usize`\n+//~| expected `(usize,)`, found `usize`\n const ARR: [i32; TUP.0] = [];\n //~^ constant\n "}, {"sha": "65f0520f8a46ee19f747d3fd20d08246a0912173", "filename": "tests/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-tup-index-span.rs:3:23\n    |\n LL | const TUP: (usize,) = 5usize << 64;\n-   |                       ^^^^^^^^^^^^ expected tuple, found `usize`\n+   |                       ^^^^^^^^^^^^ expected `(usize,)`, found `usize`\n    |\n    = note: expected tuple `(usize,)`\n                found type `usize`"}, {"sha": "b6a1725076bc63cf3a8599fa1ce182d1629e065e", "filename": "tests/ui/consts/nested_erroneous_ctfe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fnested_erroneous_ctfe.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/nested_erroneous_ctfe.rs:2:16\n    |\n LL |     [9; || [9; []]];\n-   |                ^^ expected `usize`, found array of 0 elements\n+   |                ^^ expected `usize`, found `[_; 0]`\n    |\n    = note: expected type `usize`\n              found array `[_; 0]`"}, {"sha": "4f5af106613f634d7fb6f2d3b1c734d8efb64945", "filename": "tests/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/cross-borrow-trait.rs:10:26\n    |\n LL |     let _y: &dyn Trait = x;\n-   |             ----------   ^ expected `&dyn Trait`, found struct `Box`\n+   |             ----------   ^ expected `&dyn Trait`, found `Box<dyn Trait>`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "b5b79ed3771c32f3b6c965631e36b83c63a7ac5e", "filename": "tests/ui/deref-patterns/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fderef-patterns%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fderef-patterns%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef-patterns%2Fgate.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match String::new() {\n    |           ------------- this expression has type `String`\n LL |         \"\" | _ => {}\n-   |         ^^ expected struct `String`, found `&str`\n+   |         ^^ expected `String`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "38d201888272708725f605e61ca94a3d5dced661", "filename": "tests/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdestructure-trait-ref.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     let &&x = &1isize as &dyn T;\n    |          ^^   ----------------- this expression has type `&dyn T`\n    |          |\n-   |          expected trait object `dyn T`, found reference\n+   |          expected `dyn T`, found `&_`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^   -------------------- this expression has type `&&dyn T`\n    |           |\n-   |           expected trait object `dyn T`, found reference\n+   |           expected `dyn T`, found `&_`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n@@ -54,7 +54,7 @@ error[E0308]: mismatched types\n LL |     let box box x = Box::new(1isize) as Box<dyn T>;\n    |             ^^^^^   ------------------------------ this expression has type `Box<dyn T>`\n    |             |\n-   |             expected trait object `dyn T`, found struct `Box`\n+   |             expected `dyn T`, found `Box<_>`\n    |\n    = note: expected trait object `dyn T`\n                     found struct `Box<_>`"}, {"sha": "b285ee1f30482125dc8b0e461592338e76e64fb8", "filename": "tests/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     (x, y) = &(1, 2);\n    |     ^^^^^^   ------- this expression has type `&({integer}, {integer})`\n    |     |\n-   |     expected reference, found tuple\n+   |     expected `&({integer}, {integer})`, found `(_, _)`\n    |\n    = note: expected reference `&({integer}, {integer})`\n                   found tuple `(_, _)`"}, {"sha": "20b018b9f77212b7cfecb47be39ac3666929dc82", "filename": "tests/ui/diagnostic-width/long-E0308.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2Flong-E0308.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -16,7 +16,7 @@ LL |  |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok...\n LL |  |             Ok(\"\")\n LL |  |         ))))))))))))))))))))))))))))))\n LL |  |     ))))))))))))))))))))))))))))));\n-   |  |__________________________________^ expected struct `Atype`, found enum `Result`\n+   |  |__________________________________^ expected `Atype<Btype<..., ...>, ...>`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected struct `Atype<Btype<..., ...>, ...>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n@@ -32,7 +32,7 @@ LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n-   | |____________________________^ expected enum `Option`, found enum `Result`\n+   | |____________________________^ expected `Option<Result<..., ...>>`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected enum `Option<Result<..., ...>>`\n            the full type name has been written to '$TEST_BUILD_DIR/diagnostic-width/long-E0308/long-E0308.long-type-hash.txt'\n@@ -50,7 +50,7 @@ LL | |           Atype<\n ...  |\n LL | |       i32\n LL | |     > = ();\n-   | |     -   ^^ expected struct `Atype`, found `()`\n+   | |     -   ^^ expected `Atype<Btype<..., ...>, ...>`, found `()`\n    | |_____|\n    |       expected due to this\n    |\n@@ -69,7 +69,7 @@ LL | |         Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(Ok(...\n LL | |             Ok(Ok(Ok(Ok(Ok(Ok(Ok(\"\")))))))\n LL | |         ))))))))))))))))))))))))))))))\n LL | |     ))))))))))))))))))))))));\n-   | |____________________________^ expected `()`, found enum `Result`\n+   | |____________________________^ expected `()`, found `Result<Result<..., ...>, ...>`\n    |\n    = note: expected unit type `()`\n                    found enum `Result<Result<..., ...>, ...>`"}, {"sha": "a7ec192592e0d4d0deba2e4977737b38fbb8c433", "filename": "tests/ui/did_you_mean/brackets-to-braces-single-element.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fbrackets-to-braces-single-element.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:1:24\n    |\n LL | const A: [&str; 1] = { \"hello\" };\n-   |                        ^^^^^^^ expected array `[&'static str; 1]`, found `&str`\n+   |                        ^^^^^^^ expected `[&str; 1]`, found `&str`\n    |\n help: to create an array, use square brackets instead of curly braces\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:4:19\n    |\n LL | const B: &[u32] = &{ 1 };\n-   |                   ^^^^^^ expected slice `[u32]`, found integer\n+   |                   ^^^^^^ expected `&[u32]`, found `&{integer}`\n    |\n    = note: expected reference `&'static [u32]`\n               found reference `&{integer}`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n   --> $DIR/brackets-to-braces-single-element.rs:7:27\n    |\n LL | const C: &&[u32; 1] = &&{ 1 };\n-   |                           ^ expected array `[u32; 1]`, found integer\n+   |                           ^ expected `[u32; 1]`, found integer\n    |\n help: to create an array, use square brackets instead of curly braces\n    |"}, {"sha": "5e48871bb01bb840db6eacba8f7320b214e81646", "filename": "tests/ui/did_you_mean/compatible-variants-in-pat.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants-in-pat.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match f {\n    |           - this expression has type `Foo`\n LL |         Bar { x } => {\n-   |         ^^^^^^^^^ expected enum `Foo`, found struct `Bar`\n+   |         ^^^^^^^^^ expected `Foo`, found `Bar`\n    |\n help: try wrapping the pattern in `Foo::Bar`\n    |\n@@ -22,7 +22,7 @@ LL |     match s {\n LL |         S => {\n    |         ^\n    |         |\n-   |         expected enum `Option`, found struct `S`\n+   |         expected `Option<S>`, found `S`\n    |         `S` is interpreted as a unit struct, not a new binding\n    |\n    = note: expected enum `Option<S>`\n@@ -47,7 +47,7 @@ LL |     match s {\n LL |         S => {\n    |         ^\n    |         |\n-   |         expected enum `Result`, found struct `S`\n+   |         expected `Result<S, S>`, found `S`\n    |         `S` is interpreted as a unit struct, not a new binding\n    |\n    = note: expected enum `Result<S, S>`"}, {"sha": "7b88d93ead112bd21905a8c4de5660626d663f56", "filename": "tests/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | /     while false {\n LL | |\n LL | |         f();\n LL | |     }\n-   | |_____^ expected enum `Option`, found `()`\n+   | |_____^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL | fn b() -> Result<(), ()> {\n    |           -------------- expected `Result<(), ()>` because of return type\n LL |     f()\n-   |     ^^^ expected enum `Result`, found `()`\n+   |     ^^^ expected `Result<(), ()>`, found `()`\n    |\n    = note:   expected enum `Result<(), ()>`\n            found unit type `()`\n@@ -45,7 +45,7 @@ LL | /     for _ in [1, 2] {\n LL | |\n LL | |         f();\n LL | |     }\n-   | |_____^ expected enum `Option`, found `()`\n+   | |_____^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -62,7 +62,7 @@ error[E0308]: `?` operator has incompatible types\n   --> $DIR/compatible-variants.rs:35:5\n    |\n LL |     c()?\n-   |     ^^^^ expected enum `Option`, found `()`\n+   |     ^^^^ expected `Option<()>`, found `()`\n    |\n    = note: `?` operator cannot convert from `()` to `Option<()>`\n    = note:   expected enum `Option<()>`\n@@ -85,7 +85,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:42:25\n    |\n LL |     let _: Option<()> = while false {};\n-   |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |            ----------   ^^^^^^^^^^^^^^ expected `Option<()>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -100,7 +100,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:46:9\n    |\n LL |         while false {}\n-   |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |         ^^^^^^^^^^^^^^ expected `Option<()>`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:50:31\n    |\n LL |     let _: Result<i32, i32> = 1;\n-   |            ----------------   ^ expected enum `Result`, found integer\n+   |            ----------------   ^ expected `Result<i32, i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:53:26\n    |\n LL |     let _: Option<i32> = 1;\n-   |            -----------   ^ expected enum `Option`, found integer\n+   |            -----------   ^ expected `Option<i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -149,7 +149,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:56:28\n    |\n LL |     let _: Hey<i32, i32> = 1;\n-   |            -------------   ^ expected enum `Hey`, found integer\n+   |            -------------   ^ expected `Hey<i32, i32>`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:59:29\n    |\n LL |     let _: Hey<i32, bool> = false;\n-   |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n+   |            --------------   ^^^^^ expected `Hey<i32, bool>`, found `bool`\n    |            |\n    |            expected due to this\n    |\n@@ -181,7 +181,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:63:19\n    |\n LL |     let _ = Foo { bar };\n-   |                   ^^^ expected enum `Option`, found `i32`\n+   |                   ^^^ expected `Option<i32>`, found `i32`\n    |\n    = note: expected enum `Option<i32>`\n               found type `i32`\n@@ -194,7 +194,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:80:16\n    |\n LL |     let a: A = B::Fst;\n-   |            -   ^^^^^^ expected enum `A`, found enum `B`\n+   |            -   ^^^^^^ expected `A`, found `B`\n    |            |\n    |            expected due to this\n    |\n@@ -207,7 +207,7 @@ error[E0308]: mismatched types\n   --> $DIR/compatible-variants.rs:86:17\n    |\n LL |     let a: A2 = B::Fst;\n-   |            --   ^^^^^^ expected struct `A2`, found enum `B`\n+   |            --   ^^^^^^ expected `A2`, found `B`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "3819a5a187f97a8d0f4f725bfa5855d3d220a246", "filename": "tests/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:11:43\n    |\n LL |     this_function_expects_a_double_option(n);\n-   |     ------------------------------------- ^ expected enum `DoubleOption`, found `usize`\n+   |     ------------------------------------- ^ expected `DoubleOption<_>`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:27:33\n    |\n LL |     let _c = Context { wrapper: Payload{} };\n-   |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n+   |                                 ^^^^^^^^^ expected `Wrapper`, found `Payload`\n    |\n help: try wrapping the expression in `Wrapper`\n    |"}, {"sha": "32fb628c4707be78aeac0a2d4ad0bf714dd3dc3c", "filename": "tests/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/recursion_limit_deref.rs:51:22\n    |\n LL |     let x: &Bottom = &t;\n-   |            -------   ^^ expected struct `Bottom`, found struct `Top`\n+   |            -------   ^^ expected `&Bottom`, found `&Top`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "7d8293018d27b7e80f557f092a128dbbd82c6256", "filename": "tests/ui/disambiguate-identical-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdisambiguate-identical-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdisambiguate-identical-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdisambiguate-identical-names.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/disambiguate-identical-names.rs:13:10\n    |\n LL |     test(&v);\n-   |     ---- ^^ expected struct `Vec`, found struct `HashMap`\n+   |     ---- ^^ expected `&Vec<Vec<u32>>`, found `&HashMap<u8, u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "f5b5a4cccad2c0196705264176826c331c0d06a0", "filename": "tests/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | fn assert_sizeof() -> ! {\n    |                       - expected `!` because of return type\n LL |     unsafe {\n LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found array `[u8; 8]`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found `[u8; 8]`\n    |\n    = note: expected type `!`\n              found array `[u8; 8]`"}, {"sha": "d199864d99c2d280be5ec568500b714f1f2d65cd", "filename": "tests/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n+    //~| expected `dyn ToBar`, found `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "6dd3434fd21bef830e3bbf721f34ff32d73f7eff", "filename": "tests/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |     ----   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ----   ^^^^^^^^^^^^ expected `dyn ToBar`, found `Bar1`\n    |     |\n    |     expected due to the type of this binding\n    |"}, {"sha": "c55fb2c3e570993ac7ccc71290e175704712cdf5", "filename": "tests/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected trait object `dyn ToBar`, found struct `Bar1`\n+    //~| expected `dyn ToBar`, found `Bar1`\n     //~| expected trait object `dyn ToBar`\n     //~| found struct `Bar1`\n     //~| ERROR the size for values of type"}, {"sha": "d8d1057876f4f967b78e60bc8adc32d52f33a530", "filename": "tests/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |     ------   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ------   ^^^^^^^^^^^^ expected `dyn ToBar`, found `Bar1`\n    |     |\n    |     expected due to the type of this binding\n    |"}, {"sha": "ff77bd4cef88f3d714767f134dff59bdbe27c7a1", "filename": "tests/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:16:29\n    |\n LL |     let f3: &Fat<[usize]> = f2;\n-   |             -------------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -------------   ^^ expected `&Fat<[usize]>`, found `&Fat<[isize; 3]>`\n    |             |\n    |             expected due to this\n    |\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n    |\n LL |     let f3: &([usize],) = f2;\n-   |             -----------   ^^ expected slice `[usize]`, found array `[isize; 3]`\n+   |             -----------   ^^ expected `&([usize],)`, found `&([isize; 3],)`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "9f297915e58c9b17596ca9fc11aff97432c12520", "filename": "tests/ui/dst/dst-bad-coerce4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce4.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,15 +11,15 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n-    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected `&Fat<[isize; 3]>`, found `&Fat<[isize]>`\n     //~| expected reference `&Fat<[isize; 3]>`\n     //~| found reference `&Fat<[isize]>`\n \n     // Tuple with a vec of isizes.\n     let f1: &([isize],) = &([1, 2, 3],);\n     let f2: &([isize; 3],) = f1;\n     //~^ ERROR mismatched types\n-    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected `&([isize; 3],)`, found `&([isize],)`\n     //~| expected reference `&([isize; 3],)`\n     //~| found reference `&([isize],)`\n }"}, {"sha": "46e7dba817c846809647d2a3a6644a1bdb7ecf78", "filename": "tests/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:12:32\n    |\n LL |     let f2: &Fat<[isize; 3]> = f1;\n-   |             ----------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             ----------------   ^^ expected `&Fat<[isize; 3]>`, found `&Fat<[isize]>`\n    |             |\n    |             expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n-   |             --------------   ^^ expected array `[isize; 3]`, found slice `[isize]`\n+   |             --------------   ^^ expected `&([isize; 3],)`, found `&([isize],)`\n    |             |\n    |             expected due to this\n    |"}, {"sha": "66e1b9a092c364ffbe292a14a598aa0c45448123", "filename": "tests/ui/dyn-star/no-implicit-dyn-star.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-implicit-dyn-star.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/no-implicit-dyn-star.rs:6:48\n    |\n LL |     dyn_star_foreign::require_dyn_star_display(1usize);\n-   |     ------------------------------------------ ^^^^^^ expected trait object `dyn Display`, found `usize`\n+   |     ------------------------------------------ ^^^^^^ expected `dyn Display`, found `usize`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "75c3ab13caccc681b9658feedeca20dac9e58032", "filename": "tests/ui/empty/issue-37026.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fempty%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fempty%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fissue-37026.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |     let empty_struct::XEmpty2 = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^   -- this expression has type `()`\n    |         |\n-   |         expected `()`, found struct `XEmpty2`\n+   |         expected `()`, found `XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^   -- this expression has type `()`\n    |         |\n-   |         expected `()`, found struct `XEmpty6`\n+   |         expected `()`, found `XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "678502ba328894cdd7033a02a02ae830105b60e8", "filename": "tests/ui/error-codes/E0071.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ferror-codes%2FE0071.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ferror-codes%2FE0071.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0071.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,5 +3,5 @@ type FooAlias = Foo;\n \n fn main() {\n     let u = FooAlias { value: 0 };\n-    //~^ ERROR expected struct, variant or union type, found enum `Foo` [E0071]\n+    //~^ ERROR expected struct, variant or union type, found `Foo` [E0071]\n }"}, {"sha": "7bd4ddaf26be24dc44e7aae664e0855be0c6b733", "filename": "tests/ui/error-codes/E0071.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ferror-codes%2FE0071.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ferror-codes%2FE0071.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0071.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -1,4 +1,4 @@\n-error[E0071]: expected struct, variant or union type, found enum `Foo`\n+error[E0071]: expected struct, variant or union type, found `Foo`\n   --> $DIR/E0071.rs:5:13\n    |\n LL |     let u = FooAlias { value: 0 };"}, {"sha": "3e6dc5cefadf2e4275ece0df6e215d06c11e26e6", "filename": "tests/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ LL |     type B;\n LL | fn foo(r: &A) -> &B {\n    |                  -- expected `&B` because of return type\n LL |     r\n-   |     ^ expected extern type `B`, found extern type `A`\n+   |     ^ expected `&B`, found `&A`\n    |\n    = note: expected reference `&B`\n               found reference `&A`"}, {"sha": "d716bbe51affc9ec3953c4fa819afbb90c5ac113", "filename": "tests/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -302,7 +302,7 @@ error[E0308]: mismatched types\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |                                ^^^\n    |                                |\n-   |                                expected `usize`, found floating-point number\n+   |                                expected `&usize`, found `&{float}`\n    |                                arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n@@ -317,7 +317,7 @@ error[E0308]: mismatched types\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |                                   ^^^\n    |                                   |\n-   |                                   expected `usize`, found floating-point number\n+   |                                   expected `&usize`, found `&{float}`\n    |                                   arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`"}, {"sha": "c094a34b207d9219b10f0570dc7f107af4400bba", "filename": "tests/ui/fn/fn-item-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -34,8 +34,7 @@ fn main() {\n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n     //~| found fn item `fn(_) -> _ {bar::<Vec<u8>>}`\n-    //~| expected struct `String`, found struct `Vec`\n-    //~| different fn items have unique types, even if their signatures are the same\n+    //~| expected `String`, found `Vec<u8>`\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);"}, {"sha": "da90b8b81c8551b2dc0d225beb5dea0e1dd76930", "filename": "tests/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-item-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:34:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n-   |     --                ^^^^^^^^^^^^^^ expected struct `String`, found struct `Vec`\n+   |     --                ^^^^^^^^^^^^^^ expected `String`, found `Vec<u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -53,7 +53,7 @@ LL | fn eq<T>(x: T, y: T) {}\n    = help: consider casting both fn items to fn pointers using `as fn(isize) -> isize`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:41:26\n+  --> $DIR/fn-item-type.rs:40:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n    |     --                   ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n@@ -71,7 +71,7 @@ LL | fn eq<T>(x: T, y: T) {}\n    = help: consider casting both fn items to fn pointers using `as fn()`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-item-type.rs:46:19\n+  --> $DIR/fn-item-type.rs:45:19\n    |\n LL |     eq(foo::<u8>, bar::<u8> as fn(isize) -> isize);\n    |     --            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected fn item, found fn pointer"}, {"sha": "74f79f6df5ab5c7c76da98200eca193cb0510662", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/fn-pointer-mismatch.rs:11:43\n    |\n LL |     let g = if n % 2 == 0 { &foo } else { &bar };\n-   |                             ----          ^^^^ expected fn item, found a different fn item\n+   |                             ----          ^^^^ expected `&fn(u32) -> u32 {foo}`, found `&fn(u32) -> u32 {bar}`\n    |                             |\n    |                             expected because of this\n    |\n@@ -45,7 +45,7 @@ error[E0308]: mismatched types\n LL |     let c: fn(u32) -> u32 = &foo;\n    |            --------------   ^^^^\n    |            |                |\n-   |            |                expected fn pointer, found reference\n+   |            |                expected fn pointer, found `&fn(u32) -> u32 {foo}`\n    |            |                help: consider removing the reference: `foo`\n    |            expected due to this\n    |\n@@ -71,7 +71,7 @@ error[E0308]: mismatched types\n LL |     let e: &fn(u32) -> u32 = &foo;\n    |            ---------------   ^^^^\n    |            |                 |\n-   |            |                 expected fn pointer, found fn item\n+   |            |                 expected `&fn(u32) -> u32`, found `&fn(u32) -> u32 {foo}`\n    |            |                 help: consider casting to a fn pointer: `&(foo as fn(u32) -> u32)`\n    |            expected due to this\n    |"}, {"sha": "45d543bda5323ffe0176335e593bb022760b7fbf", "filename": "tests/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n LL |     let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn FnOnce(isize)>`\n    |            |\n    |            expected due to this\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn Fn(isize, isize)>`\n    |            |\n    |            expected due to this\n    |\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = Box::new(|| -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Box`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Box<dyn FnMut() -> isize>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "d00cbd8a0f24298c581d5b8694595a9d5a5a3740", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ fn needs_ptr(_: fn(i32, u32)) {}\n fn main() {\n     needs_ptr(foo);\n     //~^ ERROR mismatched types\n-    //~| NOTE expected `u32`, found `i32`\n+    //~| NOTE expected fn pointer, found fn item\n     //~| NOTE expected fn pointer `fn(i32, u32)`\n     //~| NOTE arguments to this function are incorrect\n }"}, {"sha": "067ee824d5d84dd522887d4e9f34bb7ee2a87eb9", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/signature-error-reporting-under-verbose.rs:10:15\n    |\n LL |     needs_ptr(foo);\n-   |     --------- ^^^ expected `u32`, found `i32`\n+   |     --------- ^^^ expected fn pointer, found fn item\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "bbca22ad2e69d3c63ae3e4cb7becbdf9d3d700cf", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     x = 5;\n     //~^ ERROR mismatched types\n     //~| NOTE expected enum `Option<usize>`\n-    //~| NOTE expected enum `Option`, found integer\n+    //~| NOTE expected `Option<usize>`, found integer\n }"}, {"sha": "258a8d163936acf71be741df36875e61eb92ba69", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL |     let x:\n LL |         Option<usize>;\n    |         ------------- expected due to this type\n LL |     x = 5;\n-   |         ^ expected enum `Option`, found integer\n+   |         ^ expected `Option<usize>`, found integer\n    |\n    = note: expected enum `Option<usize>`\n               found type `{integer}`"}, {"sha": "f26d3be66303df6d7d75ab40daec9574c54da28b", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,7 +11,7 @@ mod y {\n fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected enum `y::Foo`, found enum `x::Foo`\n+    //~| expected `y::Foo`, found `x::Foo`\n }\n \n fn main() {"}, {"sha": "c7c0846595d5a60b4e1ef265d75ef332ad21cc12", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n-   |            ^ expected enum `y::Foo`, found enum `x::Foo`\n+   |            ^ expected `y::Foo`, found `x::Foo`\n    |\n-   = note: enum `x::Foo` and enum `y::Foo` have similar names, but are actually distinct types\n-note: enum `x::Foo` is defined in module `crate::x` of the current crate\n+   = note: `x::Foo` and `y::Foo` have similar names, but are actually distinct types\n+note: `x::Foo` is defined in module `crate::x` of the current crate\n   --> $DIR/fully-qualified-type-name2.rs:4:5\n    |\n LL |     pub enum Foo { }\n    |     ^^^^^^^^^^^^\n-note: enum `y::Foo` is defined in module `crate::y` of the current crate\n+note: `y::Foo` is defined in module `crate::y` of the current crate\n   --> $DIR/fully-qualified-type-name2.rs:8:5\n    |\n LL |     pub enum Foo { }"}, {"sha": "41f07bab80966cdf73fe20e7aaef4eba08a8093b", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ fn bar(x: usize) -> Option<usize> {\n     //~^ ERROR mismatched types\n     //~| expected enum `Option<usize>`\n     //~| found type `usize`\n-    //~| expected enum `Option`, found `usize`\n+    //~| expected `Option<usize>`, found `usize`\n }\n \n fn main() {"}, {"sha": "6b312202bfed4f379753efcc7186705000bee685", "filename": "tests/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `Option<usize>` because of return type\n LL |     return x;\n-   |            ^ expected enum `Option`, found `usize`\n+   |            ^ expected `Option<usize>`, found `usize`\n    |\n    = note: expected enum `Option<usize>`\n               found type `usize`"}, {"sha": "ef6d896f8afa3148c03a2eb7a3218e14b1a2e9b7", "filename": "tests/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-signature-deduction.rs:14:9\n    |\n LL |         5\n-   |         ^ expected enum `Result`, found integer\n+   |         ^ expected `Result<{integer}, _>`, found integer\n    |\n    = note: expected enum `Result<{integer}, _>`\n               found type `{integer}`\n@@ -22,7 +22,7 @@ error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-\n   --> $DIR/type-mismatch-signature-deduction.rs:5:13\n    |\n LL | fn foo() -> impl Generator<Return = i32> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `i32`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<{integer}, _>`, found `i32`\n    |\n    = note: expected enum `Result<{integer}, _>`\n               found type `i32`"}, {"sha": "3b65b32f45d907fa4ea7e1bb91e1d3c3f2f71dad", "filename": "tests/ui/generic-associated-types/constraint-assoc-type-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fconstraint-assoc-type-suggestion.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/constraint-assoc-type-suggestion.rs:10:23\n    |\n LL |     let b: Vec<i32> = a;\n-   |            --------   ^ expected struct `Vec`, found associated type\n+   |            --------   ^ expected `Vec<i32>`, found associated type\n    |            |\n    |            expected due to this\n    |"}, {"sha": "d60856b8904bb6ec0008bea56318c85186948cd8", "filename": "tests/ui/generics/generic-type-params-name-repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -12,40 +12,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<isize>`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<isize>`, found `()`\n     //~| expected struct `Foo<isize>`\n     //~| found unit type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found `()`\n+    //~| expected `HashMap<String, isize>`, found `()`\n     //~| expected struct `HashMap<String, isize>`\n     //~| found unit type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashMap`, found `()`\n+    //~| expected `HashMap<String, isize>`, found `()`\n     //~| expected struct `HashMap<String, isize>`\n     //~| found unit type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo<A, isize>`, found `()`\n     //~| expected struct `Foo<A, isize>`\n     //~| found unit type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected struct `Foo`, found `()`\n+    //~| expected `Foo`, found `()`\n     //~| expected struct `Foo`\n     //~| found unit type `()`\n }"}, {"sha": "946f14cc1c6384eb2bddedd502abba9a9dd1d044", "filename": "tests/ui/generics/generic-type-params-name-repr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fgeneric-type-params-name-repr.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:13:25\n    |\n LL |     let _: Foo<isize> = ();\n-   |            ----------   ^^ expected struct `Foo`, found `()`\n+   |            ----------   ^^ expected `Foo<isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n-   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected `Foo<isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n-   |            ----------------------   ^^ expected struct `HashMap`, found `()`\n+   |            ----------------------   ^^ expected `HashMap<String, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n-   |            ------------------------------------   ^^ expected struct `HashMap`, found `()`\n+   |            ------------------------------------   ^^ expected `HashMap<String, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n-   |            ----------------   ^^ expected struct `Foo`, found `()`\n+   |            ----------------   ^^ expected `Foo<A, isize>`, found `()`\n    |            |\n    |            expected due to this\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n-   |            ------------   ^^ expected struct `Foo`, found `()`\n+   |            ------------   ^^ expected `Foo`, found `()`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "6ce56ba4b7ce5b76d5d82917181b363a34a44029", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n-   |             ^^ expected struct `Range`, found integer\n+   |             ^^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "6f56ecd4c1c9ca5e9b1f519993f5aa08c30e89d9", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n-   |             ^^ expected struct `Range`, found integer\n+   |             ^^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`"}, {"sha": "b9b272c4c7cb62fd4523a822a0efbad301060875", "filename": "tests/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |            ^ expected struct `Range`, found integer\n+   |            ^ expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -17,7 +17,7 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n-   |               expected struct `Range`, found integer\n+   |               expected `Range<{integer}>`, found integer\n    |\n    = note: expected struct `std::ops::Range<{integer}>`\n                 found type `{integer}`\n@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n LL |     match [5..4, 99..105, 43..44] {\n    |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n-   |               --  ^^^ expected struct `Range`, found integer\n+   |               --  ^^^ expected `Range<{integer}>`, found integer\n    |               |\n    |               this is of type `{integer}`\n    |"}, {"sha": "43e7f03b8b4ef73195439935ce82107d8f98f557", "filename": "tests/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (0, 1) {\n    |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n-   |          ^^^ expected tuple, found `u8`\n+   |          ^^^ expected `({integer}, {integer})`, found `u8`\n    |\n    = note: expected tuple `({integer}, {integer})`\n                found type `u8`"}, {"sha": "3e388653471eba376db615f86391e51e383bfc73", "filename": "tests/ui/higher-rank-trait-bounds/hang-on-deeply-nested-dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhang-on-deeply-nested-dyn.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,7 +11,7 @@ LL | |     ),\n LL | | ) {\n    | |_- expected `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn Fn(u32) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a)) + 'a))` because of return type\n LL |       f\n-   |       ^ expected reference, found `u32`\n+   |       ^ expected `&dyn for<'a> Fn(&'a ...)`, found `&dyn Fn(u32)`\n    |\n    = note: expected reference `&dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a (dyn for<'a> Fn(&'a ...) + 'a)) + 'a)) + 'a))`\n            the full type name has been written to '$TEST_BUILD_DIR/higher-rank-trait-bounds/hang-on-deeply-nested-dyn/hang-on-deeply-nested-dyn.long-type-hash.txt'"}, {"sha": "01d48ab59af1934c68219817bd3dfb9cbcd6e5fa", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -42,7 +42,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ expected struct `Unit3`, found struct `Unit4`\n+   | |_________^ expected `Unit3`, found `Unit4`\n    |\n note: required for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>` to implement `for<'r> T0<'r, (&'r u8,)>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16"}, {"sha": "f64ba3bf1c414d20173832d59009dfa2c4d76f3e", "filename": "tests/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:7:35\n    |\n LL | fn fuz() -> (usize, Trait) { (42, Struct) }\n-   |                                   ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n+   |                                   ^^^^^^ expected `dyn Trait`, found `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n   --> $DIR/dyn-trait-return-should-be-impl-trait.rs:10:39\n    |\n LL | fn bar() -> (usize, dyn Trait) { (42, Struct) }\n-   |                                       ^^^^^^ expected trait object `dyn Trait`, found struct `Struct`\n+   |                                       ^^^^^^ expected `dyn Trait`, found `Struct`\n    |\n    = note: expected trait object `(dyn Trait + 'static)`\n                     found struct `Struct`\n@@ -110,7 +110,7 @@ LL | |         Struct\n    | |         ------ expected because of this\n LL | |     } else {\n LL | |         42\n-   | |         ^^ expected struct `Struct`, found integer\n+   | |         ^^ expected `Struct`, found integer\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n \n@@ -144,7 +144,7 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return Struct;\n-   |                ^^^^^^ expected struct `Box`, found struct `Struct`\n+   |                ^^^^^^ expected `Box<dyn Trait>`, found `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n@@ -161,7 +161,7 @@ LL | fn bam() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^ expected struct `Box`, found integer\n+   |     ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -178,7 +178,7 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         return 0;\n-   |                ^ expected struct `Box`, found integer\n+   |                ^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -195,7 +195,7 @@ LL | fn baq() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |     42\n-   |     ^^ expected struct `Box`, found integer\n+   |     ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -212,7 +212,7 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         Struct\n-   |         ^^^^^^ expected struct `Box`, found struct `Struct`\n+   |         ^^^^^^ expected `Box<dyn Trait>`, found `Struct`\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n               found struct `Struct`\n@@ -229,7 +229,7 @@ LL | fn baz() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^ expected struct `Box`, found integer\n+   |         ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -246,7 +246,7 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n LL |     if true {\n LL |         0\n-   |         ^ expected struct `Box`, found integer\n+   |         ^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`\n@@ -263,7 +263,7 @@ LL | fn baw() -> Box<dyn Trait> {\n    |             -------------- expected `Box<(dyn Trait + 'static)>` because of return type\n ...\n LL |         42\n-   |         ^^ expected struct `Box`, found integer\n+   |         ^^ expected `Box<dyn Trait>`, found integer\n    |\n    = note: expected struct `Box<(dyn Trait + 'static)>`\n                 found type `{integer}`"}, {"sha": "3eba419c0a3fd31f1796beff51de198f132b91d9", "filename": "tests/ui/impl-trait/in-trait/deep-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `bar` has an incompatible return type for trait\n LL |     fn bar() -> i32 { 0 }\n    |                 ^^^\n    |                 |\n-   |                 expected struct `Wrapper`, found `i32`\n+   |                 expected `Wrapper<_>`, found `i32`\n    |                 return type in trait\n    |\n    = note: expected struct `Wrapper<_>`"}, {"sha": "cc3bdf0e5717ecac48e61893ad1156c6b0f06880", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`\n    |         |\n-   |         expected struct `String`, found integer\n+   |         expected `String`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "4742eb37d3e4d55538167770d9093016c8357b0d", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n   --> $DIR/default-body-type-err.rs:7:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `String`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n LL |\n LL |         &1i32\n    |         ----- return type was inferred to be `&i32` here"}, {"sha": "6cf0c33ad919015f3852f0b4c0856f9cccc60ea3", "filename": "tests/ui/impl-trait/issue-102605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102605.rs:13:20\n    |\n LL |     convert_result(foo())\n-   |     -------------- ^^^^^ expected enum `Result`, found opaque type\n+   |     -------------- ^^^^^ expected `Result<(), _>`, found opaque type\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "3b4e130fdebde3e88c8da6f700867fb30abe5e94", "filename": "tests/ui/impl-trait/issue-99914.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissue-99914.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-99914.rs:9:27\n    |\n LL |     t.and_then(|t| -> _ { bar(t) });\n-   |                           ^^^^^^ expected enum `Result`, found opaque type\n+   |                           ^^^^^^ expected `Result<_, Error>`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n   --> $DIR/issue-99914.rs:13:23"}, {"sha": "724f3c5d6747ca06890b38ab5f9c1dc84a0637bb", "filename": "tests/ui/impl-trait/issues/issue-74282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-74282.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ LL |       Anonymous(|| {\n    | |     arguments to this struct are incorrect\n LL | |         3\n LL | |     })\n-   | |_____^ expected closure, found a different closure\n+   | |_____^ expected opaque type, found closure\n    |\n    = note: expected opaque type `Closure`\n                   found closure `[closure@$DIR/issue-74282.rs:8:15: 8:17]`\n@@ -33,7 +33,7 @@ LL | |         3\n LL | |     })\n    | |      ^- help: consider using a semicolon here: `;`\n    | |______|\n-   |        expected `()`, found struct `Anonymous`\n+   |        expected `()`, found `Anonymous`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e5147bcea16625227f7bf63f46260847ae1a614b", "filename": "tests/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | fn can() -> impl NotObjectSafe {\n    |             ------------------ expected `A` because of return type\n ...\n LL |     B\n-   |     ^ expected struct `A`, found struct `B`\n+   |     ^ expected `A`, found `B`\n \n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n@@ -14,7 +14,7 @@ LL | fn cat() -> impl ObjectSafe {\n    |             --------------- expected `A` because of return type\n ...\n LL |     B\n-   |     ^ expected struct `A`, found struct `B`\n+   |     ^ expected `A`, found `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7aff41954445f69f15e98946468a9c3f2d73ed4", "filename": "tests/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -15,7 +15,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected struct `Bar`, found opaque type\n+   |                              expected `a::Bar`, found opaque type\n    |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n    = note: expected signature `fn(&a::Bar, &(a::Bar, i32)) -> _`\n@@ -38,7 +38,7 @@ LL |     type Foo = impl PartialEq<(Foo, i32)>;\n LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n    |                              ^^^^^^^^^^^\n    |                              |\n-   |                              expected opaque type, found struct `Bar`\n+   |                              expected opaque type, found `b::Bar`\n    |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n    |\n    = note: expected signature `fn(&b::Bar, &(b::Foo, i32)) -> _`"}, {"sha": "a56e542d8345ab29e03a42e04ef9a6ba002c51fd", "filename": "tests/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(x: impl Debug) -> String {\n    |           |\n    |           this type parameter\n LL |     x\n-   |     ^ expected struct `String`, found type parameter `impl Debug`\n+   |     ^ expected `String`, found type parameter `impl Debug`\n    |\n    = note:      expected struct `String`\n            found type parameter `impl Debug`"}, {"sha": "4f2880e2f5d4914e5d4ade4c9b1bfa6a8ca57fa8", "filename": "tests/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `&[u8]`, found `&str`\n    |            |\n    |            expected due to this\n    |\n@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n+   |            ----   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found `&[u8; 0]`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "1626032ae997de1452cb1764d8cf8c2153d1242e", "filename": "tests/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fderef-suggestion.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(s);\n    |     --- ^- help: try using a conversion method: `.to_string()`\n    |     |   |\n-   |     |   expected struct `String`, found `&String`\n+   |     |   expected `String`, found `&String`\n    |     arguments to this function are incorrect\n    |\n note: function defined here\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n-   |     --- ^^^^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n+   |     --- ^^^^^^^^^^^^^^^^^ expected `String`, found `&String`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -54,7 +54,7 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n-   |     --- ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `&mut String`\n+   |     --- ^^^^^^^^^^^^^^^^^^^^^ expected `String`, found `&mut String`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "be30eef2af48fb2bb7f091240ecbe58861ca5003", "filename": "tests/ui/issues/issue-100605.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-100605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-100605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-100605.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-100605.rs:4:18\n    |\n LL |     takes_option(&None);\n-   |     ------------ ^^^^^ expected enum `Option`, found `&Option<_>`\n+   |     ------------ ^^^^^ expected `Option<&String>`, found `&Option<_>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n LL |     takes_option(&res);\n    |     ------------ ^^^^\n    |     |            |\n-   |     |            expected enum `Option`, found `&Option<String>`\n+   |     |            expected `Option<&String>`, found `&Option<String>`\n    |     |            help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `res.as_ref()`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "4be53fd09e523e0f626882795b431fe84a01b06b", "filename": "tests/ui/issues/issue-102964.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-102964.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-102964.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-102964.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-102964.rs:5:41\n    |\n LL | fn bar_function<T>(function: Foo<T>) -> RcFoo<T> {\n-   |    ------------                         ^^^^^^^^ expected struct `Rc`, found `()`\n+   |    ------------                         ^^^^^^^^ expected `Rc<&dyn for<'a> Fn(&'a T)>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "ef28c81d85737f12eaedacf32c148d497a7f3443", "filename": "tests/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11374.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     c.read_to(v);\n    |       ------- ^\n    |       |       |\n-   |       |       expected `&mut [u8]`, found struct `Vec`\n+   |       |       expected `&mut [u8]`, found `Vec<_>`\n    |       |       help: consider mutably borrowing here: `&mut v`\n    |       arguments to this method are incorrect\n    |"}, {"sha": "9afd209773b73f435cca6ebd5a96978cea3923c7", "filename": "tests/ui/issues/issue-11844.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-11844.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match a {\n    |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n-   |         ^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^ expected `Option<Box<{integer}>>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<Box<{integer}>>`\n               found enum `Result<_, _>`"}, {"sha": "139c34c8880a69ecf8c44ba45c430b5a0479b258", "filename": "tests/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13446.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13446.rs:3:26\n    |\n LL | static VEC: [u32; 256] = vec![];\n-   |                          ^^^^^^ expected array `[u32; 256]`, found struct `Vec`\n+   |                          ^^^^^^ expected `[u32; 256]`, found `Vec<_>`\n    |\n    = note: expected array `[u32; 256]`\n              found struct `Vec<_>`"}, {"sha": "52d4d75d29da2623d823f25707b40f6413660825", "filename": "tests/ui/issues/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13466.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,12 +9,12 @@ pub fn main() {\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<{integer}>`, found `Result<_, _>`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<{integer}>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<{integer}>`, found `Result<_, _>`\n     };\n }"}, {"sha": "fd928e45863db026ef3097ad30056b3615badbec", "filename": "tests/ui/issues/issue-13466.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-13466.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n-   |         ^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^ expected `Option<{integer}>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<{integer}>`\n               found enum `Result<_, _>`\n@@ -16,7 +16,7 @@ LL |     let _x: usize = match Some(1) {\n    |                           ------- this expression has type `Option<{integer}>`\n ...\n LL |         Err(e) => panic!(e)\n-   |         ^^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^^ expected `Option<{integer}>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<{integer}>`\n               found enum `Result<_, _>`"}, {"sha": "2ff1c1f8876cd0fa758eb1b9987171d647256556", "filename": "tests/ui/issues/issue-14541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14541.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ struct Vec3 { y: f32, z: f32 }\n fn make(v: Vec2) {\n     let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected struct `Vec2`, found struct `Vec3`\n+    //~| expected `Vec2`, found `Vec3`\n }\n \n fn main() { }"}, {"sha": "b80c68ce47311332716c77865b9600105e02c996", "filename": "tests/ui/issues/issue-14541.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14541.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let Vec3 { y: _, z: _ } = v;\n    |         ^^^^^^^^^^^^^^^^^^^   - this expression has type `Vec2`\n    |         |\n-   |         expected struct `Vec2`, found struct `Vec3`\n+   |         expected `Vec2`, found `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "ceb37a20e3f30d01edc56b025c9d9bd563e9804f", "filename": "tests/ui/issues/issue-15783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15783.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected enum `Option<&[&str]>`\n     //~| found enum `Option<&[&str; 1]>`\n-    //~| expected slice `[&str]`, found array `[&str; 1]`\n+    //~| expected `Option<&[&str]>`, found `Option<&[&str; 1]>`\n     assert_eq!(msg, 3);\n }"}, {"sha": "598ec7e6053bea1918059368271490da2a8fa801", "filename": "tests/ui/issues/issue-15783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15783.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |               --- ^ expected slice `[&str]`, found array `[&str; 1]`\n+   |               --- ^ expected `Option<&[&str]>`, found `Option<&[&str; 1]>`\n    |               |\n    |               arguments to this function are incorrect\n    |"}, {"sha": "ec0d74596aa8d4938f0e6a9ac96c681360efb429", "filename": "tests/ui/issues/issue-15896.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-15896.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL |     let u = match e {\n    |                   - this expression has type `E`\n LL |         E::B(\n LL |           Tau{t: x},\n-   |           ^^^^^^^^^ expected enum `R`, found struct `Tau`\n+   |           ^^^^^^^^^ expected `R`, found `Tau`\n \n error: aborting due to previous error\n "}, {"sha": "0f08485e515dd058c96cc83923dbfaa8bd7162f4", "filename": "tests/ui/issues/issue-16338.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16338.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let Slice { data: data, len: len } = \"foo\";\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ----- this expression has type `&str`\n    |         |\n-   |         expected `str`, found struct `Slice`\n+   |         expected `str`, found `Slice<_>`\n    |\n    = note: expected type `str`\n             found struct `Slice<_>`"}, {"sha": "19ae7da107ca2651a11ee8e8266e57dfcba20cf0", "filename": "tests/ui/issues/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16401.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected unit type `()`\n         //~| found struct `Slice<_>`\n-        //~| expected `()`, found struct `Slice`\n+        //~| expected `()`, found `Slice<_>`\n         _ => unreachable!()\n     }\n }"}, {"sha": "02f9f3ea8fdf7e40ee847af8cdad1c1aa346c390", "filename": "tests/ui/issues/issue-16401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16401.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match () {\n    |           -- this expression has type `()`\n LL |         Slice { data: data, len: len } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `Slice<_>`\n    |\n    = note: expected unit type `()`\n                  found struct `Slice<_>`"}, {"sha": "1fc974b609c119170b3e21cb1451ab8c50361073", "filename": "tests/ui/issues/issue-18819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-18819.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this function takes 2 arguments but 1 argument was supplied\n LL |     print_x(X);\n    |     ^^^^^^^--- an argument of type `&str` is missing\n    |\n-note: expected reference, found struct `X`\n+note: expected `&dyn Foo<Item = bool>`, found `X`\n   --> $DIR/issue-18819.rs:16:13\n    |\n LL |     print_x(X);"}, {"sha": "b1c15672051d2fc47305553ee9ce8908bc5a14d8", "filename": "tests/ui/issues/issue-20225.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20225.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n    |                                           ^^^^\n    |                                           |\n-   |                                           expected `&T`, found type parameter `T`\n+   |                                           expected `&'a T`, found type parameter `T`\n    |                                           help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(&Foo, (&'a T,))`\n@@ -20,7 +20,7 @@ LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n    |                                                   ^^^^\n    |                                                   |\n-   |                                                   expected `&T`, found type parameter `T`\n+   |                                                   expected `&'a T`, found type parameter `T`\n    |                                                   help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n@@ -35,7 +35,7 @@ LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n    |                                               ^^^^\n    |                                               |\n-   |                                               expected `&T`, found type parameter `T`\n+   |                                               expected `&'a T`, found type parameter `T`\n    |                                               help: change the parameter type to match the trait: `(&'a T,)`\n    |\n    = note: expected signature `extern \"rust-call\" fn(Foo, (&'a T,))`"}, {"sha": "4473d00fd5da2833daf8e4024434ccf71aa48c51", "filename": "tests/ui/issues/issue-21332.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-21332.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-21332.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21332.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ impl Iterator for S {\n     type Item = i32;\n     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n     //~^ ERROR method `next` has an incompatible type for trait\n-    //~| expected enum `Option`, found enum `Result`\n+    //~| expected `Option<i32>`, found `Result<i32, i32>`\n }\n \n fn main() {}"}, {"sha": "82549288064a1caead0c7ac73226c75041aecc39", "filename": "tests/ui/issues/issue-21332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21332.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `next` has an incompatible type for trait\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |                           ^^^^^^^^^^^^^^^^\n    |                           |\n-   |                           expected enum `Option`, found enum `Result`\n+   |                           expected `Option<i32>`, found `Result<i32, i32>`\n    |                           help: change the output type to match the trait: `Option<i32>`\n    |\n    = note: expected signature `fn(&mut S) -> Option<i32>`"}, {"sha": "37cc3413f7511ebc5c3fd30ff5f781d5af7343d8", "filename": "tests/ui/issues/issue-24322.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24322.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24322.rs:8:29\n    |\n LL |     let x: &fn(&B) -> u32 = &B::func;\n-   |            --------------   ^^^^^^^^ expected fn pointer, found fn item\n+   |            --------------   ^^^^^^^^ expected `&for<'a> fn(&'a B) -> u32`, found `&for<'a> fn(&'a B) -> u32 {B::func}`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "fb4cfb7b29e8b5c5a22c21608558808d61253d10", "filename": "tests/ui/issues/issue-24819.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24819.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let mut v = Vec::new();\n     foo(&mut v);\n     //~^ ERROR mismatched types\n-    //~| expected struct `HashSet`, found struct `Vec`\n+    //~| expected `&mut HashSet<u32>`, found `&mut Vec<_>`\n }\n \n fn foo(h: &mut HashSet<u32>) {"}, {"sha": "8b4f1dbce431d654b5fd971e9e6be0f515c3f590", "filename": "tests/ui/issues/issue-24819.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-24819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-24819.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-24819.rs:5:9\n    |\n LL |     foo(&mut v);\n-   |     --- ^^^^^^ expected struct `HashSet`, found struct `Vec`\n+   |     --- ^^^^^^ expected `&mut HashSet<u32>`, found `&mut Vec<_>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "adf8e779e0a043a58a9ace980b98b076be84bf50", "filename": "tests/ui/issues/issue-27008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27008.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,5 +3,5 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found struct `S`\n+    //~| expected `usize`, found `S`\n }"}, {"sha": "9d18045aa794c2989177fa56a3b31c581a7d8c6c", "filename": "tests/ui/issues/issue-27008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27008.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27008.rs:4:17\n    |\n LL |     let b = [0; S];\n-   |                 ^ expected `usize`, found struct `S`\n+   |                 ^ expected `usize`, found `S`\n \n error: aborting due to previous error\n "}, {"sha": "b4f5b1296670f2454253c4cea49834ba0f82c778", "filename": "tests/ui/issues/issue-32122-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-32122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-32122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32122-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-1.rs:16:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Foo`\n+   |            ---------   ^^ expected `*const u8`, found `&Foo`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "02c335c1547fb4415cceecfe05e693203eaa29dd", "filename": "tests/ui/issues/issue-32122-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-32122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-32122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-32122-2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32122-2.rs:27:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^ expected `*const u8`, found `&Emm`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "a831cf585f4e0f2c4ef253c0d5a40e5d12209fe3", "filename": "tests/ui/issues/issue-33504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-33504.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | struct Test;\n LL |         let Test = 1;\n    |             ^^^^   - this expression has type `{integer}`\n    |             |\n-   |             expected integer, found struct `Test`\n+   |             expected integer, found `Test`\n    |             `Test` is interpreted as a unit struct, not a new binding\n    |             help: introduce a new binding instead: `other_test`\n "}, {"sha": "e7f4a4fa004ce904bac381ea547b4b86d0f5bb94", "filename": "tests/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-33941.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |                                    ^^^^^^ expected reference, found tuple\n+   |                                    ^^^^^^ expected `&_`, found `(&_, &_)`\n    |\n    = note: expected reference `&_`\n                   found tuple `(&_, &_)`\n@@ -20,7 +20,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(&_, &_)`, found `&_`\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`\n@@ -31,7 +31,7 @@ error[E0271]: expected `Iter<'_, _, _>` to be an iterator that yields `&_`, but\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `(&_, &_)`, found `&_`\n    |\n    = note:  expected tuple `(&_, &_)`\n            found reference `&_`"}, {"sha": "4a2c15511fe266192e95ca5bcf96f07a0a7698d2", "filename": "tests/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35241.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo(u32);\n    | ---------- `Foo` defines a struct constructor here, which should be called\n LL |\n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^ expected struct `Foo`, found struct constructor\n+   |              ---   ^^^ expected `Foo`, found struct constructor\n    |              |\n    |              expected `Foo` because of return type\n    |"}, {"sha": "a0e52798122972fb88b749edb50fc267440ab539", "filename": "tests/ui/issues/issue-3680.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3680.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,6 +4,6 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| expected enum `Option<_>`\n         //~| found enum `Result<_, _>`\n-        //~| expected enum `Option`, found enum `Result`\n+        //~| expected `Option<_>`, found `Result<_, _>`\n     }\n }"}, {"sha": "0b0ae419e2bf9bbab0d9e3b7b421a54f371000e6", "filename": "tests/ui/issues/issue-3680.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3680.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match None {\n    |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n-   |         ^^^^^^ expected enum `Option`, found enum `Result`\n+   |         ^^^^^^ expected `Option<_>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<_>`\n               found enum `Result<_, _>`"}, {"sha": "afc39adec467ac548a85ae6434e67e783931f066", "filename": "tests/ui/issues/issue-40749.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-40749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-40749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-40749.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40749.rs:2:9\n    |\n LL |     [0; ..10];\n-   |         ^^^^ expected `usize`, found struct `RangeTo`\n+   |         ^^^^ expected `usize`, found `RangeTo<{integer}>`\n    |\n    = note: expected type `usize`\n             found struct `RangeTo<{integer}>`"}, {"sha": "9b141e2bf99afd9f27bb5be71462731c7d35745c", "filename": "tests/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43420-no-over-suggest.rs:8:9\n    |\n LL |     foo(&a);\n-   |     --- ^^ expected slice `[u16]`, found struct `Vec`\n+   |     --- ^^ expected `&[u16]`, found `&Vec<u8>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "469304e2cf70fd87173c33fb930122e0b9dfba1c", "filename": "tests/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4517.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found array `[u8; 4]`\n+    //~| expected `usize`, found `[u8; 4]`\n }"}, {"sha": "78ee336f19a43a4d14a3c39901cc6a9598658fe4", "filename": "tests/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4517.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |     --- ^^^ expected `usize`, found array `[u8; 4]`\n+   |     --- ^^^ expected `usize`, found `[u8; 4]`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a4c88fd880a9d2ec28cb9d1b942d2fb04c2abb92", "filename": "tests/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-48364.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |         ----------- ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n+   |         ----------- ^^^^^^^^^^^^^^^ expected `&[u8]`, found `&str`\n    |         |\n    |         arguments to this method are incorrect\n    |"}, {"sha": "c8df46dc2674032f45affc625888cc48dc70a618", "filename": "tests/ui/issues/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4968.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `{integer}`\n     //~| found tuple `(isize, isize)`\n-    //~| expected integer, found tuple\n+    //~| expected integer, found `(isize, isize)`\n }"}, {"sha": "1ce0333846f44e77e7e8797f7ebb8660e04b3e27", "filename": "tests/ui/issues/issue-4968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4968.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | fn main() {\n LL |     match 42 { A => () }\n    |           --   ^\n    |           |    |\n-   |           |    expected integer, found tuple\n+   |           |    expected integer, found `(isize, isize)`\n    |           |    `A` is interpreted as a constant, not a new binding\n    |           |    help: introduce a new binding instead: `other_a`\n    |           this expression has type `{integer}`"}, {"sha": "53ebdec8164934e8c0a3c6bee2ed4ae005b2692b", "filename": "tests/ui/issues/issue-5100.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5100.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n //~^ ERROR mismatched types\n-//~| expected tuple, found enum `A`\n+//~| expected `(bool, bool)`, found `A`\n //~| expected tuple `(bool, bool)`\n //~| found enum `A`\n         _ => ()\n@@ -39,7 +39,7 @@ fn main() {\n     match (true, false) {\n         &(true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected tuple, found reference\n+//~| expected `(bool, bool)`, found `&_`\n //~| expected tuple `(bool, bool)`\n //~| found reference `&_`\n     }"}, {"sha": "b1680aacd16563f3d443980af9a7a4f115481168", "filename": "tests/ui/issues/issue-5100.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5100.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | enum A { B, C }\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         A::B => (),\n-   |         ^^^^ expected tuple, found enum `A`\n+   |         ^^^^ expected `(bool, bool)`, found `A`\n    |\n    = note: expected tuple `(bool, bool)`\n                found enum `A`\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         box (true, false) => ()\n-   |         ^^^^^^^^^^^^^^^^^ expected tuple, found struct `Box`\n+   |         ^^^^^^^^^^^^^^^^^ expected `(bool, bool)`, found `Box<_>`\n    |\n    = note: expected tuple `(bool, bool)`\n              found struct `Box<_>`\n@@ -51,7 +51,7 @@ error[E0308]: mismatched types\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         &(true, false) => ()\n-   |         ^^^^^^^^^^^^^^ expected tuple, found reference\n+   |         ^^^^^^^^^^^^^^ expected `(bool, bool)`, found `&_`\n    |\n    = note:  expected tuple `(bool, bool)`\n            found reference `&_`"}, {"sha": "7180a3d2426d109bca8556dcb9272fdd68ba132b", "filename": "tests/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `?` operator has incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected `Result<isize, ()>`, found `isize`\n    |\n    = note: `?` operator cannot convert from `isize` to `Result<isize, ()>`\n    = note: expected enum `Result<isize, ()>`"}, {"sha": "66800d9e929612c75137b4a6c3473fe3ac5b56df", "filename": "tests/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53348.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     for i in v {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n-        //~| NOTE expected struct `String`, found `str`\n+        //~| NOTE expected `String`, found `str`\n         v2.push(a);\n     }\n }"}, {"sha": "e4cdb7e889bcab07ae01e27c0266e46b7d003263", "filename": "tests/ui/issues/issue-53348.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-53348.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL |     let mut a = String::new();\n    |                 ------------- expected due to this value\n LL |     for i in v {\n LL |         a = *i.to_string();\n-   |             ^^^^^^^^^^^^^^ expected struct `String`, found `str`\n+   |             ^^^^^^^^^^^^^^ expected `String`, found `str`\n \n error: aborting due to previous error\n "}, {"sha": "14ee962b722e8cbe1b0381840416cdf895c315de", "filename": "tests/ui/issues/issue-5358-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5358-1.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     match S(Either::Left(5)) {\n         Either::Right(_) => {}\n         //~^ ERROR mismatched types\n-        //~| expected struct `S`, found enum `Either`\n+        //~| expected `S`, found `Either<_, _>`\n         //~| expected struct `S`\n         //~| found enum `Either<_, _>`\n         _ => {}"}, {"sha": "059462a363e8e9230eb4bb0b6944014131a44f52", "filename": "tests/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match S(Either::Left(5)) {\n    |           ------------------ this expression has type `S`\n LL |         Either::Right(_) => {}\n-   |         ^^^^^^^^^^^^^^^^ expected struct `S`, found enum `Either`\n+   |         ^^^^^^^^^^^^^^^^ expected `S`, found `Either<_, _>`\n    |\n    = note: expected struct `S`\n                 found enum `Either<_, _>`"}, {"sha": "c394e620b82fe2cf8d39b5e1f45b6c6bce0267fd", "filename": "tests/ui/issues/issue-56943.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-56943.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-56943.rs:6:29\n    |\n LL |     let _: issue_56943::S = issue_56943::S2;\n-   |            --------------   ^^^^^^^^^^^^^^^ expected struct `S`, found struct `S2`\n+   |            --------------   ^^^^^^^^^^^^^^^ expected `S`, found `S2`\n    |            |\n    |            expected due to this\n "}, {"sha": "76f03bab6d157130574a2d95b44c1da8608579db", "filename": "tests/ui/issues/issue-57741-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   - this expression has type `Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |         ^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |         ^^^^^^^^^^ expected `Box<u32>`, found `S`\n    |\n    = note: expected struct `Box<u32>`\n                 found enum `S`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   - this expression has type `Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |                      ^^^^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |                      ^^^^^^^^^^^^^ expected `Box<u32>`, found `S`\n    |\n    = note: expected struct `Box<u32>`\n                 found enum `S`"}, {"sha": "38014ecce75744f90506ec2774b822c7a1d8406c", "filename": "tests/ui/issues/issue-57741.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-57741.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n-   |         ^^^^^^^ expected struct `Box`, found enum `T`\n+   |         ^^^^^^^ expected `Box<T>`, found `T`\n    |\n    = note: expected struct `Box<T>`\n                 found enum `T`\n@@ -21,7 +21,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n-   |                   ^^^^^^^ expected struct `Box`, found enum `T`\n+   |                   ^^^^^^^ expected `Box<T>`, found `T`\n    |\n    = note: expected struct `Box<T>`\n                 found enum `T`\n@@ -35,7 +35,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |         ^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |         ^^^^^^^^^^ expected `Box<S>`, found `S`\n    |\n    = note: expected struct `Box<S>`\n                 found enum `S`\n@@ -49,7 +49,7 @@ LL |     let y = match x {\n    |                   this expression has type `Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n-   |                      ^^^^^^^^^^^^^ expected struct `Box`, found enum `S`\n+   |                      ^^^^^^^^^^^^^ expected `Box<S>`, found `S`\n    |\n    = note: expected struct `Box<S>`\n                 found enum `S`"}, {"sha": "d45beefa420cbb2a460d5e6c1324e774eaf2e27c", "filename": "tests/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-59488.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:14:11\n    |\n LL |     foo > 12;\n-   |           ^^ expected fn item, found integer\n+   |           ^^ expected fn item, found `i32`\n    |\n    = note: expected fn item `fn() -> i32 {foo}`\n                  found type `i32`\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-59488.rs:18:11\n    |\n LL |     bar > 13;\n-   |           ^^ expected fn item, found integer\n+   |           ^^ expected fn item, found `i64`\n    |\n    = note: expected fn item `fn(i64) -> i64 {bar}`\n                  found type `i64`"}, {"sha": "eff3e6e78495e919242f9daaf69161d427de7c5b", "filename": "tests/ui/issues/issue-61106.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-61106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-61106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-61106.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(x.clone());\n    |     --- ^^^^^^^^^\n    |     |   |\n-   |     |   expected `&str`, found struct `String`\n+   |     |   expected `&str`, found `String`\n    |     |   help: consider borrowing here: `&x`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "66ccfdff23664a4bf276a85a776a83e52defaa8d", "filename": "tests/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-6458-4.rs:1:20\n    |\n LL | fn foo(b: bool) -> Result<bool,String> {\n-   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected `Result<bool, String>`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());"}, {"sha": "6fde44eaf0ced447976e1fb73652f30187fe296b", "filename": "tests/ui/issues/issue-67039-unsound-pin-partialeq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-67039-unsound-pin-partialeq.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0271]: type mismatch resolving `<Rc<Apple> as Deref>::Target == Rc<Apple>\n   --> $DIR/issue-67039-unsound-pin-partialeq.rs:25:29\n    |\n LL |     let _ = Pin::new(Apple) == Rc::pin(Apple);\n-   |                             ^^ expected struct `Apple`, found struct `Rc`\n+   |                             ^^ expected `Apple`, found `Rc<Apple>`\n    |\n    = note: expected struct `Apple`\n               found struct `Rc<Apple>`"}, {"sha": "570677298ffa98d41b6d7af932beecfcbb49029f", "filename": "tests/ui/issues/issue-69306.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-69306.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-69306.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-69306.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL | impl<T> S0<T> {\n    |      - this type parameter\n LL |     const C: S0<u8> = Self(0);\n-   |                       ^^^^^^^ expected `u8`, found type parameter `T`\n+   |                       ^^^^^^^ expected `S0<u8>`, found `S0<T>`\n    |\n    = note: expected struct `S0<u8>`\n               found struct `S0<T>`\n@@ -89,7 +89,7 @@ error[E0308]: mismatched types\n LL | impl<T> S1<T, u8> {\n    |      - this type parameter\n LL |     const C: S1<u8, u8> = Self(0, 1);\n-   |                           ^^^^^^^^^^ expected `u8`, found type parameter `T`\n+   |                           ^^^^^^^^^^ expected `S1<u8, u8>`, found `S1<T, u8>`\n    |\n    = note: expected struct `S1<u8, _>`\n               found struct `S1<T, _>`\n@@ -126,7 +126,7 @@ LL |     fn map<U>(x: U) -> S2<U> {\n    |            |\n    |            expected type parameter\n LL |         Self(x)\n-   |         ^^^^^^^ expected type parameter `U`, found type parameter `T`\n+   |         ^^^^^^^ expected `S2<U>`, found `S2<T>`\n    |\n    = note: expected struct `S2<U>`\n               found struct `S2<T>`"}, {"sha": "a209f8a4249f1dc899a1cba70f6185208978ec44", "filename": "tests/ui/issues/issue-7061.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7061.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-7061.rs:4:46\n    |\n LL |     fn foo(&'a mut self) -> Box<BarStruct> { self }\n-   |                             --------------   ^^^^ expected struct `Box`, found `&mut BarStruct`\n+   |                             --------------   ^^^^ expected `Box<BarStruct>`, found `&mut BarStruct`\n    |                             |\n    |                             expected `Box<BarStruct>` because of return type\n    |"}, {"sha": "c3c96c7d3f61d89311e64f719f3d21f72a3166c0", "filename": "tests/ui/issues/issue-7092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7092.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n //~^ ERROR mismatched types\n-//~| expected enum `Whatever`, found enum `Option`\n+//~| expected `Whatever`, found `Option<_>`\n //~| expected enum `Whatever`\n //~| found enum `Option<_>`\n             field.access(),"}, {"sha": "e35379fd1cfef6d17ae8a2a18abdcf3ef6390f00", "filename": "tests/ui/issues/issue-7092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7092.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `Whatever`\n LL |         Some(field) =>\n-   |         ^^^^^^^^^^^ expected enum `Whatever`, found enum `Option`\n+   |         ^^^^^^^^^^^ expected `Whatever`, found `Option<_>`\n    |\n    = note: expected enum `Whatever`\n               found enum `Option<_>`"}, {"sha": "164641ff7751228c771a94049b253359322e4918", "filename": "tests/ui/issues/issue-71676-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-71676-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-71676-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-71676-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:43:24\n    |\n LL |     let _: *const u8 = &a;\n-   |            ---------   ^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^ expected `*const u8`, found `&Emm`\n    |            |\n    |            expected due to this\n    |\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:49:24\n    |\n LL |     let _: *const u8 = &mut a;\n-   |            ---------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            ---------   ^^^^^^ expected `*const u8`, found `&mut Emm`\n    |            |\n    |            expected due to this\n    |\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-71676-1.rs:52:22\n    |\n LL |     let _: *mut u8 = &mut a;\n-   |            -------   ^^^^^^ expected `u8`, found struct `Emm`\n+   |            -------   ^^^^^^ expected `*mut u8`, found `&mut Emm`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "5cd64e48ab88bd2d910cd10df46a5e5f61dc42f5", "filename": "tests/ui/issues/issue-74236/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-74236%2Fmain.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let () = dep::Renamed;\n    |         ^^   ------------ this expression has type `Renamed`\n    |         |\n-   |         expected struct `Renamed`, found `()`\n+   |         expected `Renamed`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "32d9105b25997a58cd8949b76e5c0add3d463f80", "filename": "tests/ui/issues/issue-76191.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-76191.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ LL |     match n {\n LL |         RANGE => {}\n    |         ^^^^^\n    |         |\n-   |         expected `i32`, found struct `RangeInclusive`\n+   |         expected `i32`, found `RangeInclusive<i32>`\n    |         `RANGE` is interpreted as a constant, not a new binding\n    |\n    = note: expected type `i32`\n@@ -31,7 +31,7 @@ LL |     match n {\n LL |         RANGE2 => {}\n    |         ^^^^^^\n    |         |\n-   |         expected `i32`, found struct `RangeInclusive`\n+   |         expected `i32`, found `RangeInclusive<i32>`\n    |         `RANGE2` is interpreted as a constant, not a new binding\n    |\n    = note: expected type `i32`"}, {"sha": "e9fd10c6613d4d1637c2708bea6810eae9eca7ab", "filename": "tests/ui/issues/issue-7867.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7867.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n         //~^ ERROR mismatched types\n-        //~| expected tuple, found enum `A`\n+        //~| expected `(bool, bool)`, found `A`\n         //~| expected tuple `(bool, bool)`\n         //~| found enum `A`\n         _ => ()"}, {"sha": "4fb1af344cda61d8a869c313395211550f8d5385", "filename": "tests/ui/issues/issue-7867.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7867.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fissues%2Fissue-7867.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-7867.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | enum A { B, C }\n LL |     match (true, false) {\n    |           ------------- this expression has type `(bool, bool)`\n LL |         A::B => (),\n-   |         ^^^^ expected tuple, found enum `A`\n+   |         ^^^^ expected `(bool, bool)`, found `A`\n    |\n    = note: expected tuple `(bool, bool)`\n                found enum `A`"}, {"sha": "84040e8050e965b87af60e8aa13fe80238183528", "filename": "tests/ui/json/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf-multifile.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":622,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":622,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":682,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":682,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":746,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":746,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -108,7 +108,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "b0f450e9ecc1407fc5175a2c06ec63ae8ce9ae07", "filename": "tests/ui/json/json-bom-plus-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fjson%2Fjson-bom-plus-crlf.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -24,7 +24,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":607,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":607,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -52,7 +52,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":667,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":667,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":23,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":23,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -80,7 +80,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":731,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected `String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":731,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":2,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":2,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\".to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n \n@@ -108,7 +108,7 @@ This error occurs when an expression was used in a place where the compiler\n expected an expression of a different type. It can occur in several cases, the\n most common being when calling a function and passing an argument which has a\n different type than the matching type in the function declaration.\n-\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected `String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors\n \"}"}, {"sha": "6a015aced6f4e90a57e3a3e9d3b31b2b13908949", "filename": "tests/ui/let-else/issue-94176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Fissue-94176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Fissue-94176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Fissue-94176.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-94176.rs:5:32\n    |\n LL | pub fn test(a: Option<u32>) -> Option<u32> {\n-   |        ----                    ^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |        ----                    ^^^^^^^^^^^ expected `Option<u32>`, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |"}, {"sha": "143b838bac50000e5536c7c7600365ab0777272e", "filename": "tests/ui/let-else/let-else-deref-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL |         let Bar::Present(z) = self else {\n    |             ^^^^^^^^^^^^^^^   ---- this expression has type `&mut Foo`\n    |             |\n-   |             expected struct `Foo`, found enum `Bar`\n+   |             expected `Foo`, found `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/let-else-deref-coercion.rs:68:13\n    |\n LL |         let Bar(z) = x;\n    |             ^^^^^^   - this expression has type `&mut irrefutable::Foo`\n    |             |\n-   |             expected struct `Foo`, found struct `Bar`\n+   |             expected `Foo`, found `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "661d905cd0783551ebd4de7306f6ebfc383d3c68", "filename": "tests/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n LL | |         Some(2)\n LL | |     };\n-   | |_____^ expected `!`, found enum `Option`\n+   | |_____^ expected `!`, found `Option<{integer}>`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`\n@@ -32,7 +32,7 @@ error[E0308]: `else` clause of `let...else` does not diverge\n   --> $DIR/let-else-non-diverging.rs:10:32\n    |\n LL |     let Some(x) = Some(1) else { Some(2) };\n-   |                                ^^^^^^^^^^^ expected `!`, found enum `Option`\n+   |                                ^^^^^^^^^^^ expected `!`, found `Option<{integer}>`\n    |\n    = note: expected type `!`\n               found enum `Option<{integer}>`\n@@ -43,7 +43,7 @@ error[E0308]: `else` clause of `let...else` does not diverge\n   --> $DIR/let-else-non-diverging.rs:15:32\n    |\n LL |     let Some(x) = Some(1) else { foo::<Uninhabited>() };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found enum `Uninhabited`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found `Uninhabited`\n    |\n    = note: expected type `!`\n               found enum `Uninhabited`"}, {"sha": "ada1805e7256f385172cb748716fbbbbf28241d8", "filename": "tests/ui/let-else/let-else-ref-bindings.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet-else%2Flet-else-ref-bindings.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:16:38\n    |\n LL |     let Some(ref a): Option<&[u8]> = some else { return };\n-   |                                      ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                                      ^^^^ expected `Option<&[u8]>`, found `Option<Vec<u8>>`\n    |\n    = note: expected enum `Option<&[u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:20:38\n    |\n LL |     let Some(ref a): Option<&[u8]> = &some else { return };\n-   |                                      ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                                      ^^^^^ expected `Option<&[u8]>`, found `&Option<Vec<u8>>`\n    |\n    = note:   expected enum `Option<&[u8]>`\n            found reference `&Option<Vec<u8>>`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:24:34\n    |\n LL |     let Some(a): Option<&[u8]> = some else { return };\n-   |                  -------------   ^^^^ expected `&[u8]`, found struct `Vec`\n+   |                  -------------   ^^^^ expected `Option<&[u8]>`, found `Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -31,7 +31,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:27:34\n    |\n LL |     let Some(a): Option<&[u8]> = &some else { return };\n-   |                  -------------   ^^^^^ expected enum `Option`, found `&Option<Vec<u8>>`\n+   |                  -------------   ^^^^^ expected `Option<&[u8]>`, found `&Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:44:46\n    |\n LL |     let Some(ref mut a): Option<&mut [u8]> = some else { return };\n-   |                                              ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                                              ^^^^ expected `Option<&mut [u8]>`, found `Option<Vec<u8>>`\n    |\n    = note: expected enum `Option<&mut [u8]>`\n               found enum `Option<Vec<u8>>`\n@@ -51,7 +51,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:48:46\n    |\n LL |     let Some(ref mut a): Option<&mut [u8]> = &mut some else { return };\n-   |                                              ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                                              ^^^^^^^^^ expected `Option<&mut [u8]>`, found `&mut Option<Vec<u8>>`\n    |\n    = note:           expected enum `Option<&mut [u8]>`\n            found mutable reference `&mut Option<Vec<u8>>`\n@@ -60,7 +60,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:52:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = some else { return };\n-   |                  -----------------   ^^^^ expected `&mut [u8]`, found struct `Vec`\n+   |                  -----------------   ^^^^ expected `Option<&mut [u8]>`, found `Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |\n@@ -71,7 +71,7 @@ error[E0308]: mismatched types\n   --> $DIR/let-else-ref-bindings.rs:55:38\n    |\n LL |     let Some(a): Option<&mut [u8]> = &mut some else { return };\n-   |                  -----------------   ^^^^^^^^^ expected enum `Option`, found mutable reference\n+   |                  -----------------   ^^^^^^^^^ expected `Option<&mut [u8]>`, found `&mut Option<Vec<u8>>`\n    |                  |\n    |                  expected due to this\n    |"}, {"sha": "535073d6ebb0f1ba20a44ec6c8716bfa05b366b2", "filename": "tests/ui/lifetimes/issue-17728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flifetimes%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flifetimes%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-17728.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ LL | |         \"n\" | \"north\" => RoomDirection::North,\n LL | |         \"down\" => RoomDirection::Down,\n    | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n LL | |         _ => None\n-   | |              ^^^^ expected enum `RoomDirection`, found enum `Option`\n+   | |              ^^^^ expected `RoomDirection`, found `Option<_>`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |"}, {"sha": "4dfacb938011569007e91b6fe2832fe04eeeb62b", "filename": "tests/ui/lifetimes/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flifetimes%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-26638.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-26638.rs:1:69\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ----   ^^^^^^^^^^^ expected `&str`, found enum `Option`\n+   |                                                              ----   ^^^^^^^^^^^ expected `&str`, found `Option<&str>`\n    |                                                              |\n    |                                                              expected `&'static str` because of return type\n    |\n@@ -60,7 +60,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-26638.rs:5:47\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ----   ^^^^^^ expected `str`, found `u8`\n+   |                                        ----   ^^^^^^ expected `&str`, found `&u8`\n    |                                        |\n    |                                        expected `&'static str` because of return type\n    |"}, {"sha": "294476107ef7881a3648aaad69abe8f9b3e29cd9", "filename": "tests/ui/lint/must_not_suspend/tuple-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftuple-mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple-mismatch.rs:6:20\n    |\n LL |         yield ((), ());\n-   |                    ^^ expected tuple, found `()`\n+   |                    ^^ expected `((), ())`, found `()`\n    |\n    = note:  expected tuple `((), ())`\n            found unit type `()`"}, {"sha": "5525dbb9005d3dc40bb27cd6a403314a4b8635c6", "filename": "tests/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Floops%2Floop-break-value.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -167,7 +167,7 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:80:15\n    |\n LL |         break (break, break);\n-   |               ^^^^^^^^^^^^^^ expected `()`, found tuple\n+   |               ^^^^^^^^^^^^^^ expected `()`, found `(!, !)`\n    |\n    = note: expected unit type `()`\n                   found tuple `(!, !)`"}, {"sha": "195192fbd82409f6290c7358eb66eb2187bf5e20", "filename": "tests/ui/match/issue-12552.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fissue-12552.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   match t {\n    |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n-   |     ^^^^^^^ expected enum `Result`, found enum `Option`\n+   |     ^^^^^^^ expected `Result<_, {integer}>`, found `Option<_>`\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`\n@@ -20,7 +20,7 @@ LL |   match t {\n    |         - this expression has type `Result<_, {integer}>`\n ...\n LL |     None => ()\n-   |     ^^^^ expected enum `Result`, found enum `Option`\n+   |     ^^^^ expected `Result<_, {integer}>`, found `Option<_>`\n    |\n    = note: expected enum `Result<_, {integer}>`\n               found enum `Option<_>`"}, {"sha": "12f37274b6b21b489ec93b65723cfb797b156338", "filename": "tests/ui/match/issue-91058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fissue-91058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fissue-91058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fissue-91058.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match array {\n    |           ----- this expression has type `[S; 1]`\n LL |         [()] => {}\n-   |          ^^ expected struct `S`, found `()`\n+   |          ^^ expected `S`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "4da7b436ba8a82b575b939c97890d96f8db724e0", "filename": "tests/ui/match/match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-struct.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     match (S { a: 1 }) {\n         E::C(_) => (),\n         //~^ ERROR mismatched types\n-        //~| expected struct `S`, found enum `E`\n+        //~| expected `S`, found `E`\n         _ => ()\n     }\n }"}, {"sha": "fdc6fd77077e0fca4f0e1230dcc98cd980c287f3", "filename": "tests/ui/match/match-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-struct.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (S { a: 1 }) {\n    |           ------------ this expression has type `S`\n LL |         E::C(_) => (),\n-   |         ^^^^^^^ expected struct `S`, found enum `E`\n+   |         ^^^^^^^ expected `S`, found `E`\n \n error: aborting due to previous error\n "}, {"sha": "aac873c760e75ff3cd993dcd2c354004c5925f8e", "filename": "tests/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | enum B { B }\n    |          - unit variant defined here\n LL |\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n-   |                                    -   ^^^^ expected enum `A`, found enum `B`\n+   |                                    -   ^^^^ expected `A`, found `B`\n    |                                    |\n    |                                    this expression has type `A`\n "}, {"sha": "25e8152d8cf50da760bfc7c1c89aeb5e135d34cc", "filename": "tests/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-tag-unary.rs:4:43\n    |\n LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } }\n-   |                                       -   ^^^^^^^ expected enum `A`, found enum `B`\n+   |                                       -   ^^^^^^^ expected `A`, found `B`\n    |                                       |\n    |                                       this expression has type `A`\n "}, {"sha": "32e269b7ad89f2d28bba1f9b835d03261a26de55", "filename": "tests/ui/methods/issues/issue-61525.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61525.rs:14:33\n    |\n LL |         1.query::<dyn ToString>(\"\")\n-   |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n+   |           --------------------- ^^ expected `dyn ToString`, found `&str`\n    |           |\n    |           arguments to this method are incorrect\n    |"}, {"sha": "0466bb0a0c997dab3eca1b2e1218ae520b39fe13", "filename": "tests/ui/methods/issues/issue-90315.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fissues%2Fissue-90315.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:28:8\n    |\n LL |     if 1..(end + 1).is_empty() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:34:8\n    |\n LL |     if 1..(end + 1).is_sorted() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:40:21\n    |\n LL |     let _res: i32 = 3..6.take(2).sum();\n-   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found struct `Range`\n+   |               ---   ^^^^^^^^^^^^^^^^^^ expected `i32`, found `Range<{integer}>`\n    |               |\n    |               expected due to this\n    |\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:45:21\n    |\n LL |     let _sum: i32 = 3..6.sum();\n-   |               ---   ^^^^^^^^^^ expected `i32`, found struct `Range`\n+   |               ---   ^^^^^^^^^^ expected `i32`, found `Range<{integer}>`\n    |               |\n    |               expected due to this\n    |\n@@ -158,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-90315.rs:62:8\n    |\n LL |     if 1..end.error_method() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<{integer}>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "5912b4ec2c3cb1855b4d6ca55897c35e65a821c1", "filename": "tests/ui/methods/method-self-arg-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,9 +9,9 @@ impl Foo {\n fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n-                 //~| expected `&Foo`, found struct `Foo`\n+                 //~| expected `&Foo`, found `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n-                      //~| expected struct `Foo`, found integer\n+                      //~| expected `&Foo`, found `&{integer}`\n                       //~| expected reference `&Foo`\n                       //~| found reference `&{integer}`\n }"}, {"sha": "32ab8dced21980d523cdbbc9a0e084579c629c96", "filename": "tests/ui/methods/method-self-arg-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-self-arg-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     Foo::bar(x);\n    |     -------- ^\n    |     |        |\n-   |     |        expected `&Foo`, found struct `Foo`\n+   |     |        expected `&Foo`, found `Foo`\n    |     |        help: consider borrowing here: `&x`\n    |     arguments to this function are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/method-self-arg-1.rs:13:14\n    |\n LL |     Foo::bar(&42);\n-   |     -------- ^^^ expected struct `Foo`, found integer\n+   |     -------- ^^^ expected `&Foo`, found `&{integer}`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "6d2fb1ce9cf6287f379a057531aa4a8c5ddc3791", "filename": "tests/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn a() -> Foo {\n    |           --- expected `Foo` because of return type\n LL |     Some(Foo { bar: 1 })\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `Option`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `Foo`, found `Option<Foo>`\n    |\n    = note: expected struct `Foo`\n                 found enum `Option<Foo>`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL | fn a2() -> Foo {\n    |            --- expected `Foo` because of return type\n LL |     Ok(Foo { bar: 1})\n-   |     ^^^^^^^^^^^^^^^^^ expected struct `Foo`, found enum `Result`\n+   |     ^^^^^^^^^^^^^^^^^ expected `Foo`, found `Result<Foo, _>`\n    |\n    = note: expected struct `Foo`\n                 found enum `Result<Foo, _>`\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL | fn b() -> Option<Foo> {\n    |           ----------- expected `Option<Foo>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^ expected `Option<Foo>`, found `Foo`\n    |\n    = note: expected enum `Option<Foo>`\n             found struct `Foo`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL | fn c() -> Result<Foo, Bar> {\n    |           ---------------- expected `Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `Result`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^ expected `Result<Foo, Bar>`, found `Foo`\n    |\n    = note: expected enum `Result<Foo, Bar>`\n             found struct `Foo`\n@@ -57,7 +57,7 @@ LL | fn d() -> X<X<String, String>, String> {\n    |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n ...\n LL |     x\n-   |     ^ expected struct `String`, found integer\n+   |     ^ expected `X<X<String, String>, String>`, found `X<X<String, {integer}>, {integer}>`\n    |\n    = note: expected struct `X<X<_, String>, String>`\n               found struct `X<X<_, {integer}>, {integer}>`\n@@ -69,7 +69,7 @@ LL | fn e() -> X<X<String, String>, String> {\n    |           ---------------------------- expected `X<X<String, String>, String>` because of return type\n ...\n LL |     x\n-   |     ^ expected struct `String`, found integer\n+   |     ^ expected `X<X<String, String>, String>`, found `X<X<String, {integer}>, String>`\n    |\n    = note: expected struct `X<X<_, String>, _>`\n               found struct `X<X<_, {integer}>, _>`\n@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n LL | fn f() -> String {\n    |           ------ expected `String` because of return type\n LL |     1+2\n-   |     ^^^ expected struct `String`, found integer\n+   |     ^^^ expected `String`, found integer\n    |\n help: try using a conversion method\n    |\n@@ -93,7 +93,7 @@ error[E0308]: mismatched types\n LL | fn g() -> String {\n    |           ------ expected `String` because of return type\n LL |     -2\n-   |     ^^ expected struct `String`, found integer\n+   |     ^^ expected `String`, found integer\n    |\n help: try using a conversion method\n    |"}, {"sha": "54abb50d6e8c79c98d65b3df50b7858a71d49bf1", "filename": "tests/ui/mismatched_types/do-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fdo-not-suggest-boxed-trait-objects-instead-of-impl-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL | |         S\n    | |         - expected because of this\n LL | |     } else {\n LL | |         Y\n-   | |         ^ expected struct `S`, found struct `Y`\n+   | |         ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n \n@@ -17,7 +17,7 @@ LL | /     match true {\n LL | |         true => S,\n    | |                 - this is found to be of type `S`\n LL | |         false => Y,\n-   | |                  ^ expected struct `S`, found struct `Y`\n+   | |                  ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n "}, {"sha": "96ab3a029914eaee9184802fab7b8d9e5974f6f2", "filename": "tests/ui/mismatched_types/issue-106182.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-106182.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `&_S`\n LL |         _S(& (mut _y), _v) => {\n-   |            ^^^^^^^^^^ expected `u32`, found reference\n+   |            ^^^^^^^^^^ expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "318285598a0b53e33c8cd1b2d0e8bb1746f5f0db", "filename": "tests/ui/mismatched_types/issue-38371-unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n LL | fn bgh(&&bar: u32) {}\n    |        ^^^^^  --- expected due to this\n    |        |\n-   |        expected `u32`, found reference\n+   |        expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "19335c446c3e70c75952f40ec252110b0fed738a", "filename": "tests/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(&_a: Foo) {}\n    |        ^^^  --- expected due to this\n    |        |\n-   |        expected struct `Foo`, found reference\n+   |        expected `Foo`, found `&_`\n    |\n    = note: expected struct `Foo`\n            found reference `&_`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n LL | fn agh(&&_a: &u32) {}\n    |         ^^^  ---- expected due to this\n    |         |\n-   |         expected `u32`, found reference\n+   |         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "57db71f889cf709f5a35ba800824c52f638826e9", "filename": "tests/ui/mismatched_types/non_zero_assigned_something.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fnon_zero_assigned_something.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/non_zero_assigned_something.rs:2:35\n    |\n LL |     let _: std::num::NonZeroU64 = 1;\n-   |            --------------------   ^ expected struct `NonZeroU64`, found integer\n+   |            --------------------   ^ expected `NonZeroU64`, found integer\n    |            |\n    |            expected due to this\n    |\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n   --> $DIR/non_zero_assigned_something.rs:6:43\n    |\n LL |     let _: Option<std::num::NonZeroU64> = 1;\n-   |            ----------------------------   ^ expected enum `Option`, found integer\n+   |            ----------------------------   ^ expected `Option<NonZeroU64>`, found integer\n    |            |\n    |            expected due to this\n    |"}, {"sha": "252e56387ba8b99eceb1508abcf5244728f72f6e", "filename": "tests/ui/mismatched_types/normalize-fn-sig.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/normalize-fn-sig.rs:14:22\n    |\n LL |     needs_i32_ref_fn(foo::<()>);\n-   |     ---------------- ^^^^^^^^^ expected `&i32`, found `i32`\n+   |     ---------------- ^^^^^^^^^ expected fn pointer, found fn item\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "62824004db5bfb71400a45c6ef20d8587efb2d1d", "filename": "tests/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn _f0(&_a: u32) {}\n    |        ^^^  --- expected due to this\n    |        |\n-   |        expected `u32`, found reference\n+   |        expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL | fn _f2(&&_a: &u32) {}\n    |         ^^^  ---- expected due to this\n    |         |\n-   |         expected `u32`, found reference\n+   |         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n LL | fn _f3(&mut &_a: &mut u32) {}\n    |             ^^^  -------- expected due to this\n    |             |\n-   |             expected `u32`, found reference\n+   |             expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -106,7 +106,7 @@ LL |     let _: fn(u32) = |&_a| ();\n    |                       ^--\n    |                       ||\n    |                       |expected due to this\n-   |                       expected `u32`, found reference\n+   |                       expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -145,7 +145,7 @@ LL |     let _: fn(&u32) = |&&_a| ();\n    |                         ^--\n    |                         ||\n    |                         |expected due to this\n-   |                         expected `u32`, found reference\n+   |                         expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -162,7 +162,7 @@ LL |     let _: fn(&mut u32) = |&mut &_a| ();\n    |                                 ^--\n    |                                 ||\n    |                                 |expected due to this\n-   |                                 expected `u32`, found reference\n+   |                                 expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -212,7 +212,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&_a: u32| ();\n    |              ^^^  --- expected due to this\n    |              |\n-   |              expected `u32`, found reference\n+   |              expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -249,7 +249,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&&_a: &u32| ();\n    |               ^^^  ---- expected due to this\n    |               |\n-   |               expected `u32`, found reference\n+   |               expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n@@ -265,7 +265,7 @@ error[E0308]: mismatched types\n LL |     let _ = |&mut &_a: &mut u32| ();\n    |                   ^^^  -------- expected due to this\n    |                   |\n-   |                   expected `u32`, found reference\n+   |                   expected `u32`, found `&_`\n    |\n    = note:   expected type `u32`\n            found reference `&_`"}, {"sha": "4bbeaaab9375504d7049cefa8517a83ee2fabc2a", "filename": "tests/ui/mismatched_types/show_module.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fshow_module.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,15 +4,15 @@ error[E0308]: mismatched types\n LL | fn foo() -> Foo {\n    |             --- expected `baz::Foo` because of return type\n LL |     meh::Foo\n-   |     ^^^^^^^^ expected struct `baz::Foo`, found struct `meh::Foo`\n+   |     ^^^^^^^^ expected `baz::Foo`, found `meh::Foo`\n    |\n-   = note: struct `meh::Foo` and struct `baz::Foo` have similar names, but are actually distinct types\n-note: struct `meh::Foo` is defined in module `crate::meh` of the current crate\n+   = note: `meh::Foo` and `baz::Foo` have similar names, but are actually distinct types\n+note: `meh::Foo` is defined in module `crate::meh` of the current crate\n   --> $DIR/show_module.rs:8:5\n    |\n LL |     pub struct Foo;\n    |     ^^^^^^^^^^^^^^\n-note: struct `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n+note: `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n   --> $DIR/show_module.rs:3:9\n    |\n LL |         pub struct Foo;"}, {"sha": "3e44fb759296a32552353f4e53d7cd328544dc51", "filename": "tests/ui/mismatched_types/similar_paths.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,12 +4,12 @@ error[E0308]: mismatched types\n LL | pub fn foo() -> Option<u8> {\n    |                 ---------- expected `Option<u8>` because of return type\n LL |     Some(42_u8)\n-   |     ^^^^^^^^^^^ expected enum `Option`, found enum `std::option::Option`\n+   |     ^^^^^^^^^^^ expected `Option<u8>`, found `std::option::Option<u8>`\n    |\n-   = note: enum `std::option::Option` and enum `Option` have similar names, but are actually distinct types\n-note: enum `std::option::Option` is defined in crate `core`\n+   = note: `std::option::Option<u8>` and `Option<u8>` have similar names, but are actually distinct types\n+note: `std::option::Option<u8>` is defined in crate `core`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n-note: enum `Option` is defined in the current crate\n+note: `Option<u8>` is defined in the current crate\n   --> $DIR/similar_paths.rs:1:1\n    |\n LL | enum Option<T> {"}, {"sha": "80e78a4e4fa3cf315060a2b0084b79820920c5ed", "filename": "tests/ui/mismatched_types/similar_paths_primitive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/similar_paths_primitive.rs:8:9\n    |\n LL |     foo(true);\n-   |     --- ^^^^ expected struct `bool`, found `bool`\n+   |     --- ^^^^ expected `bool`, found a different `bool`\n    |     |\n    |     arguments to this function are incorrect\n    |\n-   = note: bool and struct `bool` have similar names, but are actually distinct types\n+   = note: bool and `bool` have similar names, but are actually distinct types\n    = note: bool is a primitive defined by the language\n-note: struct `bool` is defined in the current crate\n+note: `bool` is defined in the current crate\n   --> $DIR/similar_paths_primitive.rs:3:1\n    |\n LL | struct bool;"}, {"sha": "40182a75a989a5ad1e35a603c798613b50b8291c", "filename": "tests/ui/mismatched_types/suggest-boxed-trait-objects-instead-of-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-boxed-trait-objects-instead-of-impl-trait.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL | |         S\n    | |         - expected because of this\n LL | |     } else {\n LL | |         Y\n-   | |         ^ expected struct `S`, found struct `Y`\n+   | |         ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `if` and `else` have incompatible types\n    |\n@@ -28,7 +28,7 @@ LL | /     match true {\n LL | |         true => S,\n    | |                 - this is found to be of type `S`\n LL | |         false => Y,\n-   | |                  ^ expected struct `S`, found struct `Y`\n+   | |                  ^ expected `S`, found `Y`\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |"}, {"sha": "c5d0eef10265b798cba2f2a271b146b80126dcfc", "filename": "tests/ui/mismatched_types/suggest-removing-tuple-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-removing-tuple-struct-field.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-removing-tuple-struct-field.rs:11:13\n    |\n LL |     some_fn(value.0);\n-   |     ------- ^^^^^^^ expected struct `MyWrapper`, found `u32`\n+   |     ------- ^^^^^^^ expected `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-removing-tuple-struct-field.rs:12:13\n    |\n LL |     some_fn(my_wrapper!(123).0);\n-   |     ------- ^^^^^^^^^^^^^^^^^^ expected struct `MyWrapper`, found `u32`\n+   |     ------- ^^^^^^^^^^^^^^^^^^ expected `MyWrapper`, found `u32`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "e20a0aa0e2aee91cd0beb4c3129a3633db5b2555", "filename": "tests/ui/mismatched_types/wrap-suggestion-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fwrap-suggestion-privacy.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:12:19\n    |\n LL |     needs_wrapper(0);\n-   |     ------------- ^ expected struct `Wrapper`, found integer\n+   |     ------------- ^ expected `Wrapper<i32>`, found integer\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:17:20\n    |\n LL |     needs_wrapping(0);\n-   |     -------------- ^ expected struct `Wrapping`, found integer\n+   |     -------------- ^ expected `Wrapping<i32>`, found integer\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/wrap-suggestion-privacy.rs:22:17\n    |\n LL |     needs_ready(Some(0));\n-   |     ----------- ^^^^^^^ expected struct `Ready`, found enum `Option`\n+   |     ----------- ^^^^^^^ expected `Ready<i32>`, found `Option<{integer}>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "8401827e51f82051e403696686e0abc23a1820ec", "filename": "tests/ui/mut/mut-cross-borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut%2Fmut-cross-borrowing.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     f(x)\n    |     - ^\n    |     | |\n-   |     | expected `&mut isize`, found struct `Box`\n+   |     | expected `&mut isize`, found `Box<{integer}>`\n    |     | help: consider mutably borrowing here: `&mut x`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "ded13e2707f5f1c222e418315cd8e927a97c664b", "filename": "tests/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected `()`, found reference\n+   |     ^^^^^^^^^ expected `()`, found `&_`\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `(!, !)`\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "5ac4359c5016f436da0b891ea0eef57b021edff5", "filename": "tests/ui/never_type/issue-10176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-10176.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,7 +3,7 @@ fn f() -> isize {\n //~^ ERROR mismatched types\n //~| expected type `isize`\n //~| found tuple `(!, !)`\n-//~| expected `isize`, found tuple\n+//~| expected `isize`, found `(!, !)`\n }\n \n fn main() {}"}, {"sha": "3f381b9aea9b297041752e725be6b25e196ee9c7", "filename": "tests/ui/never_type/issue-10176.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-10176.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `(!, !)`\n    |\n    = note: expected type `isize`\n              found tuple `(!, !)`"}, {"sha": "99dfce869034323b3549a951d8f345b2f0f04179", "filename": "tests/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-52443.rs:2:10\n    |\n LL |     [(); & { loop { continue } } ];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found reference\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `&_`\n    |\n    = note:   expected type `usize`\n            found reference `&_`"}, {"sha": "c3d80a425e0573a1dbb8eed2f65e2bf87c9ffc27", "filename": "tests/ui/never_type/issue-96335.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-96335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnever_type%2Fissue-96335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Fissue-96335.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     0.....{loop{}1};\n    |     ----^^^^^^^^^^^\n    |     |   |\n-   |     |   expected integer, found struct `RangeTo`\n+   |     |   expected integer, found `RangeTo<{integer}>`\n    |     arguments to this function are incorrect\n    |\n    = note: expected type `{integer}`"}, {"sha": "d473ad6c9c93ef197ef8208d5859ace77539da19", "filename": "tests/ui/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnoexporttypeexe.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected type `isize`\n     //~| found enum `Option<isize>`\n-    //~| expected `isize`, found enum `Option`\n+    //~| expected `isize`, found `Option<isize>`\n }"}, {"sha": "26bafd31d011b72d5434af700496a317c8f6dd1f", "filename": "tests/ui/noexporttypeexe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnoexporttypeexe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fnoexporttypeexe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnoexporttypeexe.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/noexporttypeexe.rs:10:18\n    |\n LL |   let x: isize = noexporttypelib::foo();\n-   |          -----   ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n+   |          -----   ^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `Option<isize>`\n    |          |\n    |          expected due to this\n    |"}, {"sha": "795c46acb5d31e40ea5b02bd853018dbd1e13786", "filename": "tests/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n    |              -                 ^                     ------- this expression has type `E<E<{integer}>>`\n    |              |                 |\n-   |              |                 expected integer, found enum `E`\n+   |              |                 expected integer, found `E<{integer}>`\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`"}, {"sha": "5a63e621f4a3ac8dea6ff2d5d313b685d12647ad", "filename": "tests/ui/or-patterns/nested-undelimited-precedence.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For-patterns%2Fnested-undelimited-precedence.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n LL |     let &A(_) | B(_): F = A(3);\n    |         ^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`\n@@ -53,7 +53,7 @@ error[E0308]: mismatched types\n LL |     let &&A(_) | B(_): F = A(3);\n    |         ^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`\n@@ -64,7 +64,7 @@ error[E0308]: mismatched types\n LL |     let &mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found `&mut _`\n+   |         expected `F`, found `&mut _`\n    |\n    = note:           expected enum `F`\n            found mutable reference `&mut _`\n@@ -75,7 +75,7 @@ error[E0308]: mismatched types\n LL |     let &&mut A(_) | B(_): F = A(3);\n    |         ^^^^^^^^^^         - expected due to this\n    |         |\n-   |         expected enum `F`, found reference\n+   |         expected `F`, found `&_`\n    |\n    = note:   expected enum `F`\n            found reference `&_`"}, {"sha": "d045f4821ff35050998dadd3cfd38e3976f5da83", "filename": "tests/ui/parser/issues/issue-87812-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87812-path.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-87812-path.rs:3:24\n    |\n LL |         let _: usize = $f;\n-   |                -----   ^^ expected `usize`, found struct `Baz`\n+   |                -----   ^^ expected `usize`, found `Baz`\n    |                |\n    |                expected due to this\n ..."}, {"sha": "5b69ca5cd6dfa0b6ab4fc111d8b108a7ff13e446", "filename": "tests/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -314,7 +314,7 @@ error[E0308]: mismatched types\n LL |     if let X.. .0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n    |            |   |\n-   |            |   expected integer, found floating-point number\n+   |            |   expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`\n@@ -351,7 +351,7 @@ error[E0308]: mismatched types\n LL |     if let X..=.0 = 0 {}\n    |            -   ^^   - this expression has type `u8`\n    |            |   |\n-   |            |   expected integer, found floating-point number\n+   |            |   expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`\n@@ -388,7 +388,7 @@ error[E0308]: mismatched types\n LL |     if let X... .0 = 0 {}\n    |            -    ^^   - this expression has type `u8`\n    |            |    |\n-   |            |    expected integer, found floating-point number\n+   |            |    expected `u8`, found floating-point number\n    |            this is of type `u8`\n    |\n    = note: expected type `u8`"}, {"sha": "d1725c60dbbea127989a3afe02dc5ad49f090fd6", "filename": "tests/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n    |\n LL |     let _: usize = unclosed_delim_mod::new();\n-   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found enum `Result`\n+   |            -----   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `Result<Value, ()>`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "67c6d6f01a17f692659565edd21d4e023b1e86f4", "filename": "tests/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -25,7 +25,7 @@ error[E0308]: mismatched types\n LL |     for Some(Qux(_)) | None in [Some(\"\"), None] {\n    |              ^^^^^^            ---------------- this is an iterator with items of type `Option<&str>`\n    |              |\n-   |              expected `str`, found struct `Qux`\n+   |              expected `str`, found `Qux`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "daab3a862c2e135544c43befff99dfa8d55517c0", "filename": "tests/ui/pattern/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let P() = U {};\n    |         ^^^   ---- this expression has type `U`\n    |         |\n-   |         expected struct `U`, found struct `P`\n+   |         expected `U`, found `P<_>`\n    |\n    = note: expected struct `U`\n               found struct `P<_>`"}, {"sha": "029075293106795609d060efa49c28992584f85f", "filename": "tests/ui/pattern/pat-struct-field-expr-has-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-struct-field-expr-has-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match (S { f: 42 }) {\n    |           ------------- this expression has type `S`\n LL |         S { f: Ok(_) } => {}\n-   |                ^^^^^ expected `u8`, found enum `Result`\n+   |                ^^^^^ expected `u8`, found `Result<_, _>`\n    |\n    = note: expected type `u8`\n               found enum `Result<_, _>`"}, {"sha": "4f482c52a98f81b2703d5918f9fae657c25464d9", "filename": "tests/ui/pattern/pat-type-err-formal-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-type-err-formal-param.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(Tuple(_): String) {}\n    |        ^^^^^^^^  ------ expected due to this\n    |        |\n-   |        expected struct `String`, found struct `Tuple`\n+   |        expected `String`, found `Tuple`\n \n error: aborting due to previous error\n "}, {"sha": "b68b69a78a2f7388316c09963e51208ea7610547", "filename": "tests/ui/pattern/pat-type-err-let-stmt.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:29\n    |\n LL |     let Ok(0): Option<u8> = 42u8;\n-   |                ----------   ^^^^ expected enum `Option`, found `u8`\n+   |                ----------   ^^^^ expected `Option<u8>`, found `u8`\n    |                |\n    |                expected due to this\n    |\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0): Option<u8> = 42u8;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `Result`\n+   |         expected `Option<u8>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<u8>`\n               found enum `Result<_, _>`\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0): Option<u8>;\n    |         ^^^^^  ---------- expected due to this\n    |         |\n-   |         expected enum `Option`, found enum `Result`\n+   |         expected `Option<u8>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<u8>`\n               found enum `Result<_, _>`\n@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n LL |     let Ok(0) = 42u8;\n    |         ^^^^^   ---- this expression has type `u8`\n    |         |\n-   |         expected `u8`, found enum `Result`\n+   |         expected `u8`, found `Result<_, _>`\n    |\n    = note: expected type `u8`\n               found enum `Result<_, _>`"}, {"sha": "bed949439237a1f03edbc4cc324fe9a8ba9dbbfe", "filename": "tests/ui/pattern/pattern-error-continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     match 'c' {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n-        //~| expected `char`, found struct `S`\n+        //~| expected `char`, found `S`\n \n         _ => ()\n     }"}, {"sha": "e1349fb02ea768eebc398170ce0532d0d85fccf0", "filename": "tests/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     match 'c' {\n    |           --- this expression has type `char`\n LL |         S { .. } => (),\n-   |         ^^^^^^^^ expected `char`, found struct `S`\n+   |         ^^^^^^^^ expected `char`, found `S`\n \n error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:28:7"}, {"sha": "62283dfe9b64f4281769544bb9efba24bab7ffad", "filename": "tests/ui/pattern/pattern-ident-path-generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-ident-path-generics.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match Some(\"foo\") {\n    |           ----------- this expression has type `Option<&str>`\n LL |         None::<isize> => {}\n-   |         ^^^^^^^^^^^^^ expected `&str`, found `isize`\n+   |         ^^^^^^^^^^^^^ expected `Option<&str>`, found `Option<isize>`\n    |\n    = note: expected enum `Option<&str>`\n               found enum `Option<isize>`"}, {"sha": "4eb00254861d5d2045f08f8791b24ab6099118ae", "filename": "tests/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match t {\n    |           - this expression has type `Bar`\n LL |       Bar::T1(_, Some::<isize>(x)) => {\n-   |                  ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n+   |                  ^^^^^^^^^^^^^^^^ expected `Option<Vec<isize>>`, found `Option<isize>`\n    |\n    = note: expected enum `Option<Vec<isize>>`\n               found enum `Option<isize>`"}, {"sha": "a8d0d623604060ed19cb517ca95d00f472ec6b54", "filename": "tests/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return-2.rs:9:41\n    |\n LL |             let value: &bool = unsafe { &42 };\n-   |                                         ^^^ expected `bool`, found integer\n+   |                                         ^^^ expected `&bool`, found `&{integer}`\n    |\n    = note: expected reference `&bool`\n               found reference `&{integer}`"}, {"sha": "e69cc3b8cf598c5ec063ec02af3e937779c4357b", "filename": "tests/ui/proc-macro/break-token-spans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbreak-token-spans.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/break-token-spans.rs:14:32\n    |\n LL |     let a: Option<Option<u8>>= true;\n-   |            ------------------  ^^^^ expected enum `Option`, found `bool`\n+   |            ------------------  ^^^^ expected `Option<Option<u8>>`, found `bool`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "e437bb90b1dfa1843534038d476971e9094012ff", "filename": "tests/ui/proc-macro/issue-37788.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-37788.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL |     // Test that constructing the `visible_parent_map` (in `cstore_impl.rs`\n LL |     std::cell::Cell::new(0)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n    |     |\n-   |     expected `()`, found struct `Cell`\n+   |     expected `()`, found `Cell<{integer}>`\n    |\n    = note: expected unit type `()`\n                  found struct `Cell<{integer}>`"}, {"sha": "0b4dbcba682876f3b60a8e4e2186bb8eb1f396ee", "filename": "tests/ui/proc-macro/resolved-located-at.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fresolved-located-at.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |     resolve_located_at!(a b)\n-   |                           ^ expected `()`, found struct `S`\n+   |                           ^ expected `()`, found `S`\n    |\n    = note: this error originates in the macro `resolve_located_at` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d112983848deeba4cbb3328a7c4a7ee9c1bf5752", "filename": "tests/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeFrom { start: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeFrom { start: 1 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n    |     arguments to this function are incorrect\n    |\n@@ -76,7 +76,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeFull {});\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&std::ops::RangeFull {}`\n    |     arguments to this function are incorrect\n    |\n@@ -94,7 +94,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeFull {});\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&::std::ops::RangeFull {}`\n    |     arguments to this function are incorrect\n    |\n@@ -112,7 +112,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n    |     arguments to this function are incorrect\n    |\n@@ -130,7 +130,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n    |     arguments to this function are incorrect\n    |\n@@ -148,7 +148,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeTo { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeTo { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -184,7 +184,7 @@ error[E0308]: mismatched types\n LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n    |     arguments to this function are incorrect\n    |\n@@ -202,7 +202,7 @@ error[E0308]: mismatched types\n LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n    |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "a6a9f89da749362fd4c2ca79dc748f4ca1d14a6c", "filename": "tests/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |\n@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n LL |     take_range(1..);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&(1..)`\n    |     arguments to this function are incorrect\n    |\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n LL |     take_range(..);\n    |     ---------- ^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&(..)`\n    |     arguments to this function are incorrect\n    |\n@@ -70,7 +70,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(0..=1)`\n    |     arguments to this function are incorrect\n    |\n@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     take_range(..5);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&(..5)`\n    |     arguments to this function are incorrect\n    |\n@@ -106,7 +106,7 @@ error[E0308]: mismatched types\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(..=42)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "eda047b507a33776fe083e8520e3d984f2917091", "filename": "tests/ui/range/issue-54505.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-54505.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..1);\n    |     ---------- ^^^^\n    |     |          |\n-   |     |          expected reference, found struct `Range`\n+   |     |          expected `&_`, found `Range<{integer}>`\n    |     |          help: consider borrowing here: `&(0..1)`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     take_range(1..);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFrom`\n+   |     |          expected `&_`, found `RangeFrom<{integer}>`\n    |     |          help: consider borrowing here: `&(1..)`\n    |     arguments to this function are incorrect\n    |\n@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL |     take_range(..);\n    |     ---------- ^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeFull`\n+   |     |          expected `&_`, found `RangeFull`\n    |     |          help: consider borrowing here: `&(..)`\n    |     arguments to this function are incorrect\n    |\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n LL |     take_range(0..=1);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeInclusive`\n+   |     |          expected `&_`, found `RangeInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(0..=1)`\n    |     arguments to this function are incorrect\n    |\n@@ -76,7 +76,7 @@ error[E0308]: mismatched types\n LL |     take_range(..5);\n    |     ---------- ^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeTo`\n+   |     |          expected `&_`, found `RangeTo<{integer}>`\n    |     |          help: consider borrowing here: `&(..5)`\n    |     arguments to this function are incorrect\n    |\n@@ -94,7 +94,7 @@ error[E0308]: mismatched types\n LL |     take_range(..=42);\n    |     ---------- ^^^^^\n    |     |          |\n-   |     |          expected reference, found struct `RangeToInclusive`\n+   |     |          expected `&_`, found `RangeToInclusive<{integer}>`\n    |     |          help: consider borrowing here: `&(..=42)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "77595b3678ebc55062a7769eb3bc7be11507291d", "filename": "tests/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     demo(tell(1)..tell(10));\n    |     ---- ^^^^^^^^^^^^^^^^^\n    |     |    |\n-   |     |    expected `&Range<usize>`, found struct `Range`\n+   |     |    expected `&Range<usize>`, found `Range<usize>`\n    |     |    help: consider borrowing here: `&(tell(1)..tell(10))`\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n LL |     demo(1..10);\n    |     ---- ^^^^^\n    |     |    |\n-   |     |    expected `&Range<usize>`, found struct `Range`\n+   |     |    expected `&Range<usize>`, found `Range<{integer}>`\n    |     |    help: consider borrowing here: `&(1..10)`\n    |     arguments to this function are incorrect\n    |"}, {"sha": "18610bc5bb086c6e808369de1aa2fc48022a67f4", "filename": "tests/ui/repeat-expr/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat-expr%2Frepeat_count.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -30,5 +30,5 @@ fn main() {\n     }\n     let g = [0; G { g: () }];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`, found struct `G`\n+    //~| expected `usize`, found `G`\n }"}, {"sha": "8a1ed8f3b9c7c9d720190a23ae084b0939619df6", "filename": "tests/ui/repeat-expr/repeat_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat-expr%2Frepeat_count.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -34,7 +34,7 @@ error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:31:17\n    |\n LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n+   |                 ^^^^^^^^^^^ expected `usize`, found `G`\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17"}, {"sha": "fffd3027afdb35a7c1c933fc8e7f6ea3a59464ca", "filename": "tests/ui/resolve/name-clash-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fname-clash-nullary.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |   let None: isize = 42;\n    |       ^^^^  ----- expected due to this\n    |       |\n-   |       expected `isize`, found enum `Option`\n+   |       expected `isize`, found `Option<_>`\n    |\n    = note: expected type `isize`\n               found enum `Option<_>`"}, {"sha": "3c051429fd0e979b99ddfa3238776c8980ecb8de", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -267,7 +267,7 @@ LL |             Fn(u8),\n    |             -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^ expected enum `Z`, found enum constructor\n+   |                -   ^^^^^ expected `Z`, found enum constructor\n    |                |\n    |                expected due to this\n    |\n@@ -308,7 +308,7 @@ LL |         Fn(u8),\n    |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^ expected enum `E`, found enum constructor\n+   |            -   ^^^^^^^^ expected `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n@@ -349,7 +349,7 @@ LL |         Fn(u8),\n    |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^ expected enum `E`, found enum constructor\n+   |            -   ^^^^^ expected `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |"}, {"sha": "023db303dd0f18c3ece397a84a99bf27ae64f694", "filename": "tests/ui/resolve/resolve-inconsistent-names.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-inconsistent-names.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -87,7 +87,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this expression has type `(E, E)`\n LL |         (A, B) | (ref B, c) | (c, A) => ()\n-   |             -     ^^^^^ expected enum `E`, found `&E`\n+   |             -     ^^^^^ expected `E`, found `&E`\n    |             |\n    |             first introduced with type `E` here\n    |"}, {"sha": "60d538eba882abcc143e5441e06a0b21b2e13dbc", "filename": "tests/ui/return/return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn%2Freturn-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^ expected `()`, found `S<usize>`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`"}, {"sha": "ccb208fc6c4aeabe9673c8abd35c2da48b98a67b", "filename": "tests/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | /     if x {\n LL | |         Err(42)\n-   | |         ^^^^^^^ expected `()`, found enum `Result`\n+   | |         ^^^^^^^ expected `()`, found `Result<_, {integer}>`\n LL | |                 //| HELP you might have meant to return this value\n LL | |     }\n    | |_____- expected this to be `()`\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n    |\n LL | /     if x {\n LL | |         Err(42)\n-   | |         ^^^^^^^ expected `()`, found enum `Result`\n+   | |         ^^^^^^^ expected `()`, found `Result<_, {integer}>`\n LL | |                 //| HELP you might have meant to return this value\n LL | |     }\n    | |_____- expected this to be `()`"}, {"sha": "fc06de90a00310907baed4fad471e5d234e0b1d4", "filename": "tests/ui/rfc-2005-default-binding-mode/const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2005-default-binding-mode%2Fconst.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -9,7 +9,7 @@ LL |     match &f {\n LL |         FOO => {},\n    |         ^^^\n    |         |\n-   |         expected `&Foo`, found struct `Foo`\n+   |         expected `&Foo`, found `Foo`\n    |         `FOO` is interpreted as a constant, not a new binding\n    |         help: introduce a new binding instead: `other_foo`\n "}, {"sha": "181f57899a91005614e349c578993d984a751474", "filename": "tests/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match &s {\n    |           -- this expression has type `&&str`\n LL |             \"abc\" => true,\n-   |             ^^^^^ expected `&str`, found `str`\n+   |             ^^^^^ expected `&&str`, found `&str`\n    |\n    = note: expected reference `&&str`\n               found reference `&'static str`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     match &s {\n    |           -- this expression has type `&&[u8]`\n LL |         b\"abc\" => true,\n-   |         ^^^^^^ expected `&[u8]`, found array `[u8; 3]`\n+   |         ^^^^^^ expected `&&[u8]`, found `&[u8; 3]`\n    |\n    = note: expected reference `&&[u8]`\n               found reference `&'static [u8; 3]`"}, {"sha": "c209caab5ecb67d66b0a6c822408e8ac4143ecc4", "filename": "tests/ui/rfc-2008-non-exhaustive/uninhabited/coercions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,31 +4,31 @@ error[E0308]: mismatched types\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found enum `UninhabitedEnum`\n+   |     ^ expected `A`, found `UninhabitedEnum`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:27:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found struct `UninhabitedTupleStruct`\n+   |     ^ expected `A`, found `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:31:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found struct `UninhabitedStruct`\n+   |     ^ expected `A`, found `UninhabitedStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions.rs:35:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found enum `UninhabitedVariants`\n+   |     ^ expected `A`, found `UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "289433edf6292282646ecde5009b0afc50fc565f", "filename": "tests/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,31 +4,31 @@ error[E0308]: mismatched types\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found enum `UninhabitedEnum`\n+   |     ^ expected `A`, found `UninhabitedEnum`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:34:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found struct `UninhabitedTupleStruct`\n+   |     ^ expected `A`, found `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:38:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found struct `UninhabitedStruct`\n+   |     ^ expected `A`, found `UninhabitedStruct`\n \n error[E0308]: mismatched types\n   --> $DIR/coercions_same_crate.rs:42:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type\n LL |     x\n-   |     ^ expected struct `A`, found enum `UninhabitedVariants`\n+   |     ^ expected `A`, found `UninhabitedVariants`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4ce97a68a911a77a1ba356e8a6bd5586e9c5aeed", "filename": "tests/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         Ok(x) if let Err(_) = x => {},\n    |                      ^^^^^^   - this expression has type `Option<bool>`\n    |                      |\n-   |                      expected enum `Option`, found enum `Result`\n+   |                      expected `Option<bool>`, found `Result<_, _>`\n    |\n    = note: expected enum `Option<bool>`\n               found enum `Result<_, _>`\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |         Ok(x) if let 0 = x => {},\n    |                      ^   - this expression has type `Option<bool>`\n    |                      |\n-   |                      expected enum `Option`, found integer\n+   |                      expected `Option<bool>`, found integer\n    |\n    = note: expected enum `Option<bool>`\n               found type `{integer}`"}, {"sha": "81933173c25c139bacb90ab71903481b2ebf2fdb", "filename": "tests/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -1516,7 +1516,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:157:8\n    |\n LL |     if true..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1525,7 +1525,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:161:8\n    |\n LL |     if ..(let 0 = 0) {}\n-   |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n+   |        ^^^^^^^^^^^^^ expected `bool`, found `RangeTo<bool>`\n    |\n    = note: expected type `bool`\n             found struct `RangeTo<bool>`\n@@ -1534,7 +1534,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:165:8\n    |\n LL |     if (let 0 = 0).. {}\n-   |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n+   |        ^^^^^^^^^^^^^ expected `bool`, found `RangeFrom<bool>`\n    |\n    = note: expected type `bool`\n             found struct `RangeFrom<bool>`\n@@ -1545,7 +1545,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `Range`\n+   |            expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1554,7 +1554,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:171:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1565,7 +1565,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n-   |            expected `bool`, found struct `Range`\n+   |            expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1574,7 +1574,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1585,7 +1585,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |            |\n-   |            expected fn pointer, found struct `Range`\n+   |            expected fn pointer, found `Range<_>`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1607,7 +1607,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:182:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1618,7 +1618,7 @@ error[E0308]: mismatched types\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |            |\n-   |            expected `bool`, found struct `Range`\n+   |            expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1639,7 +1639,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:190:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1710,7 +1710,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:249:11\n    |\n LL |     while true..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |           ^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1719,7 +1719,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:253:11\n    |\n LL |     while ..(let 0 = 0) {}\n-   |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n+   |           ^^^^^^^^^^^^^ expected `bool`, found `RangeTo<bool>`\n    |\n    = note: expected type `bool`\n             found struct `RangeTo<bool>`\n@@ -1728,7 +1728,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while (let 0 = 0).. {}\n-   |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n+   |           ^^^^^^^^^^^^^ expected `bool`, found `RangeFrom<bool>`\n    |\n    = note: expected type `bool`\n             found struct `RangeFrom<bool>`\n@@ -1739,7 +1739,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `Range`\n+   |               expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1748,7 +1748,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:263:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1759,7 +1759,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n-   |               expected `bool`, found struct `Range`\n+   |               expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1768,7 +1768,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1779,7 +1779,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n    |               |\n-   |               expected fn pointer, found struct `Range`\n+   |               expected fn pointer, found `Range<_>`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -1801,7 +1801,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:274:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1812,7 +1812,7 @@ error[E0308]: mismatched types\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n    |               |\n-   |               expected `bool`, found struct `Range`\n+   |               expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`\n@@ -1833,7 +1833,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:282:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `Range`\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `Range<bool>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<bool>`\n@@ -1883,7 +1883,7 @@ error[E0308]: mismatched types\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |          |\n-   |          expected `bool`, found struct `Range`\n+   |          expected `bool`, found `Range<_>`\n    |\n    = note: expected type `bool`\n             found struct `std::ops::Range<_>`"}, {"sha": "802928452709d074e8f7739d5e91edd6a352a32d", "filename": "tests/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -106,7 +106,7 @@ error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:9:19\n    |\n LL |     let Some(n) = opt && n == 1 else {\n-   |                   ^^^ expected `bool`, found enum `Option`\n+   |                   ^^^ expected `bool`, found `Option<i32>`\n    |\n    = note: expected type `bool`\n               found enum `Option<i32>`\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n LL |     let Some(n) = opt && n == 1 else {\n    |         ^^^^^^^   ------------- this expression has type `bool`\n    |         |\n-   |         expected `bool`, found enum `Option`\n+   |         expected `bool`, found `Option<_>`\n    |\n    = note: expected type `bool`\n               found enum `Option<_>`\n@@ -126,7 +126,7 @@ error[E0308]: mismatched types\n   --> $DIR/ensure-that-let-else-does-not-interact-with-let-chains.rs:15:19\n    |\n LL |     let Some(n) = opt && let another = n else {\n-   |                   ^^^ expected `bool`, found enum `Option`\n+   |                   ^^^ expected `bool`, found `Option<i32>`\n    |\n    = note: expected type `bool`\n               found enum `Option<i32>`\n@@ -137,7 +137,7 @@ error[E0308]: mismatched types\n LL |     let Some(n) = opt && let another = n else {\n    |         ^^^^^^^   ---------------------- this expression has type `bool`\n    |         |\n-   |         expected `bool`, found enum `Option`\n+   |         expected `bool`, found `Option<_>`\n    |\n    = note: expected type `bool`\n               found enum `Option<_>`"}, {"sha": "48e46d3d1d1aaed9419e36461184d3f9e4706da5", "filename": "tests/ui/rfcs/rfc-2528-type-changing-struct-update/feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ffeature-gate.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/feature-gate.rs:22:11\n    |\n LL |         ..m1\n-   |           ^^ expected struct `State2`, found struct `State1`\n+   |           ^^ expected `Machine<State2>`, found `Machine<State1>`\n    |\n    = note: expected struct `Machine<State2>`\n               found struct `Machine<State1>`"}, {"sha": "831731ba4741983ac8aa2648b7359efdb43ac3df", "filename": "tests/ui/rfcs/rfc-2528-type-changing-struct-update/issue-92010-trait-bound-not-satisfied.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Fissue-92010-trait-bound-not-satisfied.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-92010-trait-bound-not-satisfied.rs:8:43\n    |\n LL |     fn y(&self, y: f64) -> Self { P{y, .. self.clone() } }\n-   |                                           ^^^^^^^^^^^^ expected struct `P`, found `&P<T>`\n+   |                                           ^^^^^^^^^^^^ expected `P<T>`, found `&P<T>`\n    |\n    = note: expected struct `P<T>`\n            found reference `&P<T>`"}, {"sha": "f31b311c732d6a579e7124d1447aba8d242347d4", "filename": "tests/ui/rfcs/rfc-2528-type-changing-struct-update/type-generic-update.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2528-type-changing-struct-update%2Ftype-generic-update.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-generic-update.rs:46:11\n    |\n LL |         ..m1\n-   |           ^^ expected `i32`, found `f64`\n+   |           ^^ expected `Machine<'_, i32, f64>`, found `Machine<'_, f64, f64>`\n    |\n    = note: expected struct `Machine<'_, i32, _>`\n               found struct `Machine<'_, f64, _>`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/type-generic-update.rs:51:11\n    |\n LL |         ..m1\n-   |           ^^ expected `i32`, found `f64`\n+   |           ^^ expected `Machine<'_, i32, i32>`, found `Machine<'_, f64, f64>`\n    |\n    = note: expected struct `Machine<'_, i32, i32>`\n               found struct `Machine<'_, f64, f64>`"}, {"sha": "96f4e41de174bcc34b7dc7fc1dd2950e8655bdfe", "filename": "tests/ui/self/issue-61882.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fself%2Fissue-61882.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fself%2Fissue-61882.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fissue-61882.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61882.rs:4:22\n    |\n LL |     const B: A<u8> = Self(0);\n-   |                      ^^^^^^^ expected `u8`, found `bool`\n+   |                      ^^^^^^^ expected `A<u8>`, found `A<bool>`\n    |\n    = note: expected struct `A<u8>`\n               found struct `A<bool>`"}, {"sha": "268009f65a5c1e9c51b3ca768e87a43042caff59", "filename": "tests/ui/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslightly-nice-generic-literal-messages.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected struct `Foo<{float}, _>`\n     //~| found type `{integer}`\n-    //~| expected struct `Foo`, found integer\n+    //~| expected `Foo<{float}, _>`, found integer\n     }\n \n }"}, {"sha": "83ef522ab46e87c0daad2d3cdd778cec60c23e18", "filename": "tests/ui/slightly-nice-generic-literal-messages.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fslightly-nice-generic-literal-messages.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match Foo(1.1, marker::PhantomData) {\n    |           ----------------------------- this expression has type `Foo<{float}, _>`\n LL |         1 => {}\n-   |         ^ expected struct `Foo`, found integer\n+   |         ^ expected `Foo<{float}, _>`, found integer\n    |\n    = note: expected struct `Foo<{float}, _>`\n                 found type `{integer}`"}, {"sha": "bb30f000ea7e8514a368b153a61ee50133260a8a", "filename": "tests/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:7:20\n    |\n LL |     let x: usize = String::new();\n-   |            -----   ^^^^^^^^^^^^^ expected `usize`, found struct `String`\n+   |            -----   ^^^^^^^^^^^^^ expected `usize`, found `String`\n    |            |\n    |            expected due to this\n \n@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n LL |     let x: &str = String::new();\n    |            ----   ^^^^^^^^^^^^^\n    |            |      |\n-   |            |      expected `&str`, found struct `String`\n+   |            |      expected `&str`, found `String`\n    |            |      help: consider borrowing here: `&String::new()`\n    |            expected due to this\n \n@@ -63,7 +63,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9\n    |\n LL |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^ expected `&mut String`, found struct `String`\n+   |         ^^^^^^^^^^^^^^ expected `&mut String`, found `String`\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8cece07cd48c2232dad657ad43dd0f2d7f1d148d", "filename": "tests/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-33884.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-33884.rs:6:22\n    |\n LL |     stream.write_fmt(format!(\"message received\"))\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Arguments`, found struct `String`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arguments<'_>`, found `String`\n    |\n    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "771f21c45da68251ebc1282d6b3a0282b2fd0334", "filename": "tests/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-39018.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n LL |     let _ = a + b;\n    |                 ^\n    |                 |\n-   |                 expected `&str`, found struct `String`\n+   |                 expected `&str`, found `String`\n    |                 help: consider borrowing here: `&b`\n \n error[E0369]: cannot add `String` to `&String`"}, {"sha": "ecccf29a107dcf5903e47ae871957647932557f3", "filename": "tests/ui/specialization/specialization-default-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fspecialization%2Fspecialization-default-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fspecialization-default-types.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -16,7 +16,7 @@ LL |     default type Output = Box<T>;\n LL |     default fn generate(self) -> Self::Output {\n    |                                  ------------ expected `<T as Example>::Output` because of return type\n LL |         Box::new(self)\n-   |         ^^^^^^^^^^^^^^ expected associated type, found struct `Box`\n+   |         ^^^^^^^^^^^^^^ expected associated type, found `Box<T>`\n    |\n    = note: expected associated type `<T as Example>::Output`\n                        found struct `Box<T>`\n@@ -27,7 +27,7 @@ error[E0308]: mismatched types\n LL | fn trouble<T>(t: T) -> Box<T> {\n    |                        ------ expected `Box<T>` because of return type\n LL |     Example::generate(t)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Box`, found associated type\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `Box<T>`, found associated type\n    |\n    = note:       expected struct `Box<T>`\n            found associated type `<T as Example>::Output`"}, {"sha": "24fd67ecbaacdce2bf2e1c4a6ff5945f0fbaaffd", "filename": "tests/ui/static/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fbad-const-type.rs?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -1,4 +1,4 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected struct `String`, found integer\n+//~| expected `String`, found integer\n fn main() { println!(\"{}\", i); }"}, {"sha": "2e930f4596e04b930343c96251a34892fd09a72e", "filename": "tests/ui/static/bad-const-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fbad-const-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | static i: String = 10;\n    |                    ^^- help: try using a conversion method: `.to_string()`\n    |                    |\n-   |                    expected struct `String`, found integer\n+   |                    expected `String`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "99c8b1aa131a72db032d97e17d81a6dd0f3ebda1", "filename": "tests/ui/static/issue-5216.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fissue-5216.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fissue-5216.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fissue-5216.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:3:21\n    |\n LL | pub static C: S = S(f);\n-   |                   - ^ expected struct `Box`, found fn item\n+   |                   - ^ expected `Box<dyn FnMut() + Sync>`, found fn item\n    |                   |\n    |                   arguments to this struct are incorrect\n    |\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:8:19\n    |\n LL | pub static D: T = g;\n-   |                   ^ expected struct `Box`, found fn item\n+   |                   ^ expected `Box<dyn FnMut() + Sync>`, found fn item\n    |\n    = note: expected struct `Box<(dyn FnMut() + Sync + 'static)>`\n              found fn item `fn() {g}`"}, {"sha": "ea4c7b41995e34254678c5aefccb2b34fd305138", "filename": "tests/ui/static/static-reference-to-fn-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |         func: &foo,\n    |               ^^^^\n    |               |\n-   |               expected fn pointer, found fn item\n+   |               expected `&fn() -> Option<isize>`, found `&fn() -> Option<isize> {foo}`\n    |               help: consider casting to a fn pointer: `&(foo as fn() -> Option<isize>)`\n    |\n    = note: expected reference `&fn() -> Option<isize>`"}, {"sha": "5ae7df5a2ecd1aaa40fdd46fb0a066f58c85dd9f", "filename": "tests/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:2:20\n    |\n LL |     let x: &[u8] = \"foo\";\n-   |            -----   ^^^^^ expected slice `[u8]`, found `str`\n+   |            -----   ^^^^^ expected `&[u8]`, found `&str`\n    |            |\n    |            expected due to this\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:3:23\n    |\n LL |     let y: &[u8; 4] = \"baaa\";\n-   |            --------   ^^^^^^ expected array `[u8; 4]`, found `str`\n+   |            --------   ^^^^^^ expected `&[u8; 4]`, found `&str`\n    |            |\n    |            expected due to this\n    |\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:4:19\n    |\n LL |     let z: &str = b\"foo\";\n-   |            ----   ^^^^^^ expected `str`, found array `[u8; 3]`\n+   |            ----   ^^^^^^ expected `&str`, found `&[u8; 3]`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "1299af72ba93537dca98b0a8823fb799a5135199", "filename": "tests/ui/structs/struct-base-wrong-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-base-wrong-type.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,25 +2,25 @@ error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:7:33\n    |\n LL | static foo: Foo = Foo { a: 2, ..bar };\n-   |                                 ^^^ expected struct `Foo`, found struct `Bar`\n+   |                                 ^^^ expected `Foo`, found `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:8:35\n    |\n LL | static foo_i: Foo = Foo { a: 2, ..4 };\n-   |                                   ^ expected struct `Foo`, found integer\n+   |                                   ^ expected `Foo`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:12:27\n    |\n LL |     let f = Foo { a: 2, ..b };\n-   |                           ^ expected struct `Foo`, found struct `Bar`\n+   |                           ^ expected `Foo`, found `Bar`\n \n error[E0308]: mismatched types\n   --> $DIR/struct-base-wrong-type.rs:13:34\n    |\n LL |     let f__isize = Foo { a: 2, ..4 };\n-   |                                  ^ expected struct `Foo`, found integer\n+   |                                  ^ expected `Foo`, found integer\n \n error: aborting due to 4 previous errors\n "}, {"sha": "cddc1356194bfa05b058ee9666ba75f24f048047", "filename": "tests/ui/structs/struct-path-self-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-path-self-type-mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -34,7 +34,7 @@ LL | |\n LL | |             inner: u\n LL | |\n LL | |         }\n-   | |_________^ expected type parameter `U`, found type parameter `T`\n+   | |_________^ expected `Foo<U>`, found `Foo<T>`\n    |\n    = note: expected struct `Foo<U>`\n               found struct `Foo<T>`"}, {"sha": "38274f8d9c0d54b70374b5add7bb0f2a4aff8f7e", "filename": "tests/ui/structs/struct-record-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-record-suggestion.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n   --> $DIR/struct-record-suggestion.rs:23:20\n    |\n LL |     let q = B { b: 1..Default::default() };\n-   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found struct `Range`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found `Range<{integer}>`\n    |\n    = note: expected type `u32`\n             found struct `std::ops::Range<{integer}>`"}, {"sha": "3e3f9ea06eff3840740fb994dcceefd010433cf0", "filename": "tests/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -104,7 +104,7 @@ error[E0308]: mismatched types\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n-   |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n+   |         ^^^^^^^^^^^^^^^^^^^^ expected `Point<{integer}>`, found `Point<f32>`\n    |\n    = note: expected struct `Point<{integer}>`\n               found struct `Point<f32>`\n@@ -115,7 +115,7 @@ error[E0308]: mismatched types\n LL |     match (Point { x: 1, y: 2 }) {\n    |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n-   |         ^^^^^^^^^^^^^ expected integer, found `f32`\n+   |         ^^^^^^^^^^^^^ expected `Point<{integer}>`, found `Point<f32>`\n    |\n    = note: expected struct `Point<{integer}>`\n               found struct `Point<f32>`\n@@ -126,7 +126,7 @@ error[E0308]: mismatched types\n LL |     match (Pair { x: 1, y: 2 }) {\n    |           --------------------- this expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n-   |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n+   |         ^^^^^^^^^^^^^^^^^^^ expected `Pair<{integer}, {integer}>`, found `Pair<f32, u32>`\n    |\n    = note: expected struct `Pair<{integer}, {integer}>`\n               found struct `Pair<f32, u32>`"}, {"sha": "e973636381600f6b6e77f00a9f9a72b815ca4f1a", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |                                  ^^^^    - argument of type `{integer}` unexpected\n    |\n-note: expected tuple, found integer\n+note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:6:39\n    |\n LL |     let _: Option<(i32, bool)> = Some(1, 2);\n@@ -31,7 +31,7 @@ error[E0061]: this function takes 1 argument but 2 arguments were supplied\n LL |     int_bool(1, 2);\n    |     ^^^^^^^^    - argument of type `{integer}` unexpected\n    |\n-note: expected tuple, found integer\n+note: expected `(i32, bool)`, found integer\n   --> $DIR/args-instead-of-tuple-errors.rs:8:14\n    |\n LL |     int_bool(1, 2);\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:14:34\n    |\n LL |     let _: Option<(i32,)> = Some(5_usize);\n-   |                             ---- ^^^^^^^ expected tuple, found `usize`\n+   |                             ---- ^^^^^^^ expected `(i32,)`, found `usize`\n    |                             |\n    |                             arguments to this enum variant are incorrect\n    |\n@@ -85,7 +85,7 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:17:34\n    |\n LL |     let _: Option<(i32,)> = Some((5_usize));\n-   |                             ---- ^^^^^^^^^ expected tuple, found `usize`\n+   |                             ---- ^^^^^^^^^ expected `(i32,)`, found `usize`\n    |                             |\n    |                             arguments to this enum variant are incorrect\n    |"}, {"sha": "0bdf10b0d63a4338d846656ec044fdb298cd6748", "filename": "tests/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -41,7 +41,7 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple.rs:14:34\n    |\n LL |     let _: Option<(i32,)> = Some(3);\n-   |                             ---- ^ expected tuple, found integer\n+   |                             ---- ^ expected `(i32,)`, found integer\n    |                             |\n    |                             arguments to this enum variant are incorrect\n    |\n@@ -58,7 +58,7 @@ error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple.rs:17:34\n    |\n LL |     let _: Option<(i32,)> = Some((3));\n-   |                             ---- ^^^ expected tuple, found integer\n+   |                             ---- ^^^ expected `(i32,)`, found integer\n    |                             |\n    |                             arguments to this enum variant are incorrect\n    |"}, {"sha": "0ee343ebf9f1114913e085a4d3b9cfb3426439f3", "filename": "tests/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:7:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         ---       --------- ^^^ expected `&Foo`, found `Foo`\n    |         |         |\n    |         |         arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().map`\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:8:39\n    |\n LL |     opt.and_then(|arg| Some(takes_ref(arg)));\n-   |         --------            --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         --------            --------- ^^^ expected `&Foo`, found `Foo`\n    |         |                   |\n    |         |                   arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().and_then`\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:10:29\n    |\n LL |     opt.map(|arg| takes_ref(arg));\n-   |         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         ---       --------- ^^^ expected `&Foo`, found `Foo`\n    |         |         |\n    |         |         arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().map`\n@@ -47,7 +47,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:11:37\n    |\n LL |     opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |         --------          --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |         --------          --------- ^^^ expected `&Foo`, found `Foo`\n    |         |                 |\n    |         |                 arguments to this function are incorrect\n    |         help: consider using `as_ref` instead: `as_ref().and_then`\n@@ -64,7 +64,7 @@ error[E0308]: mismatched types\n LL |     let y: Option<&usize> = x;\n    |            --------------   ^\n    |            |                |\n-   |            |                expected enum `Option`, found `&Option<usize>`\n+   |            |                expected `Option<&usize>`, found `&Option<usize>`\n    |            |                help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n    |            expected due to this\n    |\n@@ -75,7 +75,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:15:37\n    |\n LL |     let y: Result<&usize, &usize> = x;\n-   |            ----------------------   ^ expected enum `Result`, found reference\n+   |            ----------------------   ^ expected `Result<&usize, &usize>`, found `&Result<usize, usize>`\n    |            |\n    |            expected due to this\n    |\n@@ -90,7 +90,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:19:36\n    |\n LL |     let y: Result<&usize, usize> = x;\n-   |            ---------------------   ^ expected enum `Result`, found reference\n+   |            ---------------------   ^ expected `Result<&usize, usize>`, found `&Result<usize, usize>`\n    |            |\n    |            expected due to this\n    |\n@@ -101,7 +101,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:22:42\n    |\n LL |     multiple_ref_opt.map(|arg| takes_ref(arg));\n-   |                      ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      ---       --------- ^^^ expected `&Foo`, found `Foo`\n    |                      |         |\n    |                      |         arguments to this function are incorrect\n    |                      help: consider using `as_ref` instead: `as_ref().map`\n@@ -116,7 +116,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:23:52\n    |\n LL |     multiple_ref_opt.and_then(|arg| Some(takes_ref(arg)));\n-   |                      --------            --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                      --------            --------- ^^^ expected `&Foo`, found `Foo`\n    |                      |                   |\n    |                      |                   arguments to this function are incorrect\n    |                      help: consider using `as_ref` instead: `as_ref().and_then`\n@@ -131,7 +131,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:25:45\n    |\n LL |     multiple_ref_result.map(|arg| takes_ref(arg));\n-   |                         ---       --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         ---       --------- ^^^ expected `&Foo`, found `Foo`\n    |                         |         |\n    |                         |         arguments to this function are incorrect\n    |                         help: consider using `as_ref` instead: `as_ref().map`\n@@ -146,7 +146,7 @@ error[E0308]: mismatched types\n   --> $DIR/as-ref.rs:26:53\n    |\n LL |     multiple_ref_result.and_then(|arg| Ok(takes_ref(arg)));\n-   |                         --------          --------- ^^^ expected `&Foo`, found struct `Foo`\n+   |                         --------          --------- ^^^ expected `&Foo`, found `Foo`\n    |                         |                 |\n    |                         |                 arguments to this function are incorrect\n    |                         help: consider using `as_ref` instead: `as_ref().and_then`"}, {"sha": "1adbc05406cbe3e15a607fec246fbed8a02cc345", "filename": "tests/ui/suggestions/boxed-variant-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/boxed-variant-field.rs:9:31\n    |\n LL |         Ty::List(elem) => foo(elem),\n-   |                           --- ^^^^ expected enum `Ty`, found struct `Box`\n+   |                           --- ^^^^ expected `Ty`, found `Box<Ty>`\n    |                           |\n    |                           arguments to this function are incorrect\n    |"}, {"sha": "9b31ee07cca7d41d783f1710f32dad100208cea7", "filename": "tests/ui/suggestions/call-boxed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fcall-boxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcall-boxed.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -6,7 +6,7 @@ LL |     let mut x = 1i32;\n LL |     let y = Box::new(|| 1);\n    |                      -- the found closure\n LL |     x = y;\n-   |         ^ expected `i32`, found struct `Box`\n+   |         ^ expected `i32`, found `Box<[closure@call-boxed.rs:3:22]>`\n    |\n    = note: expected type `i32`\n             found struct `Box<[closure@$DIR/call-boxed.rs:3:22: 3:24]>`"}, {"sha": "11d9b8391f6d2502e1e50121df0a4ce4008806fb", "filename": "tests/ui/suggestions/chain-method-call-mutation-in-place.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(mut s: String) -> String {\n    |                          ------ expected `String` because of return type\n LL |     s.push_str(\"asdf\")\n-   |     ^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n+   |     ^^^^^^^^^^^^^^^^^^ expected `String`, found `()`\n    |\n note: method `push_str` modifies its receiver in-place\n   --> $DIR/chain-method-call-mutation-in-place.rs:3:7"}, {"sha": "45593035b9d6000351d496c6d84bc0b68918427a", "filename": "tests/ui/suggestions/clone-on-unconstrained-borrowed-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL | fn wut(t: &Foo) -> Foo {\n    |                    --- expected `Foo` because of return type\n LL |     t.clone()\n-   |     ^^^^^^^^^ expected struct `Foo`, found `&Foo`\n+   |     ^^^^^^^^^ expected `Foo`, found `&Foo`\n    |\n note: `Foo` does not implement `Clone`, so `&Foo` was cloned instead\n   --> $DIR/clone-on-unconstrained-borrowed-type-param.rs:9:5"}, {"sha": "f344ac06db1f8f05371485e5901be286ff693af7", "filename": "tests/ui/suggestions/const-in-struct-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL | struct foo;\n LL |     let Thing { foo } = t;\n    |                 ^^^     - this expression has type `Thing`\n    |                 |\n-   |                 expected struct `String`, found struct `foo`\n+   |                 expected `String`, found `foo`\n    |                 `foo` is interpreted as a unit struct, not a new binding\n    |\n help: bind the struct field to a different name instead"}, {"sha": "0678081418248489f0df0a832f92c04552e73a5e", "filename": "tests/ui/suggestions/copied-and-cloned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/copied-and-cloned.rs:7:26\n    |\n LL |     expect::<Option<()>>(x);\n-   |     -------------------- ^ expected `()`, found `&()`\n+   |     -------------------- ^ expected `Option<()>`, found `Option<&()>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/copied-and-cloned.rs:11:30\n    |\n LL |     expect::<Result<(), ()>>(x);\n-   |     ------------------------ ^ expected `()`, found `&()`\n+   |     ------------------------ ^ expected `Result<(), ()>`, found `Result<&(), _>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n   --> $DIR/copied-and-cloned.rs:16:30\n    |\n LL |     expect::<Option<String>>(x);\n-   |     ------------------------ ^ expected struct `String`, found `&String`\n+   |     ------------------------ ^ expected `Option<String>`, found `Option<&String>`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -62,7 +62,7 @@ error[E0308]: mismatched types\n   --> $DIR/copied-and-cloned.rs:20:34\n    |\n LL |     expect::<Result<String, ()>>(x);\n-   |     ---------------------------- ^ expected struct `String`, found `&String`\n+   |     ---------------------------- ^ expected `Result<String, ()>`, found `Result<&String, _>`\n    |     |\n    |     arguments to this function are incorrect\n    |"}, {"sha": "c6867270ad81ee770ffb64e39ec6a0dad40ea72c", "filename": "tests/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | /     intrinsic_match! {\n LL | |         \"abc\"\n LL | |     };\n-   | |_____^ expected `&str`, found struct `String`\n+   | |_____^ expected `&str`, found `String`\n    |\n    = note: this error originates in the macro `format` which comes from the expansion of the macro `intrinsic_match` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "866d3fab46e73241c46aba14abee1ce0ce108669", "filename": "tests/ui/suggestions/dont-suggest-doc-hidden-variant-for-enum/hidden-child.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-child.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-child.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-child.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hidden-child.rs:9:26\n    |\n LL |     let x: Option<i32> = 1i32;\n-   |            -----------   ^^^^ expected enum `Option`, found `i32`\n+   |            -----------   ^^^^ expected `Option<i32>`, found `i32`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "f8029e452bb777ae67a9f700218daf0a1cd21edf", "filename": "tests/ui/suggestions/dont-suggest-doc-hidden-variant-for-enum/hidden-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/hidden-parent.rs:6:26\n    |\n LL |     let x: Option<i32> = 1i32;\n-   |            -----------   ^^^^ expected enum `Option`, found `i32`\n+   |            -----------   ^^^^ expected `Option<i32>`, found `i32`\n    |            |\n    |            expected due to this\n    |"}, {"sha": "90ea06239528356c6fe0dae5fdc58f49dea26f1a", "filename": "tests/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static,\n    |        - this type parameter                            ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type\n LL |     // We could instead use an `async` block, but this way we have no std spans.\n LL |     x\n-   |     ^ expected struct `Pin`, found type parameter `F`\n+   |     ^ expected `Pin<Box<...>>`, found type parameter `F`\n    |\n    = note:      expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n            found type parameter `F`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |                                                         ----------------------- expected `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>` because of return type\n LL |     Box::new(x)\n-   |     ^^^^^^^^^^^ expected struct `Pin`, found struct `Box`\n+   |     ^^^^^^^^^^^ expected `Pin<Box<...>>`, found `Box<F>`\n    |\n    = note: expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n               found struct `Box<F>`\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n    |        - this type parameter\n LL |     Pin::new(x)\n-   |     -------- ^ expected struct `Box`, found type parameter `F`\n+   |     -------- ^ expected `Box<dyn Future<Output = ...> + Send>`, found type parameter `F`\n    |     |\n    |     arguments to this function are incorrect\n    |     help: use `Box::pin` to pin and box this expression: `Box::pin`\n@@ -74,7 +74,7 @@ LL | |         42\n LL | |     }\n    | |     ^\n    | |     |\n-   | |_____expected struct `Pin`, found `async` block\n+   | |_____expected `Pin<Box<...>>`, found `async` block\n    |       arguments to this function are incorrect\n    |\n    = note:     expected struct `Pin<Box<dyn Future<Output = i32> + Send>>`"}, {"sha": "007bc6ecf9379191c4f103eb4b87bbc90ee282c9", "filename": "tests/ui/suggestions/field-access.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62ba3e70a1f01d801d068b84a097e38bd82a8c6e/tests%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=62ba3e70a1f01d801d068b84a097e38bd82a8c6e", "patch": "@@ -7,7 +7,7 @@ LL |     Fst,\n LL |     if let B::Fst = a {};\n    |            ^^^^^^   - this expression has type `A`\n    |            |\n-   |            expected struct `A`, found enum `B`\n+   |            expected `A`, found `B`\n    |\n help: you might have meant to use field `b` whose type is `B`\n    |\n@@ -24,7 +24,7 @@ LL |     match a {\n    |           - this expression has type `A`\n ...\n LL |         B::Fst => (),\n-   |         ^^^^^^ expected struct `A`, found enum `B`\n+   |         ^^^^^^ expected `A`, found `B`\n    |\n help: you might have meant to use field `b` whose type is `B`\n    |\n@@ -41,7 +41,7 @@ LL |     match a {\n    |           - this expression has type `A`\n ...\n LL |         B::Snd => (),\n-   |         ^^^^^^ expected struct `A`, found enum `B`\n+   |         ^^^^^^ expected `A`, found `B`\n    |\n help: you might have meant to use field `b` whose type is `B`\n    |\n@@ -55,7 +55,7 @@ LL |     match foo {\n    |           --- this expression has type `Foo`\n LL |\n LL |         1u32 => (),\n-   |         ^^^^ expected union `Foo`, found `u32`\n+   |         ^^^^ expected `Foo`, found `u32`\n    |\n help: you might have meant to use field `bar` whose type is `u32`\n    |"}]}