{"sha": "75d3e3c7553fd384dbedc5426cde5fb533222e21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZDNlM2M3NTUzZmQzODRkYmVkYzU0MjZjZGU1ZmI1MzMyMjJlMjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T21:54:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-17T21:55:52Z"}, "message": "rustc: Remove a user of tag_paths.\n\nThis commit breaks the item-printing functionality. It will return in a faster\nform.", "tree": {"sha": "5147c8c637f2d98ef9483d6f94dcdceedd22e3f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5147c8c637f2d98ef9483d6f94dcdceedd22e3f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75d3e3c7553fd384dbedc5426cde5fb533222e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75d3e3c7553fd384dbedc5426cde5fb533222e21", "html_url": "https://github.com/rust-lang/rust/commit/75d3e3c7553fd384dbedc5426cde5fb533222e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75d3e3c7553fd384dbedc5426cde5fb533222e21/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb834fdb81930c676010a184db1eda9a622edc44", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb834fdb81930c676010a184db1eda9a622edc44", "html_url": "https://github.com/rust-lang/rust/commit/eb834fdb81930c676010a184db1eda9a622edc44"}], "stats": {"total": 42, "additions": 11, "deletions": 31}, "files": [{"sha": "0041093cee34516b2eb5cd42abf5df41639e5978", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75d3e3c7553fd384dbedc5426cde5fb533222e21/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d3e3c7553fd384dbedc5426cde5fb533222e21/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=75d3e3c7553fd384dbedc5426cde5fb533222e21", "patch": "@@ -96,7 +96,7 @@ fn get_crate_vers(cstore: cstore, cnum: ast::crate_num) -> @~str {\n fn set_crate_data(cstore: cstore, cnum: ast::crate_num,\n                   data: crate_metadata) {\n     p(cstore).metas.insert(cnum, data);\n-    do vec::iter(decoder::get_crate_module_paths(data.data)) |dp| {\n+    do vec::iter(decoder::get_crate_module_paths(data)) |dp| {\n         let (did, path) = dp;\n         let d = {crate: cnum, node: did.node};\n         p(cstore).mod_path_map.insert(d, @path);"}, {"sha": "572b7775f62caf8d6f2a1186e66539c80eeb70b5", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/75d3e3c7553fd384dbedc5426cde5fb533222e21/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75d3e3c7553fd384dbedc5426cde5fb533222e21/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=75d3e3c7553fd384dbedc5426cde5fb533222e21", "patch": "@@ -919,37 +919,18 @@ fn get_crate_vers(data: @~[u8]) -> @~str {\n     };\n }\n \n-fn list_crate_items(bytes: @~[u8], md: ebml::doc, out: io::Writer) {\n-    out.write_str(~\"=Items=\\n\");\n-    let items = ebml::get_doc(md, tag_items);\n-    do iter_crate_items(bytes) |tag, path, did| {\n-      // Don't print out any metadata info about intrinsics\n-       if tag != tag_paths_foreign_path {\n-            out.write_str(fmt!{\"%s (%s)\\n\", path,\n-                               describe_def(items, did)});\n-       }\n+fn iter_crate_items(cdata: cmd, proc: fn(~str, ast::def_id)) {\n+    for each_path(cdata) |path_entry| {\n+        match path_entry.def_like {\n+            dl_impl(*) | dl_field => {}\n+            dl_def(def) => {\n+                proc(path_entry.path_string, ast_util::def_id_of_def(def))\n+            }\n+        }\n     }\n-    out.write_str(~\"\\n\");\n-}\n-\n-fn iter_crate_items(bytes: @~[u8], proc: fn(uint, ~str, ast::def_id)) {\n-    let md = ebml::doc(bytes);\n-    let paths = ebml::get_doc(md, tag_paths);\n-    let index = ebml::get_doc(paths, tag_index);\n-    let bs = ebml::get_doc(index, tag_index_buckets);\n-    for ebml::tagged_docs(bs, tag_index_buckets_bucket) |bucket| {\n-        let et = tag_index_buckets_bucket_elt;\n-        for ebml::tagged_docs(bucket, et) |elt| {\n-            let data = read_path(elt);\n-            let {tag:t, doc:def} = ebml::doc_at(bytes, data.pos);\n-            let did_doc = ebml::get_doc(def, tag_def_id);\n-            let did = ebml::with_doc_data(did_doc, |d| parse_def_id(d));\n-            proc(t, data.path, did);\n-        };\n-    };\n }\n \n-fn get_crate_module_paths(bytes: @~[u8]) -> ~[(ast::def_id, ~str)] {\n+fn get_crate_module_paths(cdata: cmd) -> ~[(ast::def_id, ~str)] {\n     fn mod_of_path(p: ~str) -> ~str {\n         str::connect(vec::init(str::split_str(p, ~\"::\")), ~\"::\")\n     }\n@@ -958,7 +939,7 @@ fn get_crate_module_paths(bytes: @~[u8]) -> ~[(ast::def_id, ~str)] {\n     // fowarded path due to renamed import or reexport\n     let mut res = ~[];\n     let mods = map::str_hash();\n-    do iter_crate_items(bytes) |_tag, path, did| {\n+    do iter_crate_items(cdata) |path, did| {\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {\n             // if m has a sub-item, it must be a module\n@@ -980,7 +961,6 @@ fn list_crate_metadata(bytes: @~[u8], out: io::Writer) {\n     let md = ebml::doc(bytes);\n     list_crate_attributes(md, hash, out);\n     list_crate_deps(bytes, out);\n-    list_crate_items(bytes, md, out);\n }\n \n // Translates a def_id from an external crate to a def_id for the current"}]}