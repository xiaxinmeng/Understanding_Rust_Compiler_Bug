{"sha": "359d3be308cab2415218200f5799c5031213c250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OWQzYmUzMDhjYWIyNDE1MjE4MjAwZjU3OTljNTAzMTIxM2MyNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-02T12:34:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-02T12:35:17Z"}, "message": "Fix parsing of blocks without `{`", "tree": {"sha": "73f335deb44a8ef894deb7394445d6f1166e28a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f335deb44a8ef894deb7394445d6f1166e28a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359d3be308cab2415218200f5799c5031213c250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359d3be308cab2415218200f5799c5031213c250", "html_url": "https://github.com/rust-lang/rust/commit/359d3be308cab2415218200f5799c5031213c250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359d3be308cab2415218200f5799c5031213c250/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb8fb65131c8d3e6335efd401e4e83287be49357", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8fb65131c8d3e6335efd401e4e83287be49357", "html_url": "https://github.com/rust-lang/rust/commit/fb8fb65131c8d3e6335efd401e4e83287be49357"}], "stats": {"total": 169, "additions": 107, "deletions": 62}, "files": [{"sha": "be0cd5661bd6be0db8f19a22e4ae2fabb85525e9", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -54,7 +54,7 @@ pub(crate) mod fragments {\n     use super::*;\n \n     pub(crate) use super::{\n-        expressions::block, paths::type_path as path, patterns::pattern, types::type_,\n+        expressions::block_expr, paths::type_path as path, patterns::pattern, types::type_,\n     };\n \n     pub(crate) fn expr(p: &mut Parser) {\n@@ -143,7 +143,7 @@ pub(crate) fn reparser(\n     parent: Option<SyntaxKind>,\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n-        BLOCK_EXPR => expressions::block,\n+        BLOCK_EXPR => expressions::block_expr,\n         RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n         RECORD_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,"}, {"sha": "34f0397686fb04720acdf53ddddf9a0d1a95a2cd", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -2,7 +2,7 @@\n \n mod atom;\n \n-pub(crate) use self::atom::match_arm_list;\n+pub(crate) use self::atom::{block_expr, match_arm_list};\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n use super::*;\n \n@@ -49,19 +49,6 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, r, 1);\n }\n \n-// test block\n-// fn a() {}\n-// fn b() { let _ = 1; }\n-// fn c() { 1; 2; }\n-// fn d() { 1; 2 }\n-pub(crate) fn block(p: &mut Parser) {\n-    if !p.at(T!['{']) {\n-        p.error(\"expected a block\");\n-        return;\n-    }\n-    atom::block_expr(p);\n-}\n-\n fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n     match kind {\n         BIN_EXPR | RANGE_EXPR | IF_EXPR => false,"}, {"sha": "706a2f796b217a313f4c545668bc183cefb4191e", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -132,7 +132,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n             //        break;\n             //    }\n             // }\n-            block_expr(p)\n+            block_expr_unchecked(p)\n         }\n         T![return] => return_expr(p),\n         T![continue] => continue_expr(p),\n@@ -240,13 +240,9 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(T![move]);\n     params::param_list_closure(p);\n     if opt_fn_ret_type(p) {\n-        if p.at(T!['{']) {\n-            // test lambda_ret_block\n-            // fn main() { || -> i32 { 92 }(); }\n-            block_expr(p);\n-        } else {\n-            p.error(\"expected `{`\");\n-        }\n+        // test lambda_ret_block\n+        // fn main() { || -> i32 { 92 }(); }\n+        block_expr(p);\n     } else {\n         if p.at_ts(EXPR_FIRST) {\n             expr(p);\n@@ -270,13 +266,13 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n     let m = p.start();\n     p.bump(T![if]);\n     cond(p);\n-    block(p);\n+    block_expr(p);\n     if p.at(T![else]) {\n         p.bump(T![else]);\n         if p.at(T![if]) {\n             if_expr(p);\n         } else {\n-            block(p);\n+            block_expr(p);\n         }\n     }\n     m.complete(p, IF_EXPR)\n@@ -304,7 +300,7 @@ fn loop_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     assert!(p.at(T![loop]));\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![loop]);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, LOOP_EXPR)\n }\n \n@@ -319,7 +315,7 @@ fn while_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     let m = m.unwrap_or_else(|| p.start());\n     p.bump(T![while]);\n     cond(p);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, WHILE_EXPR)\n }\n \n@@ -334,7 +330,7 @@ fn for_expr(p: &mut Parser, m: Option<Marker>) -> CompletedMarker {\n     patterns::pattern(p);\n     p.expect(T![in]);\n     expr_no_struct(p);\n-    block(p);\n+    block_expr(p);\n     m.complete(p, FOR_EXPR)\n }\n \n@@ -467,11 +463,20 @@ fn match_guard(p: &mut Parser) -> CompletedMarker {\n     m.complete(p, MATCH_GUARD)\n }\n \n-// test block_expr\n-// fn foo() {\n-//     {};\n-// }\n-pub(super) fn block_expr(p: &mut Parser) -> CompletedMarker {\n+// test block\n+// fn a() {}\n+// fn b() { let _ = 1; }\n+// fn c() { 1; 2; }\n+// fn d() { 1; 2 }\n+pub(crate) fn block_expr(p: &mut Parser) {\n+    if !p.at(T!['{']) {\n+        p.error(\"expected a block\");\n+        return;\n+    }\n+    block_expr_unchecked(p);\n+}\n+\n+fn block_expr_unchecked(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T!['{']));\n     let m = p.start();\n     p.bump(T!['{']);"}, {"sha": "67a924de53977c0111d997f78f19342564bf53ee", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -329,7 +329,7 @@ fn fn_def(p: &mut Parser) {\n     if p.at(T![;]) {\n         p.bump(T![;]);\n     } else {\n-        expressions::block(p)\n+        expressions::block_expr(p)\n     }\n }\n "}, {"sha": "2d61f9d8083a241ca19018a92b2a7879e70eae98", "filename": "crates/ra_parser/src/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -48,7 +48,7 @@ fn type_arg(p: &mut Parser) {\n             m.complete(p, ASSOC_TYPE_ARG);\n         }\n         T!['{'] => {\n-            expressions::block(p);\n+            expressions::block_expr(p);\n             m.complete(p, CONST_ARG);\n         }\n         k if k.is_literal() => {"}, {"sha": "e08ad4dae673c05849be77039389f62f0c3a6d6a", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -112,7 +112,7 @@ pub fn parse_fragment(\n         FragmentKind::Type => grammar::fragments::type_,\n         FragmentKind::Pattern => grammar::fragments::pattern,\n         FragmentKind::Item => grammar::fragments::item,\n-        FragmentKind::Block => grammar::fragments::block,\n+        FragmentKind::Block => grammar::fragments::block_expr,\n         FragmentKind::Visibility => grammar::fragments::opt_visibility,\n         FragmentKind::MetaItem => grammar::fragments::meta_item,\n         FragmentKind::Statement => grammar::fragments::stmt,"}, {"sha": "3bf57eacc729117c2c7a71219dce0dbedca5a7a0", "filename": "crates/ra_syntax/test_data/parser/err/0010_unsafe_lambda_block.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0010_unsafe_lambda_block.rast?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -40,5 +40,5 @@ SOURCE_FILE@0..42\n       WHITESPACE@39..40 \"\\n\"\n       R_CURLY@40..41 \"}\"\n   WHITESPACE@41..42 \"\\n\"\n-error 24..24: expected `{`\n+error 24..24: expected a block\n error 24..24: expected SEMICOLON"}, {"sha": "e4645638426a3a8c9ec4bcb764a33a7465a93fb6", "filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rast", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rast?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -0,0 +1,71 @@\n+SOURCE_FILE@0..83\n+  FN_DEF@0..82\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..7\n+      IDENT@3..7 \"main\"\n+    PARAM_LIST@7..9\n+      L_PAREN@7..8 \"(\"\n+      R_PAREN@8..9 \")\"\n+    WHITESPACE@9..10 \" \"\n+    BLOCK_EXPR@10..82\n+      L_CURLY@10..11 \"{\"\n+      WHITESPACE@11..16 \"\\n    \"\n+      EXPR_STMT@16..29\n+        BLOCK_EXPR@16..29\n+          L_CURLY@16..17 \"{\"\n+          WHITESPACE@17..18 \" \"\n+          ERROR@18..24\n+            UNSAFE_KW@18..24 \"unsafe\"\n+          WHITESPACE@24..25 \" \"\n+          LITERAL@25..27\n+            INT_NUMBER@25..27 \"92\"\n+          WHITESPACE@27..28 \" \"\n+          R_CURLY@28..29 \"}\"\n+      WHITESPACE@29..34 \"\\n    \"\n+      EXPR_STMT@34..46\n+        BLOCK_EXPR@34..46\n+          L_CURLY@34..35 \"{\"\n+          WHITESPACE@35..36 \" \"\n+          ERROR@36..41\n+            ASYNC_KW@36..41 \"async\"\n+          WHITESPACE@41..42 \" \"\n+          LITERAL@42..44\n+            INT_NUMBER@42..44 \"92\"\n+          WHITESPACE@44..45 \" \"\n+          R_CURLY@45..46 \"}\"\n+      WHITESPACE@46..51 \"\\n    \"\n+      EXPR_STMT@51..61\n+        BLOCK_EXPR@51..61\n+          L_CURLY@51..52 \"{\"\n+          WHITESPACE@52..53 \" \"\n+          EXPR_STMT@53..56\n+            EFFECT_EXPR@53..56\n+              TRY_KW@53..56 \"try\"\n+          WHITESPACE@56..57 \" \"\n+          LITERAL@57..59\n+            INT_NUMBER@57..59 \"92\"\n+          WHITESPACE@59..60 \" \"\n+          R_CURLY@60..61 \"}\"\n+      WHITESPACE@61..66 \"\\n    \"\n+      BLOCK_EXPR@66..80\n+        L_CURLY@66..67 \"{\"\n+        WHITESPACE@67..68 \" \"\n+        EXPR_STMT@68..75\n+          ERROR@68..75\n+            LABEL@68..75\n+              LIFETIME@68..74 \"\\'label\"\n+              COLON@74..75 \":\"\n+        WHITESPACE@75..76 \" \"\n+        LITERAL@76..78\n+          INT_NUMBER@76..78 \"92\"\n+        WHITESPACE@78..79 \" \"\n+        R_CURLY@79..80 \"}\"\n+      WHITESPACE@80..81 \"\\n\"\n+      R_CURLY@81..82 \"}\"\n+  WHITESPACE@82..83 \"\\n\"\n+error 24..24: expected existential, fn, trait or impl\n+error 41..41: expected existential, fn, trait or impl\n+error 56..56: expected a block\n+error 75..75: expected a loop\n+error 75..75: expected SEMICOLON"}, {"sha": "8fa324c1a14f7d3040014041387ca6f296863503", "filename": "crates/ra_syntax/test_data/parser/err/0163_weird_blocks.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359d3be308cab2415218200f5799c5031213c250/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0163_weird_blocks.rs?ref=359d3be308cab2415218200f5799c5031213c250", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    { unsafe 92 }\n+    { async 92 }\n+    { try 92 }\n+    { 'label: 92 }\n+}"}, {"sha": "f3a5e309652e9885761fafb8aaf07f43da24aa04", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0105_block_expr.rast", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rast?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -1,21 +0,0 @@\n-SOURCE_FILE@0..21\n-  FN_DEF@0..20\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..20\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..15 \"\\n    \"\n-      EXPR_STMT@15..18\n-        BLOCK_EXPR@15..17\n-          L_CURLY@15..16 \"{\"\n-          R_CURLY@16..17 \"}\"\n-        SEMICOLON@17..18 \";\"\n-      WHITESPACE@18..19 \"\\n\"\n-      R_CURLY@19..20 \"}\"\n-  WHITESPACE@20..21 \"\\n\""}, {"sha": "9c6019fb1a66af857226be9ddd007f0fed5c10b2", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0105_block_expr.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8fb65131c8d3e6335efd401e4e83287be49357/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0105_block_expr.rs?ref=fb8fb65131c8d3e6335efd401e4e83287be49357", "patch": "@@ -1,3 +0,0 @@\n-fn foo() {\n-    {};\n-}"}]}