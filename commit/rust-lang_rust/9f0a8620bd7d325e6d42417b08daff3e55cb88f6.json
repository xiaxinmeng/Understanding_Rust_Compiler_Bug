{"sha": "9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "node_id": "C_kwDOAAsO6NoAKDlmMGE4NjIwYmQ3ZDMyNWU2ZDQyNDE3YjA4ZGFmZjNlNTVjYjg4ZjY", "commit": {"author": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-05T09:06:38Z"}, "committer": {"name": "Ayush Singh", "email": "ayushsingh1325@gmail.com", "date": "2022-11-10T19:34:39Z"}, "message": "Improve generating Custom entry function\n\nThis commit is aimed at making compiler generated entry functions\n(Basically just C `main` right now) more generic so other targets can do\nsimilar things for custom entry. This was initially implemented as part\nof https://github.com/rust-lang/rust/pull/100316.\n\nCurrently, this moves the entry function name and Call convention to the\ntarget spec.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>", "tree": {"sha": "1ca5c5d46e69c3efbf205b5a8169bdd7897b9fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca5c5d46e69c3efbf205b5a8169bdd7897b9fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE38wTHvJPLWVvpQTWBc71x4nlWnQFAmNtUlEACgkQBc71x4nl\nWnSQKg//bzBZ2FyP70FVojsCL8KjqfOuFiQCeqYtr9ryLzTz8X+STwEkNlSmIwwU\nuysIynMGKNQp00GjZfmPw0wmxqL+GhV4GwJ2t/U6GBy/FXLmAP0qHUsg3RghksA1\nHI2EyMXvh68Xs/fVS+KbyUAHM9CPgAgIG+cvdQY63bnY9znBjf3ja6UrGekbD3hw\nrEeeBmQRB8nDCNZV6JyRlB29xTtN5vLZMdC9lPs6K6lgQGVq7OIjRM0H7AAWEYU8\n9Kveqbm7M+DDvdABHRxutBx2IBmgTrubVNGt60kUSrFAV+5q1Ij060wrPiVRMTmy\nOW28Fzv/gADDL8V/Zt7HW+NkNWSj47NjX80si9naVDCNaJF2nQabejDrGPwwd18i\nOR/nZpt954IPJ0hqObA5ckzJm957V+QmUPmPv+/5tjNKUBNiq2v+l2xwaOkMzUb0\nUfpKz9zdR37rp9qqk3YA4nAY4cmQSCy73Yw8yK/Lm7nS/XEoK8ZHWIS+6LGsxQIt\n/MzvjyT58caS6RD5V/qx2w+h5A8mEV+C4Nv4TtYAkWn612EciILyWqLE9HkRkYBD\n27tlViBBsj4mqlK5cR0ZJD1MasZJpoGLk3W5PmEu5JxQEOMlv3yi4lRGFJpTqMw+\n5zO4DDLgmUl13idmiRtolTAjlJ+Oo3fybI+D8cGwPSlT8uh6F94=\n=ejJe\n-----END PGP SIGNATURE-----", "payload": "tree 1ca5c5d46e69c3efbf205b5a8169bdd7897b9fc4\nparent 5b3e9090757da9a95b22f589fe39b6a4b5455b96\nauthor Ayush Singh <ayushsingh1325@gmail.com> 1667639198 +0530\ncommitter Ayush Singh <ayushsingh1325@gmail.com> 1668108879 +0530\n\nImprove generating Custom entry function\n\nThis commit is aimed at making compiler generated entry functions\n(Basically just C `main` right now) more generic so other targets can do\nsimilar things for custom entry. This was initially implemented as part\nof https://github.com/rust-lang/rust/pull/100316.\n\nCurrently, this moves the entry function name and Call convention to the\ntarget spec.\n\nSigned-off-by: Ayush Singh <ayushsingh1325@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "html_url": "https://github.com/rust-lang/rust/commit/9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/comments", "author": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ayush1325", "id": 22546812, "node_id": "MDQ6VXNlcjIyNTQ2ODEy", "avatar_url": "https://avatars.githubusercontent.com/u/22546812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ayush1325", "html_url": "https://github.com/Ayush1325", "followers_url": "https://api.github.com/users/Ayush1325/followers", "following_url": "https://api.github.com/users/Ayush1325/following{/other_user}", "gists_url": "https://api.github.com/users/Ayush1325/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ayush1325/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ayush1325/subscriptions", "organizations_url": "https://api.github.com/users/Ayush1325/orgs", "repos_url": "https://api.github.com/users/Ayush1325/repos", "events_url": "https://api.github.com/users/Ayush1325/events{/privacy}", "received_events_url": "https://api.github.com/users/Ayush1325/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3e9090757da9a95b22f589fe39b6a4b5455b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3e9090757da9a95b22f589fe39b6a4b5455b96", "html_url": "https://github.com/rust-lang/rust/commit/5b3e9090757da9a95b22f589fe39b6a4b5455b96"}], "stats": {"total": 155, "additions": 135, "deletions": 20}, "files": [{"sha": "a6fd2a7de6bd04eb544c7d10f78111d8de5938e2", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -398,23 +398,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     }\n \n     fn llvm_cconv(&self) -> llvm::CallConv {\n-        match self.conv {\n-            Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n-            Conv::RustCold => llvm::ColdCallConv,\n-            Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n-            Conv::AvrInterrupt => llvm::AvrInterrupt,\n-            Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n-            Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n-            Conv::Msp430Intr => llvm::Msp430Intr,\n-            Conv::PtxKernel => llvm::PtxKernel,\n-            Conv::X86Fastcall => llvm::X86FastcallCallConv,\n-            Conv::X86Intr => llvm::X86_Intr,\n-            Conv::X86Stdcall => llvm::X86StdcallCallConv,\n-            Conv::X86ThisCall => llvm::X86_ThisCall,\n-            Conv::X86VectorCall => llvm::X86_VectorCall,\n-            Conv::X86_64SysV => llvm::X86_64_SysV,\n-            Conv::X86_64Win64 => llvm::X86_64_Win64,\n-        }\n+        self.conv.into()\n     }\n \n     fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value) {\n@@ -596,3 +580,25 @@ impl<'tcx> AbiBuilderMethods<'tcx> for Builder<'_, '_, 'tcx> {\n         llvm::get_param(self.llfn(), index as c_uint)\n     }\n }\n+\n+impl From<Conv> for llvm::CallConv {\n+    fn from(conv: Conv) -> Self {\n+        match conv {\n+            Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n+            Conv::RustCold => llvm::ColdCallConv,\n+            Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n+            Conv::AvrInterrupt => llvm::AvrInterrupt,\n+            Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n+            Conv::ArmAapcs => llvm::ArmAapcsCallConv,\n+            Conv::Msp430Intr => llvm::Msp430Intr,\n+            Conv::PtxKernel => llvm::PtxKernel,\n+            Conv::X86Fastcall => llvm::X86FastcallCallConv,\n+            Conv::X86Intr => llvm::X86_Intr,\n+            Conv::X86Stdcall => llvm::X86StdcallCallConv,\n+            Conv::X86ThisCall => llvm::X86_ThisCall,\n+            Conv::X86VectorCall => llvm::X86_VectorCall,\n+            Conv::X86_64SysV => llvm::X86_64_SysV,\n+            Conv::X86_64Win64 => llvm::X86_64_Win64,\n+        }\n+    }\n+}"}, {"sha": "f3ef618fff544205004ee07e3127c6cedf2acf01", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -570,8 +570,14 @@ impl<'ll, 'tcx> MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {\n-        if self.get_declared_value(\"main\").is_none() {\n-            Some(self.declare_cfn(\"main\", llvm::UnnamedAddr::Global, fn_type))\n+        let entry_name = self.sess().target.entry_name.as_ref();\n+        if self.get_declared_value(entry_name).is_none() {\n+            Some(self.declare_entry_fn(\n+                entry_name,\n+                self.sess().target.entry_abi.into(),\n+                llvm::UnnamedAddr::Global,\n+                fn_type,\n+            ))\n         } else {\n             // If the symbol already exists, it is an error: for example, the user wrote\n             // #[no_mangle] extern \"C\" fn main(..) {..}"}, {"sha": "dc21a02cec44a144fef0c9704b3a16af5c1868d2", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -90,6 +90,28 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         declare_raw_fn(self, name, llvm::CCallConv, unnamed, visibility, fn_type)\n     }\n \n+    /// Declare an entry Function\n+    ///\n+    /// The ABI of this function can change depending on the target (although for now the same as\n+    /// `declare_cfn`)\n+    ///\n+    /// If there\u2019s a value with the same name already declared, the function will\n+    /// update the declaration and return existing Value instead.\n+    pub fn declare_entry_fn(\n+        &self,\n+        name: &str,\n+        callconv: llvm::CallConv,\n+        unnamed: llvm::UnnamedAddr,\n+        fn_type: &'ll Type,\n+    ) -> &'ll Value {\n+        let visibility = if self.tcx.sess.target.default_hidden_visibility {\n+            llvm::Visibility::Hidden\n+        } else {\n+            llvm::Visibility::Default\n+        };\n+        declare_raw_fn(self, name, callconv, unnamed, visibility, fn_type)\n+    }\n+\n     /// Declare a Rust function.\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will"}, {"sha": "22f534d909ab6ca4ccab579d2003b535be8e8376", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -180,7 +180,8 @@ fn exported_symbols_provider_local<'tcx>(\n         .collect();\n \n     if tcx.entry_fn(()).is_some() {\n-        let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n+        let exported_symbol =\n+            ExportedSymbol::NoDefId(SymbolName::new(tcx, tcx.sess.target.entry_name.as_ref()));\n \n         symbols.push((\n             exported_symbol,"}, {"sha": "c622bd36b00c3eda198118e8ac8392dd3d207848", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -3,6 +3,7 @@ use crate::abi::{HasDataLayout, TyAbiInterface, TyAndLayout};\n use crate::spec::{self, HasTargetSpec};\n use rustc_span::Symbol;\n use std::fmt;\n+use std::str::FromStr;\n \n mod aarch64;\n mod amdgpu;\n@@ -735,6 +736,33 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n     }\n }\n \n+impl FromStr for Conv {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"C\" => Ok(Conv::C),\n+            \"Rust\" => Ok(Conv::Rust),\n+            \"RustCold\" => Ok(Conv::Rust),\n+            \"ArmAapcs\" => Ok(Conv::ArmAapcs),\n+            \"CCmseNonSecureCall\" => Ok(Conv::CCmseNonSecureCall),\n+            \"Msp430Intr\" => Ok(Conv::Msp430Intr),\n+            \"PtxKernel\" => Ok(Conv::PtxKernel),\n+            \"X86Fastcall\" => Ok(Conv::X86Fastcall),\n+            \"X86Intr\" => Ok(Conv::X86Intr),\n+            \"X86Stdcall\" => Ok(Conv::X86Stdcall),\n+            \"X86ThisCall\" => Ok(Conv::X86ThisCall),\n+            \"X86VectorCall\" => Ok(Conv::X86VectorCall),\n+            \"X86_64SysV\" => Ok(Conv::X86_64SysV),\n+            \"X86_64Win64\" => Ok(Conv::X86_64Win64),\n+            \"AmdGpuKernel\" => Ok(Conv::AmdGpuKernel),\n+            \"AvrInterrupt\" => Ok(Conv::AvrInterrupt),\n+            \"AvrNonBlockingInterrupt\" => Ok(Conv::AvrNonBlockingInterrupt),\n+            _ => Err(format!(\"'{}' is not a valid value for entry function call convetion.\", s)),\n+        }\n+    }\n+}\n+\n // Some types are used a lot. Make sure they don't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {"}, {"sha": "75bb76a9de0878afe6f0faa1e65f7adf5f73a580", "filename": "compiler/rustc_target/src/json.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fjson.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -89,3 +89,28 @@ impl<A: ToJson> ToJson for Option<A> {\n         }\n     }\n }\n+\n+impl ToJson for crate::abi::call::Conv {\n+    fn to_json(&self) -> Json {\n+        let s = match self {\n+            Self::C => \"C\",\n+            Self::Rust => \"Rust\",\n+            Self::RustCold => \"RustCold\",\n+            Self::ArmAapcs => \"ArmAapcs\",\n+            Self::CCmseNonSecureCall => \"CCmseNonSecureCall\",\n+            Self::Msp430Intr => \"Msp430Intr\",\n+            Self::PtxKernel => \"PtxKernel\",\n+            Self::X86Fastcall => \"X86Fastcall\",\n+            Self::X86Intr => \"X86Intr\",\n+            Self::X86Stdcall => \"X86Stdcall\",\n+            Self::X86ThisCall => \"X86ThisCall\",\n+            Self::X86VectorCall => \"X86VectorCall\",\n+            Self::X86_64SysV => \"X86_64SysV\",\n+            Self::X86_64Win64 => \"X86_64Win64\",\n+            Self::AmdGpuKernel => \"AmdGpuKernel\",\n+            Self::AvrInterrupt => \"AvrInterrupt\",\n+            Self::AvrNonBlockingInterrupt => \"AvrNonBlockingInterrupt\",\n+        };\n+        Json::String(s.to_owned())\n+    }\n+}"}, {"sha": "617de46a55aa40e2138d1dd00a67c4f42946c915", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0a8620bd7d325e6d42417b08daff3e55cb88f6/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9f0a8620bd7d325e6d42417b08daff3e55cb88f6", "patch": "@@ -34,6 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n+use crate::abi::call::Conv;\n use crate::abi::Endian;\n use crate::json::{Json, ToJson};\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n@@ -1668,6 +1669,14 @@ pub struct TargetOptions {\n     /// Whether the target supports stack canary checks. `true` by default,\n     /// since this is most common among tier 1 and tier 2 targets.\n     pub supports_stack_protector: bool,\n+\n+    // The name of entry function.\n+    // Default value is \"main\"\n+    pub entry_name: StaticCow<str>,\n+\n+    // The ABI of entry function.\n+    // Default value is `Conv::C`, i.e. C call convention\n+    pub entry_abi: Conv,\n }\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n@@ -1884,6 +1893,8 @@ impl Default for TargetOptions {\n             c_enum_min_bits: 32,\n             generate_arange_section: true,\n             supports_stack_protector: true,\n+            entry_name: \"main\".into(),\n+            entry_abi: Conv::C,\n         }\n     }\n }\n@@ -2401,6 +2412,18 @@ impl Target {\n                     }\n                 }\n             } );\n+            ($key_name:ident, Conv) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n+                    match Conv::from_str(s) {\n+                        Ok(c) => {\n+                            base.$key_name = c;\n+                            Some(Ok(()))\n+                        }\n+                        Err(e) => Some(Err(e))\n+                    }\n+                })).unwrap_or(Ok(()))\n+            } );\n         }\n \n         if let Some(j) = obj.remove(\"target-endian\") {\n@@ -2520,6 +2543,8 @@ impl Target {\n         key!(c_enum_min_bits, u64);\n         key!(generate_arange_section, bool);\n         key!(supports_stack_protector, bool);\n+        key!(entry_name);\n+        key!(entry_abi, Conv)?;\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2770,6 +2795,8 @@ impl ToJson for Target {\n         target_option_val!(c_enum_min_bits);\n         target_option_val!(generate_arange_section);\n         target_option_val!(supports_stack_protector);\n+        target_option_val!(entry_name);\n+        target_option_val!(entry_abi);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());"}]}