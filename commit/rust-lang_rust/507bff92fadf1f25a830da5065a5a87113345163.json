{"sha": "507bff92fadf1f25a830da5065a5a87113345163", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwN2JmZjkyZmFkZjFmMjVhODMwZGE1MDY1YTVhODcxMTMzNDUxNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T15:30:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T15:30:56Z"}, "message": "Auto merge of #80510 - JohnTitor:rollup-gow7y0l, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #80185 (Fix ICE when pointing at multi bytes character)\n - #80260 (slightly more typed interface to panic implementation)\n - #80311 (Improvements to NatVis support)\n - #80337 (Use `desc` as a doc-comment for queries if there are no doc comments)\n - #80381 (Revert \"Cleanup markdown span handling\")\n - #80492 (remove empty wraps, don't return Results from from infallible functions)\n - #80509 (where possible, pass slices instead of &Vec or &String (clippy::ptr_arg))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c620ee4b323ca475becba9c2acc6d27080dc479b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c620ee4b323ca475becba9c2acc6d27080dc479b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/507bff92fadf1f25a830da5065a5a87113345163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/507bff92fadf1f25a830da5065a5a87113345163", "html_url": "https://github.com/rust-lang/rust/commit/507bff92fadf1f25a830da5065a5a87113345163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/507bff92fadf1f25a830da5065a5a87113345163/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcaed03bf5505f3fed351887769ed1531599502", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502", "html_url": "https://github.com/rust-lang/rust/commit/bbcaed03bf5505f3fed351887769ed1531599502"}, {"sha": "41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "html_url": "https://github.com/rust-lang/rust/commit/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f"}], "stats": {"total": 666, "additions": 387, "deletions": 279}, "files": [{"sha": "230e11f274eaebecd52c30dc8ce93231a6a1f1ef", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -485,7 +485,7 @@ pub(crate) unsafe fn optimize(\n     diag_handler: &Handler,\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n-) -> Result<(), FatalError> {\n+) {\n     let _timer = cgcx.prof.generic_activity_with_arg(\"LLVM_module_optimize\", &module.name[..]);\n \n     let llmod = module.module_llvm.llmod();\n@@ -511,7 +511,7 @@ pub(crate) unsafe fn optimize(\n                 _ => llvm::OptStage::PreLinkNoLTO,\n             };\n             optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n-            return Ok(());\n+            return;\n         }\n \n         if cgcx.prof.llvm_recording_enabled() {\n@@ -634,7 +634,6 @@ pub(crate) unsafe fn optimize(\n         llvm::LLVMDisposePassManager(fpm);\n         llvm::LLVMDisposePassManager(mpm);\n     }\n-    Ok(())\n }\n \n unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static mut llvm::Pass>) {"}, {"sha": "36a21b38c035d27876ebedd8b398d91844c1ea1d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -2322,13 +2322,13 @@ fn set_members_of_composite_type(\n             DIB(cx),\n             composite_type_metadata,\n             Some(type_array),\n-            type_params,\n+            Some(type_params),\n         );\n     }\n }\n \n /// Computes the type parameters for a type, if any, for the given metadata.\n-fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'ll DIArray> {\n+fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIArray {\n     if let ty::Adt(def, substs) = *ty.kind() {\n         if substs.types().next().is_some() {\n             let generics = cx.tcx.generics_of(def.did);\n@@ -2358,10 +2358,10 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n                 })\n                 .collect();\n \n-            return Some(create_DIArray(DIB(cx), &template_params[..]));\n+            return create_DIArray(DIB(cx), &template_params[..]);\n         }\n     }\n-    return Some(create_DIArray(DIB(cx), &[]));\n+    return create_DIArray(DIB(cx), &[]);\n \n     fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n         let mut names = generics"}, {"sha": "92ac770aca554ed338b9c4b5056933884da0e8b1", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -160,7 +160,7 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n         module: &ModuleCodegen<Self::Module>,\n         config: &ModuleConfig,\n     ) -> Result<(), FatalError> {\n-        back::write::optimize(cgcx, diag_handler, module, config)\n+        Ok(back::write::optimize(cgcx, diag_handler, module, config))\n     }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,"}, {"sha": "ecac05fd955720b35a1b291f46e5fbf963466d4a", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         func: &mir::Operand<'tcx>,\n-        args: &Vec<mir::Operand<'tcx>>,\n+        args: &[mir::Operand<'tcx>],\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n         fn_span: Span,"}, {"sha": "d57ab2433ad1b291c0306046e3de028d9b253e72", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -603,7 +603,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     }\n }\n \n-fn show_content_with_pager(content: &String) {\n+fn show_content_with_pager(content: &str) {\n     let pager_name = env::var_os(\"PAGER\").unwrap_or_else(|| {\n         if cfg!(windows) { OsString::from(\"more.com\") } else { OsString::from(\"less\") }\n     });"}, {"sha": "6d6bf4bf5f7058d750a1cd8fd852e0e93a3a9d03", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     // obviously it never weeds out ALL errors.\n     fn process_errors(\n         &self,\n-        errors: &Vec<RegionResolutionError<'tcx>>,\n+        errors: &[RegionResolutionError<'tcx>],\n     ) -> Vec<RegionResolutionError<'tcx>> {\n         debug!(\"process_errors()\");\n \n@@ -442,7 +442,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         let mut errors = if errors.iter().all(|e| is_bound_failure(e)) {\n-            errors.clone()\n+            errors.to_owned()\n         } else {\n             errors.iter().filter(|&e| !is_bound_failure(e)).cloned().collect()\n         };"}, {"sha": "6d876784be65368fcff190fd872d8ff9fb673f53", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -5,8 +5,8 @@ use syn::parse::{Parse, ParseStream, Result};\n use syn::punctuated::Punctuated;\n use syn::spanned::Spanned;\n use syn::{\n-    braced, parenthesized, parse_macro_input, AttrStyle, Attribute, Block, Error, Expr, Ident,\n-    ReturnType, Token, Type,\n+    braced, parenthesized, parse_macro_input, parse_quote, AttrStyle, Attribute, Block, Error,\n+    Expr, Ident, ReturnType, Token, Type,\n };\n \n mod kw {\n@@ -272,6 +272,40 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 if desc.is_some() {\n                     panic!(\"duplicate modifier `desc` for query `{}`\", query.name);\n                 }\n+                // If there are no doc-comments, give at least some idea of what\n+                // it does by showing the query description.\n+                if query.doc_comments.is_empty() {\n+                    use ::syn::*;\n+                    let mut list = list.iter();\n+                    let format_str: String = match list.next() {\n+                        Some(&Expr::Lit(ExprLit { lit: Lit::Str(ref lit_str), .. })) => {\n+                            lit_str.value().replace(\"`{}`\", \"{}\") // We add them later anyways for consistency\n+                        }\n+                        _ => panic!(\"Expected a string literal\"),\n+                    };\n+                    let mut fmt_fragments = format_str.split(\"{}\");\n+                    let mut doc_string = fmt_fragments.next().unwrap().to_string();\n+                    list.map(::quote::ToTokens::to_token_stream).zip(fmt_fragments).for_each(\n+                        |(tts, next_fmt_fragment)| {\n+                            use ::core::fmt::Write;\n+                            write!(\n+                                &mut doc_string,\n+                                \" `{}` {}\",\n+                                tts.to_string().replace(\" . \", \".\"),\n+                                next_fmt_fragment,\n+                            )\n+                            .unwrap();\n+                        },\n+                    );\n+                    let doc_string = format!(\n+                        \"[query description - consider adding a doc-comment!] {}\",\n+                        doc_string\n+                    );\n+                    let comment = parse_quote! {\n+                        #[doc = #doc_string]\n+                    };\n+                    query.doc_comments.push(comment);\n+                }\n                 desc = Some((tcx, list));\n             }\n             QueryModifier::FatalCycle => {"}, {"sha": "5c061a9d3c7949a529c077090889d80a51265a8b", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -574,7 +574,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     /// format!(\"Expected a point greater than ({x}, {y})\", x = self.x, y = self.y)\n     /// ```\n     /// This function builds the entire call to format!.\n-    fn build_format(&self, input: &String, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n+    fn build_format(&self, input: &str, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n         // This set is used later to generate the final format string. To keep builds reproducible,\n         // the iteration order needs to be deterministic, hence why we use a BTreeSet here instead\n         // of a HashSet."}, {"sha": "4ebc1cdca60597ec83d4c2c54a3639fc5197c505", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -954,7 +954,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         def_id: DefId,\n         target_place: PlaceRef<'tcx>,\n-        places: &Vec<Operand<'tcx>>,\n+        places: &[Operand<'tcx>],\n     ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\","}, {"sha": "7e8a33efe114ef6fb6a275c5a1b2a1fb70c170a2", "filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -58,11 +58,7 @@ impl vll::LinkElem for Appearance {\n }\n \n impl LocalUseMap {\n-    crate fn build(\n-        live_locals: &Vec<Local>,\n-        elements: &RegionValueElements,\n-        body: &Body<'_>,\n-    ) -> Self {\n+    crate fn build(live_locals: &[Local], elements: &RegionValueElements, body: &Body<'_>) -> Self {\n         let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n         let mut local_use_map = LocalUseMap {\n             first_def_at: nones.clone(),"}, {"sha": "a6ea039f278a1e595c0dcb848a6c41c093419ec5", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -153,7 +153,7 @@ impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH>\n }\n \n /// Format a path\n-fn write_path(out: &mut String, path: &Vec<PathElem>) {\n+fn write_path(out: &mut String, path: &[PathElem]) {\n     use self::PathElem::*;\n \n     for elem in path.iter() {"}, {"sha": "b5921aac561437326c851914cdb1baa68f0dd0a6", "filename": "compiler/rustc_mir/src/transform/coverage/counters.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -140,7 +140,7 @@ impl<'a> BcbCounters<'a> {\n     /// message for subsequent debugging.\n     fn make_bcb_counters(\n         &mut self,\n-        coverage_spans: &Vec<CoverageSpan>,\n+        coverage_spans: &[CoverageSpan],\n     ) -> Result<Vec<CoverageKind>, Error> {\n         debug!(\"make_bcb_counters(): adding a counter or expression to each BasicCoverageBlock\");\n         let num_bcbs = self.basic_coverage_blocks.num_nodes();\n@@ -465,7 +465,7 @@ impl<'a> BcbCounters<'a> {\n     fn choose_preferred_expression_branch(\n         &self,\n         traversal: &TraverseCoverageGraphWithLoops,\n-        branches: &Vec<BcbBranch>,\n+        branches: &[BcbBranch],\n     ) -> BcbBranch {\n         let branch_needs_a_counter =\n             |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n@@ -509,7 +509,7 @@ impl<'a> BcbCounters<'a> {\n     fn find_some_reloop_branch(\n         &self,\n         traversal: &TraverseCoverageGraphWithLoops,\n-        branches: &Vec<BcbBranch>,\n+        branches: &[BcbBranch],\n     ) -> Option<BcbBranch> {\n         let branch_needs_a_counter =\n             |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();"}, {"sha": "7c8c349da1d6c55544d01e2b49d9e888394267cf", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n         &self,\n         def_id: DefId,\n         substs_ref: SubstsRef<'tcx>,\n-        args: &Vec<Operand<'tcx>>,\n+        args: &[Operand<'tcx>],\n         source_info: SourceInfo,\n     ) {\n         let param_env = self.tcx.param_env(def_id);\n@@ -162,7 +162,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             .unwrap_or(None)\n     }\n \n-    fn nth_arg_span(&self, args: &Vec<Operand<'tcx>>, n: usize) -> Span {\n+    fn nth_arg_span(&self, args: &[Operand<'tcx>], n: usize) -> Span {\n         match &args[n] {\n             Operand::Copy(place) | Operand::Move(place) => {\n                 self.body.local_decls[place.local].source_info.span"}, {"sha": "cf2e4e8916d0a397c5f8b320f8acf39951417687", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -79,7 +79,7 @@ crate struct PlaceBuilder<'tcx> {\n /// part of a path that is captued by a closure. We stop applying projections once we see the first\n /// projection that isn't captured by a closure.\n fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n-    mir_projections: &Vec<PlaceElem<'tcx>>,\n+    mir_projections: &[PlaceElem<'tcx>],\n ) -> Vec<HirProjectionKind> {\n \n     let mut hir_projections  = Vec::new();\n@@ -128,7 +128,7 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n ///        list are being applied to the same root variable.\n fn is_ancestor_or_same_capture(\n     proj_possible_ancestor: &Vec<HirProjectionKind>,\n-    proj_capture: &Vec<HirProjectionKind>,\n+    proj_capture: &[HirProjectionKind],\n ) -> bool {\n     // We want to make sure `is_ancestor_or_same_capture(\"x.0.0\", \"x.0\")` to return false.\n     // Therefore we can't just check if all projections are same in the zipped iterator below.\n@@ -171,7 +171,7 @@ fn find_capture_matching_projections<'a, 'tcx>(\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     var_hir_id: HirId,\n     closure_def_id: DefId,\n-    projections: &Vec<PlaceElem<'tcx>>,\n+    projections: &[PlaceElem<'tcx>],\n ) -> Option<(usize, &'a ty::CapturedPlace<'tcx>)> {\n     let closure_min_captures = typeck_results.closure_min_captures.get(&closure_def_id)?;\n     let root_variable_min_captures = closure_min_captures.get(&var_hir_id)?;"}, {"sha": "1062000fede9b264b7dbe9a1c6f1aa2d9c1a1ff9", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -721,13 +721,9 @@ impl<'a> Parser<'a> {\n                                 Ok(t) => {\n                                     // Parsed successfully, therefore most probably the code only\n                                     // misses a separator.\n-                                    let mut exp_span = self.sess.source_map().next_point(sp);\n-                                    if self.sess.source_map().is_multiline(exp_span) {\n-                                        exp_span = sp;\n-                                    }\n                                     expect_err\n                                         .span_suggestion_short(\n-                                            exp_span,\n+                                            sp,\n                                             &format!(\"missing `{}`\", token_str),\n                                             token_str,\n                                             Applicability::MaybeIncorrect,"}, {"sha": "907a08cee2a4c326c2d1bcd9067f21d19999d456", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -185,15 +185,15 @@ impl<'a> Resolver<'a> {\n \n     crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n         match res {\n-            Res::Def(DefKind::Macro(..), def_id) => self.get_macro_by_def_id(def_id),\n+            Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),\n             Res::NonMacroAttr(attr_kind) => Some(self.non_macro_attr(attr_kind.is_used())),\n             _ => None,\n         }\n     }\n \n-    crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Option<Lrc<SyntaxExtension>> {\n+    crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {\n         if let Some(ext) = self.macro_map.get(&def_id) {\n-            return Some(ext.clone());\n+            return ext.clone();\n         }\n \n         let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n@@ -202,7 +202,7 @@ impl<'a> Resolver<'a> {\n         });\n \n         self.macro_map.insert(def_id, ext.clone());\n-        Some(ext)\n+        ext\n     }\n \n     crate fn build_reduced_graph("}, {"sha": "21def3e142910cb77cd88dade0e1dafd0631cba2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -1151,13 +1151,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// When evaluating a `trait` use its associated types' idents for suggestions in E0412.\n     fn with_trait_items<T>(\n         &mut self,\n-        trait_items: &'ast Vec<P<AssocItem>>,\n+        trait_items: &'ast [P<AssocItem>],\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n-        let trait_assoc_items = replace(\n-            &mut self.diagnostic_metadata.current_trait_assoc_items,\n-            Some(&trait_items[..]),\n-        );\n+        let trait_assoc_items =\n+            replace(&mut self.diagnostic_metadata.current_trait_assoc_items, Some(&trait_items));\n         let result = f(self);\n         self.diagnostic_metadata.current_trait_assoc_items = trait_assoc_items;\n         result"}, {"sha": "5eb30eacf07848d22912a108de704989a9d4ac17", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -1991,14 +1991,13 @@ impl<'a> Resolver<'a> {\n             {\n                 // The macro is a proc macro derive\n                 if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n-                    if let Some(ext) = self.get_macro_by_def_id(def_id) {\n-                        if !ext.is_builtin\n-                            && ext.macro_kind() == MacroKind::Derive\n-                            && parent.expansion.outer_expn_is_descendant_of(span.ctxt())\n-                        {\n-                            *poisoned = Some(node_id);\n-                            return module.parent;\n-                        }\n+                    let ext = self.get_macro_by_def_id(def_id);\n+                    if !ext.is_builtin\n+                        && ext.macro_kind() == MacroKind::Derive\n+                        && parent.expansion.outer_expn_is_descendant_of(span.ctxt())\n+                    {\n+                        *poisoned = Some(node_id);\n+                        return module.parent;\n                     }\n                 }\n             }"}, {"sha": "3a757e5f0075d468b77e1f5d02873231d0e51a0c", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -76,7 +76,7 @@ impl<'a> FileSearch<'a> {\n     pub fn new(\n         sysroot: &'a Path,\n         triple: &'a str,\n-        search_paths: &'a Vec<SearchPath>,\n+        search_paths: &'a [SearchPath],\n         tlib_path: &'a SearchPath,\n         kind: PathKind,\n     ) -> FileSearch<'a> {"}, {"sha": "f09ce8d64ed5e1b5bba37d3d21b8df6d8b508dc1", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -247,7 +247,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n \n-        self.assemble_candidates_for_trait_alias(obligation, &mut candidates)?;\n+        self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n \n         // Other bounds. Consider both in-scope bounds from fn decl\n         // and applicable impls. There is a certain set of precedence rules here.\n@@ -259,19 +259,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // User-defined copy impls are permitted, but only for\n             // structs and enums.\n-            self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n+            self.assemble_candidates_from_impls(obligation, &mut candidates);\n \n             // For other types, we'll use the builtin rules.\n             let copy_conditions = self.copy_clone_conditions(obligation);\n-            self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates)?;\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);\n         } else if lang_items.discriminant_kind_trait() == Some(def_id) {\n             // `DiscriminantKind` is automatically implemented for every type.\n             candidates.vec.push(DiscriminantKindCandidate);\n         } else if lang_items.sized_trait() == Some(def_id) {\n             // Sized is never implementable by end-users, it is\n             // always automatically computed.\n             let sized_conditions = self.sized_conditions(obligation);\n-            self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates)?;\n+            self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n         } else if lang_items.unsize_trait() == Some(def_id) {\n             self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n         } else {\n@@ -280,13 +280,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`\n                 // types have builtin support for `Clone`.\n                 let clone_conditions = self.copy_clone_conditions(obligation);\n-                self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates)?;\n+                self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);\n             }\n \n-            self.assemble_generator_candidates(obligation, &mut candidates)?;\n-            self.assemble_closure_candidates(obligation, &mut candidates)?;\n-            self.assemble_fn_pointer_candidates(obligation, &mut candidates)?;\n-            self.assemble_candidates_from_impls(obligation, &mut candidates)?;\n+            self.assemble_generator_candidates(obligation, &mut candidates);\n+            self.assemble_closure_candidates(obligation, &mut candidates);\n+            self.assemble_fn_pointer_candidates(obligation, &mut candidates);\n+            self.assemble_candidates_from_impls(obligation, &mut candidates);\n             self.assemble_candidates_from_object_ty(obligation, &mut candidates);\n         }\n \n@@ -295,7 +295,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Auto implementations have lower priority, so we only\n         // consider triggering a default if there is no other impl that can apply.\n         if candidates.vec.is_empty() {\n-            self.assemble_candidates_from_auto_impls(obligation, &mut candidates)?;\n+            self.assemble_candidates_from_auto_impls(obligation, &mut candidates);\n         }\n         debug!(\"candidate list size: {}\", candidates.vec.len());\n         Ok(candidates)\n@@ -367,9 +367,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {\n-            return Ok(());\n+            return;\n         }\n \n         // Okay to skip binder because the substs on generator types never\n@@ -388,8 +388,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             _ => {}\n         }\n-\n-        Ok(())\n     }\n \n     /// Checks for the artificial impl that the compiler will create for an obligation like `X :\n@@ -402,11 +400,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {\n             Some(k) => k,\n             None => {\n-                return Ok(());\n+                return;\n             }\n         };\n \n@@ -435,19 +433,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             _ => {}\n         }\n-\n-        Ok(())\n     }\n \n     /// Implements one of the `Fn()` family for a fn pointer.\n     fn assemble_fn_pointer_candidates(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         // We provide impl of all fn traits for fn pointers.\n         if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {\n-            return Ok(());\n+            return;\n         }\n \n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n@@ -485,16 +481,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             _ => {}\n         }\n-\n-        Ok(())\n     }\n \n     /// Searches for impls that might apply to `obligation`.\n     fn assemble_candidates_from_impls(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         debug!(?obligation, \"assemble_candidates_from_impls\");\n \n         // Essentially any user-written impl will match with an error type,\n@@ -504,7 +498,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Since compilation is already guaranteed to fail, this is just\n         // to try to show the 'nicest' possible errors to the user.\n         if obligation.references_error() {\n-            return Ok(());\n+            return;\n         }\n \n         self.tcx().for_each_relevant_impl(\n@@ -518,15 +512,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 });\n             },\n         );\n-\n-        Ok(())\n     }\n \n     fn assemble_candidates_from_auto_impls(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n         debug!(?self_ty, \"assemble_candidates_from_auto_impls\");\n@@ -585,8 +577,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 _ => candidates.vec.push(AutoImplCandidate(def_id)),\n             }\n         }\n-\n-        Ok(())\n     }\n \n     /// Searches for impls that might apply to `obligation`.\n@@ -753,7 +743,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n         debug!(?self_ty, \"assemble_candidates_for_trait_alias\");\n@@ -763,8 +753,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if self.tcx().is_trait_alias(def_id) {\n             candidates.vec.push(TraitAliasCandidate(def_id));\n         }\n-\n-        Ok(())\n     }\n \n     /// Assembles the trait which are built-in to the language itself:\n@@ -773,7 +761,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n-    ) -> Result<(), SelectionError<'tcx>> {\n+    ) {\n         match conditions {\n             BuiltinImplConditions::Where(nested) => {\n                 debug!(?nested, \"builtin_bound\");\n@@ -787,7 +775,5 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 candidates.ambiguous = true;\n             }\n         }\n-\n-        Ok(())\n     }\n }"}, {"sha": "be19919c0ea1f6be8cc20aa99cb6405a583b52f6", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -267,15 +267,13 @@ crate fn check_drop_obligations<'a, 'tcx>(\n     ty: Ty<'tcx>,\n     span: Span,\n     body_id: hir::HirId,\n-) -> Result<(), ErrorReported> {\n+) {\n     debug!(\"check_drop_obligations typ: {:?}\", ty);\n \n     let cause = &ObligationCause::misc(span, body_id);\n     let infer_ok = rcx.infcx.at(cause, rcx.fcx.param_env).dropck_outlives(ty);\n     debug!(\"dropck_outlives = {:#?}\", infer_ok);\n     rcx.fcx.register_infer_ok_obligations(infer_ok);\n-\n-    Ok(())\n }\n \n // This is an implementation of the TypeRelation trait with the"}, {"sha": "d4631c465a3a7c8c81a0fbb7e906f2e789070502", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -423,9 +423,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             probe_cx.assemble_inherent_candidates();\n             match scope {\n                 ProbeScope::TraitsInScope => {\n-                    probe_cx.assemble_extension_candidates_for_traits_in_scope(scope_expr_id)?\n+                    probe_cx.assemble_extension_candidates_for_traits_in_scope(scope_expr_id)\n                 }\n-                ProbeScope::AllTraits => probe_cx.assemble_extension_candidates_for_all_traits()?,\n+                ProbeScope::AllTraits => probe_cx.assemble_extension_candidates_for_all_traits(),\n             };\n             op(probe_cx)\n         })\n@@ -866,35 +866,29 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn assemble_extension_candidates_for_traits_in_scope(\n-        &mut self,\n-        expr_hir_id: hir::HirId,\n-    ) -> Result<(), MethodError<'tcx>> {\n+    fn assemble_extension_candidates_for_traits_in_scope(&mut self, expr_hir_id: hir::HirId) {\n         let mut duplicates = FxHashSet::default();\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);\n         if let Some(applicable_traits) = opt_applicable_traits {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let result = self.assemble_extension_candidates_for_trait(\n+                    self.assemble_extension_candidates_for_trait(\n                         &trait_candidate.import_ids,\n                         trait_did,\n                     );\n-                    result?;\n                 }\n             }\n         }\n-        Ok(())\n     }\n \n-    fn assemble_extension_candidates_for_all_traits(&mut self) -> Result<(), MethodError<'tcx>> {\n+    fn assemble_extension_candidates_for_all_traits(&mut self) {\n         let mut duplicates = FxHashSet::default();\n         for trait_info in suggest::all_traits(self.tcx) {\n             if duplicates.insert(trait_info.def_id) {\n-                self.assemble_extension_candidates_for_trait(&smallvec![], trait_info.def_id)?;\n+                self.assemble_extension_candidates_for_trait(&smallvec![], trait_info.def_id);\n             }\n         }\n-        Ok(())\n     }\n \n     pub fn matches_return_type(\n@@ -932,7 +926,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &mut self,\n         import_ids: &SmallVec<[LocalDefId; 1]>,\n         trait_def_id: DefId,\n-    ) -> Result<(), MethodError<'tcx>> {\n+    ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n         let trait_substs = self.fresh_item_substs(trait_def_id);\n         let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n@@ -980,7 +974,6 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 );\n             }\n         }\n-        Ok(())\n     }\n \n     fn candidate_method_names(&self) -> Vec<Ident> {\n@@ -1027,7 +1020,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let span = self.span;\n         let tcx = self.tcx;\n \n-        self.assemble_extension_candidates_for_all_traits()?;\n+        self.assemble_extension_candidates_for_all_traits();\n \n         let out_of_scope_traits = match self.pick_core() {\n             Some(Ok(p)) => vec![p.item.container.id()],"}, {"sha": "88e8dd3cb129aa1ac39358c81274c6e0ab41fbea", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         pat.each_binding(|_, hir_id, span, _| {\n             let typ = self.resolve_node_type(hir_id);\n             let body_id = self.body_id;\n-            let _ = dropck::check_drop_obligations(self, typ, span, body_id);\n+            dropck::check_drop_obligations(self, typ, span, body_id);\n         })\n     }\n }\n@@ -488,7 +488,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n             if place_with_id.place.projections.is_empty() {\n                 let typ = self.resolve_type(place_with_id.place.ty());\n                 let body_id = self.body_id;\n-                let _ = dropck::check_drop_obligations(self, typ, span, body_id);\n+                dropck::check_drop_obligations(self, typ, span, body_id);\n             }\n         }\n     }"}, {"sha": "eb2277d8baacde22ad18f6c83d881a11773b5432", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -14,11 +14,13 @@\n #![feature(core_intrinsics)]\n #![feature(nll)]\n #![feature(panic_runtime)]\n+#![feature(std_internals)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![feature(asm)]\n \n use core::any::Any;\n+use core::panic::BoxMeUp;\n \n #[rustc_std_internal_symbol]\n #[allow(improper_ctypes_definitions)]\n@@ -28,7 +30,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n \n // \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n+pub unsafe extern \"C\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n     abort();\n \n     cfg_if::cfg_if! {"}, {"sha": "9ce9c477ec0f0ae18f8722fb6062ab0d1d936b6d", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -104,9 +104,8 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any\n // implementation.\n #[rustc_std_internal_symbol]\n #[unwind(allowed)]\n-pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n-    let payload = payload as *mut &mut dyn BoxMeUp;\n-    let payload = (*payload).take_box();\n+pub unsafe extern \"C\" fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n+    let payload = Box::from_raw((*payload).take_box());\n \n-    imp::panic(Box::from_raw(payload))\n+    imp::panic(payload)\n }"}, {"sha": "6cd572cbe87c131b661d56d7483d62df2e2c551e", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -44,11 +44,11 @@ use realstd::io::set_output_capture;\n extern \"C\" {\n     fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);\n \n-    /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n-    /// It cannot be `Box<dyn BoxMeUp>` because the other end of this call does not depend\n-    /// on liballoc, and thus cannot use `Box`.\n+    /// `payload` is passed through another layer of raw pointers as `&mut dyn Trait` is not\n+    /// FFI-safe. `BoxMeUp` lazily performs allocation only when needed (this avoids allocations\n+    /// when using the \"abort\" panic runtime).\n     #[unwind(allowed)]\n-    fn __rust_start_panic(payload: usize) -> u32;\n+    fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32;\n }\n \n /// This function is called by the panic runtime if FFI code catches a Rust\n@@ -637,7 +637,7 @@ pub fn rust_panic_without_hook(payload: Box<dyn Any + Send>) -> ! {\n fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n     let code = unsafe {\n         let obj = &mut msg as *mut &mut dyn BoxMeUp;\n-        __rust_start_panic(obj as usize)\n+        __rust_start_panic(obj)\n     };\n     rtabort!(\"failed to initiate panic, error {}\", code)\n }"}, {"sha": "030892a432b31893193f126a3a006a8d5651a79a", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -4,17 +4,21 @@\n     <DisplayString>{data_ptr,[length]s8}</DisplayString>\n     <StringView>data_ptr,[length]s8</StringView>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">length</Item>\n-      <ArrayItems>\n-        <Size>length</Size>\n-        <ValuePointer>data_ptr</ValuePointer>\n-      </ArrayItems>\n+      <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>\n+      <Synthetic Name=\"[chars]\">\n+        <Expand>\n+          <ArrayItems>\n+            <Size>length</Size>\n+            <ValuePointer>data_ptr</ValuePointer>\n+          </ArrayItems>\n+        </Expand>\n+      </Synthetic>\n     </Expand>\n   </Type>\n   <Type Name=\"slice&lt;*&gt;\">\n-    <DisplayString>{{ length={length} }}</DisplayString>\n+    <DisplayString>{{ len={length} }}</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">length</Item>\n+      <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>\n       <ArrayItems>\n         <Size>length</Size>\n         <ValuePointer>data_ptr</ValuePointer>"}, {"sha": "cfaafc5734bcec3149eef42e38e81f0f17068152", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -1,9 +1,9 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n   <Type Name=\"alloc::vec::Vec&lt;*&gt;\">\n-    <DisplayString>{{ size={len} }}</DisplayString>\n+    <DisplayString>{{ len={len} }}</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">len</Item>\n+      <Item Name=\"[len]\" ExcludeView=\"simple\">len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n       <ArrayItems>\n         <Size>len</Size>\n@@ -12,9 +12,9 @@\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::collections::vec_deque::VecDeque&lt;*&gt;\">\n-    <DisplayString>{{ size={tail &lt;= head ? head - tail : buf.cap - tail + head} }}</DisplayString>\n+    <DisplayString>{{ len={tail &lt;= head ? head - tail : buf.cap - tail + head} }}</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">tail &lt;= head ? head - tail : buf.cap - tail + head</Item>\n+      <Item Name=\"[len]\" ExcludeView=\"simple\">tail &lt;= head ? head - tail : buf.cap - tail + head</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n       <CustomListItems>\n         <Variable Name=\"i\" InitialValue=\"tail\" />\n@@ -31,7 +31,7 @@\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::collections::linked_list::LinkedList&lt;*&gt;\">\n-    <DisplayString>{{ size={len} }}</DisplayString>\n+    <DisplayString>{{ len={len} }}</DisplayString>\n     <Expand>\n       <LinkedListItems>\n         <Size>len</Size>\n@@ -42,15 +42,37 @@\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::string::String\">\n-    <DisplayString>{*(char**)this,[vec.len]s8}</DisplayString>\n-    <StringView>*(char**)this,[vec.len]s8</StringView>\n+    <DisplayString>{(char*)vec.buf.ptr.pointer,[vec.len]s8}</DisplayString>\n+    <StringView>(char*)vec.buf.ptr.pointer,[vec.len]s8</StringView>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">vec.len</Item>\n+      <Item Name=\"[len]\" ExcludeView=\"simple\">vec.len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n-      <ArrayItems>\n-        <Size>vec.len</Size>\n-        <ValuePointer>*(char**)this</ValuePointer>\n-      </ArrayItems>\n+      <Synthetic Name=\"[chars]\">\n+        <Expand>\n+          <ArrayItems>\n+            <Size>vec.len</Size>\n+            <ValuePointer>(char*)vec.buf.ptr.pointer</ValuePointer>\n+          </ArrayItems>\n+        </Expand>\n+      </Synthetic>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"alloc::rc::Rc&lt;*&gt;\">\n+    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"alloc::sync::Arc&lt;*&gt;\">\n+    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"alloc::sync::Weak&lt;*&gt;\">\n+    <DisplayString>{ptr.pointer->data}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>ptr.pointer->data</ExpandedItem>\n     </Expand>\n   </Type>\n </AutoVisualizer>"}, {"sha": "984a8bfb13c7c4b470f43d49f552f21d8a65dc89", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -6,34 +6,28 @@\n       <Item Name=\"[ptr]\">pointer</Item>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"core::ptr::Shared&lt;*&gt;\">\n     <DisplayString>{{ Shared {pointer} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[ptr]\">pointer</Item>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"core::option::Option&lt;*&gt;\">\n-    <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">{{ None }}</DisplayString>\n-    <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">{{ Some {__0} }}</DisplayString>\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">None</DisplayString>\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">Some({__0})</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(RUST$ENUM$DISR != 0)</Item>\n-      <Item Name=\"[value]\" ExcludeView=\"simple\">__0</Item>\n-      <ArrayItems>\n-        <Size>(ULONG)(RUST$ENUM$DISR != 0)</Size>\n-        <ValuePointer>&amp;__0</ValuePointer>\n-      </ArrayItems>\n+      <Item Name=\"[value]\" ExcludeView=\"simple\" Condition=\"RUST$ENUM$DISR == 1\">__0</Item>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"core::option::Option&lt;*&gt;\" Priority=\"MediumLow\">\n-    <DisplayString Condition=\"*(PVOID *)this == nullptr\">{{ None }}</DisplayString>\n-    <DisplayString>{{ Some {($T1 *)this} }}</DisplayString>\n+    <DisplayString Condition=\"*(void**)this == nullptr\">None</DisplayString>\n+    <DisplayString>Some({($T1 *)this})</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(*(PVOID *)this != nullptr)</Item>\n-      <Item Name=\"[value]\" ExcludeView=\"simple\" Condition=\"*(PVOID *)this != nullptr\">($T1 *)this</Item>\n-      <ArrayItems>\n-        <Size>(ULONG)(*(PVOID *)this != nullptr)</Size>\n-        <ValuePointer>($T1 *)this</ValuePointer>\n-      </ArrayItems>\n+      <Item Name=\"Some\" ExcludeView=\"simple\" Condition=\"*(void**)this != nullptr\">($T1 *)this</Item>\n     </Expand>\n   </Type>\n+\n </AutoVisualizer>\n\\ No newline at end of file"}, {"sha": "7e5ee7b13daf1b6733b52d96ed75cf10d832c84b", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -26,9 +26,9 @@\n   -->\n \n   <Type Name=\"std::collections::hash::map::HashMap&lt;*,*,*&gt;\">\n-    <DisplayString>{{ size={base.table.items} }}</DisplayString>\n+    <DisplayString>{{ len={base.table.items} }}</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\">base.table.items</Item>\n+      <Item Name=\"[len]\">base.table.items</Item>\n       <Item Name=\"[capacity]\">base.table.items + base.table.growth_left</Item>\n       <Item Name=\"[state]\">base.hash_builder</Item>\n \n@@ -50,9 +50,9 @@\n   </Type>\n \n   <Type Name=\"std::collections::hash::set::HashSet&lt;*,*&gt;\">\n-    <DisplayString>{{ size={base.map.table.items} }}</DisplayString>\n+    <DisplayString>{{ len={base.map.table.items} }}</DisplayString>\n     <Expand>\n-      <Item Name=\"[size]\">base.map.table.items</Item>\n+      <Item Name=\"[len]\">base.map.table.items</Item>\n       <Item Name=\"[capacity]\">base.map.table.items + base.map.table.growth_left</Item>\n       <Item Name=\"[state]\">base.map.hash_builder</Item>\n "}, {"sha": "c39cc3ca39771841e8ff6e32a782dfd70b7a2a69", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -3,12 +3,12 @@ use crate::clean::*;\n crate struct StripItem(pub Item);\n \n impl StripItem {\n-    crate fn strip(self) -> Option<Item> {\n+    crate fn strip(self) -> Item {\n         match self.0 {\n-            Item { kind: box StrippedItem(..), .. } => Some(self.0),\n+            Item { kind: box StrippedItem(..), .. } => self.0,\n             mut i => {\n                 i.kind = box StrippedItem(i.kind);\n-                Some(i)\n+                i\n             }\n         }\n     }"}, {"sha": "20cf48915c3c8dfa9081aaf4af9c7bbf6ecc9fe0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 65, "deletions": 61, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -418,7 +418,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, I> {\n struct HeadingLinks<'a, 'b, 'ids, I> {\n     inner: I,\n     toc: Option<&'b mut TocBuilder>,\n-    buf: VecDeque<(Event<'a>, Range<usize>)>,\n+    buf: VecDeque<Event<'a>>,\n     id_map: &'ids mut IdMap,\n }\n \n@@ -428,48 +428,48 @@ impl<'a, 'b, 'ids, I> HeadingLinks<'a, 'b, 'ids, I> {\n     }\n }\n \n-impl<'a, 'b, 'ids, I: Iterator<Item = (Event<'a>, Range<usize>)>> Iterator\n-    for HeadingLinks<'a, 'b, 'ids, I>\n-{\n-    type Item = (Event<'a>, Range<usize>);\n+impl<'a, 'b, 'ids, I: Iterator<Item = Event<'a>>> Iterator for HeadingLinks<'a, 'b, 'ids, I> {\n+    type Item = Event<'a>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if let Some(e) = self.buf.pop_front() {\n             return Some(e);\n         }\n \n         let event = self.inner.next();\n-        if let Some((Event::Start(Tag::Heading(level)), _)) = event {\n+        if let Some(Event::Start(Tag::Heading(level))) = event {\n             let mut id = String::new();\n             for event in &mut self.inner {\n-                match &event.0 {\n+                match &event {\n                     Event::End(Tag::Heading(..)) => break,\n-                    Event::Start(Tag::Link(_, _, _)) | Event::End(Tag::Link(..)) => {}\n                     Event::Text(text) | Event::Code(text) => {\n                         id.extend(text.chars().filter_map(slugify));\n-                        self.buf.push_back(event);\n                     }\n-                    _ => self.buf.push_back(event),\n+                    _ => {}\n+                }\n+                match event {\n+                    Event::Start(Tag::Link(_, _, _)) | Event::End(Tag::Link(..)) => {}\n+                    event => self.buf.push_back(event),\n                 }\n             }\n             let id = self.id_map.derive(id);\n \n             if let Some(ref mut builder) = self.toc {\n                 let mut html_header = String::new();\n-                html::push_html(&mut html_header, self.buf.iter().map(|(ev, _)| ev.clone()));\n+                html::push_html(&mut html_header, self.buf.iter().cloned());\n                 let sec = builder.push(level as u32, html_header, id.clone());\n-                self.buf.push_front((Event::Html(format!(\"{} \", sec).into()), 0..0));\n+                self.buf.push_front(Event::Html(format!(\"{} \", sec).into()));\n             }\n \n-            self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n+            self.buf.push_back(Event::Html(format!(\"</a></h{}>\", level).into()));\n \n             let start_tags = format!(\n                 \"<h{level} id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n                     <a href=\\\"#{id}\\\">\",\n                 id = id,\n                 level = level\n             );\n-            return Some((Event::Html(start_tags.into()), 0..0));\n+            return Some(Event::Html(start_tags.into()));\n         }\n         event\n     }\n@@ -560,23 +560,23 @@ impl<'a, I> Footnotes<'a, I> {\n     }\n }\n \n-impl<'a, I: Iterator<Item = (Event<'a>, Range<usize>)>> Iterator for Footnotes<'a, I> {\n-    type Item = (Event<'a>, Range<usize>);\n+impl<'a, I: Iterator<Item = Event<'a>>> Iterator for Footnotes<'a, I> {\n+    type Item = Event<'a>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         loop {\n             match self.inner.next() {\n-                Some((Event::FootnoteReference(ref reference), range)) => {\n+                Some(Event::FootnoteReference(ref reference)) => {\n                     let entry = self.get_entry(&reference);\n                     let reference = format!(\n                         \"<sup id=\\\"fnref{0}\\\"><a href=\\\"#fn{0}\\\">{0}</a></sup>\",\n                         (*entry).1\n                     );\n-                    return Some((Event::Html(reference.into()), range));\n+                    return Some(Event::Html(reference.into()));\n                 }\n-                Some((Event::Start(Tag::FootnoteDefinition(def)), _)) => {\n+                Some(Event::Start(Tag::FootnoteDefinition(def))) => {\n                     let mut content = Vec::new();\n-                    for (event, _) in &mut self.inner {\n+                    for event in &mut self.inner {\n                         if let Event::End(Tag::FootnoteDefinition(..)) = event {\n                             break;\n                         }\n@@ -607,7 +607,7 @@ impl<'a, I: Iterator<Item = (Event<'a>, Range<usize>)>> Iterator for Footnotes<'\n                             ret.push_str(\"</li>\");\n                         }\n                         ret.push_str(\"</ol></div>\");\n-                        return Some((Event::Html(ret.into()), 0..0));\n+                        return Some(Event::Html(ret.into()));\n                     } else {\n                         return None;\n                     }\n@@ -917,14 +917,13 @@ impl Markdown<'_> {\n         };\n \n         let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n-        let p = p.into_offset_iter();\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n-        let p = Footnotes::new(p);\n-        let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n+        let p = LinkReplacer::new(p, links);\n         let p = CodeBlocks::new(p, codes, edition, playground);\n+        let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n \n         s\n@@ -935,16 +934,16 @@ impl MarkdownWithToc<'_> {\n     crate fn into_string(self) -> String {\n         let MarkdownWithToc(md, mut ids, codes, edition, playground) = self;\n \n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, opts());\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let mut toc = TocBuilder::new();\n \n         {\n             let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n+            let p = CodeBlocks::new(p, codes, edition, playground);\n             let p = Footnotes::new(p);\n-            let p = CodeBlocks::new(p.map(|(ev, _)| ev), codes, edition, playground);\n             html::push_html(&mut s, p);\n         }\n \n@@ -960,19 +959,19 @@ impl MarkdownHtml<'_> {\n         if md.is_empty() {\n             return String::new();\n         }\n-        let p = Parser::new_ext(md, opts()).into_offset_iter();\n+        let p = Parser::new_ext(md, opts());\n \n         // Treat inline HTML as plain text.\n-        let p = p.map(|event| match event.0 {\n-            Event::Html(text) => (Event::Text(text), event.1),\n+        let p = p.map(|event| match event {\n+            Event::Html(text) => Event::Text(text),\n             _ => event,\n         });\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n         let p = HeadingLinks::new(p, None, &mut ids);\n+        let p = CodeBlocks::new(p, codes, edition, playground);\n         let p = Footnotes::new(p);\n-        let p = CodeBlocks::new(p.map(|(ev, _)| ev), codes, edition, playground);\n         html::push_html(&mut s, p);\n \n         s\n@@ -1125,45 +1124,50 @@ crate fn plain_text_summary(md: &str) -> String {\n     s\n }\n \n-crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n+crate fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n     if md.is_empty() {\n         return vec![];\n     }\n \n     let mut links = vec![];\n-    // Used to avoid mutable borrow issues in the `push` closure\n-    // Probably it would be more efficient to use a `RefCell` but it doesn't seem worth the churn.\n     let mut shortcut_links = vec![];\n \n-    let span_for_link = |link: &str, span: Range<usize>| {\n-        // Pulldown includes the `[]` as well as the URL. Only highlight the relevant span.\n-        // NOTE: uses `rfind` in case the title and url are the same: `[Ok][Ok]`\n-        match md[span.clone()].rfind(link) {\n-            Some(start) => {\n-                let start = span.start + start;\n-                start..start + link.len()\n+    {\n+        let locate = |s: &str| unsafe {\n+            let s_start = s.as_ptr();\n+            let s_end = s_start.add(s.len());\n+            let md_start = md.as_ptr();\n+            let md_end = md_start.add(md.len());\n+            if md_start <= s_start && s_end <= md_end {\n+                let start = s_start.offset_from(md_start) as usize;\n+                let end = s_end.offset_from(md_start) as usize;\n+                Some(start..end)\n+            } else {\n+                None\n+            }\n+        };\n+\n+        let mut push = |link: BrokenLink<'_>| {\n+            // FIXME: use `link.span` instead of `locate`\n+            // (doing it now includes the `[]` as well as the text)\n+            shortcut_links.push((link.reference.to_owned(), locate(link.reference)));\n+            None\n+        };\n+        let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push));\n+\n+        // There's no need to thread an IdMap through to here because\n+        // the IDs generated aren't going to be emitted anywhere.\n+        let mut ids = IdMap::new();\n+        let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n+\n+        for ev in iter {\n+            if let Event::Start(Tag::Link(_, dest, _)) = ev {\n+                debug!(\"found link: {}\", dest);\n+                links.push(match dest {\n+                    CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n+                    s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), None),\n+                });\n             }\n-            // This can happen for things other than intra-doc links, like `#1` expanded to `https://github.com/rust-lang/rust/issues/1`.\n-            None => span,\n-        }\n-    };\n-    let mut push = |link: BrokenLink<'_>| {\n-        let span = span_for_link(link.reference, link.span);\n-        shortcut_links.push((link.reference.to_owned(), span));\n-        None\n-    };\n-    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push));\n-\n-    // There's no need to thread an IdMap through to here because\n-    // the IDs generated aren't going to be emitted anywhere.\n-    let mut ids = IdMap::new();\n-    let iter = Footnotes::new(HeadingLinks::new(p.into_offset_iter(), None, &mut ids));\n-\n-    for ev in iter {\n-        if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n-            debug!(\"found link: {}\", dest);\n-            let span = span_for_link(&dest, ev.1);\n-            links.push((dest.into_string(), span));\n         }\n     }\n "}, {"sha": "d8fadbf57e8db3c1b8264be20e4180cb3270b69b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -3483,7 +3483,7 @@ enum AssocItemLink<'a> {\n }\n \n impl<'a> AssocItemLink<'a> {\n-    fn anchor(&self, id: &'a String) -> Self {\n+    fn anchor(&self, id: &'a str) -> Self {\n         match *self {\n             AssocItemLink::Anchor(_) => AssocItemLink::Anchor(Some(&id)),\n             ref other => *other,"}, {"sha": "63cb02af3bcbb323f5d321b162138dd4377502b7", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -245,7 +245,7 @@ struct DiagnosticInfo<'a> {\n     item: &'a Item,\n     dox: &'a str,\n     ori_link: &'a str,\n-    link_range: Range<usize>,\n+    link_range: Option<Range<usize>>,\n }\n \n #[derive(Clone, Debug, Hash)]\n@@ -982,7 +982,7 @@ impl LinkCollector<'_, '_> {\n         parent_node: Option<DefId>,\n         krate: CrateNum,\n         ori_link: String,\n-        link_range: Range<usize>,\n+        link_range: Option<Range<usize>>,\n     ) -> Option<ItemLink> {\n         trace!(\"considering link '{}'\", ori_link);\n \n@@ -1628,7 +1628,7 @@ fn report_diagnostic(\n     msg: &str,\n     item: &Item,\n     dox: &str,\n-    link_range: &Range<usize>,\n+    link_range: &Option<Range<usize>>,\n     decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n@@ -1646,26 +1646,31 @@ fn report_diagnostic(\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = super::source_span_for_markdown_range(cx, dox, link_range, attrs);\n-        if let Some(sp) = span {\n-            diag.set_span(sp);\n-        } else {\n-            // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n-            //                       ^     ~~~~\n-            //                       |     link_range\n-            //                       last_new_line_offset\n-            let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n-            let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n-\n-            // Print the line containing the `link_range` and manually mark it with '^'s.\n-            diag.note(&format!(\n-                \"the link appears in this line:\\n\\n{line}\\n\\\n-                    {indicator: <before$}{indicator:^<found$}\",\n-                line = line,\n-                indicator = \"\",\n-                before = link_range.start - last_new_line_offset,\n-                found = link_range.len(),\n-            ));\n+        let span = link_range\n+            .as_ref()\n+            .and_then(|range| super::source_span_for_markdown_range(cx, dox, range, attrs));\n+\n+        if let Some(link_range) = link_range {\n+            if let Some(sp) = span {\n+                diag.set_span(sp);\n+            } else {\n+                // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+                //                       ^     ~~~~\n+                //                       |     link_range\n+                //                       last_new_line_offset\n+                let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+                let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+                // Print the line containing the `link_range` and manually mark it with '^'s.\n+                diag.note(&format!(\n+                    \"the link appears in this line:\\n\\n{line}\\n\\\n+                     {indicator: <before$}{indicator:^<found$}\",\n+                    line = line,\n+                    indicator = \"\",\n+                    before = link_range.start - last_new_line_offset,\n+                    found = link_range.len(),\n+                ));\n+            }\n         }\n \n         decorate(&mut diag, span);\n@@ -1685,7 +1690,7 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     dox: &str,\n-    link_range: Range<usize>,\n+    link_range: Option<Range<usize>>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n ) {\n     let tcx = collector.cx.tcx;\n@@ -1909,7 +1914,7 @@ fn anchor_failure(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Range<usize>,\n+    link_range: Option<Range<usize>>,\n     failure: AnchorFailure,\n ) {\n     let msg = match failure {\n@@ -1934,7 +1939,7 @@ fn ambiguity_error(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Range<usize>,\n+    link_range: Option<Range<usize>>,\n     candidates: Vec<Res>,\n ) {\n     let mut msg = format!(\"`{}` is \", path_str);\n@@ -1983,12 +1988,13 @@ fn suggest_disambiguator(\n     path_str: &str,\n     dox: &str,\n     sp: Option<rustc_span::Span>,\n-    link_range: &Range<usize>,\n+    link_range: &Option<Range<usize>>,\n ) {\n     let suggestion = disambiguator.suggestion();\n     let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n+        let link_range = link_range.as_ref().expect(\"must have a link range if we have a span\");\n         let msg = if dox.bytes().nth(link_range.start) == Some(b'`') {\n             format!(\"`{}`\", suggestion.as_help(path_str))\n         } else {\n@@ -2007,7 +2013,7 @@ fn privacy_error(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Range<usize>,\n+    link_range: Option<Range<usize>>,\n ) {\n     let sym;\n     let item_name = match item.name {"}, {"sha": "01e3d0acaa8555689e7caafc59b5a290659ecc94", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -49,7 +49,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = StripItem(self.fold_item_recur(i)).strip();\n                     self.update_retained = old;\n-                    return ret;\n+                    return Some(ret);\n                 }\n                 _ => return None,\n             }"}, {"sha": "a1924422f0e5ee27e70d6f895d3afa8db090fa92", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -51,7 +51,7 @@ impl<'a> DocFolder for Stripper<'a> {\n \n             clean::StructFieldItem(..) => {\n                 if !i.visibility.is_public() {\n-                    return StripItem(i).strip();\n+                    return Some(StripItem(i).strip());\n                 }\n             }\n \n@@ -61,7 +61,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = StripItem(self.fold_item_recur(i)).strip();\n                     self.update_retained = old;\n-                    return ret;\n+                    return Some(ret);\n                 }\n             }\n "}, {"sha": "7115aec1041af49774955f1a9733de8572c90d92", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -10,8 +10,8 @@\n // cdb-command: g\n \n // cdb-command: dx hash_set,d\n-// cdb-check:hash_set,d [...] : { size=15 } [Type: [...]::HashSet<u64, [...]>]\n-// cdb-check:    [size]           : 15 [Type: [...]]\n+// cdb-check:hash_set,d [...] : { len=15 } [Type: [...]::HashSet<u64, [...]>]\n+// cdb-check:    [len]            : 15 [Type: [...]]\n // cdb-check:    [capacity]       : [...]\n // cdb-check:    [[...]] [...]    : 0 [Type: u64]\n // cdb-command: dx hash_set,d\n@@ -44,8 +44,8 @@\n // cdb-check:    [[...]] [...]    : 14 [Type: u64]\n \n // cdb-command: dx hash_map,d\n-// cdb-check:hash_map,d [...] : { size=15 } [Type: [...]::HashMap<u64, u64, [...]>]\n-// cdb-check:    [size]           : 15 [Type: [...]]\n+// cdb-check:hash_map,d [...] : { len=15 } [Type: [...]::HashMap<u64, u64, [...]>]\n+// cdb-check:    [len]            : 15 [Type: [...]]\n // cdb-check:    [capacity]       : [...]\n // cdb-check:    [\"0x0\"]          : 0 [Type: unsigned __int64]\n // cdb-command: dx hash_map,d"}, {"sha": "1a99f8412504a4580b249d4dacc278937a76dc75", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -74,8 +74,8 @@\n // NOTE: While slices have a .natvis entry that works in VS & VS Code, it fails in CDB 10.0.18362.1\n \n // cdb-command: dx vec,d\n-// cdb-check:vec,d [...] : { size=4 } [Type: [...]::Vec<u64, alloc::alloc::Global>]\n-// cdb-check:    [size]           : 4 [Type: [...]]\n+// cdb-check:vec,d [...] : { len=4 } [Type: [...]::Vec<u64, alloc::alloc::Global>]\n+// cdb-check:    [len]            : 4 [Type: [...]]\n // cdb-check:    [capacity]       : [...] [Type: [...]]\n // cdb-check:    [0]              : 4 [Type: unsigned __int64]\n // cdb-check:    [1]              : 5 [Type: unsigned __int64]\n@@ -89,8 +89,10 @@\n // cdb-command: dx string\n // cdb-check:string           : \"IAMA string!\" [Type: [...]::String]\n // cdb-check:    [<Raw View>]     [Type: [...]::String]\n-// cdb-check:    [size]           : 0xc [Type: [...]]\n+// cdb-check:    [len]            : 0xc [Type: [...]]\n // cdb-check:    [capacity]       : 0xc [Type: [...]]\n+\n+// cdb-command: dx -r2 string\n // cdb-check:    [0]              : 73 'I' [Type: char]\n // cdb-check:    [1]              : 65 'A' [Type: char]\n // cdb-check:    [2]              : 77 'M' [Type: char]\n@@ -109,11 +111,11 @@\n // NOTE: OsString doesn't have a .natvis entry yet.\n \n // cdb-command: dx some\n-// cdb-check:some             : { Some 8 } [Type: [...]::Option<i16>]\n+// cdb-check:some             : Some(8) [Type: [...]::Option<i16>]\n // cdb-command: dx none\n-// cdb-check:none             : { None } [Type: [...]::Option<i64>]\n+// cdb-check:none             : None [Type: [...]::Option<i64>]\n // cdb-command: dx some_string\n-// cdb-check:some_string      : { Some \"IAMA optional string!\" } [[...]::Option<[...]::String>]\n+// cdb-check:some_string      : Some(\"IAMA optional string!\") [[...]::Option<[...]::String>]\n \n #![allow(unused_variables)]\n use std::ffi::OsString;"}, {"sha": "7c1a79722c9935c84b9b6cd6f602e908dd425db7", "filename": "src/test/rustdoc-ui/reference-links.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Frustdoc-ui%2Freference-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Frustdoc-ui%2Freference-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-links.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -0,0 +1,7 @@\n+// Test that errors point to the reference, not to the title text.\n+#![deny(broken_intra_doc_links)]\n+//! Links to [a] [link][a]\n+//!\n+//! [a]: std::process::Comman\n+//~^ ERROR unresolved\n+//~| ERROR unresolved"}, {"sha": "6ba73fbdb006de6c38c46b80b694811e9d3cac5e", "filename": "src/test/rustdoc-ui/reference-links.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Freference-links.stderr?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -0,0 +1,20 @@\n+error: unresolved link to `std::process::Comman`\n+  --> $DIR/reference-links.rs:5:10\n+   |\n+LL | //! [a]: std::process::Comman\n+   |          ^^^^^^^^^^^^^^^^^^^^ no item named `Comman` in module `process`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/reference-links.rs:2:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unresolved link to `std::process::Comman`\n+  --> $DIR/reference-links.rs:5:10\n+   |\n+LL | //! [a]: std::process::Comman\n+   |          ^^^^^^^^^^^^^^^^^^^^ no item named `Comman` in module `process`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f3ae3aba9b9e68149f7eb9a5fbb764cbc0591763", "filename": "src/test/ui/parser/multibyte-char-use-seperator-issue-80134.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for #80134.\n+\n+fn main() {\n+    (()\u00e9);\n+    //~^ ERROR: expected one of `)`, `,`, `.`, `?`, or an operator\n+    //~| ERROR: cannot find value `\u00e9` in this scope\n+    //~| ERROR: non-ascii idents are not fully supported\n+    (()\u6c37);\n+    //~^ ERROR: expected one of `)`, `,`, `.`, `?`, or an operator\n+    //~| ERROR: cannot find value `\u6c37` in this scope\n+    //~| ERROR: non-ascii idents are not fully supported\n+}"}, {"sha": "892cc92b1bdeb9437d248ee3703f680b65e8d180", "filename": "src/test/ui/parser/multibyte-char-use-seperator-issue-80134.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmultibyte-char-use-seperator-issue-80134.stderr?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -0,0 +1,52 @@\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `\u00e9`\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:4:8\n+   |\n+LL |     (()\u00e9);\n+   |        ^\n+   |        |\n+   |        expected one of `)`, `,`, `.`, `?`, or an operator\n+   |        help: missing `,`\n+\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `\u6c37`\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n+   |\n+LL |     (()\u6c37);\n+   |        -^\n+   |        |\n+   |        expected one of `)`, `,`, `.`, `?`, or an operator\n+   |        help: missing `,`\n+\n+error[E0425]: cannot find value `\u00e9` in this scope\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:4:8\n+   |\n+LL |     (()\u00e9);\n+   |        ^ not found in this scope\n+\n+error[E0425]: cannot find value `\u6c37` in this scope\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n+   |\n+LL |     (()\u6c37);\n+   |        ^^ not found in this scope\n+\n+error[E0658]: non-ascii idents are not fully supported\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:4:8\n+   |\n+LL |     (()\u00e9);\n+   |        ^\n+   |\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n+   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+\n+error[E0658]: non-ascii idents are not fully supported\n+  --> $DIR/multibyte-char-use-seperator-issue-80134.rs:8:8\n+   |\n+LL |     (()\u6c37);\n+   |        ^^\n+   |\n+   = note: see issue #55467 <https://github.com/rust-lang/rust/issues/55467> for more information\n+   = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0425, E0658.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "addba76ae3b51fd214b0e3a4a040340b8b0b8c62", "filename": "src/test/ui/similar-tokens.fixed", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.fixed?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -1,13 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused_imports)]\n-\n-pub mod x {\n-    pub struct A;\n-    pub struct B;\n-}\n-\n-// `.` is similar to `,` so list parsing should continue to closing `}`\n-use x::{A, B}; //~ ERROR expected one of `,`, `::`, `as`, or `}`, found `.`\n-\n-fn main() {}"}, {"sha": "e3024c61ad2bd800da819675c749d809a5df53df", "filename": "src/test/ui/similar-tokens.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.rs?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused_imports)]\n \n pub mod x {"}, {"sha": "90acfc052ddd45b90ed8786619ac3009dfd6d7fb", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/507bff92fadf1f25a830da5065a5a87113345163/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=507bff92fadf1f25a830da5065a5a87113345163", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,`, `::`, `as`, or `}`, found `.`\n-  --> $DIR/similar-tokens.rs:11:10\n+  --> $DIR/similar-tokens.rs:9:10\n    |\n LL | use x::{A. B};\n    |          ^"}]}