{"sha": "725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "node_id": "C_kwDOAAsO6NoAKDcyNWMxMWVmM2M2YTQwZTdkOWE3YzlhOGVhNjVmNzJiOTQ0OGQxZTA", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-03-03T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-03-04T15:57:34Z"}, "message": "Add SmallStr", "tree": {"sha": "9bfc7946be6a27fb5eaa6a67b8f23070945d6fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bfc7946be6a27fb5eaa6a67b8f23070945d6fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "html_url": "https://github.com/rust-lang/rust/commit/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0a31ff0c19c14583239848a7737e453aef3cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0a31ff0c19c14583239848a7737e453aef3cee", "html_url": "https://github.com/rust-lang/rust/commit/ea0a31ff0c19c14583239848a7737e453aef3cee"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "b82e97172614b0df6e0e29ad160973c73b07722f", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "patch": "@@ -20,7 +20,7 @@ stable_deref_trait = \"1.0.0\"\n rayon = { version = \"0.3.2\", package = \"rustc-rayon\" }\n rayon-core = { version = \"0.3.2\", package = \"rustc-rayon-core\" }\n rustc-hash = \"1.1.0\"\n-smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+smallvec = { version = \"1.6.1\", features = [\"const_generics\", \"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n measureme = \"10.0.0\""}, {"sha": "1a3fe652521567d839b359fdffa81ae0fd70c9b2", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "patch": "@@ -80,6 +80,7 @@ pub mod obligation_forest;\n pub mod owning_ref;\n pub mod sip128;\n pub mod small_c_str;\n+pub mod small_str;\n pub mod snapshot_map;\n pub mod stable_map;\n pub mod svh;"}, {"sha": "800acb1b03e5ae2a5b624cbca155052adebe0da1", "filename": "compiler/rustc_data_structures/src/small_str.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str.rs?ref=725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "patch": "@@ -0,0 +1,68 @@\n+use smallvec::SmallVec;\n+\n+#[cfg(test)]\n+mod tests;\n+\n+/// Like SmallVec but for strings.\n+#[derive(Default)]\n+pub struct SmallStr<const N: usize>(SmallVec<[u8; N]>);\n+\n+impl<const N: usize> SmallStr<N> {\n+    #[inline]\n+    pub fn new() -> Self {\n+        SmallStr(SmallVec::default())\n+    }\n+\n+    #[inline]\n+    pub fn push_str(&mut self, s: &str) {\n+        self.0.extend_from_slice(s.as_bytes());\n+    }\n+\n+    #[inline]\n+    pub fn empty(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+\n+    #[inline]\n+    pub fn spilled(&self) -> bool {\n+        self.0.spilled()\n+    }\n+\n+    #[inline]\n+    pub fn as_str(&self) -> &str {\n+        unsafe { std::str::from_utf8_unchecked(self.0.as_slice()) }\n+    }\n+}\n+\n+impl<const N: usize> std::ops::Deref for SmallStr<N> {\n+    type Target = str;\n+\n+    #[inline]\n+    fn deref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+impl<const N: usize, A: AsRef<str>> FromIterator<A> for SmallStr<N> {\n+    #[inline]\n+    fn from_iter<T>(iter: T) -> Self\n+    where\n+        T: IntoIterator<Item = A>,\n+    {\n+        let mut s = SmallStr::default();\n+        s.extend(iter);\n+        s\n+    }\n+}\n+\n+impl<const N: usize, A: AsRef<str>> Extend<A> for SmallStr<N> {\n+    #[inline]\n+    fn extend<T>(&mut self, iter: T)\n+    where\n+        T: IntoIterator<Item = A>,\n+    {\n+        for a in iter.into_iter() {\n+            self.push_str(a.as_ref());\n+        }\n+    }\n+}"}, {"sha": "7635a9b7204dbe6dbb636156eda35aa7dad04c18", "filename": "compiler/rustc_data_structures/src/small_str/tests.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_str%2Ftests.rs?ref=725c11ef3c6a40e7d9a7c9a8ea65f72b9448d1e0", "patch": "@@ -0,0 +1,20 @@\n+use super::*;\n+\n+#[test]\n+fn empty() {\n+    let s = SmallStr::<1>::new();\n+    assert!(s.empty());\n+    assert_eq!(\"\", s.as_str());\n+    assert!(!s.spilled());\n+}\n+\n+#[test]\n+fn from_iter() {\n+    let s = [\"aa\", \"bb\", \"cc\"].iter().collect::<SmallStr<6>>();\n+    assert_eq!(\"aabbcc\", s.as_str());\n+    assert!(!s.spilled());\n+\n+    let s = [\"aa\", \"bb\", \"cc\", \"dd\"].iter().collect::<SmallStr<6>>();\n+    assert_eq!(\"aabbccdd\", s.as_str());\n+    assert!(s.spilled());\n+}"}]}