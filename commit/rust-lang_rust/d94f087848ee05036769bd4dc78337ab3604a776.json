{"sha": "d94f087848ee05036769bd4dc78337ab3604a776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NGYwODc4NDhlZTA1MDM2NzY5YmQ0ZGM3ODMzN2FiMzYwNGE3NzY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-25T17:33:00Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-03T00:16:37Z"}, "message": "Show the variant name for univariant enums\n\nPreviously, only the fields would be displayed with no indication of the\nvariant name. If you already knew the enum was univariant, this was ok\nbut if the enum was univariant because of layout, for example, a\n`Result<T, !>` then it could be very confusing which variant was the\nactive one.", "tree": {"sha": "edaa85b82e408ccead0f5c21696d18f388f85d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edaa85b82e408ccead0f5c21696d18f388f85d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d94f087848ee05036769bd4dc78337ab3604a776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d94f087848ee05036769bd4dc78337ab3604a776", "html_url": "https://github.com/rust-lang/rust/commit/d94f087848ee05036769bd4dc78337ab3604a776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d94f087848ee05036769bd4dc78337ab3604a776/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24355896ba0986e4d27eff45084f704ec7e7948", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24355896ba0986e4d27eff45084f704ec7e7948", "html_url": "https://github.com/rust-lang/rust/commit/f24355896ba0986e4d27eff45084f704ec7e7948"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "78709a1abe72d7f75a946eb39e371cfed4bcb64c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d94f087848ee05036769bd4dc78337ab3604a776/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d94f087848ee05036769bd4dc78337ab3604a776/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d94f087848ee05036769bd4dc78337ab3604a776", "patch": "@@ -1517,7 +1517,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     Some(&self.common_members),\n                 );\n                 vec![MemberDescription {\n-                    name: if fallback { String::new() } else { variant_info.variant_name() },\n+                    name: variant_info.variant_name(),\n                     type_metadata: variant_type_metadata,\n                     offset: Size::ZERO,\n                     size: self.layout.size,"}, {"sha": "e3348c6bf0831556a8be9b550fe96b2a40c085db", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d94f087848ee05036769bd4dc78337ab3604a776/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d94f087848ee05036769bd4dc78337ab3604a776/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=d94f087848ee05036769bd4dc78337ab3604a776", "patch": "@@ -397,6 +397,17 @@ pub fn push_debuginfo_type_name<'tcx>(\n             output.push_str(\"enum$<\");\n             push_item_name(tcx, def.did, true, output);\n             push_generic_params_internal(tcx, substs, output, visited);\n+\n+            if let Variants::Single { index: variant_idx } = &layout.variants {\n+                // Uninhabited enums can't be constructed and should never need to be visualized so\n+                // skip this step for them.\n+                if def.variants.len() != 0 {\n+                    let variant = def.variants[*variant_idx].ident.as_str();\n+\n+                    output.push_str(&format!(\", {}\", variant));\n+                }\n+            }\n+\n             push_close_angle_bracket(tcx, output);\n         }\n     }"}, {"sha": "52e5d37c83fbdc5fa5b02147239cde29392c3a26", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d94f087848ee05036769bd4dc78337ab3604a776/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/d94f087848ee05036769bd4dc78337ab3604a776/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=d94f087848ee05036769bd4dc78337ab3604a776", "patch": "@@ -149,6 +149,8 @@\n       <Synthetic Name=\"[...]\"><DisplayString>...</DisplayString></Synthetic>\n     </Expand>\n   </Type>\n+\n+  <!-- Directly tagged enums. $T1 is the type name -->\n   <Type Name=\"enum$&lt;*&gt;\">\n     <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <DisplayString Condition=\"tag() == 0\">{tag(),en}</DisplayString>\n@@ -191,8 +193,20 @@\n     </Expand>\n   </Type>\n \n-  <!-- $T1 is the name of the enum, $T2 is the low value of the dataful variant tag,\n-       $T3 is the high value of the dataful variant tag, $T4 is the name of the dataful variant -->\n+  <!-- Single variant enums. $T1 is the name of the enum, $T2 is the name of the variant -->\n+  <Type Name=\"enum$&lt;*, *&gt;\">\n+    <DisplayString>{\"$T2\",sb}</DisplayString>\n+    <Expand>\n+      <Synthetic Name=\"[variant]\">\n+        <DisplayString>{\"$T2\",sb}</DisplayString>\n+      </Synthetic>\n+      <ExpandedItem>$T2</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <!-- Niche-layout enums. $T1 is the name of the enum, $T2 is the low value of the dataful\n+       variant tag, $T3 is the high value of the dataful variant tag, $T4 is the name of\n+       the dataful variant -->\n   <Type Name=\"enum$&lt;*, *, *, *&gt;\">\n     <Intrinsic Name=\"tag\" Expression=\"discriminant\" />\n     <Intrinsic Name=\"is_dataful\" Expression=\"tag() &gt;= $T2 &amp;&amp; tag() &lt;= $T3\" />"}, {"sha": "00e910669b9636e0cf6c3cb197e21ea3b4206b91", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d94f087848ee05036769bd4dc78337ab3604a776/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d94f087848ee05036769bd4dc78337ab3604a776/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=d94f087848ee05036769bd4dc78337ab3604a776", "patch": "@@ -82,6 +82,11 @@\n // cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n // cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]\n \n+// cdb-command: dx -r2 l,!\n+// cdb-check:l,!              : $T2 [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>]\n+// cdb-check:    [+0x000] Ok               [Type: enum$<core::result::Result<u32, enum$<msvc_pretty_enums::Empty> >, Ok>::Ok]\n+// cdb-check:        [+0x000] __0              : 0x2a [Type: unsigned int]\n+\n pub enum CStyleEnum {\n     Low = 2,\n     High = 16,\n@@ -93,6 +98,8 @@ pub enum NicheLayoutEnum {\n     Tag2,\n }\n \n+pub enum Empty { }\n+\n fn main() {\n     let a = Some(CStyleEnum::Low);\n     let b = Option::<CStyleEnum>::None;\n@@ -105,6 +112,7 @@ fn main() {\n     let i = Option::<u32>::None;\n     let j = CStyleEnum::High;\n     let k = Some(\"IAMA optional string!\".to_string());\n+    let l = Result::<u32, Empty>::Ok(42);\n \n     zzz(); // #break\n }"}]}