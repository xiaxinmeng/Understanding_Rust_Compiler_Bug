{"sha": "e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWQxMmMwY2FlNWM0M2FkYTY2NDFjN2RjODQwYTBmYmU1MDEwYTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-19T19:30:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-23T03:05:45Z"}, "message": "librustc: Forbid private types in public APIs.\n\nThis breaks code like:\n\n    struct Foo {\n        ...\n    }\n\n    pub fn make_foo() -> Foo {\n        ...\n    }\n\nChange this code to:\n\n    pub struct Foo {    // note `pub`\n        ...\n    }\n\n    pub fn make_foo() -> Foo {\n        ...\n    }\n\nThe `visible_private_types` lint has been removed, since it is now an\nerror to attempt to expose a private type in a public API. In its place\na `#[feature(visible_private_types)]` gate has been added.\n\nCloses #16463.\n\nRFC #48.\n\n[breaking-change]", "tree": {"sha": "21b3e62d447bda4ccda606894edb66ca965bccee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b3e62d447bda4ccda606894edb66ca965bccee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "html_url": "https://github.com/rust-lang/rust/commit/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43fd619819b334b8548dca98797bd4c8078636cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/43fd619819b334b8548dca98797bd4c8078636cb", "html_url": "https://github.com/rust-lang/rust/commit/43fd619819b334b8548dca98797bd4c8078636cb"}], "stats": {"total": 249, "additions": 169, "deletions": 80}, "files": [{"sha": "fb70cb5b752395d5d1bf01191cac056accf76b92", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -94,7 +94,7 @@ pub enum Void { }\n pub trait Any: AnyPrivate {}\n \n /// An inner trait to ensure that only this module can call `get_type_id()`.\n-trait AnyPrivate {\n+pub trait AnyPrivate {\n     /// Get the `TypeId` of `self`\n     fn get_type_id(&self) -> TypeId;\n }"}, {"sha": "f84c5eec452589d64d04920be563ddf086a3eb4f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -2178,7 +2178,6 @@ pub type Iterate<'a, T> = Unfold<'a, T, IterateState<'a, T>>;\n \n /// Creates a new iterator that produces an infinite sequence of\n /// repeated applications of the given function `f`.\n-#[allow(visible_private_types)]\n pub fn iterate<'a, T: Clone>(seed: T, f: |T|: 'a -> T) -> Iterate<'a, T> {\n     Unfold::new((f, Some(seed), true), |st| {\n         let &(ref mut f, ref mut val, ref mut first) = st;"}, {"sha": "e1eb281495169b135844f1a3fd4d8f60277aef7a", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -32,7 +32,7 @@ macro_rules! try( ($me:expr, $e:expr) => (\n \n /// Representations\n \n-trait Repr {\n+pub trait Repr {\n     fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()>;\n }\n "}, {"sha": "b5da4dc24bb5bf788e34491bbb54d2a48c494ca4", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -218,7 +218,7 @@\n \n // NB this does *not* include globs, please keep it that way.\n #![feature(macro_rules, phase, default_type_params)]\n-#![allow(visible_private_types, deprecated)]\n+#![allow(deprecated)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;\n@@ -385,7 +385,7 @@ pub struct SchedPool {\n /// keep track of how many tasks are currently running in the pool and then\n /// sending on a channel once the entire pool has been drained of all tasks.\n #[deriving(Clone)]\n-struct TaskState {\n+pub struct TaskState {\n     cnt: Arc<AtomicUint>,\n     done: Sender<()>,\n }"}, {"sha": "8c6fd83a76bad265967f78ebcdf1909d3950adec", "filename": "src/libnative/io/timer_unix.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibnative%2Fio%2Ftimer_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibnative%2Fio%2Ftimer_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_unix.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -66,15 +66,14 @@ pub struct Timer {\n     inner: Option<Box<Inner>>,\n }\n \n-struct Inner {\n+pub struct Inner {\n     cb: Option<Box<rtio::Callback + Send>>,\n     interval: u64,\n     repeat: bool,\n     target: u64,\n     id: uint,\n }\n \n-#[allow(visible_private_types)]\n pub enum Req {\n     // Add a new timer to the helper thread.\n     NewTimer(Box<Inner>),"}, {"sha": "14d32ed6eaa23f36a554df2158c3fdcc5dfe4646", "filename": "src/libregex/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibregex%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibregex%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fcompile.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -10,7 +10,6 @@\n \n // Enable this to squash warnings due to exporting pieces of the representation\n // for use with the regex! macro. See lib.rs for explanation.\n-#![allow(visible_private_types)]\n \n use std::cmp;\n use parse;"}, {"sha": "32a88cfb76d3a89a2e5911e33abcdb5acc3655f4", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -102,7 +102,6 @@ pub fn is_match(regex: &str, text: &str) -> Result<bool, parse::Error> {\n /// More details about the `regex!` macro can be found in the `regex` crate\n /// documentation.\n #[deriving(Clone)]\n-#[allow(visible_private_types)]\n pub enum Regex {\n     // The representation of `Regex` is exported to support the `regex!`\n     // syntax extension. Do not rely on it.\n@@ -516,7 +515,6 @@ impl Regex {\n     }\n \n     #[doc(hidden)]\n-    #[allow(visible_private_types)]\n     #[experimental]\n     pub fn names_iter<'a>(&'a self) -> NamesIter<'a> {\n         match *self {\n@@ -534,7 +532,7 @@ impl Regex {\n \n }\n \n-enum NamesIter<'a> {\n+pub enum NamesIter<'a> {\n     NamesIterNative(::std::slice::Items<'a, Option<&'static str>>),\n     NamesIterDynamic(::std::slice::Items<'a, Option<String>>)\n }"}, {"sha": "b4685ce456a476d987b7b420b3e39fa434611c8d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -1601,9 +1601,6 @@ declare_lint!(pub DEAD_ASSIGNMENT, Warn,\n declare_lint!(pub DEAD_CODE, Warn,\n               \"detect piece of code that will never be used\")\n \n-declare_lint!(pub VISIBLE_PRIVATE_TYPES, Warn,\n-              \"detect use of private types in exported type signatures\")\n-\n declare_lint!(pub UNREACHABLE_CODE, Warn,\n               \"detects unreachable code\")\n \n@@ -1636,7 +1633,6 @@ impl LintPass for HardwiredLints {\n             UNUSED_VARIABLE,\n             DEAD_ASSIGNMENT,\n             DEAD_CODE,\n-            VISIBLE_PRIVATE_TYPES,\n             UNREACHABLE_CODE,\n             WARNINGS,\n             UNKNOWN_FEATURES,"}, {"sha": "c3b477da4bce53fec988fa2d720fbe3d83e649aa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -224,7 +224,7 @@ pub fn deref_kind(tcx: &ty::ctxt, t: ty::t) -> deref_kind {\n     }\n }\n \n-trait ast_node {\n+pub trait ast_node {\n     fn id(&self) -> ast::NodeId;\n     fn span(&self) -> Span;\n }"}, {"sha": "bf16f7727750926e68365a11f4a5a09122f3e04c", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 52, "deletions": 14, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -16,7 +16,6 @@ use std::mem::replace;\n \n use metadata::csearch;\n use middle::def;\n-use lint;\n use middle::resolve;\n use middle::ty;\n use middle::typeck::{MethodCall, MethodMap, MethodOrigin, MethodParam, MethodTypeParam};\n@@ -1289,19 +1288,38 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n         };\n         // A path can only be private if:\n         // it's in this crate...\n-        is_local(did) &&\n-            // ... it's not exported (obviously) ...\n-            !self.exported_items.contains(&did.node) &&\n-            // .. and it corresponds to a type in the AST (this returns None for\n-            // type parameters)\n-            self.tcx.map.find(did.node).is_some()\n+        if !is_local(did) {\n+            return false\n+        }\n+        // .. and it corresponds to a private type in the AST (this returns\n+        // None for type parameters)\n+        match self.tcx.map.find(did.node) {\n+            Some(ast_map::NodeItem(ref item)) => item.vis != ast::Public,\n+            Some(_) | None => false,\n+        }\n     }\n \n     fn trait_is_public(&self, trait_id: ast::NodeId) -> bool {\n         // FIXME: this would preferably be using `exported_items`, but all\n         // traits are exported currently (see `EmbargoVisitor.exported_trait`)\n         self.public_items.contains(&trait_id)\n     }\n+\n+    fn check_ty_param_bound(&self,\n+                            span: Span,\n+                            ty_param_bound: &ast::TyParamBound) {\n+        match *ty_param_bound {\n+            ast::TraitTyParamBound(ref trait_ref) => {\n+                if !self.tcx.sess.features.borrow().visible_private_types &&\n+                        self.path_is_private_type(trait_ref.ref_id) {\n+                    self.tcx.sess.span_err(span,\n+                                           \"private type in exported type \\\n+                                            parameter bound\");\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n@@ -1338,7 +1356,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // namespace (the contents have their own privacies).\n             ast::ItemForeignMod(_) => {}\n \n-            ast::ItemTrait(..) if !self.trait_is_public(item.id) => return,\n+            ast::ItemTrait(_, _, ref bounds, _) => {\n+                if !self.trait_is_public(item.id) {\n+                    return\n+                }\n+\n+                for bound in bounds.iter() {\n+                    self.check_ty_param_bound(item.span, bound)\n+                }\n+            }\n \n             // impls need some special handling to try to offer useful\n             // error messages without (too many) false positives\n@@ -1471,6 +1497,19 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         visit::walk_item(self, item);\n     }\n \n+    fn visit_generics(&mut self, generics: &ast::Generics) {\n+        for ty_param in generics.ty_params.iter() {\n+            for bound in ty_param.bounds.iter() {\n+                self.check_ty_param_bound(ty_param.span, bound)\n+            }\n+        }\n+        for predicate in generics.where_clause.predicates.iter() {\n+            for bound in predicate.bounds.iter() {\n+                self.check_ty_param_bound(predicate.span, bound)\n+            }\n+        }\n+    }\n+\n     fn visit_foreign_item(&mut self, item: &ast::ForeignItem) {\n         if self.exported_items.contains(&item.id) {\n             visit::walk_foreign_item(self, item)\n@@ -1488,12 +1527,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, t: &ast::Ty) {\n         match t.node {\n             ast::TyPath(ref p, _, path_id) => {\n-                if self.path_is_private_type(path_id) {\n-                    self.tcx.sess.add_lint(\n-                        lint::builtin::VISIBLE_PRIVATE_TYPES,\n-                        path_id, p.span,\n-                        \"private type in exported type \\\n-                         signature\".to_string());\n+                if !self.tcx.sess.features.borrow().visible_private_types &&\n+                        self.path_is_private_type(path_id) {\n+                    self.tcx.sess.span_err(p.span,\n+                                           \"private type in exported type \\\n+                                            signature\");\n                 }\n             }\n             _ => {}"}, {"sha": "646c754b63b876aea49681016b7ec640eabad587", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -1645,7 +1645,7 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n     }\n }\n \n-trait Resolvable {\n+pub trait Resolvable {\n     fn resolve(&self, infcx: &InferCtxt) -> Self;\n     fn contains_error(&self) -> bool;\n }"}, {"sha": "c25ef2ca63a0bf80011f9f2f3d5b4e07d290ccda", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -153,7 +153,7 @@ pub enum AttributeSet {\n     FunctionIndex = !0\n }\n \n-trait AttrHelper {\n+pub trait AttrHelper {\n     fn apply_llfn(&self, idx: c_uint, llfn: ValueRef);\n     fn apply_callsite(&self, idx: c_uint, callsite: ValueRef);\n }"}, {"sha": "8531f569a6b1215f83cec0e204dc80b73ef0156b", "filename": "src/librustrt/local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -26,7 +26,6 @@ pub trait Local<Borrowed> {\n     unsafe fn try_unsafe_borrow() -> Option<*mut Self>;\n }\n \n-#[allow(visible_private_types)]\n impl Local<local_ptr::Borrowed<Task>> for Task {\n     #[inline]\n     fn put(value: Box<Task>) { unsafe { local_ptr::put(value) } }"}, {"sha": "912e4ef4d40f434a11e29a7b062cf574b962f34a", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -374,7 +374,6 @@ pub mod native {\n \n     #[inline]\n     #[cfg(not(test))]\n-    #[allow(visible_private_types)]\n     pub fn maybe_tls_key() -> Option<tls::Key> {\n         unsafe {\n             // NB: This is a little racy because, while the key is"}, {"sha": "acef05e08673b1947599e794b077fcbfc2f585e6", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -237,7 +237,6 @@ fn rust_exception_class() -> uw::_Unwind_Exception_Class {\n \n #[cfg(not(target_arch = \"arm\"), not(windows, target_arch = \"x86_64\"), not(test))]\n #[doc(hidden)]\n-#[allow(visible_private_types)]\n pub mod eabi {\n     use libunwind as uw;\n     use libc::c_int;\n@@ -291,7 +290,6 @@ pub mod eabi {\n \n #[cfg(target_os = \"ios\", target_arch = \"arm\", not(test))]\n #[doc(hidden)]\n-#[allow(visible_private_types)]\n pub mod eabi {\n     use libunwind as uw;\n     use libc::c_int;\n@@ -347,7 +345,6 @@ pub mod eabi {\n // but otherwise works the same.\n #[cfg(target_arch = \"arm\", not(target_os = \"ios\"), not(test))]\n #[doc(hidden)]\n-#[allow(visible_private_types)]\n pub mod eabi {\n     use libunwind as uw;\n     use libc::c_int;\n@@ -397,21 +394,20 @@ pub mod eabi {\n \n #[cfg(windows, target_arch = \"x86_64\", not(test))]\n #[doc(hidden)]\n-#[allow(visible_private_types)]\n #[allow(non_camel_case_types, non_snake_case)]\n pub mod eabi {\n     use libunwind as uw;\n     use libc::{c_void, c_int};\n \n     #[repr(C)]\n-    struct EXCEPTION_RECORD;\n+    pub struct EXCEPTION_RECORD;\n     #[repr(C)]\n-    struct CONTEXT;\n+    pub struct CONTEXT;\n     #[repr(C)]\n-    struct DISPATCHER_CONTEXT;\n+    pub struct DISPATCHER_CONTEXT;\n \n     #[repr(C)]\n-    enum EXCEPTION_DISPOSITION {\n+    pub enum EXCEPTION_DISPOSITION {\n         ExceptionContinueExecution,\n         ExceptionContinueSearch,\n         ExceptionNestedException,"}, {"sha": "609ce016d38da4f1dfd99ae4b91c61b74920a7c6", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -19,7 +19,7 @@ use net;\n use super::{Loop, UvError, Request, wait_until_woken_after, wakeup};\n use uvll;\n \n-struct Addrinfo {\n+pub struct Addrinfo {\n     handle: *const libc::addrinfo,\n }\n "}, {"sha": "44cfafe30749865a317a9fb2befe2cee439279c7", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -46,7 +46,6 @@ via `close` and `delete` methods.\n \n #![feature(macro_rules, unsafe_destructor)]\n #![deny(unused_result, unused_must_use)]\n-#![allow(visible_private_types)]\n \n #![reexport_test_harness_main = \"test_main\"]\n "}, {"sha": "cd0fa184a09dc26245f9a62cacf41a40aaea6183", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -69,6 +69,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"advanced_slice_patterns\", Active),\n     (\"tuple_indexing\", Active),\n     (\"associated_types\", Active),\n+    (\"visible_private_types\", Active),\n \n     // if you change this list without updating src/doc/rust.md, cmr will be sad\n \n@@ -100,6 +101,7 @@ pub struct Features {\n     pub overloaded_calls: bool,\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n+    pub visible_private_types: bool,\n }\n \n impl Features {\n@@ -109,6 +111,7 @@ impl Features {\n             overloaded_calls: false,\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n+            visible_private_types: false,\n         }\n     }\n }\n@@ -479,6 +482,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n         overloaded_calls: cx.has_feature(\"overloaded_calls\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n+        visible_private_types: cx.has_feature(\"visible_private_types\"),\n     },\n     unknown_features)\n }"}, {"sha": "75728c075d1eb4d221911f7ef0935bce6d4d5161", "filename": "src/test/auxiliary/iss.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fiss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fiss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fiss.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n \n // part of issue-6919.rs\n \n-struct C<'a> {\n+pub struct C<'a> {\n     pub k: ||: 'a,\n }\n "}, {"sha": "94b079b1dcfebd225e360c402a8e53e022b79f9f", "filename": "src/test/auxiliary/noexporttypelib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnoexporttypelib.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type oint = Option<int>;\n+pub type oint = Option<int>;\n pub fn foo() -> oint { Some(3) }"}, {"sha": "8c07dd5b785fd8268c1800bd00a0df747433e817", "filename": "src/test/auxiliary/priv-impl-prim-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fpriv-impl-prim-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fpriv-impl-prim-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpriv-impl-prim-ty.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A {\n+pub trait A {\n     fn frob(&self);\n }\n "}, {"sha": "1e9fd035f44b5e3be82aeccf3f812aa630772609", "filename": "src/test/auxiliary/regions-bounded-method-type-parameters-cross-crate-lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fregions-bounded-method-type-parameters-cross-crate-lib.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -16,7 +16,7 @@ pub enum MaybeOwned<'a> {\n     Borrowed(&'a int)\n }\n \n-struct Inv<'a> { // invariant w/r/t 'a\n+pub struct Inv<'a> { // invariant w/r/t 'a\n     x: &'a mut &'a int\n }\n "}, {"sha": "996d22038249bfba7170b27596d6a229d446a954", "filename": "src/test/codegen/static-method-call-multi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call-multi.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Struct {\n+pub struct Struct {\n     field: int\n }\n "}, {"sha": "9c5894fb97ac2576214c79719d7779977d0da01c", "filename": "src/test/codegen/static-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstatic-method-call.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Struct {\n+pub struct Struct {\n     field: int\n }\n "}, {"sha": "ff1a611c4efef802d1d50102b6c961f8e2d475e1", "filename": "src/test/codegen/virtual-method-call-struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call-struct-return.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Stuff {\n+pub struct Stuff {\n   a: int,\n   b: f64\n }\n \n-trait Trait {\n+pub trait Trait {\n     fn method(&self) -> Stuff;\n }\n "}, {"sha": "036c0957e99d926d21353a9eee43071a0f394754", "filename": "src/test/codegen/virtual-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvirtual-method-call.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {\n+pub trait Trait {\n     fn method(&self) -> int;\n }\n "}, {"sha": "a2d2c02dc43b383e93ba196bbcc8264bdefe9590", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -11,7 +11,6 @@\n #![no_std]\n #![allow(unused_variable)]\n #![allow(non_camel_case_types)]\n-#![allow(visible_private_types)]\n #![deny(dead_code)]\n #![feature(lang_items)]\n \n@@ -54,7 +53,7 @@ impl SemiUsedStruct {\n     fn la_la_la() {}\n }\n struct StructUsedAsField;\n-struct StructUsedInEnum;\n+pub struct StructUsedInEnum;\n struct StructUsedInGeneric;\n pub struct PubStruct2 {\n     #[allow(dead_code)]"}, {"sha": "740848e93cbeaba799d176b7493dfc9a13b5ffee", "filename": "src/test/compile-fail/visible-private-types-generics.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-generics.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+pub fn f<T:Foo>() {}    //~ ERROR private type in exported type\n+\n+pub fn g<T>() where T: Foo {}   //~ ERROR private type in exported type\n+\n+pub struct H<T:Foo> {   //~ ERROR private type in exported type\n+    x: T,\n+}\n+\n+pub struct I<T> where T: Foo {  //~ ERROR private type in exported type\n+    x: T,\n+}\n+\n+fn main() {}\n+"}, {"sha": "c4457aaf1e1f3da15341afe7c3670c7f03810382", "filename": "src/test/compile-fail/visible-private-types-supertrait.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvisible-private-types-supertrait.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+pub trait Bar : Foo {}  //~ ERROR private type in exported type\n+\n+fn main() {}\n+"}, {"sha": "a9bdcf2734bbcd4c38c1572fa8745a27dd5eba38", "filename": "src/test/run-pass/deriving-enum-single-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type task_id = int;\n+pub type task_id = int;\n \n #[deriving(PartialEq)]\n pub enum Task {"}, {"sha": "6161d31c4a9ea00f5ce2839c7b8ffb7edeb9272c", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n // by value.\n \n #[deriving(PartialEq, Show)]\n-struct TwoU16s {\n+pub struct TwoU16s {\n     one: u16, two: u16\n }\n "}, {"sha": "3e6b6502074476c9d1e087f83e058728c5869033", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n // by value.\n \n #[deriving(PartialEq, Show)]\n-struct TwoU32s {\n+pub struct TwoU32s {\n     one: u32, two: u32\n }\n "}, {"sha": "5ad1e89425b0905f01ce2dca7a56a15f599e3047", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n // by value.\n \n #[deriving(PartialEq, Show)]\n-struct TwoU64s {\n+pub struct TwoU64s {\n     one: u64, two: u64\n }\n "}, {"sha": "14ba7c80059b5755f16843eeb11d4bd11490cff3", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n // by value.\n \n #[deriving(PartialEq, Show)]\n-struct TwoU8s {\n+pub struct TwoU8s {\n     one: u8, two: u8\n }\n "}, {"sha": "ca9767307f42ed1834d60bfcadd2a424019089cb", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct TwoU16s {\n+pub struct TwoU16s {\n     one: u16, two: u16\n }\n "}, {"sha": "8d650459daa8de31534e62479149975d76b23835", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct TwoU32s {\n+pub struct TwoU32s {\n     one: u32, two: u32\n }\n "}, {"sha": "924aaf811f44a55e222eec01de148edc6cbff5d1", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct TwoU64s {\n+pub struct TwoU64s {\n     one: u64, two: u64\n }\n "}, {"sha": "1dbce403cc8a196e4e9299b47e97c556e84d8247", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct TwoU8s {\n+pub struct TwoU8s {\n     one: u8, two: u8\n }\n "}, {"sha": "84d71e1ef5de68cbfeed330be8c72f6cd133f48e", "filename": "src/test/run-pass/issue-10902.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10902.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -9,16 +9,16 @@\n // except according to those terms.\n \n pub mod two_tuple {\n-    trait T {}\n-    struct P<'a>(&'a T + 'a, &'a T + 'a);\n+    pub trait T {}\n+    pub struct P<'a>(&'a T + 'a, &'a T + 'a);\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P(car, cdr)\n     }\n }\n \n pub mod two_fields {\n-    trait T {}\n-    struct P<'a> { car: &'a T + 'a, cdr: &'a T + 'a }\n+    pub trait T {}\n+    pub struct P<'a> { car: &'a T + 'a, cdr: &'a T + 'a }\n     pub fn f<'a>(car: &'a T, cdr: &'a T) -> P<'a> {\n         P{ car: car, cdr: cdr }\n     }"}, {"sha": "53157ce7546ffd367fa908ea862e2b558b09cb9f", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -15,7 +15,7 @@\n extern crate libc;\n use libc::{c_uint, uint32_t, c_void};\n \n-struct KEYGEN {\n+pub struct KEYGEN {\n     hash_algorithm: [c_uint, ..2],\n     count: uint32_t,\n     salt: *const c_void,"}, {"sha": "951832a14aa605cfd1f561855a9329855f040e03", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -14,7 +14,7 @@\n \n use std::f64;\n \n-struct Point {\n+pub struct Point {\n     x: f64,\n     y: f64\n }"}, {"sha": "9c728005b6fb7fe971068dcd761216ded2469233", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -48,7 +48,7 @@ pub fn main() {\n \n \n // minimal\n-trait MyTrait<T> { }\n+pub trait MyTrait<T> { }\n \n pub struct MyContainer<'a, T> {\n     foos: Vec<&'a MyTrait<T>+'a> ,"}, {"sha": "a35ab1bfc0ce6b80445161dbb2d26d66ed0e3ff2", "filename": "src/test/run-pass/regions-no-variance-from-fn-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-variance-from-fn-generics.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -12,7 +12,7 @@\n // should not upset the variance inference for actual occurrences of\n // that lifetime in type expressions.\n \n-trait HasLife<'a> { }\n+pub trait HasLife<'a> { }\n \n trait UseLife01 {\n     fn refs<'a, H: HasLife<'a>>(&'a self) -> H;\n@@ -23,7 +23,7 @@ trait UseLife02 {\n }\n \n \n-trait HasType<T> { }\n+pub trait HasType<T> { }\n \n trait UseLife03<T> {\n     fn refs<'a, H: HasType<&'a T>>(&'a self) -> H;"}, {"sha": "d64408ec42f7067ea8a6a9af7e38781ae3babe53", "filename": "src/test/run-pass/struct-partial-move-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[deriving(PartialEq, Show)]\n-struct Partial<T> { x: T, y: T }\n+pub struct Partial<T> { x: T, y: T }\n \n #[deriving(PartialEq, Show)]\n struct S { val: int }"}, {"sha": "0e77079ed057e2bfcc26ff0282bb23a64ac57a3b", "filename": "src/test/run-pass/struct-partial-move-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n #[deriving(PartialEq, Show)]\n-struct Partial<T> { x: T, y: T }\n+pub struct Partial<T> { x: T, y: T }\n \n #[deriving(PartialEq, Show)]\n struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }\n \n-type Two<T> = (Partial<T>, Partial<T>);\n+pub type Two<T> = (Partial<T>, Partial<T>);\n \n pub fn f<T>((b1, b2): (T, T), (b3, b4): (T, T), f: |T| -> T) -> Two<T> {\n     let p = Partial { x: b1, y: b2 };"}, {"sha": "16e702bb79aa4385e5116c3db61bf55ddf2b7ac7", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -13,7 +13,7 @@\n \n use std::num::NumCast;\n \n-trait Num {\n+pub trait Num {\n     fn from_int(i: int) -> Self;\n     fn gt(&self, other: &Self) -> bool;\n }"}, {"sha": "611c3e006ec1937b6a35efe34be3729c55108b60", "filename": "src/test/run-pass/trait-inheritance-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait MyNum {\n+pub trait MyNum {\n     fn from_int(int) -> Self;\n }\n "}, {"sha": "3b454aad03e480a7c00ca8ee78a8d2ceba911833", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait MyEq { }\n+pub trait MyEq { }\n \n-trait MyNum {\n+pub trait MyNum {\n     fn from_int(int) -> Self;\n }\n "}, {"sha": "9518671b4799dbb472a339da794d7561575eebfd", "filename": "src/test/run-pass/visible-private-types-feature-gate.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvisible-private-types-feature-gate.rs?ref=e9ad12c0cae5c43ada6641c7dc840a0fbe5010a2", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(visible_private_types)]\n+\n+trait Foo {}\n+\n+pub trait Bar : Foo {}\n+\n+struct Baz;\n+\n+pub fn f(_: Baz) {}\n+\n+fn main() {}\n+"}]}