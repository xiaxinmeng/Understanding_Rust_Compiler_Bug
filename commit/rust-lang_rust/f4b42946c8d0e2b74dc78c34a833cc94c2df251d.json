{"sha": "f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "node_id": "C_kwDOAAsO6NoAKGY0YjQyOTQ2YzhkMGUyYjc0ZGM3OGMzNGE4MzNjYzk0YzJkZjI1MWQ", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-01-21T18:01:58Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-01-21T18:01:58Z"}, "message": "Remove FIXME and fix inconsistency of local blanket impls by using HIR for them", "tree": {"sha": "7e1d9e080da4e1a5bbcd058e530fd8e64c273d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1d9e080da4e1a5bbcd058e530fd8e64c273d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "html_url": "https://github.com/rust-lang/rust/commit/f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b42946c8d0e2b74dc78c34a833cc94c2df251d/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e918971d643c6a33067d5125214ab800ce5307", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e918971d643c6a33067d5125214ab800ce5307", "html_url": "https://github.com/rust-lang/rust/commit/84e918971d643c6a33067d5125214ab800ce5307"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "75ee663b926c49378b437cdc98b7059d6261dde9", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f4b42946c8d0e2b74dc78c34a833cc94c2df251d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b42946c8d0e2b74dc78c34a833cc94c2df251d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "patch": "@@ -101,6 +101,27 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n                     cx.generated_synthetics.insert((ty, trait_def_id));\n \n+                    let hir_imp = impl_def_id.as_local()\n+                        .map(|local| cx.tcx.hir().expect_item(local))\n+                        .and_then(|item| if let hir::ItemKind::Impl(i) = &item.kind {\n+                            Some(i)\n+                        } else {\n+                            None\n+                        });\n+\n+                    let items = match hir_imp {\n+                        Some(imp) => imp\n+                            .items\n+                            .iter()\n+                            .map(|ii| cx.tcx.hir().impl_item(ii.id).clean(cx))\n+                            .collect::<Vec<_>>(),\n+                        None => cx.tcx\n+                            .associated_items(impl_def_id)\n+                            .in_definition_order()\n+                            .map(|x| x.clean(cx))\n+                            .collect::<Vec<_>>(),\n+                    };\n+\n                     impls.push(Item {\n                         name: None,\n                         attrs: Default::default(),\n@@ -117,12 +138,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             // the post-inference `trait_ref`, as it's more accurate.\n                             trait_: Some(trait_ref.clean(cx)),\n                             for_: ty.clean(cx),\n-                            items: cx\n-                                .tcx\n-                                .associated_items(impl_def_id)\n-                                .in_definition_order()\n-                                .map(|x| x.clean(cx))\n-                                .collect::<Vec<_>>(),\n+                            items,\n                             polarity: ty::ImplPolarity::Positive,\n                             kind: ImplKind::Blanket(box trait_ref.self_ty().clean(cx)),\n                         }),"}, {"sha": "f9e9fe0d3cf201d7aaae3937650af957ff6c54ed", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4b42946c8d0e2b74dc78c34a833cc94c2df251d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b42946c8d0e2b74dc78c34a833cc94c2df251d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=f4b42946c8d0e2b74dc78c34a833cc94c2df251d", "patch": "@@ -172,21 +172,8 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error> {\n-        let local_blanket_impl = match item.def_id {\n-            clean::ItemId::Blanket { impl_id, .. } => impl_id.is_local(),\n-            clean::ItemId::Auto { .. }\n-            | clean::ItemId::DefId(_)\n-            | clean::ItemId::Primitive(_, _) => false,\n-        };\n-\n         // Flatten items that recursively store other items\n-        // FIXME(CraftSpider): We skip children of local blanket implementations, as we'll have\n-        //     already seen the actual generic impl, and the generated ones don't need documenting.\n-        //     This is necessary due to the visibility, return type, and self arg of the generated\n-        //     impls not quite matching, and will no longer be necessary when the mismatch is fixed.\n-        if !local_blanket_impl {\n-            item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n-        }\n+        item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n \n         let id = item.def_id;\n         if let Some(mut new_item) = self.convert_item(item) {"}]}