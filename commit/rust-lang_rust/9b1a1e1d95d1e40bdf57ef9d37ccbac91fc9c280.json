{"sha": "9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "node_id": "C_kwDOAAsO6NoAKDliMWExZTFkOTVkMWU0MGJkZjU3ZWY5ZDM3Y2NiYWM5MWZjOWMyODA", "commit": {"author": {"name": "Jing Peng", "email": "pj.hades@gmail.com", "date": "2023-02-26T20:27:27Z"}, "committer": {"name": "Jing Peng", "email": "pj.hades@gmail.com", "date": "2023-06-06T21:53:29Z"}, "message": "Write to stdout if `-` is given as output file\n\nIf `-o -` or `--emit KIND=-` is provided, output will be written\nto stdout instead. Binary output (`obj`, `llvm-bc`, `link` and\n`metadata`) being written this way will result in an error unless\nstdout is not a tty. Multiple output types going to stdout will\ntrigger an error too, as they will all be mixded together.", "tree": {"sha": "a9dfaf211a9e470ba26b20416916ab214a2be476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9dfaf211a9e470ba26b20416916ab214a2be476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "html_url": "https://github.com/rust-lang/rust/commit/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/comments", "author": {"login": "pjhades", "id": 1171455, "node_id": "MDQ6VXNlcjExNzE0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1171455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjhades", "html_url": "https://github.com/pjhades", "followers_url": "https://api.github.com/users/pjhades/followers", "following_url": "https://api.github.com/users/pjhades/following{/other_user}", "gists_url": "https://api.github.com/users/pjhades/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjhades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjhades/subscriptions", "organizations_url": "https://api.github.com/users/pjhades/orgs", "repos_url": "https://api.github.com/users/pjhades/repos", "events_url": "https://api.github.com/users/pjhades/events{/privacy}", "received_events_url": "https://api.github.com/users/pjhades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pjhades", "id": 1171455, "node_id": "MDQ6VXNlcjExNzE0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1171455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjhades", "html_url": "https://github.com/pjhades", "followers_url": "https://api.github.com/users/pjhades/followers", "following_url": "https://api.github.com/users/pjhades/following{/other_user}", "gists_url": "https://api.github.com/users/pjhades/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjhades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjhades/subscriptions", "organizations_url": "https://api.github.com/users/pjhades/orgs", "repos_url": "https://api.github.com/users/pjhades/repos", "events_url": "https://api.github.com/users/pjhades/events{/privacy}", "received_events_url": "https://api.github.com/users/pjhades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1221e43bdf413f7c405e9b17ef19d76c88222098", "url": "https://api.github.com/repos/rust-lang/rust/commits/1221e43bdf413f7c405e9b17ef19d76c88222098", "html_url": "https://github.com/rust-lang/rust/commit/1221e43bdf413f7c405e9b17ef19d76c88222098"}], "stats": {"total": 557, "additions": 456, "deletions": 101}, "files": [{"sha": "650553e0d8343c811680137e79c22ee79615504c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -3702,6 +3702,7 @@ dependencies = [\n name = \"rustc_interface\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"libloading\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n@@ -4166,6 +4167,7 @@ dependencies = [\n name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"getopts\",\n  \"libc\",\n  \"rustc_ast\","}, {"sha": "5ecb63986fe1f00c878abb61a16739991d5f1f27", "filename": "compiler/rustc_codegen_ssa/messages.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fmessages.ftl?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -9,6 +9,8 @@ codegen_ssa_archive_build_failure =\n \n codegen_ssa_atomic_compare_exchange = Atomic compare-exchange intrinsic missing failure memory ordering\n \n+codegen_ssa_binary_output_to_tty = option `-o` or `--emit` is used to write binary output type `{$shorthand}` to stdout, but stdout is a tty\n+\n codegen_ssa_check_installed_visual_studio = please ensure that Visual Studio 2017 or later, or Build Tools for Visual Studio were installed with the Visual C++ option.\n \n codegen_ssa_copy_path = could not copy {$from} to {$to}: {$error}"}, {"sha": "311e56cc7d15e0729ba54fa58cd960636a547f3a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_metadata::find_native_static_library;\n-use rustc_metadata::fs::{emit_wrapper_file, METADATA_FILENAME};\n+use rustc_metadata::fs::{copy_to_stdout, emit_wrapper_file, METADATA_FILENAME};\n use rustc_middle::middle::debugger_visualizer::DebuggerVisualizerFile;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n@@ -68,6 +68,7 @@ pub fn link_binary<'a>(\n ) -> Result<(), ErrorGuaranteed> {\n     let _timer = sess.timer(\"link_binary\");\n     let output_metadata = sess.opts.output_types.contains_key(&OutputType::Metadata);\n+    let mut tempfiles_for_stdout_output: Vec<PathBuf> = Vec::new();\n     for &crate_type in sess.crate_types().iter() {\n         // Ignore executable crates if we have -Z no-codegen, as they will error.\n         if (sess.opts.unstable_opts.no_codegen || !sess.opts.output_types.should_codegen())\n@@ -97,12 +98,15 @@ pub fn link_binary<'a>(\n                 .tempdir()\n                 .unwrap_or_else(|error| sess.emit_fatal(errors::CreateTempDir { error }));\n             let path = MaybeTempDir::new(tmpdir, sess.opts.cg.save_temps);\n-            let out_filename = out_filename(\n+            let output = out_filename(\n                 sess,\n                 crate_type,\n                 outputs,\n                 codegen_results.crate_info.local_crate_name,\n             );\n+            let crate_name = format!(\"{}\", codegen_results.crate_info.local_crate_name);\n+            let out_filename =\n+                output.file_for_writing(outputs, OutputType::Exe, Some(crate_name.as_str()));\n             match crate_type {\n                 CrateType::Rlib => {\n                     let _timer = sess.timer(\"link_rlib\");\n@@ -152,6 +156,17 @@ pub fn link_binary<'a>(\n                     );\n                 }\n             }\n+\n+            if output.is_stdout() {\n+                if output.is_tty() {\n+                    sess.emit_err(errors::BinaryOutputToTty {\n+                        shorthand: OutputType::Exe.shorthand(),\n+                    });\n+                } else if let Err(e) = copy_to_stdout(&out_filename) {\n+                    sess.emit_err(errors::CopyPath::new(&out_filename, output.as_path(), e));\n+                }\n+                tempfiles_for_stdout_output.push(out_filename);\n+            }\n         }\n     }\n \n@@ -189,6 +204,11 @@ pub fn link_binary<'a>(\n             remove_temps_from_module(allocator_module);\n         }\n \n+        // Remove the temporary files if output goes to stdout\n+        for temp in tempfiles_for_stdout_output {\n+            ensure_removed(sess.diagnostic(), &temp);\n+        }\n+\n         // If no requested outputs require linking, then the object temporaries should\n         // be kept.\n         if !sess.opts.output_types.should_link() {"}, {"sha": "a1e8725e08edcc7d873c52225dcc11efc51912d4", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -23,12 +23,13 @@ use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n     copy_cgu_workproduct_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n+use rustc_metadata::fs::copy_to_stdout;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::exported_symbols::SymbolExportInfo;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n-use rustc_session::config::{self, CrateType, Lto, OutputFilenames, OutputType};\n+use rustc_session::config::{self, CrateType, Lto, OutFileName, OutputFilenames, OutputType};\n use rustc_session::config::{Passes, SwitchWithOptPath};\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n@@ -535,9 +536,16 @@ fn produce_final_output_artifacts(\n     let mut user_wants_objects = false;\n \n     // Produce final compile outputs.\n-    let copy_gracefully = |from: &Path, to: &Path| {\n-        if let Err(e) = fs::copy(from, to) {\n-            sess.emit_err(errors::CopyPath::new(from, to, e));\n+    let copy_gracefully = |from: &Path, to: &OutFileName| match to {\n+        OutFileName::Stdout => {\n+            if let Err(e) = copy_to_stdout(from) {\n+                sess.emit_err(errors::CopyPath::new(from, to.as_path(), e));\n+            }\n+        }\n+        OutFileName::Real(path) => {\n+            if let Err(e) = fs::copy(from, path) {\n+                sess.emit_err(errors::CopyPath::new(from, path, e));\n+            }\n         }\n     };\n \n@@ -547,7 +555,12 @@ fn produce_final_output_artifacts(\n             //    to copy `foo.0.x` to `foo.x`.\n             let module_name = Some(&compiled_modules.modules[0].name[..]);\n             let path = crate_output.temp_path(output_type, module_name);\n-            copy_gracefully(&path, &crate_output.path(output_type));\n+            let output = crate_output.path(output_type);\n+            if !output_type.is_text_output() && output.is_tty() {\n+                sess.emit_err(errors::BinaryOutputToTty { shorthand: output_type.shorthand() });\n+            } else {\n+                copy_gracefully(&path, &output);\n+            }\n             if !sess.opts.cg.save_temps && !keep_numbered {\n                 // The user just wants `foo.x`, not `foo.#module-name#.x`.\n                 ensure_removed(sess.diagnostic(), &path);"}, {"sha": "3fed9ea0b41e0c3762ac0c507b11526843bf5132", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -82,6 +82,12 @@ impl IntoDiagnosticArg for DebugArgPath<'_> {\n     }\n }\n \n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_binary_output_to_tty)]\n+pub struct BinaryOutputToTty {\n+    pub shorthand: &'static str,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_ignoring_emit_path)]\n pub struct IgnoringEmitPath {"}, {"sha": "416603a0e1ca2e5d4052680707a8b48aecf78e0f", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -34,7 +34,9 @@ use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n use rustc_session::config::{nightly_options, CG_OPTIONS, Z_OPTIONS};\n-use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n+use rustc_session::config::{\n+    ErrorOutputType, Input, OutFileName, OutputType, PrintRequest, TrimmedDefPaths,\n+};\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::getopts::{self, Matches};\n use rustc_session::lint::{Lint, LintId};\n@@ -437,9 +439,12 @@ fn run_compiler(\n }\n \n // Extract output directory and file from matches.\n-fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>) {\n+fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<OutFileName>) {\n     let odir = matches.opt_str(\"out-dir\").map(|o| PathBuf::from(&o));\n-    let ofile = matches.opt_str(\"o\").map(|o| PathBuf::from(&o));\n+    let ofile = matches.opt_str(\"o\").map(|o| match o.as_str() {\n+        \"-\" => OutFileName::Stdout,\n+        path => OutFileName::Real(PathBuf::from(path)),\n+    });\n     (odir, ofile)\n }\n \n@@ -685,7 +690,7 @@ fn print_crate_info(\n                 for &style in &crate_types {\n                     let fname =\n                         rustc_session::output::filename_for_input(sess, style, id, &t_outputs);\n-                    safe_println!(\"{}\", fname.file_name().unwrap().to_string_lossy());\n+                    safe_println!(\"{}\", fname.as_path().file_name().unwrap().to_string_lossy());\n                 }\n             }\n             Cfg => {"}, {"sha": "24a5f4030b88d23003cd63f33ce40ecbc56f7dc9", "filename": "compiler/rustc_driver_impl/src/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_driver_impl%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_driver_impl%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fpretty.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -9,7 +9,7 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::{PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n+use rustc_session::config::{OutFileName, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n@@ -359,8 +359,8 @@ fn get_source(sess: &Session) -> (String, FileName) {\n \n fn write_or_print(out: &str, sess: &Session) {\n     match &sess.io.output_file {\n-        None => print!(\"{out}\"),\n-        Some(p) => {\n+        None | Some(OutFileName::Stdout) => print!(\"{out}\"),\n+        Some(OutFileName::Real(p)) => {\n             if let Err(e) = std::fs::write(p, out) {\n                 sess.emit_fatal(UnprettyDumpFail {\n                     path: p.display().to_string(),"}, {"sha": "7826d42dcb2d75cf789aa631f0399f08fdf88135", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [lib]\n \n [dependencies]\n+atty = \"0.2.13\"\n libloading = \"0.7.1\"\n tracing = \"0.1\"\n rustc-rayon-core = { version = \"0.5.0\", optional = true }"}, {"sha": "bd9fad8b042967bf8a3c91b11c4a4b060670687e", "filename": "compiler/rustc_interface/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fmessages.ftl?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -33,6 +33,7 @@ interface_mixed_proc_macro_crate =\n interface_multiple_output_types_adaption =\n     due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n \n+interface_multiple_output_types_to_stdout = can't use option `-o` or `--emit` to write multiple output types to stdout\n interface_out_dir_error =\n     failed to find or create the directory specified by `--out-dir`\n "}, {"sha": "a9ab2720d89a57114e0f1ac1b157b4c6b79fd757", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -108,3 +108,7 @@ pub struct IgnoringExtraFilename;\n #[derive(Diagnostic)]\n #[diag(interface_ignoring_out_dir)]\n pub struct IgnoringOutDir;\n+\n+#[derive(Diagnostic)]\n+#[diag(interface_multiple_output_types_to_stdout)]\n+pub struct MultipleOutputTypesToStdout;"}, {"sha": "2edc72ba72ea180306037680f26b3ecbf2e395e1", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::{bug, ty};\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_query_system::query::print_query_stack;\n-use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{self, ErrorOutputType, Input, OutFileName, OutputFilenames};\n use rustc_session::config::{CheckCfg, ExpectedValues};\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n@@ -252,7 +252,7 @@ pub struct Config {\n \n     pub input: Input,\n     pub output_dir: Option<PathBuf>,\n-    pub output_file: Option<PathBuf>,\n+    pub output_file: Option<OutFileName>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     pub locale_resources: &'static [&'static str],\n "}, {"sha": "83a74742f5b764b635d466705410db2953c83084", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -24,7 +24,7 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_a\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::Resolver;\n-use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n+use rustc_session::config::{CrateType, Input, OutFileName, OutputFilenames, OutputType};\n use rustc_session::cstore::{MetadataLoader, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n@@ -373,19 +373,23 @@ fn generated_output_paths(\n ) -> Vec<PathBuf> {\n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.keys() {\n-        let file = outputs.path(*output_type);\n+        let out_filename = outputs.path(*output_type);\n+        let file = out_filename.as_path().to_path_buf();\n         match *output_type {\n             // If the filename has been overridden using `-o`, it will not be modified\n             // by appending `.rlib`, `.exe`, etc., so we can skip this transformation.\n             OutputType::Exe if !exact_name => {\n                 for crate_type in sess.crate_types().iter() {\n                     let p = filename_for_input(sess, *crate_type, crate_name, outputs);\n-                    out_filenames.push(p);\n+                    out_filenames.push(p.as_path().to_path_buf());\n                 }\n             }\n             OutputType::DepInfo if sess.opts.unstable_opts.dep_info_omit_d_target => {\n                 // Don't add the dep-info output when omitting it from dep-info targets\n             }\n+            OutputType::DepInfo if out_filename.is_stdout() => {\n+                // Don't add the dep-info output when it goes to stdout\n+            }\n             _ => {\n                 out_filenames.push(file);\n             }\n@@ -452,7 +456,8 @@ fn write_out_deps(tcx: TyCtxt<'_>, outputs: &OutputFilenames, out_filenames: &[P\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n     }\n-    let deps_filename = outputs.path(OutputType::DepInfo);\n+    let deps_output = outputs.path(OutputType::DepInfo);\n+    let deps_filename = deps_output.as_path();\n \n     let result: io::Result<()> = try {\n         // Build a list of files used to compile the output and\n@@ -515,33 +520,47 @@ fn write_out_deps(tcx: TyCtxt<'_>, outputs: &OutputFilenames, out_filenames: &[P\n             }\n         }\n \n-        let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n-        for path in out_filenames {\n-            writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n-        }\n+        let write_deps_to_file = |file: &mut dyn Write| -> io::Result<()> {\n+            for path in out_filenames {\n+                writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n+            }\n \n-        // Emit a fake target for each input file to the compilation. This\n-        // prevents `make` from spitting out an error if a file is later\n-        // deleted. For more info see #28735\n-        for path in files {\n-            writeln!(file, \"{path}:\")?;\n-        }\n+            // Emit a fake target for each input file to the compilation. This\n+            // prevents `make` from spitting out an error if a file is later\n+            // deleted. For more info see #28735\n+            for path in files {\n+                writeln!(file, \"{path}:\")?;\n+            }\n \n-        // Emit special comments with information about accessed environment variables.\n-        let env_depinfo = sess.parse_sess.env_depinfo.borrow();\n-        if !env_depinfo.is_empty() {\n-            let mut envs: Vec<_> = env_depinfo\n-                .iter()\n-                .map(|(k, v)| (escape_dep_env(*k), v.map(escape_dep_env)))\n-                .collect();\n-            envs.sort_unstable();\n-            writeln!(file)?;\n-            for (k, v) in envs {\n-                write!(file, \"# env-dep:{k}\")?;\n-                if let Some(v) = v {\n-                    write!(file, \"={v}\")?;\n-                }\n+            // Emit special comments with information about accessed environment variables.\n+            let env_depinfo = sess.parse_sess.env_depinfo.borrow();\n+            if !env_depinfo.is_empty() {\n+                let mut envs: Vec<_> = env_depinfo\n+                    .iter()\n+                    .map(|(k, v)| (escape_dep_env(*k), v.map(escape_dep_env)))\n+                    .collect();\n+                envs.sort_unstable();\n                 writeln!(file)?;\n+                for (k, v) in envs {\n+                    write!(file, \"# env-dep:{k}\")?;\n+                    if let Some(v) = v {\n+                        write!(file, \"={v}\")?;\n+                    }\n+                    writeln!(file)?;\n+                }\n+            }\n+\n+            Ok(())\n+        };\n+\n+        match deps_output {\n+            OutFileName::Stdout => {\n+                let mut file = BufWriter::new(io::stdout());\n+                write_deps_to_file(&mut file)?;\n+            }\n+            OutFileName::Real(ref path) => {\n+                let mut file = BufWriter::new(fs::File::create(path)?);\n+                write_deps_to_file(&mut file)?;\n             }\n         }\n     };"}, {"sha": "77ee2b40e37c1fec78e08214962ad872b668451b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -11,7 +11,7 @@ use rustc_session::config::InstrumentXRay;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n-    BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n+    BranchProtection, Externs, OomStrategy, OutFileName, OutputType, OutputTypes, PAuthKey, PacRet,\n     ProcMacroExecutionStrategy, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n@@ -167,8 +167,14 @@ fn test_output_types_tracking_hash_different_paths() {\n     let mut v2 = Options::default();\n     let mut v3 = Options::default();\n \n-    v1.output_types = OutputTypes::new(&[(OutputType::Exe, Some(PathBuf::from(\"./some/thing\")))]);\n-    v2.output_types = OutputTypes::new(&[(OutputType::Exe, Some(PathBuf::from(\"/some/thing\")))]);\n+    v1.output_types = OutputTypes::new(&[(\n+        OutputType::Exe,\n+        Some(OutFileName::Real(PathBuf::from(\"./some/thing\"))),\n+    )]);\n+    v2.output_types = OutputTypes::new(&[(\n+        OutputType::Exe,\n+        Some(OutFileName::Real(PathBuf::from(\"/some/thing\"))),\n+    )]);\n     v3.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n     assert_non_crate_hash_different(&v1, &v2);\n@@ -182,13 +188,13 @@ fn test_output_types_tracking_hash_different_construction_order() {\n     let mut v2 = Options::default();\n \n     v1.output_types = OutputTypes::new(&[\n-        (OutputType::Exe, Some(PathBuf::from(\"./some/thing\"))),\n-        (OutputType::Bitcode, Some(PathBuf::from(\"./some/thing.bc\"))),\n+        (OutputType::Exe, Some(OutFileName::Real(PathBuf::from(\"./some/thing\")))),\n+        (OutputType::Bitcode, Some(OutFileName::Real(PathBuf::from(\"./some/thing.bc\")))),\n     ]);\n \n     v2.output_types = OutputTypes::new(&[\n-        (OutputType::Bitcode, Some(PathBuf::from(\"./some/thing.bc\"))),\n-        (OutputType::Exe, Some(PathBuf::from(\"./some/thing\"))),\n+        (OutputType::Bitcode, Some(OutFileName::Real(PathBuf::from(\"./some/thing.bc\")))),\n+        (OutputType::Exe, Some(OutFileName::Real(PathBuf::from(\"./some/thing\")))),\n     ]);\n \n     assert_same_hash(&v1, &v2);"}, {"sha": "87252fefb1e2cfc29c442f660d9657cf58283909", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -11,7 +11,7 @@ use rustc_parse::validate_attr;\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n-use rustc_session::config::{ErrorOutputType, OutputFilenames};\n+use rustc_session::config::{ErrorOutputType, OutFileName, OutputFilenames, OutputTypes};\n use rustc_session::filesearch::sysroot_candidates;\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n@@ -500,7 +500,36 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n     base\n }\n \n+fn multiple_output_types_to_stdout(\n+    output_types: &OutputTypes,\n+    single_output_file_is_stdout: bool,\n+) -> bool {\n+    if atty::is(atty::Stream::Stdout) {\n+        // If stdout is a tty, check if multiple text output types are\n+        // specified by `--emit foo=- --emit bar=-` or `-o - --emit foo,bar`\n+        let named_text_types = output_types\n+            .iter()\n+            .filter(|(f, o)| f.is_text_output() && *o == &Some(OutFileName::Stdout))\n+            .count();\n+        let unnamed_text_types =\n+            output_types.iter().filter(|(f, o)| f.is_text_output() && o.is_none()).count();\n+        named_text_types > 1 || unnamed_text_types > 1 && single_output_file_is_stdout\n+    } else {\n+        // Otherwise, all the output types should be checked\n+        let named_types =\n+            output_types.values().filter(|o| *o == &Some(OutFileName::Stdout)).count();\n+        let unnamed_types = output_types.values().filter(|o| o.is_none()).count();\n+        named_types > 1 || unnamed_types > 1 && single_output_file_is_stdout\n+    }\n+}\n+\n pub fn build_output_filenames(attrs: &[ast::Attribute], sess: &Session) -> OutputFilenames {\n+    if multiple_output_types_to_stdout(\n+        &sess.opts.output_types,\n+        sess.io.output_file == Some(OutFileName::Stdout),\n+    ) {\n+        sess.emit_fatal(errors::MultipleOutputTypesToStdout);\n+    }\n     match sess.io.output_file {\n         None => {\n             // \"-\" as input file will cause the parser to read from stdin so we\n@@ -544,7 +573,7 @@ pub fn build_output_filenames(attrs: &[ast::Attribute], sess: &Session) -> Outpu\n \n             OutputFilenames::new(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n-                out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n+                out_file.filestem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n                 sess.io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),"}, {"sha": "d6b08d840e38b15fbe11e93eec33be9f61b6e13f", "filename": "compiler/rustc_metadata/messages.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fmessages.ftl?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -4,6 +4,9 @@ metadata_as_needed_compatibility =\n metadata_bad_panic_strategy =\n     the linked panic runtime `{$runtime}` is not compiled with this crate's panic strategy `{$strategy}`\n \n+metadata_binary_output_to_tty =\n+    option `-o` or `--emit` is used to write binary output type `metadata` to stdout, but stdout is a tty\n+\n metadata_bundle_needs_static =\n     linking modifier `bundle` is only compatible with `static` linking kind\n \n@@ -63,6 +66,9 @@ metadata_fail_seek_file =\n metadata_fail_write_file =\n     failed to write to the file: {$err}\n \n+metadata_failed_copy_to_stdout =\n+    failed to copy {$filename} to stdout: {$err}\n+\n metadata_failed_create_encoded_metadata =\n     failed to create encoded metadata from file: {$err}\n \n@@ -72,6 +78,9 @@ metadata_failed_create_file =\n metadata_failed_create_tempdir =\n     couldn't create a temp dir: {$err}\n \n+metadata_failed_remove =\n+    failed to remove {$filename}: {$err}\n+\n metadata_failed_write_error =\n     failed to write {$filename}: {$err}\n "}, {"sha": "e110c68321d46dc3bb125463fea8bc47482f4616", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -395,6 +395,24 @@ pub struct FailedWriteError {\n     pub err: Error,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(metadata_failed_copy_to_stdout)]\n+pub struct FailedCopyToStdout {\n+    pub filename: PathBuf,\n+    pub err: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(metadata_failed_remove)]\n+pub struct FailedRemove {\n+    pub filename: PathBuf,\n+    pub err: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(metadata_binary_output_to_tty)]\n+pub struct BinaryOutputToTty;\n+\n #[derive(Diagnostic)]\n #[diag(metadata_missing_native_library)]\n pub struct MissingNativeLibrary<'a> {"}, {"sha": "5be99c8e4c0d81873272e192d037ce4445529e93", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -1,18 +1,19 @@\n use crate::errors::{\n-    FailedCreateEncodedMetadata, FailedCreateFile, FailedCreateTempdir, FailedWriteError,\n+    BinaryOutputToTty, FailedCopyToStdout, FailedCreateEncodedMetadata, FailedCreateFile,\n+    FailedCreateTempdir, FailedRemove, FailedWriteError,\n };\n use crate::{encode_metadata, EncodedMetadata};\n \n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::OutputType;\n+use rustc_session::config::{OutFileName, OutputType};\n use rustc_session::output::filename_for_metadata;\n use rustc_session::{MetadataKind, Session};\n use tempfile::Builder as TempFileBuilder;\n \n-use std::fs;\n use std::path::{Path, PathBuf};\n+use std::{fs, io};\n \n // FIXME(eddyb) maybe include the crate name in this?\n pub const METADATA_FILENAME: &str = \"lib.rmeta\";\n@@ -74,26 +75,47 @@ pub fn encode_and_write_metadata(tcx: TyCtxt<'_>) -> (EncodedMetadata, bool) {\n     // this file always exists.\n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n     let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n-        if let Err(err) = non_durable_rename(&metadata_filename, &out_filename) {\n-            tcx.sess.emit_fatal(FailedWriteError { filename: out_filename, err });\n-        }\n+        let filename = match out_filename {\n+            OutFileName::Real(ref path) => {\n+                if let Err(err) = non_durable_rename(&metadata_filename, path) {\n+                    tcx.sess.emit_fatal(FailedWriteError { filename: path.to_path_buf(), err });\n+                }\n+                path.clone()\n+            }\n+            OutFileName::Stdout => {\n+                if out_filename.is_tty() {\n+                    tcx.sess.emit_err(BinaryOutputToTty);\n+                } else if let Err(err) = copy_to_stdout(&metadata_filename) {\n+                    tcx.sess\n+                        .emit_err(FailedCopyToStdout { filename: metadata_filename.clone(), err });\n+                }\n+                metadata_filename\n+            }\n+        };\n         if tcx.sess.opts.json_artifact_notifications {\n             tcx.sess\n                 .parse_sess\n                 .span_diagnostic\n-                .emit_artifact_notification(&out_filename, \"metadata\");\n+                .emit_artifact_notification(&out_filename.as_path(), \"metadata\");\n         }\n-        (out_filename, None)\n+        (filename, None)\n     } else {\n         (metadata_filename, Some(metadata_tmpdir))\n     };\n \n     // Load metadata back to memory: codegen may need to include it in object files.\n-    let metadata =\n-        EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|err| {\n+    let metadata = EncodedMetadata::from_path(metadata_filename.clone(), metadata_tmpdir)\n+        .unwrap_or_else(|err| {\n             tcx.sess.emit_fatal(FailedCreateEncodedMetadata { err });\n         });\n \n+    // Delete the temporary metadata file if output is stdout\n+    if need_metadata_file && out_filename.is_stdout() {\n+        if let Err(err) = fs::remove_file(&metadata_filename) {\n+            tcx.sess.emit_err(FailedRemove { filename: metadata_filename, err });\n+        }\n+    }\n+\n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;\n \n     (metadata, need_metadata_module)\n@@ -116,3 +138,11 @@ pub fn non_durable_rename(src: &Path, dst: &Path) -> std::io::Result<()> {\n     let _ = std::fs::remove_file(dst);\n     std::fs::rename(src, dst)\n }\n+\n+pub fn copy_to_stdout(from: &Path) -> io::Result<()> {\n+    let file = fs::File::open(from)?;\n+    let mut reader = io::BufReader::new(file);\n+    let mut stdout = io::stdout();\n+    io::copy(&mut reader, &mut stdout)?;\n+    Ok(())\n+}"}, {"sha": "13841be494cf0447fdcbfca619e8d5a59ff2688f", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -7,7 +7,7 @@ use crate::MirPass;\n use rustc_middle::mir::write_mir_pretty;\n use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::OutputType;\n+use rustc_session::config::{OutFileName, OutputType};\n \n pub struct Marker(pub &'static str);\n \n@@ -20,8 +20,15 @@ impl<'tcx> MirPass<'tcx> for Marker {\n }\n \n pub fn emit_mir(tcx: TyCtxt<'_>) -> io::Result<()> {\n-    let path = tcx.output_filenames(()).path(OutputType::Mir);\n-    let mut f = io::BufWriter::new(File::create(&path)?);\n-    write_mir_pretty(tcx, None, &mut f)?;\n+    match tcx.output_filenames(()).path(OutputType::Mir) {\n+        OutFileName::Stdout => {\n+            let mut f = io::stdout();\n+            write_mir_pretty(tcx, None, &mut f)?;\n+        }\n+        OutFileName::Real(path) => {\n+            let mut f = io::BufWriter::new(File::create(&path)?);\n+            write_mir_pretty(tcx, None, &mut f)?;\n+        }\n+    }\n     Ok(())\n }"}, {"sha": "90ad3f90f2c3113f12a2cf6656a0ddd504d89396", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -4,6 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n+atty = \"0.2.13\"\n getopts = \"0.2\"\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\""}, {"sha": "b72a95639e65c32f3b5247758c04b5dd1fb56257", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 93, "deletions": 12, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -30,6 +30,7 @@ use std::collections::btree_map::{\n     Iter as BTreeMapIter, Keys as BTreeMapKeysIter, Values as BTreeMapValuesIter,\n };\n use std::collections::{BTreeMap, BTreeSet};\n+use std::ffi::OsStr;\n use std::fmt;\n use std::hash::Hash;\n use std::iter;\n@@ -333,7 +334,7 @@ impl OutputType {\n         }\n     }\n \n-    fn shorthand(&self) -> &'static str {\n+    pub fn shorthand(&self) -> &'static str {\n         match *self {\n             OutputType::Bitcode => \"llvm-bc\",\n             OutputType::Assembly => \"asm\",\n@@ -386,6 +387,18 @@ impl OutputType {\n             OutputType::Exe => \"\",\n         }\n     }\n+\n+    pub fn is_text_output(&self) -> bool {\n+        match *self {\n+            OutputType::Assembly\n+            | OutputType::LlvmAssembly\n+            | OutputType::Mir\n+            | OutputType::DepInfo => true,\n+            OutputType::Bitcode | OutputType::Object | OutputType::Metadata | OutputType::Exe => {\n+                false\n+            }\n+        }\n+    }\n }\n \n /// The type of diagnostics output to generate.\n@@ -438,26 +451,30 @@ pub enum ResolveDocLinks {\n /// dependency tracking for command-line arguments. Also only hash keys, since tracking\n /// should only depend on the output types, not the paths they're written to.\n #[derive(Clone, Debug, Hash, HashStable_Generic)]\n-pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n+pub struct OutputTypes(BTreeMap<OutputType, Option<OutFileName>>);\n \n impl OutputTypes {\n-    pub fn new(entries: &[(OutputType, Option<PathBuf>)]) -> OutputTypes {\n+    pub fn new(entries: &[(OutputType, Option<OutFileName>)]) -> OutputTypes {\n         OutputTypes(BTreeMap::from_iter(entries.iter().map(|&(k, ref v)| (k, v.clone()))))\n     }\n \n-    pub fn get(&self, key: &OutputType) -> Option<&Option<PathBuf>> {\n+    pub fn get(&self, key: &OutputType) -> Option<&Option<OutFileName>> {\n         self.0.get(key)\n     }\n \n     pub fn contains_key(&self, key: &OutputType) -> bool {\n         self.0.contains_key(key)\n     }\n \n-    pub fn keys(&self) -> BTreeMapKeysIter<'_, OutputType, Option<PathBuf>> {\n+    pub fn iter(&self) -> BTreeMapIter<'_, OutputType, Option<OutFileName>> {\n+        self.0.iter()\n+    }\n+\n+    pub fn keys(&self) -> BTreeMapKeysIter<'_, OutputType, Option<OutFileName>> {\n         self.0.keys()\n     }\n \n-    pub fn values(&self) -> BTreeMapValuesIter<'_, OutputType, Option<PathBuf>> {\n+    pub fn values(&self) -> BTreeMapValuesIter<'_, OutputType, Option<OutFileName>> {\n         self.0.values()\n     }\n \n@@ -658,11 +675,71 @@ impl Input {\n     }\n }\n \n+#[derive(Clone, Hash, Debug, HashStable_Generic, PartialEq)]\n+pub enum OutFileName {\n+    Real(PathBuf),\n+    Stdout,\n+}\n+\n+impl OutFileName {\n+    pub fn parent(&self) -> Option<&Path> {\n+        match *self {\n+            OutFileName::Real(ref path) => path.parent(),\n+            OutFileName::Stdout => None,\n+        }\n+    }\n+\n+    pub fn filestem(&self) -> Option<&OsStr> {\n+        match *self {\n+            OutFileName::Real(ref path) => path.file_stem(),\n+            OutFileName::Stdout => Some(OsStr::new(\"stdout\")),\n+        }\n+    }\n+\n+    pub fn is_stdout(&self) -> bool {\n+        match *self {\n+            OutFileName::Real(_) => false,\n+            OutFileName::Stdout => true,\n+        }\n+    }\n+\n+    pub fn is_tty(&self) -> bool {\n+        match *self {\n+            OutFileName::Real(_) => false,\n+            OutFileName::Stdout => atty::is(atty::Stream::Stdout),\n+        }\n+    }\n+\n+    pub fn as_path(&self) -> &Path {\n+        match *self {\n+            OutFileName::Real(ref path) => path.as_ref(),\n+            OutFileName::Stdout => &Path::new(\"stdout\"),\n+        }\n+    }\n+\n+    /// For a given output filename, return the actual name of the file that\n+    /// can be used to write codegen data of type `flavor`. For real-path\n+    /// output filenames, this would be trivial as we can just use the path.\n+    /// Otherwise for stdout, return a temporary path so that the codegen data\n+    /// may be later copied to stdout.\n+    pub fn file_for_writing(\n+        &self,\n+        outputs: &OutputFilenames,\n+        flavor: OutputType,\n+        codegen_unit_name: Option<&str>,\n+    ) -> PathBuf {\n+        match *self {\n+            OutFileName::Real(ref path) => path.clone(),\n+            OutFileName::Stdout => outputs.temp_path(flavor, codegen_unit_name),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Hash, Debug, HashStable_Generic)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     filestem: String,\n-    pub single_output_file: Option<PathBuf>,\n+    pub single_output_file: Option<OutFileName>,\n     pub temps_directory: Option<PathBuf>,\n     pub outputs: OutputTypes,\n }\n@@ -675,7 +752,7 @@ impl OutputFilenames {\n     pub fn new(\n         out_directory: PathBuf,\n         out_filestem: String,\n-        single_output_file: Option<PathBuf>,\n+        single_output_file: Option<OutFileName>,\n         temps_directory: Option<PathBuf>,\n         extra: String,\n         outputs: OutputTypes,\n@@ -689,12 +766,12 @@ impl OutputFilenames {\n         }\n     }\n \n-    pub fn path(&self, flavor: OutputType) -> PathBuf {\n+    pub fn path(&self, flavor: OutputType) -> OutFileName {\n         self.outputs\n             .get(&flavor)\n             .and_then(|p| p.to_owned())\n             .or_else(|| self.single_output_file.clone())\n-            .unwrap_or_else(|| self.output_path(flavor))\n+            .unwrap_or_else(|| OutFileName::Real(self.output_path(flavor)))\n     }\n \n     /// Gets the output path where a compilation artifact of the given type\n@@ -1821,7 +1898,10 @@ fn parse_output_types(\n             for output_type in list.split(',') {\n                 let (shorthand, path) = match output_type.split_once('=') {\n                     None => (output_type, None),\n-                    Some((shorthand, path)) => (shorthand, Some(PathBuf::from(path))),\n+                    Some((shorthand, \"-\")) => (shorthand, Some(OutFileName::Stdout)),\n+                    Some((shorthand, path)) => {\n+                        (shorthand, Some(OutFileName::Real(PathBuf::from(path))))\n+                    }\n                 };\n                 let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(|| {\n                     early_error(\n@@ -2892,7 +2972,7 @@ pub(crate) mod dep_tracking {\n     use super::{\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n         InstrumentCoverage, InstrumentXRay, LdImpl, LinkerPluginLto, LocationDetail, LtoCli,\n-        OomStrategy, OptLevel, OutputType, OutputTypes, Passes, ResolveDocLinks,\n+        OomStrategy, OptLevel, OutFileName, OutputType, OutputTypes, Passes, ResolveDocLinks,\n         SourceFileHashAlgorithm, SplitDwarfKind, SwitchWithOptPath, SymbolManglingVersion,\n         TraitSolver, TrimmedDefPaths,\n     };\n@@ -2990,6 +3070,7 @@ pub(crate) mod dep_tracking {\n         SourceFileHashAlgorithm,\n         TrimmedDefPaths,\n         Option<LdImpl>,\n+        OutFileName,\n         OutputType,\n         RealFileName,\n         LocationDetail,"}, {"sha": "2088744bc5bff620dd8fde86a36d3f1ba9605a12", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -1,5 +1,5 @@\n //! Related to out filenames of compilation (e.g. save analysis, binaries).\n-use crate::config::{CrateType, Input, OutputFilenames, OutputType};\n+use crate::config::{CrateType, Input, OutFileName, OutputFilenames, OutputType};\n use crate::errors::{\n     CrateNameDoesNotMatch, CrateNameEmpty, CrateNameInvalid, FileIsNotWriteable,\n     InvalidCharacterInCrateName,\n@@ -8,14 +8,14 @@ use crate::Session;\n use rustc_ast::{self as ast, attr};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n \n pub fn out_filename(\n     sess: &Session,\n     crate_type: CrateType,\n     outputs: &OutputFilenames,\n     crate_name: Symbol,\n-) -> PathBuf {\n+) -> OutFileName {\n     let default_filename = filename_for_input(sess, crate_type, crate_name, outputs);\n     let out_filename = outputs\n         .outputs\n@@ -24,7 +24,9 @@ pub fn out_filename(\n         .or_else(|| outputs.single_output_file.clone())\n         .unwrap_or(default_filename);\n \n-    check_file_is_writeable(&out_filename, sess);\n+    if let OutFileName::Real(ref path) = out_filename {\n+        check_file_is_writeable(path, sess);\n+    }\n \n     out_filename\n }\n@@ -112,20 +114,21 @@ pub fn filename_for_metadata(\n     sess: &Session,\n     crate_name: Symbol,\n     outputs: &OutputFilenames,\n-) -> PathBuf {\n+) -> OutFileName {\n     // If the command-line specified the path, use that directly.\n     if let Some(Some(out_filename)) = sess.opts.output_types.get(&OutputType::Metadata) {\n         return out_filename.clone();\n     }\n \n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n-    let out_filename = outputs\n-        .single_output_file\n-        .clone()\n-        .unwrap_or_else(|| outputs.out_directory.join(&format!(\"lib{libname}.rmeta\")));\n+    let out_filename = outputs.single_output_file.clone().unwrap_or_else(|| {\n+        OutFileName::Real(outputs.out_directory.join(&format!(\"lib{libname}.rmeta\")))\n+    });\n \n-    check_file_is_writeable(&out_filename, sess);\n+    if let OutFileName::Real(ref path) = out_filename {\n+        check_file_is_writeable(path, sess);\n+    }\n \n     out_filename\n }\n@@ -135,23 +138,33 @@ pub fn filename_for_input(\n     crate_type: CrateType,\n     crate_name: Symbol,\n     outputs: &OutputFilenames,\n-) -> PathBuf {\n+) -> OutFileName {\n     let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n \n     match crate_type {\n-        CrateType::Rlib => outputs.out_directory.join(&format!(\"lib{libname}.rlib\")),\n+        CrateType::Rlib => {\n+            OutFileName::Real(outputs.out_directory.join(&format!(\"lib{libname}.rlib\")))\n+        }\n         CrateType::Cdylib | CrateType::ProcMacro | CrateType::Dylib => {\n             let (prefix, suffix) = (&sess.target.dll_prefix, &sess.target.dll_suffix);\n-            outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\"))\n+            OutFileName::Real(outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\")))\n         }\n         CrateType::Staticlib => {\n             let (prefix, suffix) = (&sess.target.staticlib_prefix, &sess.target.staticlib_suffix);\n-            outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\"))\n+            OutFileName::Real(outputs.out_directory.join(&format!(\"{prefix}{libname}{suffix}\")))\n         }\n         CrateType::Executable => {\n             let suffix = &sess.target.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n-            if suffix.is_empty() { out_filename } else { out_filename.with_extension(&suffix[1..]) }\n+            if let OutFileName::Real(ref path) = out_filename {\n+                if suffix.is_empty() {\n+                    out_filename\n+                } else {\n+                    OutFileName::Real(path.with_extension(&suffix[1..]))\n+                }\n+            } else {\n+                out_filename\n+            }\n         }\n     }\n }"}, {"sha": "08e2f19e11b3348ab210852149dcff1c9586c47b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -2,7 +2,9 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use crate::config::Input;\n-use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n+use crate::config::{\n+    self, CrateType, InstrumentCoverage, OptLevel, OutFileName, OutputType, SwitchWithOptPath,\n+};\n use crate::errors;\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n@@ -135,7 +137,7 @@ pub struct Limits {\n pub struct CompilerIO {\n     pub input: Input,\n     pub output_dir: Option<PathBuf>,\n-    pub output_file: Option<PathBuf>,\n+    pub output_file: Option<OutFileName>,\n     pub temps_dir: Option<PathBuf>,\n }\n "}, {"sha": "2c15d1b11100c8016d816e037871a9c7c70dd3dd", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -202,6 +202,12 @@ flag](codegen-options/index.md#extra-filename). The files are written to the\n current directory unless the [`--out-dir` flag](#option-out-dir) is used. Each\n emission type may also specify the output filename with the form `KIND=PATH`,\n which takes precedence over the `-o` flag.\n+Specifying `-o -` or `--emit KIND=-` asks rustc to emit to stdout.\n+Text output types (`asm`, `dep-info`, `llvm-ir` and `mir`) can be written to\n+stdout despite it being a tty or not. This will result in an error if any\n+binary output type is written to stdout that is a tty.\n+This will also result in an error if multiple output types\n+would be written to stdout, because they would be all mixed together.\n \n [LLVM bitcode]: https://llvm.org/docs/BitCodeFormat.html\n [LLVM IR]: https://llvm.org/docs/LangRef.html"}, {"sha": "b971037ea67787409c50b7096852b96f4d6e2fdd", "filename": "tests/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -62,16 +62,24 @@ impl CodegenBackend for TheBackend {\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorGuaranteed> {\n-        use rustc_session::{config::CrateType, output::out_filename};\n+        use rustc_session::{config::{CrateType, OutFileName}, output::out_filename};\n         use std::io::Write;\n         let crate_name = codegen_results.crate_info.local_crate_name;\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(format!(\"Crate type is {:?}\", crate_type));\n             }\n             let output_name = out_filename(sess, crate_type, &outputs, crate_name);\n-            let mut out_file = ::std::fs::File::create(output_name).unwrap();\n-            write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n+            match output_name {\n+                OutFileName::Real(ref path) => {\n+                    let mut out_file = ::std::fs::File::create(path).unwrap();\n+                    write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n+                }\n+                OutFileName::Stdout => {\n+                    let mut stdout = std::io::stdout();\n+                    write!(stdout, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n+                }\n+            }\n         }\n         Ok(())\n     }"}, {"sha": "6d08cfd07f89eedeabf3126c1036ded5564400b6", "filename": "tests/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -6,7 +6,7 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_interface::interface;\n-use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n+use rustc_session::config::{Input, Options, OutFileName, OutputType, OutputTypes};\n use rustc_span::source_map::FileName;\n \n use std::path::PathBuf;\n@@ -50,7 +50,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         crate_cfg: Default::default(),\n         crate_check_cfg: Default::default(),\n         input,\n-        output_file: Some(output),\n+        output_file: Some(OutFileName::Real(output)),\n         output_dir: None,\n         file_loader: None,\n         locale_resources: &[],"}, {"sha": "b7455965cffa277ba6162cbfd055eddbf459919e", "filename": "tests/run-make/emit-to-stdout/Makefile", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2FMakefile?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,51 @@\n+include ../tools.mk\n+\n+SRC=test.rs\n+OUT=$(TMPDIR)/out\n+\n+all: asm llvm-ir dep-info mir llvm-bc obj metadata link multiple-types multiple-types-option-o\n+\n+asm: $(OUT)\n+\t$(RUSTC) --emit asm=$(OUT)/$@ $(SRC)\n+\t$(RUSTC) --emit asm=- $(SRC) | diff - $(OUT)/$@\n+llvm-ir: $(OUT)\n+\t$(RUSTC) --emit llvm-ir=$(OUT)/$@ $(SRC)\n+\t$(RUSTC) --emit llvm-ir=- $(SRC) | diff - $(OUT)/$@\n+dep-info: $(OUT)\n+\t$(RUSTC) -Z dep-info-omit-d-target=yes --emit dep-info=$(OUT)/$@ $(SRC)\n+\t$(RUSTC) --emit dep-info=- $(SRC) | diff - $(OUT)/$@\n+mir: $(OUT)\n+\t$(RUSTC) --emit mir=$(OUT)/$@ $(SRC)\n+\t$(RUSTC) --emit mir=- $(SRC) | diff - $(OUT)/$@\n+\n+llvm-bc: $(OUT)\n+\t$(RUSTC) --emit llvm-bc=- $(SRC) 1>/dev/ptmx 2>$(OUT)/$@ || true\n+\tdiff $(OUT)/$@ emit-llvm-bc.stderr\n+obj: $(OUT)\n+\t$(RUSTC) --emit obj=- $(SRC) 1>/dev/ptmx 2>$(OUT)/$@ || true\n+\tdiff $(OUT)/$@ emit-obj.stderr\n+\n+# For metadata output, a temporary directory will be created to hold the temporary\n+# metadata file. But when output is stdout, the temporary directory will be located\n+# in the same place as $(SRC), which is mounted as read-only in the tests. Thus as\n+# a workaround, $(SRC) is copied to the test output directory $(OUT) and we compile\n+# it there.\n+metadata: $(OUT)\n+\tcp $(SRC) $(OUT)\n+\t(cd $(OUT); pwd; ls -d; $(RUSTC) --emit metadata=- $(SRC) 1>/dev/ptmx 2>$(OUT)/$@ || true)\n+\tdiff $(OUT)/$@ emit-metadata.stderr\n+\n+link: $(OUT)\n+\t$(RUSTC) --emit link=- $(SRC) 1>/dev/ptmx 2>$(OUT)/$@ || true\n+\tdiff $(OUT)/$@ emit-link.stderr\n+\n+multiple-types: $(OUT)\n+\t$(RUSTC) --emit asm=- --emit llvm-ir=- --emit dep-info=- --emit mir=- $(SRC) 2>$(OUT)/$@ || true\n+\tdiff $(OUT)/$@ emit-multiple-types.stderr\n+\n+multiple-types-option-o: $(OUT)\n+\t$(RUSTC) -o - --emit asm,llvm-ir,dep-info,mir $(SRC) 2>$(OUT)/$@ || true\n+\tdiff $(OUT)/$@ emit-multiple-types.stderr\n+\n+$(OUT):\n+\tmkdir -p $(OUT)"}, {"sha": "a9d856503e6290242aa8c57268d54289c185f670", "filename": "tests/run-make/emit-to-stdout/emit-link.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-link.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-link.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Femit-link.stderr?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,4 @@\n+error: option `-o` or `--emit` is used to write binary output type `link` to stdout, but stdout is a tty\n+\n+error: aborting due to previous error\n+"}, {"sha": "7b53bd16e7a54f7780012e238c2c5e27eeefde63", "filename": "tests/run-make/emit-to-stdout/emit-llvm-bc.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-llvm-bc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-llvm-bc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Femit-llvm-bc.stderr?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,4 @@\n+error: option `-o` or `--emit` is used to write binary output type `llvm-bc` to stdout, but stdout is a tty\n+\n+error: aborting due to previous error\n+"}, {"sha": "ee1e52937b9871ebc88382dcc9f348971f60057e", "filename": "tests/run-make/emit-to-stdout/emit-metadata.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Femit-metadata.stderr?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,4 @@\n+error: option `-o` or `--emit` is used to write binary output type `metadata` to stdout, but stdout is a tty\n+\n+error: aborting due to previous error\n+"}, {"sha": "b8a683cd9ebe63fd962d3b2f56694e33cf6f421f", "filename": "tests/run-make/emit-to-stdout/emit-multiple-types.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-multiple-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-multiple-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Femit-multiple-types.stderr?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,4 @@\n+error: can't use option `-o` or `--emit` to write multiple output types to stdout\n+\n+error: aborting due to previous error\n+"}, {"sha": "b1303530844155f0d05b5277d1b4ef0dd6a9491e", "filename": "tests/run-make/emit-to-stdout/emit-obj.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Femit-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Femit-obj.stderr?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1,4 @@\n+error: option `-o` or `--emit` is used to write binary output type `obj` to stdout, but stdout is a tty\n+\n+error: aborting due to previous error\n+"}, {"sha": "c1bfaa6cab5d9be9e67e4cfacc8eb4e6110f6358", "filename": "tests/run-make/emit-to-stdout/test.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280/tests%2Frun-make%2Femit-to-stdout%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Femit-to-stdout%2Ftest.rs?ref=9b1a1e1d95d1e40bdf57ef9d37ccbac91fc9c280", "patch": "@@ -0,0 +1 @@\n+#![crate_type = \"rlib\"]"}]}