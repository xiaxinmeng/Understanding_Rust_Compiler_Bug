{"sha": "5f5758888762aa1f70355d3440ef0f0e58f80cb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTc1ODg4ODc2MmFhMWY3MDM1NWQzNDQwZWYwZjBlNThmODBjYjg=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T00:50:21Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T00:50:36Z"}, "message": "Update the rock-paper-scissors example in the tutorial, and rename some types in core::pipes", "tree": {"sha": "25286fb6f3b6213d15b78c1f849a317c52a38142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25286fb6f3b6213d15b78c1f849a317c52a38142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5758888762aa1f70355d3440ef0f0e58f80cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5758888762aa1f70355d3440ef0f0e58f80cb8", "html_url": "https://github.com/rust-lang/rust/commit/5f5758888762aa1f70355d3440ef0f0e58f80cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5758888762aa1f70355d3440ef0f0e58f80cb8/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b592d5731186d6df6eb1494b37e069f9aff34eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b592d5731186d6df6eb1494b37e069f9aff34eaf", "html_url": "https://github.com/rust-lang/rust/commit/b592d5731186d6df6eb1494b37e069f9aff34eaf"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "df1573fc494b1c694b572627dbead20cb09776cc", "filename": "doc/tutorial.md", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -74,7 +74,7 @@ Here's a parallel game of rock, paper, scissors to whet your appetite.\n ~~~~\n use std;\n \n-import comm::listen;\n+import pipes::PortSet;\n import task::spawn;\n import iter::repeat;\n import rand::{seeded_rng, seed};\n@@ -83,25 +83,24 @@ import io::println;\n \n fn main() {\n     // Open a channel to receive game results\n-    do listen |result_from_game| {\n-\n-        let times = 10;\n-        let player1 = ~\"graydon\";\n-        let player2 = ~\"patrick\";\n-\n-        for repeat(times) {\n-            // Start another task to play the game\n-            do spawn |copy player1, copy player2| {\n-                let outcome = play_game(player1, player2);\n-                result_from_game.send(outcome);\n-            }\n+    let result_from_game = PortSet();\n+    let times = 10;\n+    let player1 = ~\"graydon\";\n+    let player2 = ~\"patrick\";\n+\n+    for repeat(times) {\n+        // Start another task to play the game\n+        let result = result_from_game.chan();\n+        do spawn |copy player1, copy player2| {\n+            let outcome = play_game(player1, player2);\n+            result.send(outcome);\n         }\n+    }\n \n-        // Report the results as the games complete\n-        for range(0, times) |round| {\n-            let winner = result_from_game.recv();\n-            println(#fmt(\"%s wins round #%u\", winner, round));\n-        }\n+    // Report the results as the games complete\n+    for range(0, times) |round| {\n+        let winner = result_from_game.recv();\n+        println(#fmt(\"%s wins round #%u\", winner, round));\n     }\n \n     fn play_game(player1: ~str, player2: ~str) -> ~str {"}, {"sha": "bd9f8f4385f5b0589c0d4b0e0aac22858510bc25", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -60,7 +60,7 @@ fn run(lib_path: ~str,\n \n \n     writeclose(pipe_in.out, input);\n-    let p = pipes::port_set();\n+    let p = pipes::PortSet();\n     let ch = p.chan();\n     do task::spawn_sched(task::SingleThreaded) {\n         let errput = readclose(pipe_err.in);"}, {"sha": "c440660990c420c462d9e3bb097f7dc957a71c39", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -93,7 +93,7 @@ export atomic_add_acq, atomic_sub_rel;\n export send_packet, recv_packet, send, recv, try_recv, peek;\n export select, select2, selecti, select2i, selectable;\n export spawn_service, spawn_service_recv;\n-export stream, port, chan, shared_chan, port_set, channel;\n+export stream, port, chan, SharedChan, PortSet, channel;\n export oneshot, chan_one, port_one;\n export recv_one, try_recv_one, send_one, try_send_one;\n \n@@ -1020,8 +1020,8 @@ impl<T: send> port<T>: recv<T> {\n     }\n }\n \n-// Treat a whole bunch of ports as one.\n-struct port_set<T: send> : recv<T> {\n+/// Treat many ports as one.\n+struct PortSet<T: send> : recv<T> {\n     let mut ports: ~[pipes::port<T>];\n \n     new() { self.ports = ~[]; }\n@@ -1096,9 +1096,9 @@ impl<T: send> port<T>: selectable {\n }\n \n /// A channel that can be shared between many senders.\n-type shared_chan<T: send> = unsafe::Exclusive<chan<T>>;\n+type SharedChan<T: send> = unsafe::Exclusive<chan<T>>;\n \n-impl<T: send> shared_chan<T>: channel<T> {\n+impl<T: send> SharedChan<T>: channel<T> {\n     fn send(+x: T) {\n         let mut xx = some(x);\n         do self.with |chan| {\n@@ -1119,7 +1119,7 @@ impl<T: send> shared_chan<T>: channel<T> {\n }\n \n /// Converts a `chan` into a `shared_chan`.\n-fn shared_chan<T:send>(+c: chan<T>) -> shared_chan<T> {\n+fn SharedChan<T:send>(+c: chan<T>) -> SharedChan<T> {\n     unsafe::exclusive(c)\n }\n "}, {"sha": "51ee4a5178b1a80e9cc812fa570bdb602ae2ee0b", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -423,7 +423,7 @@ mod tests {\n         let (c, p) = pipes::stream();\n \n         do task::spawn() {\n-            let p = pipes::port_set();\n+            let p = pipes::PortSet();\n             c.send(p.chan());\n \n             let arc_v = p.recv();"}, {"sha": "26741f6298fe45ca93877a2a5a1cfd93ea83e7ae", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -14,7 +14,7 @@ use std;\n import io::Writer;\n import io::WriterUtil;\n \n-import pipes::{port, chan, shared_chan};\n+import pipes::{port, chan, SharedChan};\n \n macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n@@ -48,7 +48,7 @@ fn run(args: &[~str]) {\n     let (to_parent, from_child) = pipes::stream();\n     let (to_child, from_parent) = pipes::stream();\n \n-    let to_child = shared_chan(to_child);\n+    let to_child = SharedChan(to_child);\n \n     let size = option::get(uint::from_str(args[1]));\n     let workers = option::get(uint::from_str(args[2]));"}, {"sha": "fc0413827211eceb5feb03df8ecd2ed80576c527", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -10,7 +10,7 @@ use std;\n import io::Writer;\n import io::WriterUtil;\n \n-import pipes::{port, port_set, chan};\n+import pipes::{port, PortSet, chan};\n \n macro_rules! move_out {\n     { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n@@ -22,7 +22,7 @@ enum request {\n     stop\n }\n \n-fn server(requests: port_set<request>, responses: pipes::chan<uint>) {\n+fn server(requests: PortSet<request>, responses: pipes::chan<uint>) {\n     let mut count = 0u;\n     let mut done = false;\n     while !done {\n@@ -43,7 +43,7 @@ fn server(requests: port_set<request>, responses: pipes::chan<uint>) {\n fn run(args: &[~str]) {\n     let (to_parent, from_child) = pipes::stream();\n     let (to_child, from_parent_) = pipes::stream();\n-    let from_parent = port_set();\n+    let from_parent = PortSet();\n     from_parent.add(from_parent_);\n \n     let size = option::get(uint::from_str(args[1]));"}, {"sha": "225f3d98c0e2180065fec68a640244d4e104b18d", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -30,7 +30,7 @@ fn fib(n: int) -> int {\n         } else if n <= 2 {\n             c.send(1);\n         } else {\n-            let p = pipes::port_set();\n+            let p = pipes::PortSet();\n             let ch = p.chan();\n             task::spawn(|| pfib(ch, n - 1) );\n             let ch = p.chan();"}, {"sha": "0b7e939ce313884e7ac11daa3451c40d753f3165", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -1,7 +1,7 @@\n import task;\n \n fn main() {\n-    let po = pipes::port_set();\n+    let po = pipes::PortSet();\n \n     // Spawn 10 tasks each sending us back one int.\n     let mut i = 10;"}, {"sha": "1c116787eafcda03aecebe1688bea41a6c4061f3", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -24,7 +24,7 @@ fn test00() {\n \n     debug!{\"Creating tasks\"};\n \n-    let po = pipes::port_set();\n+    let po = pipes::PortSet();\n \n     let mut i: int = 0;\n "}, {"sha": "1be9fc34833cb434ae21d7bb31ca828d93df0dc2", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -9,7 +9,7 @@ fn main() { test00(); }\n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = pipes::port_set();\n+    let p = pipes::PortSet();\n     let c0 = p.chan();\n     let c1 = p.chan();\n     let c2 = p.chan();"}, {"sha": "3963152257b8f16af991e26e49cf4c538129b3b6", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -11,7 +11,7 @@ fn test00_start(c: pipes::chan<int>, start: int, number_of_messages: int) {\n fn test00() {\n     let mut r: int = 0;\n     let mut sum: int = 0;\n-    let p = pipes::port_set();\n+    let p = pipes::PortSet();\n     let number_of_messages: int = 10;\n \n     let c = p.chan();"}, {"sha": "4e864865a0b3c8c29df40f0a22dc8bbc1ee25fdb", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5758888762aa1f70355d3440ef0f0e58f80cb8/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=5f5758888762aa1f70355d3440ef0f0e58f80cb8", "patch": "@@ -11,7 +11,7 @@ fn test00_start(c: pipes::chan<int>, number_of_messages: int) {\n fn test00() {\n     let r: int = 0;\n     let mut sum: int = 0;\n-    let p = pipes::port_set();\n+    let p = pipes::PortSet();\n     let number_of_messages: int = 10;\n     let ch = p.chan();\n "}]}