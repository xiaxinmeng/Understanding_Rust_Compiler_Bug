{"sha": "5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTNhMmYzNTRhZjczM2NlZjAwYTVhMGRkNTY2OGJjZjNkZDhiMjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T03:10:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-25T03:10:58Z"}, "message": "enhance check_pat_lit with TopInfo", "tree": {"sha": "72f5ee3b824dbb00d793b4b28a7c7080337c811b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f5ee3b824dbb00d793b4b28a7c7080337c811b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "html_url": "https://github.com/rust-lang/rust/commit/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6e0e8b9442b0e930aed950bac4f3d151d295ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6e0e8b9442b0e930aed950bac4f3d151d295ae", "html_url": "https://github.com/rust-lang/rust/commit/9b6e0e8b9442b0e930aed950bac4f3d151d295ae"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "7ed6cbf93dab252113c302aecfbec35a9ba8a465", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "patch": "@@ -43,7 +43,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n-        let cause = &self.misc(sp);\n+        self.demand_suptype_with_origin(&self.misc(sp), expected, actual)\n+    }\n+\n+    pub fn demand_suptype_with_origin(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        expected: Ty<'tcx>,\n+        actual: Ty<'tcx>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n         match self.at(cause, self.param_env).sup(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n                 self.register_predicates(obligations);"}, {"sha": "a4312e41ee87007cb20b65d5de18a3ca9d5eaf29", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::traits::Pattern;\n+use rustc_infer::traits::{ObligationCause, Pattern};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n use syntax::ast;\n@@ -66,16 +66,19 @@ struct TopInfo<'tcx> {\n }\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n+    fn pattern_cause(&self, ti: TopInfo<'tcx>, cause_span: Span) -> ObligationCause<'tcx> {\n+        let code = Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr };\n+        self.cause(cause_span, code)\n+    }\n+\n     fn demand_eqtype_pat_diag(\n         &self,\n         cause_span: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n-        let code = Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr };\n-        let cause = self.cause(cause_span, code);\n-        self.demand_eqtype_with_origin(&cause, expected, actual)\n+        self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)\n     }\n \n     fn demand_eqtype_pat(\n@@ -379,7 +382,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         //     &'static str <: expected\n         //\n         // then that's equivalent to there existing a LUB.\n-        if let Some(mut err) = self.demand_suptype_diag(span, expected, pat_ty) {\n+        let cause = self.pattern_cause(ti, span);\n+        if let Some(mut err) = self.demand_suptype_with_origin(&cause, expected, pat_ty) {\n             err.emit_unless(\n                 ti.span\n                     .filter(|&s| {"}, {"sha": "5078f03d6017a02adaf92d8eb27d2202f67ea45f", "filename": "src/test/ui/match/match-ill-type2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ill-type2.stderr?ref=5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/match-ill-type2.rs:4:9\n    |\n+LL |     match 1i32 {\n+   |           ---- this expression has type `i32`\n+LL |         1i32 => 1,\n LL |         2u32 => 1,\n    |         ^^^^ expected `i32`, found `u32`\n "}, {"sha": "6d18a39606ccf04362eff220d28c3fabb1ffddc8", "filename": "src/test/ui/rfc-2005-default-binding-mode/lit.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Flit.stderr?ref=5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/lit.rs:7:13\n    |\n+LL |     match &s {\n+   |           -- this expression has type `&&str`\n LL |             \"abc\" => true,\n    |             ^^^^^ expected `&str`, found `str`\n    |\n@@ -10,6 +12,8 @@ LL |             \"abc\" => true,\n error[E0308]: mismatched types\n   --> $DIR/lit.rs:16:9\n    |\n+LL |     match &s {\n+   |           -- this expression has type `&&[u8]`\n LL |         b\"abc\" => true,\n    |         ^^^^^^ expected `&[u8]`, found array `[u8; 3]`\n    |"}, {"sha": "14f01f0ebdf7386055fcdec842f0ddce5d53b26c", "filename": "src/test/ui/slightly-nice-generic-literal-messages.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da3a2f354af733cef00a5a0dd5668bcf3dd8b26/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr?ref=5da3a2f354af733cef00a5a0dd5668bcf3dd8b26", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/slightly-nice-generic-literal-messages.rs:7:9\n    |\n+LL |     match Foo(1.1, marker::PhantomData) {\n+   |           ----------------------------- this expression has type `Foo<{float}, _>`\n LL |         1 => {}\n    |         ^ expected struct `Foo`, found integer\n    |"}]}