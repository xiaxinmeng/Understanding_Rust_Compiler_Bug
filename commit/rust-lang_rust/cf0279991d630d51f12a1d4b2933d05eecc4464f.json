{"sha": "cf0279991d630d51f12a1d4b2933d05eecc4464f", "node_id": "C_kwDOAAsO6NoAKGNmMDI3OTk5MWQ2MzBkNTFmMTJhMWQ0YjI5MzNkMDVlZWNjNDQ2NGY", "commit": {"author": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2023-02-04T17:52:27Z"}, "committer": {"name": "CastilloDel", "email": "delcastillodelarosadaniel@gmail.com", "date": "2023-02-04T18:04:04Z"}, "message": "Fix suggestions rendering when the span is multiline", "tree": {"sha": "d0c55f9ef8193feceedd51c814ff7acee3fd7112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c55f9ef8193feceedd51c814ff7acee3fd7112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0279991d630d51f12a1d4b2933d05eecc4464f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0279991d630d51f12a1d4b2933d05eecc4464f", "html_url": "https://github.com/rust-lang/rust/commit/cf0279991d630d51f12a1d4b2933d05eecc4464f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0279991d630d51f12a1d4b2933d05eecc4464f/comments", "author": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CastilloDel", "id": 52696601, "node_id": "MDQ6VXNlcjUyNjk2NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/52696601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CastilloDel", "html_url": "https://github.com/CastilloDel", "followers_url": "https://api.github.com/users/CastilloDel/followers", "following_url": "https://api.github.com/users/CastilloDel/following{/other_user}", "gists_url": "https://api.github.com/users/CastilloDel/gists{/gist_id}", "starred_url": "https://api.github.com/users/CastilloDel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CastilloDel/subscriptions", "organizations_url": "https://api.github.com/users/CastilloDel/orgs", "repos_url": "https://api.github.com/users/CastilloDel/repos", "events_url": "https://api.github.com/users/CastilloDel/events{/privacy}", "received_events_url": "https://api.github.com/users/CastilloDel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1", "html_url": "https://github.com/rust-lang/rust/commit/4aa6afa7f8a418a7dae5dbe4c95371d4f3bcc0e1"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "61e1155a79f70bc65539fc3b5715e1a78212ee47", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cf0279991d630d51f12a1d4b2933d05eecc4464f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0279991d630d51f12a1d4b2933d05eecc4464f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=cf0279991d630d51f12a1d4b2933d05eecc4464f", "patch": "@@ -2175,30 +2175,69 @@ impl EmitterWriter {\n         file_lines: &FileLines,\n         is_multiline: bool,\n     ) {\n-        // Print the span column to avoid confusion\n-        buffer.puts(*row_num, 0, &self.maybe_anonymized(line_start + line_pos), Style::LineNumber);\n         if let DisplaySuggestion::Diff = show_code_change {\n             // Add the line number for both addition and removal to drive the point home.\n             //\n             // N - fn foo<A: T>(bar: A) {\n             // N + fn foo(bar: impl T) {\n+            let number_of_lines = file_lines.lines.len();\n+            for (index, line_to_remove) in\n+                file_lines.lines.iter().take(number_of_lines - 1).enumerate()\n+            {\n+                buffer.puts(\n+                    *row_num - 1,\n+                    0,\n+                    &self.maybe_anonymized(line_start + line_pos + index),\n+                    Style::LineNumber,\n+                );\n+                buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+                buffer.puts(\n+                    *row_num - 1,\n+                    max_line_num_len + 3,\n+                    &normalize_whitespace(\n+                        &file_lines.file.get_line(line_to_remove.line_index).unwrap(),\n+                    ),\n+                    Style::NoStyle,\n+                );\n+                *row_num += 1;\n+            }\n+            let last_line = &file_lines\n+                .file\n+                .get_line(file_lines.lines[number_of_lines - 1].line_index)\n+                .unwrap();\n+            if last_line != line {\n+                buffer.puts(\n+                    *row_num - 1,\n+                    0,\n+                    &self.maybe_anonymized(line_start + line_pos + number_of_lines - 1),\n+                    Style::LineNumber,\n+                );\n+                buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n+                buffer.puts(\n+                    *row_num - 1,\n+                    max_line_num_len + 3,\n+                    &normalize_whitespace(last_line),\n+                    Style::NoStyle,\n+                );\n+                buffer.puts(\n+                    *row_num,\n+                    0,\n+                    &self.maybe_anonymized(line_start + line_pos),\n+                    Style::LineNumber,\n+                );\n+                buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+                // print the suggestion\n+                buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n+            } else {\n+                *row_num -= 2;\n+            }\n+        } else if is_multiline {\n             buffer.puts(\n-                *row_num - 1,\n+                *row_num,\n                 0,\n                 &self.maybe_anonymized(line_start + line_pos),\n                 Style::LineNumber,\n             );\n-            buffer.puts(*row_num - 1, max_line_num_len + 1, \"- \", Style::Removal);\n-            buffer.puts(\n-                *row_num - 1,\n-                max_line_num_len + 3,\n-                &normalize_whitespace(\n-                    &file_lines.file.get_line(file_lines.lines[line_pos].line_index).unwrap(),\n-                ),\n-                Style::NoStyle,\n-            );\n-            buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n-        } else if is_multiline {\n             match &highlight_parts[..] {\n                 [SubstitutionHighlight { start: 0, end }] if *end == line.len() => {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n@@ -2210,13 +2249,20 @@ impl EmitterWriter {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"~ \", Style::Addition);\n                 }\n             }\n+            // print the suggestion\n+            buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n         } else {\n+            buffer.puts(\n+                *row_num,\n+                0,\n+                &self.maybe_anonymized(line_start + line_pos),\n+                Style::LineNumber,\n+            );\n             draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n+            // print the suggestion\n+            buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n         }\n \n-        // print the suggestion\n-        buffer.append(*row_num, &normalize_whitespace(line), Style::NoStyle);\n-\n         // Colorize addition/replacements with green.\n         for &SubstitutionHighlight { start, end } in highlight_parts {\n             // Account for tabs when highlighting (#87972)."}]}