{"sha": "eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOGZkMTk3YWIxNzQzMDZkZTk2ZjhmMWM4YmM3MDE5YzRiNWNjZGE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T16:44:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-20T16:44:49Z"}, "message": "Prelude cleanup", "tree": {"sha": "0f24819d6021cf7060def0da581825efbc9cb0fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f24819d6021cf7060def0da581825efbc9cb0fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "html_url": "https://github.com/rust-lang/rust/commit/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431cebdca1a0d74a7252d22f2cfa220325c05b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/431cebdca1a0d74a7252d22f2cfa220325c05b21", "html_url": "https://github.com/rust-lang/rust/commit/431cebdca1a0d74a7252d22f2cfa220325c05b21"}], "stats": {"total": 73, "additions": 27, "deletions": 46}, "files": [{"sha": "4e9ab4e7a0506bec2fba568c786ddc2ad0909aca", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -169,7 +169,7 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n     let fn_sig =\n         tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_sig_for_fn_abi(tcx, inst));\n     if fn_sig.c_variadic && !support_vararg {\n-        unimpl_fatal!(tcx, tcx.def_span(inst.def_id()), \"Variadic function definitions are not yet supported\");\n+        tcx.sess.span_fatal(tcx.def_span(inst.def_id()), \"Variadic function definitions are not yet supported\");\n     }\n     let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false, inst.def.requires_caller_location(tcx));\n     (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n@@ -601,7 +601,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n         if fn_sig.abi != Abi::C {\n-            unimpl_fatal!(fx.tcx, span, \"Variadic call for non-C abi {:?}\", fn_sig.abi);\n+            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args\n@@ -610,7 +610,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 let ty = fx.bcx.func.dfg.value_type(arg);\n                 if !ty.is_int() {\n                     // FIXME set %al to upperbound on float args once floats are supported\n-                    unimpl_fatal!(fx.tcx, span, \"Non int ty {:?} for variadic call\", ty);\n+                    fx.tcx.sess.span_fatal(span, &format!(\"Non int ty {:?} for variadic call\", ty));\n                 }\n                 AbiParam::new(ty)\n             })"}, {"sha": "f4685d3d9e16659b33a2605e0080b0275a1a8230", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -1,8 +1,7 @@\n use std::fs::File;\n use std::path::{Path, PathBuf};\n \n-use crate::prelude::*;\n-\n+use rustc_session::Session;\n use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::METADATA_FILENAME;\n "}, {"sha": "54aa409de1166d1985e0e0a166e8044593c5d4d5", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -134,12 +134,12 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n \n pub(crate) fn verify_func(tcx: TyCtxt<'_>, writer: &crate::pretty_clif::CommentWriter, func: &Function) {\n     tcx.sess.time(\"verify clif ir\", || {\n-        let flags = settings::Flags::new(settings::builder());\n-        match ::cranelift_codegen::verify_function(&func, &flags) {\n+        let flags = cranelift_codegen::settings::Flags::new(cranelift_codegen::settings::builder());\n+        match cranelift_codegen::verify_function(&func, &flags) {\n             Ok(_) => {}\n             Err(err) => {\n                 tcx.sess.err(&format!(\"{:?}\", err));\n-                let pretty_error = ::cranelift_codegen::print_errors::pretty_verifier_error(\n+                let pretty_error = cranelift_codegen::print_errors::pretty_verifier_error(\n                     &func,\n                     None,\n                     Some(Box::new(writer)),\n@@ -323,7 +323,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n \n                         // Black box\n                     }\n-                    _ => unimpl_fatal!(fx.tcx, bb_data.terminator().source_info.span, \"Inline assembly is not supported\"),\n+                    _ => fx.tcx.sess.span_fatal(bb_data.terminator().source_info.span, \"Inline assembly is not supported\"),\n                 }\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n@@ -363,7 +363,7 @@ fn trans_stmt<'tcx>(\n     cur_block: Block,\n     stmt: &Statement<'tcx>,\n ) {\n-    let _print_guard = PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n+    let _print_guard = crate::PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n \n     fx.set_debug_loc(stmt.source_info);\n \n@@ -691,7 +691,7 @@ fn trans_stmt<'tcx>(\n                 \"int $$0x29\" => {\n                     crate::trap::trap_unimplemented(fx, \"Windows abort\");\n                 }\n-                _ => unimpl_fatal!(fx.tcx, stmt.source_info.span, \"Inline assembly is not supported\"),\n+                _ => fx.tcx.sess.span_fatal(stmt.source_info.span, \"Inline assembly is not supported\"),\n             }\n         }\n     }"}, {"sha": "ec58a7d3d29e1e6d9e1160b69eed707f8c3f9b96", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -302,16 +302,6 @@ impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n     }\n }\n \n-impl<'tcx, B: Backend> BackendTypes for FunctionCx<'_, 'tcx, B> {\n-    type Value = Value;\n-    type Function = Value;\n-    type BasicBlock = Block;\n-    type Type = Type;\n-    type Funclet = !;\n-    type DIScope = !;\n-    type DIVariable = !;\n-}\n-\n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     pub(crate) fn monomorphize<T>(&self, value: &T) -> T\n     where"}, {"sha": "9b05a146020e915260b452dfcde17097f5ce6c66", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::mono::CodegenUnit;\n use rustc_session::config::{DebugInfo, OutputType};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n-use rustc_codegen_ssa::CrateInfo;\n+use rustc_codegen_ssa::{CrateInfo, CodegenResults, CompiledModule, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n use crate::prelude::*;\n@@ -110,7 +110,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n \n     let module = new_module(tcx, cgu_name.as_str().to_string());\n \n-    let mut cx = CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n+    let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n     super::codegen_mono_items(&mut cx, mono_items);\n     let (mut module, debug, mut unwind_context) = tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module, &mut unwind_context);"}, {"sha": "93535cd16def6e2847fe26749304493a744ad1d7", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -52,7 +52,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = CodegenCx::new(tcx, jit_module, false);\n+    let mut cx = crate::CodegenCx::new(tcx, jit_module, false);\n \n     let (mut jit_module, _debug, mut unwind_context) = super::time(tcx, \"codegen mono items\", || {\n         super::codegen_mono_items(&mut cx, mono_items);"}, {"sha": "d75b6e05f320663db0fb39753ee6f8f74b41fc17", "filename": "src/driver/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn codegen_crate(\n }\n \n fn codegen_mono_items<'tcx>(\n-    cx: &mut CodegenCx<'tcx, impl Backend + 'static>,\n+    cx: &mut crate::CodegenCx<'tcx, impl Backend + 'static>,\n     mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n@@ -62,9 +62,9 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n     match mono_item {\n         MonoItem::Fn(inst) => {\n             let _inst_guard =\n-                PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name.as_str()));\n+                crate::PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name.as_str()));\n             debug_assert!(!inst.substs.needs_infer());\n-            let _mir_guard = PrintOnPanic(|| {\n+            let _mir_guard = crate::PrintOnPanic(|| {\n                 match inst.def {\n                     InstanceDef::Item(_)\n                     | InstanceDef::DropGlue(_, _)"}, {"sha": "32447b7a92587cda5b80b038991522b5f1010039", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -452,7 +452,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     intrinsic_match! {\n         fx, intrinsic, substs, args,\n         _ => {\n-            unimpl_fatal!(fx.tcx, span, \"unsupported intrinsic {}\", intrinsic);\n+            fx.tcx.sess.span_fatal(span, &format!(\"unsupported intrinsic {}\", intrinsic));\n         };\n \n         assume, (c _a) {};"}, {"sha": "3a96184ad75e8c91a5129f344f0faaa229335fa6", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8fd197ab174306de96f8f1c8bc7019c4b5ccda/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=eb8fd197ab174306de96f8f1c8bc7019c4b5ccda", "patch": "@@ -29,11 +29,13 @@ use std::any::Any;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::{DepGraph, WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc_session::Session;\n use rustc_session::config::OutputFilenames;\n use rustc_middle::ty::query::Providers;\n+use rustc_codegen_ssa::CodegenResults;\n use rustc_codegen_ssa::traits::CodegenBackend;\n \n-use cranelift_codegen::settings;\n+use cranelift_codegen::settings::{self, Configurable};\n \n use crate::constant::ConstantCx;\n use crate::prelude::*;\n@@ -75,7 +77,6 @@ mod prelude {\n     pub(crate) use rustc_middle::bug;\n     pub(crate) use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n     pub(crate) use rustc_middle::mir::{self, *};\n-    pub(crate) use rustc_session::Session;\n     pub(crate) use rustc_middle::ty::layout::{self, TyAndLayout};\n     pub(crate) use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx};\n     pub(crate) use rustc_middle::ty::{\n@@ -86,17 +87,13 @@ mod prelude {\n \n     pub(crate) use rustc_index::vec::Idx;\n \n-    pub(crate) use rustc_codegen_ssa::traits::*;\n-    pub(crate) use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n-\n     pub(crate) use cranelift_codegen::Context;\n     pub(crate) use cranelift_codegen::entity::EntitySet;\n     pub(crate) use cranelift_codegen::ir::{AbiParam, Block, ExternalName, FuncRef, Inst, InstBuilder, MemFlags, Signature, SourceLoc, StackSlot, StackSlotData, StackSlotKind, TrapCode, Type, Value};\n     pub(crate) use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub(crate) use cranelift_codegen::ir::function::Function;\n     pub(crate) use cranelift_codegen::ir::types;\n     pub(crate) use cranelift_codegen::isa::{self, CallConv};\n-    pub(crate) use cranelift_codegen::settings::{self, Configurable};\n     pub(crate) use cranelift_frontend::{FunctionBuilder, FunctionBuilderContext, Variable};\n     pub(crate) use cranelift_module::{\n         self, Backend, DataContext, DataId, FuncId, Linkage, Module,\n@@ -110,23 +107,18 @@ mod prelude {\n     pub(crate) use crate::pointer::Pointer;\n     pub(crate) use crate::trap::*;\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n-    pub(crate) use crate::CodegenCx;\n+}\n \n-    pub(crate) struct PrintOnPanic<F: Fn() -> String>(pub F);\n-    impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n-        fn drop(&mut self) {\n-            if ::std::thread::panicking() {\n-                println!(\"{}\", (self.0)());\n-            }\n+struct PrintOnPanic<F: Fn() -> String>(F);\n+impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n+    fn drop(&mut self) {\n+        if ::std::thread::panicking() {\n+            println!(\"{}\", (self.0)());\n         }\n     }\n-\n-    pub(crate) macro unimpl_fatal($tcx:expr, $span:expr, $($tt:tt)*) {\n-        $tcx.sess.span_fatal($span, &format!($($tt)*));\n-    }\n }\n \n-pub(crate) struct CodegenCx<'tcx, B: Backend + 'static> {\n+struct CodegenCx<'tcx, B: Backend + 'static> {\n     tcx: TyCtxt<'tcx>,\n     module: Module<B>,\n     constants_cx: ConstantCx,"}]}