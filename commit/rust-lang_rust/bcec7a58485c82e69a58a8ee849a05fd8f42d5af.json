{"sha": "bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZWM3YTU4NDg1YzgyZTY5YTU4YThlZTg0OWEwNWZkOGY0MmQ1YWY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-01T12:10:44Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T10:58:51Z"}, "message": "rustc: add ReErased to be used by trait selection, MIR and trans.", "tree": {"sha": "6a0bdec5007dd98aa65c647cf73a076bed19954a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0bdec5007dd98aa65c647cf73a076bed19954a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "html_url": "https://github.com/rust-lang/rust/commit/bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f97c411548f2b64f74f2bcb84dcc37075c05e2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f97c411548f2b64f74f2bcb84dcc37075c05e2a0", "html_url": "https://github.com/rust-lang/rust/commit/f97c411548f2b64f74f2bcb84dcc37075c05e2a0"}], "stats": {"total": 163, "additions": 92, "deletions": 71}, "files": [{"sha": "fa3715b6891a06d29c8c4387dc5e11b5a15d07f4", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -337,8 +337,10 @@ impl<'cx, 'gcx, 'tcx> ty::fold::TypeFolder<'gcx, 'tcx> for Generalizer<'cx, 'gcx\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n         match r {\n-            // Never make variables for regions bound within the type itself.\n-            ty::ReLateBound(..) => { return r; }\n+            // Never make variables for regions bound within the type itself,\n+            // nor for erased regions.\n+            ty::ReLateBound(..) |\n+            ty::ReErased => { return r; }\n \n             // Early-bound regions should really have been substituted away before\n             // we get to this point."}, {"sha": "041abf9b7de1e0af3ba6d2b74e4a8e6ecd4e9df8", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -216,7 +216,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             //\n             // We shouldn't really be having unification failures with ReVar\n             // and ReLateBound though.\n-            ty::ReSkolemized(..) | ty::ReVar(_) | ty::ReLateBound(..) => {\n+            ty::ReSkolemized(..) |\n+            ty::ReVar(_) |\n+            ty::ReLateBound(..) |\n+            ty::ReErased => {\n                 (format!(\"lifetime {:?}\", region), None)\n             }\n         };"}, {"sha": "880661a882af3c38e114390d6d39226b5eccd020", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -23,7 +23,7 @@\n //! error messages or in any other form. Freshening is only really useful as an internal detail.\n //!\n //! __An important detail concerning regions.__ The freshener also replaces *all* regions with\n-//! 'static. The reason behind this is that, in general, we do not take region relationships into\n+//! 'erased. The reason behind this is that, in general, we do not take region relationships into\n //! account when making type-overloaded decisions. This is important because of the design of the\n //! region inferencer, which is not based on unification but rather on accumulating and then\n //! solving a set of constraints. In contrast, the type inferencer assigns a value to each type\n@@ -96,9 +96,10 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::ReScope(_) |\n             ty::ReVar(_) |\n             ty::ReSkolemized(..) |\n-            ty::ReEmpty => {\n-                // replace all free regions with 'static\n-                ty::ReStatic\n+            ty::ReEmpty |\n+            ty::ReErased => {\n+                // replace all free regions with 'erased\n+                ty::ReErased\n             }\n         }\n     }"}, {"sha": "ebfa942e5e415d880d74f03d12c545166623117f", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -25,7 +25,7 @@ use rustc_data_structures::unify::{self, UnificationTable};\n use middle::free_region::FreeRegionMap;\n use ty::{self, Ty, TyCtxt};\n use ty::{BoundRegion, Region, RegionVid};\n-use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound};\n+use ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound, ReErased};\n use ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n \n use std::cell::{Cell, RefCell};\n@@ -918,8 +918,10 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n             (ReLateBound(..), _) |\n             (_, ReLateBound(..)) |\n             (ReEarlyBound(..), _) |\n-            (_, ReEarlyBound(..)) => {\n-                bug!(\"cannot relate bound region: LUB({:?}, {:?})\", a, b);\n+            (_, ReEarlyBound(..)) |\n+            (ReErased, _) |\n+            (_, ReErased) => {\n+                bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n \n             (ReStatic, _) | (_, ReStatic) => {"}, {"sha": "44b450784ed2a9c51e87cb1b6d891cbd7cecb234", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -187,7 +187,7 @@ impl FlagComputation {\n             }\n             ty::ReLateBound(debruijn, _) => { self.add_depth(debruijn.depth); }\n             ty::ReEarlyBound(..) => { self.add_flags(TypeFlags::HAS_RE_EARLY_BOUND); }\n-            ty::ReStatic => {}\n+            ty::ReStatic | ty::ReErased => {}\n             _ => { self.add_flags(TypeFlags::HAS_FREE_REGIONS); }\n         }\n "}, {"sha": "1a944e04effd76475221e67bcc3ac73a02c03696", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -421,12 +421,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         collector.regions\n     }\n \n-    /// Replace any late-bound regions bound in `value` with `'static`. Useful in trans but also\n+    /// Replace any late-bound regions bound in `value` with `'erased`. Useful in trans but also\n     /// method lookup and a few other places where precise region relationships are not required.\n     pub fn erase_late_bound_regions<T>(self, value: &Binder<T>) -> T\n         where T : TypeFoldable<'tcx>\n     {\n-        self.replace_late_bound_regions(value, |_| ty::ReStatic).0\n+        self.replace_late_bound_regions(value, |_| ty::ReErased).0\n     }\n \n     /// Rewrite any late-bound regions so that they are anonymous.  Region numbers are\n@@ -547,15 +547,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n                 // because late-bound regions affect subtyping, we can't\n                 // erase the bound/free distinction, but we can replace\n-                // all free regions with 'static.\n+                // all free regions with 'erased.\n                 //\n                 // Note that we *CAN* replace early-bound regions -- the\n                 // type system never \"sees\" those, they get substituted\n-                // away. In trans, they will always be erased to 'static\n+                // away. In trans, they will always be erased to 'erased\n                 // whenever a substitution occurs.\n                 match r {\n                     ty::ReLateBound(..) => r,\n-                    _ => ty::ReStatic\n+                    _ => ty::ReErased\n                 }\n             }\n         }\n@@ -651,7 +651,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n             // does this represent a region that cannot be named\n             // in a global way? used in fulfillment caching.\n             match r {\n-                ty::ReStatic | ty::ReEmpty => {}\n+                ty::ReStatic | ty::ReEmpty | ty::ReErased => {}\n                 _ => return true,\n             }\n         }"}, {"sha": "e2a9a954126691251632aa830fb4cf4900cc7775", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -705,6 +705,9 @@ pub enum Region {\n     /// The only way to get an instance of ReEmpty is to have a region\n     /// variable with no constraints.\n     ReEmpty,\n+\n+    /// Erased region, used by trait selection, in MIR and during trans.\n+    ReErased,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "fbc565ca847b656ce7c272165588a80b61a83400", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n \n     pub fn erase_regions(self) -> Substs<'tcx> {\n         let Substs { types, regions } = self;\n-        let regions = regions.map(|_| ty::ReStatic);\n+        let regions = regions.map(|_| ty::ReErased);\n         Substs { types: types, regions: regions }\n     }\n "}, {"sha": "7745f00c2ebd9ac50c54dff8ac2a16b929e7d991", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n             let region = |state: &mut SipHasher, r: ty::Region| {\n                 match r {\n-                    ty::ReStatic => {}\n+                    ty::ReStatic | ty::ReErased => {}\n                     ty::ReLateBound(db, ty::BrAnon(i)) => {\n                         db.hash(state);\n                         i.hash(state);"}, {"sha": "0bfb7c1ed55321da22e6c9fe412b2dedcbc04686", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -148,28 +148,36 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n             write!(f, \"{}\", cont)\n         }\n     };\n-    let print_region = |f: &mut fmt::Formatter, region: &ty::Region| -> _ {\n-        if verbose {\n-            write!(f, \"{:?}\", region)\n-        } else {\n-            let s = region.to_string();\n-            if s.is_empty() {\n-                // This happens when the value of the region\n-                // parameter is not easily serialized. This may be\n-                // because the user omitted it in the first place,\n-                // or because it refers to some block in the code,\n-                // etc. I'm not sure how best to serialize this.\n-                write!(f, \"'_\")\n+\n+    let print_regions = |f: &mut fmt::Formatter, start: &str, regions: &[ty::Region]| {\n+        // Don't print any regions if they're all erased.\n+        if regions.iter().all(|r| *r == ty::ReErased) {\n+            return Ok(());\n+        }\n+\n+        for region in regions {\n+            start_or_continue(f, start, \", \")?;\n+            if verbose {\n+                write!(f, \"{:?}\", region)?;\n             } else {\n-                write!(f, \"{}\", s)\n+                let s = region.to_string();\n+                if s.is_empty() {\n+                    // This happens when the value of the region\n+                    // parameter is not easily serialized. This may be\n+                    // because the user omitted it in the first place,\n+                    // or because it refers to some block in the code,\n+                    // etc. I'm not sure how best to serialize this.\n+                    write!(f, \"'_\")?;\n+                } else {\n+                    write!(f, \"{}\", s)?;\n+                }\n             }\n         }\n+\n+        Ok(())\n     };\n \n-    for region in substs.regions.get_slice(subst::TypeSpace) {\n-        start_or_continue(f, \"<\", \", \")?;\n-        print_region(f, region)?;\n-    }\n+    print_regions(f, \"<\", substs.regions.get_slice(subst::TypeSpace))?;\n \n     let num_supplied_defaults = if verbose {\n         0\n@@ -211,10 +219,7 @@ pub fn parameterized<GG>(f: &mut fmt::Formatter,\n             write!(f, \"::{}\", item_name)?;\n         }\n \n-        for region in substs.regions.get_slice(subst::FnSpace) {\n-            start_or_continue(f, \"::<\", \", \")?;\n-            print_region(f, region)?;\n-        }\n+        print_regions(f, \"::<\", substs.regions.get_slice(subst::FnSpace))?;\n \n         // FIXME: consider being smart with defaults here too\n         for ty in substs.types.get_slice(subst::FnSpace) {\n@@ -536,7 +541,9 @@ impl fmt::Debug for ty::Region {\n                 write!(f, \"ReSkolemized({}, {:?})\", id.index, bound_region)\n             }\n \n-            ty::ReEmpty => write!(f, \"ReEmpty\")\n+            ty::ReEmpty => write!(f, \"ReEmpty\"),\n+\n+            ty::ReErased => write!(f, \"ReErased\")\n         }\n     }\n }\n@@ -600,7 +607,8 @@ impl fmt::Display for ty::Region {\n                 write!(f, \"{}\", br)\n             }\n             ty::ReScope(_) |\n-            ty::ReVar(_) => Ok(()),\n+            ty::ReVar(_) |\n+            ty::ReErased => Ok(()),\n             ty::ReStatic => write!(f, \"'static\"),\n             ty::ReEmpty => write!(f, \"'<empty>\"),\n         }"}, {"sha": "7f814f5dfaa919691d4bb4fce05c80ab72d3e70e", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -369,7 +369,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     ty::ReLateBound(..) |\n                     ty::ReEarlyBound(..) |\n                     ty::ReVar(..) |\n-                    ty::ReSkolemized(..) => {\n+                    ty::ReSkolemized(..) |\n+                    ty::ReErased => {\n                         span_bug!(\n                             cmt.span,\n                             \"invalid borrow lifetime: {:?}\","}, {"sha": "d96996a017986ca2304080948a7f83d0740c1779", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -221,12 +221,9 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 assert_eq!(self.next(), '|');\n                 ty::ReScope(scope)\n             }\n-            't' => {\n-                ty::ReStatic\n-            }\n-            'e' => {\n-                ty::ReStatic\n-            }\n+            't' => ty::ReStatic,\n+            'e' => ty::ReEmpty,\n+            'E' => ty::ReErased,\n             _ => bug!(\"parse_region: bad input\")\n         }\n     }"}, {"sha": "48811c68f58695a786e8cabacb519d7901e5749c", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -283,6 +283,9 @@ pub fn enc_region(w: &mut Cursor<Vec<u8>>, cx: &ctxt, r: ty::Region) {\n         ty::ReEmpty => {\n             write!(w, \"e\");\n         }\n+        ty::ReErased => {\n+            write!(w, \"E\");\n+        }\n         ty::ReVar(_) | ty::ReSkolemized(..) => {\n             // these should not crop up after typeck\n             bug!(\"cannot encode region variables\");"}, {"sha": "5bc92a9c45f3d50202f10ae925e65ce5dfe07365", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -731,7 +731,7 @@ fn bind_subslice_pat(bcx: Block,\n     let slice_begin = InBoundsGEP(bcx, base, &[C_uint(bcx.ccx(), offset_left)]);\n     let slice_len_offset = C_uint(bcx.ccx(), offset_left + offset_right);\n     let slice_len = Sub(bcx, len, slice_len_offset, DebugLoc::None);\n-    let slice_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic),\n+    let slice_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReErased),\n                                          bcx.tcx().mk_slice(unit_ty));\n     let scratch = rvalue_scratch_datum(bcx, slice_ty, \"\");\n     Store(bcx, slice_begin, expr::get_dataptr(bcx, scratch.val));"}, {"sha": "79882891f63d3f2af79d65cc96feec7b2eb0e607", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -328,7 +328,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     };\n \n     let bare_fn_ty_maybe_ref = if is_by_ref {\n-        tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), bare_fn_ty)\n+        tcx.mk_imm_ref(tcx.mk_region(ty::ReErased), bare_fn_ty)\n     } else {\n         bare_fn_ty\n     };"}, {"sha": "9196cfce16feb3c85f2b937605b18c169f1689ea", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -123,10 +123,10 @@ fn get_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            -> Ty<'tcx> {\n     match tcx.closure_kind(closure_id) {\n         ty::ClosureKind::Fn => {\n-            tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), fn_ty)\n+            tcx.mk_imm_ref(tcx.mk_region(ty::ReErased), fn_ty)\n         }\n         ty::ClosureKind::FnMut => {\n-            tcx.mk_mut_ref(tcx.mk_region(ty::ReStatic), fn_ty)\n+            tcx.mk_mut_ref(tcx.mk_region(ty::ReErased), fn_ty)\n         }\n         ty::ClosureKind::FnOnce => fn_ty,\n     }\n@@ -344,7 +344,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     // Find a version of the closure type. Substitute static for the\n     // region since it doesn't really matter.\n     let closure_ty = tcx.mk_closure_from_closure_substs(closure_def_id, substs);\n-    let ref_closure_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReStatic), closure_ty);\n+    let ref_closure_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReErased), closure_ty);\n \n     // Make a version with the type of by-ref closure.\n     let ty::ClosureTy { unsafety, abi, mut sig } ="}, {"sha": "045bb21fddade985dd819ed3d6419f5ca3166ceb", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -382,7 +382,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                     // Don't copy data to do a deref+ref\n                     // (i.e., skip the last auto-deref).\n                     llconst = addr_of(cx, llconst, type_of::align_of(cx, ty), \"autoref\");\n-                    ty = cx.tcx().mk_imm_ref(cx.tcx().mk_region(ty::ReStatic), ty);\n+                    ty = cx.tcx().mk_imm_ref(cx.tcx().mk_region(ty::ReErased), ty);\n                 }\n             } else if adj.autoderefs > 0 {\n                 let (dv, dt) = const_deref(cx, llconst, ty);"}, {"sha": "550455a7fb7a2306a4f800f2cacdcf6b427136b5", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -495,7 +495,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         assert!(scheme.generics.types.is_empty());\n         self.tcx().mk_substs(\n             Substs::new(VecPerParamSpace::empty(),\n-                        scheme.generics.regions.map(|_| ty::ReStatic)))\n+                        scheme.generics.regions.map(|_| ty::ReErased)))\n     }\n \n     pub fn symbol_hasher(&self) -> &RefCell<Sha256> {"}, {"sha": "b6663bd9a69e60c31c1827d640fd4d37254f486a", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -1978,7 +1978,7 @@ fn auto_ref<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // Compute final type. Note that we are loose with the region and\n     // mutability, since those things don't matter in trans.\n     let referent_ty = lv_datum.ty;\n-    let ptr_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic), referent_ty);\n+    let ptr_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReErased), referent_ty);\n \n     // Construct the resulting datum. The right datum to return here would be an Lvalue datum,\n     // because there is cleanup scheduled and the datum doesn't own the data, but for thin pointers"}, {"sha": "062b3d4a6e4bfd55fa99c93da5bb0dbb6d3820da", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -271,7 +271,7 @@ pub fn get_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // the method may have some early-bound lifetimes, add\n             // regions for those\n             let num_dummy_regions = trait_method_type.generics.regions.len(FnSpace);\n-            let dummy_regions = vec![ty::ReStatic; num_dummy_regions];\n+            let dummy_regions = vec![ty::ReErased; num_dummy_regions];\n             let method_substs = substs.clone()\n                                       .with_method(vec![], dummy_regions);\n             let method_substs = tcx.mk_substs(method_substs);"}, {"sha": "d4c60214179ad18ba25678ec40bc7809412cff2d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let tr_lvalue = self.const_lvalue(lvalue, span)?;\n \n                 let ty = tr_lvalue.ty;\n-                let ref_ty = tcx.mk_ref(tcx.mk_region(ty::ReStatic),\n+                let ref_ty = tcx.mk_ref(tcx.mk_region(ty::ReErased),\n                     ty::TypeAndMut { ty: ty, mutbl: bk.to_mutbl_lossy() });\n \n                 let base = match tr_lvalue.base {"}, {"sha": "4d80ec28da665177f180049cdfbb1b866d50492a", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -371,7 +371,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 let ty = tr_lvalue.ty.to_ty(bcx.tcx());\n                 let ref_ty = bcx.tcx().mk_ref(\n-                    bcx.tcx().mk_region(ty::ReStatic),\n+                    bcx.tcx().mk_region(ty::ReErased),\n                     ty::TypeAndMut { ty: ty, mutbl: bk.to_mutbl_lossy() }\n                 );\n "}, {"sha": "a0355dcc66e618c773b1bd0a1efcf970be13a61b", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n impl<'tcx> Instance<'tcx> {\n     pub fn new(def_id: DefId, substs: &'tcx Substs<'tcx>)\n                -> Instance<'tcx> {\n-        assert!(substs.regions.iter().all(|&r| r == ty::ReStatic));\n+        assert!(substs.regions.iter().all(|&r| r == ty::ReErased));\n         Instance { def: def_id, substs: substs }\n     }\n     pub fn mono<'a>(scx: &SharedCrateContext<'a, 'tcx>, def_id: DefId) -> Instance<'tcx> {"}, {"sha": "d6b696a25483caf1ed67c43aa57c3f09ec74c835", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -976,7 +976,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         // In general, during probing we erase regions. See\n         // `impl_self_ty()` for an explanation.\n-        let region = tcx.mk_region(ty::ReStatic);\n+        let region = tcx.mk_region(ty::ReErased);\n \n         // Search through mutabilities in order to find one where pick works:\n         [hir::MutImmutable, hir::MutMutable].iter().filter_map(|&m| {\n@@ -1240,7 +1240,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             let method_regions =\n                 method.generics.regions.get_slice(subst::FnSpace)\n                 .iter()\n-                .map(|_| ty::ReStatic)\n+                .map(|_| ty::ReErased)\n                 .collect();\n \n             placeholder = (*substs).clone().with_method(Vec::new(), method_regions);\n@@ -1276,7 +1276,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n         let region_placeholders =\n             impl_pty.generics.regions.map(\n-                |_| ty::ReStatic); // see erase_late_bound_regions() for an expl of why 'static\n+                |_| ty::ReErased); // see erase_late_bound_regions() for an expl of why 'erased\n \n         let substs = subst::Substs::new(type_vars, region_placeholders);\n         (impl_pty.ty, substs)"}, {"sha": "01a310da25ddd26a364f0526a51df43c7e8f844f", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::ReFree(..) | ty::ReScope(..) | ty::ReVar(..) |\n-            ty::ReSkolemized(..) | ty::ReEmpty => {\n+            ty::ReSkolemized(..) | ty::ReEmpty | ty::ReErased => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types.\n                 bug!(\"unexpected region encountered in variance \\"}, {"sha": "d7b4ad1128c6a4d9487105fec825d509ffe073be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -827,7 +827,8 @@ impl Clean<Option<Lifetime>> for ty::Region {\n             ty::ReScope(..) |\n             ty::ReVar(..) |\n             ty::ReSkolemized(..) |\n-            ty::ReEmpty => None\n+            ty::ReEmpty |\n+            ty::ReErased => None\n         }\n     }\n }"}, {"sha": "50240b475578c6a66f903e1f8cee08cfc476951f", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -60,22 +60,22 @@ unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n \n unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n-    //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n+    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n-    //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n+    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n-    //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n+    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n-    //~^ ERROR expected basic integer type, found `&'static std::ops::Fn() + 'static`\n+    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {"}, {"sha": "19cd1cf3df717721c9bbfcdb85825b0699aa437a", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcec7a58485c82e69a58a8ee849a05fd8f42d5af/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=bcec7a58485c82e69a58a8ee849a05fd8f42d5af", "patch": "@@ -26,5 +26,5 @@ fn main() {\n         std::intrinsics::type_name::<NT>(),\n         // DST\n         std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"std::marker::Send + 'static\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"std::marker::Send\", \"NT\", \"DST\"));\n }"}]}