{"sha": "0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWYyYTgyMTU0YTlhOGRmOTY5MTI0MmE4YmU4YTBhMGJkYmNkOWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T01:22:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T05:04:49Z"}, "message": "rustdoc: Extract variant signatures", "tree": {"sha": "fbade8ac89adc766d8076f890f43c4dadabb0ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbade8ac89adc766d8076f890f43c4dadabb0ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "html_url": "https://github.com/rust-lang/rust/commit/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b8455e540a4acca4c602f248534e264b45664d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b8455e540a4acca4c602f248534e264b45664d", "html_url": "https://github.com/rust-lang/rust/commit/b7b8455e540a4acca4c602f248534e264b45664d"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "cb3258660a1d010c88b518c243f06583c0950c52", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "patch": "@@ -97,7 +97,8 @@ fn default_seq_fold_mod<T>(\n     ~{\n         mods: fold.fold_modlist(fold, doc.mods),\n         fns: fold.fold_fnlist(fold, doc.fns),\n-        consts: fold.fold_constlist(fold, doc.consts)\n+        consts: fold.fold_constlist(fold, doc.consts),\n+        enums: fold.fold_enumlist(fold, doc.enums)\n         with *doc\n     }\n }"}, {"sha": "1595ec61ef50b6960f72239f675f4d5e491aef28", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=0b9f2a82154a9a8df9691242a8be8a0a0bdbcd9e", "patch": "@@ -17,7 +17,8 @@ fn run(\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n         fold_fn: fold_fn,\n-        fold_const: fold_const\n+        fold_const: fold_const,\n+        fold_enum: fold_enum\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -179,4 +180,45 @@ fn should_add_const_types() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n     assert doc.topmod.consts[0].ty == some(\"bool\");\n-}\n\\ No newline at end of file\n+}\n+\n+fn fold_enum(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::enumdoc\n+) -> doc::enumdoc {\n+    let srv = fold.ctxt;\n+\n+    ~{\n+        variants: vec::map(doc.variants) {|variant|\n+            let sig = astsrv::exec(srv) {|ctxt|\n+                alt ctxt.map.get(doc.id) {\n+                  ast_map::node_item(@{\n+                    node: ast::item_enum(ast_variants, _), _\n+                  }) {\n+                    let ast_variant = option::get(\n+                        vec::find(ast_variants) {|v|\n+                            v.node.name == variant.name\n+                        });\n+\n+                    pprust::variant_to_str(ast_variant)\n+                  }\n+                }\n+            };\n+\n+            ~{\n+                sig: some(sig)\n+                with *variant\n+            }\n+        }\n+        with *doc\n+    }\n+}\n+\n+#[test]\n+fn should_add_variant_sigs() {\n+    let source = \"enum a { b(int) }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.enums[0].variants[0].sig == some(\"b(int)\");\n+}"}]}