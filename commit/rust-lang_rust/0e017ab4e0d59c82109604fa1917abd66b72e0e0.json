{"sha": "0e017ab4e0d59c82109604fa1917abd66b72e0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMDE3YWI0ZTBkNTljODIxMDk2MDRmYTE5MTdhYmQ2NmI3MmUwZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-20T21:24:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-20T21:24:51Z"}, "message": "auto merge of #5979 : Thiez/rust/no_reinterpret_cast, r=catamorphism\n\nAs the name suggests this replaces many instances of cast::reinterpret_cast by cast::transmute. It's essentially the boring part of fixing #5163, the remaining reinterpret_casts should be more tricky to remove (unless I missed a boring case).\r\n\r\nr? @catamorphism", "tree": {"sha": "8ca90ad25492069d7282efd43f648adff062c6af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca90ad25492069d7282efd43f648adff062c6af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e017ab4e0d59c82109604fa1917abd66b72e0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e017ab4e0d59c82109604fa1917abd66b72e0e0", "html_url": "https://github.com/rust-lang/rust/commit/0e017ab4e0d59c82109604fa1917abd66b72e0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e017ab4e0d59c82109604fa1917abd66b72e0e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0afe23dce9699f2776907d2adde126baea58f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0afe23dce9699f2776907d2adde126baea58f30", "html_url": "https://github.com/rust-lang/rust/commit/f0afe23dce9699f2776907d2adde126baea58f30"}, {"sha": "51a68eb9b14f5d6f8ac358eed8c11e8567d5f87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/51a68eb9b14f5d6f8ac358eed8c11e8567d5f87b", "html_url": "https://github.com/rust-lang/rust/commit/51a68eb9b14f5d6f8ac358eed8c11e8567d5f87b"}], "stats": {"total": 216, "additions": 107, "deletions": 109}, "files": [{"sha": "e2bce1bd0f01a803d0d3511cfab25324b55ff6c6", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -41,7 +41,7 @@ pub mod rustrt {\n pub fn capacity<T>(v: @[T]) -> uint {\n     unsafe {\n         let repr: **raw::VecRepr =\n-            ::cast::reinterpret_cast(&addr_of(&v));\n+            ::cast::transmute(addr_of(&v));\n         (**repr).unboxed.alloc / sys::size_of::<T>()\n     }\n }\n@@ -208,7 +208,7 @@ pub mod raw {\n      */\n     #[inline(always)]\n     pub unsafe fn set_len<T>(v: @[T], new_len: uint) {\n-        let repr: **mut VecRepr = ::cast::reinterpret_cast(&addr_of(&v));\n+        let repr: **mut VecRepr = ::cast::transmute(addr_of(&v));\n         (**repr).unboxed.fill = new_len * sys::size_of::<T>();\n     }\n \n@@ -226,7 +226,7 @@ pub mod raw {\n \n     #[inline(always)] // really pretty please\n     pub unsafe fn push_fast<T>(v: &mut @[T], initval: T) {\n-        let repr: **mut VecRepr = ::cast::reinterpret_cast(&v);\n+        let repr: **mut VecRepr = ::cast::transmute(v);\n         let fill = (**repr).unboxed.fill;\n         (**repr).unboxed.fill += sys::size_of::<T>();\n         let p = addr_of(&((**repr).unboxed.data));\n@@ -322,4 +322,4 @@ mod test {\n         assert!(from_slice([@\"abc\", @\"123\"]) == @[@\"abc\", @\"123\"]);\n         assert!(from_slice([@[42]]) == @[@[42]]);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ec2658147c5a5a4717eccf53aa6ddcd7865c627d", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -77,14 +77,14 @@ pub mod rustrt {\n }\n \n unsafe fn bump<T, U>(ptr: *T, count: uint) -> *U {\n-    return cast::reinterpret_cast(&ptr::offset(ptr, count));\n+    return cast::transmute(ptr::offset(ptr, count));\n }\n \n unsafe fn align_to_pointer<T>(ptr: *T) -> *T {\n     let align = sys::min_align_of::<*T>();\n-    let ptr: uint = cast::reinterpret_cast(&ptr);\n+    let ptr: uint = cast::transmute(ptr);\n     let ptr = (ptr + (align - 1)) & -align;\n-    return cast::reinterpret_cast(&ptr);\n+    return cast::transmute(ptr);\n }\n \n unsafe fn get_safe_point_count() -> uint {\n@@ -129,8 +129,8 @@ type Visitor<'self> = &'self fn(root: **Word, tydesc: *Word) -> bool;\n // Walks the list of roots for the given safe point, and calls visitor\n // on each root.\n unsafe fn walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) {\n-    let fp_bytes: *u8 = cast::reinterpret_cast(&fp);\n-    let sp_meta: *u32 = cast::reinterpret_cast(&sp.sp_meta);\n+    let fp_bytes: *u8 = cast::transmute(fp);\n+    let sp_meta: *u32 = cast::transmute(sp.sp_meta);\n \n     let num_stack_roots = *sp_meta as uint;\n     let num_reg_roots = *ptr::offset(sp_meta, 1) as uint;\n@@ -171,9 +171,9 @@ unsafe fn walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) {\n \n // Is fp contained in segment?\n unsafe fn is_frame_in_segment(fp: *Word, segment: *StackSegment) -> bool {\n-    let begin: Word = cast::reinterpret_cast(&segment);\n-    let end: Word = cast::reinterpret_cast(&(*segment).end);\n-    let frame: Word = cast::reinterpret_cast(&fp);\n+    let begin: Word = cast::transmute(segment);\n+    let end: Word = cast::transmute((*segment).end);\n+    let frame: Word = cast::transmute(fp);\n \n     return begin <= frame && frame <= end;\n }\n@@ -339,7 +339,7 @@ pub fn cleanup_stack_for_failure() {\n         // own stack roots on the stack anyway.\n         let sentinel_box = ~0;\n         let sentinel: **Word = if expect_sentinel() {\n-            cast::reinterpret_cast(&ptr::addr_of(&sentinel_box))\n+            cast::transmute(ptr::addr_of(&sentinel_box))\n         } else {\n             ptr::null()\n         };"}, {"sha": "0e7131a86f394831317e6e2fa73a49672b28c10b", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -239,10 +239,10 @@ pub fn getenv(n: &str) -> Option<~str> {\n     unsafe {\n         do with_env_lock {\n             let s = str::as_c_str(n, |s| libc::getenv(s));\n-            if ptr::null::<u8>() == cast::reinterpret_cast(&s) {\n+            if ptr::null::<u8>() == cast::transmute(s) {\n                 option::None::<~str>\n             } else {\n-                let s = cast::reinterpret_cast(&s);\n+                let s = cast::transmute(s);\n                 option::Some::<~str>(str::raw::from_buf(s))\n             }\n         }\n@@ -644,7 +644,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n             // FIXME: turn mode into something useful? #2623\n             do as_utf16_p(p.to_str()) |buf| {\n                 libc::CreateDirectoryW(buf, unsafe {\n-                    cast::reinterpret_cast(&0)\n+                    cast::transmute(0)\n                 })\n                     != (0 as libc::BOOL)\n             }"}, {"sha": "94474c3c02d62a3ea810d7d9a73ebf71f109fd71", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -86,11 +86,11 @@ pub unsafe fn position<T>(buf: *T, f: &fn(&T) -> bool) -> uint {\n \n /// Create an unsafe null pointer\n #[inline(always)]\n-pub fn null<T>() -> *T { unsafe { cast::reinterpret_cast(&0u) } }\n+pub fn null<T>() -> *T { unsafe { cast::transmute(0u) } }\n \n /// Create an unsafe mutable null pointer\n #[inline(always)]\n-pub fn mut_null<T>() -> *mut T { unsafe { cast::reinterpret_cast(&0u) } }\n+pub fn mut_null<T>() -> *mut T { unsafe { cast::transmute(0u) } }\n \n /// Returns true if the pointer is equal to the null pointer.\n #[inline(always)]\n@@ -134,7 +134,7 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n */\n #[inline(always)]\n pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n-    unsafe { cast::reinterpret_cast(&thing) }\n+    unsafe { cast::transmute(thing) }\n }\n \n /**\n@@ -144,7 +144,7 @@ pub fn to_unsafe_ptr<T>(thing: &T) -> *T {\n */\n #[inline(always)]\n pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n-    unsafe { cast::reinterpret_cast(&thing) }\n+    unsafe { cast::transmute(thing) }\n }\n \n /**\n@@ -154,7 +154,7 @@ pub fn to_const_unsafe_ptr<T>(thing: &const T) -> *const T {\n */\n #[inline(always)]\n pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n-    unsafe { cast::reinterpret_cast(&thing) }\n+    unsafe { cast::transmute(thing) }\n }\n \n /**\n@@ -167,7 +167,7 @@ pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n #[inline(always)]\n pub fn to_uint<T>(thing: &T) -> uint {\n     unsafe {\n-        cast::reinterpret_cast(&thing)\n+        cast::transmute(thing)\n     }\n }\n \n@@ -259,8 +259,8 @@ impl<T> Eq for *const T {\n     #[inline(always)]\n     fn eq(&self, other: &*const T) -> bool {\n         unsafe {\n-            let a: uint = cast::reinterpret_cast(&(*self));\n-            let b: uint = cast::reinterpret_cast(&(*other));\n+            let a: uint = cast::transmute(*self);\n+            let b: uint = cast::transmute(*other);\n             return a == b;\n         }\n     }\n@@ -274,32 +274,32 @@ impl<T> Ord for *const T {\n     #[inline(always)]\n     fn lt(&self, other: &*const T) -> bool {\n         unsafe {\n-            let a: uint = cast::reinterpret_cast(&(*self));\n-            let b: uint = cast::reinterpret_cast(&(*other));\n+            let a: uint = cast::transmute(*self);\n+            let b: uint = cast::transmute(*other);\n             return a < b;\n         }\n     }\n     #[inline(always)]\n     fn le(&self, other: &*const T) -> bool {\n         unsafe {\n-            let a: uint = cast::reinterpret_cast(&(*self));\n-            let b: uint = cast::reinterpret_cast(&(*other));\n+            let a: uint = cast::transmute(*self);\n+            let b: uint = cast::transmute(*other);\n             return a <= b;\n         }\n     }\n     #[inline(always)]\n     fn ge(&self, other: &*const T) -> bool {\n         unsafe {\n-            let a: uint = cast::reinterpret_cast(&(*self));\n-            let b: uint = cast::reinterpret_cast(&(*other));\n+            let a: uint = cast::transmute(*self);\n+            let b: uint = cast::transmute(*other);\n             return a >= b;\n         }\n     }\n     #[inline(always)]\n     fn gt(&self, other: &*const T) -> bool {\n         unsafe {\n-            let a: uint = cast::reinterpret_cast(&(*self));\n-            let b: uint = cast::reinterpret_cast(&(*other));\n+            let a: uint = cast::transmute(*self);\n+            let b: uint = cast::transmute(*other);\n             return a > b;\n         }\n     }\n@@ -350,7 +350,7 @@ pub mod ptr_tests {\n             struct Pair {mut fst: int, mut snd: int};\n             let mut p = Pair {fst: 10, snd: 20};\n             let pptr: *mut Pair = &mut p;\n-            let iptr: *mut int = cast::reinterpret_cast(&pptr);\n+            let iptr: *mut int = cast::transmute(pptr);\n             assert!((*iptr == 10));;\n             *iptr = 30;\n             assert!((*iptr == 30));"}, {"sha": "087ee6cdf850ca034e48af01b78f679ce73d7f60", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -147,7 +147,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         }\n         ptrs.push(ptr::null());\n         vec::as_imm_buf(ptrs, |p, _len|\n-            unsafe { cb(::cast::reinterpret_cast(&p)) }\n+            unsafe { cb(::cast::transmute(p)) }\n         )\n       }\n       _ => cb(ptr::null())\n@@ -167,12 +167,12 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n             for vec::each(*es) |e| {\n                 let (k,v) = copy *e;\n                 let t = fmt!(\"%s=%s\", k, v);\n-                let mut v : ~[u8] = ::cast::reinterpret_cast(&t);\n+                let mut v : ~[u8] = ::cast::transmute(t);\n                 blk += v;\n                 ::cast::forget(v);\n             }\n             blk += ~[0_u8];\n-            vec::as_imm_buf(blk, |p, _len| cb(::cast::reinterpret_cast(&p)))\n+            vec::as_imm_buf(blk, |p, _len| cb(::cast::transmute(p)))\n           }\n           _ => cb(ptr::null())\n         }"}, {"sha": "be5f89893684390239cda2795bdcdab2b604d559", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -10,7 +10,7 @@\n \n #[doc(hidden)]; // FIXME #3538\n \n-use cast::reinterpret_cast;\n+use cast::transmute;\n \n pub type Word = uint;\n \n@@ -30,16 +30,16 @@ pub fn walk_stack(visit: &fn(Frame) -> bool) {\n \n     do frame_address |frame_pointer| {\n         let mut frame_address: *Word = unsafe {\n-            reinterpret_cast(&frame_pointer)\n+            transmute(frame_pointer)\n         };\n         loop {\n             let fr = Frame(frame_address);\n \n-            debug!(\"frame: %x\", unsafe { reinterpret_cast(&fr.fp) });\n+            debug!(\"frame: %x\", unsafe { transmute(fr.fp) });\n             visit(fr);\n \n             unsafe {\n-                let next_fp: **Word = reinterpret_cast(&frame_address);\n+                let next_fp: **Word = transmute(frame_address);\n                 frame_address = *next_fp;\n                 if *frame_address == 0u {\n                     debug!(\"encountered task_start_wrapper. ending walk\");"}, {"sha": "f1cacc6a34868d1aa22073a0bc00838caa8279e6", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -121,7 +121,7 @@ pub fn push_char(s: &mut ~str, ch: char) {\n         reserve_at_least(&mut *s, new_len);\n         let off = len;\n         do as_buf(*s) |buf, _len| {\n-            let buf: *mut u8 = ::cast::reinterpret_cast(&buf);\n+            let buf: *mut u8 = ::cast::transmute(buf);\n             if nb == 1u {\n                 *ptr::mut_offset(buf, off) =\n                     code as u8;\n@@ -2023,9 +2023,9 @@ pub fn as_bytes<T>(s: &const ~str, f: &fn(&~[u8]) -> T) -> T {\n  */\n pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n     unsafe {\n-        let (ptr, len): (*u8, uint) = ::cast::reinterpret_cast(&s);\n+        let (ptr, len): (*u8, uint) = ::cast::transmute(s);\n         let outgoing_tuple: (*u8, uint) = (ptr, len - 1);\n-        return ::cast::reinterpret_cast(&outgoing_tuple);\n+        return ::cast::transmute(outgoing_tuple);\n     }\n }\n \n@@ -2067,7 +2067,7 @@ pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n #[inline(always)]\n pub fn as_buf<T>(s: &str, f: &fn(*u8, uint) -> T) -> T {\n     unsafe {\n-        let v : *(*u8,uint) = ::cast::reinterpret_cast(&ptr::addr_of(&s));\n+        let v : *(*u8,uint) = ::cast::transmute(ptr::addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len)\n     }\n@@ -2217,12 +2217,12 @@ pub mod raw {\n \n     /// Create a Rust string from a null-terminated C string\n     pub unsafe fn from_c_str(c_str: *libc::c_char) -> ~str {\n-        from_buf(::cast::reinterpret_cast(&c_str))\n+        from_buf(::cast::transmute(c_str))\n     }\n \n     /// Create a Rust string from a `*c_char` buffer of the given length\n     pub unsafe fn from_c_str_len(c_str: *libc::c_char, len: uint) -> ~str {\n-        from_buf_len(::cast::reinterpret_cast(&c_str), len)\n+        from_buf_len(::cast::transmute(c_str), len)\n     }\n \n     /// Converts a vector of bytes to a new owned string.\n@@ -2246,7 +2246,7 @@ pub mod raw {\n     pub unsafe fn buf_as_slice<T>(buf: *u8, len: uint,\n                               f: &fn(v: &str) -> T) -> T {\n         let v = (buf, len + 1);\n-        assert!(is_utf8(::cast::reinterpret_cast(&v)));\n+        assert!(is_utf8(::cast::transmute(v)));\n         f(::cast::transmute(v))\n     }\n \n@@ -2294,7 +2294,7 @@ pub mod raw {\n              assert!((end <= n));\n \n              let tuple = (ptr::offset(sbuf, begin), end - begin + 1);\n-             ::cast::reinterpret_cast(&tuple)\n+             ::cast::transmute(tuple)\n         }\n     }\n \n@@ -2303,7 +2303,7 @@ pub mod raw {\n         let new_len = s.len() + 1;\n         reserve_at_least(&mut *s, new_len);\n         do as_buf(*s) |buf, len| {\n-            let buf: *mut u8 = ::cast::reinterpret_cast(&buf);\n+            let buf: *mut u8 = ::cast::transmute(buf);\n             *ptr::mut_offset(buf, len) = b;\n         }\n         set_len(&mut *s, new_len);"}, {"sha": "5d1cba79c053d3503a52116e323ca70bc6289459", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -25,8 +25,8 @@ impl<T:Durable> LocalData for @T { }\n impl Eq for @LocalData {\n     fn eq(&self, other: &@LocalData) -> bool {\n         unsafe {\n-            let ptr_a: (uint, uint) = cast::reinterpret_cast(&(*self));\n-            let ptr_b: (uint, uint) = cast::reinterpret_cast(other);\n+            let ptr_a: (uint, uint) = cast::transmute(*self);\n+            let ptr_b: (uint, uint) = cast::transmute(*other);\n             return ptr_a == ptr_b;\n         }\n     }\n@@ -44,7 +44,7 @@ extern fn cleanup_task_local_map(map_ptr: *libc::c_void) {\n         assert!(!map_ptr.is_null());\n         // Get and keep the single reference that was created at the\n         // beginning.\n-        let _map: TaskLocalMap = cast::reinterpret_cast(&map_ptr);\n+        let _map: TaskLocalMap = cast::transmute(map_ptr);\n         // All local_data will be destroyed along with the map.\n     }\n }\n@@ -61,7 +61,7 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n         let map: TaskLocalMap = @mut ~[];\n         // Use reinterpret_cast -- transmute would take map away from us also.\n         rt::rust_set_task_local_data(\n-            task, cast::reinterpret_cast(&map));\n+            task, cast::transmute(map));\n         rt::rust_task_local_data_atexit(task, cleanup_task_local_map);\n         // Also need to reference it an extra time to keep it for now.\n         let nonmut = cast::transmute::<TaskLocalMap,\n@@ -152,7 +152,7 @@ pub unsafe fn local_set<T:Durable>(\n     // own on it can be dropped when the box is destroyed. The unsafe pointer\n     // does not have a reference associated with it, so it may become invalid\n     // when the box is destroyed.\n-    let data_ptr = cast::reinterpret_cast(&data);\n+    let data_ptr = cast::transmute(data);\n     let data_box = @data as @LocalData;\n     // Construct new entry to store in the map.\n     let new_entry = Some((keyval, data_ptr, data_box));"}, {"sha": "a6bb93c20cd0b2d68073b0cea6899fdbc9aca14e", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -121,7 +121,7 @@ impl<T> Drop for ArcDestruct<T>{\n     fn finalize(&self) {\n         unsafe {\n             do task::unkillable {\n-                let mut data: ~ArcData<T> = cast::reinterpret_cast(&self.data);\n+                let mut data: ~ArcData<T> = cast::transmute(self.data);\n                 let new_count =\n                     intrinsics::atomic_xsub(&mut data.count, 1) - 1;\n                 assert!(new_count >= 0);\n@@ -160,7 +160,7 @@ pub unsafe fn shared_mutable_state<T:Owned>(data: T) ->\n pub unsafe fn get_shared_mutable_state<T:Owned>(\n     rc: *SharedMutableState<T>) -> *mut T\n {\n-    let ptr: ~ArcData<T> = cast::reinterpret_cast(&(*rc).data);\n+    let ptr: ~ArcData<T> = cast::transmute((*rc).data);\n     assert!(ptr.count > 0);\n     let r = cast::transmute(ptr.data.get_ref());\n     cast::forget(ptr);\n@@ -169,7 +169,7 @@ pub unsafe fn get_shared_mutable_state<T:Owned>(\n #[inline(always)]\n pub unsafe fn get_shared_immutable_state<'a,T:Owned>(\n         rc: &'a SharedMutableState<T>) -> &'a T {\n-    let ptr: ~ArcData<T> = cast::reinterpret_cast(&(*rc).data);\n+    let ptr: ~ArcData<T> = cast::transmute((*rc).data);\n     assert!(ptr.count > 0);\n     // Cast us back into the correct region\n     let r = cast::transmute_region(ptr.data.get_ref());\n@@ -179,7 +179,7 @@ pub unsafe fn get_shared_immutable_state<'a,T:Owned>(\n \n pub unsafe fn clone_shared_mutable_state<T:Owned>(rc: &SharedMutableState<T>)\n         -> SharedMutableState<T> {\n-    let mut ptr: ~ArcData<T> = cast::reinterpret_cast(&(*rc).data);\n+    let mut ptr: ~ArcData<T> = cast::transmute((*rc).data);\n     let new_count = intrinsics::atomic_xadd(&mut ptr.count, 1) + 1;\n     assert!(new_count >= 2);\n     cast::forget(ptr);"}, {"sha": "eac686e28d1c644cf46a8cf2327751fc63708a64", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -25,7 +25,7 @@ which case the value should be cached locally whenever possible to\n avoid hitting the mutex.\n */\n \n-use cast::{transmute, reinterpret_cast};\n+use cast::{transmute};\n use clone::Clone;\n use kinds::Owned;\n use libc::{c_void};\n@@ -223,7 +223,7 @@ fn get_global_state() -> Exclusive<GlobalState> {\n \n fn key_ptr<T:Owned>(key: GlobalDataKey<T>) -> uint {\n     unsafe {\n-        let closure: Closure = reinterpret_cast(&key);\n+        let closure: Closure = transmute(key);\n         return transmute(closure.code);\n     }\n }"}, {"sha": "1ef567e9cef0131f8bd0e3420e3ff45118e9c604", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -279,8 +279,8 @@ pub fn slice<'r,T>(v: &'r [T], start: uint, end: uint) -> &'r [T] {\n     assert!(end <= len(v));\n     do as_imm_buf(v) |p, _len| {\n         unsafe {\n-            ::cast::reinterpret_cast(\n-                &(ptr::offset(p, start),\n+            ::cast::transmute(\n+                (ptr::offset(p, start),\n                   (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n@@ -294,8 +294,8 @@ pub fn mut_slice<'r,T>(v: &'r mut [T], start: uint, end: uint)\n     assert!(end <= v.len());\n     do as_mut_buf(v) |p, _len| {\n         unsafe {\n-            ::cast::reinterpret_cast(\n-                &(ptr::mut_offset(p, start),\n+            ::cast::transmute(\n+                (ptr::mut_offset(p, start),\n                   (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n@@ -309,8 +309,8 @@ pub fn const_slice<'r,T>(v: &'r const [T], start: uint, end: uint)\n     assert!(end <= len(v));\n     do as_const_buf(v) |p, _len| {\n         unsafe {\n-            ::cast::reinterpret_cast(\n-                &(ptr::const_offset(p, start),\n+            ::cast::transmute(\n+                (ptr::const_offset(p, start),\n                   (end - start) * sys::nonzero_size_of::<T>()))\n         }\n     }\n@@ -1617,7 +1617,7 @@ pub fn as_imm_buf<T,U>(s: &[T],\n \n     unsafe {\n         let v : *(*T,uint) =\n-            ::cast::reinterpret_cast(&addr_of(&s));\n+            ::cast::transmute(addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::nonzero_size_of::<T>())\n     }\n@@ -1628,7 +1628,7 @@ pub fn as_imm_buf<T,U>(s: &[T],\n pub fn as_const_buf<T,U>(s: &const [T], f: &fn(*const T, uint) -> U) -> U {\n     unsafe {\n         let v : *(*const T,uint) =\n-            ::cast::reinterpret_cast(&addr_of(&s));\n+            ::cast::transmute(addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::nonzero_size_of::<T>())\n     }\n@@ -1639,7 +1639,7 @@ pub fn as_const_buf<T,U>(s: &const [T], f: &fn(*const T, uint) -> U) -> U {\n pub fn as_mut_buf<T,U>(s: &mut [T], f: &fn(*mut T, uint) -> U) -> U {\n     unsafe {\n         let v : *(*mut T,uint) =\n-            ::cast::reinterpret_cast(&addr_of(&s));\n+            ::cast::transmute(addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::nonzero_size_of::<T>())\n     }\n@@ -2468,21 +2468,21 @@ pub mod raw {\n     #[inline(always)]\n     pub unsafe fn to_ptr<T>(v: &[T]) -> *T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        ::cast::reinterpret_cast(&addr_of(&((**repr).data)))\n+        ::cast::transmute(addr_of(&((**repr).data)))\n     }\n \n     /** see `to_ptr()` */\n     #[inline(always)]\n     pub unsafe fn to_const_ptr<T>(v: &const [T]) -> *const T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        ::cast::reinterpret_cast(&addr_of(&((**repr).data)))\n+        ::cast::transmute(addr_of(&((**repr).data)))\n     }\n \n     /** see `to_ptr()` */\n     #[inline(always)]\n     pub unsafe fn to_mut_ptr<T>(v: &mut [T]) -> *mut T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        ::cast::reinterpret_cast(&addr_of(&((**repr).data)))\n+        ::cast::transmute(addr_of(&((**repr).data)))\n     }\n \n     /**\n@@ -2495,7 +2495,7 @@ pub mod raw {\n                                     f: &fn(v: &[T]) -> U) -> U {\n         let pair = (p, len * sys::nonzero_size_of::<T>());\n         let v : *(&'blk [T]) =\n-            ::cast::reinterpret_cast(&addr_of(&pair));\n+            ::cast::transmute(addr_of(&pair));\n         f(*v)\n     }\n \n@@ -2509,7 +2509,7 @@ pub mod raw {\n                                         f: &fn(v: &mut [T]) -> U) -> U {\n         let pair = (p, len * sys::nonzero_size_of::<T>());\n         let v : *(&'blk mut [T]) =\n-            ::cast::reinterpret_cast(&addr_of(&pair));\n+            ::cast::transmute(addr_of(&pair));\n         f(*v)\n     }\n "}, {"sha": "df61ed0e262610dd82569026811b544b0142fd3b", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -212,7 +212,7 @@ fn get_metadata_section(os: os,\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n                 let mut found = None;\n                 unsafe {\n-                    let cvbuf: *u8 = cast::reinterpret_cast(&cbuf);\n+                    let cvbuf: *u8 = cast::transmute(cbuf);\n                     let vlen = vec::len(encoder::metadata_encoding_version);\n                     debug!(\"checking %u bytes of metadata-version stamp\",\n                            vlen);"}, {"sha": "774844c06902eb6c477d28e76144108e57301695", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -177,7 +177,7 @@ pub fn IndirectBr(cx: block, Addr: ValueRef, NumDests: uint) {\n pub fn noname() -> *libc::c_char {\n     unsafe {\n         static cnull: uint = 0u;\n-        return cast::reinterpret_cast(&ptr::addr_of(&cnull));\n+        return cast::transmute(ptr::addr_of(&cnull));\n     }\n }\n \n@@ -834,8 +834,8 @@ pub fn Phi(cx: block, Ty: TypeRef, vals: &[ValueRef], bbs: &[BasicBlockRef])\n pub fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     unsafe {\n         if llvm::LLVMIsUndef(phi) == lib::llvm::True { return; }\n-        let valptr = cast::reinterpret_cast(&ptr::addr_of(&val));\n-        let bbptr = cast::reinterpret_cast(&ptr::addr_of(&bb));\n+        let valptr = cast::transmute(ptr::addr_of(&val));\n+        let bbptr = cast::transmute(ptr::addr_of(&bb));\n         llvm::LLVMAddIncoming(phi, valptr, bbptr, 1 as c_uint);\n     }\n }"}, {"sha": "3180fb5a4c8f4b72b71d4f7c1bbf81127c2ac9d2", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -1239,15 +1239,15 @@ pub fn C_array(ty: TypeRef, elts: &[ValueRef]) -> ValueRef {\n pub fn C_bytes(bytes: &[u8]) -> ValueRef {\n     unsafe {\n         return llvm::LLVMConstString(\n-            cast::reinterpret_cast(&vec::raw::to_ptr(bytes)),\n+            cast::transmute(vec::raw::to_ptr(bytes)),\n             bytes.len() as c_uint, True);\n     }\n }\n \n pub fn C_bytes_plus_null(bytes: &[u8]) -> ValueRef {\n     unsafe {\n         return llvm::LLVMConstString(\n-            cast::reinterpret_cast(&vec::raw::to_ptr(bytes)),\n+            cast::transmute(vec::raw::to_ptr(bytes)),\n             bytes.len() as c_uint, False);\n     }\n }"}, {"sha": "eb8209bf7a718b01f9e09384dc5d15fa0158537b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -84,7 +84,7 @@ fn llunused() -> ValueRef {\n }\n fn llnull() -> ValueRef {\n     unsafe {\n-        cast::reinterpret_cast(&ptr::null::<ValueRef>())\n+        cast::transmute(ptr::null::<ValueRef>())\n     }\n }\n "}, {"sha": "95d0fa984aea0472934fbf46dee862360e7ce100", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -337,10 +337,8 @@ pub type t = *t_opaque;\n \n pub fn get(t: t) -> t_box {\n     unsafe {\n-        let t2 = cast::reinterpret_cast::<t, t_box>(&t);\n-        let t3 = t2;\n-        cast::forget(t2);\n-        t3\n+        let t2: t_box = cast::transmute(t);\n+        t2\n     }\n }\n "}, {"sha": "6b536ff6b46e563f64cea0c9a233482d5dfbb831", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -36,7 +36,7 @@ use list;\n use list::{List, Cons, Nil};\n \n use core::at_vec;\n-use core::cast::reinterpret_cast;\n+use core::cast::transmute;\n use core::cast;\n use core::libc::size_t;\n use core::prelude::*;\n@@ -135,7 +135,7 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n     let fill = chunk.fill;\n \n     while idx < fill {\n-        let tydesc_data: *uint = reinterpret_cast(&ptr::offset(buf, idx));\n+        let tydesc_data: *uint = transmute(ptr::offset(buf, idx));\n         let (tydesc, is_done) = un_bitpack_tydesc_ptr(*tydesc_data);\n         let size = (*tydesc).size, align = (*tydesc).align;\n \n@@ -161,12 +161,12 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n // during an initializer.\n #[inline(always)]\n unsafe fn bitpack_tydesc_ptr(p: *TypeDesc, is_done: bool) -> uint {\n-    let p_bits: uint = reinterpret_cast(&p);\n+    let p_bits: uint = transmute(p);\n     p_bits | (is_done as uint)\n }\n #[inline(always)]\n unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n-    (reinterpret_cast(&(p & !1)), p & 1 == 1)\n+    (transmute(p & !1), p & 1 == 1)\n }\n \n pub impl Arena {\n@@ -207,9 +207,9 @@ pub impl Arena {\n         unsafe {\n             let tydesc = sys::get_type_desc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n-            let ptr: *mut T = reinterpret_cast(&ptr);\n+            let ptr: *mut T = transmute(ptr);\n             rusti::move_val_init(&mut (*ptr), op());\n-            return reinterpret_cast(&ptr);\n+            return transmute(ptr);\n         }\n     }\n \n@@ -221,9 +221,9 @@ pub impl Arena {\n         unsafe {\n             let tydesc = sys::get_type_desc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n-            let ptr: *mut T = reinterpret_cast(&ptr);\n+            let ptr: *mut T = transmute(ptr);\n             rusti::move_val_init(&mut (*ptr), op());\n-            return reinterpret_cast(&ptr);\n+            return transmute(ptr);\n         }\n     }\n \n@@ -268,18 +268,18 @@ pub impl Arena {\n             let tydesc = sys::get_type_desc::<T>();\n             let (ty_ptr, ptr) =\n                 self.alloc_nonpod_inner((*tydesc).size, (*tydesc).align);\n-            let ty_ptr: *mut uint = reinterpret_cast(&ty_ptr);\n-            let ptr: *mut T = reinterpret_cast(&ptr);\n+            let ty_ptr: *mut uint = transmute(ty_ptr);\n+            let ptr: *mut T = transmute(ptr);\n             // Write in our tydesc along with a bit indicating that it\n             // has *not* been initialized yet.\n-            *ty_ptr = reinterpret_cast(&tydesc);\n+            *ty_ptr = transmute(tydesc);\n             // Actually initialize it\n             rusti::move_val_init(&mut(*ptr), op());\n             // Now that we are done, update the tydesc to indicate that\n             // the object is there.\n             *ty_ptr = bitpack_tydesc_ptr(tydesc, true);\n \n-            return reinterpret_cast(&ptr);\n+            return transmute(ptr);\n         }\n     }\n \n@@ -292,18 +292,18 @@ pub impl Arena {\n             let tydesc = sys::get_type_desc::<T>();\n             let (ty_ptr, ptr) =\n                 self.alloc_nonpod_inner((*tydesc).size, (*tydesc).align);\n-            let ty_ptr: *mut uint = reinterpret_cast(&ty_ptr);\n-            let ptr: *mut T = reinterpret_cast(&ptr);\n+            let ty_ptr: *mut uint = transmute(ty_ptr);\n+            let ptr: *mut T = transmute(ptr);\n             // Write in our tydesc along with a bit indicating that it\n             // has *not* been initialized yet.\n-            *ty_ptr = reinterpret_cast(&tydesc);\n+            *ty_ptr = transmute(tydesc);\n             // Actually initialize it\n             rusti::move_val_init(&mut(*ptr), op());\n             // Now that we are done, update the tydesc to indicate that\n             // the object is there.\n             *ty_ptr = bitpack_tydesc_ptr(tydesc, true);\n \n-            return reinterpret_cast(&ptr);\n+            return transmute(ptr);\n         }\n     }\n "}, {"sha": "0b297e9e6ba72a526bd04734f48473e1169a8f08", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -10,7 +10,7 @@\n \n //! Unsafe debugging functions for inspecting values.\n \n-use core::cast::reinterpret_cast;\n+use core::cast::transmute;\n use core::ptr;\n use core::sys;\n \n@@ -64,9 +64,9 @@ pub fn debug_fn<T>(x: T) {\n }\n \n pub unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n-    reinterpret_cast(\n-        &rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n-                              reinterpret_cast(&x)))\n+    transmute(\n+        rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n+                              transmute(x)))\n }\n \n /// Triggers a debugger breakpoint"}, {"sha": "3992cc41961d80b296e9b0a7e420c6ce1863bc38", "filename": "src/libstd/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -65,7 +65,7 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n                                      len * sys::size_of::<A>());\n                         info!(\"pre-slice: %?\", (base, slice));\n                         let slice : &[A] =\n-                            cast::reinterpret_cast(&slice);\n+                            cast::transmute(slice);\n                         info!(\"slice: %?\",\n                                        (base, vec::len(slice), end - base));\n                         assert!((vec::len(slice) == end - base));"}, {"sha": "48ecc0fc851d37707be25969160fdc1d0620e452", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -839,7 +839,7 @@ pub mod node {\n                   option::Some(x) => {\n                     //FIXME (#2744): Replace with memcpy or something similar\n                     let mut local_buf: ~[u8] =\n-                        cast::reinterpret_cast(&*x.content);\n+                        cast::transmute(*x.content);\n                     let mut i = x.byte_offset;\n                     while i < x.byte_len {\n                         buf[offset] = local_buf[i];"}, {"sha": "2497064ae0408db3c37289797580f629e1c1a4f3", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e017ab4e0d59c82109604fa1917abd66b72e0e0/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=0e017ab4e0d59c82109604fa1917abd66b72e0e0", "patch": "@@ -833,7 +833,7 @@ mod tests {\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n             let sharedstate: &mut int =\n-                unsafe { cast::reinterpret_cast(&ptr) };\n+                unsafe { cast::transmute(ptr) };\n             access_shared(sharedstate, m2, 10);\n             c.send(());\n \n@@ -1111,7 +1111,7 @@ mod tests {\n         let ptr = ptr::addr_of(&(*sharedstate));\n         do task::spawn || {\n             let sharedstate: &mut int =\n-                unsafe { cast::reinterpret_cast(&ptr) };\n+                unsafe { cast::transmute(ptr) };\n             access_shared(sharedstate, &x2, mode1, 10);\n             c.send(());\n         }"}]}