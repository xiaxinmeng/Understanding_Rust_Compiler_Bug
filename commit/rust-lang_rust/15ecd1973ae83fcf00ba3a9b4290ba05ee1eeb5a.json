{"sha": "15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWNkMTk3M2FlODNmY2YwMGJhM2E5YjQyOTBiYTA1ZWUxZWViNWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-15T16:32:24Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-09-15T16:33:22Z"}, "message": "Add `LintGroup` and `LintAlias`", "tree": {"sha": "5b4f293bf8187b51518a93552bbb89923e032059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4f293bf8187b51518a93552bbb89923e032059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "html_url": "https://github.com/rust-lang/rust/commit/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c0f13ff164dc2e05b488e3dec939dee25e2745", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c0f13ff164dc2e05b488e3dec939dee25e2745", "html_url": "https://github.com/rust-lang/rust/commit/52c0f13ff164dc2e05b488e3dec939dee25e2745"}], "stats": {"total": 90, "additions": 59, "deletions": 31}, "files": [{"sha": "a8f43f729748c662f1f56ed5c1bdf6a0150a4b2a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 59, "deletions": 31, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "patch": "@@ -67,11 +67,8 @@ pub struct LintStore {\n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n \n-    /// Map of registered lint groups to what lints they expand to. The first\n-    /// bool is true if the lint group was added by a plugin. The optional string\n-    /// is used to store the new names of deprecated lint group names and is paired\n-    /// with `true` if the deprecation is silent.\n-    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<(&'static str, bool)>)>,\n+    /// Map of registered lint groups to what lints they expand to.\n+    lint_groups: FxHashMap<&'static str, LintGroup>,\n \n     /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n@@ -128,6 +125,18 @@ pub enum FindLintError {\n     Removed,\n }\n \n+struct LintAlias {\n+    name: &'static str,\n+    /// Whether deprecation warnings should be suppressed for this alias.\n+    silent: bool,\n+}\n+\n+struct LintGroup {\n+    lint_ids: Vec<LintId>,\n+    from_plugin: bool,\n+    depr: Option<LintAlias>,\n+}\n+\n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist\n@@ -162,8 +171,14 @@ impl LintStore {\n \n     pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n         self.lint_groups.iter()\n-            .filter(|(_, (_, _, d))| d.is_none()) // Don't display deprecated lint groups.\n-            .map(|(k, v)| (*k, v.0.clone(), v.1)).collect()\n+            .filter(|(_, LintGroup { depr, .. })| {\n+                // Don't display deprecated lint groups.\n+                depr.is_none()\n+            })\n+            .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n+                (*k, lint_ids.clone(), *from_plugin)\n+            })\n+            .collect()\n     }\n \n     pub fn register_early_pass(&mut self,\n@@ -251,7 +266,11 @@ impl LintStore {\n         lint_name: &'static str,\n         alias: &'static str,\n     ) {\n-        self.lint_groups.insert(alias, (vec![], false, Some((lint_name, true))));\n+        self.lint_groups.insert(alias, LintGroup {\n+            lint_ids: vec![],\n+            from_plugin: false,\n+            depr: Some(LintAlias { name: lint_name, silent: true }),\n+        });\n     }\n \n     pub fn register_group(\n@@ -264,11 +283,18 @@ impl LintStore {\n     ) {\n         let new = self\n             .lint_groups\n-            .insert(name, (to, from_plugin, None))\n+            .insert(name, LintGroup {\n+                lint_ids: to,\n+                from_plugin,\n+                depr: None,\n+            })\n             .is_none();\n         if let Some(deprecated) = deprecated_name {\n-            self.lint_groups\n-                .insert(deprecated, (vec![], from_plugin, Some((name, false))));\n+            self.lint_groups.insert(deprecated, LintGroup {\n+                lint_ids: vec![],\n+                from_plugin,\n+                depr: Some(LintAlias { name, silent: false }),\n+            });\n         }\n \n         if !new {\n@@ -309,12 +335,12 @@ impl LintStore {\n             None => {\n                 loop {\n                     return match self.lint_groups.get(lint_name) {\n-                        Some((ids, _, depr)) => {\n-                            if let Some((name, _)) = depr {\n+                        Some(LintGroup {lint_ids, depr, .. }) => {\n+                            if let Some(LintAlias { name, .. }) = depr {\n                                 lint_name = name;\n                                 continue;\n                             }\n-                            Ok(ids.clone())\n+                            Ok(lint_ids.clone())\n                         }\n                         None => Err(FindLintError::Removed)\n                     };\n@@ -383,7 +409,9 @@ impl LintStore {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n                     None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n-                    Some(ids) => return CheckLintNameResult::Tool(Ok(&ids.0)),\n+                    Some(LintGroup { lint_ids, .. }) => {\n+                        return CheckLintNameResult::Tool(Ok(&lint_ids));\n+                    }\n                 },\n                 Some(&Id(ref id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n                 // If the lint was registered as removed or renamed by the lint tool, we don't need\n@@ -407,20 +435,20 @@ impl LintStore {\n                 // If neither the lint, nor the lint group exists check if there is a `clippy::`\n                 // variant of this lint\n                 None => self.check_tool_name_for_backwards_compat(&complete_name, \"clippy\"),\n-                Some(ids) => {\n+                Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Check if the lint group name is deprecated\n-                    if let Some((new_name, silent)) = ids.2 {\n-                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return if silent {\n-                            CheckLintNameResult::Ok(&lint_ids.0)\n+                    if let Some(LintAlias { name, silent }) = depr {\n+                        let LintGroup { lint_ids, .. } = self.lint_groups.get(name).unwrap();\n+                        return if *silent {\n+                            CheckLintNameResult::Ok(&lint_ids)\n                         } else {\n                             CheckLintNameResult::Tool(Err((\n-                                Some(&lint_ids.0),\n-                                new_name.to_string(),\n+                                Some(&lint_ids),\n+                                name.to_string(),\n                             )))\n                         };\n                     }\n-                    CheckLintNameResult::Ok(&ids.0)\n+                    CheckLintNameResult::Ok(&lint_ids)\n                 }\n             },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n@@ -437,20 +465,20 @@ impl LintStore {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n                 None => CheckLintNameResult::NoLint,\n-                Some(ids) => {\n+                Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Reaching this would be weird, but let's cover this case anyway\n-                    if let Some((new_name, silent)) = ids.2 {\n-                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return if silent {\n-                            CheckLintNameResult::Tool(Err((Some(&lint_ids.0), complete_name)))\n+                    if let Some(LintAlias { name, silent }) = depr {\n+                        let LintGroup { lint_ids, .. } = self.lint_groups.get(name).unwrap();\n+                        return if *silent {\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                         } else {\n                             CheckLintNameResult::Tool(Err((\n-                                Some(&lint_ids.0),\n-                                new_name.to_string(),\n+                                Some(&lint_ids),\n+                                name.to_string(),\n                             )))\n                         };\n                     }\n-                    CheckLintNameResult::Tool(Err((Some(&ids.0), complete_name)))\n+                    CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                 }\n             },\n             Some(&Id(ref id)) => {"}]}