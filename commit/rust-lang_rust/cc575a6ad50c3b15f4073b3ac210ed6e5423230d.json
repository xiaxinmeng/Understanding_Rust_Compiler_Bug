{"sha": "cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTc1YTZhZDUwYzNiMTVmNDA3M2IzYWMyMTBlZDZlNTQyMzIzMGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-25T17:30:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-28T09:38:36Z"}, "message": "rustc: use IndexVec<DefIndex, T> instead of Vec<T>.", "tree": {"sha": "5a6f7845f51385d9234bceb2ddab023f316591e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6f7845f51385d9234bceb2ddab023f316591e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "html_url": "https://github.com/rust-lang/rust/commit/cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9285d401a6070094747465962bc49969b93e14c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9285d401a6070094747465962bc49969b93e14c5", "html_url": "https://github.com/rust-lang/rust/commit/9285d401a6070094747465962bc49969b93e14c5"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "b0fa844c81881a01710696d6f1594ec4f1fdabdb", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         let mut collector = NodeCollector {\n             krate,\n             source_map: sess.source_map(),\n-            map: vec![None; definitions.def_index_count()],\n+            map: IndexVec::from_elem_n(IndexVec::new(), definitions.def_index_count()),\n             parent_node: hir::CRATE_HIR_ID,\n             current_signature_dep_index: root_mod_sig_dep_index,\n             current_full_dep_index: root_mod_full_dep_index,\n@@ -227,12 +227,8 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n         debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner.index()];\n+        let local_map = &mut self.map[id.owner];\n         let i = id.local_id.as_u32() as usize;\n-        if local_map.is_none() {\n-            *local_map = Some(IndexVec::with_capacity(i + 1));\n-        }\n-        let local_map = local_map.as_mut().unwrap();\n         let len = local_map.len();\n         if i >= len {\n             local_map.extend(repeat(None).take(i - len + 1));"}, {"sha": "be8d82173e481e87a19e4252ec85c78e0ec05421", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "patch": "@@ -27,8 +27,8 @@ use syntax_pos::{Span, DUMMY_SP};\n /// There is one `DefPathTable` for each crate.\n #[derive(Clone, Default, RustcDecodable, RustcEncodable)]\n pub struct DefPathTable {\n-    index_to_key: Vec<DefKey>,\n-    def_path_hashes: Vec<DefPathHash>,\n+    index_to_key: IndexVec<DefIndex, DefKey>,\n+    def_path_hashes: IndexVec<DefIndex, DefPathHash>,\n }\n \n impl DefPathTable {\n@@ -53,14 +53,14 @@ impl DefPathTable {\n \n     #[inline(always)]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n-        self.index_to_key[index.index()]\n+        self.index_to_key[index]\n     }\n \n     #[inline(always)]\n     pub fn def_path_hash(&self, index: DefIndex) -> DefPathHash {\n-        let ret = self.def_path_hashes[index.index()];\n-        debug!(\"def_path_hash({:?}) = {:?}\", index, ret);\n-        return ret\n+        let hash = self.def_path_hashes[index];\n+        debug!(\"def_path_hash({:?}) = {:?}\", index, hash);\n+        hash\n     }\n \n     pub fn add_def_path_hashes_to(&self,\n@@ -92,7 +92,7 @@ impl DefPathTable {\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n-    def_index_to_node: Vec<ast::NodeId>,\n+    def_index_to_node: IndexVec<DefIndex, ast::NodeId>,\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     /// If `ExpnId` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n@@ -375,7 +375,7 @@ impl Definitions {\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n-            let node_id = self.def_index_to_node[def_id.index.index()];\n+            let node_id = self.def_index_to_node[def_id.index];\n             if node_id != ast::DUMMY_NODE_ID {\n                 return Some(node_id);\n             }\n@@ -404,7 +404,7 @@ impl Definitions {\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> hir::HirId {\n-        let node_id = self.def_index_to_node[def_index.index()];\n+        let node_id = self.def_index_to_node[def_index];\n         self.node_to_hir_id[node_id]\n     }\n "}, {"sha": "acadd77cc36c08872c87ffdd2a63dc4aaa5912eb", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc575a6ad50c3b15f4073b3ac210ed6e5423230d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=cc575a6ad50c3b15f4073b3ac210ed6e5423230d", "patch": "@@ -156,9 +156,9 @@ impl Forest {\n \n /// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n /// but it is implemented as 2 layers of arrays.\n-/// - first we have `A = Vec<Option<B>>` mapping a `DefIndex`'s index to an inner value\n+/// - first we have `A = IndexVec<DefIndex, B>` mapping `DefIndex`s to an inner value\n /// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which gives you the `Entry`.\n-pub(super) type HirEntryMap<'hir> = Vec<Option<IndexVec<ItemLocalId, Option<Entry<'hir>>>>>;\n+pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Option<Entry<'hir>>>>;\n \n /// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n #[derive(Clone)]\n@@ -222,8 +222,8 @@ impl<'map> Iterator for ParentHirIterator<'map> {\n impl<'hir> Map<'hir> {\n     #[inline]\n     fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map.get(id.owner.index())?;\n-        local_map.as_ref()?.get(id.local_id)?.as_ref()\n+        let local_map = self.map.get(id.owner)?;\n+        local_map.get(id.local_id)?.as_ref()\n     }\n \n     /// Registers a read in the dependency graph of the AST node with\n@@ -1031,14 +1031,12 @@ impl<'hir> Map<'hir> {\n         // see the comment on `HirEntryMap`.\n         // Iterate over all the indices and return a reference to\n         // local maps and their index given that they exist.\n-        self.map.iter().enumerate().filter_map(|(i, local_map)| {\n-            local_map.as_ref().map(|m| (i, m))\n-        }).flat_map(move |(array_index, local_map)| {\n+        self.map.iter_enumerated().flat_map(move |(owner, local_map)| {\n             // Iterate over each valid entry in the local map.\n             local_map.iter_enumerated().filter_map(move |(i, entry)| entry.map(move |_| {\n                 // Reconstruct the `HirId` based on the 3 indices we used to find it.\n                 HirId {\n-                    owner: DefIndex::from(array_index),\n+                    owner,\n                     local_id: i,\n                 }\n             }))"}]}