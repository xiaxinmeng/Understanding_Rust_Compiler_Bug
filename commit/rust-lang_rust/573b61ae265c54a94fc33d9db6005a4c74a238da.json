{"sha": "573b61ae265c54a94fc33d9db6005a4c74a238da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2I2MWFlMjY1YzU0YTk0ZmMzM2Q5ZGI2MDA1YTRjNzRhMjM4ZGE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-06-13T01:06:07Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-06-21T01:12:10Z"}, "message": "[const-prop] Introduce getter/setter functions", "tree": {"sha": "d136c48e52f2bedc54c38ce3a63bd684e2dd1083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d136c48e52f2bedc54c38ce3a63bd684e2dd1083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573b61ae265c54a94fc33d9db6005a4c74a238da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573b61ae265c54a94fc33d9db6005a4c74a238da", "html_url": "https://github.com/rust-lang/rust/commit/573b61ae265c54a94fc33d9db6005a4c74a238da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573b61ae265c54a94fc33d9db6005a4c74a238da/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d9981f04e8957345205c07adc2742886420ac37", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9981f04e8957345205c07adc2742886420ac37", "html_url": "https://github.com/rust-lang/rust/commit/1d9981f04e8957345205c07adc2742886420ac37"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "830f8239a09da3f9fb048b10429663e2538d35aa", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/573b61ae265c54a94fc33d9db6005a4c74a238da/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573b61ae265c54a94fc33d9db6005a4c74a238da/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=573b61ae265c54a94fc33d9db6005a4c74a238da", "patch": "@@ -147,6 +147,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+        self.places[local]\n+    }\n+\n+    fn set_const(&mut self, local: Local, c: Option<Const<'tcx>>) {\n+        self.places[local] = c;\n+    }\n+\n     fn use_ecx<F, T>(\n         &mut self,\n         source_info: SourceInfo,\n@@ -296,7 +304,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         trace!(\"eval_place(place={:?})\", place);\n         place.iterate(|place_base, place_projection| {\n             let mut eval = match place_base {\n-                PlaceBase::Local(loc) => self.places[*loc].clone()?,\n+                PlaceBase::Local(loc) => self.get_const(*loc).clone()?,\n                 PlaceBase::Static(box Static {kind: StaticKind::Promoted(promoted), ..}) => {\n                     let generics = self.tcx.generics_of(self.source.def_id());\n                     if generics.requires_monomorphization(self.tcx) {\n@@ -699,8 +707,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         trace!(\"checking whether {:?} can be stored to {:?}\", value, local);\n                         if self.can_const_prop[local] {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n-                            assert!(self.places[local].is_none());\n-                            self.places[local] = Some(value);\n+                            assert!(self.get_const(local).is_none());\n+                            self.set_const(local, Some(value));\n \n                             if self.should_const_prop() {\n                                 self.replace_with_const(\n@@ -740,7 +748,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                     place = &proj.base;\n                                 }\n                                 if let Place::Base(PlaceBase::Local(local)) = *place {\n-                                    self.places[local] = None;\n+                                    self.set_const(local, None);\n                                 }\n                             },\n                             Operand::Constant(_) => {}"}]}