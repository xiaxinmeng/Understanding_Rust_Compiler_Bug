{"sha": "92b151287fcda73db8e95eeca8be97d66905626d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjE1MTI4N2ZjZGE3M2RiOGU5NWVlY2E4YmU5N2Q2NjkwNTYyNmQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-26T22:59:24Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-10-28T18:37:49Z"}, "message": "suggest `const_in_array_repeat_expression` flag\n\nThis commit adds a suggestion to add the\n`#![feature(const_in_array_repeat_expression)]` attribute to the crate\nwhen a promotable expression is used in a repeat expression.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "6d5755c6e0e889c27150d38fa9c83ae6d65760fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5755c6e0e889c27150d38fa9c83ae6d65760fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b151287fcda73db8e95eeca8be97d66905626d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl23NX4ACgkQJZLnbIc4\nH9lK1A//XOUVa/wz+tkU35c9pzqnY1XkHR5HvlEXspd9oQsh1urcfYxgUER1/NVh\nsQGSAbHvjGBItIQn1iV1E6qGLO+wcZsuLOdq/Clkcz/jWqrxH/QahX+9BIuOG2GO\nDLEyQdjQxgNUJFZcJI63VpSlomOS2fjtbun+g8bOmegZhq1KhLuuIpERp4PGsu6P\nvsXU37Nrc7VT645QRBZGUDqwvvGSj4VgzeUIUvPMsQSYTCCL7kEa6oos+Twpglcb\nKxQ7MqmHKXy24NVo1wXxdmLplgNTImq0ScSzTHr9Pfg8pIEP+vRTWFUTwb1A3Thy\neDWmnHpXBsPecaIpcHcTHrv5QFNpYqldjO88p1PuGmdECTUHEG2vHZNyu88pLwsN\n37hF5e/AFfvdO1+F00cujoMrrI2BilY7QfemrNB8gK11CPut0UY6PFUhmIrAcH8E\nHFtB/v3UUrW6JBOtrYTleSk0Jx8cQHYls4RE1j/pHKvhMMw0HQ7if8WAyFK80H/L\noyxOXuoyxaNoMGZPuf0KNGPoMI8YiDCP/+B1ozfmTXVfwy7z0pWIdRQXP+VQD2oJ\nz7PX9TpkKSg29wPTL/5dE2dwQbh2KeKW9v9YYADp1ncRscPqWW2/BQRCq9BjutSh\nH3+BKuMRH0oQ/BsGcmVcDTgBGaQuZfAmYReI811EJfR8/0DNeec=\n=Y46P\n-----END PGP SIGNATURE-----", "payload": "tree 6d5755c6e0e889c27150d38fa9c83ae6d65760fd\nparent 03a50ae9b87021d4a166c70d2c932f1cb0aa8f28\nauthor David Wood <david@davidtw.co> 1572130764 +0100\ncommitter David Wood <david@davidtw.co> 1572287869 +0000\n\nsuggest `const_in_array_repeat_expression` flag\n\nThis commit adds a suggestion to add the\n`#![feature(const_in_array_repeat_expression)]` attribute to the crate\nwhen a promotable expression is used in a repeat expression.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b151287fcda73db8e95eeca8be97d66905626d", "html_url": "https://github.com/rust-lang/rust/commit/92b151287fcda73db8e95eeca8be97d66905626d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b151287fcda73db8e95eeca8be97d66905626d/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "html_url": "https://github.com/rust-lang/rust/commit/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "b55c0f29a70ec0fb6b509f2e95601bc830b6a260", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -2112,9 +2112,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\"required by cast to type `{}`\",\n                                   self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec => {\n+            ObligationCauseCode::RepeatVec(suggest_const_in_array_repeat_expression) => {\n                 err.note(\"the `Copy` trait is required because the \\\n                           repeated element will be copied\");\n+                if suggest_const_in_array_repeat_expression {\n+                    err.note(\"this array initializer can be evaluated at compile-time, for more \\\n+                              information, see issue \\\n+                              https://github.com/rust-lang/rust/issues/49147\");\n+                    if tcx.sess.opts.unstable_features.is_nightly_build() {\n+                        err.help(\"add `#![feature(const_in_array_repeat_expression)]` to the \\\n+                                  crate attributes to enable\");\n+                    }\n+                }\n             }\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");"}, {"sha": "b8275299562ce59164c1ef99e5714e90a28a2202", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -206,8 +206,9 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be Sized\n     SizedYieldType,\n-    /// [T,..n] --> T must be Copy\n-    RepeatVec,\n+    /// [T,..n] --> T must be Copy. If `true`, suggest `const_in_array_repeat_expression` feature\n+    /// flag.\n+    RepeatVec(bool),\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized { adt_kind: AdtKind, last: bool },"}, {"sha": "109e884f8bd164f6d372f8edbeff7aa4a76cb30c", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -494,7 +494,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedArgumentType => Some(super::SizedArgumentType),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n-            super::RepeatVec => Some(super::RepeatVec),\n+            super::RepeatVec(suggest_flag) => Some(super::RepeatVec(suggest_flag)),\n             super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n             super::ConstSized => Some(super::ConstSized),\n             super::ConstPatternStructural => Some(super::ConstPatternStructural),"}, {"sha": "9f2f174553f036da634e5041c592f650ba3f91c0", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -16,6 +16,7 @@ use crate::borrow_check::nll::type_check::free_region_relations::{\n };\n use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n use crate::borrow_check::nll::ToRegionVid;\n+use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n@@ -1983,12 +1984,19 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     let span = body.source_info(location).span;\n                     let ty = operand.ty(body, tcx);\n                     if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                        // To determine if `const_in_array_repeat_expression` feature gate should\n+                        // be mentioned, need to check if the rvalue is promotable.\n+                        let should_suggest =\n+                            should_suggest_const_in_array_repeat_expressions_attribute(\n+                                tcx, self.mir_def_id, body, operand);\n+                        debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n+\n                         self.infcx.report_selection_error(\n                             &traits::Obligation::new(\n                                 ObligationCause::new(\n                                     span,\n                                     self.tcx().hir().def_index_to_hir_id(self.mir_def_id.index),\n-                                    traits::ObligationCauseCode::RepeatVec,\n+                                    traits::ObligationCauseCode::RepeatVec(should_suggest),\n                                 ),\n                                 self.param_env,\n                                 ty::Predicate::Trait(ty::Binder::bind(ty::TraitPredicate {"}, {"sha": "8def717f1580a3699f069e367689c944449eade0", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -1110,3 +1110,28 @@ pub fn promote_candidates<'tcx>(\n \n     promotions\n }\n+\n+/// This function returns `true` if the `const_in_array_repeat_expression` feature attribute should\n+/// be suggested. This function is probably quite expensive, it shouldn't be run in the happy path.\n+/// Feature attribute should be suggested if `operand` can be promoted and the feature is not\n+/// enabled.\n+crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    mir_def_id: DefId,\n+    body: &Body<'tcx>,\n+    operand: &Operand<'tcx>,\n+) -> bool {\n+    let mut rpo = traversal::reverse_postorder(body);\n+    let (temps, _) = collect_temps_and_candidates(tcx, body, &mut rpo);\n+    let validator = Validator {\n+        item: Item::new(tcx, mir_def_id, body),\n+        temps: &temps,\n+        explicit: false,\n+    };\n+\n+    let should_promote = validator.validate_operand(operand).is_ok();\n+    let feature_flag = tcx.features().const_in_array_repeat_expressions;\n+    debug!(\"should_suggest_const_in_array_repeat_expressions_flag: mir_def_id={:?} \\\n+            should_promote={:?} feature_flag={:?}\", mir_def_id, should_promote, feature_flag);\n+    should_promote && !feature_flag\n+}"}, {"sha": "3702dd9ad493fb3df20685c10d22e8addca7b8bb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -878,13 +878,11 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             },\n             ValueSource::Rvalue(&Rvalue::Repeat(ref operand, _)) => {\n-                let candidate = Candidate::Repeat(location);\n-                let not_promotable = IsNotImplicitlyPromotable::in_operand(self, operand) ||\n-                                     IsNotPromotable::in_operand(self, operand);\n-                debug!(\"assign: self.def_id={:?} operand={:?}\", self.def_id, operand);\n-                if !not_promotable && self.tcx.features().const_in_array_repeat_expressions {\n-                    debug!(\"assign: candidate={:?}\", candidate);\n-                    self.promotion_candidates.push(candidate);\n+                debug!(\"assign: self.cx.mode={:?} self.def_id={:?} location={:?} operand={:?}\",\n+                       self.cx.mode, self.def_id, location, operand);\n+                if self.should_promote_repeat_expression(operand) &&\n+                        self.tcx.features().const_in_array_repeat_expressions {\n+                    self.promotion_candidates.push(Candidate::Repeat(location));\n                 }\n             },\n             _ => {},\n@@ -1149,6 +1147,15 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         candidates\n     }\n+\n+    /// Returns `true` if the operand of a repeat expression is promotable.\n+    fn should_promote_repeat_expression(&self, operand: &Operand<'tcx>) -> bool {\n+        let not_promotable = IsNotImplicitlyPromotable::in_operand(self, operand) ||\n+                             IsNotPromotable::in_operand(self, operand);\n+        debug!(\"should_promote_repeat_expression: operand={:?} not_promotable={:?}\",\n+               operand, not_promotable);\n+        !not_promotable\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {"}, {"sha": "c3c554d7d27f9938f3e7101e871c79d7f1ed18e4", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -3,9 +3,16 @@\n \n struct Bar;\n \n+// This function would compile with the feature gate, and tests that it is suggested.\n fn foo() {\n     let arr: [Option<String>; 2] = [None::<String>; 2];\n     //~^ ERROR the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied [E0277]\n }\n \n+// This function would not compile with the feature gate, and tests that it is not suggested.\n+fn bar() {\n+    let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n+    //~^ ERROR the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied [E0277]\n+}\n+\n fn main() {}"}, {"sha": "cd9242de88f25f369d75226754548a8ef54a9a66", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92b151287fcda73db8e95eeca8be97d66905626d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92b151287fcda73db8e95eeca8be97d66905626d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr?ref=92b151287fcda73db8e95eeca8be97d66905626d", "patch": "@@ -1,13 +1,25 @@\n error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied\n-  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:7:36\n+  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:8:36\n    |\n LL |     let arr: [Option<String>; 2] = [None::<String>; 2];\n    |                                    ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<std::string::String>`\n    |\n    = help: the following implementations were found:\n              <std::option::Option<T> as std::marker::Copy>\n    = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: this array initializer can be evaluated at compile-time, for more information, see issue https://github.com/rust-lang/rust/issues/49147\n+   = help: add `#![feature(const_in_array_repeat_expression)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `std::option::Option<std::string::String>: std::marker::Copy` is not satisfied\n+  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:14:36\n+   |\n+LL |     let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<std::string::String>`\n+   |\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}