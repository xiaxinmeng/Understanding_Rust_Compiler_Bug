{"sha": "85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzJiMWU1ZjRjYmU3ZDMxZWJiYWY2Yjk2MjAzNTAwMjAyNTFjMTU=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-06T15:56:18Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-02-06T15:56:18Z"}, "message": "Switched to `snippet_with_macro_callsite`", "tree": {"sha": "2d0f10dd04678ba841f0baf17506d928c97f5e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0f10dd04678ba841f0baf17506d928c97f5e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "html_url": "https://github.com/rust-lang/rust/commit/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4", "html_url": "https://github.com/rust-lang/rust/commit/cd6748749a454e07a3f7f72c79bc62c2f5d6b9e4"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "628725c52e94e6e889ea928222e46b9766157e1a", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{in_macro, span_lint_and_then, sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg, sugg, snippet_with_macro_callsite};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::*;\n+use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -11,7 +11,6 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** The semicolon might be optional but when\n     /// extending the block with new code, it doesn't require a change in previous last line.\n-    /// It's also more idiomatic.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -29,7 +28,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub SEMICOLON_IF_NOTHING_RETURNED,\n-    pedantic,\n+    restriction,\n     \"add a semicolon if nothing is returned\"\n }\n \n@@ -42,31 +41,25 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if let Some(expr) = block.expr;\n             let t_expr = cx.typeck_results().expr_ty(expr);\n             if t_expr.is_unit();\n+            if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n+            if !snippet.ends_with('}');\n             then {\n-                match expr.kind {\n-                    ExprKind::Loop(..) | \n-                    ExprKind::Match(..) | \n-                    ExprKind::Block(..) | \n-                    ExprKind::If(..) if !in_macro(expr.span) => return,\n-                   _ => (),\n+                // filter out the desugared `for` loop\n+                if let ExprKind::DropTemps(..) = &expr.kind {\n+                    return;\n                 }\n \n                 let sugg = sugg::Sugg::hir(cx, &expr, \"..\");\n                 let suggestion = format!(\"{0};\", sugg);\n-                span_lint_and_then(\n+                span_lint_and_sugg(\n                     cx,\n                     SEMICOLON_IF_NOTHING_RETURNED,\n                     expr.span,\n-                    \"add `;` to terminate block\",\n-                    | diag | {\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"add `;`\",\n-                            suggestion,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                )\n+                    \"consider adding a `;` to the last statement for consistent formatting\",\n+                    \"add a `;` here\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n     }"}, {"sha": "0abe2cca26757325fc4f7d16c45d9d07ea5912f2", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "patch": "@@ -46,3 +46,10 @@ fn foobar(x: i32) {\n         y = x + 1;\n     }\n }\n+\n+fn loop_test(x: i32) {\n+    let y: i32;\n+    for &ext in &[\"stdout\", \"stderr\", \"fixed\"] {\n+        println!(\"{}\", ext);\n+    }\n+}"}, {"sha": "56211ff7f773c51b797c287c97447ac405ef73d9", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85c2b1e5f4cbe7d31ebbaf6b9620350020251c15/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=85c2b1e5f4cbe7d31ebbaf6b9620350020251c15", "patch": "@@ -1,4 +1,4 @@\n-error: add `;` to terminate block\n+error: consider adding a `;` to the last statement for consistent formatting\n   --> $DIR/semicolon_if_nothing_returned.rs:8:5\n    |\n LL |     println!(\"Hello\")\n@@ -7,17 +7,17 @@ LL |     println!(\"Hello\")\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: add `;` to terminate block\n+error: consider adding a `;` to the last statement for consistent formatting\n   --> $DIR/semicolon_if_nothing_returned.rs:12:5\n    |\n LL |     get_unit()\n-   |     ^^^^^^^^^^ help: add `;`: `get_unit();`\n+   |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n-error: add `;` to terminate block\n+error: consider adding a `;` to the last statement for consistent formatting\n   --> $DIR/semicolon_if_nothing_returned.rs:17:5\n    |\n LL |     y = x + 1\n-   |     ^^^^^^^^^ help: add `;`: `y = x + 1;`\n+   |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: aborting due to 3 previous errors\n "}]}