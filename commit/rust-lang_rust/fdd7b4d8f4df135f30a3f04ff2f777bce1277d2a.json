{"sha": "fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZDdiNGQ4ZjRkZjEzNWYzMGEzZjA0ZmYyZjc3N2JjZTEyNzdkMmE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-17T23:40:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-17T23:40:34Z"}, "message": "core: first working sketch of a condition system.", "tree": {"sha": "befe5d4f34659285dbcfbcc60e2d02765c865ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befe5d4f34659285dbcfbcc60e2d02765c865ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "html_url": "https://github.com/rust-lang/rust/commit/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "html_url": "https://github.com/rust-lang/rust/commit/e7e1bab27fa8341467b5160506bbd580b5f6bbb7"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "5f61f2cd53b174255eb3a88234e4fe20e920f71e", "filename": "src/libcore/condition.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "patch": "@@ -0,0 +1,117 @@\n+// helper for transmutation, shown below.\n+type RustClosure = (int,int);\n+\n+struct Condition {\n+    key: task::local_data::LocalDataKey<Handler>\n+}\n+\n+struct Handler {\n+    // Handler should link to previous handler and\n+    // reinstall it when popped.\n+    handle: RustClosure\n+}\n+\n+\n+struct ProtectBlock {\n+    cond: &Condition,\n+    inner: RustClosure\n+}\n+\n+struct PopHandler {\n+    cond: &Condition,\n+    drop {\n+        unsafe {\n+            task::local_data::local_data_pop(self.cond.key);\n+        }\n+    }\n+}\n+\n+struct HandleBlock {\n+    pb: &ProtectBlock,\n+    handler: @Handler,\n+    drop {\n+        unsafe {\n+            task::local_data::local_data_set(self.pb.cond.key,\n+                                             self.handler);\n+            let _pop = PopHandler { cond: self.pb.cond };\n+            // transmutation to avoid copying non-copyable, should\n+            // be fixable by tracking closure pointees in regionck.\n+            let f : &fn() = ::cast::transmute(self.pb.inner);\n+            f();\n+        }\n+    }\n+}\n+\n+impl ProtectBlock {\n+    fn handle<T, U: Copy>(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self {\n+        unsafe {\n+            let p : *RustClosure = ::cast::transmute(&h);\n+            HandleBlock { pb: self,\n+                          handler: @Handler{handle: *p} }\n+        }\n+    }\n+}\n+\n+\n+impl Condition {\n+\n+    fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self {\n+        unsafe {\n+            // transmutation to avoid copying non-copyable, should\n+            // be fixable by tracking closure pointees in regionck.\n+            let p : *RustClosure = ::cast::transmute(&inner);\n+            ProtectBlock { cond: self,\n+                           inner: *p } }\n+    }\n+\n+    fn raise<T, U: Copy>(t:&T) -> U {\n+        unsafe {\n+            match task::local_data::local_data_get(self.key) {\n+                None => fail,\n+                Some(handler) => {\n+                    io::println(\"got handler\");\n+                    let f : &fn(&T) -> U = ::cast::transmute(handler.handle);\n+                    f(t)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+\n+#[test]\n+fn happiness_key(_x: @Handler) { }\n+\n+#[test]\n+fn sadness_key(_x: @Handler) { }\n+\n+#[test]\n+fn trouble(i: int) {\n+    // Condition should work as a const, just limitations in consts.\n+    let sadness_condition : Condition = Condition { key: sadness_key };\n+    io::println(\"raising\");\n+    let j = sadness_condition.raise(&i);\n+    io::println(fmt!(\"handler recovered with %d\", j));\n+}\n+\n+#[test]\n+fn test() {\n+\n+    let sadness_condition : Condition = Condition { key: sadness_key };\n+\n+    let mut i = 10;\n+\n+    let b = do sadness_condition.protect {\n+        io::println(\"in protected block\");\n+        trouble(1);\n+        trouble(2);\n+        trouble(3);\n+    };\n+\n+    do b.handle |j| {\n+        i += *j;\n+        i\n+    };\n+\n+    assert i == 16;\n+}\n\\ No newline at end of file"}, {"sha": "9ebdad3521e53e7ebc57878083fe68d62d7c0778", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=fdd7b4d8f4df135f30a3f04ff2f777bce1277d2a", "patch": "@@ -200,6 +200,7 @@ pub mod flate;\n pub mod repr;\n pub mod cleanup;\n pub mod reflect;\n+pub mod condition;\n \n // Modules supporting compiler-generated code\n // Exported but not part of the public interface"}]}