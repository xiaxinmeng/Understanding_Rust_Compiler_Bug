{"sha": "6a889570e46c03d7b156ec08f3f4cb4d145924a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODg5NTcwZTQ2YzAzZDdiMTU2ZWMwOGYzZjRjYjRkMTQ1OTI0YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-27T19:30:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-27T19:30:58Z"}, "message": "Auto merge of #79372 - jyn514:more-cleanup, r=GuillaumeGomez\n\nCleanup more of rustdoc\n\n-  Use `Item::from_def_id` for StructField\n- Use `from_def_id_and_parts` for primitives and keywords\n- Take `String` instead of `Symbol` in `from_def_id` - this avoids having to intern then immediately stringify the existing string.\n- Remove unused `get_stability` and `get_deprecation`\n- Remove unused `attrs` field from `primitives`\n- Remove unused `attrs` field from `keywords`\n\nThis will probably conflict with https://github.com/rust-lang/rust/pull/79335 and I would prefer for that PR to land first - I'm anxious for https://github.com/rust-lang/rust/pull/77467 to land :)\n\nMakes https://github.com/rust-lang/rust/issues/76998 easier to add.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "fea0b9ef0d3ca8782f13b7123a3254ab2ca72821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea0b9ef0d3ca8782f13b7123a3254ab2ca72821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a889570e46c03d7b156ec08f3f4cb4d145924a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a889570e46c03d7b156ec08f3f4cb4d145924a3", "html_url": "https://github.com/rust-lang/rust/commit/6a889570e46c03d7b156ec08f3f4cb4d145924a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a889570e46c03d7b156ec08f3f4cb4d145924a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774bce7f5e9d0cc99a30cf37be5d175a3b530beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/774bce7f5e9d0cc99a30cf37be5d175a3b530beb", "html_url": "https://github.com/rust-lang/rust/commit/774bce7f5e9d0cc99a30cf37be5d175a3b530beb"}, {"sha": "09a3bc10ca289c8649f942908855224da034ecb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/09a3bc10ca289c8649f942908855224da034ecb6", "html_url": "https://github.com/rust-lang/rust/commit/09a3bc10ca289c8649f942908855224da034ecb6"}], "stats": {"total": 116, "additions": 49, "deletions": 67}, "files": [{"sha": "61121c776f491884d169cac4c505e85035af6dcd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -124,7 +124,7 @@ crate fn try_inline(\n     let attrs = merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n     cx.renderinfo.borrow_mut().inlined.insert(did);\n-    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n+    let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name.clean(cx)), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n }"}, {"sha": "03fda94a6dfc539ef395295a6fed80cb81382d34", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -122,7 +122,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                         }\n                     }\n                 }\n-                return prim.map(|p| (def_id, p, attrs));\n+                return prim.map(|p| (def_id, p));\n             }\n             None\n         };\n@@ -144,9 +144,9 @@ impl Clean<ExternalCrate> for CrateNum {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_primitive(path.res).map(|(_, prim, attrs)| {\n+                            as_primitive(path.res).map(|(_, prim)| {\n                                 // Pretend the primitive is local.\n-                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim, attrs)\n+                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim)\n                             })\n                         }\n                         _ => None,\n@@ -177,7 +177,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                         }\n                     }\n                 }\n-                return keyword.map(|p| (def_id, p, attrs));\n+                return keyword.map(|p| (def_id, p));\n             }\n             None\n         };\n@@ -199,8 +199,8 @@ impl Clean<ExternalCrate> for CrateNum {\n                         hir::ItemKind::Use(ref path, hir::UseKind::Single)\n                             if item.vis.node.is_pub() =>\n                         {\n-                            as_keyword(path.res).map(|(_, prim, attrs)| {\n-                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim, attrs)\n+                            as_keyword(path.res).map(|(_, prim)| {\n+                                (cx.tcx.hir().local_def_id(id.id).to_def_id(), prim)\n                             })\n                         }\n                         _ => None,\n@@ -1099,7 +1099,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                     AssocTypeItem(bounds.clean(cx), default.clean(cx))\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n         })\n     }\n }\n@@ -1127,7 +1127,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n                 }\n             };\n-            Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n+            Item::from_def_id_and_parts(local_did, Some(self.ident.name.clean(cx)), inner, cx)\n         })\n     }\n }\n@@ -1284,7 +1284,7 @@ impl Clean<Item> for ty::AssocItem {\n             }\n         };\n \n-        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), kind, cx)\n+        Item::from_def_id_and_parts(self.def_id, Some(self.ident.name.clean(cx)), kind, cx)\n     }\n }\n \n@@ -1769,7 +1769,7 @@ impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.did,\n-            Some(self.ident.name),\n+            Some(self.ident.name.clean(cx)),\n             StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n             cx,\n         );\n@@ -1844,22 +1844,20 @@ impl Clean<Item> for ty::VariantDef {\n                 fields: self\n                     .fields\n                     .iter()\n-                    .map(|field| Item {\n-                        source: cx.tcx.def_span(field.did).clean(cx),\n-                        name: Some(field.ident.name.clean(cx)),\n-                        attrs: cx.tcx.get_attrs(field.did).clean(cx),\n-                        visibility: Visibility::Inherited,\n-                        def_id: field.did,\n-                        stability: get_stability(cx, field.did),\n-                        deprecation: get_deprecation(cx, field.did),\n-                        kind: StructFieldItem(cx.tcx.type_of(field.did).clean(cx)),\n+                    .map(|field| {\n+                        let name = Some(field.ident.name.clean(cx));\n+                        let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n+                        let what_rustc_thinks =\n+                            Item::from_def_id_and_parts(field.did, name, kind, cx);\n+                        // don't show `pub` for fields, which are always public\n+                        Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n                     })\n                     .collect(),\n             }),\n         };\n         let what_rustc_thinks = Item::from_def_id_and_parts(\n             self.def_id,\n-            Some(self.ident.name),\n+            Some(self.ident.name.clean(cx)),\n             VariantItem(Variant { kind }),\n             cx,\n         );\n@@ -2057,7 +2055,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n                 _ => unreachable!(\"not yet converted\"),\n             };\n \n-            vec![Item::from_def_id_and_parts(def_id, Some(name), kind, cx)]\n+            vec![Item::from_def_id_and_parts(def_id, Some(name.clean(cx)), kind, cx)]\n         })\n     }\n }\n@@ -2319,7 +2317,7 @@ impl Clean<Item> for doctree::Macro {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         Item::from_def_id_and_parts(\n             self.def_id,\n-            Some(self.name),\n+            Some(self.name.clean(cx)),\n             MacroItem(Macro {\n                 source: format!(\n                     \"macro_rules! {} {{\\n{}}}\","}, {"sha": "2283b71a94fefa2dbc5207a2454ab563d7f82946", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -34,6 +34,7 @@ use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n use crate::clean::inline;\n use crate::clean::types::Type::{QPath, ResolvedPath};\n+use crate::clean::Clean;\n use crate::core::DocContext;\n use crate::doctree;\n use crate::formats::cache::cache;\n@@ -54,7 +55,7 @@ crate struct Crate {\n     crate src: FileName,\n     crate module: Option<Item>,\n     crate externs: Vec<(CrateNum, ExternalCrate)>,\n-    crate primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n+    crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n@@ -67,8 +68,8 @@ crate struct ExternalCrate {\n     crate name: String,\n     crate src: FileName,\n     crate attrs: Attributes,\n-    crate primitives: Vec<(DefId, PrimitiveType, Attributes)>,\n-    crate keywords: Vec<(DefId, String, Attributes)>,\n+    crate primitives: Vec<(DefId, PrimitiveType)>,\n+    crate keywords: Vec<(DefId, String)>,\n }\n \n /// Anything with a source location and set of attributes and, optionally, a\n@@ -120,17 +121,20 @@ impl Item {\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        Item::from_def_id_and_parts(cx.tcx.hir().local_def_id(hir_id).to_def_id(), name, kind, cx)\n+        Item::from_def_id_and_parts(\n+            cx.tcx.hir().local_def_id(hir_id).to_def_id(),\n+            name.clean(cx),\n+            kind,\n+            cx,\n+        )\n     }\n \n     pub fn from_def_id_and_parts(\n         def_id: DefId,\n-        name: Option<Symbol>,\n+        name: Option<String>,\n         kind: ItemKind,\n         cx: &DocContext<'_>,\n     ) -> Item {\n-        use super::Clean;\n-\n         debug!(\"name={:?}, def_id={:?}\", name, def_id);\n \n         // `span_if_local()` lies about functions and only gives the span of the function signature\n@@ -145,7 +149,7 @@ impl Item {\n         Item {\n             def_id,\n             kind,\n-            name: name.clean(cx),\n+            name,\n             source: source.clean(cx),\n             attrs: cx.tcx.get_attrs(def_id).clean(cx),\n             visibility: cx.tcx.visibility(def_id).clean(cx),"}, {"sha": "1b22d26f49bd80b7787748151a2dea0d4d964b0a", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -1,15 +1,14 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n-    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemKind, Lifetime,\n-    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Type, TypeBinding,\n-    TypeKind, Visibility, WherePredicate,\n+    inline, Clean, Crate, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg, GenericArgs,\n+    GenericBound, Generics, GetDefId, ImportSource, Item, ItemKind, Lifetime, MacroKind, Path,\n+    PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding, TypeKind,\n+    WherePredicate,\n };\n use crate::core::DocContext;\n \n use itertools::Itertools;\n-use rustc_attr::Stability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -66,25 +65,16 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n             ItemKind::ModuleItem(ref mut m) => m,\n             _ => unreachable!(),\n         };\n-        m.items.extend(primitives.iter().map(|&(def_id, prim, ref attrs)| Item {\n-            source: Span::empty(),\n-            name: Some(prim.to_url_str().to_string()),\n-            attrs: attrs.clone(),\n-            visibility: Visibility::Public,\n-            stability: get_stability(cx, def_id),\n-            deprecation: get_deprecation(cx, def_id),\n-            def_id,\n-            kind: ItemKind::PrimitiveItem(prim),\n+        m.items.extend(primitives.iter().map(|&(def_id, prim)| {\n+            Item::from_def_id_and_parts(\n+                def_id,\n+                Some(prim.to_url_str().to_owned()),\n+                ItemKind::PrimitiveItem(prim),\n+                cx,\n+            )\n         }));\n-        m.items.extend(keywords.into_iter().map(|(def_id, kw, attrs)| Item {\n-            source: Span::empty(),\n-            name: Some(kw.clone()),\n-            attrs,\n-            visibility: Visibility::Public,\n-            stability: get_stability(cx, def_id),\n-            deprecation: get_deprecation(cx, def_id),\n-            def_id,\n-            kind: ItemKind::KeywordItem(kw),\n+        m.items.extend(keywords.into_iter().map(|(def_id, kw)| {\n+            Item::from_def_id_and_parts(def_id, Some(kw.clone()), ItemKind::KeywordItem(kw), cx)\n         }));\n     }\n \n@@ -101,15 +91,6 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n     }\n }\n \n-// extract the stability index for a node from tcx, if possible\n-crate fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n-    cx.tcx.lookup_stability(def_id).cloned()\n-}\n-\n-crate fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {\n-    cx.tcx.lookup_deprecation(def_id).clean(cx)\n-}\n-\n fn external_generic_args(\n     cx: &DocContext<'_>,\n     trait_did: Option<DefId>,"}, {"sha": "c3153f2d4b6ff5e7a106c1aea183a10c17ab9d2f", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -187,11 +187,11 @@ impl Cache {\n         // Favor linking to as local extern as possible, so iterate all crates in\n         // reverse topological order.\n         for &(_, ref e) in krate.externs.iter().rev() {\n-            for &(def_id, prim, _) in &e.primitives {\n+            for &(def_id, prim) in &e.primitives {\n                 cache.primitive_locations.insert(prim, def_id);\n             }\n         }\n-        for &(def_id, prim, _) in &krate.primitives {\n+        for &(def_id, prim) in &krate.primitives {\n             cache.primitive_locations.insert(prim, def_id);\n         }\n "}, {"sha": "27798b813101e2cf326d4fbfe01db257bb7aa89d", "filename": "src/test/rustdoc-ui/coverage/exotic.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6a889570e46c03d7b156ec08f3f4cb4d145924a3/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.stdout?ref=6a889570e46c03d7b156ec08f3f4cb4d145924a3", "patch": "@@ -1,8 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...st/rustdoc-ui/coverage/exotic.rs |          1 |     100.0% |          0 |       0.0% |\n-| <anon>                              |          2 |     100.0% |          0 |       0.0% |\n+| ...st/rustdoc-ui/coverage/exotic.rs |          3 |     100.0% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+\n | Total                               |          3 |     100.0% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+"}]}