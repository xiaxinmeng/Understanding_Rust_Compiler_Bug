{"sha": "0fbe382f0ff20347292f0cce4683aaa73000ae97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmUzODJmMGZmMjAzNDcyOTJmMGNjZTQ2ODNhYWE3MzAwMGFlOTc=", "commit": {"author": {"name": "Henri Sivonen", "email": "hsivonen@hsivonen.fi", "date": "2018-06-04T08:44:30Z"}, "committer": {"name": "Henri Sivonen", "email": "hsivonen@hsivonen.fi", "date": "2018-12-13T17:21:27Z"}, "message": "Add targets thumbv7neon-linux-androideabi and thumbv7neon-unknown-linux-gnueabihf\n\nThese two targets enable both thumb-mode and NEON for ARMv7 CPUs.", "tree": {"sha": "99b33dea1b99bbca49d5b0159a6774502c762e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99b33dea1b99bbca49d5b0159a6774502c762e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbe382f0ff20347292f0cce4683aaa73000ae97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbe382f0ff20347292f0cce4683aaa73000ae97", "html_url": "https://github.com/rust-lang/rust/commit/0fbe382f0ff20347292f0cce4683aaa73000ae97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbe382f0ff20347292f0cce4683aaa73000ae97/comments", "author": {"login": "hsivonen", "id": 478856, "node_id": "MDQ6VXNlcjQ3ODg1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/478856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsivonen", "html_url": "https://github.com/hsivonen", "followers_url": "https://api.github.com/users/hsivonen/followers", "following_url": "https://api.github.com/users/hsivonen/following{/other_user}", "gists_url": "https://api.github.com/users/hsivonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsivonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsivonen/subscriptions", "organizations_url": "https://api.github.com/users/hsivonen/orgs", "repos_url": "https://api.github.com/users/hsivonen/repos", "events_url": "https://api.github.com/users/hsivonen/events{/privacy}", "received_events_url": "https://api.github.com/users/hsivonen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hsivonen", "id": 478856, "node_id": "MDQ6VXNlcjQ3ODg1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/478856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hsivonen", "html_url": "https://github.com/hsivonen", "followers_url": "https://api.github.com/users/hsivonen/followers", "following_url": "https://api.github.com/users/hsivonen/following{/other_user}", "gists_url": "https://api.github.com/users/hsivonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/hsivonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hsivonen/subscriptions", "organizations_url": "https://api.github.com/users/hsivonen/orgs", "repos_url": "https://api.github.com/users/hsivonen/repos", "events_url": "https://api.github.com/users/hsivonen/events{/privacy}", "received_events_url": "https://api.github.com/users/hsivonen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fe5cb5342244a716055fa0162e795deabd4985c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe5cb5342244a716055fa0162e795deabd4985c", "html_url": "https://github.com/rust-lang/rust/commit/9fe5cb5342244a716055fa0162e795deabd4985c"}], "stats": {"total": 116, "additions": 114, "deletions": 2}, "files": [{"sha": "836a37c58a184e9343eccd73c3fede498e31393f", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -143,7 +143,10 @@ fn set_compiler(cfg: &mut cc::Build,\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n-                let target = target.replace(\"armv7\", \"arm\");\n+                let target = target.replace(\"armv7neon\", \"arm\")\n+                                   .replace(\"armv7\", \"arm\")\n+                                   .replace(\"thumbv7neon\", \"arm\")\n+                                   .replace(\"thumbv7\", \"arm\");\n                 let compiler = format!(\"{}-{}\", target, compiler.clang());\n                 cfg.compiler(ndk.join(\"bin\").join(compiler));\n             }"}, {"sha": "f2473cb9eda6bdab99b3fb04e78019a531ebaa8b", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -107,6 +107,8 @@ def v(*args):\n   \"arm-linux-androideabi NDK standalone path\")\n v(\"armv7-linux-androideabi-ndk\", \"target.armv7-linux-androideabi.android-ndk\",\n   \"armv7-linux-androideabi NDK standalone path\")\n+v(\"thumbv7neon-linux-androideabi-ndk\", \"target.thumbv7neon-linux-androideabi.android-ndk\",\n+  \"thumbv7neon-linux-androideabi NDK standalone path\")\n v(\"aarch64-linux-android-ndk\", \"target.aarch64-linux-android.android-ndk\",\n   \"aarch64-linux-android NDK standalone path\")\n v(\"x86_64-linux-android-ndk\", \"target.x86_64-linux-android.android-ndk\","}, {"sha": "a54a2d003b649b9a778cafaf22c0fb40ef8ca098", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -16,6 +16,7 @@ RUN . /scripts/android-ndk.sh && \\\n # env\n ENV TARGETS=arm-linux-androideabi\n ENV TARGETS=$TARGETS,armv7-linux-androideabi\n+ENV TARGETS=$TARGETS,thumbv7neon-linux-androideabi\n ENV TARGETS=$TARGETS,i686-linux-android\n ENV TARGETS=$TARGETS,aarch64-linux-android\n ENV TARGETS=$TARGETS,x86_64-linux-android\n@@ -24,6 +25,7 @@ ENV RUST_CONFIGURE_ARGS \\\n       --enable-extended \\\n       --arm-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --armv7-linux-androideabi-ndk=/android/ndk/arm-14 \\\n+      --thumbv7neon-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --i686-linux-android-ndk=/android/ndk/x86-14 \\\n       --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\"}, {"sha": "b1bc4df0a16b6f24a948d6d576ae19417496ac54", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -10,6 +10,11 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target if is for the baseline of the Android v7a ABI\n+// in thumb mode. It's named armv7-* instead of thumbv7-*\n+// for historical reasons. See the thumbv7neon variant for\n+// enabling NEON.\n+\n // See https://developer.android.com/ndk/guides/abis.html#v7a\n // for target ABI requirements.\n "}, {"sha": "5e9a127f2f440b9483b458107c19484a4d65870e", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -10,6 +10,9 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target is for glibc Linux on ARMv7 without NEON or\n+// thumb-mode. See the thumbv7neon variant for enabling both.\n+\n pub fn target() -> TargetResult {\n     let base = super::linux_base::opts();\n     Ok(Target {"}, {"sha": "66aa8d1dfcf1ae0d04474fce5fb52f7ff9d83cdc", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -10,6 +10,8 @@\n \n use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n+// This target is for musl Linux on ARMv7 without thumb-mode or NEON.\n+\n pub fn target() -> TargetResult {\n     let base = super::linux_musl_base::opts();\n     Ok(Target {"}, {"sha": "9e0dd57db38a5f5a6ca990d267c47a87688c9782", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -313,6 +313,7 @@ supported_targets! {\n     (\"armv5te-unknown-linux-gnueabi\", armv5te_unknown_linux_gnueabi),\n     (\"armv5te-unknown-linux-musleabi\", armv5te_unknown_linux_musleabi),\n     (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n+    (\"thumbv7neon-unknown-linux-gnueabihf\", thumbv7neon_unknown_linux_gnueabihf),\n     (\"armv7-unknown-linux-musleabihf\", armv7_unknown_linux_musleabihf),\n     (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),\n \n@@ -330,6 +331,7 @@ supported_targets! {\n     (\"x86_64-linux-android\", x86_64_linux_android),\n     (\"arm-linux-androideabi\", arm_linux_androideabi),\n     (\"armv7-linux-androideabi\", armv7_linux_androideabi),\n+    (\"thumbv7neon-linux-androideabi\", thumbv7neon_linux_androideabi),\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),"}, {"sha": "eebbf85400c0b6aa42bf78675c60c401fa7092e9", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+// This target if is for the Android v7a ABI in thumb mode with\n+// NEON unconditionally enabled and, therefore, with 32 FPU registers\n+// enabled as well. See section A2.6.2 on page A2-56 in\n+// https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n+\n+// See https://developer.android.com/ndk/guides/abis.html#v7a\n+// for target ABI requirements.\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::android_base::opts();\n+    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args\n+        .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"armv7-none-linux-android\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"android\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        },\n+    })\n+}"}, {"sha": "8e641e2f6eb0101e6133d35e5162c7946001107f", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+// This target is for glibc Linux on ARMv7 with thumb mode enabled\n+// (for consistency with Android and Debian-based distributions)\n+// and with NEON unconditionally enabled and, therefore, with 32 FPU\n+// registers enabled as well. See section A2.6.2 on page A2-56 in\n+// https://static.docs.arm.com/ddi0406/cd/DDI0406C_d_armv7ar_arm.pdf\n+\n+pub fn target() -> TargetResult {\n+    let base = super::linux_base::opts();\n+    Ok(Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabihf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: TargetOptions {\n+            // Info about features at https://wiki.debian.org/ArmHardFloatPort\n+            features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            .. base\n+        }\n+    })\n+}"}, {"sha": "9e8b4fabf17989c43b82543c175356bd4f37262a", "filename": "src/test/run-make-fulldeps/atomic-lock-free/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fatomic-lock-free%2FMakefile?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -18,6 +18,8 @@ ifeq ($(filter arm,$(LLVM_COMPONENTS)),arm)\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n \t$(RUSTC) --target=armv7-unknown-linux-gnueabihf atomic_lock_free.rs\n \tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n+\t$(RUSTC) --target=thumbv7neon-unknown-linux-gnueabihf atomic_lock_free.rs\n+\tnm \"$(TMPDIR)/libatomic_lock_free.rlib\" | $(CGREP) -v __atomic_fetch_add\n endif\n ifeq ($(filter aarch64,$(LLVM_COMPONENTS)),aarch64)\n \t$(RUSTC) --target=aarch64-unknown-linux-gnu atomic_lock_free.rs"}, {"sha": "a8c15862fce2463bd083b1dea15e3f16228cd1f9", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -61,7 +61,9 @@ static TARGETS: &'static [&'static str] = &[\n     \"armv5te-unknown-linux-musleabi\",\n     \"armv7-apple-ios\",\n     \"armv7-linux-androideabi\",\n+    \"thumbv7neon-linux-androideabi\",\n     \"armv7-unknown-linux-gnueabihf\",\n+    \"thumbv7neon-unknown-linux-gnueabihf\",\n     \"armv7-unknown-linux-musleabihf\",\n     \"armebv7r-none-eabi\",\n     \"armebv7r-none-eabihf\","}, {"sha": "0e9b5b11366fba74244d13866976b81cecd407c4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbe382f0ff20347292f0cce4683aaa73000ae97/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0fbe382f0ff20347292f0cce4683aaa73000ae97", "patch": "@@ -168,7 +168,10 @@ pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Misma\n \n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n-        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n+        \"arm-linux-androideabi\"\n+        | \"armv7-linux-androideabi\"\n+        | \"thumbv7neon-linux-androideabi\"\n+        | \"aarch64-linux-android\" => {\n             if !config.adb_device_status {\n                 panic!(\"android device not available\");\n             }"}]}