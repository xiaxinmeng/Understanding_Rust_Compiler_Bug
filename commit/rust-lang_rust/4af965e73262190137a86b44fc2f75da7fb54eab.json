{"sha": "4af965e73262190137a86b44fc2f75da7fb54eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjk2NWU3MzI2MjE5MDEzN2E4NmI0NGZjMmY3NWRhN2ZiNTRlYWI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-23T01:51:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T01:51:47Z"}, "message": "Rollup merge of #81837 - gilescope:to_ascii_speedups, r=dtolnay\n\nSlight perf improvement on char::to_ascii_lowercase\n\n`char::to_ascii_lowercase()` was checking if it was ascii and then if it was in the right range. Instead propose to check once (I think removing a compare and a shift in the process: [godbolt](https://godbolt.org/z/e5Tora) ).\n\nbefore:\n```\n        test char::methods::bench_to_ascii_lowercase                    ... bench:      11,196 ns/iter (+/- 632)\n        test char::methods::bench_to_ascii_uppercase                    ... bench:      11,656 ns/iter (+/- 671)\n```\nafter:\n```\n         test char::methods::bench_to_ascii_lowercase                    ... bench:       9,612 ns/iter (+/- 979)\n         test char::methods::bench_to_ascii_uppercase                    ... bench:       8,241 ns/iter (+/- 701)\n```\n\n(calling u8::to_ascii_lowercase and letting that flip the 5th bit is also an option, but it's more instructions. I'm thinking for things around ascii and char we want to be as efficient as possible.)", "tree": {"sha": "8b4fe6abf3e045534c80c7771b860f77b6eb1337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4fe6abf3e045534c80c7771b860f77b6eb1337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af965e73262190137a86b44fc2f75da7fb54eab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNF+zCRBK7hj4Ov3rIwAAdHIIAFG2W+ZrP0cWHPHR6gne09jD\nTioBaGXmERlHnZKYzqIm4Zf+tCKoUg6iXAJA2+3SjwXjdtK7JX6Oiqe0dHt/pcDc\nf6txbbrLRfBRUDyA8Qh9CnzbzORI5cxOjssXcMuB/mA5yAaAQSQGBcjWadWpFS/y\n4pI3Ey5vtP5DjKIREpVNoSbg5+pl8djMnkeGEpAESlU+ipUR07W0r7oT1Ro/HMex\nhgtVMUrlTjnPz82dyBxZoi1ZHQ30NLv33BXouulpEMs7O/R+9ES8HIU+in6dDKst\n4j0VI2SeyC6DhjcFcMsV3Hl93f64jh1JU5mOfPpcS+k6MSd6/+kWpFbtbE9II6k=\n=WZRB\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b4fe6abf3e045534c80c7771b860f77b6eb1337\nparent 5d90e89c36468350b9636614b0f9dbf64a4aef80\nparent 33d8b0456876181883f8d97997a3a0a6e9ff652f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614045107 +0100\ncommitter GitHub <noreply@github.com> 1614045107 +0100\n\nRollup merge of #81837 - gilescope:to_ascii_speedups, r=dtolnay\n\nSlight perf improvement on char::to_ascii_lowercase\n\n`char::to_ascii_lowercase()` was checking if it was ascii and then if it was in the right range. Instead propose to check once (I think removing a compare and a shift in the process: [godbolt](https://godbolt.org/z/e5Tora) ).\n\nbefore:\n```\n        test char::methods::bench_to_ascii_lowercase                    ... bench:      11,196 ns/iter (+/- 632)\n        test char::methods::bench_to_ascii_uppercase                    ... bench:      11,656 ns/iter (+/- 671)\n```\nafter:\n```\n         test char::methods::bench_to_ascii_lowercase                    ... bench:       9,612 ns/iter (+/- 979)\n         test char::methods::bench_to_ascii_uppercase                    ... bench:       8,241 ns/iter (+/- 701)\n```\n\n(calling u8::to_ascii_lowercase and letting that flip the 5th bit is also an option, but it's more instructions. I'm thinking for things around ascii and char we want to be as efficient as possible.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af965e73262190137a86b44fc2f75da7fb54eab", "html_url": "https://github.com/rust-lang/rust/commit/4af965e73262190137a86b44fc2f75da7fb54eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af965e73262190137a86b44fc2f75da7fb54eab/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d90e89c36468350b9636614b0f9dbf64a4aef80", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d90e89c36468350b9636614b0f9dbf64a4aef80", "html_url": "https://github.com/rust-lang/rust/commit/5d90e89c36468350b9636614b0f9dbf64a4aef80"}, {"sha": "33d8b0456876181883f8d97997a3a0a6e9ff652f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d8b0456876181883f8d97997a3a0a6e9ff652f", "html_url": "https://github.com/rust-lang/rust/commit/33d8b0456876181883f8d97997a3a0a6e9ff652f"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "64938745a4a161d5abace6d0511915ef6180d150", "filename": "library/core/benches/ascii.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fascii.rs?ref=4af965e73262190137a86b44fc2f75da7fb54eab", "patch": "@@ -66,6 +66,8 @@ macro_rules! benches {\n use test::black_box;\n use test::Bencher;\n \n+const ASCII_CASE_MASK: u8 = 0b0010_0000;\n+\n benches! {\n     fn case00_alloc_only(_bytes: &mut [u8]) {}\n \n@@ -204,7 +206,7 @@ benches! {\n             }\n         }\n         for byte in bytes {\n-            *byte &= !((is_ascii_lowercase(*byte) as u8) << 5)\n+            *byte &= !((is_ascii_lowercase(*byte) as u8) * ASCII_CASE_MASK)\n         }\n     }\n \n@@ -216,7 +218,7 @@ benches! {\n             }\n         }\n         for byte in bytes {\n-            *byte -= (is_ascii_lowercase(*byte) as u8) << 5\n+            *byte -= (is_ascii_lowercase(*byte) as u8) * ASCII_CASE_MASK\n         }\n     }\n "}, {"sha": "de4b63030fa7c5432becf49037fb200895f86653", "filename": "library/core/benches/char/methods.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs?ref=4af965e73262190137a86b44fc2f75da7fb54eab", "patch": "@@ -35,3 +35,13 @@ fn bench_to_digit_radix_var(b: &mut Bencher) {\n             .min()\n     })\n }\n+\n+#[bench]\n+fn bench_to_ascii_uppercase(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_uppercase()).min())\n+}\n+\n+#[bench]\n+fn bench_to_ascii_lowercase(b: &mut Bencher) {\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_lowercase()).min())\n+}"}, {"sha": "4390342134d1d6b0ab64f01f9e5dec7f4d248d97", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=4af965e73262190137a86b44fc2f75da7fb54eab", "patch": "@@ -1088,7 +1088,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n-        if self.is_ascii() { (*self as u8).to_ascii_uppercase() as char } else { *self }\n+        if self.is_ascii_lowercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -1116,7 +1120,11 @@ impl char {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n-        if self.is_ascii() { (*self as u8).to_ascii_lowercase() as char } else { *self }\n+        if self.is_ascii_uppercase() {\n+            (*self as u8).ascii_change_case_unchecked() as char\n+        } else {\n+            *self\n+        }\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}, {"sha": "c13f000a73615a3bc4c0868534e0bb300a96cd2d", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af965e73262190137a86b44fc2f75da7fb54eab/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=4af965e73262190137a86b44fc2f75da7fb54eab", "patch": "@@ -152,6 +152,9 @@ impl isize {\n      usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n+/// If 6th bit set ascii is upper case.\n+const ASCII_CASE_MASK: u8 = 0b0010_0000;\n+\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n@@ -195,7 +198,7 @@ impl u8 {\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> u8 {\n         // Unset the fifth bit if this is a lowercase letter\n-        *self & !((self.is_ascii_lowercase() as u8) << 5)\n+        *self & !((self.is_ascii_lowercase() as u8) * ASCII_CASE_MASK)\n     }\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -218,7 +221,13 @@ impl u8 {\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> u8 {\n         // Set the fifth bit if this is an uppercase letter\n-        *self | ((self.is_ascii_uppercase() as u8) << 5)\n+        *self | (self.is_ascii_uppercase() as u8 * ASCII_CASE_MASK)\n+    }\n+\n+    /// Assumes self is ascii\n+    #[inline]\n+    pub(crate) fn ascii_change_case_unchecked(&self) -> u8 {\n+        *self ^ ASCII_CASE_MASK\n     }\n \n     /// Checks that two values are an ASCII case-insensitive match."}]}