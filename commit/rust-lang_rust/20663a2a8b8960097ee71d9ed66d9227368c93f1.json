{"sha": "20663a2a8b8960097ee71d9ed66d9227368c93f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNjYzYTJhOGI4OTYwMDk3ZWU3MWQ5ZWQ2NmQ5MjI3MzY4YzkzZjE=", "commit": {"author": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-09T16:55:05Z"}, "committer": {"name": "Nathan Whitaker", "email": "nathan.whitaker01@gmail.com", "date": "2020-09-09T16:55:05Z"}, "message": "Lookup ADT and assoc. type names for chalk debug", "tree": {"sha": "dc0bbc18d73bba881fa582c0015c7a6a888c1ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc0bbc18d73bba881fa582c0015c7a6a888c1ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20663a2a8b8960097ee71d9ed66d9227368c93f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20663a2a8b8960097ee71d9ed66d9227368c93f1", "html_url": "https://github.com/rust-lang/rust/commit/20663a2a8b8960097ee71d9ed66d9227368c93f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20663a2a8b8960097ee71d9ed66d9227368c93f1/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f79dbc84f5d69ec6f48fa8d67bdfa0525c5dd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f79dbc84f5d69ec6f48fa8d67bdfa0525c5dd34", "html_url": "https://github.com/rust-lang/rust/commit/7f79dbc84f5d69ec6f48fa8d67bdfa0525c5dd34"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "01b5717a3ffef169a44a2f2f66ca2882c10583ee", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20663a2a8b8960097ee71d9ed66d9227368c93f1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20663a2a8b8960097ee71d9ed66d9227368c93f1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=20663a2a8b8960097ee71d9ed66d9227368c93f1", "patch": "@@ -244,13 +244,17 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n         let id = from_chalk(self.db, trait_id);\n         self.db.trait_data(id).name.to_string()\n     }\n-    // FIXME: lookup names\n-    fn adt_name(&self, struct_id: chalk_ir::AdtId<Interner>) -> String {\n-        let datum = self.db.struct_datum(self.krate, struct_id);\n-        format!(\"{:?}\", datum.name(&Interner))\n+    fn adt_name(&self, adt_id: chalk_ir::AdtId<Interner>) -> String {\n+        let id = from_chalk(self.db, adt_id);\n+        match id {\n+            hir_def::AdtId::StructId(id) => self.db.struct_data(id).name.to_string(),\n+            hir_def::AdtId::EnumId(id) => self.db.enum_data(id).name.to_string(),\n+            hir_def::AdtId::UnionId(id) => self.db.union_data(id).name.to_string(),\n+        }\n     }\n     fn assoc_type_name(&self, assoc_ty_id: chalk_ir::AssocTypeId<Interner>) -> String {\n-        format!(\"Assoc_{}\", assoc_ty_id.0)\n+        let id = self.db.associated_ty_data(assoc_ty_id).name;\n+        self.db.type_alias_data(id).name.to_string()\n     }\n     fn opaque_type_name(&self, opaque_ty_id: chalk_ir::OpaqueTyId<Interner>) -> String {\n         format!(\"Opaque_{}\", opaque_ty_id.0)"}, {"sha": "d6bacba1d3d5fda0a352a8065ac1ea5dd358ab80", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20663a2a8b8960097ee71d9ed66d9227368c93f1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20663a2a8b8960097ee71d9ed66d9227368c93f1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=20663a2a8b8960097ee71d9ed66d9227368c93f1", "patch": "@@ -464,6 +464,18 @@ impl ToChalk for hir_def::ImplId {\n     }\n }\n \n+impl ToChalk for hir_def::AdtId {\n+    type Chalk = AdtId;\n+\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> Self::Chalk {\n+        chalk_ir::AdtId(self.into())\n+    }\n+\n+    fn from_chalk(_db: &dyn HirDatabase, id: AdtId) -> Self {\n+        id.0\n+    }\n+}\n+\n impl ToChalk for CallableDefId {\n     type Chalk = FnDefId;\n "}]}