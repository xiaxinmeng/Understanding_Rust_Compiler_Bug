{"sha": "7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOWEyY2ZhMWI5MWI4NTI1OTA3NTgyYTQyZDg5NmRjZDJmYTE3NmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-12-13T16:34:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-16T22:48:17Z"}, "message": "resolve: Reject ambiguity built-in attr vs different built-in attr", "tree": {"sha": "42a3a85c1debf024f03e9378baaaedd6c89d654b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a3a85c1debf024f03e9378baaaedd6c89d654b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "html_url": "https://github.com/rust-lang/rust/commit/7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492b83c6971c390af7a42932869502224ef55ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/492b83c6971c390af7a42932869502224ef55ef7", "html_url": "https://github.com/rust-lang/rust/commit/492b83c6971c390af7a42932869502224ef55ef7"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "a81eb747a335a48de92e185d6c698b90806af56b", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "patch": "@@ -5,6 +5,7 @@ use rustc_ast as ast;\n use rustc_ast::NodeId;\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n+use rustc_span::Symbol;\n \n use std::array::IntoIter;\n use std::fmt::Debug;\n@@ -34,7 +35,7 @@ pub enum CtorKind {\n #[derive(HashStable_Generic)]\n pub enum NonMacroAttrKind {\n     /// Single-segment attribute defined by the language (`#[inline]`)\n-    Builtin,\n+    Builtin(Symbol),\n     /// Multi-segment custom attribute living in a \"tool module\" (`#[rustfmt::skip]`).\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n@@ -371,7 +372,7 @@ impl CtorKind {\n impl NonMacroAttrKind {\n     pub fn descr(self) -> &'static str {\n         match self {\n-            NonMacroAttrKind::Builtin => \"built-in attribute\",\n+            NonMacroAttrKind::Builtin(..) => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper | NonMacroAttrKind::DeriveHelperCompat => {\n                 \"derive helper attribute\"\n@@ -393,7 +394,7 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Tool\n             | NonMacroAttrKind::DeriveHelper\n             | NonMacroAttrKind::DeriveHelperCompat => true,\n-            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered => false,\n+            NonMacroAttrKind::Builtin(..) | NonMacroAttrKind::Registered => false,\n         }\n     }\n }"}, {"sha": "69fb6870d2c671e5b10f81435b2eb3f1521ddef2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "patch": "@@ -683,7 +683,7 @@ impl<'a> Resolver<'a> {\n                     ));\n                 }\n                 Scope::BuiltinAttrs => {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::Builtin(kw::Empty));\n                     if filter_fn(res) {\n                         suggestions.extend(\n                             BUILTIN_ATTRIBUTES"}, {"sha": "5d6120cd310761ecbee0257a1011c34721368d0c", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "patch": "@@ -757,7 +757,11 @@ impl<'a> Resolver<'a> {\n                     }\n                     Scope::BuiltinAttrs => {\n                         if is_builtin_attr_name(ident.name) {\n-                            ok(Res::NonMacroAttr(NonMacroAttrKind::Builtin), DUMMY_SP, this.arenas)\n+                            ok(\n+                                Res::NonMacroAttr(NonMacroAttrKind::Builtin(ident.name)),\n+                                DUMMY_SP,\n+                                this.arenas,\n+                            )\n                         } else {\n                             Err(Determinacy::Determined)\n                         }\n@@ -810,13 +814,15 @@ impl<'a> Resolver<'a> {\n                             // Found another solution, if the first one was \"weak\", report an error.\n                             let (res, innermost_res) = (binding.res(), innermost_binding.res());\n                             if res != innermost_res {\n-                                let builtin = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n+                                let is_builtin = |res| {\n+                                    matches!(res, Res::NonMacroAttr(NonMacroAttrKind::Builtin(..)))\n+                                };\n                                 let derive_helper_compat =\n                                     Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat);\n \n                                 let ambiguity_error_kind = if is_import {\n                                     Some(AmbiguityKind::Import)\n-                                } else if innermost_res == builtin || res == builtin {\n+                                } else if is_builtin(innermost_res) || is_builtin(res) {\n                                     Some(AmbiguityKind::BuiltinAttr)\n                                 } else if innermost_res == derive_helper_compat\n                                     || res == derive_helper_compat"}, {"sha": "5f45f6892d2e3dd49335632ef061877cb4182246", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "patch": "@@ -1,5 +1,5 @@\n+// edition:2018\n // aux-build:builtin-attrs.rs\n-\n #![feature(decl_macro)] //~ ERROR `feature` is ambiguous\n \n extern crate builtin_attrs;\n@@ -31,3 +31,7 @@ fn main() {\n     Bench;\n     NonExistent; //~ ERROR cannot find value `NonExistent` in this scope\n }\n+\n+use deny as allow;\n+#[allow(unused)] //~ ERROR `allow` is ambiguous (built-in attribute vs any other name)\n+fn builtin_renamed() {}"}, {"sha": "dfd60dc92cc35945f84db2156741606ac8bb503a", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f9a2cfa1b91b8525907582a42d896dcd2fa176b/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=7f9a2cfa1b91b8525907582a42d896dcd2fa176b", "patch": "@@ -60,6 +60,20 @@ LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n    = help: use `crate::repr` to refer to this attribute macro unambiguously\n \n+error[E0659]: `allow` is ambiguous (built-in attribute vs any other name)\n+  --> $DIR/ambiguous-builtin-attrs.rs:36:3\n+   |\n+LL | #[allow(unused)]\n+   |   ^^^^^ ambiguous name\n+   |\n+   = note: `allow` could refer to a built-in attribute\n+note: `allow` could also refer to the built-in attribute imported here\n+  --> $DIR/ambiguous-builtin-attrs.rs:35:5\n+   |\n+LL | use deny as allow;\n+   |     ^^^^^^^^^^^^^\n+   = help: use `crate::allow` to refer to this built-in attribute unambiguously\n+\n error[E0659]: `feature` is ambiguous (built-in attribute vs any other name)\n   --> $DIR/ambiguous-builtin-attrs.rs:3:4\n    |\n@@ -80,7 +94,7 @@ error[E0517]: attribute should be applied to a struct, enum, or union\n LL | fn non_macro_expanded_location<#[repr(C)] T>() {\n    |                                       ^   - not a struct, enum, or union\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0425, E0517, E0659.\n For more information about an error, try `rustc --explain E0425`."}]}