{"sha": "17726f6b52b68279384cfb13209f015ab491c1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NzI2ZjZiNTJiNjgyNzkzODRjZmIxMzIwOWYwMTVhYjQ5MWMxYzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T15:56:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:09Z"}, "message": "Rename `Lit.node` to `Lit.kind`", "tree": {"sha": "84cc1132b9b4fbe07aee481fc026ea91e4f81683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84cc1132b9b4fbe07aee481fc026ea91e4f81683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17726f6b52b68279384cfb13209f015ab491c1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17726f6b52b68279384cfb13209f015ab491c1c0", "html_url": "https://github.com/rust-lang/rust/commit/17726f6b52b68279384cfb13209f015ab491c1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17726f6b52b68279384cfb13209f015ab491c1c0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6aabbaa19378ac621c2971934383a146176fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6aabbaa19378ac621c2971934383a146176fec", "html_url": "https://github.com/rust-lang/rust/commit/ce6aabbaa19378ac621c2971934383a146176fec"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "caecc162c7866a63b0d8d3ea2da3ffb8b83e91c2", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -54,7 +54,7 @@ impl LoweringContext<'_> {\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::Unary(op, ohs)\n             }\n-            ExprKind::Lit(ref l) => hir::ExprKind::Lit(respan(l.span, l.node.clone())),\n+            ExprKind::Lit(ref l) => hir::ExprKind::Lit(respan(l.span, l.kind.clone())),\n             ExprKind::Cast(ref expr, ref ty) => {\n                 let expr = P(self.lower_expr(expr));\n                 hir::ExprKind::Cast(expr, self.lower_ty(ty, ImplTraitContext::disallowed()))"}, {"sha": "281c6c6c1ec94159e05606f076b96ad6e3acde01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -142,7 +142,7 @@ impl_stable_hash_for!(enum ::syntax::ast::LitIntType {\n });\n \n impl_stable_hash_for!(struct ::syntax::ast::Lit {\n-    node,\n+    kind,\n     token,\n     span\n });"}, {"sha": "9c70cae84773debd1a6ef05f94bb1aa6492b3b20", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -226,7 +226,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                             metas = &metas[0..metas.len()-1];\n                             // FIXME (#55112): issue unused-attributes lint if we thereby\n                             // don't have any lint names (`#[level(reason = \"foo\")]`)\n-                            if let ast::LitKind::Str(rationale, _) = name_value.node {\n+                            if let ast::LitKind::Str(rationale, _) = name_value.kind {\n                                 if !self.sess.features_untracked().lint_reasons {\n                                     feature_gate::emit_feature_err(\n                                         &self.sess.parse_sess,"}, {"sha": "d45479f9cca0d295cbe86a55e56abad442cd0384", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1883,7 +1883,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                         MetaItemKind::List(..) => {\n                             error!(r#\"expected `key` or `key=\"value\"`\"#);\n                         }\n-                        MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n+                        MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n                             error!(\"argument value must be a string\");\n                         }\n                         MetaItemKind::NameValue(..) | MetaItemKind::Word => {"}, {"sha": "972eae45d18a87ca01322766a5b5020e12e18e8f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1150,7 +1150,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 None => return Bound::Unbounded,\n             };\n             for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_valid_range takes args\") {\n-                match meta.literal().expect(\"attribute takes lit\").node {\n+                match meta.literal().expect(\"attribute takes lit\").kind {\n                     ast::LitKind::Int(a, _) => return Bound::Included(a),\n                     _ => span_bug!(attr.span, \"rustc_layout_scalar_valid_range expects int arg\"),\n                 }"}, {"sha": "cb335889e44c640215db8b49c21f318a0e0c3215", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -77,7 +77,7 @@ impl EarlyLintPass for WhileTrue {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         if let ast::ExprKind::While(cond, ..) = &e.kind {\n             if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind {\n-                if let ast::LitKind::Bool(true) = lit.node {\n+                if let ast::LitKind::Bool(true) = lit.kind {\n                     if !lit.span.from_expansion() {\n                         let msg = \"denote infinite loops with `loop { ... }`\";\n                         let condition_span = cx.sess.source_map().def_span(e.span);"}, {"sha": "0135d9d7e76670e77ce5f7acb0d4c0b1d7083a07", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n                 .and_then(|attr| attr.meta())\n                 .and_then(|meta| {\n                     meta.name_value_literal().and_then(|lit| {\n-                        if let ast::LitKind::Str(name, ..) = lit.node {\n+                        if let ast::LitKind::Str(name, ..) = lit.kind {\n                             // Discard the double quotes surrounding the literal.\n                             let sp = cx.sess().source_map().span_to_snippet(lit.span)\n                                 .ok()"}, {"sha": "7423a668f94d242884983ad49025adf33049e1f0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1768,7 +1768,7 @@ fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize\n     let attr = attrs.iter().find(|a| a.check_name(sym::rustc_args_required_const))?;\n     let mut ret = FxHashSet::default();\n     for meta in attr.meta_item_list()? {\n-        match meta.literal()?.node {\n+        match meta.literal()?.kind {\n             LitKind::Int(a, _) => { ret.insert(a as usize); }\n             _ => return None,\n         }"}, {"sha": "ac8fb1f9e95e97a07ccb86fd6cbe3d401cf3cb1f", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -70,7 +70,7 @@ impl Cfg {\n         };\n         match cfg.node {\n             MetaItemKind::Word => Ok(Cfg::Cfg(name, None)),\n-            MetaItemKind::NameValue(ref lit) => match lit.node {\n+            MetaItemKind::NameValue(ref lit) => match lit.kind {\n                 LitKind::Str(value, _) => Ok(Cfg::Cfg(name, Some(value))),\n                 _ => Err(InvalidCfgError {\n                     // FIXME: if the main #[cfg] syntax decided to support non-string literals,"}, {"sha": "0f1598ba722c1003e33258fa35f4996924f3dcee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1361,7 +1361,7 @@ pub struct Lit {\n     /// The \"semantic\" representation of the literal lowered from the original tokens.\n     /// Strings are unescaped, hexadecimal forms are eliminated, etc.\n     /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n-    pub node: LitKind,\n+    pub kind: LitKind,\n     pub span: Span,\n }\n "}, {"sha": "ca314642d62ae5f1f909477e1a2456d302a4c2ad", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -36,7 +36,7 @@ impl AttributeTemplate {\n         match meta_item_kind {\n             ast::MetaItemKind::Word => self.word,\n             ast::MetaItemKind::List(..) => self.list.is_some(),\n-            ast::MetaItemKind::NameValue(lit) if lit.node.is_str() => self.name_value_str.is_some(),\n+            ast::MetaItemKind::NameValue(lit) if lit.kind.is_str() => self.name_value_str.is_some(),\n             ast::MetaItemKind::NameValue(..) => false,\n         }\n     }\n@@ -538,13 +538,13 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n             MetaItemKind::List(..) => {\n                 error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n             }\n-            MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n+            MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n                 handle_errors(\n                     sess,\n                     lit.span,\n                     AttrError::UnsupportedLiteral(\n                         \"literal in `cfg` predicate value must be a string\",\n-                        lit.node.is_bytestr()\n+                        lit.kind.is_bytestr()\n                     ),\n                 );\n                 true\n@@ -668,7 +668,7 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                                 AttrError::UnsupportedLiteral(\n                                     \"literal in `deprecated` \\\n                                     value must be a string\",\n-                                    lit.node.is_bytestr()\n+                                    lit.kind.is_bytestr()\n                                 ),\n                             );\n                         } else {\n@@ -811,14 +811,14 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                     let mut literal_error = None;\n                     if name == sym::align {\n                         recognised = true;\n-                        match parse_alignment(&value.node) {\n+                        match parse_alignment(&value.kind) {\n                             Ok(literal) => acc.push(ReprAlign(literal)),\n                             Err(message) => literal_error = Some(message)\n                         };\n                     }\n                     else if name == sym::packed {\n                         recognised = true;\n-                        match parse_alignment(&value.node) {\n+                        match parse_alignment(&value.kind) {\n                             Ok(literal) => acc.push(ReprPacked(literal)),\n                             Err(message) => literal_error = Some(message)\n                         };\n@@ -834,7 +834,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                                 recognised = true;\n                                 let mut err = struct_span_err!(diagnostic, item.span(), E0693,\n                                     \"incorrect `repr(align)` attribute format\");\n-                                match value.node {\n+                                match value.kind {\n                                     ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n                                         err.span_suggestion(\n                                             item.span(),"}, {"sha": "bba7532df2eb96c4cba214aae23ca47f582fcaa6", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -219,7 +219,7 @@ impl MetaItem {\n     pub fn value_str(&self) -> Option<Symbol> {\n         match self.node {\n             MetaItemKind::NameValue(ref v) => {\n-                match v.node {\n+                match v.kind {\n                     LitKind::Str(ref s, _) => Some(*s),\n                     _ => None,\n                 }"}, {"sha": "22c07b2cf9ceb906ceae2aa429131a886934c155", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1099,7 +1099,7 @@ pub fn expr_to_spanned_string<'a>(\n     let expr = cx.expander().fully_expand_fragment(AstFragment::Expr(expr)).make_expr();\n \n     Err(match expr.kind {\n-        ast::ExprKind::Lit(ref l) => match l.node {\n+        ast::ExprKind::Lit(ref l) => match l.kind {\n             ast::LitKind::Str(s, style) => return Ok((s, style, expr.span)),\n             ast::LitKind::Err(_) => None,\n             _ => Some(cx.struct_span_err(l.span, err_msg))"}, {"sha": "c538dc3f902edb00f3d60eb188664b59dab30057", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -1504,7 +1504,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     // Check if the user erroneously used `doc(include(...))` syntax.\n                     let literal = it.meta_item_list().and_then(|list| {\n                         if list.len() == 1 {\n-                            list[0].literal().map(|literal| &literal.node)\n+                            list[0].literal().map(|literal| &literal.kind)\n                         } else {\n                             None\n                         }"}, {"sha": "4b2c329625b96e253b5edf9668b6d8654ea7661e", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -249,7 +249,7 @@ impl<'a> Parser<'a> {\n         let lit = self.parse_lit()?;\n         debug!(\"checking if {:?} is unusuffixed\", lit);\n \n-        if !lit.node.is_unsuffixed() {\n+        if !lit.kind.is_unsuffixed() {\n             let msg = \"suffixed literals are not allowed in attributes\";\n             self.diagnostic().struct_span_err(lit.span, msg)\n                              .help(\"instead of using a suffixed literal \\"}, {"sha": "fcd5b2782fd61e14ca85f03f697e3a9c17af66ee", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -255,7 +255,7 @@ impl LitKind {\n impl Lit {\n     /// Converts literal token into an AST literal.\n     fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {\n-        Ok(Lit { token, node: LitKind::from_lit_token(token)?, span })\n+        Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })\n     }\n \n     /// Converts arbitrary token into an AST literal.\n@@ -282,8 +282,8 @@ impl Lit {\n     /// Attempts to recover an AST literal from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n-    pub fn from_lit_kind(node: LitKind, span: Span) -> Lit {\n-        Lit { token: node.to_lit_token(), node, span }\n+    pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {\n+        Lit { token: kind.to_lit_token(), kind, span }\n     }\n \n     /// Losslessly convert an AST literal into a token stream."}, {"sha": "790fdad5b3f5820879aecc88a946be77f0825aeb", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17726f6b52b68279384cfb13209f015ab491c1c0/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=17726f6b52b68279384cfb13209f015ab491c1c0", "patch": "@@ -19,7 +19,7 @@ pub fn expand_concat(\n     let mut has_errors = false;\n     for e in es {\n         match e.kind {\n-            ast::ExprKind::Lit(ref lit) => match lit.node {\n+            ast::ExprKind::Lit(ref lit) => match lit.kind {\n                 ast::LitKind::Str(ref s, _)\n                 | ast::LitKind::Float(ref s, _)\n                 | ast::LitKind::FloatUnsuffixed(ref s) => {"}]}