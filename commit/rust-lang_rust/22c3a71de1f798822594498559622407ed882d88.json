{"sha": "22c3a71de1f798822594498559622407ed882d88", "node_id": "C_kwDOAAsO6NoAKDIyYzNhNzFkZTFmNzk4ODIyNTk0NDk4NTU5NjIyNDA3ZWQ4ODJkODg", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-23T13:06:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-25T13:00:52Z"}, "message": "Switch bootstrap cfgs", "tree": {"sha": "bb4315c823b1483d5e529dfd35718a613e2bc31b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4315c823b1483d5e529dfd35718a613e2bc31b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c3a71de1f798822594498559622407ed882d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c3a71de1f798822594498559622407ed882d88", "html_url": "https://github.com/rust-lang/rust/commit/22c3a71de1f798822594498559622407ed882d88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c3a71de1f798822594498559622407ed882d88/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea65f50c52cebd3e632a761fd033e0faceeb900f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea65f50c52cebd3e632a761fd033e0faceeb900f", "html_url": "https://github.com/rust-lang/rust/commit/ea65f50c52cebd3e632a761fd033e0faceeb900f"}], "stats": {"total": 211, "additions": 64, "deletions": 147}, "files": [{"sha": "89c027585df308e914edff3b5e1f7e86984a04d2", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -35,7 +35,7 @@\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};"}, {"sha": "876dd7f757c5a8c0f08023fb0fd7b3094547256e", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "c489f409fb53bdd6fcba7a850cf4ff492678b8f6", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -9,7 +9,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "a05122394a06a21401aedc423c308a67f4c24171", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -13,7 +13,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n extern crate proc_macro;\n "}, {"sha": "fa48abdfbc8f62ed602d0a64c192c6c1853c4bfe", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -11,7 +11,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "25e27f565eae26d626d9e45862cb17800a39d96a", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -7,7 +7,7 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "d688331ae0a56f569fac57467846e593a02164b6", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -22,7 +22,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "46054fe7bcbb97234dff1580361a490e4a2a0cd7", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -20,7 +20,7 @@ mod private {\n /// but you can only construct a `Interned` with `new_unchecked`, and not\n /// directly.\n #[derive(Debug)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Interned<'a, T>(pub &'a T, pub private::PrivateZst);\n \n impl<'a, T> Interned<'a, T> {"}, {"sha": "b1e59d6502913621afd4c6d2b63412d84f5d0118", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -28,7 +28,7 @@\n #![feature(vec_into_raw_parts)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "db03ee8c4bc9400aad33303c908dab61d38623bf", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -9,7 +9,7 @@\n #![feature(let_else)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "fdfedffc529851bc15585eea5b583fde93f24145", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -8,9 +8,9 @@\n #![feature(if_let_guard)]\n #![feature(let_else)]\n #![feature(nll)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n #![feature(adt_const_params)]\n #![allow(incomplete_features)]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "b024524aa2968e730187350070b5ea3783d175e3", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -9,7 +9,7 @@\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "017113459664778040761f528a5dbc395a5dc8c7", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -5,7 +5,7 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "4960630051f3ee2c8fd8b2675c7c89df535636eb", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -23,7 +23,7 @@\n #![feature(min_specialization)]\n #![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "f847c08a9dc7b5e362e981aca8aee7843f9d9230", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -6,7 +6,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n mod callbacks;\n pub mod interface;"}, {"sha": "0582a4e01bfeb5b7e87ddffb72b9d87a9d718368", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -147,7 +147,7 @@ impl LintStore {\n         &'t self,\n     ) -> impl Iterator<Item = (&'static str, Vec<LintId>, bool)> + 't {\n         // This function is not used in a way which observes the order of lints.\n-        #[cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+        #[allow(rustc::potential_query_instability)]\n         self.lint_groups\n             .iter()\n             .filter(|(_, LintGroup { depr, .. })| {"}, {"sha": "a40453eb22a7a946b99f14e34ea127b7d94e5717", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -38,7 +38,7 @@\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "06658aadbac2710234fde1764d916b96dc5c69cb", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -9,7 +9,7 @@\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n extern crate proc_macro;\n "}, {"sha": "7ca564f29e6591a6b07901874d88d7fcfe4c9de0", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -57,7 +57,7 @@\n #![feature(unwrap_infallible)]\n #![feature(decl_macro)]\n #![recursion_limit = \"512\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "b753c6238e147de4da3e59feb5f5a5d578ee4845", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -21,7 +21,7 @@ pub use valtree::*;\n \n /// Use this rather than `ConstS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Const<'tcx>(pub Interned<'tcx, ConstS<'tcx>>);\n \n impl<'tcx> fmt::Debug for Const<'tcx> {"}, {"sha": "19d8856dc6ce4081119b9783322f043cd6cee3f0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -970,7 +970,7 @@ pub struct FreeRegionInfo {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }"}, {"sha": "88c993d98e2423b17aba154aa4892588c45cfa15", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -433,7 +433,7 @@ static_assert_size!(TyS<'_>, 40);\n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[rustc_diagnostic_item = \"Ty\"]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Ty<'tcx>(Interned<'tcx, TyS<'tcx>>);\n \n // Statics only used for internal testing.\n@@ -486,7 +486,7 @@ static_assert_size!(PredicateS<'_>, 56);\n \n /// Use this rather than `PredicateS`, whenever possible.\n #[derive(Clone, Copy, PartialEq, Eq, Hash)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Predicate<'tcx>(Interned<'tcx, PredicateS<'tcx>>);\n \n impl<'tcx> Predicate<'tcx> {"}, {"sha": "a1e906140e0e8211a8f5620f9b05029e1523d0d4", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -1396,7 +1396,7 @@ impl ParamConst {\n \n /// Use this rather than `TyKind`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n-#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+#[rustc_pass_by_value]\n pub struct Region<'tcx>(pub Interned<'tcx, RegionKind>);\n \n impl<'tcx> Deref for Region<'tcx> {"}, {"sha": "9dea67e176266bdcebe673eaa5118a607268a752", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -9,7 +9,7 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c0c66daffa8e0b56e1ace951721f2df0de0907a5", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -10,7 +10,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c9accbcd86ed4315f18967efc17cf980b06ab802", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -4,7 +4,7 @@\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "71381f1d869311d964fa440550581c273d66c313", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -13,7 +13,7 @@\n #![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "b56cb86a18c86f30cd2697d4b0ffbae32c57e6be", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -4,7 +4,7 @@\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;"}, {"sha": "6ebff5388f457d4d2a35f6cb50b2a2a00f7c661e", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -7,7 +7,7 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "6b70e9342fa648f77ef667cb040f850a2cad21f8", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -5,7 +5,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "0c386ebc49eaa16c24e0d801cc741012ec29f197", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -18,7 +18,7 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "cf71f9b3fc5aaa9076c3e016d8e4cf9cd5f0de38", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -3,7 +3,7 @@\n #![feature(nll)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n mod dump_visitor;\n mod dumper;"}, {"sha": "f9574cb1a3bb57238d9e7f930d8f0810876cc804", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -4,7 +4,7 @@\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "9d4c2e3bb84a3d7c133d896b404beba581db4523", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -22,7 +22,7 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "cd382d6c956cad8d51e90c748c8a4933c22910e0", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -61,15 +61,8 @@ use rustc_data_structures::fx::FxIndexSet;\n /// using the callback `SPAN_TRACK` to access the query engine.\n ///\n #[derive(Clone, Copy, Eq, PartialEq, Hash)]\n-// FIXME(@lcnr): Enable this attribute once the bootstrap\n-// compiler knows of `rustc_pass_by_value`.\n-//\n-// Right now, this lint would only trigger when compiling the\n-// stage 2 compiler, which is fairly annoying as there are\n-// a lot of places using `&Span` right now. After the next bootstrap bump,\n-// the lint will already trigger when using stage 1, which is a lot less annoying.\n-//\n-// #[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n+// FIXME: Enable this in the bootstrap bump, but separate commit.\n+// #[rustc_pass_by_value]\n pub struct Span {\n     base_or_index: u32,\n     len_or_tag: u16,"}, {"sha": "3b60f91f8c85394049e597e06f9b75eca90fe194", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -91,7 +91,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "5569334ff3d20c48bdb3c12da9bac3335de4101c", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -22,7 +22,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "40904c1dfd63965ffbde0d85ac24dfe7c2528274", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -69,7 +69,7 @@ This API is completely unstable and subject to change.\n #![feature(control_flow_enum)]\n #![feature(hash_drain_filter)]\n #![recursion_limit = \"256\"]\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "82493f9c398cb5805d7653cab651b6b19b570538", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -139,7 +139,6 @@\n #![feature(associated_type_bounds)]\n #![feature(box_syntax)]\n #![feature(cfg_sanitize)]\n-#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_deref)]\n #![feature(const_fn_trait_bound)]\n #![feature(const_mut_refs)]"}, {"sha": "1d457c2b7d542b080fb6c2f578a9c4b898d82f5e", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -1936,7 +1936,6 @@ extern \"rust-intrinsic\" {\n     /// - If the `ptr` is created in an another const, this intrinsic doesn't deallocate it.\n     /// - If the `ptr` is pointing to a local variable, this intrinsic doesn't deallocate it.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n-    #[cfg(not(bootstrap))]\n     pub fn const_deallocate(ptr: *mut u8, size: usize, align: usize);\n \n     /// Determines whether the raw bytes of the two values are equal."}, {"sha": "e7896b2cb66ed0b59d503b933948a023d04de276", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -156,7 +156,7 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(cfg_target_has_atomic)]\n-#![cfg_attr(not(bootstrap), feature(cfg_target_has_atomic_equal_alignment))]\n+#![feature(cfg_target_has_atomic_equal_alignment)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_fn_trait_bound)]"}, {"sha": "65a2c3ff6edc9ea6bf0ad4df9a22ee779507ac3a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -594,7 +594,6 @@ macro_rules! writeln {\n ///     unreachable!(\"The loop should always return\");\n /// }\n /// ```\n-#[cfg(not(bootstrap))]\n #[macro_export]\n #[rustc_builtin_macro(unreachable)]\n #[allow_internal_unstable(edition_panic)]\n@@ -608,24 +607,6 @@ macro_rules! unreachable {\n     };\n }\n \n-/// unreachable!() macro\n-#[cfg(bootstrap)]\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\n-#[allow_internal_unstable(core_panic)]\n-macro_rules! unreachable {\n-    () => ({\n-        $crate::panicking::panic(\"internal error: entered unreachable code\")\n-    });\n-    ($msg:expr $(,)?) => ({\n-        $crate::unreachable!(\"{}\", $msg)\n-    });\n-    ($fmt:expr, $($arg:tt)*) => ({\n-        $crate::panic!($crate::concat!(\"internal error: entered unreachable code: \", $fmt), $($arg)*)\n-    });\n-}\n-\n /// Indicates unimplemented code by panicking with a message of \"not implemented\".\n ///\n /// This allows your code to type-check, which is useful if you are prototyping or"}, {"sha": "91458a4ca2a030346c44b8b93207f34a91dc7046", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -56,7 +56,6 @@ pub const fn panic_str(expr: &str) -> ! {\n     panic_display(&expr);\n }\n \n-#[cfg(not(bootstrap))]\n #[inline]\n #[track_caller]\n #[rustc_diagnostic_item = \"unreachable_display\"] // needed for `non-fmt-panics` lint\n@@ -85,7 +84,6 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-#[cfg(not(bootstrap))]\n #[cold]\n #[inline(never)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function"}, {"sha": "06870c6d06cbe9333d79f7330c36089299b668e2", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -80,7 +80,6 @@ fn test_hints_in_const_contexts() {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[test]\n fn test_const_allocate_at_runtime() {\n     use core::intrinsics::const_allocate;\n@@ -89,7 +88,6 @@ fn test_const_allocate_at_runtime() {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[test]\n fn test_const_deallocate_at_runtime() {\n     use core::intrinsics::const_deallocate;"}, {"sha": "28830222c1a94b0f31153f8d1a47a1af8e8f6f84", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -6,8 +6,6 @@\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n-#![cfg_attr(bootstrap, feature(cfg_panic))]\n-#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(const_assume)]\n #![feature(const_black_box)]\n #![feature(const_bool_to_option)]"}, {"sha": "2291400537c9431fa0d292e0b43bb95c4ea4e52f", "filename": "library/portable-simd/crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -41,7 +41,6 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n     /// follows Rust's `T as U` semantics, including saturating float casts\n     /// which amounts to the same as `simd_cast` for many cases\n-    #[cfg(not(bootstrap))]\n     pub(crate) fn simd_as<T, U>(x: T) -> U;\n \n     /// neg/fneg"}, {"sha": "35c5b6b84f81fec784faa0d32483fc5f199f16a9", "filename": "library/portable-simd/crates/core_simd/src/vector.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -62,10 +62,7 @@ where\n     /// `from_slice` will panic if the slice's `len` is less than the vector's `Simd::LANES`.\n     #[must_use]\n     pub const fn from_slice(slice: &[T]) -> Self {\n-        assert!(\n-            slice.len() >= LANES,\n-            \"slice length must be at least the number of lanes\"\n-        );\n+        assert!(slice.len() >= LANES, \"slice length must be at least the number of lanes\");\n         let mut array = [slice[0]; LANES];\n         let mut i = 0;\n         while i < LANES {\n@@ -100,7 +97,6 @@ where\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[cfg(not(bootstrap))]\n     pub fn cast<U: SimdElement>(self) -> Simd<U, LANES> {\n         unsafe { intrinsics::simd_as(self) }\n     }"}, {"sha": "c0524352193f947b45367a3470d5aa1557afe91f", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -371,7 +371,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -449,7 +449,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n@@ -473,7 +473,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { base: self.base.iter() }\n@@ -503,7 +503,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { base: self.base.iter_mut() }\n@@ -568,7 +568,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { base: self.base.drain() }\n@@ -610,7 +610,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>\n     where\n@@ -634,7 +634,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(map.len(), 4);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -2001,7 +2001,7 @@ impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type IntoIter = Iter<'a, K, V>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     fn into_iter(self) -> Iter<'a, K, V> {\n         self.iter()\n     }\n@@ -2013,7 +2013,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S> {\n     type IntoIter = IterMut<'a, K, V>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n@@ -2043,7 +2043,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "2eb4cacabb83100c3bf4d00ecc4d356b995042ee", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -185,7 +185,7 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { base: self.base.iter() }\n@@ -250,7 +250,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert!(set.is_empty());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { base: self.base.drain() }\n@@ -289,7 +289,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>\n     where\n@@ -312,7 +312,7 @@ impl<T, S> HashSet<T, S> {\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -537,7 +537,7 @@ where\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference { iter: self.iter(), other }\n@@ -565,7 +565,7 @@ where\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(\n         &'a self,\n@@ -593,7 +593,7 @@ where\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -622,7 +622,7 @@ where\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() >= other.len() {\n@@ -1423,7 +1423,7 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type IntoIter = Iter<'a, T>;\n \n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1455,7 +1455,7 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n-    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n+    #[rustc_lint_query_instability]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "1e0d9b79b9f6e453b089dd58c96e369035b52419", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -243,7 +243,6 @@\n #![feature(c_variadic)]\n #![feature(cfg_accessible)]\n #![feature(cfg_eval)]\n-#![cfg_attr(bootstrap, feature(cfg_target_has_atomic))]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]"}, {"sha": "8329e9735d43dff78b1a282402f8bc5320954cfa", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -67,8 +67,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n-                #[cfg(bootstrap)]\n-                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -82,8 +80,6 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n-                #[cfg(bootstrap)]\n-                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -105,8 +101,6 @@ pub fn do_not_run_ignored_tests() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -129,8 +123,6 @@ pub fn ignored_tests_result_in_ignored() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -157,8 +149,6 @@ fn test_should_panic() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -185,8 +175,6 @@ fn test_should_panic_good_message() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -218,8 +206,6 @@ fn test_should_panic_bad_message() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -255,8 +241,6 @@ fn test_should_panic_non_string_message_type() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -284,8 +268,6 @@ fn test_should_panic_but_succeeds() {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n-                #[cfg(bootstrap)]\n-                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(f)),\n         };\n@@ -321,8 +303,6 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -359,8 +339,6 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             compile_fail: false,\n             no_run: false,\n             test_type,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -401,8 +379,6 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         compile_fail: false,\n         no_run: false,\n         test_type,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     }\n }\n \n@@ -516,8 +492,6 @@ pub fn exclude_should_panic_option() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n-            #[cfg(bootstrap)]\n-            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(move || {})),\n     });\n@@ -543,8 +517,6 @@ pub fn exact_filter_match() {\n                     compile_fail: false,\n                     no_run: false,\n                     test_type: TestType::Unknown,\n-                    #[cfg(bootstrap)]\n-                    allow_fail: false,\n                 },\n                 testfn: DynTestFn(Box::new(move || {})),\n             })\n@@ -635,8 +607,6 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n-                #[cfg(bootstrap)]\n-                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(testfn)),\n         };\n@@ -789,8 +759,6 @@ pub fn test_bench_no_iter() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -814,8 +782,6 @@ pub fn test_bench_iter() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -833,8 +799,6 @@ fn should_sort_failures_before_printing_them() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     };\n \n     let test_b = TestDesc {\n@@ -846,8 +810,6 @@ fn should_sort_failures_before_printing_them() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     };\n \n     let mut out = PrettyFormatter::new(OutputLocation::Raw(Vec::new()), false, 10, false, None);"}, {"sha": "1084fb98389fb08c8f74fe6e85765a652f32063f", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -123,8 +123,6 @@ pub struct TestDesc {\n     pub compile_fail: bool,\n     pub no_run: bool,\n     pub test_type: TestType,\n-    #[cfg(bootstrap)]\n-    pub allow_fail: bool,\n }\n \n impl TestDesc {"}, {"sha": "eabf10eda97e538c5e31365d1b308e0675747aa6", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -953,8 +953,6 @@ impl Tester for Collector {\n                 compile_fail: config.compile_fail,\n                 no_run,\n                 test_type: test::TestType::DocTest,\n-                #[cfg(bootstrap)]\n-                allow_fail: false,\n             },\n             testfn: test::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {"}, {"sha": "f4cb935246423dc0db4cd40b505736f1fd09c576", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -22,6 +22,7 @@\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]\n+#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "85256ff0e995fa247c5ab0622371fce176a366c2", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -18,7 +18,7 @@\n // warn on rustc internal lints\n #![warn(rustc::internal)]\n // Disable this rustc lint for now, as it was also done in rustc\n-#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n+#![allow(rustc::potential_query_instability)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)"}, {"sha": "1bdea33dffaf9ebb0bb9a06a5e14b19840d0c751", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c3a71de1f798822594498559622407ed882d88/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c3a71de1f798822594498559622407ed882d88/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=22c3a71de1f798822594498559622407ed882d88", "patch": "@@ -885,8 +885,6 @@ pub fn make_test_description<R: Read>(\n         compile_fail: false,\n         no_run: false,\n         test_type: test::TestType::Unknown,\n-        #[cfg(bootstrap)]\n-        allow_fail: false,\n     }\n }\n "}]}