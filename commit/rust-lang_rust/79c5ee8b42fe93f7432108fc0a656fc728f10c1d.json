{"sha": "79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzVlZThiNDJmZTkzZjc0MzIxMDhmYzBhNjU2ZmM3MjhmMTBjMWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-18T00:03:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-18T00:03:59Z"}, "message": "Add config options for formatting macro matchers and bodies\n\nCloses #2753", "tree": {"sha": "f9ad223d21b066688082af0975d3aee36e261b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ad223d21b066688082af0975d3aee36e261b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "html_url": "https://github.com/rust-lang/rust/commit/79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27d544478e5e70c18b74f84310c6ad43d7b7a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27d544478e5e70c18b74f84310c6ad43d7b7a86", "html_url": "https://github.com/rust-lang/rust/commit/b27d544478e5e70c18b74f84310c6ad43d7b7a86"}], "stats": {"total": 123, "additions": 108, "deletions": 15}, "files": [{"sha": "a0e3e63c74e61b074366df9994bd735544731a3f", "filename": "Configurations.md", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "patch": "@@ -1006,6 +1006,76 @@ fn main() {\n \n See also [`max_width`](#max_width).\n \n+## `format_macro_matchers`\n+\n+Format the metavariable matching patterns in macros.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `false` (default):\n+\n+```rust\n+macro_rules! foo {\n+    ($a: ident : $b: ty) => {\n+        $a(42): $b;\n+    };\n+    ($a: ident $b: ident $c: ident) => {\n+        $a = $b + $c;\n+    };\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => {\n+        $a(42): $b;\n+    };\n+    ($a:ident $b:ident $c:ident) => {\n+        $a = $b + $c;\n+    };\n+}\n+```\n+\n+See also [`format_macro_bodies`](#format_macro_bodies).\n+\n+\n+## `format_macro_bodies`\n+\n+Format the bodies of macros.\n+\n+- **Default value**: `true`\n+- **Possible values**: `true`, `false`\n+- **Stable**: No\n+\n+#### `true` (default):\n+\n+```rust\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => {\n+        $a(42): $b;\n+    };\n+    ($a:ident $b:ident $c:ident) => {\n+        $a = $b + $c;\n+    };\n+}\n+```\n+\n+#### `false`:\n+\n+```rust\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => { $a(42): $b; };\n+    ($a:ident $b:ident $c:ident) => { $a=$b+$c; };\n+}\n+```\n+\n+See also [`format_macro_matchers`](#format_macro_matchers).\n+\n+\n ## `hard_tabs`\n \n Use tab characters for indentation, spaces for alignment"}, {"sha": "af344a8720abbaa49a9de0847fe03be0f941ba3f", "filename": "src/config/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "patch": "@@ -42,17 +42,20 @@ create_config! {\n     tab_spaces: usize, 4, true, \"Number of spaces per tab\";\n     newline_style: NewlineStyle, NewlineStyle::Native, true, \"Unix or Windows line endings\";\n     use_small_heuristics: Heuristics, Heuristics::Default, true, \"Whether to use different \\\n-        formatting for items and expressions if they satisfy a heuristic notion of 'small'.\";\n-    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items.\";\n+        formatting for items and expressions if they satisfy a heuristic notion of 'small'\";\n+    indent_style: IndentStyle, IndentStyle::Block, false, \"How do we indent expressions or items\";\n \n-    // Comments and strings\n+    // Comments. macros, and strings\n     wrap_comments: bool, false, false, \"Break comments to fit on the line\";\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, false, \"Convert /* */ comments to // comments where possible\";\n     license_template_path: String, String::default(), false,\n         \"Beginning of file must match license template\";\n     format_strings: bool, false, false, \"Format string literals where necessary\";\n+    format_macro_matchers: bool, true, false,\n+        \"Format the metavariable matching patterns in macros\";\n+    format_macro_bodies: bool, true, false, \"Format the bodies of macros\";\n \n     // Single line expressions and items\n     empty_item_single_line: bool, true, false,\n@@ -79,13 +82,13 @@ create_config! {\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";\n     spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ..= range operators\";\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n-        \"Where to put a binary operator when a binary expression goes multiline.\";\n+        \"Where to put a binary operator when a binary expression goes multiline\";\n \n     // Misc.\n-    remove_nested_parens: bool, true, true, \"Remove nested parens.\";\n-    combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";\n+    remove_nested_parens: bool, true, true, \"Remove nested parens\";\n+    combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n-                                             threshold.\";\n+                                             threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n         the same line with the pattern of arms\";\n     force_multiline_blocks: bool, false, false,\n@@ -101,10 +104,10 @@ create_config! {\n     match_block_trailing_comma: bool, false, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n     blank_lines_upper_bound: usize, 1, false,\n-        \"Maximum number of blank lines which can be put between items.\";\n+        \"Maximum number of blank lines which can be put between items\";\n     blank_lines_lower_bound: usize, 0, false,\n-        \"Minimum number of blank lines which must be put between items.\";\n-    edition: Edition, Edition::Edition2015, false, \"The edition of the parser. (RFC 2052)\";\n+        \"Minimum number of blank lines which must be put between items\";\n+    edition: Edition, Edition::Edition2015, false, \"The edition of the parser (RFC 2052)\";\n \n     // Options that can change the source code beyond whitespace/blocks (somewhat linty things)\n     merge_derives: bool, true, true, \"Merge multiple `#[derive(...)]` into a single one\";\n@@ -118,7 +121,7 @@ create_config! {\n     color: Color, Color::Auto, false,\n         \"What Color option to use when none is supplied: Always, Never, Auto\";\n     required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n-        \"Require a specific version of rustfmt.\";\n+        \"Require a specific version of rustfmt\";\n     unstable_features: bool, false, false,\n             \"Enables unstable features. Only available on nightly channel\";\n     disable_all_formatting: bool, false, false, \"Don't reformat anything\";\n@@ -133,7 +136,7 @@ create_config! {\n     report_fixme: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n     ignore: IgnoreList, IgnoreList::default(), false,\n-        \"Skip formatting the specified files and directories.\";\n+        \"Skip formatting the specified files and directories\";\n \n     // Not user-facing\n     verbose: Verbosity, Verbosity::Normal, false, \"How much to information to emit to the user\";"}, {"sha": "4f3891fbf4958f8d0e865972b82c120d1f55755a", "filename": "src/macros.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c5ee8b42fe93f7432108fc0a656fc728f10c1d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=79c5ee8b42fe93f7432108fc0a656fc728f10c1d", "patch": "@@ -938,10 +938,22 @@ fn format_macro_args(\n     toks: ThinTokenStream,\n     shape: Shape,\n ) -> Option<String> {\n+    if !context.config.format_macro_matchers() {\n+        let token_stream: TokenStream = toks.into();\n+        let span = span_for_token_stream(token_stream);\n+        return Some(match span {\n+            Some(span) => context.snippet(span).to_owned(),\n+            None => String::new(),\n+        });\n+    }\n     let parsed_args = MacroArgParser::new().parse(toks)?;\n     wrap_macro_args(context, &parsed_args, shape)\n }\n \n+fn span_for_token_stream(token_stream: TokenStream) -> Option<Span> {\n+    token_stream.trees().next().map(|tt| tt.span())\n+}\n+\n // We should insert a space if the next token is a:\n #[derive(Copy, Clone, PartialEq)]\n enum SpaceState {\n@@ -1172,13 +1184,14 @@ impl MacroParser {\n             TokenTree::Token(_, Token::FatArrow) => {}\n             _ => return None,\n         }\n-        let (mut hi, body) = match self.toks.next()? {\n+        let (mut hi, body, whole_body) = match self.toks.next()? {\n             TokenTree::Token(..) => return None,\n             TokenTree::Delimited(sp, _) => {\n                 let data = sp.data();\n                 (\n                     data.hi,\n                     Span::new(data.lo + BytePos(1), data.hi - BytePos(1), data.ctxt),\n+                    sp,\n                 )\n             }\n         };\n@@ -1191,6 +1204,7 @@ impl MacroParser {\n             args_paren_kind,\n             args,\n             body,\n+            whole_body,\n         })\n     }\n }\n@@ -1207,6 +1221,7 @@ struct MacroBranch {\n     args_paren_kind: DelimToken,\n     args: ThinTokenStream,\n     body: Span,\n+    whole_body: Span,\n }\n \n impl MacroBranch {\n@@ -1229,6 +1244,12 @@ impl MacroBranch {\n             result += \" =>\";\n         }\n \n+        if !context.config.format_macro_bodies() {\n+            result += \" \";\n+            result += context.snippet(self.whole_body);\n+            return Some(result);\n+        }\n+\n         // The macro body is the most interesting part. It might end up as various\n         // AST nodes, but also has special variables (e.g, `$foo`) which can't be\n         // parsed as regular Rust code (and note that these can be escaped using\n@@ -1237,14 +1258,13 @@ impl MacroBranch {\n \n         let old_body = context.snippet(self.body).trim();\n         let (body_str, substs) = replace_names(old_body)?;\n+        let has_block_body = old_body.starts_with('{');\n \n         let mut config = context.config.clone();\n         config.set().hide_parse_errors(true);\n \n         result += \" {\";\n \n-        let has_block_body = old_body.starts_with('{');\n-\n         let body_indent = if has_block_body {\n             shape.indent\n         } else {"}]}