{"sha": "0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "node_id": "C_kwDOAAsO6NoAKDA0NjhiMTFkZTdjYmQyYWQ1ZDMxMTU5N2Q5Y2ZhYWJkZWRmYWI5Y2Q", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-27T15:18:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-27T15:23:43Z"}, "message": "Remove `CompletionKind` in favor of `CompletionItemKind`", "tree": {"sha": "8ce9757c7471843fafe544a432a1e1fed5d41c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce9757c7471843fafe544a432a1e1fed5d41c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "html_url": "https://github.com/rust-lang/rust/commit/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "722489e3ff4c16dc179d30e729847314c918511f", "url": "https://api.github.com/repos/rust-lang/rust/commits/722489e3ff4c16dc179d30e729847314c918511f", "html_url": "https://github.com/rust-lang/rust/commit/722489e3ff4c16dc179d30e729847314c918511f"}], "stats": {"total": 787, "additions": 191, "deletions": 596}, "files": [{"sha": "3e658c6e91d898f4625dc678cee1f66a73e5ee6c", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -21,7 +21,7 @@ use hir::known;\n use ide_db::SymbolKind;\n \n use crate::{\n-    item::{Builder, CompletionKind},\n+    item::Builder,\n     render::{\n         const_::render_const,\n         enum_variant::render_variant,\n@@ -76,8 +76,7 @@ impl Completions {\n     }\n \n     pub(crate) fn add_keyword(&mut self, ctx: &CompletionContext, keyword: &'static str) {\n-        let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), keyword);\n-        item.kind(CompletionItemKind::Keyword);\n+        let item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), keyword);\n         item.add_to(self);\n     }\n \n@@ -191,9 +190,7 @@ impl Completions {\n     }\n \n     pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n-        let mut item =\n-            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), \"'static\");\n-        item.kind(CompletionItemKind::SymbolKind(SymbolKind::LifetimeParam));\n+        let item = CompletionItem::new(SymbolKind::LifetimeParam, ctx.source_range(), \"'static\");\n         self.add(item.build());\n     }\n "}, {"sha": "2482418ae6a1fdff982a606ce28f6a86caa9bb67", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -12,7 +12,7 @@ use syntax::{algo::non_trivia_sibling, ast, AstNode, Direction, SyntaxKind, T};\n \n use crate::{\n     context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind},\n     Completions,\n };\n \n@@ -69,11 +69,10 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n \n     let add_completion = |attr_completion: &AttrCompletion| {\n         let mut item = CompletionItem::new(\n-            CompletionKind::Attribute,\n+            CompletionItemKind::Attribute,\n             ctx.source_range(),\n             attr_completion.label,\n         );\n-        item.kind(CompletionItemKind::Attribute);\n \n         if let Some(lookup) = attr_completion.lookup {\n             item.lookup_by(lookup);\n@@ -103,11 +102,10 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Attr {\n                 let mut item = CompletionItem::new(\n-                    CompletionKind::Attribute,\n+                    CompletionItemKind::Attribute,\n                     ctx.source_range(),\n                     name.to_string(),\n                 );\n-                item.kind(CompletionItemKind::Attribute);\n                 if let Some(docs) = mac.docs(ctx.sema.db) {\n                     item.documentation(docs);\n                 }"}, {"sha": "c83e1718ece49e702f0a2835744df13594ed3fd2", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -5,16 +5,14 @@ use std::iter;\n use syntax::SyntaxKind;\n \n use crate::{\n-    completions::Completions, context::CompletionContext, item::CompletionKind, CompletionItem,\n-    CompletionItemKind,\n+    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n     let add_completion = |item: &str| {\n         let mut completion =\n-            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), item);\n+            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), item);\n         completion.insert_text(format!(r#\"\"{}\"\"#, item));\n-        completion.kind(CompletionItemKind::Attribute);\n         acc.add(completion.build());\n     };\n \n@@ -35,7 +33,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n             if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n                     let mut item = CompletionItem::new(\n-                        CompletionKind::Attribute,\n+                        CompletionItemKind::Attribute,\n                         ctx.source_range(),\n                         s.as_str(),\n                     );\n@@ -49,7 +47,7 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n             if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n                     let item = CompletionItem::new(\n-                        CompletionKind::Attribute,\n+                        CompletionItemKind::Attribute,\n                         ctx.source_range(),\n                         s.as_str(),\n                     );"}, {"sha": "7f050f25c9b1c90403b29d7eb84cb6759548efaa", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -7,7 +7,7 @@ use syntax::ast;\n \n use crate::{\n     context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind},\n     Completions,\n };\n \n@@ -56,8 +56,8 @@ pub(super) fn complete_derive(\n             _ => (&*name, None),\n         };\n \n-        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-        item.kind(CompletionItemKind::Attribute);\n+        let mut item =\n+            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n         if let Some(docs) = mac.docs(ctx.db) {\n             item.documentation(docs);\n         }"}, {"sha": "05a29dd0ae216cfc077bb140d4b7f1482ad633d1", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -4,7 +4,7 @@ use syntax::{ast, T};\n \n use crate::{\n     context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind},\n     Completions,\n };\n \n@@ -58,9 +58,9 @@ pub(super) fn complete_lint(\n             Some(qual) if !is_qualified => format!(\"{}::{}\", qual, name),\n             _ => name.to_owned(),\n         };\n-        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-        item.kind(CompletionItemKind::Attribute)\n-            .documentation(hir::Documentation::new(description.to_owned()));\n+        let mut item =\n+            CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n+        item.documentation(hir::Documentation::new(description.to_owned()));\n         item.add_to(acc)\n     }\n }"}, {"sha": "c240912f023da8619e574ea369f5d07f3e57f61f", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -4,7 +4,7 @@ use syntax::ast;\n \n use crate::{\n     context::CompletionContext,\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionItemKind},\n     Completions,\n };\n \n@@ -30,8 +30,7 @@ pub(super) fn complete_repr(acc: &mut Completions, ctx: &CompletionContext, inpu\n             }\n \n             let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.kind(CompletionItemKind::Attribute);\n+                CompletionItem::new(CompletionItemKind::Attribute, ctx.source_range(), label);\n             if let Some(lookup) = lookup {\n                 item.lookup_by(lookup);\n             }"}, {"sha": "ce964e986b076100e4a89a0869db535c343219b9", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 7, "deletions": 355, "changes": 362, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -119,18 +119,6 @@ fn foo(s: S) { s.$0 }\n             expect![[r#\"\n                 fd foo   u32\n                 me bar() fn(&self)\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n             \"#]],\n         );\n     }\n@@ -147,18 +135,6 @@ impl S {\n             expect![[r#\"\n                 fd the_field (u32,)\n                 me foo()     fn(self)\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n-                sn let       let\n-                sn letm      let mut\n             \"#]],\n         )\n     }\n@@ -175,18 +151,6 @@ impl A {\n             expect![[r#\"\n                 fd the_field (u32, i32)\n                 me foo()     fn(&self)\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n-                sn let       let\n-                sn letm      let mut\n             \"#]],\n         )\n     }\n@@ -199,18 +163,7 @@ impl A {\n struct A { the_field: u32 }\n fn foo(a: A) { a.$0() }\n \"#,\n-            expect![[r#\"\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n     }\n \n@@ -235,18 +188,6 @@ fn foo(a: lib::m::A) { a.$0 }\n                 fd pub_field     u32\n                 fd crate_field   u32\n                 fd super_field   u32\n-                sn ref           &expr\n-                sn refm          &mut expr\n-                sn match         match expr {}\n-                sn box           Box::new(expr)\n-                sn ok            Ok(expr)\n-                sn err           Err(expr)\n-                sn some          Some(expr)\n-                sn dbg           dbg!(expr)\n-                sn dbgr          dbg!(&expr)\n-                sn call          function(expr)\n-                sn let           let\n-                sn letm          let mut\n             \"#]],\n         );\n \n@@ -266,18 +207,6 @@ fn foo(a: lib::m::A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 fd pub_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n-                sn let       let\n-                sn letm      let mut\n             \"#]],\n         );\n \n@@ -294,19 +223,7 @@ pub mod m {\n fn foo(a: lib::m::A) { a.$0 }\n \"#,\n             expect![[r#\"\n-                fd 1     f64\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n+                fd 1 f64\n             \"#]],\n         );\n \n@@ -328,18 +245,6 @@ fn foo(a: lib::A) { a.$0 }\n                 me private_method() fn(&self)\n                 me crate_method()   fn(&self)\n                 me pub_method()     fn(&self)\n-                sn ref              &expr\n-                sn refm             &mut expr\n-                sn match            match expr {}\n-                sn box              Box::new(expr)\n-                sn ok               Ok(expr)\n-                sn err              Err(expr)\n-                sn some             Some(expr)\n-                sn dbg              dbg!(expr)\n-                sn dbgr             dbg!(&expr)\n-                sn call             function(expr)\n-                sn let              let\n-                sn letm             let mut\n             \"#]],\n         );\n         check(\n@@ -358,18 +263,6 @@ fn foo(a: lib::A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me pub_method() fn(&self)\n-                sn ref          &expr\n-                sn refm         &mut expr\n-                sn match        match expr {}\n-                sn box          Box::new(expr)\n-                sn ok           Ok(expr)\n-                sn err          Err(expr)\n-                sn some         Some(expr)\n-                sn dbg          dbg!(expr)\n-                sn dbgr         dbg!(&expr)\n-                sn call         function(expr)\n-                sn let          let\n-                sn letm         let mut\n             \"#]],\n         );\n     }\n@@ -397,18 +290,6 @@ impl A {\n             expect![[r#\"\n                 fd pub_field    u32\n                 me pub_method() fn(&self)\n-                sn ref          &expr\n-                sn refm         &mut expr\n-                sn match        match expr {}\n-                sn box          Box::new(expr)\n-                sn ok           Ok(expr)\n-                sn err          Err(expr)\n-                sn some         Some(expr)\n-                sn dbg          dbg!(expr)\n-                sn dbgr         dbg!(&expr)\n-                sn call         function(expr)\n-                sn let          let\n-                sn letm         let mut\n             \"#]],\n         )\n     }\n@@ -423,18 +304,6 @@ fn foo(u: U) { u.$0 }\n             expect![[r#\"\n                 fd field u8\n                 fd other u16\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n             \"#]],\n         );\n     }\n@@ -454,18 +323,6 @@ fn foo(a: A<u32>) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me the_method() fn(&self)\n-                sn ref          &expr\n-                sn refm         &mut expr\n-                sn match        match expr {}\n-                sn box          Box::new(expr)\n-                sn ok           Ok(expr)\n-                sn err          Err(expr)\n-                sn some         Some(expr)\n-                sn dbg          dbg!(expr)\n-                sn dbgr         dbg!(&expr)\n-                sn call         function(expr)\n-                sn let          let\n-                sn letm         let mut\n             \"#]],\n         )\n     }\n@@ -481,18 +338,6 @@ fn foo(a: A) { a.$0 }\n \"#,\n             expect![[r#\"\n                 me the_method() (as Trait) fn(&self)\n-                sn ref                    &expr\n-                sn refm                   &mut expr\n-                sn match                  match expr {}\n-                sn box                    Box::new(expr)\n-                sn ok                     Ok(expr)\n-                sn err                    Err(expr)\n-                sn some                   Some(expr)\n-                sn dbg                    dbg!(expr)\n-                sn dbgr                   dbg!(&expr)\n-                sn call                   function(expr)\n-                sn let                    let\n-                sn letm                   let mut\n             \"#]],\n         );\n         check_edit(\n@@ -523,18 +368,6 @@ fn foo(a: &A) { a.$0 }\n \",\n             expect![[r#\"\n                 me the_method() (as Trait) fn(&self)\n-                sn ref                    &expr\n-                sn refm                   &mut expr\n-                sn match                  match expr {}\n-                sn box                    Box::new(expr)\n-                sn ok                     Ok(expr)\n-                sn err                    Err(expr)\n-                sn some                   Some(expr)\n-                sn dbg                    dbg!(expr)\n-                sn dbgr                   dbg!(&expr)\n-                sn call                   function(expr)\n-                sn let                    let\n-                sn letm                   let mut\n             \"#]],\n         );\n     }\n@@ -553,18 +386,6 @@ fn foo(a: A) { a.$0 }\n \",\n             expect![[r#\"\n                 me the_method() (as Trait) fn(&self)\n-                sn ref                    &expr\n-                sn refm                   &mut expr\n-                sn match                  match expr {}\n-                sn box                    Box::new(expr)\n-                sn ok                     Ok(expr)\n-                sn err                    Err(expr)\n-                sn some                   Some(expr)\n-                sn dbg                    dbg!(expr)\n-                sn dbgr                   dbg!(&expr)\n-                sn call                   function(expr)\n-                sn let                    let\n-                sn letm                   let mut\n             \"#]],\n         );\n     }\n@@ -581,20 +402,7 @@ fn foo(a: A) {\n    a.$0\n }\n \"#,\n-            expect![[r#\"\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n     }\n \n@@ -608,20 +416,8 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                fd 0     i32\n-                fd 1     f64\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n+                fd 0 i32\n+                fd 1 f64\n             \"#]],\n         );\n     }\n@@ -637,20 +433,8 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                fd 0     i32\n-                fd 1     f64\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n+                fd 0 i32\n+                fd 1 f64\n             \"#]],\n         );\n     }\n@@ -673,18 +457,6 @@ impl T {\n \"#,\n             expect![[r#\"\n                 me blah() fn(&self)\n-                sn ref    &expr\n-                sn refm   &mut expr\n-                sn match  match expr {}\n-                sn box    Box::new(expr)\n-                sn ok     Ok(expr)\n-                sn err    Err(expr)\n-                sn some   Some(expr)\n-                sn dbg    dbg!(expr)\n-                sn dbgr   dbg!(&expr)\n-                sn call   function(expr)\n-                sn let    let\n-                sn letm   let mut\n             \"#]],\n         );\n     }\n@@ -700,18 +472,6 @@ const X: u32 = {\n \"#,\n             expect![[r#\"\n                 fd the_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n-                sn let       let\n-                sn letm      let mut\n             \"#]],\n         );\n     }\n@@ -728,16 +488,6 @@ fn foo(a: A) {\n \"#,\n             expect![[r#\"\n                 fd the_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n             \"#]],\n         );\n     }\n@@ -755,16 +505,6 @@ fn foo(a: A) {\n \"#,\n             expect![[r#\"\n                 fd the_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n             \"#]],\n         );\n     }\n@@ -781,16 +521,6 @@ fn foo(a: A) {\n \"#,\n             expect![[r#\"\n                 fd the_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n             \"#]],\n         );\n     }\n@@ -817,16 +547,6 @@ fn foo(a: A) {\n \"#,\n             expect![[r#\"\n                 fd the_field u32\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n             \"#]],\n         );\n     }\n@@ -846,18 +566,6 @@ fn foo() {\n \"#,\n             expect![[r#\"\n                 me the_method() fn(&self)\n-                sn ref          &expr\n-                sn refm         &mut expr\n-                sn match        match expr {}\n-                sn box          Box::new(expr)\n-                sn ok           Ok(expr)\n-                sn err          Err(expr)\n-                sn some         Some(expr)\n-                sn dbg          dbg!(expr)\n-                sn dbgr         dbg!(&expr)\n-                sn call         function(expr)\n-                sn let          let\n-                sn letm         let mut\n             \"#]],\n         );\n     }\n@@ -873,18 +581,6 @@ fn main() { make_s!().f$0; }\n \"#,\n             expect![[r#\"\n                 me foo() fn(&self)\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n             \"#]],\n         )\n     }\n@@ -913,18 +609,6 @@ mod foo {\n         \"#,\n             expect![[r#\"\n                 me private() fn(&self)\n-                sn ref       &expr\n-                sn refm      &mut expr\n-                sn match     match expr {}\n-                sn box       Box::new(expr)\n-                sn ok        Ok(expr)\n-                sn err       Err(expr)\n-                sn some      Some(expr)\n-                sn dbg       dbg!(expr)\n-                sn dbgr      dbg!(&expr)\n-                sn call      function(expr)\n-                sn let       let\n-                sn letm      let mut\n             \"#]],\n         );\n     }\n@@ -952,16 +636,6 @@ impl S {\n         \"#,\n             expect![[r#\"\n                 me foo() fn(&self) -> &[u8]\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n             \"#]],\n         );\n     }\n@@ -1019,16 +693,6 @@ fn f() {\n     \"#,\n             expect![[r#\"\n                 me method() fn(&self)\n-                sn ref      &expr\n-                sn refm     &mut expr\n-                sn match    match expr {}\n-                sn box      Box::new(expr)\n-                sn ok       Ok(expr)\n-                sn err      Err(expr)\n-                sn some     Some(expr)\n-                sn dbg      dbg!(expr)\n-                sn dbgr     dbg!(&expr)\n-                sn call     function(expr)\n             \"#]],\n         );\n     }\n@@ -1051,18 +715,6 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 me into_iter() (as IntoIterator) fn(self) -> <Self as IntoIterator>::IntoIter\n-                sn ref                    &expr\n-                sn refm                   &mut expr\n-                sn match                  match expr {}\n-                sn box                    Box::new(expr)\n-                sn ok                     Ok(expr)\n-                sn err                    Err(expr)\n-                sn some                   Some(expr)\n-                sn dbg                    dbg!(expr)\n-                sn dbgr                   dbg!(&expr)\n-                sn call                   function(expr)\n-                sn let                    let\n-                sn letm                   let mut\n             \"#]],\n         )\n     }"}, {"sha": "e910c1daaadaca994d9f0f6b33e69d2b607d49bd", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n \n use crate::{\n     context::{ParamKind, PatternContext},\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n /// Complete repeated parameters, both name and type. For example, if all\n@@ -75,7 +75,7 @@ fn add_new_item_to_acc(\n     label: String,\n     lookup: String,\n ) {\n-    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n-    item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n+    let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label);\n+    item.lookup_by(lookup);\n     item.add_to(acc)\n }"}, {"sha": "afb8df29116818fefdc0abb1411d3069de031ef3", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -6,7 +6,7 @@ use syntax::{SyntaxKind, T};\n \n use crate::{\n     context::PathCompletionContext, patterns::ImmediateLocation, CompletionContext, CompletionItem,\n-    CompletionItemKind, CompletionKind, Completions,\n+    CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -158,8 +158,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n }\n \n fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n-    let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw);\n-    item.kind(CompletionItemKind::Keyword);\n+    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n \n     match ctx.config.snippet_cap {\n         Some(cap) => {"}, {"sha": "28be83f196aded7896ef1b4d8a6fa32f84eacf00", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -11,7 +11,7 @@ use rustc_hash::FxHashSet;\n \n use crate::{patterns::ImmediateLocation, CompletionItem};\n \n-use crate::{context::CompletionContext, item::CompletionKind, Completions};\n+use crate::{context::CompletionContext, Completions};\n \n /// Complete mod declaration, i.e. `mod $0 ;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -80,8 +80,7 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n             if mod_under_caret.semicolon_token().is_none() {\n                 label.push(';');\n             }\n-            let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label);\n-            item.kind(SymbolKind::Module);\n+            let item = CompletionItem::new(SymbolKind::Module, ctx.source_range(), &label);\n             item.add_to(acc)\n         });\n "}, {"sha": "4ee257ab43ae899237d7c00adc3e857bbde5b3e5", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -15,11 +15,9 @@ use syntax::{\n use text_edit::TextEdit;\n \n use crate::{\n-    completions::postfix::format_like::add_format_like_completions,\n-    context::CompletionContext,\n-    item::{Builder, CompletionKind},\n-    patterns::ImmediateLocation,\n-    CompletionItem, CompletionItemKind, CompletionRelevance, Completions, SnippetScope,\n+    completions::postfix::format_like::add_format_like_completions, context::CompletionContext,\n+    item::Builder, patterns::ImmediateLocation, CompletionItem, CompletionItemKind,\n+    CompletionRelevance, Completions, SnippetScope,\n };\n \n pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -45,8 +43,9 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     // Suggest .await syntax for types that implement Future trait\n     if receiver_ty.impls_future(ctx.db) {\n-        let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\");\n-        item.kind(CompletionItemKind::Keyword).detail(\"expr.await\");\n+        let mut item =\n+            CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), \"await\");\n+        item.detail(\"expr.await\");\n         item.add_to(acc);\n     }\n \n@@ -224,8 +223,9 @@ fn build_postfix_snippet_builder<'ctx>(\n     ) -> impl Fn(&str, &str, &str) -> Builder + 'ctx {\n         move |label, detail, snippet| {\n             let edit = TextEdit::replace(delete_range, snippet.to_string());\n-            let mut item = CompletionItem::new(CompletionKind::Postfix, ctx.source_range(), label);\n-            item.detail(detail).kind(CompletionItemKind::Snippet).snippet_edit(cap, edit);\n+            let mut item =\n+                CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), label);\n+            item.detail(detail).snippet_edit(cap, edit);\n             if ctx.original_token.text() == label {\n                 let relevance =\n                     CompletionRelevance { exact_postfix_snippet_match: true, ..Default::default() };"}, {"sha": "f0c81f66bc8d14255e8a596e416bef42730702e2", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -3,8 +3,7 @@ use ide_db::{helpers::FamousDefs, SymbolKind};\n use syntax::{ast::Expr, T};\n \n use crate::{\n-    item::CompletionKind, patterns::ImmediateLocation, CompletionContext, CompletionItem,\n-    CompletionItemKind, Completions,\n+    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n };\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -22,20 +21,17 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n             let missing_fields = ctx.sema.record_literal_missing_fields(record_expr);\n             if impl_default_trait && !missing_fields.is_empty() && ctx.path_qual().is_none() {\n                 let completion_text = \"..Default::default()\";\n-                let mut item = CompletionItem::new(\n-                    CompletionKind::Snippet,\n-                    ctx.source_range(),\n-                    completion_text,\n-                );\n+                let mut item =\n+                    CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);\n                 let completion_text =\n                     completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n-                item.insert_text(completion_text).kind(SymbolKind::Field);\n+                item.insert_text(completion_text);\n                 item.add_to(acc);\n             }\n             if ctx.previous_token_is(T![.]) {\n                 let mut item =\n-                    CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), \"..\");\n-                item.insert_text(\".\").kind(CompletionItemKind::Snippet);\n+                    CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), \"..\");\n+                item.insert_text(\".\");\n                 item.add_to(acc);\n                 return None;\n             }"}, {"sha": "1840e780edf8f4fd06c4940dd315d2e98eb97fb0", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -6,12 +6,12 @@ use syntax::T;\n \n use crate::{\n     context::PathCompletionContext, item::Builder, CompletionContext, CompletionItem,\n-    CompletionItemKind, CompletionKind, Completions, SnippetScope,\n+    CompletionItemKind, Completions, SnippetScope,\n };\n \n fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str) -> Builder {\n-    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), label);\n-    item.insert_snippet(cap, snippet).kind(CompletionItemKind::Snippet);\n+    let mut item = CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), label);\n+    item.insert_snippet(cap, snippet);\n     item\n }\n "}, {"sha": "fc6ef5839c89cc6ac97c7189ebfa8e0f4a6e1992", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -40,7 +40,7 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n+use crate::{CompletionContext, CompletionItem, CompletionItemKind, Completions};\n \n #[derive(Debug, PartialEq, Eq)]\n enum ImplCompletionKind {\n@@ -141,14 +141,14 @@ fn add_function_impl(\n         format!(\"fn {}(..)\", fn_name)\n     };\n \n-    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n-    item.lookup_by(fn_name).set_documentation(func.docs(ctx.db));\n-\n     let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n     } else {\n         CompletionItemKind::SymbolKind(SymbolKind::Function)\n     };\n+    let mut item = CompletionItem::new(completion_kind, ctx.source_range(), label);\n+    item.lookup_by(fn_name).set_documentation(func.docs(ctx.db));\n+\n     let range = replacement_range(ctx, fn_def_node);\n \n     if let Some(source) = func.source(ctx.db) {\n@@ -170,7 +170,6 @@ fn add_function_impl(\n                     item.text_edit(TextEdit::replace(range, header));\n                 }\n             };\n-            item.kind(completion_kind);\n             item.add_to(acc);\n         }\n     }\n@@ -211,10 +210,9 @@ fn add_type_alias_impl(\n     let snippet = format!(\"type {} = \", alias_name);\n \n     let range = replacement_range(ctx, type_def_node);\n-    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n+    let mut item = CompletionItem::new(SymbolKind::TypeAlias, ctx.source_range(), snippet.clone());\n     item.text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n-        .kind(SymbolKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db));\n     item.add_to(acc);\n }\n@@ -241,10 +239,9 @@ fn add_const_impl(\n \n                 let range = replacement_range(ctx, const_def_node);\n                 let mut item =\n-                    CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone());\n+                    CompletionItem::new(SymbolKind::Const, ctx.source_range(), snippet.clone());\n                 item.text_edit(TextEdit::replace(range, snippet))\n                     .lookup_by(const_name)\n-                    .kind(SymbolKind::Const)\n                     .set_documentation(const_.docs(ctx.db));\n                 item.add_to(acc);\n             }\n@@ -358,23 +355,7 @@ impl Test for T {\n     }\n }\n \",\n-            expect![[r#\"\n-                sn if    if expr {}\n-                sn while while expr {}\n-                sn not   !expr\n-                sn ref   &expr\n-                sn refm  &mut expr\n-                sn match match expr {}\n-                sn box   Box::new(expr)\n-                sn ok    Ok(expr)\n-                sn err   Err(expr)\n-                sn some  Some(expr)\n-                sn dbg   dbg!(expr)\n-                sn dbgr  dbg!(&expr)\n-                sn call  function(expr)\n-                sn let   let\n-                sn letm  let mut\n-            \"#]],\n+            expect![[r#\"\"#]],\n         );\n \n         check("}, {"sha": "3f0accfbe17fa5fd9b8b987f449a5f6972ff68ac", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -21,10 +21,6 @@ use text_edit::TextEdit;\n /// `CompletionItem`, use `new` method and the `Builder` struct.\n #[derive(Clone)]\n pub struct CompletionItem {\n-    /// Used only internally in tests, to check only specific kind of\n-    /// completion (postfix, keyword, reference, etc).\n-    #[allow(unused)]\n-    pub(crate) completion_kind: CompletionKind,\n     /// Label in the completion pop up which identifies completion.\n     label: String,\n     /// Range of identifier that is being completed.\n@@ -43,7 +39,7 @@ pub struct CompletionItem {\n     is_snippet: bool,\n \n     /// What item (struct, function, etc) are we completing.\n-    kind: Option<CompletionItemKind>,\n+    kind: CompletionItemKind,\n \n     /// Lookup is used to check if completion item indeed can complete current\n     /// ident.\n@@ -92,9 +88,7 @@ impl fmt::Debug for CompletionItem {\n         } else {\n             s.field(\"text_edit\", &self.text_edit);\n         }\n-        if let Some(kind) = self.kind().as_ref() {\n-            s.field(\"kind\", kind);\n-        }\n+        s.field(\"kind\", &self.kind());\n         if self.lookup() != self.label() {\n             s.field(\"lookup\", &self.lookup());\n         }\n@@ -270,40 +264,23 @@ impl CompletionItemKind {\n     }\n }\n \n-// FIXME remove this?\n-/// Like [`CompletionItemKind`] but solely used for filtering test results.\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n-pub(crate) enum CompletionKind {\n-    /// Parser-based keyword completion.\n-    Keyword,\n-    /// Your usual \"complete all valid identifiers\".\n-    Reference,\n-    /// \"Secret sauce\" completions.\n-    Magic,\n-    Snippet,\n-    Postfix,\n-    BuiltinType,\n-    Attribute,\n-}\n-\n impl CompletionItem {\n     pub(crate) fn new(\n-        completion_kind: CompletionKind,\n+        kind: impl Into<CompletionItemKind>,\n         source_range: TextRange,\n         label: impl Into<String>,\n     ) -> Builder {\n         let label = label.into();\n         Builder {\n             source_range,\n-            completion_kind,\n             label,\n             insert_text: None,\n             is_snippet: false,\n             trait_name: None,\n             detail: None,\n             documentation: None,\n             lookup: None,\n-            kind: None,\n+            kind: kind.into(),\n             text_edit: None,\n             deprecated: false,\n             trigger_call_info: None,\n@@ -342,7 +319,7 @@ impl CompletionItem {\n         self.lookup.as_deref().unwrap_or(&self.label)\n     }\n \n-    pub fn kind(&self) -> Option<CompletionItemKind> {\n+    pub fn kind(&self) -> CompletionItemKind {\n         self.kind\n     }\n \n@@ -401,7 +378,6 @@ impl ImportEdit {\n #[derive(Clone)]\n pub(crate) struct Builder {\n     source_range: TextRange,\n-    completion_kind: CompletionKind,\n     imports_to_add: SmallVec<[ImportEdit; 1]>,\n     trait_name: Option<String>,\n     label: String,\n@@ -410,7 +386,7 @@ pub(crate) struct Builder {\n     detail: Option<String>,\n     documentation: Option<Documentation>,\n     lookup: Option<String>,\n-    kind: Option<CompletionItemKind>,\n+    kind: CompletionItemKind,\n     text_edit: Option<TextEdit>,\n     deprecated: bool,\n     trigger_call_info: Option<bool>,\n@@ -454,7 +430,6 @@ impl Builder {\n             documentation: self.documentation,\n             lookup,\n             kind: self.kind,\n-            completion_kind: self.completion_kind,\n             deprecated: self.deprecated,\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             relevance: self.relevance,\n@@ -487,10 +462,6 @@ impl Builder {\n         self.is_snippet = true;\n         self.insert_text(snippet)\n     }\n-    pub(crate) fn kind(&mut self, kind: impl Into<CompletionItemKind>) -> &mut Builder {\n-        self.kind = Some(kind.into());\n-        self\n-    }\n     pub(crate) fn text_edit(&mut self, edit: TextEdit) -> &mut Builder {\n         self.text_edit = Some(edit);\n         self"}, {"sha": "d555eff878c7a5c789477bcf84f92a2e39758508", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -24,7 +24,7 @@ use ide_db::{\n use syntax::algo;\n use text_edit::TextEdit;\n \n-use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n+use crate::{completions::Completions, context::CompletionContext};\n \n pub use crate::{\n     config::CompletionConfig,"}, {"sha": "4180d704a3084a70e00c4ab60e309d284b799aad", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 96, "deletions": 73, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     context::{PathCompletionContext, PathKind},\n     item::{CompletionRelevanceTypeMatch, ImportEdit},\n     render::{enum_variant::render_variant, function::render_fn, macro_::render_macro},\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance,\n+    CompletionContext, CompletionItem, CompletionItemKind, CompletionRelevance,\n };\n /// Interface for data and methods required for items rendering.\n #[derive(Debug)]\n@@ -85,7 +85,7 @@ pub(crate) fn render_field(\n     let is_deprecated = ctx.is_deprecated(field);\n     let name = field.name(ctx.db()).to_string();\n     let mut item = CompletionItem::new(\n-        CompletionKind::Reference,\n+        SymbolKind::Field,\n         ctx.source_range(),\n         receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name)),\n     );\n@@ -94,8 +94,7 @@ pub(crate) fn render_field(\n         exact_name_match: compute_exact_name_match(ctx.completion, name.as_str()),\n         ..CompletionRelevance::default()\n     });\n-    item.kind(SymbolKind::Field)\n-        .detail(ty.display(ctx.db()).to_string())\n+    item.detail(ty.display(ctx.db()).to_string())\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n         .lookup_by(name.as_str());\n@@ -118,13 +117,11 @@ pub(crate) fn render_tuple_field(\n     ty: &hir::Type,\n ) -> CompletionItem {\n     let mut item = CompletionItem::new(\n-        CompletionKind::Reference,\n+        SymbolKind::Field,\n         ctx.source_range(),\n         receiver.map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n     );\n-    item.kind(SymbolKind::Field)\n-        .detail(ty.display(ctx.db()).to_string())\n-        .lookup_by(field.to_string());\n+    item.detail(ty.display(ctx.db()).to_string()).lookup_by(field.to_string());\n     item.build()\n }\n \n@@ -147,10 +144,7 @@ pub(crate) fn render_resolution_with_import(\n         hir::ScopeDef::ModuleDef(hir::ModuleDef::TypeAlias(t)) => t.name(ctx.completion.db),\n         _ => item_name(ctx.db(), import_edit.import.original_item)?,\n     };\n-    render_resolution_(ctx, local_name, Some(import_edit), &resolution).map(|mut item| {\n-        item.completion_kind = CompletionKind::Magic;\n-        item\n-    })\n+    render_resolution_(ctx, local_name, Some(import_edit), &resolution)\n }\n \n fn render_resolution_(\n@@ -162,11 +156,6 @@ fn render_resolution_(\n     let _p = profile::span(\"render_resolution\");\n     use hir::ModuleDef::*;\n \n-    let completion_kind = match resolution {\n-        hir::ScopeDef::ModuleDef(BuiltinType(..)) => CompletionKind::BuiltinType,\n-        _ => CompletionKind::Reference,\n-    };\n-\n     let kind = match resolution {\n         hir::ScopeDef::ModuleDef(Function(func)) => {\n             return render_fn(ctx, import_to_add, Some(local_name), *func);\n@@ -208,11 +197,10 @@ fn render_resolution_(\n         }\n         hir::ScopeDef::Unknown => {\n             let mut item = CompletionItem::new(\n-                CompletionKind::Reference,\n+                CompletionItemKind::UnresolvedReference,\n                 ctx.source_range(),\n                 local_name.to_string(),\n             );\n-            item.kind(CompletionItemKind::UnresolvedReference);\n             if let Some(import_to_add) = import_to_add {\n                 item.add_import(import_to_add);\n             }\n@@ -221,7 +209,7 @@ fn render_resolution_(\n     };\n \n     let local_name = local_name.to_string();\n-    let mut item = CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n+    let mut item = CompletionItem::new(kind, ctx.source_range(), local_name.clone());\n     if let hir::ScopeDef::Local(local) = resolution {\n         let ty = local.ty(ctx.db());\n         if !ty.is_unknown() {\n@@ -260,8 +248,7 @@ fn render_resolution_(\n             }\n         }\n     }\n-    item.kind(kind)\n-        .set_documentation(scope_def_docs(ctx.db(), resolution))\n+    item.set_documentation(scope_def_docs(ctx.db(), resolution))\n         .set_deprecated(scope_def_is_deprecated(&ctx, resolution));\n \n     if let Some(import_to_add) = import_to_add {\n@@ -344,37 +331,54 @@ mod tests {\n     use std::cmp;\n \n     use expect_test::{expect, Expect};\n+    use ide_db::SymbolKind;\n     use itertools::Itertools;\n \n     use crate::{\n         item::CompletionRelevanceTypeMatch,\n         tests::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n-        CompletionKind, CompletionRelevance,\n+        CompletionItem, CompletionItemKind, CompletionRelevance,\n     };\n \n     #[track_caller]\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = do_completion(ra_fixture, CompletionKind::Reference);\n+    fn check(ra_fixture: &str, kind: impl Into<CompletionItemKind>, expect: Expect) {\n+        let actual = do_completion(ra_fixture, kind.into());\n         expect.assert_debug_eq(&actual);\n     }\n \n     #[track_caller]\n-    fn check_relevance(ra_fixture: &str, expect: Expect) {\n-        check_relevance_for_kinds(&[CompletionKind::Reference], ra_fixture, expect)\n+    fn check_kinds(ra_fixture: &str, kinds: &[CompletionItemKind], expect: Expect) {\n+        let actual: Vec<_> =\n+            kinds.iter().flat_map(|&kind| do_completion(ra_fixture, kind)).collect();\n+        expect.assert_debug_eq(&actual);\n+    }\n+\n+    #[track_caller]\n+    fn check_relevance_for_kinds(ra_fixture: &str, kinds: &[CompletionItemKind], expect: Expect) {\n+        let mut actual = get_all_items(TEST_CONFIG, ra_fixture);\n+        actual.retain(|it| kinds.contains(&it.kind()));\n+        actual.sort_by_key(|it| cmp::Reverse(it.relevance().score()));\n+        check_relevance_(actual, expect);\n     }\n \n     #[track_caller]\n-    fn check_relevance_for_kinds(kinds: &[CompletionKind], ra_fixture: &str, expect: Expect) {\n+    fn check_relevance(ra_fixture: &str, expect: Expect) {\n         let mut actual = get_all_items(TEST_CONFIG, ra_fixture);\n-        actual.retain(|it| kinds.contains(&it.completion_kind));\n+        actual.retain(|it| it.kind() != CompletionItemKind::Snippet);\n+        actual.retain(|it| it.kind() != CompletionItemKind::Keyword);\n+        actual.retain(|it| it.kind() != CompletionItemKind::BuiltinType);\n         actual.sort_by_key(|it| cmp::Reverse(it.relevance().score()));\n+        check_relevance_(actual, expect);\n+    }\n \n+    #[track_caller]\n+    fn check_relevance_(actual: Vec<CompletionItem>, expect: Expect) {\n         let actual = actual\n             .into_iter()\n             .flat_map(|it| {\n                 let mut items = vec![];\n \n-                let tag = it.kind().unwrap().tag();\n+                let tag = it.kind().tag();\n                 let relevance = display_relevance(it.relevance());\n                 items.push(format!(\"{} {} {}\\n\", tag, it.label(), relevance));\n \n@@ -418,6 +422,7 @@ enum Foo { Foo { x: i32, y: i32 } }\n \n fn main() { Foo::Fo$0 }\n \"#,\n+            SymbolKind::Variant,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -443,6 +448,7 @@ enum Foo { Foo (i32, i32) }\n \n fn main() { Foo::Fo$0 }\n \"#,\n+            SymbolKind::Variant,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -470,6 +476,7 @@ fn foo<T>(a: u32, b: u32, t: T) -> (u32, T) { (a, t) }\n \n fn main() { fo$0 }\n \"#,\n+            SymbolKind::Function,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -508,6 +515,7 @@ enum Foo { Foo }\n \n fn main() { Foo::Fo$0 }\n \"#,\n+            SymbolKind::Variant,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -527,15 +535,40 @@ fn main() { Foo::Fo$0 }\n \n     #[test]\n     fn lookup_enums_by_two_qualifiers() {\n-        check(\n+        check_kinds(\n             r#\"\n mod m {\n     pub enum Spam { Foo, Bar(i32) }\n }\n fn main() { let _: m::Spam = S$0 }\n \"#,\n+            &[\n+                CompletionItemKind::SymbolKind(SymbolKind::Function),\n+                CompletionItemKind::SymbolKind(SymbolKind::Module),\n+                CompletionItemKind::SymbolKind(SymbolKind::Variant),\n+            ],\n             expect![[r#\"\n                 [\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"main()$0\",\n+                        kind: SymbolKind(\n+                            Function,\n+                        ),\n+                        lookup: \"main\",\n+                        detail: \"fn()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"m\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"m\",\n+                        kind: SymbolKind(\n+                            Module,\n+                        ),\n+                    },\n                     CompletionItem {\n                         label: \"Spam::Bar(\u2026)\",\n                         source_range: 75..76,\n@@ -556,15 +589,6 @@ fn main() { let _: m::Spam = S$0 }\n                         },\n                         trigger_call_info: true,\n                     },\n-                    CompletionItem {\n-                        label: \"m\",\n-                        source_range: 75..76,\n-                        delete: 75..76,\n-                        insert: \"m\",\n-                        kind: SymbolKind(\n-                            Module,\n-                        ),\n-                    },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,\n@@ -584,17 +608,6 @@ fn main() { let _: m::Spam = S$0 }\n                             exact_postfix_snippet_match: false,\n                         },\n                     },\n-                    CompletionItem {\n-                        label: \"main()\",\n-                        source_range: 75..76,\n-                        delete: 75..76,\n-                        insert: \"main()$0\",\n-                        kind: SymbolKind(\n-                            Function,\n-                        ),\n-                        lookup: \"main\",\n-                        detail: \"fn()\",\n-                    },\n                 ]\n             \"#]],\n         )\n@@ -611,6 +624,7 @@ fn something_else_deprecated() {}\n \n fn main() { som$0 }\n \"#,\n+            SymbolKind::Function,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -657,6 +671,7 @@ fn main() { som$0 }\n struct A { #[deprecated] the_field: u32 }\n fn foo() { A { the$0 } }\n \"#,\n+            SymbolKind::Field,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -685,7 +700,7 @@ fn foo() { A { the$0 } }\n \n     #[test]\n     fn renders_docs() {\n-        check(\n+        check_kinds(\n             r#\"\n struct S {\n     /// Field docs\n@@ -695,6 +710,7 @@ impl S {\n     /// Method docs\n     fn bar(self) { self.$0 }\n }\"#,\n+            &[CompletionItemKind::Method, CompletionItemKind::SymbolKind(SymbolKind::Field)],\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -726,7 +742,7 @@ impl S {\n             \"#]],\n         );\n \n-        check(\n+        check_kinds(\n             r#\"\n use self::my$0;\n \n@@ -740,18 +756,23 @@ enum E {\n }\n use self::E::*;\n \"#,\n+            &[\n+                CompletionItemKind::SymbolKind(SymbolKind::Module),\n+                CompletionItemKind::SymbolKind(SymbolKind::Variant),\n+                CompletionItemKind::SymbolKind(SymbolKind::Enum),\n+            ],\n             expect![[r#\"\n                 [\n                     CompletionItem {\n-                        label: \"E\",\n+                        label: \"my\",\n                         source_range: 10..12,\n                         delete: 10..12,\n-                        insert: \"E\",\n+                        insert: \"my\",\n                         kind: SymbolKind(\n-                            Enum,\n+                            Module,\n                         ),\n                         documentation: Documentation(\n-                            \"enum docs\",\n+                            \"mod docs\",\n                         ),\n                     },\n                     CompletionItem {\n@@ -768,15 +789,15 @@ use self::E::*;\n                         ),\n                     },\n                     CompletionItem {\n-                        label: \"my\",\n+                        label: \"E\",\n                         source_range: 10..12,\n                         delete: 10..12,\n-                        insert: \"my\",\n+                        insert: \"E\",\n                         kind: SymbolKind(\n-                            Module,\n+                            Enum,\n                         ),\n                         documentation: Documentation(\n-                            \"mod docs\",\n+                            \"enum docs\",\n                         ),\n                     },\n                 ]\n@@ -795,6 +816,7 @@ impl S {\n }\n fn foo(s: S) { s.$0 }\n \"#,\n+            CompletionItemKind::Method,\n             expect![[r#\"\n                 [\n                     CompletionItem {\n@@ -1318,18 +1340,28 @@ fn main() {\n \n     #[test]\n     fn struct_field_method_ref() {\n-        check(\n+        check_kinds(\n             r#\"\n struct Foo { bar: u32 }\n impl Foo { fn baz(&self) -> u32 { 0 } }\n \n fn foo(f: Foo) { let _: &u32 = f.b$0 }\n \"#,\n+            &[CompletionItemKind::Method, CompletionItemKind::SymbolKind(SymbolKind::Field)],\n             // FIXME\n             // Ideally we'd also suggest &f.bar and &f.baz() as exact\n             // type matches. See #8058.\n             expect![[r#\"\n                 [\n+                    CompletionItem {\n+                        label: \"baz()\",\n+                        source_range: 98..99,\n+                        delete: 98..99,\n+                        insert: \"baz()$0\",\n+                        kind: Method,\n+                        lookup: \"baz\",\n+                        detail: \"fn(&self) -> u32\",\n+                    },\n                     CompletionItem {\n                         label: \"bar\",\n                         source_range: 98..99,\n@@ -1340,15 +1372,6 @@ fn foo(f: Foo) { let _: &u32 = f.b$0 }\n                         ),\n                         detail: \"u32\",\n                     },\n-                    CompletionItem {\n-                        label: \"baz()\",\n-                        source_range: 98..99,\n-                        delete: 98..99,\n-                        insert: \"baz()$0\",\n-                        kind: Method,\n-                        lookup: \"baz\",\n-                        detail: \"fn(&self) -> u32\",\n-                    },\n                 ]\n             \"#]],\n         );\n@@ -1387,7 +1410,6 @@ fn foo() {\n     #[test]\n     fn postfix_completion_relevance() {\n         check_relevance_for_kinds(\n-            &[CompletionKind::Postfix, CompletionKind::Magic],\n             r#\"\n mod ops {\n     pub trait Not {\n@@ -1404,7 +1426,8 @@ mod ops {\n fn main() {\n     let _: bool = (9 > 2).not$0;\n }\n-\"#,\n+    \"#,\n+            &[CompletionItemKind::Snippet, CompletionItemKind::Method],\n             expect![[r#\"\n                 sn not [snippet]\n                 me not() (use ops::Not) [type_could_unify]"}, {"sha": "241e0043c9c5222e8fd458625e7f76b4499ad12d", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -7,10 +7,7 @@ use syntax::{\n     display::const_label,\n };\n \n-use crate::{\n-    item::{CompletionItem, CompletionKind},\n-    render::RenderContext,\n-};\n+use crate::{item::CompletionItem, render::RenderContext};\n \n pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     ConstRender::new(ctx, const_)?.render()\n@@ -34,9 +31,8 @@ impl<'a> ConstRender<'a> {\n         let detail = self.detail();\n \n         let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name.clone());\n-        item.kind(SymbolKind::Const)\n-            .set_documentation(self.ctx.docs(self.const_))\n+            CompletionItem::new(SymbolKind::Const, self.ctx.source_range(), name.clone());\n+        item.set_documentation(self.ctx.docs(self.const_))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.const_)\n                     || self.ctx.is_deprecated_assoc_item(self.const_),"}, {"sha": "728e0e2a174bbf5cca014b81aa1f592f7acf048c", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -7,7 +7,7 @@ use ide_db::SymbolKind;\n use itertools::Itertools;\n \n use crate::{\n-    item::{CompletionItem, CompletionKind, ImportEdit},\n+    item::{CompletionItem, ImportEdit},\n     render::{builder_ext::Params, compute_ref_match, compute_type_match, RenderContext},\n     CompletionRelevance,\n };\n@@ -61,12 +61,11 @@ impl<'a> EnumRender<'a> {\n     }\n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let mut item = CompletionItem::new(\n-            CompletionKind::Reference,\n+            SymbolKind::Variant,\n             self.ctx.source_range(),\n             self.qualified_name.to_string(),\n         );\n-        item.kind(SymbolKind::Variant)\n-            .set_documentation(self.variant.docs(self.ctx.db()))\n+        item.set_documentation(self.variant.docs(self.ctx.db()))\n             .set_deprecated(self.ctx.is_deprecated(self.variant))\n             .detail(self.detail());\n "}, {"sha": "7515bb6d47db3f41de18b880682dbd5ab89b4ef1", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -7,7 +7,7 @@ use itertools::Itertools;\n use syntax::ast;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance, ImportEdit},\n+    item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n     render::{\n         builder_ext::Params, compute_exact_name_match, compute_ref_match, compute_type_match,\n         RenderContext,\n@@ -79,10 +79,8 @@ impl<'a> FunctionRender<'a> {\n             Some(receiver) => format!(\"{}.{}\", receiver, &self.name),\n             None => self.name.clone(),\n         };\n-        let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), call.clone());\n-        item.kind(self.kind())\n-            .set_documentation(self.ctx.docs(self.func))\n+        let mut item = CompletionItem::new(self.kind(), self.ctx.source_range(), call.clone());\n+        item.set_documentation(self.ctx.docs(self.func))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n             )"}, {"sha": "b1ddfab0cbbf2f875c7ce097456b3c09e1fdad9a", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -6,7 +6,7 @@ use syntax::display::macro_label;\n \n use crate::{\n     context::CallKind,\n-    item::{CompletionItem, CompletionKind, ImportEdit},\n+    item::{CompletionItem, ImportEdit},\n     render::RenderContext,\n };\n \n@@ -47,9 +47,8 @@ impl<'a> MacroRender<'a> {\n         } else {\n             Some(self.ctx.source_range())\n         }?;\n-        let mut item = CompletionItem::new(CompletionKind::Reference, source_range, &self.label());\n-        item.kind(SymbolKind::Macro)\n-            .set_documentation(self.docs.clone())\n+        let mut item = CompletionItem::new(SymbolKind::Macro, source_range, &self.label());\n+        item.set_documentation(self.docs.clone())\n             .set_deprecated(self.ctx.is_deprecated(self.macro_))\n             .set_detail(self.detail());\n "}, {"sha": "b7032806204af3a02f62be0c8a0202781448e14c", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -6,7 +6,6 @@ use itertools::Itertools;\n \n use crate::{\n     context::{ParamKind, PatternContext},\n-    item::CompletionKind,\n     render::RenderContext,\n     CompletionItem, CompletionItemKind,\n };\n@@ -58,11 +57,8 @@ fn build_completion(\n     pat: String,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name);\n-    item.kind(CompletionItemKind::Binding)\n-        .set_documentation(ctx.docs(def))\n-        .set_deprecated(ctx.is_deprecated(def))\n-        .detail(&pat);\n+    let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), name);\n+    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&pat);\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n         None => item.insert_text(pat),"}, {"sha": "4eb4f6b9f127c31bb27af10342fbb666fcbdca7f", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -4,7 +4,7 @@ use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n \n-use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n+use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n \n pub(crate) fn render_struct_literal(\n     ctx: RenderContext<'_>,\n@@ -33,11 +33,9 @@ fn build_completion(\n     literal: String,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let mut item = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name + \" {\u2026}\");\n-    item.kind(CompletionItemKind::Snippet)\n-        .set_documentation(ctx.docs(def))\n-        .set_deprecated(ctx.is_deprecated(def))\n-        .detail(&literal);\n+    let mut item =\n+        CompletionItem::new(CompletionItemKind::Snippet, ctx.source_range(), name + \" {\u2026}\");\n+    item.set_documentation(ctx.docs(def)).set_deprecated(ctx.is_deprecated(def)).detail(&literal);\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n         None => item.insert_text(literal),"}, {"sha": "7b6d2fa5c3abc5bc99fe39ff555513cd067aef7c", "filename": "crates/ide_completion/src/render/type_alias.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -7,10 +7,7 @@ use syntax::{\n     display::type_label,\n };\n \n-use crate::{\n-    item::{CompletionItem, CompletionKind},\n-    render::RenderContext,\n-};\n+use crate::{item::CompletionItem, render::RenderContext};\n \n pub(crate) fn render_type_alias(\n     ctx: RenderContext<'_>,\n@@ -50,9 +47,8 @@ impl<'a> TypeAliasRender<'a> {\n         let detail = self.detail();\n \n         let mut item =\n-            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name.clone());\n-        item.kind(SymbolKind::TypeAlias)\n-            .set_documentation(self.ctx.docs(self.type_alias))\n+            CompletionItem::new(SymbolKind::TypeAlias, self.ctx.source_range(), name.clone());\n+        item.set_documentation(self.ctx.docs(self.type_alias))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.type_alias)\n                     || self.ctx.is_deprecated_assoc_item(self.type_alias),"}, {"sha": "f063a9638ca2656aebb88e6b1a468afafcf56e6c", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -38,7 +38,7 @@ use stdx::{format_to, trim_indent};\n use syntax::{AstNode, NodeOrToken, SyntaxElement};\n use test_utils::assert_eq_text;\n \n-use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n+use crate::{CompletionConfig, CompletionItem, CompletionItemKind};\n \n /// Lots of basic item definitions\n const BASE_ITEMS_FIXTURE: &str = r#\"\n@@ -96,10 +96,10 @@ fn completion_list_with_config(\n     let items = items\n         .into_iter()\n         .filter(|it| {\n-            it.completion_kind != CompletionKind::BuiltinType || !mem::replace(&mut bt_seen, true)\n+            it.kind() != CompletionItemKind::BuiltinType || !mem::replace(&mut bt_seen, true)\n         })\n-        .filter(|it| include_keywords || it.completion_kind != CompletionKind::Keyword)\n-        .filter(|it| include_keywords || it.completion_kind != CompletionKind::Snippet)\n+        .filter(|it| include_keywords || it.kind() != CompletionItemKind::Keyword)\n+        .filter(|it| include_keywords || it.kind() != CompletionItemKind::Snippet)\n         .collect();\n     render_completion_list(items)\n }\n@@ -115,18 +115,18 @@ pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n     (database, FilePosition { file_id, offset })\n }\n \n-pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n+pub(crate) fn do_completion(code: &str, kind: CompletionItemKind) -> Vec<CompletionItem> {\n     do_completion_with_config(TEST_CONFIG, code, kind)\n }\n \n pub(crate) fn do_completion_with_config(\n     config: CompletionConfig,\n     code: &str,\n-    kind: CompletionKind,\n+    kind: CompletionItemKind,\n ) -> Vec<CompletionItem> {\n     get_all_items(config, code)\n         .into_iter()\n-        .filter(|c| c.completion_kind == kind)\n+        .filter(|c| c.kind() == kind)\n         .sorted_by(|l, r| l.label().cmp(r.label()))\n         .collect()\n }\n@@ -140,7 +140,7 @@ fn render_completion_list(completions: Vec<CompletionItem>) -> String {\n     completions\n         .into_iter()\n         .map(|it| {\n-            let tag = it.kind().unwrap().tag();\n+            let tag = it.kind().tag();\n             let var_name = format!(\"{} {}\", tag, it.label());\n             let mut buf = var_name;\n             if let Some(detail) = it.detail() {"}, {"sha": "473b7a870f404b00d05ae1c33c2926d1f75affe5", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0468b11de7cbd2ad5d311597d9cfaabdedfab9cd/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0468b11de7cbd2ad5d311597d9cfaabdedfab9cd", "patch": "@@ -248,7 +248,7 @@ fn completion_item(\n         label: item.label().to_string(),\n         detail: item.detail().map(|it| it.to_string()),\n         filter_text: Some(item.lookup().to_string()),\n-        kind: item.kind().map(completion_item_kind),\n+        kind: Some(completion_item_kind(item.kind())),\n         text_edit: Some(text_edit),\n         additional_text_edits: Some(additional_text_edits),\n         documentation: item.documentation().map(documentation),"}]}