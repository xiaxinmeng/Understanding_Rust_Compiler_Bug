{"sha": "3c9e39335431ca4bfe05d06735fed7d7edae9029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOWUzOTMzNTQzMWNhNGJmZTA1ZDA2NzM1ZmVkN2Q3ZWRhZTkwMjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-03T21:43:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-03T21:43:16Z"}, "message": "std::rt: Run local storage cleanup and the box annihilator inside the try/catch\n\nAnd before collect_failure. These are both running user dtors and need to be handled\nin the task try/catch block and before the final task cleanup code.", "tree": {"sha": "3bc72cddaa4108b794859bed3fe46960502a908c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc72cddaa4108b794859bed3fe46960502a908c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9e39335431ca4bfe05d06735fed7d7edae9029", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e39335431ca4bfe05d06735fed7d7edae9029", "html_url": "https://github.com/rust-lang/rust/commit/3c9e39335431ca4bfe05d06735fed7d7edae9029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e39335431ca4bfe05d06735fed7d7edae9029/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "800dbffa698007abb5b4318538c8c2ffbd08010b", "url": "https://api.github.com/repos/rust-lang/rust/commits/800dbffa698007abb5b4318538c8c2ffbd08010b", "html_url": "https://github.com/rust-lang/rust/commit/800dbffa698007abb5b4318538c8c2ffbd08010b"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "abafe1cf209c748a2778c321369a9ebf73eb449e", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e39335431ca4bfe05d06735fed7d7edae9029/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e39335431ca4bfe05d06735fed7d7edae9029/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=3c9e39335431ca4bfe05d06735fed7d7edae9029", "patch": "@@ -27,6 +27,7 @@ use super::local_heap::LocalHeap;\n use rt::sched::{Scheduler, SchedHandle};\n use rt::stack::{StackSegment, StackPool};\n use rt::context::Context;\n+use unstable::finally::Finally;\n use task::spawn::Taskgroup;\n use cell::Cell;\n \n@@ -211,40 +212,34 @@ impl Task {\n \n     pub fn run(&mut self, f: &fn()) {\n         rtdebug!(\"run called on task: %u\", borrow::to_uint(self));\n-        self.unwinder.try(f);\n-        // FIXME(#7544): We pass the taskgroup into death so that it can be\n-        // dropped while the unkillable counter is set. This should not be\n-        // necessary except for an extraneous clone() in task/spawn.rs that\n-        // causes a killhandle to get dropped, which mustn't receive a kill\n-        // signal since we're outside of the unwinder's try() scope.\n-        // { let _ = self.taskgroup.take(); }\n-        self.death.collect_failure(!self.unwinder.unwinding, self.taskgroup.take());\n-        self.destroy();\n-    }\n \n-    /// must be called manually before finalization to clean up\n-    /// thread-local resources. Some of the routines here expect\n-    /// Task to be available recursively so this must be\n-    /// called unsafely, without removing Task from\n-    /// thread-local-storage.\n-    fn destroy(&mut self) {\n+        // The only try/catch block in the world. Attempt to run the task's\n+        // client-specified code and catch any failures.\n+        do self.unwinder.try {\n \n-        rtdebug!(\"DESTROYING TASK: %u\", borrow::to_uint(self));\n+            // Run the task main function, then do some cleanup.\n+            do f.finally {\n \n-        do Local::borrow::<Task, ()> |task| {\n-            assert!(borrow::ref_eq(task, self));\n-        }\n+                // Destroy task-local storage. This may run user dtors.\n+                match self.storage {\n+                    LocalStorage(ptr, Some(ref dtor)) => {\n+                        (*dtor)(ptr)\n+                    }\n+                    _ => ()\n+                }\n \n-        match self.storage {\n-            LocalStorage(ptr, Some(ref dtor)) => {\n-                (*dtor)(ptr)\n+                // Destroy remaining boxes. Also may run user dtors.\n+                unsafe { cleanup::annihilate(); }\n             }\n-            _ => ()\n         }\n \n-        // Destroy remaining boxes\n-        unsafe { cleanup::annihilate(); }\n-\n+        // FIXME(#7544): We pass the taskgroup into death so that it can be\n+        // dropped while the unkillable counter is set. This should not be\n+        // necessary except for an extraneous clone() in task/spawn.rs that\n+        // causes a killhandle to get dropped, which mustn't receive a kill\n+        // signal since we're outside of the unwinder's try() scope.\n+        // { let _ = self.taskgroup.take(); }\n+        self.death.collect_failure(!self.unwinder.unwinding, self.taskgroup.take());\n         self.destroyed = true;\n     }\n "}]}