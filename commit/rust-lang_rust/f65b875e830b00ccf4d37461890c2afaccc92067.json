{"sha": "f65b875e830b00ccf4d37461890c2afaccc92067", "node_id": "C_kwDOAAsO6NoAKGY2NWI4NzVlODMwYjAwY2NmNGQzNzQ2MTg5MGMyYWZhY2NjOTIwNjc", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-14T15:31:54Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-01T08:15:16Z"}, "message": "remove type_ascription_path_suggestions in parser", "tree": {"sha": "79cf646032e7708ac7460c8bdfa8bf27fb722525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79cf646032e7708ac7460c8bdfa8bf27fb722525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65b875e830b00ccf4d37461890c2afaccc92067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65b875e830b00ccf4d37461890c2afaccc92067", "html_url": "https://github.com/rust-lang/rust/commit/f65b875e830b00ccf4d37461890c2afaccc92067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65b875e830b00ccf4d37461890c2afaccc92067/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9569a0129c5e484a12696e938d2c228152f54d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/9569a0129c5e484a12696e938d2c228152f54d50", "html_url": "https://github.com/rust-lang/rust/commit/9569a0129c5e484a12696e938d2c228152f54d50"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "6e1b80860baad0ce2752964f0a7f4379525746df", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f65b875e830b00ccf4d37461890c2afaccc92067/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b875e830b00ccf4d37461890c2afaccc92067/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f65b875e830b00ccf4d37461890c2afaccc92067", "patch": "@@ -492,24 +492,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 .filter(|(_, enum_ty_path)| !enum_ty_path.starts_with(\"std::prelude::\"))\n                 .collect();\n             if !enum_candidates.is_empty() {\n-                if let (PathSource::Type, Some(span)) =\n-                    (source, self.diagnostic_metadata.current_type_ascription.last())\n-                {\n-                    if self\n-                        .r\n-                        .tcx\n-                        .sess\n-                        .parse_sess\n-                        .type_ascription_path_suggestions\n-                        .borrow()\n-                        .contains(span)\n-                    {\n-                        // Already reported this issue on the lhs of the type ascription.\n-                        err.downgrade_to_delayed_bug();\n-                        return (true, candidates);\n-                    }\n-                }\n-\n                 enum_candidates.sort();\n \n                 // Contextualize for E0412 \"cannot find type\", but don't belabor the point\n@@ -1391,26 +1373,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                 Res::Def(DefKind::Enum, def_id),\n                 PathSource::TupleStruct(..) | PathSource::Expr(..),\n             ) => {\n-                if self\n-                    .diagnostic_metadata\n-                    .current_type_ascription\n-                    .last()\n-                    .map(|sp| {\n-                        self.r\n-                            .tcx\n-                            .sess\n-                            .parse_sess\n-                            .type_ascription_path_suggestions\n-                            .borrow()\n-                            .contains(&sp)\n-                    })\n-                    .unwrap_or(false)\n-                {\n-                    err.downgrade_to_delayed_bug();\n-                    // We already suggested changing `:` into `::` during parsing.\n-                    return false;\n-                }\n-\n                 self.suggest_using_enum_variant(err, source, def_id, span);\n             }\n             (Res::Def(DefKind::Struct, def_id), source) if ns == ValueNS => {"}, {"sha": "5cc9c62617dd5aafac439a0a9a230eaa0bcdd883", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f65b875e830b00ccf4d37461890c2afaccc92067/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65b875e830b00ccf4d37461890c2afaccc92067/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=f65b875e830b00ccf4d37461890c2afaccc92067", "patch": "@@ -214,8 +214,6 @@ pub struct ParseSess {\n     pub env_depinfo: Lock<FxHashSet<(Symbol, Option<Symbol>)>>,\n     /// File paths accessed during the build.\n     pub file_depinfo: Lock<FxHashSet<Symbol>>,\n-    /// All the type ascriptions expressions that have had a suggestion for likely path typo.\n-    pub type_ascription_path_suggestions: Lock<FxHashSet<Span>>,\n     /// Whether cfg(version) should treat the current release as incomplete\n     pub assume_incomplete_release: bool,\n     /// Spans passed to `proc_macro::quote_span`. Each span has a numerical\n@@ -258,7 +256,6 @@ impl ParseSess {\n             reached_eof: AtomicBool::new(false),\n             env_depinfo: Default::default(),\n             file_depinfo: Default::default(),\n-            type_ascription_path_suggestions: Default::default(),\n             assume_incomplete_release: false,\n             proc_macro_quoted_spans: Default::default(),\n             attr_id_generator: AttrIdGenerator::new(),"}]}