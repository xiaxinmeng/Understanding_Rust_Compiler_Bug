{"sha": "9b0480bec63fb1d096fd9017604a861f80ea7df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMDQ4MGJlYzYzZmIxZDA5NmZkOTAxNzYwNGE4NjFmODBlYTdkZjE=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-09-25T15:36:08Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-10-08T11:53:14Z"}, "message": "Name higher-ranked lifetimes properly while displaying\n\nNow they don't shadow other lifetimes.", "tree": {"sha": "172208a67ba96f7bf2f809ae5fabf8a8022aa5df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172208a67ba96f7bf2f809ae5fabf8a8022aa5df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0480bec63fb1d096fd9017604a861f80ea7df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0480bec63fb1d096fd9017604a861f80ea7df1", "html_url": "https://github.com/rust-lang/rust/commit/9b0480bec63fb1d096fd9017604a861f80ea7df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0480bec63fb1d096fd9017604a861f80ea7df1/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "108706f13a7e5e530ba4bbddf776d8ce71aec01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/108706f13a7e5e530ba4bbddf776d8ce71aec01f", "html_url": "https://github.com/rust-lang/rust/commit/108706f13a7e5e530ba4bbddf776d8ce71aec01f"}], "stats": {"total": 250, "additions": 229, "deletions": 21}, "files": [{"sha": "a7eacc3744db0d485203065dcb43dfe1a04188dc", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9b0480bec63fb1d096fd9017604a861f80ea7df1", "patch": "@@ -915,6 +915,10 @@ pub struct GlobalCtxt<'tcx> {\n     /// Maps Expr NodeId's to `true` iff `&expr` can have 'static lifetime.\n     pub rvalue_promotable_to_static: RefCell<NodeMap<bool>>,\n \n+    pub display_used_late_bound_region_names: RefCell<Option<FxHashSet<Name>>>,\n+\n+    pub display_late_bound_region_index: Cell<usize>,\n+\n     /// The definite name of the current crate after taking into account\n     /// attributes, commandline parameters, etc.\n     pub crate_name: Symbol,\n@@ -1189,6 +1193,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             rvalue_promotable_to_static: RefCell::new(NodeMap()),\n+            display_used_late_bound_region_names: RefCell::new(None),\n+            display_late_bound_region_index: Cell::new(0),\n             crate_name: Symbol::intern(crate_name),\n             data_layout,\n             layout_interner: RefCell::new(FxHashSet()),"}, {"sha": "a6fb7a0f25ce3b19193ce03f1da83a0b3e00e644", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 70, "deletions": 20, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9b0480bec63fb1d096fd9017604a861f80ea7df1", "patch": "@@ -20,6 +20,7 @@ use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n use std::fmt;\n@@ -259,12 +260,34 @@ pub fn parameterized(f: &mut fmt::Formatter,\n     Ok(())\n }\n \n+struct LateBoundRegionNameCollector(FxHashSet<Symbol>);\n+\n+impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+        match *r {\n+            ty::ReLateBound(_, ty::BrNamed(_, name)) => {\n+                self.0.insert(name);\n+            },\n+            _ => {},\n+        }\n+        r.super_visit_with(self)\n+    }\n+}\n+\n fn in_binder<'a, 'gcx, 'tcx, T, U>(f: &mut fmt::Formatter,\n                                    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                    original: &ty::Binder<T>,\n                                    lifted: Option<ty::Binder<U>>) -> fmt::Result\n     where T: fmt::Display, U: fmt::Display + TypeFoldable<'tcx>\n {\n+    fn name_by_region_index(index: usize) -> Symbol {\n+        match index {\n+            0 => Symbol::intern(\"'r\"),\n+            1 => Symbol::intern(\"'s\"),\n+            i => Symbol::intern(&format!(\"'t{}\", i-2)),\n+        }\n+    }\n+\n     // Replace any anonymous late-bound regions with named\n     // variants, using gensym'd identifiers, so that we can\n     // clearly differentiate between named and unnamed regions in\n@@ -286,27 +309,54 @@ fn in_binder<'a, 'gcx, 'tcx, T, U>(f: &mut fmt::Formatter,\n         }\n     };\n \n-    let new_value = tcx.replace_late_bound_regions(&value, |br| {\n-        let _ = start_or_continue(f, \"for<\", \", \");\n-        let br = match br {\n-            ty::BrNamed(_, name) => {\n-                let _ = write!(f, \"{}\", name);\n-                br\n-            }\n-            ty::BrAnon(_) |\n-            ty::BrFresh(_) |\n-            ty::BrEnv => {\n-                let name = Symbol::intern(\"'r\");\n-                let _ = write!(f, \"{}\", name);\n-                ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID),\n-                            name)\n-            }\n-        };\n-        tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n-    }).0;\n+    // If displaying is just started, collect named late-bound regions.\n+    let display_just_started = tcx.display_used_late_bound_region_names.borrow().is_none();\n+    if display_just_started {\n+        let mut collector = LateBoundRegionNameCollector(FxHashSet());\n+        value.visit_with(&mut collector);\n+        *tcx.display_used_late_bound_region_names.borrow_mut() = Some(collector.0);\n+    }\n \n+    let old_region_index = tcx.display_late_bound_region_index.get();\n+    let mut region_index = old_region_index;\n+    let new_value = {\n+        let used_region_names = tcx.display_used_late_bound_region_names.borrow();\n+        let used_region_names = used_region_names.as_ref().unwrap();\n+        tcx.replace_late_bound_regions(&value, |br| {\n+            let _ = start_or_continue(f, \"for<\", \", \");\n+            let br = match br {\n+                ty::BrNamed(_, name) => {\n+                    let _ = write!(f, \"{}\", name);\n+                    br\n+                }\n+                ty::BrAnon(_) |\n+                ty::BrFresh(_) |\n+                ty::BrEnv => {\n+                    let name = loop {\n+                        let name = name_by_region_index(region_index);\n+                        region_index += 1;\n+                        if !used_region_names.contains(&name) {\n+                            break name;\n+                        }\n+                    };\n+                    let _ = write!(f, \"{}\", name);\n+                    ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID),\n+                                name)\n+                }\n+            };\n+            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n+        }).0\n+    };\n     start_or_continue(f, \"\", \"> \")?;\n-    write!(f, \"{}\", new_value)\n+\n+    // Push current state to gcx, and restore after writing new_value.\n+    tcx.display_late_bound_region_index.set(region_index);\n+    write!(f, \"{}\", new_value)?;\n+    tcx.display_late_bound_region_index.set(old_region_index);\n+    if display_just_started {\n+        *tcx.display_used_late_bound_region_names.borrow_mut() = None;\n+    }\n+    Ok(())\n }\n \n impl<'tcx> fmt::Display for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> {\n@@ -782,7 +832,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 write!(f, \"}}\")\n             }\n             TyFnPtr(ref bare_fn) => {\n-                write!(f, \"{}\", bare_fn.0)\n+                write!(f, \"{}\", bare_fn)\n             }\n             TyInfer(infer_ty) => write!(f, \"{}\", infer_ty),\n             TyError => write!(f, \"[type error]\"),"}, {"sha": "f2d04c16d99e146682c315858c4578b6cb96aa77", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.rs?ref=9b0480bec63fb1d096fd9017604a861f80ea7df1", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    f1(|_: (), _: ()| {});\n+    f2(|_: (), _: ()| {});\n+    f3(|_: (), _: ()| {});\n+    f4(|_: (), _: ()| {});\n+    f5(|_: (), _: ()| {});\n+    g1(|_: (), _: ()| {});\n+    g2(|_: (), _: ()| {});\n+    g3(|_: (), _: ()| {});\n+    g4(|_: (), _: ()| {});\n+    h1(|_: (), _: (), _: (), _: ()| {});\n+    h2(|_: (), _: (), _: (), _: ()| {});\n+}\n+\n+// Basic\n+fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+\n+// Nested\n+fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+\n+// Mixed\n+fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}"}, {"sha": "f962b7722036b6c1a82b093fd88a7ac3dcd9432e", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=9b0480bec63fb1d096fd9017604a861f80ea7df1", "patch": "@@ -0,0 +1,112 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n+   |\n+12 |     f1(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n+   |\n+   = note: required by `f1`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n+   |\n+13 |     f2(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n+   |\n+   = note: required by `f2`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n+   |\n+14 |     f3(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n+   |\n+   = note: required by `f3`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n+   |\n+15 |     f4(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n+   |\n+   = note: required by `f4`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n+   |\n+16 |     f5(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n+   |\n+   = note: required by `f5`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n+   |\n+17 |     g1(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n+   |\n+   = note: required by `g1`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n+   |\n+18 |     g2(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n+   |\n+   = note: required by `g2`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n+   |\n+19 |     g3(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n+   |\n+   = note: required by `g3`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n+   |\n+20 |     g4(|_: (), _: ()| {});\n+   |     ^^ ----------------- found signature of `fn((), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n+   |\n+   = note: required by `g4`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n+   |\n+21 |     h1(|_: (), _: (), _: (), _: ()| {});\n+   |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |\n+   = note: required by `h1`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n+   |\n+22 |     h2(|_: (), _: (), _: (), _: ()| {});\n+   |     ^^ ------------------------------- found signature of `fn((), (), (), ()) -> _`\n+   |     |\n+   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |\n+   = note: required by `h2`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "0c88c63edeb643883138921dd5f18a6461fb3122", "filename": "src/test/ui/regions-fn-subtyping-return-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0480bec63fb1d096fd9017604a861f80ea7df1/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-fn-subtyping-return-static.stderr?ref=9b0480bec63fb1d096fd9017604a861f80ea7df1", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n 51 |     want_F(bar); //~ ERROR E0308\n    |            ^^^ expected concrete lifetime, found bound lifetime parameter 'cx\n    |\n-   = note: expected type `fn(&'cx S) -> &'cx S`\n+   = note: expected type `for<'cx> fn(&'cx S) -> &'cx S`\n               found type `fn(&'a S) -> &S {bar::<'_>}`\n \n error: aborting due to previous error"}]}