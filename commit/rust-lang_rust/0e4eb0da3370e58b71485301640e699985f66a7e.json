{"sha": "0e4eb0da3370e58b71485301640e699985f66a7e", "node_id": "C_kwDOAAsO6NoAKDBlNGViMGRhMzM3MGU1OGI3MTQ4NTMwMTY0MGU2OTk5ODVmNjZhN2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-24T20:34:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-24T20:34:53Z"}, "message": "Rollup merge of #104747 - petrochenkov:ctorfields, r=cjgillot\n\nresolve: Don't use constructor def ids in the map for field names\n\nAlso do some minor cleanup to insertion of those field names.\n\nAddresses a FIXME left in https://github.com/rust-lang/rust/pull/103578.", "tree": {"sha": "56b13086c59e6f77c2c373f66e0e64dbb5a4836f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b13086c59e6f77c2c373f66e0e64dbb5a4836f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4eb0da3370e58b71485301640e699985f66a7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjf9VtCRBK7hj4Ov3rIwAAFLUIACixYfPlUu81IZK9c8u+AEj6\nAXfsnYktNG7nxsDNnPEkOy2wPmcz1UG+/mBTrTLVLRmP6GkGHjREhEbiG58X/oES\n3YiI0EWzSVlPwoQ+hKZxMOqh6/Z4iXviWG+ZKpaNY7waVr1hCeq7kHMLHxtmzDw9\ny6tD6WyLt43kvoM8kTNqAkOOnhEY6CHruiT2aM7nkgq91EWcdBjF0i+BFMUMVzsJ\nc2e1qE62Cy4G9FGimf6faRZ7xI8b9UPq7cEO3wYEvsVosEgWXHMZ2XEZ6mep/LOG\nk+hQec9xBvUezcf+vQYUbUGqTMhjoVBvCMAiUhPR51VpnSUhPJsesXbb6QTAyEI=\n=f/F9\n-----END PGP SIGNATURE-----\n", "payload": "tree 56b13086c59e6f77c2c373f66e0e64dbb5a4836f\nparent 7a17d61d3d058c884fb456e808a0af2dfc16915f\nparent 5fc359f1ef18c643f8f7d100494ef90741b90674\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669322093 +0100\ncommitter GitHub <noreply@github.com> 1669322093 +0100\n\nRollup merge of #104747 - petrochenkov:ctorfields, r=cjgillot\n\nresolve: Don't use constructor def ids in the map for field names\n\nAlso do some minor cleanup to insertion of those field names.\n\nAddresses a FIXME left in https://github.com/rust-lang/rust/pull/103578.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4eb0da3370e58b71485301640e699985f66a7e", "html_url": "https://github.com/rust-lang/rust/commit/0e4eb0da3370e58b71485301640e699985f66a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4eb0da3370e58b71485301640e699985f66a7e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a17d61d3d058c884fb456e808a0af2dfc16915f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a17d61d3d058c884fb456e808a0af2dfc16915f", "html_url": "https://github.com/rust-lang/rust/commit/7a17d61d3d058c884fb456e808a0af2dfc16915f"}, {"sha": "5fc359f1ef18c643f8f7d100494ef90741b90674", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc359f1ef18c643f8f7d100494ef90741b90674", "html_url": "https://github.com/rust-lang/rust/commit/5fc359f1ef18c643f8f7d100494ef90741b90674"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "fff3f0467dfc4ae72dd5560ae3a8065b1886f594", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb0da3370e58b71485301640e699985f66a7e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb0da3370e58b71485301640e699985f66a7e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0e4eb0da3370e58b71485301640e699985f66a7e", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::cstore::CrateStore;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind};\n-use rustc_span::source_map::{respan, Spanned};\n+use rustc_span::source_map::respan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n \n@@ -329,10 +329,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             .iter()\n             .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))\n             .collect();\n-        self.insert_field_names(def_id, field_names);\n+        self.r.field_names.insert(def_id, field_names);\n     }\n \n-    fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {\n+    fn insert_field_names_extern(&mut self, def_id: DefId) {\n+        let field_names =\n+            self.r.cstore().struct_field_names_untracked(def_id, self.r.session).collect();\n         self.r.field_names.insert(def_id, field_names);\n     }\n \n@@ -995,8 +997,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let cstore = self.r.cstore();\n         match res {\n             Res::Def(DefKind::Struct, def_id) => {\n-                let field_names =\n-                    cstore.struct_field_names_untracked(def_id, self.r.session).collect();\n                 if let Some((ctor_kind, ctor_def_id)) = cstore.ctor_untracked(def_id) {\n                     let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                     let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n@@ -1006,13 +1006,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         .struct_constructors\n                         .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n                 }\n-                self.insert_field_names(def_id, field_names);\n-            }\n-            Res::Def(DefKind::Union, def_id) => {\n-                let field_names =\n-                    cstore.struct_field_names_untracked(def_id, self.r.session).collect();\n-                self.insert_field_names(def_id, field_names);\n+                self.insert_field_names_extern(def_id)\n             }\n+            Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore.fn_has_self_parameter_untracked(def_id, self.r.session) {\n                     self.r.has_self.insert(def_id);\n@@ -1514,20 +1510,16 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         // Define a constructor name in the value namespace.\n-        let fields_id = if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(&variant.data) {\n+        if let Some((ctor_kind, ctor_node_id)) = CtorKind::from_ast(&variant.data) {\n             let ctor_def_id = self.r.local_def_id(ctor_node_id);\n             let ctor_res =\n                 Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id.to_def_id());\n             self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n             self.r.visibilities.insert(ctor_def_id, ctor_vis);\n-            ctor_def_id\n-        } else {\n-            def_id\n-        };\n+        }\n \n         // Record field names for error reporting.\n-        // FIXME: Always use non-ctor id as the key.\n-        self.insert_field_names_local(fields_id.to_def_id(), &variant.data);\n+        self.insert_field_names_local(def_id.to_def_id(), &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "9c95adc628bc6a588c1c2f4a94946f121f9a375c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e4eb0da3370e58b71485301640e699985f66a7e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4eb0da3370e58b71485301640e699985f66a7e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=0e4eb0da3370e58b71485301640e699985f66a7e", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n@@ -1462,7 +1463,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     _ => return false,\n                 }\n             }\n-            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n+            (Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_def_id), _) if ns == ValueNS => {\n+                let def_id = self.r.parent(ctor_def_id);\n                 if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n@@ -1953,7 +1955,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 ));\n             }\n         } else {\n-            let needs_placeholder = |def_id: DefId, kind: CtorKind| {\n+            let needs_placeholder = |ctor_def_id: DefId, kind: CtorKind| {\n+                let def_id = self.r.parent(ctor_def_id);\n                 let has_no_fields = self.r.field_names.get(&def_id).map_or(false, |f| f.is_empty());\n                 match kind {\n                     CtorKind::Const => false,"}]}