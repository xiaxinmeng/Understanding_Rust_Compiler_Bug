{"sha": "2157958b27b7f1cd471533d71c8e09843aec57ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTc5NThiMjdiN2YxY2Q0NzE1MzNkNzFjOGUwOTg0M2FlYzU3YWQ=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-09-06T02:46:55Z"}, "committer": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-09-13T04:27:29Z"}, "message": "introduce SelfCtor", "tree": {"sha": "e16298975dbae00524a972b482f3db52839be5a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16298975dbae00524a972b482f3db52839be5a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2157958b27b7f1cd471533d71c8e09843aec57ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2157958b27b7f1cd471533d71c8e09843aec57ad", "html_url": "https://github.com/rust-lang/rust/commit/2157958b27b7f1cd471533d71c8e09843aec57ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2157958b27b7f1cd471533d71c8e09843aec57ad/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4891699125fa12d46217890e4eb68b35e9ff6d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4891699125fa12d46217890e4eb68b35e9ff6d5", "html_url": "https://github.com/rust-lang/rust/commit/a4891699125fa12d46217890e4eb68b35e9ff6d5"}], "stats": {"total": 545, "additions": 326, "deletions": 219}, "files": [{"sha": "b4742c48a32ff7f13f26d536a2677b031f94a882", "filename": "src/doc/unstable-book/src/language-features/self-struct-ctor.md", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-struct-ctor.md?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -1,17 +1,17 @@\n-# `tuple_struct_self_ctor`\n+# `self_struct_ctor`\n \n The tracking issue for this feature is: [#51994]\n [#51994]: https://github.com/rust-lang/rust/issues/51994\n \n ------------------------\n \n-The `tuple_struct_self_ctor` feature gate lets you use the special `Self`\n+The `self_struct_ctor` feature gate lets you use the special `Self`\n identifier as a constructor and a pattern.\n \n A simple example is:\n \n ```rust\n-#![feature(tuple_struct_self_ctor)]\n+#![feature(self_struct_ctor)]\n \n struct ST(i32, i32);\n ", "previous_filename": "src/doc/unstable-book/src/language-features/tuple-struct-self-ctor.md"}, {"sha": "4286b0628f5fff76f7054e69d74650287483850e", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -69,6 +69,7 @@ pub enum Def {\n     Static(DefId, bool /* is_mutbl */),\n     StructCtor(DefId, CtorKind), // DefId refers to NodeId of the struct's constructor\n     VariantCtor(DefId, CtorKind), // DefId refers to the enum variant\n+    SelfCtor(DefId /* impl */),  // DefId refers to the impl\n     Method(DefId),\n     AssociatedConst(DefId),\n \n@@ -272,7 +273,8 @@ impl Def {\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) | Def::AssociatedExistential(id) | Def::ForeignTy(id) => {\n+            Def::Existential(id) | Def::AssociatedExistential(id) | Def::ForeignTy(id) |\n+            Def::SelfCtor(id) => {\n                 id\n             }\n \n@@ -309,6 +311,7 @@ impl Def {\n             Def::StructCtor(.., CtorKind::Fn) => \"tuple struct\",\n             Def::StructCtor(.., CtorKind::Const) => \"unit struct\",\n             Def::StructCtor(.., CtorKind::Fictive) => bug!(\"impossible struct constructor\"),\n+            Def::SelfCtor(..) => \"self constructor\",\n             Def::Union(..) => \"union\",\n             Def::Trait(..) => \"trait\",\n             Def::ForeignTy(..) => \"foreign type\","}, {"sha": "45628e2b6f3b80f2e336b19cf8bea0dd405e044a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -67,6 +67,7 @@ use syntax::ast;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::source_map::{self, respan, CompilerDesugaringKind, Spanned};\n@@ -3429,19 +3430,24 @@ impl<'a> LoweringContext<'a> {\n                     ParamMode::Optional,\n                     ImplTraitContext::Disallowed,\n                 );\n+                self.check_self_struct_ctor_feature(&qpath);\n                 hir::PatKind::TupleStruct(\n                     qpath,\n                     pats.iter().map(|x| self.lower_pat(x)).collect(),\n                     ddpos,\n                 )\n             }\n-            PatKind::Path(ref qself, ref path) => hir::PatKind::Path(self.lower_qpath(\n-                p.id,\n-                qself,\n-                path,\n-                ParamMode::Optional,\n-                ImplTraitContext::Disallowed,\n-            )),\n+            PatKind::Path(ref qself, ref path) => {\n+                let qpath = self.lower_qpath(\n+                    p.id,\n+                    qself,\n+                    path,\n+                    ParamMode::Optional,\n+                    ImplTraitContext::Disallowed,\n+                );\n+                self.check_self_struct_ctor_feature(&qpath);\n+                hir::PatKind::Path(qpath)\n+            }\n             PatKind::Struct(ref path, ref fields, etc) => {\n                 let qpath = self.lower_qpath(\n                     p.id,\n@@ -3828,13 +3834,17 @@ impl<'a> LoweringContext<'a> {\n                     attrs: e.attrs.clone(),\n                 };\n             }\n-            ExprKind::Path(ref qself, ref path) => hir::ExprKind::Path(self.lower_qpath(\n-                e.id,\n-                qself,\n-                path,\n-                ParamMode::Optional,\n-                ImplTraitContext::Disallowed,\n-            )),\n+            ExprKind::Path(ref qself, ref path) => {\n+                let qpath = self.lower_qpath(\n+                    e.id,\n+                    qself,\n+                    path,\n+                    ParamMode::Optional,\n+                    ImplTraitContext::Disallowed,\n+                );\n+                self.check_self_struct_ctor_feature(&qpath);\n+                hir::ExprKind::Path(qpath)\n+            }\n             ExprKind::Break(opt_label, ref opt_expr) => {\n                 let destination = if self.is_in_loop_condition && opt_label.is_none() {\n                     hir::Destination {\n@@ -4815,6 +4825,18 @@ impl<'a> LoweringContext<'a> {\n                                             ThinVec::new()));\n         P(self.expr_call(e.span, from_err, hir_vec![e]))\n     }\n+\n+    fn check_self_struct_ctor_feature(&self, qp: &hir::QPath) {\n+        if let hir::QPath::Resolved(_, ref p) = qp {\n+            if p.segments.len() == 1 &&\n+               p.segments[0].ident.name == keywords::SelfType.name() &&\n+               !self.sess.features_untracked().self_struct_ctor {\n+                emit_feature_err(&self.sess.parse_sess, \"self_struct_ctor\",\n+                                 p.span, GateIssue::Language,\n+                                 \"`Self` struct constructors are unstable\");\n+            }\n+        }\n+    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {"}, {"sha": "bc2eb5f442b47df373d9173d2cea1f627a8a9f9e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -1021,6 +1021,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Const(def_id),\n     Static(def_id, is_mutbl),\n     StructCtor(def_id, ctor_kind),\n+    SelfCtor(impl_def_id),\n     VariantCtor(def_id, ctor_kind),\n     Method(def_id),\n     AssociatedConst(def_id),"}, {"sha": "172511474710d6e47c6cf27b4eb6751c04fed669", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         match def {\n           Def::StructCtor(..) | Def::VariantCtor(..) | Def::Const(..) |\n-          Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) => {\n+          Def::AssociatedConst(..) | Def::Fn(..) | Def::Method(..) | Def::SelfCtor(..) => {\n                 Ok(self.cat_rvalue_node(hir_id, span, expr_ty))\n           }\n \n@@ -1288,7 +1288,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     (self.cat_downcast_if_needed(pat, cmt, def_id),\n                      self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len())\n                 }\n-                Def::StructCtor(_, CtorKind::Fn) => {\n+                Def::StructCtor(_, CtorKind::Fn) | Def::SelfCtor(..) => {\n                     match self.pat_ty_unadjusted(&pat)?.sty {\n                         ty::Adt(adt_def, _) => {\n                             (cmt, adt_def.non_enum_variant().fields.len())"}, {"sha": "73a55265f009ac017844f2de1aa755f83ca36104", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -783,7 +783,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx hir::Path, id: hir::HirId) {\n         let id = self.tcx.hir.hir_to_node_id(id);\n         match path.def {\n-            Def::Local(..) | Def::Upvar(..) |\n+            Def::Local(..) | Def::Upvar(..) | Def::SelfCtor(..) |\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}\n             _ => self.tcx.check_stability(path.def.def_id(), Some(id), path.span)\n         }"}, {"sha": "d9e3bdaf266a9a76a8d19210b18f8a78a321edbe", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -2134,7 +2134,8 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         match def {\n             Def::Variant(vid) | Def::VariantCtor(vid, ..) => self.variant_with_id(vid),\n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n-            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => self.non_enum_variant(),\n+            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) |\n+            Def::SelfCtor(..) => self.non_enum_variant(),\n             _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }"}, {"sha": "510e7eb9c63f79e483b6d5b8a898786066560c65", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -273,7 +273,8 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             Def::VariantCtor(variant_id, CtorKind::Fn) => {\n                                 Some((adt_def, adt_def.variant_index_with_id(variant_id)))\n                             }\n-                            Def::StructCtor(_, CtorKind::Fn) => Some((adt_def, 0)),\n+                            Def::StructCtor(_, CtorKind::Fn) |\n+                            Def::SelfCtor(..) => Some((adt_def, 0)),\n                             _ => None,\n                         }\n                     })\n@@ -759,6 +760,25 @@ fn user_annotated_ty_for_def(\n                 sty => bug!(\"unexpected sty: {:?}\", sty),\n             },\n \n+        // `Self` is used in expression as a tuple struct constructor or an unit struct constructor\n+        Def::SelfCtor(_) => {\n+            let sty = &cx.tables().node_id_to_type(hir_id).sty;\n+            match sty {\n+                ty::FnDef(ref def_id, _) => {\n+                    Some(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n+                        // Here, we just pair a `DefId` with the\n+                        // `user_substs`, so no new types etc are introduced.\n+                        cx.tcx().mk_fn_def(*def_id, user_substs)\n+                    }))\n+                }\n+                ty::Adt(ref adt_def, _) => {\n+                    user_annotated_ty_for_adt(cx, hir_id, adt_def)\n+                }\n+                _ => {\n+                    bug!(\"unexpected sty: {:?}\", sty)\n+                }\n+            }\n+        }\n         _ =>\n             bug!(\"user_annotated_ty_for_def: unexpected def {:?} at {:?}\", def, hir_id)\n     }\n@@ -857,7 +877,8 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         Def::Fn(_) |\n         Def::Method(_) |\n         Def::StructCtor(_, CtorKind::Fn) |\n-        Def::VariantCtor(_, CtorKind::Fn) => {\n+        Def::VariantCtor(_, CtorKind::Fn) |\n+        Def::SelfCtor(..) => {\n             let user_ty = user_annotated_ty_for_def(cx, expr.hir_id, &def);\n             ExprKind::Literal {\n                 literal: ty::Const::zero_sized("}, {"sha": "57519d6ad7d70908524d3a404be7aa5662a28202", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             Def::Struct(..) | Def::StructCtor(..) | Def::Union(..) |\n-            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) => {\n+            Def::TyAlias(..) | Def::AssociatedTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) => {\n                 PatternKind::Leaf { subpatterns: subpatterns }\n             }\n "}, {"sha": "828800465209e857447a768f767c03459cd2f4ad", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -376,7 +376,7 @@ fn check_expr_kind<'a, 'tcx>(\n             let def = v.tables.qpath_def(qpath, e.hir_id);\n             match def {\n                 Def::VariantCtor(..) | Def::StructCtor(..) |\n-                Def::Fn(..) | Def::Method(..) => Promotable,\n+                Def::Fn(..) | Def::Method(..) | Def::SelfCtor(..) => Promotable,\n \n                 // References to a static that are themselves within a static\n                 // are inherently promotable with the exception\n@@ -441,7 +441,8 @@ fn check_expr_kind<'a, 'tcx>(\n             };\n             let def_result = match def {\n                 Def::StructCtor(_, CtorKind::Fn) |\n-                Def::VariantCtor(_, CtorKind::Fn) => Promotable,\n+                Def::VariantCtor(_, CtorKind::Fn) |\n+                Def::SelfCtor(..) => Promotable,\n                 Def::Fn(did) => {\n                     v.handle_const_fn_call(did, node_ty, e.span)\n                 }"}, {"sha": "d1a05964c8f6497c0993fc342a40ee201c7e1817", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -585,7 +585,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                                    CtorKind::from_ast(struct_def));\n                     self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n                     self.struct_constructors.insert(def.def_id(), (ctor_def, ctor_vis));\n-                    self.tuple_structs.insert(def.def_id(), ctor_def);\n                 }\n             }\n \n@@ -704,7 +703,6 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         self.cstore.def_key(def_id).parent\n                             .map(|index| DefId { krate: def_id.krate, index: index }) {\n                     self.struct_constructors.insert(struct_def_id, (def, vis));\n-                    self.tuple_structs.insert(struct_def_id, def);\n                 }\n             }\n             Def::Trait(..) => {"}, {"sha": "384d3ed744a9a14ccd785bbd7ba5e9129c9d1292", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 71, "deletions": 100, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -558,17 +558,21 @@ impl<'a> PathSource<'a> {\n                 Def::StructCtor(_, CtorKind::Const) | Def::StructCtor(_, CtorKind::Fn) |\n                 Def::VariantCtor(_, CtorKind::Const) | Def::VariantCtor(_, CtorKind::Fn) |\n                 Def::Const(..) | Def::Static(..) | Def::Local(..) | Def::Upvar(..) |\n-                Def::Fn(..) | Def::Method(..) | Def::AssociatedConst(..) => true,\n+                Def::Fn(..) | Def::Method(..) | Def::AssociatedConst(..) |\n+                Def::SelfCtor(..) => true,\n                 _ => false,\n             },\n             PathSource::Pat => match def {\n                 Def::StructCtor(_, CtorKind::Const) |\n                 Def::VariantCtor(_, CtorKind::Const) |\n-                Def::Const(..) | Def::AssociatedConst(..) => true,\n+                Def::Const(..) | Def::AssociatedConst(..) |\n+                Def::SelfCtor(..) => true,\n                 _ => false,\n             },\n             PathSource::TupleStruct => match def {\n-                Def::StructCtor(_, CtorKind::Fn) | Def::VariantCtor(_, CtorKind::Fn) => true,\n+                Def::StructCtor(_, CtorKind::Fn) |\n+                Def::VariantCtor(_, CtorKind::Fn) |\n+                Def::SelfCtor(..) => true,\n                 _ => false,\n             },\n             PathSource::Struct => match def {\n@@ -1463,9 +1467,6 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// it's not used during normal resolution, only for better error reporting.\n     struct_constructors: DefIdMap<(Def, ty::Visibility)>,\n \n-    /// Map from tuple struct's DefId to VariantData's Def\n-    tuple_structs: DefIdMap<Def>,\n-\n     /// Only used for better errors on `fn(): fn()`\n     current_type_ascription: Vec<Span>,\n \n@@ -1767,7 +1768,6 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n-            tuple_structs: DefIdMap(),\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n@@ -2233,23 +2233,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                              |this| visit::walk_item(this, item));\n             }\n \n-            ItemKind::Struct(ref variant, ref generics) => {\n-                if variant.is_tuple() || variant.is_unit() {\n-                    if let Some(def_id) = self.definitions.opt_local_def_id(item.id) {\n-                        if let Some(variant_id) = self.definitions.opt_local_def_id(variant.id()) {\n-                            let variant_def = if variant.is_tuple() {\n-                                Def::StructCtor(variant_id, CtorKind::Fn)\n-                            } else {\n-                                Def::StructCtor(variant_id, CtorKind::Const)\n-                            };\n-                            self.tuple_structs.insert(def_id, variant_def);\n-                        }\n-                    }\n-                }\n-                self.resolve_adt(item, generics);\n-            }\n-\n             ItemKind::Enum(_, ref generics) |\n+            ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) => {\n                 self.resolve_adt(item, generics);\n             }\n@@ -2526,30 +2511,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.ribs[TypeNS].pop();\n     }\n \n-    fn with_tuple_struct_self_ctor_rib<F>(&mut self, self_ty: &Ty, f: F)\n+    fn with_self_struct_ctor_rib<F>(&mut self, impl_id: DefId, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n-        let variant_def = if self.session.features_untracked().tuple_struct_self_ctor {\n-            let base_def = self.def_map.get(&self_ty.id).map(|r| r.base_def());\n-            if let Some(Def::Struct(ref def_id)) = base_def {\n-                self.tuple_structs.get(def_id).cloned()\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        };\n-\n-        // when feature gate is enabled and `Self` is a tuple struct\n-        if let Some(variant_def) = variant_def {\n-            let mut self_type_rib = Rib::new(NormalRibKind);\n-            self_type_rib.bindings.insert(keywords::SelfType.ident(), variant_def);\n-            self.ribs[ValueNS].push(self_type_rib);\n-            f(self);\n-            self.ribs[ValueNS].pop();\n-        } else {\n-            f(self);\n-        }\n+        let self_def = Def::SelfCtor(impl_id);\n+        let mut self_type_rib = Rib::new(NormalRibKind);\n+        self_type_rib.bindings.insert(keywords::SelfType.ident(), self_def);\n+        self.ribs[ValueNS].push(self_type_rib);\n+        f(self);\n+        self.ribs[ValueNS].pop();\n     }\n \n     fn resolve_implementation(&mut self,\n@@ -2576,64 +2546,65 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         this.visit_generics(generics);\n                         // Resolve the items within the impl.\n                         this.with_current_self_type(self_type, |this| {\n-                            for impl_item in impl_items {\n-                                this.resolve_visibility(&impl_item.vis);\n-\n-                                // We also need a new scope for the impl item type parameters.\n-                                let type_parameters = HasTypeParameters(&impl_item.generics,\n-                                                                        TraitOrImplItemRibKind);\n-                                this.with_type_parameter_rib(type_parameters, |this| {\n-                                    use self::ResolutionError::*;\n-                                    match impl_item.node {\n-                                        ImplItemKind::Const(..) => {\n-                                            // If this is a trait impl, ensure the const\n-                                            // exists in trait\n-                                            this.check_trait_item(impl_item.ident,\n-                                                                  ValueNS,\n-                                                                  impl_item.span,\n-                                                |n, s| ConstNotMemberOfTrait(n, s));\n-                                            this.with_constant_rib(|this|\n-                                                visit::walk_impl_item(this, impl_item)\n-                                            );\n-                                        }\n-                                        ImplItemKind::Method(..) => {\n-                                            // If this is a trait impl, ensure the method\n-                                            // exists in trait\n-                                            this.check_trait_item(impl_item.ident,\n-                                                                  ValueNS,\n-                                                                  impl_item.span,\n-                                                |n, s| MethodNotMemberOfTrait(n, s));\n-                                            this.with_tuple_struct_self_ctor_rib(self_type, |this| {\n+                            this.with_self_struct_ctor_rib(item_def_id, |this| {\n+                                for impl_item in impl_items {\n+                                    this.resolve_visibility(&impl_item.vis);\n+\n+                                    // We also need a new scope for the impl item type parameters.\n+                                    let type_parameters = HasTypeParameters(&impl_item.generics,\n+                                                                            TraitOrImplItemRibKind);\n+                                    this.with_type_parameter_rib(type_parameters, |this| {\n+                                        use self::ResolutionError::*;\n+                                        match impl_item.node {\n+                                            ImplItemKind::Const(..) => {\n+                                                // If this is a trait impl, ensure the const\n+                                                // exists in trait\n+                                                this.check_trait_item(impl_item.ident,\n+                                                                      ValueNS,\n+                                                                      impl_item.span,\n+                                                    |n, s| ConstNotMemberOfTrait(n, s));\n+                                                this.with_constant_rib(|this|\n+                                                    visit::walk_impl_item(this, impl_item)\n+                                                );\n+                                            }\n+                                            ImplItemKind::Method(..) => {\n+                                                // If this is a trait impl, ensure the method\n+                                                // exists in trait\n+                                                this.check_trait_item(impl_item.ident,\n+                                                                      ValueNS,\n+                                                                      impl_item.span,\n+                                                    |n, s| MethodNotMemberOfTrait(n, s));\n+\n                                                 visit::walk_impl_item(this, impl_item);\n-                                            });\n-                                        }\n-                                        ImplItemKind::Type(ref ty) => {\n-                                            // If this is a trait impl, ensure the type\n-                                            // exists in trait\n-                                            this.check_trait_item(impl_item.ident,\n-                                                                  TypeNS,\n-                                                                  impl_item.span,\n-                                                |n, s| TypeNotMemberOfTrait(n, s));\n-\n-                                            this.visit_ty(ty);\n-                                        }\n-                                        ImplItemKind::Existential(ref bounds) => {\n-                                            // If this is a trait impl, ensure the type\n-                                            // exists in trait\n-                                            this.check_trait_item(impl_item.ident,\n-                                                                  TypeNS,\n-                                                                  impl_item.span,\n-                                                |n, s| TypeNotMemberOfTrait(n, s));\n-\n-                                            for bound in bounds {\n-                                                this.visit_param_bound(bound);\n                                             }\n+                                            ImplItemKind::Type(ref ty) => {\n+                                                // If this is a trait impl, ensure the type\n+                                                // exists in trait\n+                                                this.check_trait_item(impl_item.ident,\n+                                                                      TypeNS,\n+                                                                      impl_item.span,\n+                                                    |n, s| TypeNotMemberOfTrait(n, s));\n+\n+                                                this.visit_ty(ty);\n+                                            }\n+                                            ImplItemKind::Existential(ref bounds) => {\n+                                                // If this is a trait impl, ensure the type\n+                                                // exists in trait\n+                                                this.check_trait_item(impl_item.ident,\n+                                                                      TypeNS,\n+                                                                      impl_item.span,\n+                                                    |n, s| TypeNotMemberOfTrait(n, s));\n+\n+                                                for bound in bounds {\n+                                                    this.visit_param_bound(bound);\n+                                                }\n+                                            }\n+                                            ImplItemKind::Macro(_) =>\n+                                                panic!(\"unexpanded macro in resolve!\"),\n                                         }\n-                                        ImplItemKind::Macro(_) =>\n-                                            panic!(\"unexpanded macro in resolve!\"),\n-                                    }\n-                                });\n-                            }\n+                                    });\n+                                }\n+                            });\n                         });\n                     });\n                 });"}, {"sha": "c9bae297031fffe6a976551e62acb5b17d74e46a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -813,6 +813,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Macro(..) |\n             HirDef::ToolMod |\n             HirDef::NonMacroAttr(..) |\n+            HirDef::SelfCtor(..) |\n             HirDef::Err => None,\n         }\n     }"}, {"sha": "7733ea37c056cc6a8480cc97a1ad03ed4d32c712", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -756,12 +756,13 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             }\n             Def::VariantCtor(_, CtorKind::Const) |\n             Def::StructCtor(_, CtorKind::Const) |\n+            Def::SelfCtor(..) |\n             Def::Const(..) | Def::AssociatedConst(..) => {} // OK\n             _ => bug!(\"unexpected pattern definition: {:?}\", def)\n         }\n \n         // Type check the path.\n-        let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n+        let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id).0;\n         self.demand_suptype(pat.span, expected, pat_ty);\n         pat_ty\n     }\n@@ -791,6 +792,24 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n         // Resolve the path and check the definition for errors.\n         let (def, opt_ty, segments) = self.resolve_ty_and_def_ufcs(qpath, pat.id, pat.span);\n+        if def == Def::Err {\n+            self.set_tainted_by_errors();\n+            on_error();\n+            return self.tcx.types.err;\n+        }\n+\n+        // Type check the path.\n+        let (pat_ty, def) = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n+        if !pat_ty.is_fn() {\n+            report_unexpected_def(def);\n+            return self.tcx.types.err;\n+        }\n+        // Replace constructor type with constructed type for tuple struct patterns.\n+        let pat_ty = pat_ty.fn_sig(tcx).output();\n+        let pat_ty = pat_ty.no_late_bound_regions().expect(\"expected fn type\");\n+\n+        self.demand_eqtype(pat.span, expected, pat_ty);\n+\n         let variant = match def {\n             Def::Err => {\n                 self.set_tainted_by_errors();\n@@ -807,15 +826,6 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             }\n             _ => bug!(\"unexpected pattern definition: {:?}\", def)\n         };\n-\n-        // Type check the path.\n-        let pat_ty = self.instantiate_value_path(segments, opt_ty, def, pat.span, pat.id);\n-        // Replace constructor type with constructed type for tuple struct patterns.\n-        let pat_ty = pat_ty.fn_sig(tcx).output();\n-        let pat_ty = pat_ty.no_late_bound_regions().expect(\"expected fn type\");\n-\n-        self.demand_eqtype(pat.span, expected, pat_ty);\n-\n         // Type check subpatterns.\n         if subpats.len() == variant.fields.len() ||\n                 subpats.len() < variant.fields.len() && ddpos.is_some() {"}, {"sha": "6a8860a3d9d06985e05b0cc08bf0eaeda1fdf18b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -3898,7 +3898,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Path(ref qpath) => {\n                 let (def, opt_ty, segs) = self.resolve_ty_and_def_ufcs(qpath, expr.id, expr.span);\n                 let ty = if def != Def::Err {\n-                    self.instantiate_value_path(segs, opt_ty, def, expr.span, id)\n+                    self.instantiate_value_path(segs, opt_ty, def, expr.span, id).0\n                 } else {\n                     self.set_tainted_by_errors();\n                     tcx.types.err\n@@ -4923,7 +4923,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match def {\n             // Case 1. Reference to a struct/variant constructor.\n             Def::StructCtor(def_id, ..) |\n-            Def::VariantCtor(def_id, ..) => {\n+            Def::VariantCtor(def_id, ..) |\n+            Def::SelfCtor(.., def_id) => {\n                 // Everything but the final segment should have no\n                 // parameters at all.\n                 let generics = self.tcx.generics_of(def_id);\n@@ -4969,7 +4970,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                   def: Def,\n                                   span: Span,\n                                   node_id: ast::NodeId)\n-                                  -> Ty<'tcx> {\n+                                  -> (Ty<'tcx>, Def) {\n         debug!(\"instantiate_value_path(path={:?}, def={:?}, node_id={})\",\n                segments,\n                def,\n@@ -5019,7 +5020,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let ty = self.local_ty(span, nid);\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(self.tcx.hir.node_to_hir_id(node_id), ty);\n-                return ty;\n+                return (ty, def);\n             }\n             _ => {}\n         }\n@@ -5056,7 +5057,28 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.tcx.generics_of(*def_id).has_self\n         }).unwrap_or(false);\n \n-        let def_id = def.def_id();\n+        let mut new_def = def;\n+        let (def_id, ty) = if let Def::SelfCtor(impl_def_id) = def {\n+            let ty = self.impl_self_ty(span, impl_def_id).ty;\n+\n+            match ty.ty_adt_def() {\n+                Some(adt_def) if adt_def.is_struct() => {\n+                    let variant = adt_def.non_enum_variant();\n+                    new_def = Def::StructCtor(variant.did, variant.ctor_kind);\n+                    (variant.did, self.tcx.type_of(variant.did))\n+                }\n+                _ => {\n+                    (impl_def_id, self.tcx.types.err)\n+                }\n+            }\n+        } else {\n+            let def_id = def.def_id();\n+\n+            // The things we are substituting into the type should not contain\n+            // escaping late-bound regions, and nor should the base type scheme.\n+            let ty = self.tcx.type_of(def_id);\n+            (def_id, ty)\n+        };\n \n         let substs = AstConv::create_substs_for_generic_args(\n             self.tcx,\n@@ -5121,10 +5143,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             },\n         );\n-\n-        // The things we are substituting into the type should not contain\n-        // escaping late-bound regions, and nor should the base type scheme.\n-        let ty = self.tcx.type_of(def_id);\n         assert!(!substs.has_escaping_regions());\n         assert!(!ty.has_escaping_regions());\n \n@@ -5168,7 +5186,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         self.write_user_substs_from_substs(hir_id, substs);\n \n-        ty_substituted\n+        (ty_substituted, new_def)\n     }\n \n     fn check_rustc_args_require_const(&self,"}, {"sha": "507461f2ea175f9a24e1bd4d4537411e524a310d", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -93,7 +93,8 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name, visited: &mut FxHa\n         // Assume that enum variants and struct types are re-exported next to\n         // their constructors.\n         Def::VariantCtor(..) |\n-        Def::StructCtor(..) => return Some(Vec::new()),\n+        Def::StructCtor(..) |\n+        Def::SelfCtor(..) => return Some(Vec::new()),\n         Def::Mod(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Module);\n             clean::ModuleItem(build_module(cx, did, visited))"}, {"sha": "a60347e008f88d268650b0c31a12b9ee6e8c0936", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -525,7 +525,9 @@ fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n fn value_ns_kind(def: Def, path_str: &str) -> Option<(&'static str, String)> {\n     match def {\n         // structs, variants, and mods exist in both namespaces. skip them\n-        Def::StructCtor(..) | Def::Mod(..) | Def::Variant(..) | Def::VariantCtor(..) => None,\n+        Def::StructCtor(..) | Def::Mod(..) | Def::Variant(..) |\n+        Def::VariantCtor(..) | Def::SelfCtor(..)\n+            => None,\n         Def::Fn(..)\n             => Some((\"function\", format!(\"{}()\", path_str))),\n         Def::Method(..)"}, {"sha": "0aaf2d526f934a1fcc186a29267fdad3443b526a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n                 // struct and variant constructors always show up alongside their definitions, we've\n                 // already processed them so just discard these.\n                 match path.def {\n-                    Def::StructCtor(..) | Def::VariantCtor(..) => return,\n+                    Def::StructCtor(..) | Def::VariantCtor(..) | Def::SelfCtor(..) => return,\n                     _ => {}\n                 }\n "}, {"sha": "7266d807d3ba8644fa60ea4b4c5810f417b4f92d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -513,8 +513,8 @@ declare_features! (\n     // Non-builtin attributes in inner attribute position\n     (active, custom_inner_attributes, \"1.30.0\", Some(38356), None),\n \n-    // tuple struct self constructor (RFC 2302)\n-    (active, tuple_struct_self_ctor, \"1.31.0\", Some(51994), None),\n+    // Self struct constructor  (RFC 2302)\n+    (active, self_struct_ctor, \"1.31.0\", Some(51994), None),\n );\n \n declare_features! (\n@@ -1739,15 +1739,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n-            ast::ExprKind::Call(ref callee, _) => {\n-                if let ast::ExprKind::Path(_, ref p) = callee.node {\n-                    if p.segments.len() == 1 &&\n-                       p.segments[0].ident.name == keywords::SelfType.name() {\n-                        gate_feature_post!(&self, tuple_struct_self_ctor, e.span,\n-                            \"tuple struct Self constructors are unstable\");\n-                    }\n-                }\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "98eab3949132046005f628d9dc0dd95455c91a21", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -0,0 +1,22 @@\n+struct ST1(i32, i32);\n+\n+impl ST1 {\n+    fn ctor() -> Self {\n+        Self(1,2)\n+        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n+    }\n+}\n+\n+struct ST2;\n+\n+impl ST2 {\n+    fn ctor() -> Self {\n+        Self\n+        //~^ ERROR: `Self` struct constructors are unstable (see issue #51994) [E0658]\n+    }\n+}\n+\n+fn main() {\n+    let _ = ST1::ctor();\n+    let _ = ST2::ctor();\n+}"}, {"sha": "6061a0db76ec54a38f31f07300b80456072915a6", "filename": "src/test/ui/feature-gates/feature-gate-self-struct-ctor.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-struct-ctor.stderr?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/feature-gate-self-struct-ctor.rs:5:9\n+   |\n+LL |         Self(1,2)\n+   |         ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/feature-gate-self-struct-ctor.rs:14:9\n+   |\n+LL |         Self\n+   |         ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "aa907e813ed5a7234f75411866395ede87a7b74a", "filename": "src/test/ui/feature-gates/feature-gate-tuple-struct-self-ctor.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.rs?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct ST(i32, i32);\n-\n-impl ST {\n-    fn ctor() -> Self {\n-        Self(1,2)\n-        //~^ ERROR: expected function, found self type `Self` [E0423]\n-        //~^^ ERROR: tuple struct Self constructors are unstable (see issue #51994) [E0658]\n-    }\n-}"}, {"sha": "e92924e960278045a3ea626661cd407ff05ce9c7", "filename": "src/test/ui/feature-gates/feature-gate-tuple-struct-self-ctor.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4891699125fa12d46217890e4eb68b35e9ff6d5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tuple-struct-self-ctor.stderr?ref=a4891699125fa12d46217890e4eb68b35e9ff6d5", "patch": "@@ -1,20 +0,0 @@\n-error[E0423]: expected function, found self type `Self`\n-  --> $DIR/feature-gate-tuple-struct-self-ctor.rs:15:9\n-   |\n-LL |         Self(1,2)\n-   |         ^^^^ not a function\n-   |\n-   = note: can't use `Self` as a constructor, you must use the implemented struct\n-\n-error[E0658]: tuple struct Self constructors are unstable (see issue #51994)\n-  --> $DIR/feature-gate-tuple-struct-self-ctor.rs:15:9\n-   |\n-LL |         Self(1,2)\n-   |         ^^^^^^^^^\n-   |\n-   = help: add #![feature(tuple_struct_self_ctor)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0423, E0658.\n-For more information about an error, try `rustc --explain E0423`."}, {"sha": "ad5b8fb64342d0aa469250f99c62101a2f24531f", "filename": "src/test/ui/keyword/keyword-self-as-identifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+        //~^ ERROR `Self` struct constructors are unstable (see issue #51994)\n }"}, {"sha": "296269819f8364507501645c8b26ca448ea72c42", "filename": "src/test/ui/keyword/keyword-self-as-identifier.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-identifier.stderr?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -4,6 +4,15 @@ error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n    |         ^^^^ not found in this scope\n \n-error: aborting due to previous error\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/keyword-self-as-identifier.rs:12:9\n+   |\n+LL |     let Self = 22; //~ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+   |         ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0531`.\n+Some errors occurred: E0531, E0658.\n+For more information about an error, try `rustc --explain E0531`."}, {"sha": "156e240e44282dcd8a2d813322f7607a2cf38052", "filename": "src/test/ui/run-pass/rfcs/rfc-2302-self-struct-ctor.rs", "status": "renamed", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Frfcs%2Frfc-2302-self-struct-ctor.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -1,14 +1,6 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(tuple_struct_self_ctor)]\n+// run-pass\n+\n+#![feature(self_struct_ctor)]\n \n #![allow(dead_code)]\n \n@@ -83,6 +75,34 @@ impl ST5 {\n     }\n }\n \n+struct ST6(i32);\n+type T = ST6;\n+impl T {\n+    fn ctor() -> Self {\n+        ST6(1)\n+    }\n+\n+    fn type_alias(self) {\n+        let Self(_x) = match self { Self(x) => Self(x) };\n+        let _opt: Option<Self> = Some(0).map(Self);\n+    }\n+}\n+\n+struct ST7<T1, T2>(T1, T2);\n+\n+impl ST7<i32, usize> {\n+\n+    fn ctor() -> Self {\n+        Self(1, 2)\n+    }\n+\n+    fn pattern(self) -> Self {\n+        match self {\n+            Self(x, y) => Self(x, y),\n+        }\n+    }\n+}\n+\n fn main() {\n     let v1 = ST1::ctor();\n     v1.pattern();\n@@ -99,4 +119,11 @@ fn main() {\n \n     let v5 = ST5::ctor();\n     v5.pattern();\n+\n+    let v6 = ST6::ctor();\n+    v6.type_alias();\n+\n+    let v7 = ST7::<i32, usize>::ctor();\n+    let r = v7.pattern();\n+    println!(\"{} {}\", r.0, r.1)\n }", "previous_filename": "src/test/run-pass/tuple-struct-self-ctor.rs"}, {"sha": "bbaf060ca87e3b226afb54ba50076c9458f6c3a2", "filename": "src/test/ui/self/self_type_keyword-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.rs?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -13,11 +13,14 @@ use self::Self as Foo; //~ ERROR unresolved import `self::Self`\n pub fn main() {\n     let Self = 5;\n     //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+    //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n \n     match 15 {\n         Self => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n         Foo { x: Self } => (),\n         //~^ ERROR cannot find unit struct/variant or constant `Self` in this scope\n+        //~^^ ERROR `Self` struct constructors are unstable (see issue #51994)\n     }\n }"}, {"sha": "82529974d0e37a4f74b01b4bd5c78c514e480a0b", "filename": "src/test/ui/self/self_type_keyword-2.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2157958b27b7f1cd471533d71c8e09843aec57ad/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword-2.stderr?ref=2157958b27b7f1cd471533d71c8e09843aec57ad", "patch": "@@ -11,18 +11,42 @@ LL |     let Self = 5;\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:18:9\n+  --> $DIR/self_type_keyword-2.rs:19:9\n    |\n LL |         Self => (),\n    |         ^^^^ not found in this scope\n \n error[E0531]: cannot find unit struct/variant or constant `Self` in this scope\n-  --> $DIR/self_type_keyword-2.rs:20:18\n+  --> $DIR/self_type_keyword-2.rs:22:18\n    |\n LL |         Foo { x: Self } => (),\n    |                  ^^^^ not found in this scope\n \n-error: aborting due to 4 previous errors\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/self_type_keyword-2.rs:14:9\n+   |\n+LL |     let Self = 5;\n+   |         ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/self_type_keyword-2.rs:19:9\n+   |\n+LL |         Self => (),\n+   |         ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error[E0658]: `Self` struct constructors are unstable (see issue #51994)\n+  --> $DIR/self_type_keyword-2.rs:22:18\n+   |\n+LL |         Foo { x: Self } => (),\n+   |                  ^^^^\n+   |\n+   = help: add #![feature(self_struct_ctor)] to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n \n-Some errors occurred: E0432, E0531.\n+Some errors occurred: E0432, E0531, E0658.\n For more information about an error, try `rustc --explain E0432`."}]}