{"sha": "d93036a043dbd19f394ad320313bdbe81644f121", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzAzNmEwNDNkYmQxOWYzOTRhZDMyMDMxM2JkYmU4MTY0NGYxMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-07T13:06:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-07T13:06:12Z"}, "message": "Auto merge of #44249 - pnkfelix:debugflag-emit-end-regions, r=arielb1\n\nDebugflag: -Z emit-end-regions\n\n Skip EndRegion emission by default. Use `-Z emit-end-regions` to reenable it.\n\nThe main intent is to fix cases where `EndRegion` emission is believed to be causing excess peak memory pressure.\n\nIt may also be a welcome change to people inspecting the MIR output who find the EndRegions to be a distraction.\n\n(In later follow-up PR's I will put in safe-guards against using the current mir-borrowck without enabling `EndRegion` emission. But I wanted this PR to be minimal, in part because we may wish to backport it to the beta channel if we find that it reduces peak memory usage significantly.)", "tree": {"sha": "0e0c0d2a82996fc559985c54771efb1eaf7d2644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e0c0d2a82996fc559985c54771efb1eaf7d2644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d93036a043dbd19f394ad320313bdbe81644f121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d93036a043dbd19f394ad320313bdbe81644f121", "html_url": "https://github.com/rust-lang/rust/commit/d93036a043dbd19f394ad320313bdbe81644f121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d93036a043dbd19f394ad320313bdbe81644f121/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7d75eff30ff03f607ff0656a50f4be768cfdbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d75eff30ff03f607ff0656a50f4be768cfdbc9", "html_url": "https://github.com/rust-lang/rust/commit/d7d75eff30ff03f607ff0656a50f4be768cfdbc9"}, {"sha": "f2892ad281cb11421ebae741d698e0af14d3ecf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2892ad281cb11421ebae741d698e0af14d3ecf6", "html_url": "https://github.com/rust-lang/rust/commit/f2892ad281cb11421ebae741d698e0af14d3ecf6"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "577c905a1d5a689af6033ce05644fc6af7e51d9a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -919,6 +919,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n     identify_regions: bool = (false, parse_bool, [UNTRACKED],\n         \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n+    emit_end_regions: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit EndRegion as part of MIR; enable transforms that solely process EndRegion\"),\n     borrowck_mir: bool = (false, parse_bool, [UNTRACKED],\n         \"implicitly treat functions as if they have `#[rustc_mir_borrowck]` attribute\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "129a9f55750083da96e64009f3e4449351f96116", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -410,6 +410,10 @@ impl Session {\n     pub fn print_llvm_passes(&self) -> bool {\n         self.opts.debugging_opts.print_llvm_passes\n     }\n+    pub fn emit_end_regions(&self) -> bool {\n+        self.opts.debugging_opts.emit_end_regions ||\n+            (self.opts.debugging_opts.mir_emit_validate > 0)\n+    }\n     pub fn lto(&self) -> bool {\n         self.opts.cg.lto\n     }"}, {"sha": "a6e31bcddd2427c54add2d692b6641905a4b2081", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -16,6 +16,7 @@\n use build::CFG;\n use rustc::middle::region;\n use rustc::mir::*;\n+use rustc::ty;\n \n impl<'tcx> CFG<'tcx> {\n     pub fn block_data(&self, blk: BasicBlock) -> &BasicBlockData<'tcx> {\n@@ -44,14 +45,17 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n-    pub fn push_end_region(&mut self,\n-                           block: BasicBlock,\n-                           source_info: SourceInfo,\n-                           region_scope: region::Scope) {\n-        self.push(block, Statement {\n-            source_info,\n-            kind: StatementKind::EndRegion(region_scope),\n-        });\n+    pub fn push_end_region<'a, 'gcx:'a+'tcx>(&mut self,\n+                                             tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+                                             block: BasicBlock,\n+                                             source_info: SourceInfo,\n+                                             region_scope: region::Scope) {\n+        if tcx.sess.emit_end_regions() {\n+            self.push(block, Statement {\n+                source_info,\n+                kind: StatementKind::EndRegion(region_scope),\n+            });\n+        }\n     }\n \n     pub fn push_assign(&mut self,"}, {"sha": "c08620c1e41040371f402e07287bbafb60167a15", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -89,7 +89,7 @@ should go to.\n \n use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use rustc::middle::region;\n-use rustc::ty::Ty;\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use syntax_pos::{Span};\n@@ -359,7 +359,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                           self.arg_count,\n                                           false));\n \n-        self.cfg.push_end_region(block, region_scope.1, scope.region_scope);\n+        self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n         block.unit()\n     }\n \n@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                               false));\n \n             // End all regions for scopes out of which we are breaking.\n-            self.cfg.push_end_region(block, region_scope.1, scope.region_scope);\n+            self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n         }\n         }\n         let scope = &self.scopes[len - scope_count];\n@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                               true));\n \n             // End all regions for scopes out of which we are breaking.\n-            self.cfg.push_end_region(block, src_info, scope.region_scope);\n+            self.cfg.push_end_region(self.hir.tcx(), block, src_info, scope.region_scope);\n         }\n \n         self.cfg.terminate(block, src_info, TerminatorKind::GeneratorDrop);\n@@ -694,7 +694,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         for scope in scopes.iter_mut() {\n-            target = build_diverge_scope(cfg, scope.region_scope_span,\n+            target = build_diverge_scope(self.hir.tcx(), cfg, scope.region_scope_span,\n                                          scope, target, generator_drop);\n         }\n         Some(target)\n@@ -831,7 +831,8 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n     block.unit()\n }\n \n-fn build_diverge_scope<'a, 'gcx, 'tcx>(cfg: &mut CFG<'tcx>,\n+fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                       cfg: &mut CFG<'tcx>,\n                                        span: Span,\n                                        scope: &mut Scope<'tcx>,\n                                        mut target: BasicBlock,\n@@ -893,7 +894,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(cfg: &mut CFG<'tcx>,\n     // becomes trivial goto after pass that removes all EndRegions.)\n     {\n         let block = cfg.start_new_cleanup_block();\n-        cfg.push_end_region(block, source_info(span), scope.region_scope);\n+        cfg.push_end_region(tcx, block, source_info(span), scope.region_scope);\n         cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n         target = block\n     }"}, {"sha": "a6750f400ba939ca4d1e9d903a1aa533ce40104d", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -39,9 +39,11 @@ struct DeleteTrivialEndRegions<'a> {\n \n impl MirPass for CleanEndRegions {\n     fn run_pass<'a, 'tcx>(&self,\n-                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _source: MirSource,\n                           mir: &mut Mir<'tcx>) {\n+        if !tcx.sess.emit_end_regions() { return; }\n+\n         let mut gather = GatherBorrowedRegions {\n             seen_regions: FxHashSet()\n         };"}, {"sha": "9c8cfc0ab208c9fdbeafb5cd5effaf77230030c4", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions\n+// compile-flags: -Z identify_regions -Z emit-end-regions\n // ignore-tidy-linelength\n \n // This is just about the simplest program that exhibits an EndRegion."}, {"sha": "6a4e209a14b7fe360cc7a34528c66f359cf4ddb5", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions\n+// compile-flags: -Z identify_regions -Z emit-end-regions\n // ignore-tidy-linelength\n \n // We will EndRegion for borrows in a loop that occur before break but"}, {"sha": "cb1d45e37c83405f3497ba5503d543f66b50fef3", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions\n+// compile-flags: -Z identify_regions -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Binding the borrow's subject outside the loop does not increase the"}, {"sha": "b714b6bc55b2408360f6ae7605a362bb01ab1c23", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions\n+// compile-flags: -Z identify_regions -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: Direct borrows."}, {"sha": "a4c53675b9c3a19218492438244b28ec01f11a6e", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: Borrowing via by-ref closure."}, {"sha": "daa94769430df7930cd3735ce064c4d22c54a239", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: 2nd borrow within by-ref closure."}, {"sha": "9feacd04fe0fabdb312b4661731fb6b74a44562c", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: Borrow of moved data."}, {"sha": "30dda7a4062601b428b2fe3cc66c3d66f6299694", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: Move of borrow into closure."}, {"sha": "bbfdc0e77a8d6842f5f9865001c71b8c04aea935", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // This test models a scenario that arielb1 found during review."}, {"sha": "3f0f5068577c6427a196094168577f15f6925a9c", "filename": "src/test/mir-opt/issue-43457.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d93036a043dbd19f394ad320313bdbe81644f121/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-43457.rs?ref=d93036a043dbd19f394ad320313bdbe81644f121", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z identify_regions -Z span_free_formats\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n // ignore-tidy-linelength\n \n // Regression test for #43457: an `EndRegion` was missing from output"}]}