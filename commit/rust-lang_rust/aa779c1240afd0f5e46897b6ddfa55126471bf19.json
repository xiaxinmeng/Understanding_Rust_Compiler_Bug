{"sha": "aa779c1240afd0f5e46897b6ddfa55126471bf19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzc5YzEyNDBhZmQwZjVlNDY4OTdiNmRkZmE1NTEyNjQ3MWJmMTk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-28T20:11:14Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-28T20:11:24Z"}, "message": "std: change Decoder::read_option to return a generic type\n\nThis allows read_option to be used with a custom option type instead\nof just core::Option.", "tree": {"sha": "6001cd7ab3fe1998802fa8383f69d97000629f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6001cd7ab3fe1998802fa8383f69d97000629f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa779c1240afd0f5e46897b6ddfa55126471bf19", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa779c1240afd0f5e46897b6ddfa55126471bf19", "html_url": "https://github.com/rust-lang/rust/commit/aa779c1240afd0f5e46897b6ddfa55126471bf19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa779c1240afd0f5e46897b6ddfa55126471bf19/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9e5ecb6c1f833eccb520b4179cf86329331fa6", "html_url": "https://github.com/rust-lang/rust/commit/ce9e5ecb6c1f833eccb520b4179cf86329331fa6"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "331bede5b7af37775d8db77ee9900722c8880224", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=aa779c1240afd0f5e46897b6ddfa55126471bf19", "patch": "@@ -411,13 +411,13 @@ pub mod reader {\n         }\n \n         #[cfg(stage0)]\n-        fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+        fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n                 do self.read_enum_variant |idx| {\n                     match idx {\n-                        0 => None,\n-                        1 => Some(f()),\n+                        0 => f(false),\n+                        1 => f(true),\n                         _ => fail!(),\n                     }\n                 }\n@@ -427,13 +427,13 @@ pub mod reader {\n         #[cfg(stage1)]\n         #[cfg(stage2)]\n         #[cfg(stage3)]\n-        fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+        fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n                 do self.read_enum_variant([\"None\", \"Some\"]) |idx| {\n                     match idx {\n-                        0 => None,\n-                        1 => Some(f()),\n+                        0 => f(false),\n+                        1 => f(true),\n                         _ => fail!(),\n                     }\n                 }"}, {"sha": "4b0e313330d24b22e9649c437c6124263fec21bb", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=aa779c1240afd0f5e46897b6ddfa55126471bf19", "patch": "@@ -980,10 +980,10 @@ impl<'self> serialize::Decoder for Decoder<'self> {\n         }\n     }\n \n-    fn read_option<T>(&self, f: &fn() -> T) -> Option<T> {\n+    fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n         match *self.peek() {\n-            Null => { self.pop(); None }\n-            _ => Some(f()),\n+            Null => { self.pop(); f(false) }\n+            _ => f(true),\n         }\n     }\n }"}, {"sha": "3c9ad0d77d1e01a64cc0f88c7ff4dfffc9a5c72d", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa779c1240afd0f5e46897b6ddfa55126471bf19/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=aa779c1240afd0f5e46897b6ddfa55126471bf19", "patch": "@@ -118,7 +118,7 @@ pub trait Decoder {\n     fn read_tup_elt<T>(&self, idx: uint, f: &fn() -> T) -> T;\n \n     // Specialized types:\n-    fn read_option<T>(&self, f: &fn() -> T) -> Option<T>;\n+    fn read_option<T>(&self, f: &fn(bool) -> T) -> T;\n }\n \n pub trait Encodable<S:Encoder> {\n@@ -395,7 +395,13 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n     fn decode(d: &D) -> Option<T> {\n-        d.read_option(|| Decodable::decode(d))\n+        do d.read_option |b| {\n+            if b {\n+                Some(Decodable::decode(d))\n+            } else {\n+                None\n+            }\n+        }\n     }\n }\n "}]}