{"sha": "78a709348dca33414f76986ae72c651d489092f4", "node_id": "C_kwDOAAsO6NoAKDc4YTcwOTM0OGRjYTMzNDE0Zjc2OTg2YWU3MmM2NTFkNDg5MDkyZjQ", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-21T02:30:48Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T16:51:57Z"}, "message": "Fix `x test --no-deps`\n\n- Use `cargo metadata` to determine whether a crate has a library\n  package or not\n- Collect metadata for all workspaces, not just the root workspace and\n  cargo\n- Don't pass `--lib` for crates without a library\n- Use `run_cargo_test` for rust-installer\n- Don't build documentation in `lint-docs` if `--no-doc` is passed", "tree": {"sha": "0d815354c402f990f11f2db2700208c9b45a8362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d815354c402f990f11f2db2700208c9b45a8362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a709348dca33414f76986ae72c651d489092f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a709348dca33414f76986ae72c651d489092f4", "html_url": "https://github.com/rust-lang/rust/commit/78a709348dca33414f76986ae72c651d489092f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a709348dca33414f76986ae72c651d489092f4/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a75607baba3e42814e4cc7fa35358f1be7f75ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a75607baba3e42814e4cc7fa35358f1be7f75ed", "html_url": "https://github.com/rust-lang/rust/commit/2a75607baba3e42814e4cc7fa35358f1be7f75ed"}], "stats": {"total": 92, "additions": 58, "deletions": 34}, "files": [{"sha": "59d2e9cc69e796794389d35d62f2aec00d91bcda", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=78a709348dca33414f76986ae72c651d489092f4", "patch": "@@ -246,6 +246,7 @@ struct Crate {\n     name: Interned<String>,\n     deps: HashSet<Interned<String>>,\n     path: PathBuf,\n+    has_lib: bool,\n }\n \n impl Crate {"}, {"sha": "8f2c3faca3a483e99f0a2697858965a6f5d87ed0", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=78a709348dca33414f76986ae72c651d489092f4", "patch": "@@ -5,7 +5,7 @@ use serde_derive::Deserialize;\n \n use crate::cache::INTERNER;\n use crate::util::output;\n-use crate::{Build, Crate};\n+use crate::{t, Build, Crate};\n \n /// For more information, see the output of\n /// <https://doc.rust-lang.org/nightly/cargo/commands/cargo-metadata.html>\n@@ -22,6 +22,7 @@ struct Package {\n     source: Option<String>,\n     manifest_path: String,\n     dependencies: Vec<Dependency>,\n+    targets: Vec<Target>,\n }\n \n /// For more information, see the output of\n@@ -32,6 +33,11 @@ struct Dependency {\n     source: Option<String>,\n }\n \n+#[derive(Debug, Deserialize)]\n+struct Target {\n+    kind: Vec<String>,\n+}\n+\n /// Collects and stores package metadata of each workspace members into `build`,\n /// by executing `cargo metadata` commands.\n pub fn build(build: &mut Build) {\n@@ -46,11 +52,16 @@ pub fn build(build: &mut Build) {\n                 .filter(|dep| dep.source.is_none())\n                 .map(|dep| INTERNER.intern_string(dep.name))\n                 .collect();\n-            let krate = Crate { name, deps, path };\n+            let has_lib = package.targets.iter().any(|t| t.kind.iter().any(|k| k == \"lib\"));\n+            let krate = Crate { name, deps, path, has_lib };\n             let relative_path = krate.local_path(build);\n             build.crates.insert(name, krate);\n             let existing_path = build.crate_paths.insert(relative_path, name);\n-            assert!(existing_path.is_none(), \"multiple crates with the same path\");\n+            assert!(\n+                existing_path.is_none(),\n+                \"multiple crates with the same path: {}\",\n+                existing_path.unwrap()\n+            );\n         }\n     }\n }\n@@ -60,29 +71,28 @@ pub fn build(build: &mut Build) {\n /// Note that `src/tools/cargo` is no longer a workspace member but we still\n /// treat it as one here, by invoking an additional `cargo metadata` command.\n fn workspace_members(build: &Build) -> impl Iterator<Item = Package> {\n-    let cmd_metadata = |manifest_path| {\n+    let collect_metadata = |manifest_path| {\n         let mut cargo = Command::new(&build.initial_cargo);\n         cargo\n             .arg(\"metadata\")\n             .arg(\"--format-version\")\n             .arg(\"1\")\n             .arg(\"--no-deps\")\n             .arg(\"--manifest-path\")\n-            .arg(manifest_path);\n-        cargo\n+            .arg(build.src.join(manifest_path));\n+        let metadata_output = output(&mut cargo);\n+        let Output { packages, .. } = t!(serde_json::from_str(&metadata_output));\n+        packages\n     };\n \n-    // Collects `metadata.packages` from the root workspace.\n-    let root_manifest_path = build.src.join(\"Cargo.toml\");\n-    let root_output = output(&mut cmd_metadata(&root_manifest_path));\n-    let Output { packages, .. } = serde_json::from_str(&root_output).unwrap();\n-\n-    // Collects `metadata.packages` from src/tools/cargo separately.\n-    let cargo_manifest_path = build.src.join(\"src/tools/cargo/Cargo.toml\");\n-    let cargo_output = output(&mut cmd_metadata(&cargo_manifest_path));\n-    let Output { packages: cargo_packages, .. } = serde_json::from_str(&cargo_output).unwrap();\n+    // Collects `metadata.packages` from all workspaces.\n+    let packages = collect_metadata(\"Cargo.toml\");\n+    let cargo_packages = collect_metadata(\"src/tools/cargo/Cargo.toml\");\n+    let ra_packages = collect_metadata(\"src/tools/rust-analyzer/Cargo.toml\");\n+    let bootstrap_packages = collect_metadata(\"src/bootstrap/Cargo.toml\");\n \n     // We only care about the root package from `src/tool/cargo` workspace.\n     let cargo_package = cargo_packages.into_iter().find(|pkg| pkg.name == \"cargo\").into_iter();\n-    packages.into_iter().chain(cargo_package)\n+\n+    packages.into_iter().chain(cargo_package).chain(ra_packages).chain(bootstrap_packages)\n }"}, {"sha": "aee84e9c9beb96d8728dc9cc3ff9e5d8a3a5711b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a709348dca33414f76986ae72c651d489092f4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=78a709348dca33414f76986ae72c651d489092f4", "patch": "@@ -103,7 +103,8 @@ impl Step for CrateBootstrap {\n             path,\n             bootstrap_host,\n         ));\n-        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n+        let crate_name = path.rsplit_once('/').unwrap().1;\n+        run_cargo_test(cargo, &[], &[], crate_name, compiler, bootstrap_host, builder);\n     }\n }\n \n@@ -152,7 +153,11 @@ You can skip linkcheck with --exclude src/tools/linkchecker\"\n             SourceType::InTree,\n             &[],\n         );\n-        run_cargo_test(cargo, &[], &[], compiler, bootstrap_host, builder);\n+        run_cargo_test(cargo, &[], &[], \"linkchecker\", compiler, bootstrap_host, builder);\n+\n+        if builder.doc_tests == DocTests::No {\n+            return;\n+        }\n \n         // Build all the default documentation.\n         builder.default_doc(&[]);\n@@ -300,7 +305,7 @@ impl Step for Cargo {\n         );\n \n         // NOTE: can't use `run_cargo_test` because we need to overwrite `PATH`\n-        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, self.host, builder);\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"cargo\", compiler, self.host, builder);\n \n         // Don't run cross-compile tests, we may not have cross-compiled libstd libs\n         // available.\n@@ -368,7 +373,7 @@ impl Step for RustAnalyzer {\n         cargo.env(\"SKIP_SLOW_TESTS\", \"1\");\n \n         cargo.add_rustc_lib_path(builder, compiler);\n-        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n+        run_cargo_test(cargo, &[], &[], \"rust-analyzer\", compiler, host, builder);\n     }\n }\n \n@@ -417,7 +422,7 @@ impl Step for Rustfmt {\n \n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n+        run_cargo_test(cargo, &[], &[], \"rustfmt\", compiler, host, builder);\n     }\n }\n \n@@ -465,7 +470,7 @@ impl Step for RustDemangler {\n         cargo.env(\"RUST_DEMANGLER_DRIVER_PATH\", rust_demangler);\n         cargo.add_rustc_lib_path(builder, compiler);\n \n-        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n+        run_cargo_test(cargo, &[], &[], \"rust-demangler\", compiler, host, builder);\n     }\n }\n \n@@ -602,7 +607,7 @@ impl Step for Miri {\n \n         // This can NOT be `run_cargo_test` since the Miri test runner\n         // does not understand the flags added by `add_flags_and_try_run_test`.\n-        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, target, builder);\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"miri\", compiler, target, builder);\n         {\n             let _time = util::timeit(&builder);\n             builder.run(&mut cargo);\n@@ -679,7 +684,7 @@ impl Step for CompiletestTest {\n             &[],\n         );\n         cargo.allow_features(\"test\");\n-        run_cargo_test(cargo, &[], &[], compiler, host, builder);\n+        run_cargo_test(cargo, &[], &[], \"compiletest\", compiler, host, builder);\n     }\n }\n \n@@ -722,17 +727,13 @@ impl Step for Clippy {\n             &[],\n         );\n \n-        if !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-\n         cargo.env(\"RUSTC_TEST_SUITE\", builder.rustc(compiler));\n         cargo.env(\"RUSTC_LIB_PATH\", builder.rustc_libdir(compiler));\n         let host_libs = builder.stage_out(compiler, Mode::ToolRustc).join(builder.cargo_dir());\n         cargo.env(\"HOST_LIBS\", host_libs);\n \n         cargo.add_rustc_lib_path(builder, compiler);\n-        let mut cargo = prepare_cargo_test(cargo, &[], &[], compiler, host, builder);\n+        let mut cargo = prepare_cargo_test(cargo, &[], &[], \"clippy\", compiler, host, builder);\n \n         if builder.try_run(&mut cargo) {\n             // The tests succeeded; nothing to do.\n@@ -2048,11 +2049,13 @@ fn run_cargo_test(\n     cargo: impl Into<Command>,\n     libtest_args: &[&str],\n     crates: &[Interned<String>],\n+    primary_crate: &str,\n     compiler: Compiler,\n     target: TargetSelection,\n     builder: &Builder<'_>,\n ) -> bool {\n-    let mut cargo = prepare_cargo_test(cargo, libtest_args, crates, compiler, target, builder);\n+    let mut cargo =\n+        prepare_cargo_test(cargo, libtest_args, crates, primary_crate, compiler, target, builder);\n     let _time = util::timeit(&builder);\n     add_flags_and_try_run_tests(builder, &mut cargo)\n }\n@@ -2062,6 +2065,7 @@ fn prepare_cargo_test(\n     cargo: impl Into<Command>,\n     libtest_args: &[&str],\n     crates: &[Interned<String>],\n+    primary_crate: &str,\n     compiler: Compiler,\n     target: TargetSelection,\n     builder: &Builder<'_>,\n@@ -2079,7 +2083,14 @@ fn prepare_cargo_test(\n             cargo.arg(\"--doc\");\n         }\n         DocTests::No => {\n-            cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n+            let krate = &builder\n+                .crates\n+                .get(&INTERNER.intern_str(primary_crate))\n+                .unwrap_or_else(|| panic!(\"missing crate {primary_crate}\"));\n+            if krate.has_lib {\n+                cargo.arg(\"--lib\");\n+            }\n+            cargo.args(&[\"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n         }\n         DocTests::Yes => {}\n     }\n@@ -2191,7 +2202,7 @@ impl Step for Crate {\n             compiler.host,\n             target,\n         );\n-        run_cargo_test(cargo, &[], &self.crates, compiler, target, builder);\n+        run_cargo_test(cargo, &[], &self.crates, &self.crates[0], compiler, target, builder);\n     }\n }\n \n@@ -2284,6 +2295,7 @@ impl Step for CrateRustdoc {\n             cargo,\n             &[],\n             &[INTERNER.intern_str(\"rustdoc:0.0.0\")],\n+            \"rustdoc\",\n             compiler,\n             target,\n             builder,\n@@ -2345,6 +2357,7 @@ impl Step for CrateRustdocJsonTypes {\n             cargo,\n             libtest_args,\n             &[INTERNER.intern_str(\"rustdoc-json-types\")],\n+            \"rustdoc-json-types\",\n             compiler,\n             target,\n             builder,\n@@ -2504,7 +2517,7 @@ impl Step for Bootstrap {\n         }\n         // rustbuild tests are racy on directory creation so just run them one at a time.\n         // Since there's not many this shouldn't be a problem.\n-        run_cargo_test(cmd, &[\"--test-threads=1\"], &[], compiler, host, builder);\n+        run_cargo_test(cmd, &[\"--test-threads=1\"], &[], \"bootstrap\", compiler, host, builder);\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n@@ -2617,7 +2630,7 @@ impl Step for RustInstaller {\n             SourceType::InTree,\n             &[],\n         );\n-        try_run(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &[], \"installer\", compiler, bootstrap_host, builder);\n \n         // We currently don't support running the test.sh script outside linux(?) environments.\n         // Eventually this should likely migrate to #[test]s in rust-installer proper rather than a"}]}