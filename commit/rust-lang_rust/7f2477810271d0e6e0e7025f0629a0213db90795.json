{"sha": "7f2477810271d0e6e0e7025f0629a0213db90795", "node_id": "C_kwDOAAsO6NoAKDdmMjQ3NzgxMDI3MWQwZTZlMGU3MDI1ZjA2MjlhMDIxM2RiOTA3OTU", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-01-17T22:13:15Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-01-27T21:31:28Z"}, "message": "Suggest making base prefix lowercase if parsing fails", "tree": {"sha": "1c0130e3c2522a8fe1274f92186143eaa4d11b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c0130e3c2522a8fe1274f92186143eaa4d11b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f2477810271d0e6e0e7025f0629a0213db90795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2477810271d0e6e0e7025f0629a0213db90795", "html_url": "https://github.com/rust-lang/rust/commit/7f2477810271d0e6e0e7025f0629a0213db90795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f2477810271d0e6e0e7025f0629a0213db90795/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093", "html_url": "https://github.com/rust-lang/rust/commit/21b4a9cfdcbb1e76f4b36b5c3cfd64d627285093"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "09b88e9e07b6ae1a60eb53bc872d03db9663b456", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f2477810271d0e6e0e7025f0629a0213db90795/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f2477810271d0e6e0e7025f0629a0213db90795/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=7f2477810271d0e6e0e7025f0629a0213db90795", "patch": "@@ -1700,6 +1700,19 @@ impl<'a> Parser<'a> {\n             s.len() > 1 && s.starts_with(first_chars) && s[1..].chars().all(|c| c.is_ascii_digit())\n         }\n \n+        // Try to lowercase the prefix if it's a valid base prefix.\n+        fn fix_base_capitalisation(s: &str) -> Option<String> {\n+            if let Some(stripped) = s.strip_prefix(\"B\") {\n+                Some(format!(\"0b{stripped}\"))\n+            } else if let Some(stripped) = s.strip_prefix(\"O\") {\n+                Some(format!(\"0o{stripped}\"))\n+            } else if let Some(stripped) = s.strip_prefix(\"X\") {\n+                Some(format!(\"0x{stripped}\"))\n+            } else {\n+                None\n+            }\n+        }\n+\n         let token::Lit { kind, suffix, .. } = lit;\n         match err {\n             // `NotLiteral` is not an error by itself, so we don't report\n@@ -1724,6 +1737,19 @@ impl<'a> Parser<'a> {\n                     self.struct_span_err(span, &msg)\n                         .help(\"valid widths are 8, 16, 32, 64 and 128\")\n                         .emit();\n+                } else if let Some(fixed) = fix_base_capitalisation(suf) {\n+                    let msg = format!(\"invalid suffix `{}` for number literal\", suf);\n+\n+                    self.struct_span_err(span, &msg)\n+                        .span_label(span, format!(\"invalid suffix `{}`\", suf))\n+                        .help(\"base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\")\n+                        .span_suggestion(\n+                            span,\n+                            \"try making the prefix lowercase\",\n+                            fixed,\n+                            Applicability::MaybeIncorrect,\n+                        )\n+                        .emit();\n                 } else {\n                     let msg = format!(\"invalid suffix `{}` for number literal\", suf);\n                     self.struct_span_err(span, &msg)"}]}