{"sha": "04210aec5ff8e369a8e8468652e02254b5ee2922", "node_id": "C_kwDOAAsO6NoAKDA0MjEwYWVjNWZmOGUzNjlhOGU4NDY4NjUyZTAyMjU0YjVlZTI5MjI", "commit": {"author": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2021-10-28T00:58:23Z"}, "committer": {"name": "Devin Ragotzy", "email": "devin.ragotzy@gmail.com", "date": "2022-03-12T20:15:43Z"}, "message": "Update output for doc hidden usefulness ui test output", "tree": {"sha": "a36e2832a4535eb3a33bfd28e370ac50fd5b407f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a36e2832a4535eb3a33bfd28e370ac50fd5b407f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04210aec5ff8e369a8e8468652e02254b5ee2922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04210aec5ff8e369a8e8468652e02254b5ee2922", "html_url": "https://github.com/rust-lang/rust/commit/04210aec5ff8e369a8e8468652e02254b5ee2922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04210aec5ff8e369a8e8468652e02254b5ee2922/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0d99d8d43dccf5f20e49826fc0c0126012390f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0d99d8d43dccf5f20e49826fc0c0126012390f", "html_url": "https://github.com/rust-lang/rust/commit/ef0d99d8d43dccf5f20e49826fc0c0126012390f"}], "stats": {"total": 126, "additions": 64, "deletions": 62}, "files": [{"sha": "9e48925479bb9a02a23523f2cb802632b0ba5a26", "filename": "src/test/ui/pattern/usefulness/doc-hidden-fields.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/04210aec5ff8e369a8e8468652e02254b5ee2922/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04210aec5ff8e369a8e8468652e02254b5ee2922/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-fields.stderr?ref=04210aec5ff8e369a8e8468652e02254b5ee2922", "patch": "@@ -0,0 +1,44 @@\n+error: pattern requires `..` due to inaccessible fields\n+  --> $DIR/doc-hidden-fields.rs:8:9\n+   |\n+LL |     let HiddenStruct { one, two, } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ignore the inaccessible and unused fields\n+   |\n+LL |     let HiddenStruct { one, two, .., } = HiddenStruct::default();\n+   |                                ++++\n+\n+error[E0027]: pattern does not mention field `two` and inaccessible fields\n+  --> $DIR/doc-hidden-fields.rs:11:9\n+   |\n+LL |     let HiddenStruct { one, } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^ missing field `two` and inaccessible fields\n+   |\n+help: include the missing field in the pattern and ignore the inaccessible fields\n+   |\n+LL |     let HiddenStruct { one, two, .. } = HiddenStruct::default();\n+   |                           ~~~~~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let HiddenStruct { one, .. } = HiddenStruct::default();\n+   |                           ~~~~~~\n+\n+error[E0027]: pattern does not mention field `two`\n+  --> $DIR/doc-hidden-fields.rs:14:9\n+   |\n+LL |     let HiddenStruct { one, hide } = HiddenStruct::default();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `two`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     let HiddenStruct { one, hide, two } = HiddenStruct::default();\n+   |                                 ~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     let HiddenStruct { one, hide, .. } = HiddenStruct::default();\n+   |                                 ~~~~~~\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "41cdb8fdedb088026e8f5b06f29f389ed26558be", "filename": "src/test/ui/pattern/usefulness/doc-hidden-non-exhaustive.stderr", "status": "modified", "additions": 20, "deletions": 62, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/04210aec5ff8e369a8e8468652e02254b5ee2922/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04210aec5ff8e369a8e8468652e02254b5ee2922/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdoc-hidden-non-exhaustive.stderr?ref=04210aec5ff8e369a8e8468652e02254b5ee2922", "patch": "@@ -1,73 +1,41 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:8:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ pattern `_` not covered\n-   |\n-note: `Foo` defined here\n-  --> $DIR/auxiliary/hidden.rs:1:1\n-   |\n-LL | / pub enum Foo {\n-LL | |     A,\n-LL | |     B,\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_^\n-   = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n-   |\n-LL ~         Foo::B => {}\n-LL +         _ => todo!()\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ pattern `_` not covered\n    |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `B` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:14:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ pattern `B` not covered\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ pattern `B` not covered\n    |\n note: `Foo` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum Foo {\n-LL | |     A,\n-LL | |     B,\n-   | |     ^ not covered\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_-\n-   = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n-   |\n-LL ~         Foo::C => {}\n-LL +         B => todo!()\n+LL |     B,\n+   |     - not covered\n    |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `B` and `_` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:20:11\n    |\n-LL |     match Foo::A {\n-   |           ^^^^^^ patterns `B` and `_` not covered\n+LL |     match HiddenEnum::A {\n+   |           ^^^^^^^^^^^^^ patterns `B` and `_` not covered\n    |\n note: `Foo` defined here\n   --> $DIR/auxiliary/hidden.rs:3:5\n    |\n-LL | / pub enum Foo {\n-LL | |     A,\n-LL | |     B,\n-   | |     ^ not covered\n-LL | |     #[doc(hidden)]\n-LL | |     C,\n-LL | | }\n-   | |_-\n-   = note: the matched value is of type `Foo`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n-   |\n-LL ~         Foo::A => {}\n-LL +         B | _ => todo!()\n+LL |     B,\n+   |     - not covered\n    |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `HiddenEnum`\n \n error[E0004]: non-exhaustive patterns: `Some(B)` and `Some(_)` not covered\n   --> $DIR/doc-hidden-non-exhaustive.rs:25:11\n@@ -78,21 +46,11 @@ LL |     match None {\n note: `Option<Foo>` defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n-LL | / pub enum Option<T> {\n-LL | |     /// No value.\n-LL | |     #[lang = \"None\"]\n-LL | |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-...  |\n-LL | |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n-   | |     ^^^^ not covered\n-LL | | }\n-   | |_-\n-   = note: the matched value is of type `Option<Foo>`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms\n-   |\n-LL ~         Some(Foo::A) => {}\n-LL +         Some(B) | Some(_) => todo!()\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ---- not covered\n    |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `Option<HiddenEnum>`\n \n error: aborting due to 4 previous errors\n "}]}