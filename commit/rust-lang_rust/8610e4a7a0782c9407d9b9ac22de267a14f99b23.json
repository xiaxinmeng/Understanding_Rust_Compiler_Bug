{"sha": "8610e4a7a0782c9407d9b9ac22de267a14f99b23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MTBlNGE3YTA3ODJjOTQwN2Q5YjlhYzIyZGUyNjdhMTRmOTliMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T06:01:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T06:01:43Z"}, "message": "auto merge of #13168 : jankobler/rust/verify-grammar-02, r=brson\n\nThis fixes some problems  with\r\n\r\n     make verify-grammar\r\n\r\nllnextgen still reports a lot of errors\r\n\r\nFYI: My build directory /my-test/build is different from the source directory /my-test/rust.\r\ncd  /my-test/build\r\n/my-test/rust/configure --prefix=/my-test/bin\r\nmake\r\nmake install\r\nmake verify-grammar", "tree": {"sha": "28f4551f0aa989ca9169744ce8bfb0891aa075f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f4551f0aa989ca9169744ce8bfb0891aa075f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8610e4a7a0782c9407d9b9ac22de267a14f99b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8610e4a7a0782c9407d9b9ac22de267a14f99b23", "html_url": "https://github.com/rust-lang/rust/commit/8610e4a7a0782c9407d9b9ac22de267a14f99b23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8610e4a7a0782c9407d9b9ac22de267a14f99b23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74128b15aba8fe3514c480c16254fdc2351007db", "url": "https://api.github.com/repos/rust-lang/rust/commits/74128b15aba8fe3514c480c16254fdc2351007db", "html_url": "https://github.com/rust-lang/rust/commit/74128b15aba8fe3514c480c16254fdc2351007db"}, {"sha": "fdfb9ebcf69857e27390508ab1d2268b607455ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb9ebcf69857e27390508ab1d2268b607455ca", "html_url": "https://github.com/rust-lang/rust/commit/fdfb9ebcf69857e27390508ab1d2268b607455ca"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "2f9c4afb9b78f3e659a3ffecac44b7d1062d4f2d", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8610e4a7a0782c9407d9b9ac22de267a14f99b23/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8610e4a7a0782c9407d9b9ac22de267a14f99b23/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=8610e4a7a0782c9407d9b9ac22de267a14f99b23", "patch": "@@ -232,7 +232,7 @@ ifeq ($(CFG_LLNEXTGEN),)\n else\n .PHONY: verify-grammar\n \n-doc/rust.g: rust.md $(S)src/etc/extract_grammar.py\n+doc/rust.g: $(D)/rust.md $(S)src/etc/extract_grammar.py\n \t@$(call E, extract_grammar: $@)\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/extract_grammar.py $< >$@\n "}, {"sha": "359a9c8052b7a973d5ac8c258534290fb14c82ad", "filename": "src/doc/rust.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8610e4a7a0782c9407d9b9ac22de267a14f99b23/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8610e4a7a0782c9407d9b9ac22de267a14f99b23/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=8610e4a7a0782c9407d9b9ac22de267a14f99b23", "patch": "@@ -153,7 +153,7 @@ Some productions are defined by exclusion of particular Unicode characters:\n ~~~~ {.notrust .ebnf .gram}\n comment : block_comment | line_comment ;\n block_comment : \"/*\" block_comment_body * '*' + '/' ;\n-block_comment_body : (block_comment | character) * ;\n+block_comment_body : [block_comment | character] * ;\n line_comment : \"//\" non_eol * ;\n ~~~~\n \n@@ -205,6 +205,7 @@ The keywords are the following strings:\n ~~~~ {.notrust .keyword}\n as\n break\n+crate\n do\n else enum extern\n false fn for\n@@ -496,16 +497,16 @@ All of the above extensions are expressions with values.\n ## Macros\n \n ~~~~ {.notrust .ebnf .gram}\n-expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')'\n-macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';'\n+expr_macro_rules : \"macro_rules\" '!' ident '(' macro_rule * ')' ;\n+macro_rule : '(' matcher * ')' \"=>\" '(' transcriber * ')' ';' ;\n matcher : '(' matcher * ')' | '[' matcher * ']'\n         | '{' matcher * '}' | '$' ident ':' ident\n         | '$' '(' matcher * ')' sep_token? [ '*' | '+' ]\n-        | non_special_token\n+        | non_special_token ;\n transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n             | '{' transcriber * '}' | '$' ident\n             | '$' '(' transcriber * ')' sep_token? [ '*' | '+' ]\n-            | non_special_token\n+            | non_special_token ;\n ~~~~\n \n User-defined syntax extensions are called \"macros\",\n@@ -802,7 +803,7 @@ use_decl : \"pub\" ? \"use\" ident [ '=' path\n \n path_glob : ident [ \"::\" path_glob ] ?\n           | '*'\n-          | '{' ident [ ',' ident ] * '}'\n+          | '{' ident [ ',' ident ] * '}' ;\n ~~~~\n \n A _use declaration_ creates one or more local name bindings synonymous\n@@ -1457,7 +1458,7 @@ impl Seq<bool> for u32 {\n ### External blocks\n \n ~~~~ {.notrust .ebnf .gram}\n-extern_block_item : \"extern\" '{' extern_block '} ;\n+extern_block_item : \"extern\" '{' extern_block '}' ;\n extern_block : [ foreign_fn ] * ;\n ~~~~\n \n@@ -1683,7 +1684,7 @@ import public items from their destination, not private items.\n \n ~~~~ {.notrust .ebnf .gram}\n attribute : '#' '[' attr_list ']' ;\n-attr_list : attr [ ',' attr_list ]*\n+attr_list : attr [ ',' attr_list ]* ;\n attr : ident [ '=' literal\n              | '(' attr_list ')' ] ? ;\n ~~~~\n@@ -2331,7 +2332,7 @@ struct_expr : expr_path '{' ident ':' expr\n                       [ \"..\" expr ] '}' |\n               expr_path '(' expr\n                       [ ',' expr ] * ')' |\n-              expr_path\n+              expr_path ;\n ~~~~\n \n There are several forms of structure expressions.\n@@ -2382,7 +2383,7 @@ Point3d {y: 0, z: 10, .. base};\n ~~~~ {.notrust .ebnf .gram}\n block_expr : '{' [ view_item ] *\n                  [ stmt ';' | item ] *\n-                 [ expr ] '}'\n+                 [ expr ] '}' ;\n ~~~~\n \n A _block expression_ is similar to a module in terms of the declarations that\n@@ -2409,7 +2410,7 @@ or dynamically dispatching if the left-hand-side expression is an indirect [obje\n ### Field expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-field_expr : expr '.' ident\n+field_expr : expr '.' ident ;\n ~~~~\n \n A _field expression_ consists of an expression followed by a single dot and an identifier,\n@@ -2431,9 +2432,9 @@ it is automatically dereferenced to make the field access possible.\n ### Vector expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-vec_expr : '[' \"mut\" ? vec_elems? ']'\n+vec_expr : '[' \"mut\" ? vec_elems? ']' ;\n \n-vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr]\n+vec_elems : [expr [',' expr]*] | [expr ',' \"..\" expr] ;\n ~~~~\n \n A [_vector_](#vector-types) _expression_ is written by enclosing zero or\n@@ -2453,7 +2454,7 @@ as a [literal](#literals) or a [static item](#static-items).\n ### Index expressions\n \n ~~~~ {.notrust .ebnf .gram}\n-idx_expr : expr '[' expr ']'\n+idx_expr : expr '[' expr ']' ;\n ~~~~\n \n [Vector](#vector-types)-typed expressions can be indexed by writing a\n@@ -2875,7 +2876,7 @@ then any `else` block is executed.\n ~~~~ {.notrust .ebnf .gram}\n match_expr : \"match\" expr '{' match_arm [ '|' match_arm ] * '}' ;\n \n-match_arm : match_pat '=>' [ expr \",\" | '{' block '}' ] ;\n+match_arm : match_pat \"=>\" [ expr \",\" | '{' block '}' ] ;\n \n match_pat : pat [ \"..\" pat ] ? [ \"if\" expr ] ;\n ~~~~"}]}