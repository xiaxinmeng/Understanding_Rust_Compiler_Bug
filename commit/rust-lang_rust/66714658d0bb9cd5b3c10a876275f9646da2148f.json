{"sha": "66714658d0bb9cd5b3c10a876275f9646da2148f", "node_id": "C_kwDOAAsO6NoAKDY2NzE0NjU4ZDBiYjljZDViM2MxMGE4NzYyNzVmOTY0NmRhMjE0OGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-27T21:33:04Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-29T14:19:49Z"}, "message": "Properly skip RPITITs from ModChild and give a name in AssocItem", "tree": {"sha": "cbc41dbc640824de8becaa61a79dd6b7db891203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc41dbc640824de8becaa61a79dd6b7db891203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66714658d0bb9cd5b3c10a876275f9646da2148f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQkSQsACgkQgTGiTgx5\n76+dyA/+IjldRI7Sv1gwqexLbGQPHWo8h+KXMT4WXWjZVGOWu/HJyFnVJ65D58YG\nsc1DXuaCb4eTrEy0SU+K5VCxr3j+9ofEO3o++Dryeqj8DkSJ1m6JWzdjBqjjUhOQ\nDS4kvlWhZ5tCCW2Y9FiylquBqIwHn8mq5SX1LBZEH9KT2K3/lH540MVDIN2qZ0Vf\n2+43NddK+7PbZrvFB6VxSgv3XotUwU2VNhx8NEs4klVlCoWGaxYHamqEJZCraXIJ\nXZ68a8+/vKUfdPyAgc10up3m6BvNH4LtadwKaOZwrsfbQkLAk7hoqRyeYDs86Ysa\nHPMBBbkARQMwMAMPqelebsh0nIHu9mpk2X+hGv+jiekOax4wvx/xxfH/eXcE9rST\n9IpTVsp7GZOEfvKMQLGXzGgeSHWHPxQgNDLMCKpFF3FrO5FsFpka/rghGcX4QNeh\nXea6kdXVSZbenvu8IlaE1csSWEgHSItCzH+IaJX0w+qlSdfk269vZ6FmcTMvbBKb\naj+U4L/BNSA4O+Ys/cOAcvvTNkIAQNsDmHtld91D6emnUz1YTbYo+nOAau7C53SD\nrX8PhpdxG3zqPzvv52u3UyCDmj5+jjClzt8Md2z9nKQn+jBbiJAE//sBdZQm9zFH\n9jBNdt3jYVJaGqYHzdlRjtOxDTUOW0a24gtbLdAndkYcu68wtAU=\n=QGyR\n-----END PGP SIGNATURE-----", "payload": "tree cbc41dbc640824de8becaa61a79dd6b7db891203\nparent 76b0cf812b70b458cbae480af75d788a29a43adc\nauthor Santiago Pastorino <spastorino@gmail.com> 1679952784 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1680099589 -0300\n\nProperly skip RPITITs from ModChild and give a name in AssocItem\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66714658d0bb9cd5b3c10a876275f9646da2148f", "html_url": "https://github.com/rust-lang/rust/commit/66714658d0bb9cd5b3c10a876275f9646da2148f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66714658d0bb9cd5b3c10a876275f9646da2148f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76b0cf812b70b458cbae480af75d788a29a43adc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b0cf812b70b458cbae480af75d788a29a43adc", "html_url": "https://github.com/rust-lang/rust/commit/76b0cf812b70b458cbae480af75d788a29a43adc"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "8ceb176491b6f95d37934f00f2cba89dd721f99f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66714658d0bb9cd5b3c10a876275f9646da2148f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66714658d0bb9cd5b3c10a876275f9646da2148f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=66714658d0bb9cd5b3c10a876275f9646da2148f", "patch": "@@ -404,12 +404,8 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            // We use this name when collecting `ModChild`s.\n-            // FIXME this could probably be removed with some refactoring to the name resolver.\n-            ImplTraitAssocTy => Some(kw::Empty),\n-\n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait => None,\n+            | ImplTrait | ImplTraitAssocTy => None,\n         }\n     }\n "}, {"sha": "43e5946f31354659c33ed1bfa7393be57418ed5b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66714658d0bb9cd5b3c10a876275f9646da2148f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66714658d0bb9cd5b3c10a876275f9646da2148f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=66714658d0bb9cd5b3c10a876275f9646da2148f", "patch": "@@ -1021,7 +1021,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             } else {\n                 // Iterate over all children.\n                 for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n-                    yield self.get_mod_child(child_index, sess);\n+                    if self.root.tables.opt_rpitit_info.get(self, child_index).is_none() {\n+                        yield self.get_mod_child(child_index, sess);\n+                    }\n                 }\n \n                 if let Some(reexports) = self.root.tables.module_reexports.get(self, id) {\n@@ -1067,8 +1069,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_associated_item(self, id: DefIndex, sess: &'a Session) -> ty::AssocItem {\n-        let name = self.item_name(id);\n-\n+        let name = if self.root.tables.opt_rpitit_info.get(self, id).is_some() {\n+            kw::Empty\n+        } else {\n+            self.item_name(id)\n+        };\n         let (kind, has_self) = match self.def_kind(id) {\n             DefKind::AssocConst => (ty::AssocKind::Const, false),\n             DefKind::AssocFn => (ty::AssocKind::Fn, self.get_fn_has_self_parameter(id, sess)),"}, {"sha": "f0cd43bcf92166b55587bf2aaaf1e35bb4080e7c", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.next.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66714658d0bb9cd5b3c10a876275f9646da2148f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66714658d0bb9cd5b3c10a876275f9646da2148f/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr?ref=66714658d0bb9cd5b3c10a876275f9646da2148f", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `Foo::{opaque#0}`\n   --> $DIR/doesnt-satisfy.rs:8:22\n    |\n LL |     fn bar() -> impl std::fmt::Display;\n-   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::`\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::{opaque#0}`\n \n error: aborting due to previous error\n "}]}