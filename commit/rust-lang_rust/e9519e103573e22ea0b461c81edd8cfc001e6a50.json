{"sha": "e9519e103573e22ea0b461c81edd8cfc001e6a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTE5ZTEwMzU3M2UyMmVhMGI0NjFjODFlZGQ4Y2ZjMDAxZTZhNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:09:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-11T15:09:50Z"}, "message": "Pull Expander up", "tree": {"sha": "a8f65b8ef027f296804939cab6f18ff3571c0a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f65b8ef027f296804939cab6f18ff3571c0a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9519e103573e22ea0b461c81edd8cfc001e6a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9519e103573e22ea0b461c81edd8cfc001e6a50", "html_url": "https://github.com/rust-lang/rust/commit/e9519e103573e22ea0b461c81edd8cfc001e6a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9519e103573e22ea0b461c81edd8cfc001e6a50/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b0870d12efd868202cfca45da651d21f2441031", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b0870d12efd868202cfca45da651d21f2441031", "html_url": "https://github.com/rust-lang/rust/commit/6b0870d12efd868202cfca45da651d21f2441031"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "48b797dd6fe6405a665835cedce28cec855e0962", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=e9519e103573e22ea0b461c81edd8cfc001e6a50", "patch": "@@ -24,9 +24,11 @@ use crate::{\n     src::HasSource,\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n+use ra_cfg::CfgOptions;\n \n pub(crate) struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n+    cfg_options: CfgOptions,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n     ast_id_map: Arc<AstIdMap>,\n@@ -43,7 +45,16 @@ impl Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db.upcast(), current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n-        Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module, recursive_limit: 0 }\n+        let cfg_options = db.crate_graph()[module.krate].cfg_options.clone();\n+        Expander {\n+            crate_def_map,\n+            cfg_options,\n+            current_file_id,\n+            hygiene,\n+            ast_id_map,\n+            module,\n+            recursive_limit: 0,\n+        }\n     }\n \n     pub(crate) fn enter_expand<T: ast::AstNode>(\n@@ -107,6 +118,10 @@ impl Expander {\n         Attrs::new(owner, &self.hygiene)\n     }\n \n+    pub(crate) fn check_cfg(&self, attrs: &Attrs) -> bool {\n+        attrs.is_cfg_enabled(&self.cfg_options)\n+    }\n+\n     fn parse_path(&mut self, path: ast::Path) -> Option<Path> {\n         Path::from_src(path, &self.hygiene)\n     }"}, {"sha": "6f56d3d7ad72d2ea6d748dc07d65206013de967d", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=e9519e103573e22ea0b461c81edd8cfc001e6a50", "patch": "@@ -29,8 +29,8 @@ use crate::{\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, HasModule, Intern,\n-    ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n+    StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n use super::{ExprSource, PatSource};\n@@ -298,18 +298,16 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::Return { expr }, syntax_ptr)\n             }\n             ast::Expr::RecordLit(e) => {\n-                let crate_graph = self.db.crate_graph();\n                 let path = e.path().and_then(|path| self.expander.parse_path(path));\n                 let mut field_ptrs = Vec::new();\n                 let record_lit = if let Some(nfl) = e.record_field_list() {\n                     let fields = nfl\n                         .fields()\n                         .inspect(|field| field_ptrs.push(AstPtr::new(field)))\n                         .filter_map(|field| {\n-                            let module_id = ContainerId::DefWithBodyId(self.def).module(self.db);\n                             let attrs = self.expander.parse_attrs(&field);\n \n-                            if !attrs.is_cfg_enabled(&crate_graph[module_id.krate].cfg_options) {\n+                            if !self.expander.check_cfg(&attrs) {\n                                 return None;\n                             }\n "}, {"sha": "dd0e679e84199b5fb86d603ab3b7aa77a82f749b", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9519e103573e22ea0b461c81edd8cfc001e6a50/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=e9519e103573e22ea0b461c81edd8cfc001e6a50", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, Expander, FunctionId, FunctionLoc, HasModule,\n-    ImplId, Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    ImplId, Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -218,10 +218,11 @@ impl ImplData {\n         let mut items = Vec::new();\n \n         if let Some(item_list) = src.value.item_list() {\n+            let mut expander = Expander::new(db, impl_loc.ast_id.file_id, module_id);\n             items.extend(collect_impl_items(db, item_list.impl_items(), src.file_id, id));\n             items.extend(collect_impl_items_in_macros(\n                 db,\n-                module_id,\n+                &mut expander,\n                 &src.with_value(item_list),\n                 id,\n             ));\n@@ -268,18 +269,17 @@ impl ConstData {\n \n fn collect_impl_items_in_macros(\n     db: &dyn DefDatabase,\n-    module_id: ModuleId,\n+    expander: &mut Expander,\n     impl_def: &InFile<ast::ItemList>,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n-    let mut expander = Expander::new(db, impl_def.file_id, module_id);\n     let mut res = Vec::new();\n \n     // We set a limit to protect against infinite recursion\n     let limit = 100;\n \n     for m in impl_def.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-        res.extend(collect_impl_items_in_macro(db, &mut expander, m, id, limit))\n+        res.extend(collect_impl_items_in_macro(db, expander, m, id, limit))\n     }\n \n     res"}]}