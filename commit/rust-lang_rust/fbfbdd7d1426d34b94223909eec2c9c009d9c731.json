{"sha": "fbfbdd7d1426d34b94223909eec2c9c009d9c731", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZmJkZDdkMTQyNmQzNGI5NDIyMzkwOWVlYzJjOWMwMDlkOWM3MzE=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-14T01:12:18Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:58Z"}, "message": "Correctly subst defaults with the in-scope substs", "tree": {"sha": "f7308ccf310d0be17a8dba43d03eb95b28abac29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7308ccf310d0be17a8dba43d03eb95b28abac29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbfbdd7d1426d34b94223909eec2c9c009d9c731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfbdd7d1426d34b94223909eec2c9c009d9c731", "html_url": "https://github.com/rust-lang/rust/commit/fbfbdd7d1426d34b94223909eec2c9c009d9c731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbfbdd7d1426d34b94223909eec2c9c009d9c731/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b75f215e8244ae742ac2e5b3cfd27ab4a761ed9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75f215e8244ae742ac2e5b3cfd27ab4a761ed9e", "html_url": "https://github.com/rust-lang/rust/commit/b75f215e8244ae742ac2e5b3cfd27ab4a761ed9e"}], "stats": {"total": 159, "additions": 98, "deletions": 61}, "files": [{"sha": "253f6379d155d760a8023743df24ac42d354956f", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -1047,12 +1047,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n+    // We have to take `&mut Substs` in order to provide the correct substitutions for defaults\n+    // along the way, for this reason we don't return them.\n     pub fn type_vars_for_defs(&self,\n                               span: Span,\n-                              // substs: Substs,\n-                              defs: &[ty::TypeParameterDef<'tcx>])\n-                              -> Vec<ty::Ty<'tcx>> {\n+                              space: subst::ParamSpace,\n+                              substs: &mut Substs<'tcx>,\n+                              defs: &[ty::TypeParameterDef<'tcx>]) {\n \n+        // This doesn't work ...\n         fn definition_span<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: ast::DefId) -> Span {\n             let parent = tcx.map.get_parent(def_id.node);\n             debug!(\"definition_span def_id={:?} parent={:?} node={:?} parent_node={:?}\",\n@@ -1069,24 +1072,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let mut substs = Substs::empty();\n         let mut vars = Vec::with_capacity(defs.len());\n \n         for def in defs.iter() {\n-            let default = def.default.map(|default| {\n+            let default = def.default.subst_spanned(self.tcx, substs, Some(span)).map(|default| {\n                 type_variable::Default {\n                     ty: default,\n                     origin_span: span,\n                     definition_span: definition_span(self.tcx, def.def_id)\n                 }\n             });\n-            //.subst(self.tcx, &substs)\n+\n             let ty_var = self.next_ty_var_with_default(default);\n-            substs.types.push(subst::ParamSpace::SelfSpace, ty_var);\n+            substs.types.push(space, ty_var);\n             vars.push(ty_var)\n         }\n-\n-        vars\n     }\n \n     /// Given a set of generics defined on a type or impl, returns a substitution mapping each\n@@ -1096,17 +1096,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                      generics: &ty::Generics<'tcx>)\n                                      -> subst::Substs<'tcx>\n     {\n-        let mut type_params = subst::VecPerParamSpace::empty();\n-\n-        for space in subst::ParamSpace::all().iter() {\n-            type_params.replace(*space,\n-                                self.type_vars_for_defs(span, generics.types.get_slice(*space)))\n-        }\n+        let type_params = subst::VecPerParamSpace::empty();\n \n         let region_params =\n             generics.regions.map(\n                 |d| self.next_region_var(EarlyBoundRegion(span, d.name)));\n-        subst::Substs::new(type_params, region_params)\n+\n+        let mut substs = subst::Substs::new(type_params, region_params);\n+\n+        for space in subst::ParamSpace::all().iter() {\n+            self.type_vars_for_defs(\n+                span,\n+                *space,\n+                &mut substs,\n+                generics.types.get_slice(*space));\n+        }\n+\n+        return substs;\n     }\n \n     /// Given a set of generics defined on a trait, returns a substitution mapping each output\n@@ -1124,13 +1130,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         assert!(generics.regions.len(subst::SelfSpace) == 0);\n         assert!(generics.regions.len(subst::FnSpace) == 0);\n \n-        let type_parameter_defs = generics.types.get_slice(subst::TypeSpace);\n-        let type_parameters = self.type_vars_for_defs(span, type_parameter_defs);\n+        let type_params = Vec::new();\n \n         let region_param_defs = generics.regions.get_slice(subst::TypeSpace);\n         let regions = self.region_vars_for_defs(span, region_param_defs);\n \n-        subst::Substs::new_trait(type_parameters, regions, self_ty)\n+        let mut substs = subst::Substs::new_trait(type_params, regions, self_ty);\n+\n+        let type_parameter_defs = generics.types.get_slice(subst::TypeSpace);\n+        self.type_vars_for_defs(span, subst::TypeSpace, &mut substs, type_parameter_defs);\n+\n+        return substs;\n     }\n \n     pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> ty::Region {"}, {"sha": "7d8a20c42e36ecf2800793c5baec0d9c30485574", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -154,7 +154,7 @@ impl<'tcx> Substs<'tcx> {\n }\n \n impl RegionSubsts {\n-    fn map<F>(self, op: F) -> RegionSubsts where\n+    pub fn map<F>(self, op: F) -> RegionSubsts where\n         F: FnOnce(VecPerParamSpace<ty::Region>) -> VecPerParamSpace<ty::Region>,\n     {\n         match self {"}, {"sha": "12e14dbcb92f88fc92ed97c204cb0ef58f7cb66a", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -84,9 +84,12 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n \n         // Create substitutions for the method's type parameters.\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n-        let (method_types, method_regions) =\n-            self.instantiate_method_substs(&pick, supplied_method_types);\n-        let all_substs = rcvr_substs.with_method(method_types, method_regions);\n+        let all_substs =\n+            self.instantiate_method_substs(\n+                &pick,\n+                supplied_method_types,\n+                rcvr_substs);\n+\n         debug!(\"all_substs={:?}\", all_substs);\n \n         // Create the final signature for the method, replacing late-bound regions.\n@@ -302,8 +305,9 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n \n     fn instantiate_method_substs(&mut self,\n                                  pick: &probe::Pick<'tcx>,\n-                                 supplied_method_types: Vec<Ty<'tcx>>)\n-                                 -> (Vec<Ty<'tcx>>, Vec<ty::Region>)\n+                                 supplied_method_types: Vec<Ty<'tcx>>,\n+                                 substs: subst::Substs<'tcx>)\n+                                 -> subst::Substs<'tcx>\n     {\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n@@ -313,21 +317,6 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         let method_types = method.generics.types.get_slice(subst::FnSpace);\n         let num_method_types = method_types.len();\n \n-        let method_types = {\n-            if num_supplied_types == 0 {\n-                self.fcx.infcx().type_vars_for_defs(self.span, method_types)\n-            } else if num_method_types == 0 {\n-                span_err!(self.tcx().sess, self.span, E0035,\n-                    \"does not take type parameters\");\n-                self.fcx.infcx().type_vars_for_defs(self.span, method_types)\n-            } else if num_supplied_types != num_method_types {\n-                span_err!(self.tcx().sess, self.span, E0036,\n-                    \"incorrect number of type parameters given for this method\");\n-                vec![self.tcx().types.err; num_method_types]\n-            } else {\n-                supplied_method_types\n-            }\n-        };\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method.\n@@ -339,7 +328,33 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                 pick.item.as_opt_method().unwrap()\n                     .generics.regions.get_slice(subst::FnSpace));\n \n-        (method_types, method_regions)\n+        let subst::Substs { types, regions } = substs;\n+        let regions = regions.map(|r| r.with_vec(subst::FnSpace, method_regions));\n+        let mut final_substs = subst::Substs { types: types, regions: regions };\n+\n+        if num_supplied_types == 0 {\n+            self.fcx.infcx().type_vars_for_defs(\n+                self.span,\n+                subst::FnSpace,\n+                &mut final_substs,\n+                method_types);\n+        } else if num_method_types == 0 {\n+            span_err!(self.tcx().sess, self.span, E0035,\n+                \"does not take type parameters\");\n+            self.fcx.infcx().type_vars_for_defs(\n+                self.span,\n+                subst::FnSpace,\n+                &mut final_substs,\n+                method_types);\n+        } else if num_supplied_types != num_method_types {\n+            span_err!(self.tcx().sess, self.span, E0036,\n+                \"incorrect number of type parameters given for this method\");\n+            final_substs.types.replace(subst::FnSpace, vec![self.tcx().types.err; num_method_types]);\n+        } else {\n+            final_substs.types.replace(subst::FnSpace, supplied_method_types);\n+        }\n+\n+        return final_substs;\n     }\n \n     fn unify_receivers(&mut self,"}, {"sha": "1bcb7a5ce031f2af0e3167b8fe5c6e3859a59dd9", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -169,22 +169,28 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     let type_parameter_defs = trait_def.generics.types.get_slice(subst::TypeSpace);\n     let expected_number_of_input_types = type_parameter_defs.len();\n-    let input_types = match opt_input_types {\n+\n+    assert_eq!(trait_def.generics.types.len(subst::FnSpace), 0);\n+    assert!(trait_def.generics.regions.is_empty());\n+\n+    // Construct a trait-reference `self_ty : Trait<input_tys>`\n+    let mut substs = subst::Substs::new_trait(Vec::new(), Vec::new(), self_ty);\n+\n+    match opt_input_types {\n         Some(input_types) => {\n             assert_eq!(expected_number_of_input_types, input_types.len());\n-            input_types\n+            substs.types.replace(subst::ParamSpace::TypeSpace, input_types);\n         }\n \n         None => {\n-            fcx.inh.infcx.type_vars_for_defs(span, type_parameter_defs)\n+            fcx.inh.infcx.type_vars_for_defs(\n+                span,\n+                subst::ParamSpace::TypeSpace,\n+                &mut substs,\n+                type_parameter_defs);\n         }\n-    };\n-\n-    assert_eq!(trait_def.generics.types.len(subst::FnSpace), 0);\n-    assert!(trait_def.generics.regions.is_empty());\n-\n-    // Construct a trait-reference `self_ty : Trait<input_tys>`\n-    let substs = subst::Substs::new_trait(input_types, Vec::new(), self_ty);\n+    }\n+    \n     let trait_ref = ty::TraitRef::new(trait_def_id, fcx.tcx().mk_substs(substs));\n \n     // Construct an obligation"}, {"sha": "44d769a799f1d6db17f8801078eadafcdd345fa3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -1200,16 +1200,12 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             return impl_ty;\n         }\n \n-        let placeholder;\n+        let mut placeholder;\n         let mut substs = substs;\n         if\n             !method.generics.types.is_empty_in(subst::FnSpace) ||\n             !method.generics.regions.is_empty_in(subst::FnSpace)\n         {\n-            let method_types =\n-                self.infcx().type_vars_for_defs(self.span,\n-                    method.generics.types.get_slice(subst::FnSpace));\n-\n             // In general, during probe we erase regions. See\n             // `impl_self_ty()` for an explanation.\n             let method_regions =\n@@ -1218,7 +1214,14 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 .map(|_| ty::ReStatic)\n                 .collect();\n \n-            placeholder = (*substs).clone().with_method(method_types, method_regions);\n+            placeholder = (*substs).clone().with_method(Vec::new(), method_regions);\n+\n+            self.infcx().type_vars_for_defs(\n+                self.span,\n+                subst::FnSpace,\n+                &mut placeholder,\n+                method.generics.types.get_slice(subst::FnSpace));\n+\n             substs = &placeholder;\n         }\n "}, {"sha": "fd99d1ddba9cd2623f6fb704729eee84c67a50c4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfbdd7d1426d34b94223909eec2c9c009d9c731/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fbfbdd7d1426d34b94223909eec2c9c009d9c731", "patch": "@@ -2616,8 +2616,10 @@ pub fn impl_self_ty<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     debug!(\"impl_self_ty: tps={:?} rps={:?} raw_ty={:?}\", tps, rps, raw_ty);\n \n     let rps = fcx.inh.infcx.region_vars_for_defs(span, rps);\n-    let tps = fcx.inh.infcx.type_vars_for_defs(span, tps);\n-    let substs = subst::Substs::new_type(tps, rps);\n+    let mut substs = subst::Substs::new(\n+        VecPerParamSpace::empty(),\n+        VecPerParamSpace::new(rps, Vec::new(), Vec::new()));\n+    fcx.inh.infcx.type_vars_for_defs(span, ParamSpace::TypeSpace, &mut substs, tps);\n     let substd_ty = fcx.instantiate_type_scheme(span, &substs, &raw_ty);\n \n     TypeAndSubsts { substs: substs, ty: substd_ty }\n@@ -4611,6 +4613,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n         }\n     }\n+\n     if let Some(self_ty) = opt_self_ty {\n         if type_defs.len(subst::SelfSpace) == 1 {\n             substs.types.push(subst::SelfSpace, self_ty);\n@@ -4623,7 +4626,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     // variables. If the user provided some types, we may still need\n     // to add defaults. If the user provided *too many* types, that's\n     // a problem.\n-    for &space in &ParamSpace::all() {\n+    for &space in &[subst::SelfSpace, subst::TypeSpace, subst::FnSpace] {\n         adjust_type_parameters(fcx, span, space, type_defs,\n                                require_type_space, &mut substs);\n         assert_eq!(substs.types.len(space), type_defs.len(space));\n@@ -4836,7 +4839,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // Nothing specified at all: supply inference variables for\n         // everything.\n         if provided_len == 0 && !(require_type_space && space == subst::TypeSpace) {\n-            substs.types.replace(space, fcx.infcx().type_vars_for_defs(span, &desired[..]));\n+            fcx.infcx().type_vars_for_defs(span, space, substs, &desired[..]);\n             return;\n         }\n "}]}