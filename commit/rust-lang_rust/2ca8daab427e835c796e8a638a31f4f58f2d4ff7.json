{"sha": "2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYThkYWFiNDI3ZTgzNWM3OTZlOGE2MzhhMzFmNGY1OGYyZDRmZjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T11:40:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-25T11:40:18Z"}, "message": "Merge pull request #1120 from bjorn3/lazy_jit\n\nLazy compilation in jit mode", "tree": {"sha": "b125a6129f5a2292d705806850609f8b4265e932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b125a6129f5a2292d705806850609f8b4265e932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5c+iCRBK7hj4Ov3rIwAAdHIIAKxy+77ZQCAy9/IX5aD9IP4E\nbbgZXTEShY2HwzEnlbVhp4/TDlcCrDsPE+aMklCFAcsn+mk/RTjfwZUAL8JjeVXJ\n5/3j7TxncqMK5EN5iapLAHFs1JC/jxXKxSYI/XeWdeQi0U+DLoYjvSIeIPDMHegs\nfU9uedtrbsTddWVbN8RueN52gwkeFj8X/1QaJ8pkjbjHTczIcwdRzep6KS5wZNGF\nHxnkeTfPPDDW2Uq34h5CAt3on44YpZl3qRdaS7ki9i4qhkYS0kkOyAozFn5DHjVU\nY0WvkQttlHKCWjFmrR9pT3JIvhuz0I0dDypifpKrJsKp/+hGf9e8JbXgO8QtoMk=\n=Fs6Q\n-----END PGP SIGNATURE-----\n", "payload": "tree b125a6129f5a2292d705806850609f8b4265e932\nparent 510616fc0705c94c389710ad5fd47bc97eb2bfa1\nparent 35f4a25c6b216c27c5d87a171620d3f2c5c0a18b\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1608896418 +0100\ncommitter GitHub <noreply@github.com> 1608896418 +0100\n\nMerge pull request #1120 from bjorn3/lazy_jit\n\nLazy compilation in jit mode"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "html_url": "https://github.com/rust-lang/rust/commit/2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "510616fc0705c94c389710ad5fd47bc97eb2bfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/510616fc0705c94c389710ad5fd47bc97eb2bfa1", "html_url": "https://github.com/rust-lang/rust/commit/510616fc0705c94c389710ad5fd47bc97eb2bfa1"}, {"sha": "35f4a25c6b216c27c5d87a171620d3f2c5c0a18b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35f4a25c6b216c27c5d87a171620d3f2c5c0a18b", "html_url": "https://github.com/rust-lang/rust/commit/35f4a25c6b216c27c5d87a171620d3f2c5c0a18b"}], "stats": {"total": 348, "additions": 260, "deletions": 88}, "files": [{"sha": "22d9e00923f006f1711a5d6791fd8ac78ad9d827", "filename": "Readme.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -68,7 +68,15 @@ $ $cg_clif_dir/build/cargo.sh jit\n or\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif --jit my_crate.rs\n+$ $cg_clif_dir/build/bin/cg_clif -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n+```\n+\n+There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n+first called. It currently does not work with multi-threaded programs. When a not yet compiled\n+function is called from another thread than the main thread, you will get an ICE.\n+\n+```bash\n+$ $cg_clif_dir/build/cargo.sh lazy-jit\n ```\n \n ### Shell\n@@ -77,7 +85,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - --jit\n+    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Cllvm-args=mode=jit -Cprefer-dynamic\n }\n \n function jit() {"}, {"sha": "015bbdfed4648ee106cb18d47f2e7217d7f30cd9", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -15,6 +15,8 @@ fn main() {\n     let stderr = ::std::io::stderr();\n     let mut stderr = stderr.lock();\n \n+    // FIXME support lazy jit when multi threading\n+    #[cfg(not(lazy_jit))]\n     std::thread::spawn(move || {\n         println!(\"Hello from another thread!\");\n     });"}, {"sha": "a3d6d303057b8050ed0d51c30c00ab0cbcf9d31c", "filename": "scripts/cargo.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -10,7 +10,9 @@ cmd=$1\n shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- --jit\n+cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit -Cprefer-dynamic\n+elif [[ \"$cmd\" = \"lazy-jit\" ]]; then\n+cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit-lazy -Cprefer-dynamic\n else\n cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n fi"}, {"sha": "15388926ec9ec62ddb5c707cc64c926317f75f09", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -4,7 +4,7 @@\n pushd $(dirname \"$0\")/../\n source build/config.sh\n popd\n-PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "a61774f479ec7f9cb7ee3533042806ff61b21c05", "filename": "scripts/tests.sh", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -15,7 +15,10 @@ function no_sysroot_tests() {\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n+\n+        echo \"[JIT-lazy] mini_core_hello_world\"\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] mini_core_hello_world (skipped)\"\n     fi\n@@ -37,7 +40,10 @@ function base_sysroot_tests() {\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] std_example\"\n-        $MY_RUSTC --jit example/std_example.rs --target \"$HOST_TRIPLE\"\n+        $MY_RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n+\n+        echo \"[JIT-lazy] std_example\"\n+        $MY_RUSTC -Cllvm-args=mode=jit-lazy -Cprefer-dynamic example/std_example.rs --cfg lazy_jit --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi"}, {"sha": "0ce34c904bdcc43d274263f46035c5302d5b5a78", "filename": "src/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -162,7 +162,7 @@ impl AddConstructor for ObjectProduct {\n }\n \n pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n-    let triple = crate::build_isa(sess, true).triple().clone();\n+    let triple = crate::build_isa(sess).triple().clone();\n \n     let binary_format = match triple.binary_format {\n         target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n@@ -193,7 +193,7 @@ pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object\n \n pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n     let mut builder = ObjectBuilder::new(\n-        crate::build_isa(sess, true),\n+        crate::build_isa(sess),\n         name + \".o\",\n         cranelift_module::default_libcall_names(),\n     )"}, {"sha": "58e45b4e9b972fbb1adbc6bbe112015654cc4f4c", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -44,9 +44,7 @@ fn main() {\n     let mut callbacks = CraneliftPassesCallbacks::default();\n     rustc_driver::install_ice_hook();\n     let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let mut use_jit = false;\n-\n-        let mut args = std::env::args_os()\n+        let args = std::env::args_os()\n             .enumerate()\n             .map(|(i, arg)| {\n                 arg.into_string().unwrap_or_else(|arg| {\n@@ -56,23 +54,10 @@ fn main() {\n                     )\n                 })\n             })\n-            .filter(|arg| {\n-                if arg == \"--jit\" {\n-                    use_jit = true;\n-                    false\n-                } else {\n-                    true\n-                }\n-            })\n             .collect::<Vec<_>>();\n-        if use_jit {\n-            args.push(\"-Cprefer-dynamic\".to_string());\n-        }\n         let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n         run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n-                config: rustc_codegen_cranelift::BackendConfig { use_jit },\n-            })\n+            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n         })));\n         run_compiler.run()\n     });"}, {"sha": "8ee4cd46c94e0d2f36591b39622912437b95c225", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -92,9 +92,7 @@ fn main() {\n         let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n         if use_clif {\n             run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n-                    config: rustc_codegen_cranelift::BackendConfig { use_jit: false },\n-                })\n+                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n             })));\n         }\n         run_compiler.run()"}, {"sha": "bfa2076d3d9695592589148afd5339cf9287cdb9", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -447,7 +447,8 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut impl Module, cx: &mut Constan\n             data_ctx.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n         }\n \n-        module.define_data(data_id, &data_ctx).unwrap();\n+        // FIXME don't duplicate definitions in lazy jit mode\n+        let _ = module.define_data(data_id, &data_ctx);\n         cx.done.insert(data_id);\n     }\n "}, {"sha": "49de927cdba059d0fd4c154bccae6737d46c916e", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -15,11 +15,11 @@ pub(crate) struct UnwindContext<'tcx> {\n }\n \n impl<'tcx> UnwindContext<'tcx> {\n-    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n+    pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n         let mut frame_table = FrameTable::default();\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n-            if isa.flags().is_pic() {\n+            if pic_eh_frame {\n                 cie.fde_address_encoding =\n                     gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n             }"}, {"sha": "16f9bfc99189f5cbe1e7f3d59b24f7cca8364b8c", "filename": "src/driver/aot.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -146,7 +146,12 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         }\n     }\n \n-    let mut cx = crate::CodegenCx::new(tcx, module, tcx.sess.opts.debuginfo != DebugInfo::None);\n+    let mut cx = crate::CodegenCx::new(\n+        tcx,\n+        module,\n+        tcx.sess.opts.debuginfo != DebugInfo::None,\n+        true,\n+    );\n     super::predefine_mono_items(&mut cx, &mono_items);\n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n@@ -254,7 +259,7 @@ pub(super) fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let mut allocator_module = new_module(tcx, \"allocator_shim\".to_string());\n-    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa());\n+    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n     let created_alloc_shim =\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n "}, {"sha": "9a42c675cc14498a1955983ce99e799a382ea63d", "filename": "src/driver/jit.rs", "status": "modified", "additions": 140, "deletions": 21, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -1,6 +1,7 @@\n //! The JIT driver uses [`cranelift_simplejit`] to JIT execute programs without writing any object\n //! files.\n \n+use std::cell::RefCell;\n use std::ffi::CString;\n use std::os::raw::{c_char, c_int};\n \n@@ -10,8 +11,13 @@ use rustc_middle::mir::mono::MonoItem;\n use cranelift_jit::{JITBuilder, JITModule};\n \n use crate::prelude::*;\n+use crate::{CodegenCx, CodegenMode};\n \n-pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n+thread_local! {\n+    pub static CURRENT_MODULE: RefCell<Option<JITModule>> = RefCell::new(None);\n+}\n+\n+pub(super) fn run_jit(tcx: TyCtxt<'_>, codegen_mode: CodegenMode) -> ! {\n     if !tcx.sess.opts.output_types.should_codegen() {\n         tcx.sess.fatal(\"JIT mode doesn't work with `cargo check`.\");\n     }\n@@ -37,9 +43,10 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     let imported_symbols = load_imported_symbols_for_jit(tcx);\n \n     let mut jit_builder = JITBuilder::with_isa(\n-        crate::build_isa(tcx.sess, false),\n+        crate::build_isa(tcx.sess),\n         cranelift_module::default_libcall_names(),\n     );\n+    jit_builder.hotswap(matches!(codegen_mode, CodegenMode::JitLazy));\n     jit_builder.symbols(imported_symbols);\n     let mut jit_module = JITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n@@ -67,34 +74,42 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = crate::CodegenCx::new(tcx, jit_module, false);\n+    let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n \n-    let (mut jit_module, global_asm, _debug, mut unwind_context) =\n-        super::time(tcx, \"codegen mono items\", || {\n-            super::predefine_mono_items(&mut cx, &mono_items);\n-            for (mono_item, (linkage, visibility)) in mono_items {\n-                let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                match mono_item {\n-                    MonoItem::Fn(inst) => {\n+    super::time(tcx, \"codegen mono items\", || {\n+        super::predefine_mono_items(&mut cx, &mono_items);\n+        for (mono_item, (linkage, visibility)) in mono_items {\n+            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+            match mono_item {\n+                MonoItem::Fn(inst) => match codegen_mode {\n+                    CodegenMode::Aot => unreachable!(),\n+                    CodegenMode::Jit => {\n                         cx.tcx.sess.time(\"codegen fn\", || {\n                             crate::base::codegen_fn(&mut cx, inst, linkage)\n                         });\n                     }\n-                    MonoItem::Static(def_id) => {\n-                        crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n-                    }\n-                    MonoItem::GlobalAsm(hir_id) => {\n-                        let item = cx.tcx.hir().expect_item(hir_id);\n-                        tcx.sess\n-                            .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n-                    }\n+                    CodegenMode::JitLazy => codegen_shim(&mut cx, inst),\n+                },\n+                MonoItem::Static(def_id) => {\n+                    crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n+                }\n+                MonoItem::GlobalAsm(hir_id) => {\n+                    let item = cx.tcx.hir().expect_item(hir_id);\n+                    tcx.sess\n+                        .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n                 }\n             }\n-            tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n-        });\n+        }\n+    });\n+\n+    let (mut jit_module, global_asm, _debug, mut unwind_context) =\n+        tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());\n+    jit_module.finalize_definitions();\n+\n     if !global_asm.is_empty() {\n         tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n+\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n@@ -106,7 +121,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n-    println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\");\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_main) };\n@@ -122,11 +137,50 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n     // useful as some dynamic linkers use it as a marker to jump over.\n     argv.push(std::ptr::null());\n \n+    CURRENT_MODULE\n+        .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n+\n     let ret = f(args.len() as c_int, argv.as_ptr());\n \n     std::process::exit(ret);\n }\n \n+#[no_mangle]\n+extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n+    rustc_middle::ty::tls::with(|tcx| {\n+        // lift is used to ensure the correct lifetime for instance.\n+        let instance = tcx.lift(unsafe { *instance_ptr }).unwrap();\n+\n+        CURRENT_MODULE.with(|jit_module| {\n+            let mut jit_module = jit_module.borrow_mut();\n+            let jit_module = jit_module.as_mut().unwrap();\n+            let mut cx = crate::CodegenCx::new(tcx, jit_module, false, false);\n+\n+            let (name, sig) = crate::abi::get_function_name_and_sig(\n+                tcx,\n+                cx.module.isa().triple(),\n+                instance,\n+                true,\n+            );\n+            let func_id = cx\n+                .module\n+                .declare_function(&name, Linkage::Export, &sig)\n+                .unwrap();\n+            cx.module.prepare_for_function_redefine(func_id).unwrap();\n+\n+            tcx.sess.time(\"codegen fn\", || {\n+                crate::base::codegen_fn(&mut cx, instance, Linkage::Export)\n+            });\n+\n+            let (jit_module, global_asm, _debug_context, unwind_context) = cx.finalize();\n+            assert!(global_asm.is_empty());\n+            jit_module.finalize_definitions();\n+            std::mem::forget(unsafe { unwind_context.register_jit(&jit_module) });\n+            jit_module.get_finalized_function(func_id)\n+        })\n+    })\n+}\n+\n fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     use rustc_middle::middle::dependency_format::Linkage;\n \n@@ -186,3 +240,68 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n \n     imported_symbols\n }\n+\n+pub(super) fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx, impl Module>, inst: Instance<'tcx>) {\n+    let tcx = cx.tcx;\n+\n+    let pointer_type = cx.module.target_config().pointer_type();\n+\n+    let (name, sig) =\n+        crate::abi::get_function_name_and_sig(tcx, cx.module.isa().triple(), inst, true);\n+    let func_id = cx\n+        .module\n+        .declare_function(&name, Linkage::Export, &sig)\n+        .unwrap();\n+\n+    let instance_ptr = Box::into_raw(Box::new(inst));\n+\n+    let jit_fn = cx\n+        .module\n+        .declare_function(\n+            \"__clif_jit_fn\",\n+            Linkage::Import,\n+            &Signature {\n+                call_conv: cx.module.target_config().default_call_conv,\n+                params: vec![AbiParam::new(pointer_type)],\n+                returns: vec![AbiParam::new(pointer_type)],\n+            },\n+        )\n+        .unwrap();\n+\n+    let mut trampoline = Function::with_name_signature(ExternalName::default(), sig.clone());\n+    let mut builder_ctx = FunctionBuilderContext::new();\n+    let mut trampoline_builder = FunctionBuilder::new(&mut trampoline, &mut builder_ctx);\n+\n+    let jit_fn = cx\n+        .module\n+        .declare_func_in_func(jit_fn, trampoline_builder.func);\n+    let sig_ref = trampoline_builder.func.import_signature(sig);\n+\n+    let entry_block = trampoline_builder.create_block();\n+    trampoline_builder.append_block_params_for_function_params(entry_block);\n+    let fn_args = trampoline_builder\n+        .func\n+        .dfg\n+        .block_params(entry_block)\n+        .to_vec();\n+\n+    trampoline_builder.switch_to_block(entry_block);\n+    let instance_ptr = trampoline_builder\n+        .ins()\n+        .iconst(pointer_type, instance_ptr as u64 as i64);\n+    let jitted_fn = trampoline_builder.ins().call(jit_fn, &[instance_ptr]);\n+    let jitted_fn = trampoline_builder.func.dfg.inst_results(jitted_fn)[0];\n+    let call_inst = trampoline_builder\n+        .ins()\n+        .call_indirect(sig_ref, jitted_fn, &fn_args);\n+    let ret_vals = trampoline_builder.func.dfg.inst_results(call_inst).to_vec();\n+    trampoline_builder.ins().return_(&ret_vals);\n+\n+    cx.module\n+        .define_function(\n+            func_id,\n+            &mut Context::for_function(trampoline),\n+            &mut cranelift_codegen::binemit::NullTrapSink {},\n+        )\n+        .unwrap();\n+}"}, {"sha": "9f4ea9a386551f88436198bf27214f7f6902f39a", "filename": "src/driver/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n+use crate::CodegenMode;\n \n mod aot;\n #[cfg(feature = \"jit\")]\n@@ -20,24 +21,25 @@ pub(crate) fn codegen_crate(\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    if config.use_jit {\n-        let is_executable = tcx\n-            .sess\n-            .crate_types()\n-            .contains(&rustc_session::config::CrateType::Executable);\n-        if !is_executable {\n-            tcx.sess.fatal(\"can't jit non-executable crate\");\n-        }\n+    match config.codegen_mode {\n+        CodegenMode::Aot => aot::run_aot(tcx, metadata, need_metadata_module),\n+        CodegenMode::Jit | CodegenMode::JitLazy => {\n+            let is_executable = tcx\n+                .sess\n+                .crate_types()\n+                .contains(&rustc_session::config::CrateType::Executable);\n+            if !is_executable {\n+                tcx.sess.fatal(\"can't jit non-executable crate\");\n+            }\n \n-        #[cfg(feature = \"jit\")]\n-        let _: ! = jit::run_jit(tcx);\n+            #[cfg(feature = \"jit\")]\n+            let _: ! = jit::run_jit(tcx, config.codegen_mode);\n \n-        #[cfg(not(feature = \"jit\"))]\n-        tcx.sess\n-            .fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n+            #[cfg(not(feature = \"jit\"))]\n+            tcx.sess\n+                .fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n+        }\n     }\n-\n-    aot::run_aot(tcx, metadata, need_metadata_module)\n }\n \n fn predefine_mono_items<'tcx>("}, {"sha": "6e4f3bf2898d827900ec449dafd08325ea77b886", "filename": "src/lib.rs", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -5,7 +5,8 @@\n     associated_type_bounds,\n     never_type,\n     try_blocks,\n-    hash_drain_filter\n+    hash_drain_filter,\n+    str_split_once\n )]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n@@ -34,6 +35,7 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n+use std::str::FromStr;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -141,8 +143,8 @@ struct CodegenCx<'tcx, M: Module> {\n }\n \n impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n-    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool) -> Self {\n-        let unwind_context = UnwindContext::new(tcx, module.isa());\n+    fn new(tcx: TyCtxt<'tcx>, module: M, debug_info: bool, pic_eh_frame: bool) -> Self {\n+        let unwind_context = UnwindContext::new(tcx, module.isa(), pic_eh_frame);\n         let debug_context = if debug_info {\n             Some(DebugContext::new(tcx, module.isa()))\n         } else {\n@@ -172,12 +174,55 @@ impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n }\n \n #[derive(Copy, Clone, Debug)]\n+pub enum CodegenMode {\n+    Aot,\n+    Jit,\n+    JitLazy,\n+}\n+\n+impl Default for CodegenMode {\n+    fn default() -> Self {\n+        CodegenMode::Aot\n+    }\n+}\n+\n+impl FromStr for CodegenMode {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"aot\" => Ok(CodegenMode::Aot),\n+            \"jit\" => Ok(CodegenMode::Jit),\n+            \"jit-lazy\" => Ok(CodegenMode::JitLazy),\n+            _ => Err(format!(\"Unknown codegen mode `{}`\", s)),\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Default)]\n pub struct BackendConfig {\n-    pub use_jit: bool,\n+    pub codegen_mode: CodegenMode,\n+}\n+\n+impl BackendConfig {\n+    fn from_opts(opts: &[String]) -> Result<Self, String> {\n+        let mut config = BackendConfig::default();\n+        for opt in opts {\n+            if let Some((name, value)) = opt.split_once('=') {\n+                match name {\n+                    \"mode\" => config.codegen_mode = value.parse()?,\n+                    _ => return Err(format!(\"Unknown option `{}`\", name)),\n+                }\n+            } else {\n+                return Err(format!(\"Invalid option `{}`\", opt));\n+            }\n+        }\n+        Ok(config)\n+    }\n }\n \n pub struct CraneliftCodegenBackend {\n-    pub config: BackendConfig,\n+    pub config: Option<BackendConfig>,\n }\n \n impl CodegenBackend for CraneliftCodegenBackend {\n@@ -204,7 +249,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, self.config);\n+        let config = if let Some(config) = self.config {\n+            config\n+        } else {\n+            BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n+                .unwrap_or_else(|err| tcx.sess.fatal(&err))\n+        };\n+        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, config);\n \n         rustc_symbol_mangling::test::report_symbol_names(tcx);\n \n@@ -250,17 +301,13 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     sess.target.llvm_target.parse().unwrap()\n }\n \n-fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n     use target_lexicon::BinaryFormat;\n \n     let target_triple = crate::target_triple(sess);\n \n     let mut flags_builder = settings::builder();\n-    if enable_pic {\n-        flags_builder.enable(\"is_pic\").unwrap();\n-    } else {\n-        flags_builder.set(\"is_pic\", \"false\").unwrap();\n-    }\n+    flags_builder.enable(\"is_pic\").unwrap();\n     flags_builder.set(\"enable_probestack\", \"false\").unwrap(); // __cranelift_probestack is not provided\n     flags_builder\n         .set(\n@@ -309,7 +356,5 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    Box::new(CraneliftCodegenBackend {\n-        config: BackendConfig { use_jit: false },\n-    })\n+    Box::new(CraneliftCodegenBackend { config: None })\n }"}, {"sha": "1326bac74b1da86a60161d7476c9b51ac2ee0db5", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -263,9 +263,7 @@ pub(crate) fn write_clif_file<'tcx>(\n             &mut clif,\n             &context.func,\n             &DisplayFunctionAnnotations {\n-                isa: Some(&*crate::build_isa(\n-                    tcx.sess, true, /* PIC doesn't matter here */\n-                )),\n+                isa: Some(&*crate::build_isa(tcx.sess)),\n                 value_ranges: value_ranges.as_ref(),\n             },\n         )"}, {"sha": "8f15586a9dc06b8c2444280a3d80509cefb36552", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca8daab427e835c796e8a638a31f4f58f2d4ff7/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=2ca8daab427e835c796e8a638a31f4f58f2d4ff7", "patch": "@@ -158,7 +158,8 @@ fn build_vtable<'tcx>(\n         )\n         .unwrap();\n \n-    fx.cx.module.define_data(data_id, &data_ctx).unwrap();\n+    // FIXME don't duplicate definitions in lazy jit mode\n+    let _ = fx.cx.module.define_data(data_id, &data_ctx);\n \n     data_id\n }"}]}