{"sha": "0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZWIxNGVhYmEwNDAyNWFhOGE0NjEyZTE5MzVmMDRmMmNhM2ZiNmI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-05-12T15:54:05Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-05-12T19:05:13Z"}, "message": "Improve derived implementations for enums with lots of fieldless variants\n\nA number of trait methods like PartialEq::eq or Hash::hash don't\nactually need a distinct arm for each variant, because the code within\nthe arm only depends on the number and types of the fields in the\nvariants. We can easily exploit this fact to create less and better\ncode for enums with multiple variants that have no fields at all, the\nextreme case being C-like enums.\n\nFor nickel.rs and its by now infamous 800 variant enum, this reduces\noptimized compile times by 25% and non-optimized compile times by 40%.\nAlso peak memory usage is down by almost 40% (310MB down to 190MB).\n\nTo be fair, most other crates don't benefit nearly as much, because\nthey don't have as huge enums. The crates in the Rust distribution that\nI measured saw basically no change in compile times (I only tried\noptimized builds) and only 1-2% reduction in peak memory usage.", "tree": {"sha": "410400c6c9e7f7dd6fb098f1fd0d53dfbbe5dd04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410400c6c9e7f7dd6fb098f1fd0d53dfbbe5dd04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "html_url": "https://github.com/rust-lang/rust/commit/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0495417416c8e0687bc6a997507c403627f6568", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0495417416c8e0687bc6a997507c403627f6568", "html_url": "https://github.com/rust-lang/rust/commit/c0495417416c8e0687bc6a997507c403627f6568"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "30fe0f2db8a1ce34dc5adeaad2d9218a1fcec207", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -39,6 +39,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n     //      Clone + Copy, and then there'd be no Clone impl at all if the user fills in something\n     //      that is Clone but not Copy. and until specialization we can't write both impls.\n     let bounds;\n+    let unify_fieldless_variants;\n     let substructure;\n     match *item {\n         Annotatable::Item(ref annitem) => {\n@@ -49,13 +50,15 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                         && attr::contains_name(&annitem.attrs, \"derive_Copy\") => {\n \n                     bounds = vec![Literal(path_std!(cx, core::marker::Copy))];\n+                    unify_fieldless_variants = true;\n                     substructure = combine_substructure(Box::new(|c, s, sub| {\n                         cs_clone(\"Clone\", c, s, sub, Mode::Shallow)\n                     }));\n                 }\n \n                 _ => {\n                     bounds = vec![];\n+                    unify_fieldless_variants = false;\n                     substructure = combine_substructure(Box::new(|c, s, sub| {\n                         cs_clone(\"Clone\", c, s, sub, Mode::Deep)\n                     }));\n@@ -84,6 +87,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                 ret_ty: Self_,\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: unify_fieldless_variants,\n                 combine_substructure: substructure,\n             }\n         ),"}, {"sha": "8bd12c393370de4940da298a1abd9752877bc4a9", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -62,6 +62,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n                 }))"}, {"sha": "6133adb8fc5d10fe1a5aa7dbdbabd8d0b47fc1ab", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -42,6 +42,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                 ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     cs_cmp(a, b, c)\n                 })),"}, {"sha": "e5890d7213bedfda21c74596d8211b1ab467c1b8", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -73,6 +73,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     $f(a, b, c)\n                 }))"}, {"sha": "cfc6dbe5cd03074101a804c8e8e8d4c502b5c0b1", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -38,6 +38,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                 ret_ty: Literal(path_local!(bool)),\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n                 }))\n@@ -62,6 +63,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         ret_ty: ret_ty,\n         attributes: attrs,\n         is_unsafe: false,\n+        unify_fieldless_variants: true,\n         combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n         }))"}, {"sha": "d86eae820a884c5764b32c9b60d5ea28342ec891", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -45,6 +45,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                 ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n                 attributes: Vec::new(),\n                 is_unsafe: false,\n+                unify_fieldless_variants: false,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     show_substructure(a, b, c)\n                 }))"}, {"sha": "04888d046ad2d6f652e18062e32fbef5542a6752", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -85,6 +85,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                 )),\n                 attributes: Vec::new(),\n                 is_unsafe: false,\n+                unify_fieldless_variants: false,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n                 })),"}, {"sha": "a6a4830fab7f80ed8cfa30f770330b31f646029c", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -42,6 +42,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                 ret_ty: Self_,\n                 attributes: attrs,\n                 is_unsafe: false,\n+                unify_fieldless_variants: false,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     default_substructure(a, b, c)\n                 }))"}, {"sha": "66672305829b9d3413d62fe899366dc29df28676", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -161,6 +161,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                 )),\n                 attributes: Vec::new(),\n                 is_unsafe: false,\n+                unify_fieldless_variants: false,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     encodable_substructure(a, b, c, krate)\n                 })),"}, {"sha": "45029c8eb943b0bb51244392421b388745cfde63", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -257,6 +257,9 @@ pub struct MethodDef<'a> {\n     // Is it an `unsafe fn`?\n     pub is_unsafe: bool,\n \n+    /// Can we combine fieldless variants for enums into a single match arm?\n+    pub unify_fieldless_variants: bool,\n+\n     pub combine_substructure: RefCell<CombineSubstructureFunc<'a>>,\n }\n \n@@ -1131,12 +1134,15 @@ impl<'a> MethodDef<'a> {\n         let catch_all_substructure = EnumNonMatchingCollapsed(\n             self_arg_idents, &variants[..], &vi_idents[..]);\n \n+        let first_fieldless = variants.iter().find(|v| v.node.data.fields().is_empty());\n+\n         // These arms are of the form:\n         // (Variant1, Variant1, ...) => Body1\n         // (Variant2, Variant2, ...) => Body2\n         // ...\n         // where each tuple has length = self_args.len()\n         let mut match_arms: Vec<ast::Arm> = variants.iter().enumerate()\n+            .filter(|&(_, v)| !(self.unify_fieldless_variants && v.node.data.fields().is_empty()))\n             .map(|(index, variant)| {\n                 let mk_self_pat = |cx: &mut ExtCtxt, self_arg_name: &str| {\n                     let (p, idents) = trait_.create_enum_variant_pattern(\n@@ -1219,6 +1225,28 @@ impl<'a> MethodDef<'a> {\n \n                 cx.arm(sp, vec![single_pat], arm_expr)\n             }).collect();\n+\n+        let default = match first_fieldless {\n+            Some(v) if self.unify_fieldless_variants => {\n+                // We need a default case that handles the fieldless variants.\n+                // The index and actual variant aren't meaningful in this case,\n+                // so just use whatever\n+                Some(self.call_substructure_method(\n+                    cx, trait_, type_ident, &self_args[..], nonself_args,\n+                    &EnumMatching(0, v, Vec::new())))\n+            }\n+            _ if variants.len() > 1 && self_args.len() > 1 => {\n+                // Since we know that all the arguments will match if we reach\n+                // the match expression we add the unreachable intrinsics as the\n+                // result of the catch all which should help llvm in optimizing it\n+                Some(deriving::call_intrinsic(cx, sp, \"unreachable\", vec![]))\n+            }\n+            _ => None\n+        };\n+        if let Some(arm) = default {\n+            match_arms.push(cx.arm(sp, vec![cx.pat_wild(sp)], arm));\n+        }\n+\n         // We will usually need the catch-all after matching the\n         // tuples `(VariantK, VariantK, ...)` for each VariantK of the\n         // enum.  But:\n@@ -1292,13 +1320,6 @@ impl<'a> MethodDef<'a> {\n                 cx, trait_, type_ident, &self_args[..], nonself_args,\n                 &catch_all_substructure);\n \n-            //Since we know that all the arguments will match if we reach the match expression we\n-            //add the unreachable intrinsics as the result of the catch all which should help llvm\n-            //in optimizing it\n-            match_arms.push(cx.arm(sp,\n-                                   vec![cx.pat_wild(sp)],\n-                                   deriving::call_intrinsic(cx, sp, \"unreachable\", vec![])));\n-\n             // Final wrinkle: the self_args are expressions that deref\n             // down to desired l-values, but we cannot actually deref\n             // them when they are fed as r-values into a tuple"}, {"sha": "fd449372cb37640288895cb2794e09efbc161bad", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -51,6 +51,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                 ret_ty: nil_ty(),\n                 attributes: vec![],\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                     hash_substructure(a, b, c)\n                 }))"}, {"sha": "0132014de0ab51a26c3e5fdd2805896ea154c185", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -58,6 +58,7 @@ fn expand(cx: &mut ExtCtxt,\n                 ret_ty: Literal(Path::new_local(\"isize\")),\n                 attributes: vec![],\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(box |cx, span, substr| {\n                     let zero = cx.expr_isize(span, 0);\n                     cs_fold(false,"}, {"sha": "6fa78913839b756d4342ad960ab2a84b0bfc6582", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=0eeb14eaba04025aa8a4612e1935f04f2ca3fb6b", "patch": "@@ -60,6 +60,7 @@ fn expand(cx: &mut ExtCtxt,\n                 ret_ty: Literal(Path::new_local(\"isize\")),\n                 attributes: vec![],\n                 is_unsafe: false,\n+                unify_fieldless_variants: true,\n                 combine_substructure: combine_substructure(Box::new(totalsum_substructure)),\n             },\n         ],"}]}