{"sha": "0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTdjMjRhNmM2ODFkMGM4NGQ0YjA3MzBmZWMxYTZiODA0MTVjNDg=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-10-08T19:54:33Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-10-09T11:23:50Z"}, "message": "Remove some dead code in windows-gnu std", "tree": {"sha": "d077037fbb383ab72bd056e8582b881d41a264f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d077037fbb383ab72bd056e8582b881d41a264f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "html_url": "https://github.com/rust-lang/rust/commit/0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c97c24a6c681d0c84d4b0730fec1a6b80415c48/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1dab244d798cda027a327fa43a17547d489511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1dab244d798cda027a327fa43a17547d489511d", "html_url": "https://github.com/rust-lang/rust/commit/f1dab244d798cda027a327fa43a17547d489511d"}], "stats": {"total": 64, "additions": 0, "deletions": 64}, "files": [{"sha": "657421e3fa4cc7982fb433036c37c8378a267a93", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c97c24a6c681d0c84d4b0730fec1a6b80415c48/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97c24a6c681d0c84d4b0730fec1a6b80415c48/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "patch": "@@ -47,7 +47,6 @@ pub type LPWCH = *mut WCHAR;\n pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n pub type LPWSADATA = *mut WSADATA;\n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n-pub type LPSTR = *mut CHAR;\n pub type LPWSTR = *mut WCHAR;\n pub type LPFILETIME = *mut FILETIME;\n pub type LPWSABUF = *mut WSABUF;\n@@ -876,16 +875,6 @@ extern \"system\" {\n     pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n     pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;\n     pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-    pub fn WideCharToMultiByte(\n-        CodePage: UINT,\n-        dwFlags: DWORD,\n-        lpWideCharStr: LPCWSTR,\n-        cchWideChar: c_int,\n-        lpMultiByteStr: LPSTR,\n-        cbMultiByte: c_int,\n-        lpDefaultChar: LPCSTR,\n-        lpUsedDefaultChar: LPBOOL,\n-    ) -> c_int;\n \n     pub fn closesocket(socket: SOCKET) -> c_int;\n     pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int;"}, {"sha": "8c19cc78b09cd2fe968dcb51ea81af694e9eeb73", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0c97c24a6c681d0c84d4b0730fec1a6b80415c48/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97c24a6c681d0c84d4b0730fec1a6b80415c48/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=0c97c24a6c681d0c84d4b0730fec1a6b80415c48", "patch": "@@ -4,7 +4,6 @@ use crate::ffi::{OsStr, OsString};\n use crate::io::ErrorKind;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n-use crate::ptr;\n use crate::time::Duration;\n \n pub use self::rand::hashmap_random_keys;\n@@ -206,58 +205,6 @@ fn os2path(s: &[u16]) -> PathBuf {\n     PathBuf::from(OsString::from_wide(s))\n }\n \n-#[allow(dead_code)] // Only used in backtrace::gnu::get_executable_filename()\n-fn wide_char_to_multi_byte(\n-    code_page: u32,\n-    flags: u32,\n-    s: &[u16],\n-    no_default_char: bool,\n-) -> crate::io::Result<Vec<i8>> {\n-    unsafe {\n-        let mut size = c::WideCharToMultiByte(\n-            code_page,\n-            flags,\n-            s.as_ptr(),\n-            s.len() as i32,\n-            ptr::null_mut(),\n-            0,\n-            ptr::null(),\n-            ptr::null_mut(),\n-        );\n-        if size == 0 {\n-            return Err(crate::io::Error::last_os_error());\n-        }\n-\n-        let mut buf = Vec::with_capacity(size as usize);\n-        buf.set_len(size as usize);\n-\n-        let mut used_default_char = c::FALSE;\n-        size = c::WideCharToMultiByte(\n-            code_page,\n-            flags,\n-            s.as_ptr(),\n-            s.len() as i32,\n-            buf.as_mut_ptr(),\n-            buf.len() as i32,\n-            ptr::null(),\n-            if no_default_char { &mut used_default_char } else { ptr::null_mut() },\n-        );\n-        if size == 0 {\n-            return Err(crate::io::Error::last_os_error());\n-        }\n-        if no_default_char && used_default_char == c::TRUE {\n-            return Err(crate::io::Error::new(\n-                crate::io::ErrorKind::InvalidData,\n-                \"string cannot be converted to requested code page\",\n-            ));\n-        }\n-\n-        buf.set_len(size as usize);\n-\n-        Ok(buf)\n-    }\n-}\n-\n pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n     match unrolled_find_u16s(0, v) {\n         // don't include the 0"}]}