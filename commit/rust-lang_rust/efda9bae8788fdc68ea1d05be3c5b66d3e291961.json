{"sha": "efda9bae8788fdc68ea1d05be3c5b66d3e291961", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGE5YmFlODc4OGZkYzY4ZWExZDA1YmUzYzViNjZkM2UyOTE5NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-16T00:03:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-16T00:03:10Z"}, "message": "Auto merge of #45404 - giannicic:defaultimpl2, r=nikomatsakis\n\n#37653 support `default impl` for specialization\n\nthis commit implements the second part of the `default impl` feature:\n\n>  - a `default impl` need not include all items from the trait\n>  - a `default impl` alone does not mean that a type implements the trait\n\nThe first point allows rustc to compile and run something like this:\n\n```\ntrait Foo {\n    fn foo_one(&self) -> &'static str;\n    fn foo_two(&self) -> &'static str;\n}\n\ndefault impl<T> Foo for T {\n    fn foo_one(&self) -> &'static str {\n        \"generic\"\n    }\n}\n\nstruct MyStruct;\n\nfn  main() {\n    assert!(MyStruct.foo_one() == \"generic\");\n}\n```\n\nbut it shows a proper error if trying to call `MyStruct.foo_two()`\n\nThe second point allows a `default impl` to be considered as not implementing the `Trait` if it doesn't implement all the trait items.\nThe tests provided (in the compile-fail section) should cover all the possible trait resolutions.\nLet me know if some tests is missed.\n\nSee [referenced ](https://github.com/rust-lang/rust/issues/37653) issue for further info\n\nr? @nikomatsakis", "tree": {"sha": "424f318bc35d961925a61831e2a30eba54fc2163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/424f318bc35d961925a61831e2a30eba54fc2163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efda9bae8788fdc68ea1d05be3c5b66d3e291961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efda9bae8788fdc68ea1d05be3c5b66d3e291961", "html_url": "https://github.com/rust-lang/rust/commit/efda9bae8788fdc68ea1d05be3c5b66d3e291961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efda9bae8788fdc68ea1d05be3c5b66d3e291961/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1670a532dd769763f1d6ad9e5d624ec31361a098", "url": "https://api.github.com/repos/rust-lang/rust/commits/1670a532dd769763f1d6ad9e5d624ec31361a098", "html_url": "https://github.com/rust-lang/rust/commit/1670a532dd769763f1d6ad9e5d624ec31361a098"}, {"sha": "220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "html_url": "https://github.com/rust-lang/rust/commit/220bb22e1b621ad5a10a44080e3e1872d99f3e9f"}], "stats": {"total": 820, "additions": 117, "deletions": 703}, "files": [{"sha": "1a2da83429af9ef160021d984ef5787cade8ae9f", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -595,15 +595,15 @@ impl<'a, I, T: 'a> FusedIterator for Cloned<I>\n {}\n \n #[doc(hidden)]\n-default unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n+unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n     where I: TrustedRandomAccess<Item=&'a T>, T: Clone\n {\n-    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n+    default unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n         self.it.get_unchecked(i).clone()\n     }\n \n     #[inline]\n-    fn may_have_side_effect() -> bool { true }\n+    default fn may_have_side_effect() -> bool { true }\n }\n \n #[doc(hidden)]"}, {"sha": "9622e7b98f1020f8121eef22cc859a1718a69d8f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -1395,7 +1395,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             .map(|node_item| !node_item.node.is_from_trait())\n             .unwrap_or(false);\n \n-        if !is_implemented {\n+        if !is_implemented && !tcx.impl_is_default(impl_id) {\n             if !trait_item.defaultness.has_value() {\n                 missing_items.push(trait_item);\n             } else if associated_type_overridden {"}, {"sha": "1c8d22e4666a6dd4b9884e2bbfe4878f9028838d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -1364,6 +1364,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node = tcx.hir.get(node_id);\n \n     let mut is_trait = None;\n+    let mut is_default_impl_trait = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n@@ -1373,8 +1374,13 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeItem(item) => {\n             match item.node {\n+                ItemImpl(_, _, defaultness, ref generics, ..) => {\n+                    if defaultness.is_default() {\n+                        is_default_impl_trait = tcx.impl_trait_ref(def_id);\n+                    }\n+                    generics\n+                }\n                 ItemFn(.., ref generics, _) |\n-                ItemImpl(_, _, _, ref generics, ..) |\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n@@ -1446,6 +1452,18 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         predicates.push(trait_ref.to_poly_trait_ref().to_predicate());\n     }\n \n+    // In default impls, we can assume that the self type implements\n+    // the trait. So in:\n+    //\n+    //     default impl Foo for Bar { .. }\n+    //\n+    // we add a default where clause `Foo: Bar`. We do a similar thing for traits\n+    // (see below). Recall that a default impl is not itself an impl, but rather a\n+    // set of defaults that can be incorporated into another impl.\n+    if let Some(trait_ref) = is_default_impl_trait {\n+        predicates.push(trait_ref.to_poly_trait_ref().to_predicate());\n+    }\n+\n     // Collect the region predicates that were declared inline as\n     // well. In the case of parameters declared on a fn or method, we\n     // have to be careful to only iterate over early-bound regions."}, {"sha": "ad55f44255b48eec4d3896f532ccd9c4893acf2e", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-projection.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-projection.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Make sure we can't project defaulted associated types\n-\n-trait Foo {\n-    type Assoc;\n-}\n-\n-default impl<T> Foo for T {\n-    type Assoc = ();\n-}\n-\n-impl Foo for u8 {\n-    type Assoc = String;\n-}\n-\n-fn generic<T>() -> <T as Foo>::Assoc {\n-    // `T` could be some downstream crate type that specializes (or,\n-    // for that matter, `u8`).\n-\n-    () //~ ERROR mismatched types\n-}\n-\n-fn monomorphic() -> () {\n-    // Even though we know that `()` is not specialized in a\n-    // downstream crate, typeck refuses to project here.\n-\n-    generic::<()>() //~ ERROR mismatched types\n-}\n-\n-fn main() {\n-    // No error here, we CAN project from `u8`, as there is no `default`\n-    // in that impl.\n-    let s: String = generic::<u8>();\n-    println!(\"{}\", s); // bad news if this all compiles\n-}"}, {"sha": "7353f7ac8c5c0c38bed49d14b7e70d24f7874660", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-default-types.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-default-types.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// It should not be possible to use the concrete value of a defaulted\n-// associated type in the impl defining it -- otherwise, what happens\n-// if it's overridden?\n-\n-#![feature(specialization)]\n-\n-trait Example {\n-    type Output;\n-    fn generate(self) -> Self::Output;\n-}\n-\n-default impl<T> Example for T {\n-    type Output = Box<T>;\n-    fn generate(self) -> Self::Output {\n-        Box::new(self) //~ ERROR mismatched types\n-    }\n-}\n-\n-impl Example for bool {\n-    type Output = bool;\n-    fn generate(self) -> bool { self }\n-}\n-\n-fn trouble<T>(t: T) -> Box<T> {\n-    Example::generate(t) //~ ERROR mismatched types\n-}\n-\n-fn weaponize() -> bool {\n-    let b: Box<bool> = trouble(true);\n-    *b\n-}\n-\n-fn main() {\n-    weaponize();\n-}"}, {"sha": "eacec2e40f073e44ff875e2b2d88fbda6424f92f", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "renamed", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -8,30 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that non-method associated functions can be specialized\n+// Tests that default impls do not have to supply all items but regular impls do.\n \n #![feature(specialization)]\n \n trait Foo {\n-    fn mk() -> Self;\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n }\n \n-default impl<T: Default> Foo for T {\n-    fn mk() -> T {\n-        T::default()\n-    }\n-}\n+struct MyStruct;\n \n-impl Foo for Vec<u8> {\n-    fn mk() -> Vec<u8> {\n-        vec![0]\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n     }\n }\n \n-fn main() {\n-    let v1: Vec<i32> = Foo::mk();\n-    let v2: Vec<u8> = Foo::mk();\n+impl Foo for MyStruct {}\n+//~^ ERROR not all trait items implemented, missing: `foo_two` [E0046]\n \n-    assert!(v1.len() == 0);\n-    assert!(v2.len() == 1);\n+fn main() {\n+    println!(\"{}\", MyStruct.foo_one());\n }", "previous_filename": "src/test/run-pass/specialization/defaultimpl/assoc-fns.rs"}, {"sha": "04ddf9ebb17717be054945af5c3f45b9fe962a79", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that:\n+// - default impls do not have to supply all items and\n+// - a default impl does not count as an impl (in this case, an incomplete default impl).\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+}\n+\n+struct MyStruct;\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+\n+fn main() {\n+    println!(\"{}\", MyStruct.foo_one());\n+    //~^ ERROR no method named `foo_one` found for type `MyStruct` in the current scope\n+}"}, {"sha": "445a59a373e56f1ee962c5f90dacc4ce37e0c461", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-wfcheck.rs", "status": "renamed", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,25 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(specialization)]\n-\n-// Regression test for ICE when combining specialized associated types and type\n-// aliases\n-\n-trait Id_ {\n-    type Out;\n-}\n+// Tests that a default impl still has to have a WF trait ref.\n \n-type Id<T> = <T as Id_>::Out;\n-\n-default impl<T> Id_ for T {\n-    type Out = T;\n-}\n+#![feature(specialization)]\n \n-fn test_proection() {\n-    let x: Id<bool> = panic!();\n-}\n+trait Foo<'a, T: Eq + 'a> { }\n \n-fn main() {\n+default impl<U> Foo<'static, U> for () {}\n+//~^ ERROR the trait bound `U: std::cmp::Eq` is not satisfied\n \n-}\n+fn main(){}", "previous_filename": "src/test/run-pass/specialization/defaultimpl/projection-alias.rs"}, {"sha": "71dd7c99009ea5a0920c0e35bf943e69c4316b55", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,82 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-pub trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-pub trait MyMarker {}\n-default impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}"}, {"sha": "9d0ea64fed428d6cefe7beb02a8ddd0ee5f1ad4d", "filename": "src/test/run-pass/specialization/defaultimpl/auxiliary/cross_crate_defaults.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fauxiliary%2Fcross_crate_defaults.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(specialization)]\n-\n-// First, test only use of explicit `default` items:\n-\n-pub trait Foo {\n-    fn foo(&self) -> bool;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> bool { false }\n-}\n-\n-impl Foo for i32 {}\n-\n-impl Foo for i64 {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-// Next, test mixture of explicit `default` and provided methods:\n-\n-pub trait Bar {\n-    fn bar(&self) -> i32 { 0 }\n-}\n-\n-impl<T> Bar for T {} // use the provided method\n-\n-impl Bar for i32 {\n-    fn bar(&self) -> i32 { 1 }\n-}\n-impl<'a> Bar for &'a str {}\n-\n-default impl<T> Bar for Vec<T> {\n-    fn bar(&self) -> i32 { 2 }\n-}\n-impl Bar for Vec<i32> {}\n-impl Bar for Vec<i64> {\n-    fn bar(&self) -> i32 { 3 }\n-}"}, {"sha": "7daecc842f3f9fd8a2140a3785db00b2f34cbffc", "filename": "src/test/run-pass/specialization/defaultimpl/basics-unsafe.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics-unsafe.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Tests a variety of basic specialization scenarios and method\n-// dispatch for them.\n-\n-unsafe trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default unsafe impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default unsafe impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default unsafe impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default unsafe impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default unsafe impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-default unsafe impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-default unsafe impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-default unsafe impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-struct NotClone;\n-\n-unsafe trait MyMarker {}\n-default unsafe impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-unsafe impl MyMarker for MarkedAndClone {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-}"}, {"sha": "594f1e4fcdfc26b834c9bea5f57cd3482653b6d0", "filename": "src/test/run-pass/specialization/defaultimpl/basics.rs", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fbasics.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,106 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Tests a variety of basic specialization scenarios and method\n-// dispatch for them.\n-\n-trait Foo {\n-    fn foo(&self) -> &'static str;\n-}\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone\"\n-    }\n-}\n-\n-default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n-    fn foo(&self) -> &'static str {\n-        \"generic pair\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for (T, T) {\n-    fn foo(&self) -> &'static str {\n-        \"generic uniform pair\"\n-    }\n-}\n-\n-default impl Foo for (u8, u32) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u32)\"\n-    }\n-}\n-\n-default impl Foo for (u8, u8) {\n-    fn foo(&self) -> &'static str {\n-        \"(u8, u8)\"\n-    }\n-}\n-\n-default impl<T: Clone> Foo for Vec<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic Vec\"\n-    }\n-}\n-\n-impl Foo for Vec<i32> {\n-    fn foo(&self) -> &'static str {\n-        \"Vec<i32>\"\n-    }\n-}\n-\n-impl Foo for String {\n-    fn foo(&self) -> &'static str {\n-        \"String\"\n-    }\n-}\n-\n-impl Foo for i32 {\n-    fn foo(&self) -> &'static str {\n-        \"i32\"\n-    }\n-}\n-\n-struct NotClone;\n-\n-trait MyMarker {}\n-default impl<T: Clone + MyMarker> Foo for T {\n-    fn foo(&self) -> &'static str {\n-        \"generic Clone + MyMarker\"\n-    }\n-}\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-impl MyMarker for MarkedAndClone {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-}"}, {"sha": "19e1af15bdd5627ce8bd0f7dc7f5e26e716d21f8", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-defaults.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-defaults.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cross_crate_defaults.rs\n-\n-#![feature(specialization)]\n-\n-extern crate cross_crate_defaults;\n-\n-use cross_crate_defaults::*;\n-\n-struct LocalDefault;\n-struct LocalOverride;\n-\n-impl Foo for LocalDefault {}\n-\n-impl Foo for LocalOverride {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-fn test_foo() {\n-    assert!(!0i8.foo());\n-    assert!(!0i32.foo());\n-    assert!(0i64.foo());\n-\n-    assert!(!LocalDefault.foo());\n-    assert!(LocalOverride.foo());\n-}\n-\n-fn test_bar() {\n-    assert!(0u8.bar() == 0);\n-    assert!(0i32.bar() == 1);\n-    assert!(\"hello\".bar() == 0);\n-    assert!(vec![()].bar() == 2);\n-    assert!(vec![0i32].bar() == 2);\n-    assert!(vec![0i64].bar() == 3);\n-}\n-\n-fn main() {\n-    test_foo();\n-    test_bar();\n-}"}, {"sha": "67cc694ae12c7087121c76cacbf2a749273923a5", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate-no-gate.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate-no-gate.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that specialization works even if only the upstream crate enables it\n-\n-// aux-build:cross_crate.rs\n-\n-extern crate cross_crate;\n-\n-use cross_crate::*;\n-\n-fn  main() {\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-}"}, {"sha": "f1ad105db8f7c2bcd49476daca8e1ac14dedfbf0", "filename": "src/test/run-pass/specialization/defaultimpl/cross-crate.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fcross-crate.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:cross_crate.rs\n-\n-#![feature(specialization)]\n-\n-extern crate cross_crate;\n-\n-use cross_crate::*;\n-\n-struct NotClone;\n-\n-#[derive(Clone)]\n-struct MarkedAndClone;\n-impl MyMarker for MarkedAndClone {}\n-\n-struct MyType<T>(T);\n-default impl<T> Foo for MyType<T> {\n-    fn foo(&self) -> &'static str {\n-        \"generic MyType\"\n-    }\n-}\n-\n-impl Foo for MyType<u8> {\n-    fn foo(&self) -> &'static str {\n-        \"MyType<u8>\"\n-    }\n-}\n-\n-struct MyOtherType;\n-impl Foo for MyOtherType {}\n-\n-fn  main() {\n-    assert!(NotClone.foo() == \"generic\");\n-    assert!(0u8.foo() == \"generic Clone\");\n-    assert!(vec![NotClone].foo() == \"generic\");\n-    assert!(vec![0u8].foo() == \"generic Vec\");\n-    assert!(vec![0i32].foo() == \"Vec<i32>\");\n-    assert!(0i32.foo() == \"i32\");\n-    assert!(String::new().foo() == \"String\");\n-    assert!(((), 0).foo() == \"generic pair\");\n-    assert!(((), ()).foo() == \"generic uniform pair\");\n-    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n-    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n-    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n-\n-    assert!(MyType(()).foo() == \"generic MyType\");\n-    assert!(MyType(0u8).foo() == \"MyType<u8>\");\n-    assert!(MyOtherType.foo() == \"generic\");\n-}"}, {"sha": "4ac9afc1c897fa27e4fcfe357475985563a4f588", "filename": "src/test/run-pass/specialization/defaultimpl/default-methods.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a532dd769763f1d6ad9e5d624ec31361a098/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fdefault-methods.rs?ref=1670a532dd769763f1d6ad9e5d624ec31361a098", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-\n-// Test that default methods are cascaded correctly\n-\n-// First, test only use of explicit `default` items:\n-\n-trait Foo {\n-    fn foo(&self) -> bool;\n-}\n-\n-// Specialization tree for Foo:\n-//\n-//        T\n-//       / \\\n-//    i32   i64\n-\n-default impl<T> Foo for T {\n-    fn foo(&self) -> bool { false }\n-}\n-\n-impl Foo for i32 {}\n-\n-impl Foo for i64 {\n-    fn foo(&self) -> bool { true }\n-}\n-\n-fn test_foo() {\n-    assert!(!0i8.foo());\n-    assert!(!0i32.foo());\n-    assert!(0i64.foo());\n-}\n-\n-// Next, test mixture of explicit `default` and provided methods:\n-\n-trait Bar {\n-    fn bar(&self) -> i32 { 0 }\n-}\n-\n-// Specialization tree for Bar.\n-// Uses of $ designate that method is provided\n-//\n-//           $Bar   (the trait)\n-//             |\n-//             T\n-//            /|\\\n-//           / | \\\n-//          /  |  \\\n-//         /   |   \\\n-//        /    |    \\\n-//       /     |     \\\n-//     $i32   &str  $Vec<T>\n-//                    /\\\n-//                   /  \\\n-//            Vec<i32>  $Vec<i64>\n-\n-// use the provided method\n-impl<T> Bar for T {}\n-\n-impl Bar for i32 {\n-    fn bar(&self) -> i32 { 1 }\n-}\n-impl<'a> Bar for &'a str {}\n-\n-default impl<T> Bar for Vec<T> {\n-    fn bar(&self) -> i32 { 2 }\n-}\n-impl Bar for Vec<i32> {}\n-impl Bar for Vec<i64> {\n-    fn bar(&self) -> i32 { 3 }\n-}\n-\n-fn test_bar() {\n-    assert!(0u8.bar() == 0);\n-    assert!(0i32.bar() == 1);\n-    assert!(\"hello\".bar() == 0);\n-    assert!(vec![()].bar() == 2);\n-    assert!(vec![0i32].bar() == 2);\n-    assert!(vec![0i64].bar() == 3);\n-}\n-\n-fn main() {\n-    test_foo();\n-    test_bar();\n-}"}, {"sha": "fc7312020053ebd9714beab7a8edbb3c26650ea8", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efda9bae8788fdc68ea1d05be3c5b66d3e291961/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=efda9bae8788fdc68ea1d05be3c5b66d3e291961", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that we can combine a default impl that supplies one method with a\n+// full impl that supplies the other, and they can invoke one another.\n+\n+#![feature(specialization)]\n+\n+trait Foo {\n+    fn foo_one(&self) -> &'static str;\n+    fn foo_two(&self) -> &'static str;\n+    fn foo_three(&self) -> &'static str;\n+}\n+\n+struct MyStruct;\n+\n+default impl<T> Foo for T {\n+    fn foo_one(&self) -> &'static str {\n+        self.foo_three()\n+    }\n+}\n+\n+impl Foo for MyStruct {\n+    fn foo_two(&self) -> &'static str {\n+        self.foo_one()\n+    }\n+\n+    fn foo_three(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+fn main() {\n+    assert!(MyStruct.foo_two() == \"generic\");\n+}"}]}