{"sha": "afce8e442639fa9ed954b3659a2d1eccb7d80113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmY2U4ZTQ0MjYzOWZhOWVkOTU0YjM2NTlhMmQxZWNjYjdkODAxMTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-29T19:49:31Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T21:45:43Z"}, "message": "Use the new Resolver API for goto def", "tree": {"sha": "38015aa82986dc69f5b60cfb21fe6062a37d8006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38015aa82986dc69f5b60cfb21fe6062a37d8006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afce8e442639fa9ed954b3659a2d1eccb7d80113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afce8e442639fa9ed954b3659a2d1eccb7d80113", "html_url": "https://github.com/rust-lang/rust/commit/afce8e442639fa9ed954b3659a2d1eccb7d80113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afce8e442639fa9ed954b3659a2d1eccb7d80113/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e", "html_url": "https://github.com/rust-lang/rust/commit/33ff7b56ff353410e7bcb7aed27004d4f0a57d8e"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "e78ba889e2f041ea46e7dcfd410adfd40d87d791", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -69,6 +69,10 @@ impl Body {\n     pub fn owner(&self) -> Function {\n         self.owner\n     }\n+\n+    pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {\n+        db.body_syntax_mapping(self.owner)\n+    }\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?"}, {"sha": "9202e367126edc5785e1b31a610b420bc892a941", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -58,6 +58,10 @@ impl ExprScopes {\n         scopes\n     }\n \n+    pub fn body(&self) -> Arc<Body> {\n+        self.body.clone()\n+    }\n+\n     pub fn entries(&self, scope: ScopeId) -> &[ScopeEntry] {\n         &self.scopes[scope].entries\n     }\n@@ -220,7 +224,7 @@ impl ScopesWithSyntaxMapping {\n             .collect()\n     }\n \n-    fn scope_for(&self, node: &SyntaxNode) -> Option<ScopeId> {\n+    pub fn scope_for(&self, node: &SyntaxNode) -> Option<ScopeId> {\n         node.ancestors()\n             .map(SyntaxNodePtr::new)\n             .filter_map(|ptr| self.syntax_mapping.syntax_expr(ptr))"}, {"sha": "871f7d8f72ba7e6dbe26328e105ff0b2d5814dae", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     name::{Name, KnownName},\n     nameres::{PerNs, ItemMap},\n     generics::GenericParams,\n-    expr::{scope::{ExprScopes, ScopeId}, PatId},\n+    expr::{scope::{ExprScopes, ScopeId}, PatId, Body},\n     impl_block::ImplBlock,\n     path::Path,\n };\n@@ -106,15 +106,21 @@ impl Resolver {\n     }\n \n     fn module(&self) -> Option<(&ItemMap, Module)> {\n-        for scope in self.scopes.iter().rev() {\n-            match scope {\n-                Scope::ModuleScope(m) => {\n-                    return Some((&m.item_map, m.module.clone()));\n-                }\n-                _ => {}\n-            }\n-        }\n-        None\n+        self.scopes.iter().rev().find_map(|scope| match scope {\n+            Scope::ModuleScope(m) => Some((&*m.item_map, m.module.clone())),\n+\n+            Scope::ModuleScopeRef(m) => Some((m.item_map, m.module.clone())),\n+\n+            _ => None,\n+        })\n+    }\n+\n+    /// The body from which any `LocalBinding` resolutions in this resolver come.\n+    pub fn body(&self) -> Option<Arc<Body>> {\n+        self.scopes.iter().rev().find_map(|scope| match scope {\n+            Scope::ExprScope(expr_scope) => Some(expr_scope.expr_scopes.body()),\n+            _ => None,\n+        })\n     }\n }\n "}, {"sha": "621215bfb7b29d2ded5281f844afd518f26d1a6d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -229,3 +229,31 @@ pub fn resolver_for_position(db: &impl HirDatabase, position: FilePosition) -> R\n         })\n         .unwrap_or_default()\n }\n+\n+pub fn resolver_for_node(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Resolver<'static> {\n+    node.ancestors()\n+        .find_map(|node| {\n+            if ast::Expr::cast(node).is_some() || ast::Block::cast(node).is_some() {\n+                if let Some(func) = function_from_child_node(db, file_id, node) {\n+                    let scopes = func.scopes(db);\n+                    let scope = scopes.scope_for(&node);\n+                    Some(expr::resolver_for_scope(func.body(db), db, scope))\n+                } else {\n+                    // TODO const/static/array length\n+                    None\n+                }\n+            } else if let Some(module) = ast::Module::cast(node) {\n+                Some(module_from_declaration(db, file_id, module)?.resolver(db))\n+            } else if let Some(_) = ast::SourceFile::cast(node) {\n+                Some(module_from_source(db, file_id.into(), None)?.resolver(db))\n+            } else {\n+                // TODO add missing cases\n+                None\n+            }\n+        })\n+        .unwrap_or_default()\n+}"}, {"sha": "f7dd28c7c66a0ca230553acf32dd2651ed922fb9", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -48,14 +48,7 @@ pub(crate) fn reference_definition(\n     if let Some(function) =\n         hir::source_binder::function_from_child_node(db, file_id, name_ref.syntax())\n     {\n-        let scope = function.scopes(db);\n-        // First try to resolve the symbol locally\n-        if let Some(entry) = scope.resolve_local_name(name_ref) {\n-            let nav = NavigationTarget::from_scope_entry(file_id, &entry);\n-            return Exact(nav);\n-        };\n-\n-        // Next check if it is a method\n+        // Check if it is a method\n         if let Some(method_call) = name_ref\n             .syntax()\n             .parent()\n@@ -86,19 +79,37 @@ pub(crate) fn reference_definition(\n             };\n         }\n     }\n-    // Then try module name resolution\n-    if let Some(module) = hir::source_binder::module_from_child_node(db, file_id, name_ref.syntax())\n+    // Try name resolution\n+    let resolver = hir::source_binder::resolver_for_node(db, file_id, name_ref.syntax());\n+    if let Some(path) = name_ref\n+        .syntax()\n+        .ancestors()\n+        .find_map(ast::Path::cast)\n+        .and_then(hir::Path::from_ast)\n     {\n-        if let Some(path) = name_ref\n-            .syntax()\n-            .ancestors()\n-            .find_map(ast::Path::cast)\n-            .and_then(hir::Path::from_ast)\n-        {\n-            let resolved = module.resolve_path(db, &path);\n-            if let Some(def_id) = resolved.take_types().or(resolved.take_values()) {\n-                return Exact(NavigationTarget::from_def(db, def_id));\n+        let resolved = resolver.resolve_path(db, &path);\n+        match resolved.clone().take_types().or(resolved.take_values()) {\n+            Some(Resolution::Def { def }) => return Exact(NavigationTarget::from_def(db, def)),\n+            Some(Resolution::LocalBinding { pat }) => {\n+                let body = resolver.body().expect(\"no body for local binding\");\n+                let syntax_mapping = body.syntax_mapping(db);\n+                let ptr = syntax_mapping\n+                    .pat_syntax(pat)\n+                    .expect(\"pattern not found in syntax mapping\");\n+                let name = path\n+                    .as_ident()\n+                    .cloned()\n+                    .expect(\"local binding from a multi-segment path\");\n+                let nav = NavigationTarget::from_scope_entry(file_id, name, ptr);\n+                return Exact(nav);\n+            }\n+            Some(Resolution::GenericParam { .. }) => {\n+                // TODO go to the generic param def\n+            }\n+            Some(Resolution::SelfType(_impl_block)) => {\n+                // TODO go to the implemented type\n             }\n+            None => {}\n         }\n     }\n     // If that fails try the index based approach."}, {"sha": "617908aedfef9a763410e2c0c1b759ed2380c87b", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afce8e442639fa9ed954b3659a2d1eccb7d80113/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=afce8e442639fa9ed954b3659a2d1eccb7d80113", "patch": "@@ -1,9 +1,9 @@\n use ra_db::FileId;\n use ra_syntax::{\n-    SyntaxNode, AstNode, SmolStr, TextRange, ast,\n+    SyntaxNode, SyntaxNodePtr, AstNode, SmolStr, TextRange, ast,\n     SyntaxKind::{self, NAME},\n };\n-use hir::{ModuleSource, FieldSource};\n+use hir::{ModuleSource, FieldSource, Name};\n \n use crate::{FileSymbol, db::RootDatabase};\n \n@@ -58,12 +58,13 @@ impl NavigationTarget {\n \n     pub(crate) fn from_scope_entry(\n         file_id: FileId,\n-        entry: &hir::ScopeEntryWithSyntax,\n+        name: Name,\n+        ptr: SyntaxNodePtr,\n     ) -> NavigationTarget {\n         NavigationTarget {\n             file_id,\n-            name: entry.name().to_string().into(),\n-            full_range: entry.ptr().range(),\n+            name: name.to_string().into(),\n+            full_range: ptr.range(),\n             focus_range: None,\n             kind: NAME,\n         }"}]}