{"sha": "3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNDMyNzMwZGZjN2RmODNmZWQyZDc4YTk3ZDNkMGNmOTdmZmMyODI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-19T04:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-19T04:54:04Z"}, "message": "Merge #8467\n\n8467: Adds impl Deref assist r=jhgg a=jhgg\n\nThis PR adds a new `generate_deref` assist that automatically generates a deref impl for a given struct field.\r\n\r\nCheck out this gif:\r\n\r\n![2021-04-11_00-33-33](https://user-images.githubusercontent.com/5489149/114296006-b38e1000-9a5d-11eb-9112-807c01b8fd0a.gif)\r\n\r\n--\r\n\r\nI have a few Q's:\r\n - [x] Should I write more tests, if so, what precisely should I test for?\r\n - [x] I have an inline question on line 65, can someone provide guidance? :) \r\n - [x] I can implement this for `ast::TupleField` too. But should it be a separate assist fn, or should I try and jam both into the `generate_deref`?\r\n - [x] I want to follow this up with an assist on `impl $0Deref for T {` which would automatically generate a `DerefMut` impl that mirrors the Deref as well, however, I could probably use some pointers on how to do that, since I'll have to reach into the ast of `fn deref` to grab the field that it's referencing for the `DerefMut` impl. \n\nCo-authored-by: jake <jh@discordapp.com>", "tree": {"sha": "6b284cf75eccc23a2dcaf398767bb939ea5f077e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b284cf75eccc23a2dcaf398767bb939ea5f077e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfQzsCRBK7hj4Ov3rIwAASikIAB9XfLM83Tig4vEhXElLL8x7\n7TYTpDSjSLSUXtRJfoRdMNYmmgDYfgQgZRqG+0c1U9TXSrX4glQ2D0oHOQJamo9f\nRRzkdLr0PTFd6kusy3DNU7u1yAlw38FeqsQgtxIu3AFlUxEDbUpc31jWeosyuLQX\nYCUhsABUgZAn2dUj3LeWiS3ThRGFbSRYKAsZkWvLH8tRsAnnxeHR40nHJz3ZwvFu\nyoyGqsOqqxE3A8/KaqVY3brQak0VbaCDM53OHK9SttZepaUx6djTbfkCSz8zXk0c\n7mqWEibnqit5Dg40GrmoMnCp0IAzC7Eo0JLS8xvFtspaNH+7B2DrTdWMm6y+y5U=\n=MVeW\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b284cf75eccc23a2dcaf398767bb939ea5f077e\nparent 7570212a544b8e973a7d57be3657aae6465028a7\nparent 3d1ca786f6355041de9205cadd0a235581dd5af3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618808044 +0000\ncommitter GitHub <noreply@github.com> 1618808044 +0000\n\nMerge #8467\n\n8467: Adds impl Deref assist r=jhgg a=jhgg\n\nThis PR adds a new `generate_deref` assist that automatically generates a deref impl for a given struct field.\r\n\r\nCheck out this gif:\r\n\r\n![2021-04-11_00-33-33](https://user-images.githubusercontent.com/5489149/114296006-b38e1000-9a5d-11eb-9112-807c01b8fd0a.gif)\r\n\r\n--\r\n\r\nI have a few Q's:\r\n - [x] Should I write more tests, if so, what precisely should I test for?\r\n - [x] I have an inline question on line 65, can someone provide guidance? :) \r\n - [x] I can implement this for `ast::TupleField` too. But should it be a separate assist fn, or should I try and jam both into the `generate_deref`?\r\n - [x] I want to follow this up with an assist on `impl $0Deref for T {` which would automatically generate a `DerefMut` impl that mirrors the Deref as well, however, I could probably use some pointers on how to do that, since I'll have to reach into the ast of `fn deref` to grab the field that it's referencing for the `DerefMut` impl. \n\nCo-authored-by: jake <jh@discordapp.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "html_url": "https://github.com/rust-lang/rust/commit/3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7570212a544b8e973a7d57be3657aae6465028a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7570212a544b8e973a7d57be3657aae6465028a7", "html_url": "https://github.com/rust-lang/rust/commit/7570212a544b8e973a7d57be3657aae6465028a7"}, {"sha": "3d1ca786f6355041de9205cadd0a235581dd5af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1ca786f6355041de9205cadd0a235581dd5af3", "html_url": "https://github.com/rust-lang/rust/commit/3d1ca786f6355041de9205cadd0a235581dd5af3"}], "stats": {"total": 269, "additions": 269, "deletions": 0}, "files": [{"sha": "4998ff7a421feff1a837985d4b76cad7d31d74ae", "filename": "crates/ide_assists/src/handlers/generate_deref.rs", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -0,0 +1,227 @@\n+use std::fmt::Display;\n+\n+use ide_db::{helpers::FamousDefs, RootDatabase};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, SyntaxNode,\n+};\n+\n+use crate::{\n+    assist_context::{AssistBuilder, AssistContext, Assists},\n+    utils::generate_trait_impl_text,\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: generate_deref\n+//\n+// Generate `Deref` impl using the given struct field.\n+//\n+// ```\n+// struct A;\n+// struct B {\n+//    $0a: A\n+// }\n+// ```\n+// ->\n+// ```\n+// struct A;\n+// struct B {\n+//    a: A\n+// }\n+//\n+// impl std::ops::Deref for B {\n+//     type Target = A;\n+//\n+//     fn deref(&self) -> &Self::Target {\n+//         &self.a\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_record_deref(acc, ctx).or_else(|| generate_tuple_deref(acc, ctx))\n+}\n+\n+fn generate_record_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n+        cov_mark::hit!(test_add_record_deref_impl_already_exists);\n+        return None;\n+    }\n+\n+    let field_type = field.ty()?;\n+    let field_name = field.name()?;\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_deref\", AssistKind::Generate),\n+        format!(\"Generate `Deref` impl using `{}`\", field_name),\n+        target,\n+        |edit| generate_edit(edit, strukt, field_type.syntax(), field_name.syntax()),\n+    )\n+}\n+\n+fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n+    let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n+    let field_list_index =\n+        field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n+\n+    if existing_deref_impl(&ctx.sema, &strukt).is_some() {\n+        cov_mark::hit!(test_add_field_deref_impl_already_exists);\n+        return None;\n+    }\n+\n+    let field_type = field.ty()?;\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_deref\", AssistKind::Generate),\n+        format!(\"Generate `Deref` impl using `{}`\", field.syntax()),\n+        target,\n+        |edit| generate_edit(edit, strukt, field_type.syntax(), field_list_index),\n+    )\n+}\n+\n+fn generate_edit(\n+    edit: &mut AssistBuilder,\n+    strukt: ast::Struct,\n+    field_type_syntax: &SyntaxNode,\n+    field_name: impl Display,\n+) {\n+    let start_offset = strukt.syntax().text_range().end();\n+    let impl_code = format!(\n+        r#\"    type Target = {0};\n+\n+    fn deref(&self) -> &Self::Target {{\n+        &self.{1}\n+    }}\"#,\n+        field_type_syntax, field_name\n+    );\n+    let strukt_adt = ast::Adt::Struct(strukt);\n+    let deref_impl = generate_trait_impl_text(&strukt_adt, \"std::ops::Deref\", &impl_code);\n+    edit.insert(start_offset, deref_impl);\n+}\n+\n+fn existing_deref_impl(\n+    sema: &'_ hir::Semantics<'_, RootDatabase>,\n+    strukt: &ast::Struct,\n+) -> Option<()> {\n+    let strukt = sema.to_def(strukt)?;\n+    let krate = strukt.module(sema.db).krate();\n+\n+    let deref_trait = FamousDefs(sema, Some(krate)).core_ops_Deref()?;\n+    let strukt_type = strukt.ty(sema.db);\n+\n+    if strukt_type.impls_trait(sema.db, deref_trait, &[]) {\n+        Some(())\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_generate_record_deref() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B { $0a: A }\"#,\n+            r#\"struct A { }\n+struct B { a: A }\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_field_deref_idx_0() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B($0A);\"#,\n+            r#\"struct A { }\n+struct B(A);\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\"#,\n+        );\n+    }\n+    #[test]\n+    fn test_generate_field_deref_idx_1() {\n+        check_assist(\n+            generate_deref,\n+            r#\"struct A { }\n+struct B(u8, $0A);\"#,\n+            r#\"struct A { }\n+struct B(u8, A);\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.1\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        let fixture = format!(\n+            \"//- /main.rs crate:main deps:core,std\\n{}\\n{}\",\n+            ra_fixture,\n+            FamousDefs::FIXTURE\n+        );\n+        check_assist_not_applicable(generate_deref, &fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_record_deref_not_applicable_if_already_impl() {\n+        cov_mark::check!(test_add_record_deref_impl_already_exists);\n+        check_not_applicable(\n+            r#\"struct A { }\n+struct B { $0a: A }\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_generate_field_deref_not_applicable_if_already_impl() {\n+        cov_mark::check!(test_add_field_deref_impl_already_exists);\n+        check_not_applicable(\n+            r#\"struct A { }\n+struct B($0A)\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "8996c1b615c92bdc2622a2579af56833a558a015", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -134,6 +134,7 @@ mod handlers {\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n     mod generate_is_empty_from_len;\n+    mod generate_deref;\n     mod generate_derive;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n@@ -201,6 +202,7 @@ mod handlers {\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n+            generate_deref::generate_deref,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,"}, {"sha": "49533e7d2c5edf543af88fbf162c2284939c2317", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -193,6 +193,7 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");"}, {"sha": "41559b43ad7c5be2812943186adb0558c3205945", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -551,6 +551,33 @@ impl Default for Example {\n     )\n }\n \n+#[test]\n+fn doctest_generate_deref() {\n+    check_doc_test(\n+        \"generate_deref\",\n+        r#####\"\n+struct A;\n+struct B {\n+   $0a: A\n+}\n+\"#####,\n+        r#####\"\n+struct A;\n+struct B {\n+   a: A\n+}\n+\n+impl std::ops::Deref for B {\n+    type Target = A;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.a\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_derive() {\n     check_doc_test("}, {"sha": "83a665b376069417714727a7f64c76dfc3559537", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -113,6 +113,10 @@ impl FamousDefs<'_, '_> {\n         self.find_module(\"core:iter\")\n     }\n \n+    pub fn core_ops_Deref(&self) -> Option<Trait> {\n+        self.find_trait(\"core:ops:Deref\")\n+    }\n+\n     fn find_trait(&self, path: &str) -> Option<Trait> {\n         match self.find_def(path)? {\n             hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),"}, {"sha": "29ae12dcf400f3c278344eeeb2003ef65471adbc", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f432730dfc7df83fed2d78a97d3d0cf97ffc282/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=3f432730dfc7df83fed2d78a97d3d0cf97ffc282", "patch": "@@ -112,6 +112,12 @@ pub mod ops {\n         type Output;\n         extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n     }\n+\n+    #[lang = \"deref\"]\n+    pub trait Deref {\n+        type Target: ?Sized;\n+        fn deref(&self) -> &Self::Target;\n+    }\n }\n \n pub mod option {\n@@ -141,3 +147,5 @@ mod return_keyword {}\n \n /// Docs for prim_str\n mod prim_str {}\n+\n+pub use core::ops;\n\\ No newline at end of file"}]}