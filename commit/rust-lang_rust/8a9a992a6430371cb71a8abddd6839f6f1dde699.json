{"sha": "8a9a992a6430371cb71a8abddd6839f6f1dde699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWE5OTJhNjQzMDM3MWNiNzFhOGFiZGRkNjgzOWY2ZjFkZGU2OTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T09:32:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_generic_bound", "tree": {"sha": "27fb5494ff5f25cee7bca83f50e4408a7155fca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27fb5494ff5f25cee7bca83f50e4408a7155fca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9a992a6430371cb71a8abddd6839f6f1dde699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9a992a6430371cb71a8abddd6839f6f1dde699", "html_url": "https://github.com/rust-lang/rust/commit/8a9a992a6430371cb71a8abddd6839f6f1dde699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9a992a6430371cb71a8abddd6839f6f1dde699/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd89104966d6ea6a1bbc14d697b9197f06614d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd89104966d6ea6a1bbc14d697b9197f06614d12", "html_url": "https://github.com/rust-lang/rust/commit/fd89104966d6ea6a1bbc14d697b9197f06614d12"}], "stats": {"total": 101, "additions": 61, "deletions": 40}, "files": [{"sha": "f0a1b36bc36241f02126c0bdddbd3de1763d6a0a", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 61, "deletions": 40, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8a9a992a6430371cb71a8abddd6839f6f1dde699/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9a992a6430371cb71a8abddd6839f6f1dde699/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=8a9a992a6430371cb71a8abddd6839f6f1dde699", "patch": "@@ -352,12 +352,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses bounds of a type parameter `BOUND + BOUND + ...`, possibly with trailing `+`.\n     ///\n-    /// ```\n-    /// BOUND = TY_BOUND | LT_BOUND\n-    /// LT_BOUND = LIFETIME (e.g., `'a`)\n-    /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n-    /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n-    /// ```\n+    /// See `parse_generic_bound` for the `BOUND` grammar.\n     fn parse_generic_bounds_common(\n         &mut self,\n         allow_plus: bool,\n@@ -368,39 +363,13 @@ impl<'a> Parser<'a> {\n         let mut last_plus_span = None;\n         let mut was_negative = false;\n         while self.can_begin_bound() {\n-            let lo = self.token.span;\n-            let has_parens = self.eat(&token::OpenDelim(token::Paren));\n-            let inner_lo = self.token.span;\n-            let is_negative = self.eat(&token::Not);\n-            let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n-            if self.token.is_lifetime() {\n-                self.error_opt_out_lifetime(question);\n-                bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n-                if has_parens {\n-                    self.recover_paren_lifetime(lo, inner_lo)?;\n-                }\n-            } else {\n-                let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-                let path = self.parse_path(PathStyle::Type)?;\n-                if has_parens {\n-                    self.expect(&token::CloseDelim(token::Paren))?;\n-                }\n-                let poly_span = lo.to(self.prev_span);\n-                if is_negative {\n-                    was_negative = true;\n-                    if let Some(sp) = last_plus_span.or(colon_span) {\n-                        negative_bounds.push(sp.to(poly_span));\n-                    }\n-                } else {\n-                    let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n-                    let modifier = if question.is_some() {\n-                        TraitBoundModifier::Maybe\n-                    } else {\n-                        TraitBoundModifier::None\n-                    };\n-                    bounds.push(GenericBound::Trait(poly_trait, modifier));\n-                }\n-            }\n+            self.parse_generic_bound(\n+                colon_span,\n+                last_plus_span,\n+                &mut bounds,\n+                &mut negative_bounds,\n+                &mut was_negative,\n+            )?;\n \n             if !allow_plus || !self.eat_plus() {\n                 break\n@@ -441,7 +410,7 @@ impl<'a> Parser<'a> {\n             err.emit();\n         }\n \n-        return Ok(bounds);\n+        Ok(bounds)\n     }\n \n     /// Can the current token begin a bound?\n@@ -455,6 +424,58 @@ impl<'a> Parser<'a> {\n         || self.check(&token::OpenDelim(token::Paren))\n     }\n \n+    /// Parses a bound according to the grammar:\n+    ///\n+    /// ```\n+    /// BOUND = TY_BOUND | LT_BOUND\n+    /// LT_BOUND = LIFETIME (e.g., `'a`)\n+    /// TY_BOUND = TY_BOUND_NOPAREN | (TY_BOUND_NOPAREN)\n+    /// TY_BOUND_NOPAREN = [?] [for<LT_PARAM_DEFS>] SIMPLE_PATH (e.g., `?for<'a: 'b> m::Trait<'a>`)\n+    /// ```\n+    fn parse_generic_bound(\n+        &mut self,\n+        colon_span: Option<Span>,\n+        last_plus_span: Option<Span>,\n+        bounds: &mut Vec<GenericBound>,\n+        negative_bounds: &mut Vec<Span>,\n+        was_negative: &mut bool,\n+    ) -> PResult<'a, ()> {\n+        let lo = self.token.span;\n+        let has_parens = self.eat(&token::OpenDelim(token::Paren));\n+        let inner_lo = self.token.span;\n+        let is_negative = self.eat(&token::Not);\n+        let question = if self.eat(&token::Question) { Some(self.prev_span) } else { None };\n+        if self.token.is_lifetime() {\n+            self.error_opt_out_lifetime(question);\n+            bounds.push(GenericBound::Outlives(self.expect_lifetime()));\n+            if has_parens {\n+                self.recover_paren_lifetime(lo, inner_lo)?;\n+            }\n+        } else {\n+            let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n+            let path = self.parse_path(PathStyle::Type)?;\n+            if has_parens {\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+            }\n+            let poly_span = lo.to(self.prev_span);\n+            if is_negative {\n+                *was_negative = true;\n+                if let Some(sp) = last_plus_span.or(colon_span) {\n+                    negative_bounds.push(sp.to(poly_span));\n+                }\n+            } else {\n+                let poly_trait = PolyTraitRef::new(lifetime_defs, path, poly_span);\n+                let modifier = if question.is_some() {\n+                    TraitBoundModifier::Maybe\n+                } else {\n+                    TraitBoundModifier::None\n+                };\n+                bounds.push(GenericBound::Trait(poly_trait, modifier));\n+            }\n+        }\n+        Ok(())\n+    }\n+\n     fn error_opt_out_lifetime(&self, question: Option<Span>) {\n         if let Some(span) = question {\n             self.struct_span_err(span, \"`?` may only modify trait bounds, not lifetime bounds\")"}]}