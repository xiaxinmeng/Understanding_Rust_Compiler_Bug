{"sha": "a20b86f88122a07908284e37e5ada9aa4afc81cf", "node_id": "C_kwDOAAsO6NoAKGEyMGI4NmY4ODEyMmEwNzkwODI4NGUzN2U1YWRhOWFhNGFmYzgxY2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-25T21:19:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-25T21:19:56Z"}, "message": "Rollup merge of #107282 - BoxyUwU:erica_builtin_pointee_impls, r=compiler-errors\n\nerica solver: implement builtin `Pointee` trait impl candidates\n\nr? ```@compiler-errors```", "tree": {"sha": "0f1652c34586afd611eeabf1eba7d9da7264dbfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1652c34586afd611eeabf1eba7d9da7264dbfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20b86f88122a07908284e37e5ada9aa4afc81cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0Zz8CRBK7hj4Ov3rIwAA5a4IAGt2lEj+XKaFLz1wkrNpjmFF\nZHc4je6Lv68f8MISkFboAtdxYgBphdLeN/3DlSFiMiqGgbhfr4LGEk8TJ2x6e+b7\n6PGxJkU7C67Wv2DmYebhaxp0V3F5MESBxUI+TYNpYeB/Pi4phMVYBilLHdD3cPFq\nrDS5lVfMXRzT1eug+os2wQP/72qS2J8FIRP4EhzU2QQXmH0QlhWJJE47oByc0FSR\n68JfdQiNo58vThPmEk0xHYRMLn3Uen00VSWdZCyVKaZc40My/k/7TjEo/lnZtY4p\nMs1LbE4NT5GQUN8UdyUg4N8X11xPoZ7xFKn6rksP8SVEDKezNNu5orHJmYofQ8g=\n=ono7\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f1652c34586afd611eeabf1eba7d9da7264dbfd\nparent f268c7b45408d8bd01a637b30f3c8022e263c8fa\nparent a418e39b75a8b3628cfea0b233de2f8985331f6d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674681596 +0100\ncommitter GitHub <noreply@github.com> 1674681596 +0100\n\nRollup merge of #107282 - BoxyUwU:erica_builtin_pointee_impls, r=compiler-errors\n\nerica solver: implement builtin `Pointee` trait impl candidates\n\nr? ```@compiler-errors```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20b86f88122a07908284e37e5ada9aa4afc81cf", "html_url": "https://github.com/rust-lang/rust/commit/a20b86f88122a07908284e37e5ada9aa4afc81cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20b86f88122a07908284e37e5ada9aa4afc81cf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f268c7b45408d8bd01a637b30f3c8022e263c8fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f268c7b45408d8bd01a637b30f3c8022e263c8fa", "html_url": "https://github.com/rust-lang/rust/commit/f268c7b45408d8bd01a637b30f3c8022e263c8fa"}, {"sha": "a418e39b75a8b3628cfea0b233de2f8985331f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a418e39b75a8b3628cfea0b233de2f8985331f6d", "html_url": "https://github.com/rust-lang/rust/commit/a418e39b75a8b3628cfea0b233de2f8985331f6d"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "0b642fcba281249da01b21d4af4ece7fe96c2636", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=a20b86f88122a07908284e37e5ada9aa4afc81cf", "patch": "@@ -133,6 +133,11 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n+\n+    fn consider_builtin_pointee_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx>;\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n@@ -259,6 +264,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             G::consider_builtin_fn_trait_candidates(self, goal, kind)\n         } else if lang_items.tuple_trait() == Some(trait_def_id) {\n             G::consider_builtin_tuple_candidate(self, goal)\n+        } else if lang_items.pointee_trait() == Some(trait_def_id) {\n+            G::consider_builtin_pointee_candidate(self, goal)\n         } else {\n             Err(NoSolution)\n         };"}, {"sha": "e5072d8e2d15216adfb84e40a508470ddaaaef8d", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=a20b86f88122a07908284e37e5ada9aa4afc81cf", "patch": "@@ -7,6 +7,7 @@ use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::LangItem;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::specialization_graph::LeafDef;\n@@ -391,6 +392,96 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     ) -> QueryResult<'tcx> {\n         bug!(\"`Tuple` does not have an associated type: {:?}\", goal);\n     }\n+\n+    fn consider_builtin_pointee_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        let tcx = ecx.tcx();\n+        ecx.infcx.probe(|_| {\n+            let metadata_ty = match goal.predicate.self_ty().kind() {\n+                ty::Bool\n+                | ty::Char\n+                | ty::Int(..)\n+                | ty::Uint(..)\n+                | ty::Float(..)\n+                | ty::Array(..)\n+                | ty::RawPtr(..)\n+                | ty::Ref(..)\n+                | ty::FnDef(..)\n+                | ty::FnPtr(..)\n+                | ty::Closure(..)\n+                | ty::Infer(ty::IntVar(..) | ty::FloatVar(..))\n+                | ty::Generator(..)\n+                | ty::GeneratorWitness(..)\n+                | ty::Never\n+                | ty::Foreign(..) => tcx.types.unit,\n+\n+                ty::Error(e) => tcx.ty_error_with_guaranteed(*e),\n+\n+                ty::Str | ty::Slice(_) => tcx.types.usize,\n+\n+                ty::Dynamic(_, _, _) => {\n+                    let dyn_metadata = tcx.require_lang_item(LangItem::DynMetadata, None);\n+                    tcx.bound_type_of(dyn_metadata)\n+                        .subst(tcx, &[ty::GenericArg::from(goal.predicate.self_ty())])\n+                }\n+\n+                ty::Infer(ty::TyVar(..)) | ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                    // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n+                    let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n+                        LangItem::Sized,\n+                        [ty::GenericArg::from(goal.predicate.self_ty())],\n+                    ));\n+\n+                    let mut nested_goals = ecx.infcx.eq(\n+                        goal.param_env,\n+                        goal.predicate.term.ty().unwrap(),\n+                        tcx.types.unit,\n+                    )?;\n+                    nested_goals.push(goal.with(tcx, sized_predicate));\n+\n+                    return ecx.evaluate_all_and_make_canonical_response(nested_goals);\n+                }\n+\n+                ty::Adt(def, substs) if def.is_struct() => {\n+                    match def.non_enum_variant().fields.last() {\n+                        None => tcx.types.unit,\n+                        Some(field_def) => {\n+                            let self_ty = field_def.ty(tcx, substs);\n+                            let new_goal = goal.with(\n+                                tcx,\n+                                ty::Binder::dummy(goal.predicate.with_self_ty(tcx, self_ty)),\n+                            );\n+                            return ecx.evaluate_all_and_make_canonical_response(vec![new_goal]);\n+                        }\n+                    }\n+                }\n+                ty::Adt(_, _) => tcx.types.unit,\n+\n+                ty::Tuple(elements) => match elements.last() {\n+                    None => tcx.types.unit,\n+                    Some(&self_ty) => {\n+                        let new_goal = goal.with(\n+                            tcx,\n+                            ty::Binder::dummy(goal.predicate.with_self_ty(tcx, self_ty)),\n+                        );\n+                        return ecx.evaluate_all_and_make_canonical_response(vec![new_goal]);\n+                    }\n+                },\n+\n+                ty::Infer(ty::FreshTy(..) | ty::FreshIntTy(..) | ty::FreshFloatTy(..))\n+                | ty::Bound(..) => bug!(\n+                    \"unexpected self ty `{:?}` when normalizing `<T as Pointee>::Metadata`\",\n+                    goal.predicate.self_ty()\n+                ),\n+            };\n+\n+            let nested_goals =\n+                ecx.infcx.eq(goal.param_env, goal.predicate.term.ty().unwrap(), metadata_ty)?;\n+            ecx.evaluate_all_and_make_canonical_response(nested_goals)\n+        })\n+    }\n }\n \n /// This behavior is also implemented in `rustc_ty_utils` and in the old `project` code."}, {"sha": "67bd2495665465d254ec83cc927ce42b0471c975", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20b86f88122a07908284e37e5ada9aa4afc81cf/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=a20b86f88122a07908284e37e5ada9aa4afc81cf", "patch": "@@ -185,6 +185,13 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             Err(NoSolution)\n         }\n     }\n+\n+    fn consider_builtin_pointee_candidate(\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n+        _goal: Goal<'tcx, Self>,\n+    ) -> QueryResult<'tcx> {\n+        ecx.make_canonical_response(Certainty::Yes)\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "fa6ee2e2daf643727fe1f0264af0d777fad0f938", "filename": "tests/ui/traits/new-solver/pointee.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a20b86f88122a07908284e37e5ada9aa4afc81cf/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20b86f88122a07908284e37e5ada9aa4afc81cf/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointee.rs?ref=a20b86f88122a07908284e37e5ada9aa4afc81cf", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+#![feature(ptr_metadata)]\n+\n+use std::ptr::{DynMetadata, Pointee};\n+\n+trait Trait<U> {}\n+struct MyDst<T: ?Sized>(T);\n+\n+fn works<T>() {\n+    let _: <T as Pointee>::Metadata = ();\n+    let _: <[T] as Pointee>::Metadata = 1_usize;\n+    let _: <str as Pointee>::Metadata = 1_usize;\n+    let _: <dyn Trait<T> as Pointee>::Metadata = give::<DynMetadata<dyn Trait<T>>>();\n+    let _: <MyDst<T> as Pointee>::Metadata = ();\n+    let _: <((((([u8],),),),),) as Pointee>::Metadata = 1_usize;\n+}\n+\n+fn give<U>() -> U {\n+    loop {}\n+}\n+\n+fn main() {}"}]}