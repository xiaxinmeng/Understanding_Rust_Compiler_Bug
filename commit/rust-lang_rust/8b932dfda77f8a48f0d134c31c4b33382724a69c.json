{"sha": "8b932dfda77f8a48f0d134c31c4b33382724a69c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTMyZGZkYTc3ZjhhNDhmMGQxMzRjMzFjNGIzMzM4MjcyNGE2OWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T16:00:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T18:59:09Z"}, "message": "remove composite tokens support from the lexer", "tree": {"sha": "14f1df3e4fa80fc62f055e798d76564ea39ddedb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f1df3e4fa80fc62f055e798d76564ea39ddedb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b932dfda77f8a48f0d134c31c4b33382724a69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b932dfda77f8a48f0d134c31c4b33382724a69c", "html_url": "https://github.com/rust-lang/rust/commit/8b932dfda77f8a48f0d134c31c4b33382724a69c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b932dfda77f8a48f0d134c31c4b33382724a69c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd", "html_url": "https://github.com/rust-lang/rust/commit/cdff9189556bb7de2b9a8a72344c9d8ec6099fcd"}], "stats": {"total": 233, "additions": 34, "deletions": 199}, "files": [{"sha": "41b47befaf1412241a088087a166e6f0036f82f3", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 14, "deletions": 162, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=8b932dfda77f8a48f0d134c31c4b33382724a69c", "patch": "@@ -23,9 +23,6 @@ pub enum TokenKind {\n     Lifetime { starts_with_number: bool },\n     Semi,\n     Comma,\n-    DotDotDot,\n-    DotDotEq,\n-    DotDot,\n     Dot,\n     OpenParen,\n     CloseParen,\n@@ -37,41 +34,19 @@ pub enum TokenKind {\n     Pound,\n     Tilde,\n     Question,\n-    ColonColon,\n     Colon,\n     Dollar,\n-    EqEq,\n     Eq,\n-    FatArrow,\n-    Ne,\n     Not,\n-    Le,\n-    LArrow,\n     Lt,\n-    ShlEq,\n-    Shl,\n-    Ge,\n     Gt,\n-    ShrEq,\n-    Shr,\n-    RArrow,\n     Minus,\n-    MinusEq,\n     And,\n-    AndAnd,\n-    AndEq,\n     Or,\n-    OrOr,\n-    OrEq,\n-    PlusEq,\n     Plus,\n-    StarEq,\n     Star,\n-    SlashEq,\n     Slash,\n-    CaretEq,\n     Caret,\n-    PercentEq,\n     Percent,\n     Unknown,\n }\n@@ -135,13 +110,7 @@ impl Cursor<'_> {\n             '/' => match self.nth_char(0) {\n                 '/' => self.line_comment(),\n                 '*' => self.block_comment(),\n-                _ => {\n-                    if self.eat_assign() {\n-                        SlashEq\n-                    } else {\n-                        Slash\n-                    }\n-                }\n+                _ => Slash,\n             },\n             c if character_properties::is_whitespace(c) => self.whitespace(),\n             'r' => match (self.nth_char(0), self.nth_char(1)) {\n@@ -199,22 +168,7 @@ impl Cursor<'_> {\n             }\n             ';' => Semi,\n             ',' => Comma,\n-            '.' => {\n-                if self.nth_char(0) == '.' {\n-                    self.bump();\n-                    if self.nth_char(0) == '.' {\n-                        self.bump();\n-                        DotDotDot\n-                    } else if self.nth_char(0) == '=' {\n-                        self.bump();\n-                        DotDotEq\n-                    } else {\n-                        DotDot\n-                    }\n-                } else {\n-                    Dot\n-                }\n-            }\n+            '.' => Dot,\n             '(' => OpenParen,\n             ')' => CloseParen,\n             '{' => OpenBrace,\n@@ -225,112 +179,19 @@ impl Cursor<'_> {\n             '#' => Pound,\n             '~' => Tilde,\n             '?' => Question,\n-            ':' => {\n-                if self.nth_char(0) == ':' {\n-                    self.bump();\n-                    ColonColon\n-                } else {\n-                    Colon\n-                }\n-            }\n+            ':' => Colon,\n             '$' => Dollar,\n-            '=' => {\n-                if self.nth_char(0) == '=' {\n-                    self.bump();\n-                    EqEq\n-                } else if self.nth_char(0) == '>' {\n-                    self.bump();\n-                    FatArrow\n-                } else {\n-                    Eq\n-                }\n-            }\n-            '!' => {\n-                if self.nth_char(0) == '=' {\n-                    self.bump();\n-                    Ne\n-                } else {\n-                    Not\n-                }\n-            }\n-            '<' => match self.nth_char(0) {\n-                '=' => {\n-                    self.bump();\n-                    Le\n-                }\n-                '<' => {\n-                    self.bump();\n-                    if self.eat_assign() { ShlEq } else { Shl }\n-                }\n-                '-' => {\n-                    self.bump();\n-                    LArrow\n-                }\n-                _ => Lt,\n-            },\n-            '>' => match self.nth_char(0) {\n-                '=' => {\n-                    self.bump();\n-                    Ge\n-                }\n-                '>' => {\n-                    self.bump();\n-                    if self.eat_assign() { ShrEq } else { Shr }\n-                }\n-                _ => Gt,\n-            },\n-            '-' => {\n-                if self.nth_char(0) == '>' {\n-                    self.bump();\n-                    RArrow\n-                } else {\n-                    if self.eat_assign() { MinusEq } else { Minus }\n-                }\n-            }\n-            '&' => {\n-                if self.nth_char(0) == '&' {\n-                    self.bump();\n-                    AndAnd\n-                } else {\n-                    if self.eat_assign() { AndEq } else { And }\n-                }\n-            }\n-            '|' => {\n-                if self.nth_char(0) == '|' {\n-                    self.bump();\n-                    OrOr\n-                } else {\n-                    if self.eat_assign() { OrEq } else { Or }\n-                }\n-            }\n-            '+' => {\n-                if self.eat_assign() {\n-                    PlusEq\n-                } else {\n-                    Plus\n-                }\n-            }\n-            '*' => {\n-                if self.eat_assign() {\n-                    StarEq\n-                } else {\n-                    Star\n-                }\n-            }\n-            '^' => {\n-                if self.eat_assign() {\n-                    CaretEq\n-                } else {\n-                    Caret\n-                }\n-            }\n-            '%' => {\n-                if self.eat_assign() {\n-                    PercentEq\n-                } else {\n-                    Percent\n-                }\n-            }\n+            '=' => Eq,\n+            '!' => Not,\n+            '<' => Lt,\n+            '>' => Gt,\n+            '-' => Minus,\n+            '&' => And,\n+            '|' => Or,\n+            '+' => Plus,\n+            '*' => Star,\n+            '^' => Caret,\n+            '%' => Percent,\n             '\\'' => self.lifetime_or_char(),\n             '\"' => {\n                 let terminated = self.double_quoted_string();\n@@ -643,15 +504,6 @@ impl Cursor<'_> {\n             self.bump();\n         }\n     }\n-\n-    fn eat_assign(&mut self) -> bool {\n-        if self.nth_char(0) == '=' {\n-            self.bump();\n-            true\n-        } else {\n-            false\n-        }\n-    }\n }\n \n pub mod character_properties {"}, {"sha": "66add869359d800f030ddf5308351f3b794fb87c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=8b932dfda77f8a48f0d134c31c4b33382724a69c", "patch": "@@ -273,9 +273,6 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::TokenKind::Semi => token::Semi,\n             rustc_lexer::TokenKind::Comma => token::Comma,\n-            rustc_lexer::TokenKind::DotDotDot => token::DotDotDot,\n-            rustc_lexer::TokenKind::DotDotEq => token::DotDotEq,\n-            rustc_lexer::TokenKind::DotDot => token::DotDot,\n             rustc_lexer::TokenKind::Dot => token::Dot,\n             rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),\n             rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),\n@@ -287,42 +284,20 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::Pound => token::Pound,\n             rustc_lexer::TokenKind::Tilde => token::Tilde,\n             rustc_lexer::TokenKind::Question => token::Question,\n-            rustc_lexer::TokenKind::ColonColon => token::ModSep,\n             rustc_lexer::TokenKind::Colon => token::Colon,\n             rustc_lexer::TokenKind::Dollar => token::Dollar,\n-            rustc_lexer::TokenKind::EqEq => token::EqEq,\n             rustc_lexer::TokenKind::Eq => token::Eq,\n-            rustc_lexer::TokenKind::FatArrow => token::FatArrow,\n-            rustc_lexer::TokenKind::Ne => token::Ne,\n             rustc_lexer::TokenKind::Not => token::Not,\n-            rustc_lexer::TokenKind::Le => token::Le,\n-            rustc_lexer::TokenKind::LArrow => token::LArrow,\n             rustc_lexer::TokenKind::Lt => token::Lt,\n-            rustc_lexer::TokenKind::ShlEq => token::BinOpEq(token::Shl),\n-            rustc_lexer::TokenKind::Shl => token::BinOp(token::Shl),\n-            rustc_lexer::TokenKind::Ge => token::Ge,\n             rustc_lexer::TokenKind::Gt => token::Gt,\n-            rustc_lexer::TokenKind::ShrEq => token::BinOpEq(token::Shr),\n-            rustc_lexer::TokenKind::Shr => token::BinOp(token::Shr),\n-            rustc_lexer::TokenKind::RArrow => token::RArrow,\n             rustc_lexer::TokenKind::Minus => token::BinOp(token::Minus),\n-            rustc_lexer::TokenKind::MinusEq => token::BinOpEq(token::Minus),\n             rustc_lexer::TokenKind::And => token::BinOp(token::And),\n-            rustc_lexer::TokenKind::AndEq => token::BinOpEq(token::And),\n-            rustc_lexer::TokenKind::AndAnd => token::AndAnd,\n             rustc_lexer::TokenKind::Or => token::BinOp(token::Or),\n-            rustc_lexer::TokenKind::OrEq => token::BinOpEq(token::Or),\n-            rustc_lexer::TokenKind::OrOr => token::OrOr,\n             rustc_lexer::TokenKind::Plus => token::BinOp(token::Plus),\n-            rustc_lexer::TokenKind::PlusEq => token::BinOpEq(token::Plus),\n             rustc_lexer::TokenKind::Star => token::BinOp(token::Star),\n-            rustc_lexer::TokenKind::StarEq => token::BinOpEq(token::Star),\n             rustc_lexer::TokenKind::Slash => token::BinOp(token::Slash),\n-            rustc_lexer::TokenKind::SlashEq => token::BinOpEq(token::Slash),\n             rustc_lexer::TokenKind::Caret => token::BinOp(token::Caret),\n-            rustc_lexer::TokenKind::CaretEq => token::BinOpEq(token::Caret),\n             rustc_lexer::TokenKind::Percent => token::BinOp(token::Percent),\n-            rustc_lexer::TokenKind::PercentEq => token::BinOpEq(token::Percent),\n \n             rustc_lexer::TokenKind::Unknown => {\n                 let c = self.str_from(start).chars().next().unwrap();"}, {"sha": "a915aa42fd15ab2da80ed65d109b697f50c2e204", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b932dfda77f8a48f0d134c31c4b33382724a69c/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=8b932dfda77f8a48f0d134c31c4b33382724a69c", "patch": "@@ -75,42 +75,50 @@ fn mk_lit(kind: token::LitKind, symbol: &str, suffix: Option<&str>) -> TokenKind\n }\n \n #[test]\n-fn doublecolonparsing() {\n+fn doublecolon_parsing() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        check_tokenization(setup(&sm, &sh, \"a b\".to_string()),\n-                        vec![mk_ident(\"a\"), token::Whitespace, mk_ident(\"b\")]);\n+        check_tokenization(\n+            setup(&sm, &sh, \"a b\".to_string()),\n+            vec![mk_ident(\"a\"), token::Whitespace, mk_ident(\"b\")],\n+        );\n     })\n }\n \n #[test]\n-fn dcparsing_2() {\n+fn doublecolon_parsing_2() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        check_tokenization(setup(&sm, &sh, \"a::b\".to_string()),\n-                        vec![mk_ident(\"a\"), token::ModSep, mk_ident(\"b\")]);\n+        check_tokenization(\n+            setup(&sm, &sh, \"a::b\".to_string()),\n+            vec![mk_ident(\"a\"), token::Colon, token::Colon, mk_ident(\"b\")],\n+        );\n     })\n }\n \n #[test]\n-fn dcparsing_3() {\n+fn doublecolon_parsing_3() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        check_tokenization(setup(&sm, &sh, \"a ::b\".to_string()),\n-                        vec![mk_ident(\"a\"), token::Whitespace, token::ModSep, mk_ident(\"b\")]);\n+        check_tokenization(\n+            setup(&sm, &sh, \"a ::b\".to_string()),\n+            vec![mk_ident(\"a\"), token::Whitespace, token::Colon, token::Colon, mk_ident(\"b\")],\n+        );\n     })\n }\n \n #[test]\n-fn dcparsing_4() {\n+fn doublecolon_parsing_4() {\n     with_default_globals(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let sh = mk_sess(sm.clone());\n-        check_tokenization(setup(&sm, &sh, \"a:: b\".to_string()),\n-                        vec![mk_ident(\"a\"), token::ModSep, token::Whitespace, mk_ident(\"b\")]);\n+        check_tokenization(\n+            setup(&sm, &sh, \"a:: b\".to_string()),\n+            vec![mk_ident(\"a\"), token::Colon, token::Colon, token::Whitespace, mk_ident(\"b\")],\n+        );\n     })\n }\n "}]}