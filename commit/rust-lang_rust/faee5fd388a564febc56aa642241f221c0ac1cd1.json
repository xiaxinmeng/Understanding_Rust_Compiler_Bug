{"sha": "faee5fd388a564febc56aa642241f221c0ac1cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZWU1ZmQzODhhNTY0ZmViYzU2YWE2NDIyNDFmMjIxYzBhYzFjZDE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-26T21:44:08Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-10-07T20:48:16Z"}, "message": "[WIP] minimize the rust-std component", "tree": {"sha": "6c760500aee21ca0ec05daa03f83fb1556b2e139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c760500aee21ca0ec05daa03f83fb1556b2e139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faee5fd388a564febc56aa642241f221c0ac1cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faee5fd388a564febc56aa642241f221c0ac1cd1", "html_url": "https://github.com/rust-lang/rust/commit/faee5fd388a564febc56aa642241f221c0ac1cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faee5fd388a564febc56aa642241f221c0ac1cd1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a31c8c676bdc9f50490d5798b1b4e884b7d7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a31c8c676bdc9f50490d5798b1b4e884b7d7ae", "html_url": "https://github.com/rust-lang/rust/commit/59a31c8c676bdc9f50490d5798b1b4e884b7d7ae"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "afdcabc08302c23da31883f43f387a8d7195b419", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/faee5fd388a564febc56aa642241f221c0ac1cd1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faee5fd388a564febc56aa642241f221c0ac1cd1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=faee5fd388a564febc56aa642241f221c0ac1cd1", "patch": "@@ -443,6 +443,7 @@ impl<'a> Builder<'a> {\n                 dist::Rustc,\n                 dist::DebuggerScripts,\n                 dist::Std,\n+                dist::StdZ,\n                 dist::Analysis,\n                 dist::Src,\n                 dist::PlainSourceTarball,"}, {"sha": "ceb7acb83e749abf1eab2ff4970f1da9e534b39e", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/faee5fd388a564febc56aa642241f221c0ac1cd1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faee5fd388a564febc56aa642241f221c0ac1cd1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=faee5fd388a564febc56aa642241f221c0ac1cd1", "patch": "@@ -675,6 +675,81 @@ impl Step for Std {\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n+        builder.ensure(compile::Std { compiler, target });\n+\n+        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n+        let _ = fs::remove_dir_all(&image);\n+\n+\n+        let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+        t!(fs::create_dir_all(&dst));\n+\n+        let stamp = dbg!(compile::libstd_stamp(builder, compiler, target));\n+        for (path, host) in builder.read_stamp_file(&stamp) {\n+            if !host {\n+                builder.copy(&path, &dst.join(path.file_name().unwrap()));\n+            }\n+        }\n+\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+           .arg(\"--product-name=Rust\")\n+           .arg(\"--rel-manifest-dir=rustlib\")\n+           .arg(\"--success-message=std-is-standing-at-the-ready.\")\n+           .arg(\"--image-dir\").arg(&image)\n+           .arg(\"--work-dir\").arg(&tmpdir(builder))\n+           .arg(\"--output-dir\").arg(&distdir(builder))\n+           .arg(format!(\"--package-name={}-{}\", name, target))\n+           .arg(format!(\"--component-name=rust-std-{}\", target))\n+           .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+\n+        builder.info(&format!(\"Dist std stage{} ({} -> {})\",\n+            compiler.stage, &compiler.host, target));\n+        let _time = timeit(builder);\n+        builder.run(&mut cmd);\n+        builder.remove_dir(&image);\n+        distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target))\n+    }\n+}\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct StdZ {\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for StdZ {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/libstdZ\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(StdZ {\n+            compiler: run.builder.compiler_for(\n+                run.builder.top_stage,\n+                run.builder.config.build,\n+                run.target,\n+            ),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let compiler = self.compiler;\n+        let target = self.target;\n+\n+        let name = pkgname(builder, \"rust-stdZ\");\n+\n+        // The only true set of target libraries came from the build triple, so\n+        // let's reduce redundant work by only producing archives from that host.\n+        if compiler.host != builder.config.build {\n+            builder.info(\"\\tskipping, not a build host\");\n+            return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n+        }\n+\n         // We want to package up as many target libraries as possible\n         // for the `rust-std` package, so if this is a host target we\n         // depend on librustc and otherwise we just depend on libtest.\n@@ -710,12 +785,12 @@ impl Step for Std {\n         cmd.arg(\"generate\")\n            .arg(\"--product-name=Rust\")\n            .arg(\"--rel-manifest-dir=rustlib\")\n-           .arg(\"--success-message=std-is-standing-at-the-ready.\")\n+           .arg(\"--success-message=stdZ-is-standing-at-the-ready.\")\n            .arg(\"--image-dir\").arg(&image)\n            .arg(\"--work-dir\").arg(&tmpdir(builder))\n            .arg(\"--output-dir\").arg(&distdir(builder))\n            .arg(format!(\"--package-name={}-{}\", name, target))\n-           .arg(format!(\"--component-name=rust-std-{}\", target))\n+           .arg(format!(\"--component-name=rust-stdZ-{}\", target))\n            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n         builder.info(&format!(\"Dist std stage{} ({} -> {})\","}]}