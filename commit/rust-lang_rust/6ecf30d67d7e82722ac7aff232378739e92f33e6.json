{"sha": "6ecf30d67d7e82722ac7aff232378739e92f33e6", "node_id": "C_kwDOAAsO6NoAKDZlY2YzMGQ2N2Q3ZTgyNzIyYWM3YWZmMjMyMzc4NzM5ZTkyZjMzZTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-03T20:53:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-22T11:04:53Z"}, "message": "Inline encode_enum_variant_info.", "tree": {"sha": "30995d77aa7737f3f0e3a96c7c0992f7bf0104de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30995d77aa7737f3f0e3a96c7c0992f7bf0104de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ecf30d67d7e82722ac7aff232378739e92f33e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecf30d67d7e82722ac7aff232378739e92f33e6", "html_url": "https://github.com/rust-lang/rust/commit/6ecf30d67d7e82722ac7aff232378739e92f33e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ecf30d67d7e82722ac7aff232378739e92f33e6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f6564fdd05c9bb0168be0554626de2886f1314", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f6564fdd05c9bb0168be0554626de2886f1314", "html_url": "https://github.com/rust-lang/rust/commit/d7f6564fdd05c9bb0168be0554626de2886f1314"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "6227d01bcfae91aeb04d2a3bcfb7b79bb770c751", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6ecf30d67d7e82722ac7aff232378739e92f33e6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ecf30d67d7e82722ac7aff232378739e92f33e6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6ecf30d67d7e82722ac7aff232378739e92f33e6", "patch": "@@ -1223,36 +1223,26 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // so it's easier to do that here then to wait until we would encounter\n         // normally in the visitor walk.\n         for variant in adt_def.variants().iter() {\n-            self.encode_enum_variant_info(variant);\n-        }\n-    }\n-\n-    fn encode_enum_variant_info(&mut self, variant: &ty::VariantDef) {\n-        let tcx = self.tcx;\n-        let def_id = variant.def_id;\n-        debug!(\"EncodeContext::encode_enum_variant_info({:?})\", def_id);\n+            let data = VariantData {\n+                discr: variant.discr,\n+                ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n+                is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n+            };\n+            record!(self.tables.variant_data[variant.def_id] <- data);\n \n-        let data = VariantData {\n-            discr: variant.discr,\n-            ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n-            is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n-        };\n+            self.tables.constness.set(variant.def_id.index, hir::Constness::Const);\n+            record_array!(self.tables.children[variant.def_id] <- variant.fields.iter().map(|f| {\n+                assert!(f.did.is_local());\n+                f.did.index\n+            }));\n \n-        record!(self.tables.variant_data[def_id] <- data);\n-        self.tables.constness.set(def_id.index, hir::Constness::Const);\n-        record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n-            assert!(f.did.is_local());\n-            f.did.index\n-        }));\n-        if let Some((CtorKind::Fn, ctor_def_id)) = variant.ctor {\n-            debug!(\"EncodeContext::encode_enum_variant_ctor({:?})\", ctor_def_id);\n-\n-            self.tables.constness.set(ctor_def_id.index, hir::Constness::Const);\n-\n-            let fn_sig = tcx.fn_sig(ctor_def_id);\n-            record!(self.tables.fn_sig[ctor_def_id] <- fn_sig);\n-            // FIXME(eddyb) encode signature only for `ctor_def_id`.\n-            record!(self.tables.fn_sig[def_id] <- fn_sig);\n+            if let Some((CtorKind::Fn, ctor_def_id)) = variant.ctor {\n+                self.tables.constness.set(ctor_def_id.index, hir::Constness::Const);\n+                let fn_sig = tcx.fn_sig(ctor_def_id);\n+                record!(self.tables.fn_sig[ctor_def_id] <- fn_sig);\n+                // FIXME only encode signature for ctor_def_id\n+                record!(self.tables.fn_sig[variant.def_id] <- fn_sig);\n+            }\n         }\n     }\n "}]}