{"sha": "fa2b381ec83556111a99750bcc7688521d7e8b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmIzODFlYzgzNTU2MTExYTk5NzUwYmNjNzY4ODUyMWQ3ZThiMGQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-10T20:30:51Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T01:43:57Z"}, "message": "rustc_codegen_llvm: move DISubprogram creation to a dbg_scope_fn method.", "tree": {"sha": "1eac177420f887852e79f82f457eeea49dfffdfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eac177420f887852e79f82f457eeea49dfffdfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2b381ec83556111a99750bcc7688521d7e8b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2b381ec83556111a99750bcc7688521d7e8b0d", "html_url": "https://github.com/rust-lang/rust/commit/fa2b381ec83556111a99750bcc7688521d7e8b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2b381ec83556111a99750bcc7688521d7e8b0d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d57c417fc1bac25b0274a34ae581c2e18a9d44e", "html_url": "https://github.com/rust-lang/rust/commit/9d57c417fc1bac25b0274a34ae581c2e18a9d44e"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "2cd745ec420f8b3376c0a19f4d5d6592f4a17a4c", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -80,6 +80,7 @@ impl Funclet<'ll> {\n \n impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type Value = &'ll Value;\n+    // FIXME(eddyb) replace this with a `Function` \"subclass\" of `Value`.\n     type Function = &'ll Value;\n \n     type BasicBlock = &'ll BasicBlock;"}, {"sha": "11855675ccfdd4a35d686dbaf71f21cce13d9072", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -5,7 +5,7 @@ use rustc_codegen_ssa::traits::*;\n \n use crate::common::CodegenCx;\n use crate::llvm;\n-use crate::llvm::debuginfo::{DIScope, DISubprogram};\n+use crate::llvm::debuginfo::DIScope;\n use rustc_middle::mir::{Body, SourceScope};\n use rustc_session::config::DebugInfo;\n \n@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n pub fn compute_mir_scopes(\n     cx: &CodegenCx<'ll, '_>,\n     mir: &Body<'_>,\n-    fn_metadata: &'ll DISubprogram,\n+    fn_dbg_scope: &'ll DIScope,\n     debug_context: &mut FunctionDebugContext<&'ll DIScope>,\n ) {\n     // Find all the scopes with variables defined in them.\n@@ -37,16 +37,16 @@ pub fn compute_mir_scopes(\n     // Instantiate all scopes.\n     for idx in 0..mir.source_scopes.len() {\n         let scope = SourceScope::new(idx);\n-        make_mir_scope(cx, &mir, fn_metadata, &has_variables, debug_context, scope);\n+        make_mir_scope(cx, &mir, fn_dbg_scope, &has_variables, debug_context, scope);\n     }\n }\n \n fn make_mir_scope(\n     cx: &CodegenCx<'ll, '_>,\n     mir: &Body<'_>,\n-    fn_metadata: &'ll DISubprogram,\n+    fn_dbg_scope: &'ll DIScope,\n     has_variables: &BitSet<SourceScope>,\n-    debug_context: &mut FunctionDebugContext<&'ll DISubprogram>,\n+    debug_context: &mut FunctionDebugContext<&'ll DIScope>,\n     scope: SourceScope,\n ) {\n     if debug_context.scopes[scope].is_valid() {\n@@ -55,13 +55,13 @@ fn make_mir_scope(\n \n     let scope_data = &mir.source_scopes[scope];\n     let parent_scope = if let Some(parent) = scope_data.parent_scope {\n-        make_mir_scope(cx, mir, fn_metadata, has_variables, debug_context, parent);\n+        make_mir_scope(cx, mir, fn_dbg_scope, has_variables, debug_context, parent);\n         debug_context.scopes[parent]\n     } else {\n         // The root is the function itself.\n         let loc = cx.lookup_debug_loc(mir.span.lo());\n         debug_context.scopes[scope] = DebugScope {\n-            scope_metadata: Some(fn_metadata),\n+            scope_metadata: Some(fn_dbg_scope),\n             file_start_pos: loc.file.start_pos,\n             file_end_pos: loc.file.end_pos,\n         };"}, {"sha": "3f47c62ccaec1e34987c22ac5995d5d61b76b4a4", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -235,16 +235,36 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             return None;\n         }\n \n-        let span = mir.span;\n+        // Initialize fn debug context (including scopes).\n+        // FIXME(eddyb) figure out a way to not need `Option` for `scope_metadata`.\n+        let empty_scope = DebugScope {\n+            scope_metadata: None,\n+            file_start_pos: BytePos(0),\n+            file_end_pos: BytePos(0),\n+        };\n+        let mut fn_debug_context =\n+            FunctionDebugContext { scopes: IndexVec::from_elem(empty_scope, &mir.source_scopes) };\n \n-        // This can be the case for functions inlined from another crate\n-        if span.is_dummy() {\n-            // FIXME(simulacrum): Probably can't happen; remove.\n-            return None;\n-        }\n+        // Fill in all the scopes, with the information from the MIR body.\n+        compute_mir_scopes(\n+            self,\n+            mir,\n+            self.dbg_scope_fn(instance, fn_abi, Some(llfn)),\n+            &mut fn_debug_context,\n+        );\n+\n+        Some(fn_debug_context)\n+    }\n \n+    fn dbg_scope_fn(\n+        &self,\n+        instance: Instance<'tcx>,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+        maybe_definition_llfn: Option<&'ll Value>,\n+    ) -> &'ll DIScope {\n         let def_id = instance.def_id();\n         let containing_scope = get_containing_scope(self, instance);\n+        let span = self.tcx.def_span(def_id);\n         let loc = self.lookup_debug_loc(span.lo());\n         let file_metadata = file_metadata(self, &loc.file);\n \n@@ -291,8 +311,8 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             }\n         }\n \n-        let fn_metadata = unsafe {\n-            llvm::LLVMRustDIBuilderCreateFunction(\n+        unsafe {\n+            return llvm::LLVMRustDIBuilderCreateFunction(\n                 DIB(self),\n                 containing_scope,\n                 name.as_ptr().cast(),\n@@ -305,26 +325,11 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 scope_line.unwrap_or(UNKNOWN_LINE_NUMBER),\n                 flags,\n                 spflags,\n-                llfn,\n+                maybe_definition_llfn,\n                 template_parameters,\n                 None,\n-            )\n-        };\n-\n-        // Initialize fn debug context (including scopes).\n-        // FIXME(eddyb) figure out a way to not need `Option` for `scope_metadata`.\n-        let null_scope = DebugScope {\n-            scope_metadata: None,\n-            file_start_pos: BytePos(0),\n-            file_end_pos: BytePos(0),\n-        };\n-        let mut fn_debug_context =\n-            FunctionDebugContext { scopes: IndexVec::from_elem(null_scope, &mir.source_scopes) };\n-\n-        // Fill in all the scopes, with the information from the MIR body.\n-        compute_mir_scopes(self, mir, fn_metadata, &mut fn_debug_context);\n-\n-        return Some(fn_debug_context);\n+            );\n+        }\n \n         fn get_function_signature<'ll, 'tcx>(\n             cx: &CodegenCx<'ll, 'tcx>,"}, {"sha": "8305f654e03a80f532751e1db17e3193cfbd2255", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -1854,7 +1854,7 @@ extern \"C\" {\n         ScopeLine: c_uint,\n         Flags: DIFlags,\n         SPFlags: DISPFlags,\n-        Fn: &'a Value,\n+        MaybeFn: Option<&'a Value>,\n         TParam: &'a DIArray,\n         Decl: Option<&'a DIDescriptor>,\n     ) -> &'a DISubprogram;"}, {"sha": "3d2e0ac7be2fc37970e79cb6e48d3319be316d36", "filename": "compiler/rustc_codegen_ssa/src/traits/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fdebuginfo.rs?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -21,6 +21,15 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         mir: &mir::Body<'_>,\n     ) -> Option<FunctionDebugContext<Self::DIScope>>;\n \n+    // FIXME(eddyb) find a common convention for all of the debuginfo-related\n+    // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n+    fn dbg_scope_fn(\n+        &self,\n+        instance: Instance<'tcx>,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+        maybe_definition_llfn: Option<Self::Function>,\n+    ) -> Self::DIScope;\n+\n     fn extend_scope_to_file(\n         &self,\n         scope_metadata: Self::DIScope,"}, {"sha": "dbd02a0ca3dba0264cdcdf3c8e1d934b09870118", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fa2b381ec83556111a99750bcc7688521d7e8b0d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=fa2b381ec83556111a99750bcc7688521d7e8b0d", "patch": "@@ -733,7 +733,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n     const char *LinkageName, size_t LinkageNameLen,\n     LLVMMetadataRef File, unsigned LineNo,\n     LLVMMetadataRef Ty, unsigned ScopeLine, LLVMRustDIFlags Flags,\n-    LLVMRustDISPFlags SPFlags, LLVMValueRef Fn, LLVMMetadataRef TParam,\n+    LLVMRustDISPFlags SPFlags, LLVMValueRef MaybeFn, LLVMMetadataRef TParam,\n     LLVMMetadataRef Decl) {\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n@@ -750,7 +750,8 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n       unwrapDI<DIFile>(File), LineNo,\n       unwrapDI<DISubroutineType>(Ty), ScopeLine, llvmFlags,\n       llvmSPFlags, TParams, unwrapDIPtr<DISubprogram>(Decl));\n-  unwrap<Function>(Fn)->setSubprogram(Sub);\n+  if (MaybeFn)\n+    unwrap<Function>(MaybeFn)->setSubprogram(Sub);\n   return wrap(Sub);\n }\n "}]}