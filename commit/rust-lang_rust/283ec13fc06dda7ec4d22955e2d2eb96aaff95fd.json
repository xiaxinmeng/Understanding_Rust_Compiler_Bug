{"sha": "283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4M2VjMTNmYzA2ZGRhN2VjNGQyMjk1NWUyZDJlYjk2YWFmZjk1ZmQ=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-10T19:56:49Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-18T07:15:43Z"}, "message": "Fix type \"items\" order.", "tree": {"sha": "9d51e0c0e3ff100524cab9bdbda3216429992aed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d51e0c0e3ff100524cab9bdbda3216429992aed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "html_url": "https://github.com/rust-lang/rust/commit/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50157f33025b6ff01809b975a3d12c0e43a0072", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50157f33025b6ff01809b975a3d12c0e43a0072", "html_url": "https://github.com/rust-lang/rust/commit/c50157f33025b6ff01809b975a3d12c0e43a0072"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "64b9a4cc3a6e11ccd8df86d5210da7d26956d4d9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "patch": "@@ -27,7 +27,7 @@ use hir_ty::{\n     display::{HirDisplayError, HirFormatter},\n     expr::ExprValidator,\n     method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, OpaqueTyId,\n-    Substs, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n@@ -1381,7 +1381,7 @@ impl Type {\n         }\n     }\n \n-    /// Returns a flattened list of all the ADTs and Traits mentioned in the type\n+    /// Returns a flattened list of all ADTs and Traits mentioned in the type\n     pub fn flattened_type_items(&self, db: &dyn HirDatabase) -> Vec<AdtOrTrait> {\n         fn push_new_item(item: AdtOrTrait, acc: &mut Vec<AdtOrTrait>) {\n             if !acc.contains(&item) {\n@@ -1398,27 +1398,38 @@ impl Type {\n                 match p {\n                     GenericPredicate::Implemented(trait_ref) => {\n                         push_new_item(Trait::from(trait_ref.trait_).into(), acc);\n-                        walk_types(db, &trait_ref.substs, acc);\n+                        walk_substs(db, &trait_ref.substs, acc);\n                     }\n                     GenericPredicate::Projection(_) => {}\n                     GenericPredicate::Error => (),\n                 }\n             }\n         }\n \n-        fn walk_types<T: TypeWalk>(db: &dyn HirDatabase, tw: &T, acc: &mut Vec<AdtOrTrait>) {\n-            tw.walk(&mut |ty| walk_type(db, ty, acc));\n+        // TypeWalk::walk does not preserve items order!\n+        fn walk_substs(db: &dyn HirDatabase, substs: &Substs, acc: &mut Vec<AdtOrTrait>) {\n+            for ty in substs.iter() {\n+                walk_type(db, ty, acc);\n+            }\n         }\n \n         fn walk_type(db: &dyn HirDatabase, ty: &Ty, acc: &mut Vec<AdtOrTrait>) {\n             match ty.strip_references() {\n                 Ty::Apply(ApplicationTy { ctor, parameters, .. }) => {\n                     match ctor {\n                         TypeCtor::Adt(adt_id) => push_new_item(Adt::from(*adt_id).into(), acc),\n+                        TypeCtor::AssociatedType(type_alias_id) => {\n+                            let trait_id = match type_alias_id.lookup(db.upcast()).container {\n+                                AssocContainerId::TraitId(it) => it,\n+                                _ => panic!(\"not an associated type\"),\n+                            };\n+\n+                            push_new_item(Trait::from(trait_id).into(), acc);\n+                        }\n                         _ => (),\n                     }\n                     // adt params, tuples, etc...\n-                    walk_types(db, parameters, acc);\n+                    walk_substs(db, parameters, acc);\n                 }\n                 Ty::Dyn(predicates) => {\n                     push_bounds(db, predicates, acc);\n@@ -1451,7 +1462,7 @@ impl Type {\n                         }\n                     };\n                     push_bounds(db, &bounds.value, acc);\n-                    walk_types(db, &opaque_ty.parameters, acc);\n+                    walk_substs(db, &opaque_ty.parameters, acc);\n                 }\n                 _ => (),\n             }"}, {"sha": "c4ee2ff796b845bf4e1ec40b30c088b47d7a2d31", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ec13fc06dda7ec4d22955e2d2eb96aaff95fd/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=283ec13fc06dda7ec4d22955e2d2eb96aaff95fd", "patch": "@@ -234,9 +234,10 @@ fn runnable_action(\n fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n     match def {\n         Definition::Local(it) => {\n-            let ty = it.ty(db);\n-            let v = ty.flattened_type_items(db);\n-            let targets = v.into_iter()\n+            let targets = it\n+                .ty(db)\n+                .flattened_type_items(db)\n+                .into_iter()\n                 .map(|it| HoverGotoTypeData {\n                     mod_path: adt_or_trait_mod_path(db, &it),\n                     nav: it.to_nav(db),\n@@ -1980,18 +1981,18 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     }\n \n     #[test]\n-    fn test_hover_arg_goto_type_action() {\n+    fn test_hover_goto_type_action_links_order() {\n         let (_, actions) = check_hover_result(\n             \"\n             //- /lib.rs\n             trait ImplTrait<T> {}\n             trait DynTrait<T> {}\n             struct B<T> {}\n             struct S {}\n-        \n-            fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<S>>>) {}\n+\n+            fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n             \",\n-            &[\"&impl ImplTrait<B<dyn DynTrait<S>>>\"],\n+            &[\"&impl ImplTrait<B<dyn DynTrait<B<S>>>>\"],\n         );\n         assert_debug_snapshot!(actions,\n             @r###\"\n@@ -2018,20 +2019,20 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                             },\n                         },\n                         HoverGotoTypeData {\n-                            mod_path: \"S\",\n+                            mod_path: \"B\",\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n                                     1,\n                                 ),\n-                                full_range: 58..69,\n-                                name: \"S\",\n+                                full_range: 43..57,\n+                                name: \"B\",\n                                 kind: STRUCT_DEF,\n                                 focus_range: Some(\n-                                    65..66,\n+                                    50..51,\n                                 ),\n                                 container_name: None,\n                                 description: Some(\n-                                    \"struct S\",\n+                                    \"struct B\",\n                                 ),\n                                 docs: None,\n                             },\n@@ -2056,20 +2057,20 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                             },\n                         },\n                         HoverGotoTypeData {\n-                            mod_path: \"B\",\n+                            mod_path: \"S\",\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n                                     1,\n                                 ),\n-                                full_range: 43..57,\n-                                name: \"B\",\n+                                full_range: 58..69,\n+                                name: \"S\",\n                                 kind: STRUCT_DEF,\n                                 focus_range: Some(\n-                                    50..51,\n+                                    65..66,\n                                 ),\n                                 container_name: None,\n                                 description: Some(\n-                                    \"struct B\",\n+                                    \"struct S\",\n                                 ),\n                                 docs: None,\n                             },"}]}