{"sha": "3e5257f68f2411cbef54569a9340c5f22b2e65bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTI1N2Y2OGYyNDExY2JlZjU0NTY5YTkzNDBjNWYyMmIyZTY1YmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:37Z"}, "message": "rollup merge of #20079: SimonSapin/string_push_ascii_fast_path\n\n`String::push(&mut self, ch: char)` currently has a single code path that calls `Char::encode_utf8`. This adds a fast path for ASCII `char`s, which are represented as a single byte in UTF-8.\n\nBenchmarks of stage1 libcollections at the intermediate commit show that the fast path very significantly improves the performance of repeatedly pushing an ASCII `char`, but does not significantly affect the performance for a non-ASCII `char` (where the fast path is not taken).\n\n```\nbench_push_char_one_byte                  59552 ns/iter (+/- 2132) = 167 MB/s\nbench_push_char_one_byte_with_fast_path    6563 ns/iter (+/- 658) = 1523 MB/s\nbench_push_char_two_bytes                 71520 ns/iter (+/- 3541) = 279 MB/s\nbench_push_char_two_bytes_with_slow_path  71452 ns/iter (+/- 4202) = 279 MB/s\nbench_push_str_one_byte                   38910 ns/iter (+/- 2477) = 257 MB/s\n```\n\nA benchmark of pushing a one-byte-long `&str` is added for comparison, but its performance [has varied a lot lately](https://github.com/rust-lang/rust/pull/19640#issuecomment-67741561). (When the input is fixed, `s.push_str(\"x\")` could be used just as well as `s.push('x')`.)", "tree": {"sha": "4d478116204cb1f37513955e88795bbcd1f2a2a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d478116204cb1f37513955e88795bbcd1f2a2a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5257f68f2411cbef54569a9340c5f22b2e65bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5257f68f2411cbef54569a9340c5f22b2e65bb", "html_url": "https://github.com/rust-lang/rust/commit/3e5257f68f2411cbef54569a9340c5f22b2e65bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5257f68f2411cbef54569a9340c5f22b2e65bb/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0191dce41dcb18253581bb28d1e09867e3b9d759", "url": "https://api.github.com/repos/rust-lang/rust/commits/0191dce41dcb18253581bb28d1e09867e3b9d759", "html_url": "https://github.com/rust-lang/rust/commit/0191dce41dcb18253581bb28d1e09867e3b9d759"}, {"sha": "e40a81b37bf11ae6f7fc3294ac17230eabaaab03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40a81b37bf11ae6f7fc3294ac17230eabaaab03", "html_url": "https://github.com/rust-lang/rust/commit/e40a81b37bf11ae6f7fc3294ac17230eabaaab03"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "76f69dbdb744bdd2c322fb461e7a4cff3023be4c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e5257f68f2411cbef54569a9340c5f22b2e65bb/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5257f68f2411cbef54569a9340c5f22b2e65bb/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=3e5257f68f2411cbef54569a9340c5f22b2e65bb", "patch": "@@ -513,6 +513,11 @@ impl String {\n     #[inline]\n     #[stable = \"function just renamed from push_char\"]\n     pub fn push(&mut self, ch: char) {\n+        if (ch as u32) < 0x80 {\n+            self.vec.push(ch as u8);\n+            return;\n+        }\n+\n         let cur_len = self.len();\n         // This may use up to 4 bytes.\n         self.vec.reserve(4);\n@@ -1401,6 +1406,41 @@ mod tests {\n         });\n     }\n \n+    const REPETITIONS: u64 = 10_000;\n+\n+    #[bench]\n+    fn bench_push_str_one_byte(b: &mut Bencher) {\n+        b.bytes = REPETITIONS;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push_str(\"a\")\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_one_byte(b: &mut Bencher) {\n+        b.bytes = REPETITIONS;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push('a')\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    fn bench_push_char_two_bytes(b: &mut Bencher) {\n+        b.bytes = REPETITIONS * 2;\n+        b.iter(|| {\n+            let mut r = String::new();\n+            for _ in range(0, REPETITIONS) {\n+                r.push('\u00e2')\n+            }\n+        });\n+    }\n+\n     #[bench]\n     fn from_utf8_lossy_100_ascii(b: &mut Bencher) {\n         let s = b\"Hello there, the quick brown fox jumped over the lazy dog! \\"}]}