{"sha": "30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZDcyNzk2MjhiMmU0ZTNmOWRjN2VmZDJhOWQyZDcwMThmNDhhNWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T11:57:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T08:32:20Z"}, "message": "hir::ItemKind::Fn: use hir::MethodSig", "tree": {"sha": "9032b4c7f9accf767fb12d2ef01d5abb2589eae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9032b4c7f9accf767fb12d2ef01d5abb2589eae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "html_url": "https://github.com/rust-lang/rust/commit/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34472b77084c9f76f872871aeab121daf81fb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34472b77084c9f76f872871aeab121daf81fb99", "html_url": "https://github.com/rust-lang/rust/commit/c34472b77084c9f76f872871aeab121daf81fb99"}], "stats": {"total": 158, "additions": 77, "deletions": 81}, "files": [{"sha": "72de8ccd952d30f2562c2943778f6c87697afb6a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -481,13 +481,13 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_nested_body(body);\n         }\n-        ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n+        ItemKind::Fn(ref sig, ref generics, body_id) => {\n             visitor.visit_fn(FnKind::ItemFn(item.ident,\n                                             generics,\n-                                            header,\n+                                            sig.header,\n                                             &item.vis,\n                                             &item.attrs),\n-                             declaration,\n+                             &sig.decl,\n                              body_id,\n                              item.span,\n                              item.hir_id)"}, {"sha": "5bc9fcb12f178c043bc3d5378749a62d51300e54", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -317,7 +317,7 @@ impl LoweringContext<'_> {\n                     // declaration (decl), not the return types.\n                     let body_id = this.lower_maybe_async_body(&decl, header.asyncness.node, body);\n \n-                    let (generics, fn_decl) = this.add_in_band_defs(\n+                    let (generics, decl) = this.add_in_band_defs(\n                         generics,\n                         fn_def_id,\n                         AnonymousLifetimeMode::PassThrough,\n@@ -328,13 +328,8 @@ impl LoweringContext<'_> {\n                             header.asyncness.node.opt_return_id()\n                         ),\n                     );\n-\n-                    hir::ItemKind::Fn(\n-                        fn_decl,\n-                        this.lower_fn_header(header),\n-                        generics,\n-                        body_id,\n-                    )\n+                    let sig = hir::MethodSig { decl, header: this.lower_fn_header(header) };\n+                    hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),"}, {"sha": "b2f4a015711dbbbcca4ba2980ec31b95df58cfa2", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -219,16 +219,16 @@ impl<'a> FnLikeNode<'a> {\n     {\n         match self.node {\n             map::Node::Item(i) => match i.kind {\n-                ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n+                ast::ItemKind::Fn(ref sig, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.hir_id,\n                         ident: i.ident,\n-                        decl: &decl,\n+                        decl: &sig.decl,\n                         body: block,\n                         vis: &i.vis,\n                         span: i.span,\n                         attrs: &i.attrs,\n-                        header,\n+                        header: sig.header,\n                         generics,\n                     }),\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),"}, {"sha": "d7b1676c1d4d397ac3ad1e72b7de81031292eba8", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -49,21 +49,21 @@ impl<'hir> Entry<'hir> {\n         match self.node {\n             Node::Item(ref item) => {\n                 match item.kind {\n-                    ItemKind::Fn(ref fn_decl, _, _, _) => Some(fn_decl),\n+                    ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n \n             Node::TraitItem(ref item) => {\n                 match item.kind {\n-                    TraitItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None\n                 }\n             }\n \n             Node::ImplItem(ref item) => {\n                 match item.kind {\n-                    ImplItemKind::Method(ref method_sig, _) => Some(&method_sig.decl),\n+                    ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n                     _ => None,\n                 }\n             }\n@@ -85,7 +85,7 @@ impl<'hir> Entry<'hir> {\n                 match item.kind {\n                     ItemKind::Const(_, body) |\n                     ItemKind::Static(.., body) |\n-                    ItemKind::Fn(_, _, _, body) => Some(body),\n+                    ItemKind::Fn(.., body) => Some(body),\n                     _ => None,\n                 }\n             }\n@@ -605,7 +605,7 @@ impl<'hir> Map<'hir> {\n                 Node::TraitItem(ref trait_item) => Some(&trait_item.generics),\n                 Node::Item(ref item) => {\n                     match item.kind {\n-                        ItemKind::Fn(_, _, ref generics, _) |\n+                        ItemKind::Fn(_, ref generics, _) |\n                         ItemKind::TyAlias(_, ref generics) |\n                         ItemKind::Enum(_, ref generics) |\n                         ItemKind::Struct(_, ref generics) |\n@@ -702,9 +702,9 @@ impl<'hir> Map<'hir> {\n                 ..\n             }) => true,\n             Node::Item(&Item {\n-                kind: ItemKind::Fn(_, header, ..),\n+                kind: ItemKind::Fn(ref sig, ..),\n                 ..\n-            }) => header.constness == Constness::Const,\n+            }) => sig.header.constness == Constness::Const,\n             _ => false,\n         }\n     }"}, {"sha": "93503c1509448ea8abf655aa43c187f6434244e3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -2534,7 +2534,7 @@ pub enum ItemKind {\n     /// A `const` item.\n     Const(P<Ty>, BodyId),\n     /// A function declaration.\n-    Fn(P<FnDecl>, FnHeader, Generics, BodyId),\n+    Fn(MethodSig, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`.\n@@ -2599,7 +2599,7 @@ impl ItemKind {\n \n     pub fn generics(&self) -> Option<&Generics> {\n         Some(match *self {\n-            ItemKind::Fn(_, _, ref generics, _) |\n+            ItemKind::Fn(_, ref generics, _) |\n             ItemKind::TyAlias(_, ref generics) |\n             ItemKind::OpaqueTy(OpaqueTy { ref generics, impl_trait_fn: None, .. }) |\n             ItemKind::Enum(_, ref generics) |"}, {"sha": "69d2a9ad2810d174db74cd2776b540778d490305", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -533,10 +533,10 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer cbox\n             }\n-            hir::ItemKind::Fn(ref decl, header, ref param_names, body) => {\n+            hir::ItemKind::Fn(ref sig, ref param_names, body) => {\n                 self.head(\"\");\n-                self.print_fn(decl,\n-                              header,\n+                self.print_fn(&sig.decl,\n+                              sig.header,\n                               Some(item.ident.name),\n                               param_names,\n                               &item.vis,"}, {"sha": "db5557204e4da2945d6b9ddfa9590aa750a0aa61", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -31,10 +31,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             if let Some(hir_id) = self.tcx().hir().as_local_hir_id(def_id) {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item {\n-                        kind: hir::ItemKind::Fn(ref fndecl, ..),\n+                        kind: hir::ItemKind::Fn(ref m, ..),\n                         ..\n-                    }) => &fndecl,\n-                    Node::TraitItem(&hir::TraitItem {\n+                    })\n+                    | Node::TraitItem(&hir::TraitItem {\n                         kind: hir::TraitItemKind::Method(ref m, ..),\n                         ..\n                     })"}, {"sha": "f77f5a72e60ce88cd0010206598fa34e0d8ed4a3", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -33,7 +33,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n \n     match item.kind {\n-        hir::ItemKind::Fn(_, header, ..) if header.is_const() => {\n+        hir::ItemKind::Fn(ref sig, ..) if sig.header.is_const() => {\n             return true;\n         }\n         hir::ItemKind::Impl(..) |\n@@ -225,8 +225,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let Node::Item(item) = *node {\n-                let reachable = if let hir::ItemKind::Fn(_, header, ..) = item.kind {\n-                    header.abi != Abi::Rust\n+                let reachable = if let hir::ItemKind::Fn(ref sig, ..) = item.kind {\n+                    sig.header.abi != Abi::Rust\n                 } else {\n                     false\n                 };"}, {"sha": "f37d9b2827be03c26cc4b2b1cca2c857d1f7624b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -460,8 +460,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.kind {\n-            hir::ItemKind::Fn(ref decl, _, ref generics, _) => {\n-                self.visit_early_late(None, decl, generics, |this| {\n+            hir::ItemKind::Fn(ref sig, ref generics, _) => {\n+                self.visit_early_late(None, &sig.decl, generics, |this| {\n                     intravisit::walk_item(this, item);\n                 });\n             }\n@@ -1524,8 +1524,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             {\n                 match parent {\n                     Node::Item(item) => {\n-                        if let hir::ItemKind::Fn(decl, _, _, _) = &item.kind {\n-                            find_arg_use_span(&decl.inputs);\n+                        if let hir::ItemKind::Fn(sig, _, _) = &item.kind {\n+                            find_arg_use_span(&sig.decl.inputs);\n                         }\n                     },\n                     Node::ImplItem(impl_item) => {"}, {"sha": "54c01034221734ff456b29ea73ccbab837117091", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -383,9 +383,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n         if let hir::Node::Item(\n-            hir::Item{kind: hir::ItemKind::Fn(_ ,fn_header ,_ , body_id), .. }) = &node {\n+            hir::Item{kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n             self.describe_generator(*body_id).or_else(||\n-                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = fn_header {\n+                Some(if let hir::FnHeader{ asyncness: hir::IsAsync::Async, .. } = sig.header {\n                     \"an async function\"\n                 } else {\n                     \"a function\"\n@@ -1081,7 +1081,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n \n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), ..\n                 }) |\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     kind: hir::ItemKind::Impl(_, _, _, generics, ..), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Fn(_, _, generics, _), span, ..\n+                    kind: hir::ItemKind::Fn(_, generics, _), span, ..\n                 }) |\n                 hir::Node::Item(hir::Item {\n                     kind: hir::ItemKind::TyAlias(_, generics), span, ..\n@@ -1436,12 +1436,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(decl, _, _, body_id),\n+            kind: hir::ItemKind::Fn(sig, _, body_id),\n             ..\n         })) = node {\n             let body = hir.body(*body_id);\n             if let hir::ExprKind::Block(blk, _) = &body.value.kind {\n-                if decl.output.span().overlaps(span) && blk.expr.is_none() &&\n+                if sig.decl.output.span().overlaps(span) && blk.expr.is_none() &&\n                     \"()\" == &trait_ref.self_ty().to_string()\n                 {\n                     // FIXME(estebank): When encountering a method with a trait\n@@ -1493,20 +1493,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             Node::Item(&hir::Item {\n                 span,\n-                kind: hir::ItemKind::Fn(ref decl, ..),\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n                 ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 span,\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::ImplItemKind::Method(ref sig, _),\n                 ..\n             }) |\n             Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(hir::MethodSig { ref decl, .. }, _),\n+                kind: hir::TraitItemKind::Method(ref sig, _),\n                 ..\n             }) => {\n-                (self.tcx.sess.source_map().def_span(span), decl.inputs.iter()\n+                (self.tcx.sess.source_map().def_span(span), sig.decl.inputs.iter()\n                         .map(|arg| match arg.clone().kind {\n                     hir::TyKind::Tup(ref tys) => ArgKind::Tuple(\n                         Some(arg.span),\n@@ -2040,11 +2040,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .and_then(|parent_did| self.tcx.hir().get_if_local(parent_did));\n         debug!(\"note_obligation_cause_for_async_await: parent_node={:?}\", parent_node);\n         if let Some(hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(sig, _, _),\n             ..\n         })) = parent_node {\n-            debug!(\"note_obligation_cause_for_async_await: header={:?}\", header);\n-            if header.asyncness != hir::IsAsync::Async {\n+            debug!(\"note_obligation_cause_for_async_await: header={:?}\", sig.header);\n+            if sig.header.asyncness != hir::IsAsync::Async {\n                 return false;\n             }\n         }"}, {"sha": "c6677ea3534d028fd81912986192edb730889efc", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -1095,10 +1095,10 @@ impl EncodeContext<'tcx> {\n                     self.encode_rendered_const_for_body(body_id)\n                 )\n             }\n-            hir::ItemKind::Fn(_, header, .., body) => {\n+            hir::ItemKind::Fn(ref sig, .., body) => {\n                 let data = FnData {\n-                    asyncness: header.asyncness,\n-                    constness: header.constness,\n+                    asyncness: sig.header.asyncness,\n+                    constness: sig.header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                 };\n \n@@ -1284,14 +1284,14 @@ impl EncodeContext<'tcx> {\n \n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n-            hir::ItemKind::Fn(_, header, ..) => {\n+            hir::ItemKind::Fn(ref sig, ..) => {\n                 let generics = tcx.generics_of(def_id);\n                 let needs_inline =\n                     (generics.requires_monomorphization(tcx) ||\n                         tcx.codegen_fn_attrs(def_id).requests_inline()) &&\n                         !self.metadata_output_only();\n                 let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n-                needs_inline || header.constness == hir::Constness::Const || always_encode_mir\n+                needs_inline || sig.header.constness == hir::Constness::Const || always_encode_mir\n             }\n             _ => false,\n         };"}, {"sha": "59301619b4bdd916c4b05b55a11fc3ff2f4e307a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -30,7 +30,12 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span) = match tcx.hir().get(id) {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n-        | Node::Item(hir::Item { kind: hir::ItemKind::Fn(decl, _, _, body_id), .. })\n+        | Node::Item(\n+            hir::Item {\n+                kind: hir::ItemKind::Fn(hir::MethodSig { decl, .. }, _, body_id),\n+                ..\n+            }\n+        )\n         | Node::ImplItem(\n             hir::ImplItem {\n                 kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),"}, {"sha": "4b57cb75cea48ea98ce9569951ca3ef281562240", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -576,10 +576,10 @@ fn is_enclosed(\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(Node::Item(&hir::Item {\n-            kind: hir::ItemKind::Fn(_, header, _, _),\n+            kind: hir::ItemKind::Fn(ref sig, _, _),\n             ..\n         })) = tcx.hir().find(parent_id) {\n-            match header.unsafety {\n+            match sig.header.unsafety {\n                 hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n                 hir::Unsafety::Normal => None,\n             }"}, {"sha": "39a7996df0cdca2c41ef8bcb82dedf6be6fbc710", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -815,8 +815,8 @@ fn primary_body_of(\n                 hir::ItemKind::Const(ref ty, body) |\n                 hir::ItemKind::Static(ref ty, _, body) =>\n                     Some((body, Some(ty), None, None)),\n-                hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, None, Some(header), Some(decl))),\n+                hir::ItemKind::Fn(ref sig, .., body) =>\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n@@ -1297,7 +1297,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -1345,7 +1345,7 @@ fn check_fn<'a, 'tcx>(\n                     }\n \n                     if let Node::Item(item) = fcx.tcx.hir().get(fn_id) {\n-                        if let ItemKind::Fn(_, _, ref generics, _) = item.kind {\n+                        if let ItemKind::Fn(_, ref generics, _) = item.kind {\n                             if !generics.params.is_empty() {\n                                 fcx.tcx.sess.span_err(\n                                     span,\n@@ -4278,7 +4278,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item {\n-                kind: hir::ItemKind::Fn(_, _, _, body_id), ..\n+                kind: hir::ItemKind::Fn(_, _, body_id), ..\n             }) |\n             Node::ImplItem(&hir::ImplItem {\n                 kind: hir::ImplItemKind::Method(_, body_id), ..\n@@ -4303,23 +4303,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn get_node_fn_decl(&self, node: Node<'tcx>) -> Option<(&'tcx hir::FnDecl, ast::Ident, bool)> {\n         match node {\n             Node::Item(&hir::Item {\n-                ident, kind: hir::ItemKind::Fn(ref decl, ..), ..\n+                ident, kind: hir::ItemKind::Fn(ref sig, ..), ..\n             }) => {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n-                Some((decl, ident, ident.name != sym::main))\n+                Some((&sig.decl, ident, ident.name != sym::main))\n             }\n             Node::TraitItem(&hir::TraitItem {\n-                ident, kind: hir::TraitItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, true)),\n+                ident, kind: hir::TraitItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n-                ident, kind: hir::ImplItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) => Some((decl, ident, false)),\n+                ident, kind: hir::ImplItemKind::Method(ref sig, ..), ..\n+            }) => Some((&sig.decl, ident, false)),\n             _ => None,\n         }\n     }"}, {"sha": "68fd29d04e33fd36253f55d684de00b3688a6442", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -885,8 +885,8 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             _ => None,\n         },\n         Node::Item(item) => match item.kind {\n-            hir::ItemKind::Fn(ref fn_decl, .., ref generics, _) => {\n-                has_late_bound_regions(tcx, generics, fn_decl)\n+            hir::ItemKind::Fn(ref sig, .., ref generics, _) => {\n+                has_late_bound_regions(tcx, generics, &sig.decl)\n             }\n             _ => None,\n         },\n@@ -1779,17 +1779,17 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n             ..\n         })\n         | ImplItem(hir::ImplItem {\n-            kind: ImplItemKind::Method(MethodSig { header, decl }, _),\n+            kind: ImplItemKind::Method(sig, _),\n             ..\n         })\n         | Item(hir::Item {\n-            kind: ItemKind::Fn(decl, header, _, _),\n+            kind: ItemKind::Fn(sig, _, _),\n             ..\n-        }) => match get_infer_ret_ty(&decl.output) {\n+        }) => match get_infer_ret_ty(&sig.decl.output) {\n             Some(ty) => {\n                 let fn_sig = tcx.typeck_tables_of(def_id).liberated_fn_sigs()[hir_id];\n                 let mut diag = bad_placeholder_type(tcx, ty.span);\n@@ -1805,7 +1805,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                 diag.emit();\n                 ty::Binder::bind(fn_sig)\n             },\n-            None => AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)\n+            None => AstConv::ty_of_fn(&icx, sig.header.unsafety, sig.header.abi, &sig.decl)\n         },\n \n         TraitItem(hir::TraitItem {"}, {"sha": "aea9b7c38efba1734c8ae23055d112f68c67b92d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "patch": "@@ -438,8 +438,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.structs.push(self.visit_variant_data(item, ident.name, sd, gen)),\n             hir::ItemKind::Union(ref sd, ref gen) =>\n                 om.unions.push(self.visit_union_data(item, ident.name, sd, gen)),\n-            hir::ItemKind::Fn(ref fd, header, ref gen, body) =>\n-                self.visit_fn(om, item, ident.name, &**fd, header, gen, body),\n+            hir::ItemKind::Fn(ref sig, ref gen, body) =>\n+                self.visit_fn(om, item, ident.name, &sig.decl, sig.header, gen, body),\n             hir::ItemKind::TyAlias(ref ty, ref gen) => {\n                 let t = Typedef {\n                     ty,"}]}