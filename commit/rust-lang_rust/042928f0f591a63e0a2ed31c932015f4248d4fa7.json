{"sha": "042928f0f591a63e0a2ed31c932015f4248d4fa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MjkyOGYwZjU5MWE2M2UwYTJlZDMxYzkzMjAxNWY0MjQ4ZDRmYTc=", "commit": {"author": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-01T07:28:16Z"}, "committer": {"name": "Josef Reinhard Brandl", "email": "mail@josefbrandl.de", "date": "2018-07-02T11:59:40Z"}, "message": "`UnsafeFutureObj` impl for `PinMut`", "tree": {"sha": "304e3ee83eb3acb74ff10ba31405798c807c5c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304e3ee83eb3acb74ff10ba31405798c807c5c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042928f0f591a63e0a2ed31c932015f4248d4fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042928f0f591a63e0a2ed31c932015f4248d4fa7", "html_url": "https://github.com/rust-lang/rust/commit/042928f0f591a63e0a2ed31c932015f4248d4fa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042928f0f591a63e0a2ed31c932015f4248d4fa7/comments", "author": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MajorBreakfast", "id": 340142, "node_id": "MDQ6VXNlcjM0MDE0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/340142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MajorBreakfast", "html_url": "https://github.com/MajorBreakfast", "followers_url": "https://api.github.com/users/MajorBreakfast/followers", "following_url": "https://api.github.com/users/MajorBreakfast/following{/other_user}", "gists_url": "https://api.github.com/users/MajorBreakfast/gists{/gist_id}", "starred_url": "https://api.github.com/users/MajorBreakfast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MajorBreakfast/subscriptions", "organizations_url": "https://api.github.com/users/MajorBreakfast/orgs", "repos_url": "https://api.github.com/users/MajorBreakfast/repos", "events_url": "https://api.github.com/users/MajorBreakfast/events{/privacy}", "received_events_url": "https://api.github.com/users/MajorBreakfast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bf2223672973f9d86f6c173793bcfce7890cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bf2223672973f9d86f6c173793bcfce7890cd8", "html_url": "https://github.com/rust-lang/rust/commit/d8bf2223672973f9d86f6c173793bcfce7890cd8"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "7f6d27088b77c5b0bf18904daeaed8413d13aff0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=042928f0f591a63e0a2ed31c932015f4248d4fa7", "patch": "@@ -58,17 +58,16 @@\n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n+use core::convert::From;\n use core::fmt;\n-use core::future::Future;\n+use core::future::{Future, FutureObj, LocalFutureObj, UnsafeFutureObj};\n use core::hash::{Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{Unpin, Unsize};\n use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n-use core::future::{FutureObj, LocalFutureObj, UnsafeFutureObj};\n use core::task::{Context, Poll};\n-use core::convert::From;\n \n use raw_vec::RawVec;\n use str::from_boxed_utf8_unchecked;\n@@ -939,14 +938,14 @@ unsafe impl<'a, T, F: Future<Output = T> + 'a> UnsafeFutureObj<'a, T> for PinBox\n         PinBox::into_raw(self) as *mut ()\n     }\n \n-    unsafe fn poll(task: *mut (), cx: &mut Context) -> Poll<T> {\n-        let ptr = task as *mut F;\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        let ptr = ptr as *mut F;\n         let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n         pin.poll(cx)\n     }\n \n-    unsafe fn drop(task: *mut ()) {\n-        drop(PinBox::from_raw(task as *mut F))\n+    unsafe fn drop(ptr: *mut ()) {\n+        drop(PinBox::from_raw(ptr as *mut F))\n     }\n }\n "}, {"sha": "67bd3de98c1ae7af70b8cae41bd7aa3a6d8fcede", "filename": "src/libcore/future/future_obj.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture_obj.rs?ref=042928f0f591a63e0a2ed31c932015f4248d4fa7", "patch": "@@ -126,7 +126,7 @@ impl<'a, T> Future for FutureObj<'a, T> {\n /// a non-concurrent fashion) with the result of `into_raw` until `drop` is\n /// called.\n pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n-    /// Convert a owned instance into a (conceptually owned) void pointer.\n+    /// Convert an owned instance into a (conceptually owned) void pointer.\n     fn into_raw(self) -> *mut ();\n \n     /// Poll the future represented by the given void pointer.\n@@ -136,7 +136,7 @@ pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n     /// The trait implementor must guarantee that it is safe to repeatedly call\n     /// `poll` with the result of `into_raw` until `drop` is called; such calls\n     /// are not, however, allowed to race with each other or with calls to `drop`.\n-    unsafe fn poll(future: *mut (), cx: &mut Context) -> Poll<T>;\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T>;\n \n     /// Drops the future represented by the given void pointer.\n     ///\n@@ -145,5 +145,5 @@ pub unsafe trait UnsafeFutureObj<'a, T>: 'a {\n     /// The trait implementor must guarantee that it is safe to call this\n     /// function once per `into_raw` invocation; that call cannot race with\n     /// other calls to `drop` or `poll`.\n-    unsafe fn drop(future: *mut ());\n+    unsafe fn drop(ptr: *mut ());\n }"}, {"sha": "5bc55300a97384f313e805399ae9618f7aa66dc5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042928f0f591a63e0a2ed31c932015f4248d4fa7/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=042928f0f591a63e0a2ed31c932015f4248d4fa7", "patch": "@@ -18,10 +18,12 @@\n use clone;\n use cmp;\n use fmt;\n+use future::{Future, UnsafeFutureObj};\n use hash;\n use intrinsics;\n use marker::{Copy, PhantomData, Sized, Unpin, Unsize};\n use ptr;\n+use task::{Context, Poll};\n use ops::{Deref, DerefMut, CoerceUnsized};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1227,3 +1229,18 @@ impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinM\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<'a, T, F: Future<Output = T> + 'a> UnsafeFutureObj<'a, T> for PinMut<'a, F> {\n+    fn into_raw(self) -> *mut () {\n+        unsafe { PinMut::get_mut_unchecked(self) as *mut F as *mut () }\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        PinMut::new_unchecked(&mut *(ptr as *mut F)).poll(cx)\n+    }\n+\n+    unsafe fn drop(ptr: *mut ()) {\n+        drop(PinMut::new_unchecked(&mut *(ptr as *mut F)));\n+    }\n+}"}]}