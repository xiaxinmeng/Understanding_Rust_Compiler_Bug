{"sha": "6f3c8dc11d477a6d680ce018e93f007c31499bd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2M4ZGMxMWQ0NzdhNmQ2ODBjZTAxOGU5M2YwMDdjMzE0OTliZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-15T10:00:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-15T10:00:10Z"}, "message": "Merge #5345\n\n5345: Semantic Highlighting: Emit mutable modifier for 'self' when applicable r=matklad a=Veykril\n\nThis PR implements emitting the mutable modifier for the self keyword when applicable for semantic highlighting as mentioned in #5041. The rendered highlighting test html file:\r\n![firefox_5lbsFNBqsT](https://user-images.githubusercontent.com/3757771/87346245-a5a07280-c551-11ea-9051-e5901255f8c9.png)\r\nAs you can see it does not emit the modifier when `self` is not used in a mutable context even if it is declared mutably in the enclosing function. I'm not sure if this is actually something wanted or not.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ca759aa18be3bb4d30e42ae6e11e14dd673bfe1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca759aa18be3bb4d30e42ae6e11e14dd673bfe1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3c8dc11d477a6d680ce018e93f007c31499bd5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDtOqCRBK7hj4Ov3rIwAAdHIIAKD/bHpjVNhdSBybiar7F2Re\nvNEK0QFAdvJn6iEbKDrYCsJGKHKooSoB4ssqm0jhzUhGcRmtZLEe1kuok5OuOoUg\nqMMFNT9iWIJuOfHtncdJXO3xBplA9jFHVsDhEvtmcWkWXycBMn0NiCNbooBxFLSw\nHD8VGX5gLY4B/cr2V3nkBoQtKH5jXvaeHm2DhQSrS3/to/NxzU9CIBwsWqq06Yvu\nZm/3YfAKoof3syzZRZF0TZzhtq2pXAbMAEvwlXyx0yP5IcXMNX0Ixepf2Q392UNb\nTArGrx7cQhLKKUlsYFoSIVlWO1vqMGT9LnSNrDTyQB4J98OCixHE/kO4pJM0S+0=\n=Psl7\n-----END PGP SIGNATURE-----\n", "payload": "tree ca759aa18be3bb4d30e42ae6e11e14dd673bfe1f\nparent b8b41c5f41a0cf8bf9c15a3bbcdd8d626eb41772\nparent 91b35d882776d7ae8891b3aecf9879164ef183b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594807210 +0000\ncommitter GitHub <noreply@github.com> 1594807210 +0000\n\nMerge #5345\n\n5345: Semantic Highlighting: Emit mutable modifier for 'self' when applicable r=matklad a=Veykril\n\nThis PR implements emitting the mutable modifier for the self keyword when applicable for semantic highlighting as mentioned in #5041. The rendered highlighting test html file:\r\n![firefox_5lbsFNBqsT](https://user-images.githubusercontent.com/3757771/87346245-a5a07280-c551-11ea-9051-e5901255f8c9.png)\r\nAs you can see it does not emit the modifier when `self` is not used in a mutable context even if it is declared mutably in the enclosing function. I'm not sure if this is actually something wanted or not.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3c8dc11d477a6d680ce018e93f007c31499bd5", "html_url": "https://github.com/rust-lang/rust/commit/6f3c8dc11d477a6d680ce018e93f007c31499bd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3c8dc11d477a6d680ce018e93f007c31499bd5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8b41c5f41a0cf8bf9c15a3bbcdd8d626eb41772", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b41c5f41a0cf8bf9c15a3bbcdd8d626eb41772", "html_url": "https://github.com/rust-lang/rust/commit/b8b41c5f41a0cf8bf9c15a3bbcdd8d626eb41772"}, {"sha": "91b35d882776d7ae8891b3aecf9879164ef183b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b35d882776d7ae8891b3aecf9879164ef183b5", "html_url": "https://github.com/rust-lang/rust/commit/91b35d882776d7ae8891b3aecf9879164ef183b5"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "b3236e8210772d0bea77504703ef7ab66f424990", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=6f3c8dc11d477a6d680ce018e93f007c31499bd5", "patch": "@@ -566,10 +566,31 @@ fn highlight_element(\n                 | T![return]\n                 | T![while]\n                 | T![in] => h | HighlightModifier::ControlFlow,\n-                T![for] if !is_child_of_impl(element) => h | HighlightModifier::ControlFlow,\n+                T![for] if !is_child_of_impl(&element) => h | HighlightModifier::ControlFlow,\n                 T![unsafe] => h | HighlightModifier::Unsafe,\n                 T![true] | T![false] => HighlightTag::BoolLiteral.into(),\n-                T![self] => HighlightTag::SelfKeyword.into(),\n+                T![self] => {\n+                    let self_param_is_mut = element\n+                        .parent()\n+                        .and_then(ast::SelfParam::cast)\n+                        .and_then(|p| p.mut_token())\n+                        .is_some();\n+                    // closure to enforce lazyness\n+                    let self_path = || {\n+                        sema.resolve_path(&element.parent()?.parent().and_then(ast::Path::cast)?)\n+                    };\n+                    if self_param_is_mut\n+                        || matches!(self_path(),\n+                            Some(hir::PathResolution::Local(local))\n+                                if local.is_self(db)\n+                                    && (local.is_mut(db) || local.ty(db).is_mutable_reference())\n+                        )\n+                    {\n+                        HighlightTag::SelfKeyword | HighlightModifier::Mutable\n+                    } else {\n+                        HighlightTag::SelfKeyword.into()\n+                    }\n+                }\n                 _ => h,\n             }\n         }\n@@ -592,7 +613,7 @@ fn highlight_element(\n     }\n }\n \n-fn is_child_of_impl(element: SyntaxElement) -> bool {\n+fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     match element.parent() {\n         Some(e) => e.kind() == IMPL_DEF,\n         _ => false,"}, {"sha": "87a6e2523b885bfb6456e287e6557d7cc19b758d", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=6f3c8dc11d477a6d680ce018e93f007c31499bd5", "patch": "@@ -25,6 +25,16 @@ impl Bar for Foo {\n     }\n }\n \n+impl Foo {\n+    fn baz(mut self) -> i32 {\n+        self.x\n+    }\n+\n+    fn qux(&mut self) {\n+        self.x = 0;\n+    }\n+}\n+\n static mut STATIC_MUT: i32 = 0;\n \n fn foo<'a, T>() -> T {"}, {"sha": "553811a2f2e347cb1e1f80359f8038b0be2f6c84", "filename": "crates/ra_ide/test_data/highlighting.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/6f3c8dc11d477a6d680ce018e93f007c31499bd5/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html?ref=6f3c8dc11d477a6d680ce018e93f007c31499bd5", "patch": "@@ -51,6 +51,16 @@\n     }\n }\n \n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span>(<span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span>) -&gt; <span class=\"builtin_type\">i32</span> {\n+        <span class=\"self_keyword\">self</span>.<span class=\"field\">x</span>\n+    }\n+\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">qux</span>(&<span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span>) {\n+        <span class=\"self_keyword mutable\">self</span>.<span class=\"field\">x</span> = <span class=\"numeric_literal\">0</span>;\n+    }\n+}\n+\n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable\">STATIC_MUT</span>: <span class=\"builtin_type\">i32</span> = <span class=\"numeric_literal\">0</span>;\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {"}]}