{"sha": "388971b05d84b81592a818d7e789eb5684755131", "node_id": "C_kwDOAAsO6NoAKDM4ODk3MWIwNWQ4NGI4MTU5MmE4MThkN2U3ODllYjU2ODQ3NTUxMzE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-16T00:57:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T17:51:11Z"}, "message": "interpret: remove some unused trait impls", "tree": {"sha": "b589ebabd5d1c92811a520bd9d3e7b6c7e8ac365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b589ebabd5d1c92811a520bd9d3e7b6c7e8ac365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/388971b05d84b81592a818d7e789eb5684755131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/388971b05d84b81592a818d7e789eb5684755131", "html_url": "https://github.com/rust-lang/rust/commit/388971b05d84b81592a818d7e789eb5684755131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/388971b05d84b81592a818d7e789eb5684755131/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "967a9c94b34bb8f394db03b1d205831eddf6f589", "url": "https://api.github.com/repos/rust-lang/rust/commits/967a9c94b34bb8f394db03b1d205831eddf6f589", "html_url": "https://github.com/rust-lang/rust/commit/967a9c94b34bb8f394db03b1d205831eddf6f589"}], "stats": {"total": 54, "additions": 10, "deletions": 44}, "files": [{"sha": "d4836c69175a1cbef4a33ae5105e031533a01ce2", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 36, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=388971b05d84b81592a818d7e789eb5684755131", "patch": "@@ -2,10 +2,8 @@ use std::cell::Cell;\n use std::fmt;\n use std::mem;\n \n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n-use rustc_macros::HashStable;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpError, InvalidProgramInfo};\n use rustc_middle::ty::layout::{\n@@ -16,7 +14,6 @@ use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n-use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n use rustc_target::abi::{call::FnAbi, Align, HasDataLayout, Size, TargetDataLayout};\n@@ -142,7 +139,7 @@ pub struct FrameInfo<'tcx> {\n }\n \n /// Unwind information.\n-#[derive(Clone, Copy, Eq, PartialEq, Debug, HashStable)]\n+#[derive(Clone, Copy, Eq, PartialEq, Debug)]\n pub enum StackPopUnwind {\n     /// The cleanup block.\n     Cleanup(mir::BasicBlock),\n@@ -152,7 +149,7 @@ pub enum StackPopUnwind {\n     NotAllowed,\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, Debug, HashStable)] // Miri debug-prints these\n+#[derive(Clone, Copy, Eq, PartialEq, Debug)] // Miri debug-prints these\n pub enum StackPopCleanup {\n     /// Jump to the next block in the caller, or cause UB if None (that's a function\n     /// that may never return). Also store layout of return place so\n@@ -168,16 +165,15 @@ pub enum StackPopCleanup {\n }\n \n /// State of a local variable including a memoized layout\n-#[derive(Clone, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Clone, Debug)]\n pub struct LocalState<'tcx, Tag: Provenance = AllocId> {\n     pub value: LocalValue<Tag>,\n     /// Don't modify if `Some`, this is only used to prevent computing the layout twice\n-    #[stable_hasher(ignore)]\n     pub layout: Cell<Option<TyAndLayout<'tcx>>>,\n }\n \n /// Current value of a local variable\n-#[derive(Copy, Clone, PartialEq, Eq, HashStable, Debug)] // Miri debug-prints these\n+#[derive(Copy, Clone, Debug)] // Miri debug-prints these\n pub enum LocalValue<Tag: Provenance = AllocId> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,\n@@ -1021,31 +1017,3 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> std::fmt::Debug\n         }\n     }\n }\n-\n-impl<'ctx, 'mir, 'tcx, Tag: Provenance, Extra> HashStable<StableHashingContext<'ctx>>\n-    for Frame<'mir, 'tcx, Tag, Extra>\n-where\n-    Extra: HashStable<StableHashingContext<'ctx>>,\n-    Tag: HashStable<StableHashingContext<'ctx>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'ctx>, hasher: &mut StableHasher) {\n-        // Exhaustive match on fields to make sure we forget no field.\n-        let Frame {\n-            body,\n-            instance,\n-            return_to_block,\n-            return_place,\n-            locals,\n-            loc,\n-            extra,\n-            tracing_span: _,\n-        } = self;\n-        body.hash_stable(hcx, hasher);\n-        instance.hash_stable(hcx, hasher);\n-        return_to_block.hash_stable(hcx, hasher);\n-        return_place.hash_stable(hcx, hasher);\n-        locals.hash_stable(hcx, hasher);\n-        loc.hash_stable(hcx, hasher);\n-        extra.hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "b7f912c70b2f91c1647ce1b48b4139095c910287", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=388971b05d84b81592a818d7e789eb5684755131", "patch": "@@ -4,7 +4,6 @@\n use std::fmt::Write;\n \n use rustc_hir::def::Namespace;\n-use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n@@ -25,7 +24,7 @@ use super::{\n /// operations and wide pointers. This idea was taken from rustc's codegen.\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n-#[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Immediate<Tag: Provenance = AllocId> {\n     /// A single scalar value (must have *initialized* `Scalar` ABI).\n     /// FIXME: we also currently often use this for ZST.\n@@ -182,13 +181,13 @@ impl<'tcx, Tag: Provenance> std::ops::Deref for ImmTy<'tcx, Tag> {\n /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n-#[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Operand<Tag: Provenance = AllocId> {\n     Immediate(Immediate<Tag>),\n     Indirect(MemPlace<Tag>),\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct OpTy<'tcx, Tag: Provenance = AllocId> {\n     op: Operand<Tag>, // Keep this private; it helps enforce invariants.\n     pub layout: TyAndLayout<'tcx>,"}, {"sha": "d212c3eb19b102fa63d3b9b45930085dd48b1a65", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/388971b05d84b81592a818d7e789eb5684755131/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=388971b05d84b81592a818d7e789eb5684755131", "patch": "@@ -5,7 +5,6 @@\n use std::hash::Hash;\n \n use rustc_ast::Mutability;\n-use rustc_macros::HashStable;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n@@ -17,7 +16,7 @@ use super::{\n     Pointer, Provenance, Scalar, ScalarMaybeUninit,\n };\n \n-#[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, Debug)]\n /// Information required for the sound usage of a `MemPlace`.\n pub enum MemPlaceMeta<Tag: Provenance = AllocId> {\n     /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).\n@@ -47,7 +46,7 @@ impl<Tag: Provenance> MemPlaceMeta<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, Debug)]\n pub struct MemPlace<Tag: Provenance = AllocId> {\n     /// The pointer can be a pure integer, with the `None` tag.\n     pub ptr: Pointer<Option<Tag>>,\n@@ -60,7 +59,7 @@ pub struct MemPlace<Tag: Provenance = AllocId> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(MemPlace, 40);\n \n-#[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Place<Tag: Provenance = AllocId> {\n     /// A place referring to a value allocated in the `Memory` system.\n     Ptr(MemPlace<Tag>),"}]}