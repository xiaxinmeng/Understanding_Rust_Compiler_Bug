{"sha": "64ea639c12df0594dd891b1ba0b439c8c5eacd83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWE2MzljMTJkZjA1OTRkZDg5MWIxYmEwYjQzOWM4YzVlYWNkODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T07:11:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-09T07:11:56Z"}, "message": "Auto merge of #68689 - estebank:where-clause-sugg-missing-fn, r=varkor\n\nWhen suggesting associated fn with type parameters, include in the structured suggestion\n\nAddress #50734.\n\n```\nerror[E0046]: not all trait items implemented, missing: `foo`, `bar`, `baz`\n  --> file.rs:14:1\n   |\n14 | impl TraitA<()> for S {\n   | ^^^^^^^^^^^^^^^^^^^^^ missing `foo`, `bar`, `baz` in implementation\n   |\n   = help: implement the missing item: `fn foo<T>(_: T) -> Self where T: TraitB, TraitB::Item = A { unimplemented!() }`\n   = help: implement the missing item: `fn bar<T>(_: T) -> Self { unimplemented!() }`\n   = help: implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: std::marker::Copy { unimplemented!() }`\n```\n\nIt doesn't work well for associated types with `ty::Predicate::Projection`s as we need to resugar `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`.", "tree": {"sha": "b7c8a01a9da6209411c3fe10a4901903e864f1e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c8a01a9da6209411c3fe10a4901903e864f1e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64ea639c12df0594dd891b1ba0b439c8c5eacd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64ea639c12df0594dd891b1ba0b439c8c5eacd83", "html_url": "https://github.com/rust-lang/rust/commit/64ea639c12df0594dd891b1ba0b439c8c5eacd83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64ea639c12df0594dd891b1ba0b439c8c5eacd83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d830b4decaef5a6ae0f27baac14dfb48baa4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d830b4decaef5a6ae0f27baac14dfb48baa4c5", "html_url": "https://github.com/rust-lang/rust/commit/f8d830b4decaef5a6ae0f27baac14dfb48baa4c5"}, {"sha": "3cdd7ae59ef9df70f3b31024466266160c9f5d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cdd7ae59ef9df70f3b31024466266160c9f5d11", "html_url": "https://github.com/rust-lang/rust/commit/3cdd7ae59ef9df70f3b31024466266160c9f5d11"}], "stats": {"total": 214, "additions": 203, "deletions": 11}, "files": [{"sha": "15cf05a7f7f40077b3a62e03341275998f03f076", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 82, "deletions": 3, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -2167,8 +2167,77 @@ fn missing_items_err(\n     err.emit();\n }\n \n+/// Resugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n+fn bounds_from_generic_predicates(\n+    tcx: TyCtxt<'_>,\n+    predicates: ty::GenericPredicates<'_>,\n+) -> (String, String) {\n+    let mut types: FxHashMap<Ty<'_>, Vec<DefId>> = FxHashMap::default();\n+    let mut projections = vec![];\n+    for (predicate, _) in predicates.predicates {\n+        debug!(\"predicate {:?}\", predicate);\n+        match predicate {\n+            ty::Predicate::Trait(trait_predicate, _) => {\n+                let entry = types.entry(trait_predicate.skip_binder().self_ty()).or_default();\n+                let def_id = trait_predicate.skip_binder().def_id();\n+                if Some(def_id) != tcx.lang_items().sized_trait() {\n+                    // Type params are `Sized` by default, do not add that restriction to the list\n+                    // if it is a positive requirement.\n+                    entry.push(trait_predicate.skip_binder().def_id());\n+                }\n+            }\n+            ty::Predicate::Projection(projection_pred) => {\n+                projections.push(projection_pred);\n+            }\n+            _ => {}\n+        }\n+    }\n+    let generics = if types.is_empty() {\n+        \"\".to_string()\n+    } else {\n+        format!(\n+            \"<{}>\",\n+            types\n+                .keys()\n+                .filter_map(|t| match t.kind {\n+                    ty::Param(_) => Some(t.to_string()),\n+                    // Avoid suggesting the following:\n+                    // fn foo<T, <T as Trait>::Bar>(_: T) where T: Trait, <T as Trait>::Bar: Other {}\n+                    _ => None,\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\", \")\n+        )\n+    };\n+    let mut where_clauses = vec![];\n+    for (ty, bounds) in types {\n+        for bound in &bounds {\n+            where_clauses.push(format!(\"{}: {}\", ty, tcx.def_path_str(*bound)));\n+        }\n+    }\n+    for projection in &projections {\n+        let p = projection.skip_binder();\n+        // FIXME: this is not currently supported syntax, we should be looking at the `types` and\n+        // insert the associated types where they correspond, but for now let's be \"lazy\" and\n+        // propose this instead of the following valid resugaring:\n+        // `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`\n+        where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.item_def_id), p.ty));\n+    }\n+    let where_clauses = if where_clauses.is_empty() {\n+        String::new()\n+    } else {\n+        format!(\" where {}\", where_clauses.join(\", \"))\n+    };\n+    (generics, where_clauses)\n+}\n+\n /// Return placeholder code for the given function.\n-fn fn_sig_suggestion(sig: &ty::FnSig<'_>, ident: Ident) -> String {\n+fn fn_sig_suggestion(\n+    tcx: TyCtxt<'_>,\n+    sig: &ty::FnSig<'_>,\n+    ident: Ident,\n+    predicates: ty::GenericPredicates<'_>,\n+) -> String {\n     let args = sig\n         .inputs()\n         .iter()\n@@ -2198,12 +2267,17 @@ fn fn_sig_suggestion(sig: &ty::FnSig<'_>, ident: Ident) -> String {\n     let output = if !output.is_unit() { format!(\" -> {:?}\", output) } else { String::new() };\n \n     let unsafety = sig.unsafety.prefix_str();\n+    let (generics, where_clauses) = bounds_from_generic_predicates(tcx, predicates);\n+\n     // FIXME: this is not entirely correct, as the lifetimes from borrowed params will\n     // not be present in the `fn` definition, not will we account for renamed\n     // lifetimes between the `impl` and the `trait`, but this should be good enough to\n     // fill in a significant portion of the missing code, and other subsequent\n     // suggestions can help the user fix the code.\n-    format!(\"{}fn {}({}){} {{ unimplemented!() }}\", unsafety, ident, args, output)\n+    format!(\n+        \"{}fn {}{}({}){}{} {{ todo!() }}\",\n+        unsafety, ident, generics, args, output, where_clauses\n+    )\n }\n \n /// Return placeholder code for the given associated item.\n@@ -2216,7 +2290,12 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             // late-bound regions, and we don't want method signatures to show up\n             // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n             // regions just fine, showing `fn(&MyType)`.\n-            fn_sig_suggestion(tcx.fn_sig(assoc.def_id).skip_binder(), assoc.ident)\n+            fn_sig_suggestion(\n+                tcx,\n+                tcx.fn_sig(assoc.def_id).skip_binder(),\n+                assoc.ident,\n+                tcx.predicates_of(assoc.def_id),\n+            )\n         }\n         ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.ident),\n         // FIXME(type_alias_impl_trait): we should print bounds here too."}, {"sha": "748bc639a03c2af16b6d99248ca5490321025604", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -29,7 +29,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "723e03d452f30182f4393db62b4575d023a511ff", "filename": "src/test/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { unimplemented!() }`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "094782099f6ed6f1159a3fb2ef2723944016492b", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -6,7 +6,7 @@ LL | impl m1::X for X {\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n    = help: implement the missing item: `type Type = Type;`\n-   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { unimplemented!() }`\n+   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "cda191522a05f216cd197efe624a9f30024c7364", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -64,7 +64,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl Debug for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { todo!() }`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "64a1aeae3e040243222e9499ff4fecf5ac253c7f", "filename": "src/test/ui/suggestions/missing-assoc-fn-applicable-suggestions.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+trait TraitB {\n+    type Item;\n+}\n+\n+trait TraitA<A> {\n+    type Type;\n+    fn bar<T>(_: T) -> Self;\n+    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n+}\n+\n+struct S;\n+struct Type;\n+\n+impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: std::marker::Copy { todo!() }\n+fn bar<T>(_: T) -> Self { todo!() }\n+type Type = Type;\n+}\n+\n+fn main() {}"}, {"sha": "c80ede1b2be2388ecd95cccd18cbc2bd2d403645", "filename": "src/test/ui/suggestions/missing-assoc-fn-applicable-suggestions.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+trait TraitB {\n+    type Item;\n+}\n+\n+trait TraitA<A> {\n+    type Type;\n+    fn bar<T>(_: T) -> Self;\n+    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n+}\n+\n+struct S;\n+struct Type;\n+\n+impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+}\n+\n+fn main() {}"}, {"sha": "ee29a56f3f8c56d82214b189cc34f52ea27e4852", "filename": "src/test/ui/suggestions/missing-assoc-fn-applicable-suggestions.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -0,0 +1,16 @@\n+error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`\n+  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:15:1\n+   |\n+LL |     type Type;\n+   |     ---------- `Type` from trait\n+LL |     fn bar<T>(_: T) -> Self;\n+   |     ------------------------ `bar` from trait\n+LL |     fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n+   |     ------------------------------------------------------------------- `baz` from trait\n+...\n+LL | impl TraitA<()> for S {\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "9af8e5a939d6576fa30b2b63d9a69fbfcb67c45d", "filename": "src/test/ui/suggestions/missing-assoc-fn.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.rs?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -0,0 +1,22 @@\n+trait TraitB {\n+    type Item;\n+}\n+\n+trait TraitA<A> {\n+    fn foo<T: TraitB<Item = A>>(_: T) -> Self;\n+    fn bar<T>(_: T) -> Self;\n+    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n+    fn bat<T: TraitB<Item: Copy>>(_: T) -> Self; //~ ERROR associated type bounds are unstable\n+}\n+\n+struct S;\n+\n+impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+}\n+\n+use std::iter::FromIterator;\n+struct X;\n+impl FromIterator<()> for X { //~ ERROR not all trait items implemented\n+}\n+\n+fn main() {}"}, {"sha": "e4183a45d272a19bfcb5c48394f12c533294d667", "filename": "src/test/ui/suggestions/missing-assoc-fn.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -0,0 +1,36 @@\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/missing-assoc-fn.rs:9:22\n+   |\n+LL |     fn bat<T: TraitB<Item: Copy>>(_: T) -> Self;\n+   |                      ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n+error[E0046]: not all trait items implemented, missing: `foo`, `bar`, `baz`, `bat`\n+  --> $DIR/missing-assoc-fn.rs:14:1\n+   |\n+LL |     fn foo<T: TraitB<Item = A>>(_: T) -> Self;\n+   |     ------------------------------------------ `foo` from trait\n+LL |     fn bar<T>(_: T) -> Self;\n+   |     ------------------------ `bar` from trait\n+LL |     fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n+   |     ------------------------------------------------------------------- `baz` from trait\n+LL |     fn bat<T: TraitB<Item: Copy>>(_: T) -> Self;\n+   |     -------------------------------------------- `bat` from trait\n+...\n+LL | impl TraitA<()> for S {\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `foo`, `bar`, `baz`, `bat` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `from_iter`\n+  --> $DIR/missing-assoc-fn.rs:19:1\n+   |\n+LL | impl FromIterator<()> for X {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `from_iter` in implementation\n+   |\n+   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: std::iter::IntoIterator, std::iter::IntoIterator::Item = A { todo!() }`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0046, E0658.\n+For more information about an error, try `rustc --explain E0046`."}, {"sha": "a1cf359ec91248f64417dd8e4c4df5c9853833b7", "filename": "src/test/ui/suggestions/missing-trait-item.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/64ea639c12df0594dd891b1ba0b439c8c5eacd83/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed?ref=64ea639c12df0594dd891b1ba0b439c8c5eacd83", "patch": "@@ -7,13 +7,13 @@ trait T {\n \n mod foo {\n     use super::T;\n-    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n-        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { todo!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { todo!() }\n     } //~ ERROR not all trait items\n \n     impl T for usize { //~ ERROR not all trait items\n-        fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n-        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+        fn bar(&self, _: &usize, _: &usize) -> usize { todo!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { todo!() }\n     }\n }\n "}]}