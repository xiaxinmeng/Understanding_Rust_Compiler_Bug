{"sha": "5445715c20dbedbe9b14d185937ab1ebcd81118e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDU3MTVjMjBkYmVkYmU5YjE0ZDE4NTkzN2FiMWViY2Q4MTExOGU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-07-20T12:03:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-09-14T11:56:33Z"}, "message": "Remove RawDefId tracking infrastructure from incr. comp. framework.\n\nThis infrastructure is obsolete now with the new encoding scheme for\nthe DefPathHash->DefIndex maps in crate metadata.", "tree": {"sha": "bb1c84f088944b5ce70600f7e4a8de66cabe38c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1c84f088944b5ce70600f7e4a8de66cabe38c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5445715c20dbedbe9b14d185937ab1ebcd81118e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5445715c20dbedbe9b14d185937ab1ebcd81118e", "html_url": "https://github.com/rust-lang/rust/commit/5445715c20dbedbe9b14d185937ab1ebcd81118e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5445715c20dbedbe9b14d185937ab1ebcd81118e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960893c50a61e6eec6635d8f18b586e3ce0865d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/960893c50a61e6eec6635d8f18b586e3ce0865d9", "html_url": "https://github.com/rust-lang/rust/commit/960893c50a61e6eec6635d8f18b586e3ce0865d9"}], "stats": {"total": 140, "additions": 6, "deletions": 134}, "files": [{"sha": "3f28cd51af7056a3c032eb2608a3aa5516a84865", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -385,17 +385,7 @@ impl<'tcx> DepNodeParams<TyCtxt<'tcx>> for DefId {\n     }\n \n     fn to_fingerprint(&self, tcx: TyCtxt<'tcx>) -> Fingerprint {\n-        let hash = tcx.def_path_hash(*self);\n-        // If this is a foreign `DefId`, store its current value\n-        // in the incremental cache. When we decode the cache,\n-        // we will use the old DefIndex as an initial guess for\n-        // a lookup into the crate metadata.\n-        if !self.is_local() {\n-            if let Some(cache) = &tcx.on_disk_cache {\n-                cache.store_foreign_def_id_hash(*self, hash);\n-            }\n-        }\n-        hash.0\n+        tcx.def_path_hash(*self).0\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'tcx>) -> String {"}, {"sha": "35dc1631db3c2757094b2e952d7e9a32cb8dabf0", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -92,12 +92,7 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n     type DepKind = DepKind;\n     type StableHashingContext = StableHashingContext<'tcx>;\n \n-    fn register_reused_dep_node(&self, dep_node: &DepNode) {\n-        if let Some(cache) = self.on_disk_cache.as_ref() {\n-            cache.register_reused_dep_node(*self, dep_node)\n-        }\n-    }\n-\n+    #[inline]\n     fn create_stable_hashing_context(&self) -> Self::StableHashingContext {\n         TyCtxt::create_stable_hashing_context(*self)\n     }"}, {"sha": "a13fe75fd4d77d0d79651628a51acc6ac73b3e3a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -1,7 +1,7 @@\n //! Type context book-keeping.\n \n use crate::arena::Arena;\n-use crate::dep_graph::{DepGraph, DepNode};\n+use crate::dep_graph::DepGraph;\n use crate::hir::place::Place as HirPlace;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n@@ -89,18 +89,6 @@ pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n         def_path_hash: DefPathHash,\n     ) -> Option<DefId>;\n \n-    /// If the given `dep_node`'s hash still exists in the current compilation,\n-    /// and its current `DefId` is foreign, calls `store_foreign_def_id` with it.\n-    ///\n-    /// Normally, `store_foreign_def_id_hash` can be called directly by\n-    /// the dependency graph when we construct a `DepNode`. However,\n-    /// when we re-use a deserialized `DepNode` from the previous compilation\n-    /// session, we only have the `DefPathHash` available. This method is used\n-    /// to that any `DepNode` that we re-use has a `DefPathHash` -> `RawId` written\n-    /// out for usage in the next compilation session.\n-    fn register_reused_dep_node(&self, tcx: TyCtxt<'tcx>, dep_node: &DepNode);\n-    fn store_foreign_def_id_hash(&self, def_id: DefId, hash: DefPathHash);\n-\n     fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>);\n \n     fn serialize(&self, tcx: TyCtxt<'tcx>, encoder: &mut FileEncoder) -> FileEncodeResult;"}, {"sha": "82cc81ec4c3df460e900fb7853db54056e556be9", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 76, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathHash;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::dep_graph::{DepNode, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, interpret};\n use rustc_middle::thir;\n@@ -86,27 +86,9 @@ pub struct OnDiskCache<'sess> {\n     expn_data: UnhashMap<ExpnHash, AbsoluteBytePos>,\n     // Additional information used when decoding hygiene data.\n     hygiene_context: HygieneDecodeContext,\n-    // Maps `DefPathHash`es to their `RawDefId`s from the *previous*\n-    // compilation session. This is used as an initial 'guess' when\n-    // we try to map a `DefPathHash` to its `DefId` in the current compilation\n-    // session.\n-    foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n+    // FIXME(mw): Update this comment:\n     // Likewise for ExpnId.\n     foreign_expn_data: UnhashMap<ExpnHash, u32>,\n-\n-    // The *next* compilation sessison's `foreign_def_path_hashes` - at\n-    // the end of our current compilation session, this will get written\n-    // out to the `foreign_def_path_hashes` field of the `Footer`, which\n-    // will become `foreign_def_path_hashes` of the next compilation session.\n-    // This stores any `DefPathHash` that we may need to map to a `DefId`\n-    // during the next compilation session.\n-    latest_foreign_def_path_hashes: Lock<UnhashMap<DefPathHash, RawDefId>>,\n-\n-    // Caches all lookups of `DefPathHashes`, both for local and foreign\n-    // definitions. A definition from the previous compilation session\n-    // may no longer exist in the current compilation session, so\n-    // we use `Option<DefId>` so that we can cache a lookup failure.\n-    def_path_hash_to_def_id_cache: Lock<UnhashMap<DefPathHash, Option<DefId>>>,\n }\n \n // This type is used only for serialization and deserialization.\n@@ -121,7 +103,6 @@ struct Footer {\n     syntax_contexts: FxHashMap<u32, AbsoluteBytePos>,\n     // See `OnDiskCache.expn_data`\n     expn_data: UnhashMap<ExpnHash, AbsoluteBytePos>,\n-    foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n     foreign_expn_data: UnhashMap<ExpnHash, u32>,\n }\n \n@@ -144,19 +125,6 @@ impl AbsoluteBytePos {\n     }\n }\n \n-/// Represents a potentially invalid `DefId`. This is used during incremental\n-/// compilation to represent a `DefId` from the *previous* compilation session,\n-/// which may no longer be valid. This is used to help map a `DefPathHash`\n-/// to a `DefId` in the current compilation session.\n-#[derive(Encodable, Decodable, Copy, Clone, Debug)]\n-crate struct RawDefId {\n-    // We deliberately do not use `CrateNum` and `DefIndex`\n-    // here, since a crate/index from the previous compilation\n-    // session may no longer exist.\n-    pub krate: u32,\n-    pub index: u32,\n-}\n-\n /// An `EncodedSourceFileId` is the same as a `StableSourceFileId` except that\n /// the source crate is represented as a [StableCrateId] instead of as a\n /// `CrateNum`. This way `EncodedSourceFileId` can be encoded and decoded\n@@ -220,9 +188,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             expn_data: footer.expn_data,\n             foreign_expn_data: footer.foreign_expn_data,\n             hygiene_context: Default::default(),\n-            foreign_def_path_hashes: footer.foreign_def_path_hashes,\n-            latest_foreign_def_path_hashes: Default::default(),\n-            def_path_hash_to_def_id_cache: Default::default(),\n         }\n     }\n \n@@ -241,9 +206,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n             expn_data: UnhashMap::default(),\n             foreign_expn_data: UnhashMap::default(),\n             hygiene_context: Default::default(),\n-            foreign_def_path_hashes: Default::default(),\n-            latest_foreign_def_path_hashes: Default::default(),\n-            def_path_hash_to_def_id_cache: Default::default(),\n         }\n     }\n \n@@ -253,13 +215,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n     /// In order to serialize the new on-disk cache, the former on-disk cache file needs to be\n     /// deleted, hence we won't be able to refer to its memmapped data.\n     fn drop_serialized_data(&self, tcx: TyCtxt<'tcx>) {\n-        // Register any dep nodes that we reused from the previous session,\n-        // but didn't `DepNode::construct` in this session. This ensures\n-        // that their `DefPathHash` to `RawDefId` mappings are registered\n-        // in 'latest_foreign_def_path_hashes' if necessary, since that\n-        // normally happens in `DepNode::construct`.\n-        tcx.dep_graph.register_reused_dep_nodes(tcx);\n-\n         // Load everything into memory so we can write it out to the on-disk\n         // cache. The vast majority of cacheable query results should already\n         // be in memory, so this should be a cheap operation.\n@@ -293,7 +248,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                 (file_to_file_index, file_index_to_stable_id)\n             };\n \n-            let latest_foreign_def_path_hashes = self.latest_foreign_def_path_hashes.lock().clone();\n             let hygiene_encode_context = HygieneEncodeContext::default();\n \n             let mut encoder = CacheEncoder {\n@@ -305,7 +259,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n                 hygiene_context: &hygiene_encode_context,\n-                latest_foreign_def_path_hashes,\n             };\n \n             // Encode query results.\n@@ -382,9 +335,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                 },\n             )?;\n \n-            let foreign_def_path_hashes =\n-                std::mem::take(&mut encoder.latest_foreign_def_path_hashes);\n-\n             // `Encode the file footer.\n             let footer_pos = encoder.position() as u64;\n             encoder.encode_tagged(\n@@ -397,7 +347,6 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                     syntax_contexts,\n                     expn_data,\n                     foreign_expn_data,\n-                    foreign_def_path_hashes,\n                 },\n             )?;\n \n@@ -460,17 +409,6 @@ impl<'sess> OnDiskCache<'sess> {\n         debug_assert!(prev.is_none());\n     }\n \n-    fn get_raw_def_id(&self, hash: &DefPathHash) -> Option<RawDefId> {\n-        self.foreign_def_path_hashes.get(hash).copied()\n-    }\n-\n-    fn try_remap_cnum(&self, tcx: TyCtxt<'_>, stable_crate_id: StableCrateId) -> Option<CrateNum> {\n-        let cnum_map = self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx));\n-        debug!(\"try_remap_cnum({:?}): cnum_map={:?}\", stable_crate_id, cnum_map);\n-\n-        cnum_map.get(&stable_crate_id).copied()\n-    }\n-\n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n     pub fn try_load_query_result<'tcx, T>(\n@@ -911,7 +849,6 @@ pub struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n     hygiene_context: &'a HygieneEncodeContext,\n-    latest_foreign_def_path_hashes: UnhashMap<DefPathHash, RawDefId>,\n }\n \n impl<'a, 'tcx, E> CacheEncoder<'a, 'tcx, E>\n@@ -1044,17 +981,7 @@ where\n     E: 'a + OpaqueEncoder,\n {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n-        let def_path_hash = s.tcx.def_path_hash(*self);\n-        // Store additional information when we encode a foreign `DefId`,\n-        // so that we can map its `DefPathHash` back to a `DefId` in the next\n-        // compilation session.\n-        if !self.is_local() {\n-            s.latest_foreign_def_path_hashes.insert(\n-                def_path_hash,\n-                RawDefId { krate: self.krate.as_u32(), index: self.index.as_u32() },\n-            );\n-        }\n-        def_path_hash.encode(s)\n+        s.tcx.def_path_hash(*self).encode(s)\n     }\n }\n "}, {"sha": "46dc0c720ce7f998b133cc619a432171728702e9", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -53,18 +53,6 @@ use std::hash::Hash;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n pub struct DepNode<K> {\n     pub kind: K,\n-    // Important - whenever a `DepNode` is constructed, we need to make\n-    // sure to register a `DefPathHash -> DefId` mapping if needed.\n-    // This is currently done in two places:\n-    //\n-    // * When a `DepNode::construct` is called, `arg.to_fingerprint()`\n-    //   is responsible for calling `OnDiskCache::store_foreign_def_id_hash`\n-    //   if needed\n-    // * When we serialize the on-disk cache, `OnDiskCache::serialize` is\n-    //   responsible for calling `DepGraph::register_reused_dep_nodes`.\n-    //\n-    // FIXME: Enforce this by preventing manual construction of `DefNode`\n-    // (e.g. add a `_priv: ()` field)\n     pub hash: PackedFingerprint,\n }\n "}, {"sha": "23a437718427222a7c9440afa148757030e1633e", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -760,20 +760,6 @@ impl<K: DepKind> DepGraph<K> {\n         }\n     }\n \n-    // Register reused dep nodes (i.e. nodes we've marked red or green) with the context.\n-    pub fn register_reused_dep_nodes<Ctxt: DepContext<DepKind = K>>(&self, tcx: Ctxt) {\n-        let data = self.data.as_ref().unwrap();\n-        for prev_index in data.colors.values.indices() {\n-            match data.colors.get(prev_index) {\n-                Some(DepNodeColor::Red) | Some(DepNodeColor::Green(_)) => {\n-                    let dep_node = data.previous.index_to_node(prev_index);\n-                    tcx.register_reused_dep_node(&dep_node);\n-                }\n-                None => {}\n-            }\n-        }\n-    }\n-\n     pub fn print_incremental_info(&self) {\n         if let Some(data) = &self.data {\n             data.current.encoder.borrow().print_incremental_info("}, {"sha": "b5be1192ce73fe14833fae7e660ba708fadcc87c", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5445715c20dbedbe9b14d185937ab1ebcd81118e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=5445715c20dbedbe9b14d185937ab1ebcd81118e", "patch": "@@ -27,8 +27,6 @@ pub trait DepContext: Copy {\n     /// Access the DepGraph.\n     fn dep_graph(&self) -> &DepGraph<Self::DepKind>;\n \n-    fn register_reused_dep_node(&self, dep_node: &DepNode<Self::DepKind>);\n-\n     /// Access the profiler.\n     fn profiler(&self) -> &SelfProfilerRef;\n "}]}