{"sha": "7a4f0aece871f9850f83db4760a6fea4f595dc8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGYwYWVjZTg3MWY5ODUwZjgzZGI0NzYwYTZmZWE0ZjU5NWRjOGQ=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T11:54:37Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T11:54:37Z"}, "message": "use wasi::get_args", "tree": {"sha": "7bc4d25709748aef2591ad70c080b106f673db55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bc4d25709748aef2591ad70c080b106f673db55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4f0aece871f9850f83db4760a6fea4f595dc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f0aece871f9850f83db4760a6fea4f595dc8d", "html_url": "https://github.com/rust-lang/rust/commit/7a4f0aece871f9850f83db4760a6fea4f595dc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f0aece871f9850f83db4760a6fea4f595dc8d/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a553fa27ffa293a21be5c5138b2b9fd69adfd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a553fa27ffa293a21be5c5138b2b9fd69adfd2", "html_url": "https://github.com/rust-lang/rust/commit/75a553fa27ffa293a21be5c5138b2b9fd69adfd2"}], "stats": {"total": 42, "additions": 5, "deletions": 37}, "files": [{"sha": "e2fe0548f12661cf8260232932928d8372a5faad", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a4f0aece871f9850f83db4760a6fea4f595dc8d/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4f0aece871f9850f83db4760a6fea4f595dc8d/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=7a4f0aece871f9850f83db4760a6fea4f595dc8d", "patch": "@@ -13,47 +13,15 @@ pub unsafe fn cleanup() {\n }\n \n pub struct Args {\n-    iter: vec::IntoIter<OsString>,\n+    iter: vec::IntoIter<Vec<u8>>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n /// Returns the command line arguments\n pub fn args() -> Args {\n-    maybe_args().unwrap_or_else(|_| {\n-        Args {\n-            iter: Vec::new().into_iter(),\n-            _dont_send_or_sync_me: PhantomData\n-        }\n-    })\n-}\n-\n-fn cvt_wasi(r: u16) -> crate::io::Result<()> {\n-    if r != 0 {\n-        Err(Error::from_raw_os_error(r as i32))\n-    } else {\n-        Ok(())\n-    }\n-}\n-\n-fn maybe_args() -> io::Result<Args> {\n-    // FIXME: replace with safe functions\n-    use wasi::wasi_unstable::raw::{__wasi_args_sizes_get, __wasi_args_get};\n-    unsafe {\n-        let (mut argc, mut argv_buf_size) = (0, 0);\n-        cvt_wasi(__wasi_args_sizes_get(&mut argc, &mut argv_buf_size))?;\n-\n-        let mut argc = vec![core::ptr::null_mut::<u8>(); argc];\n-        let mut argv_buf = vec![0; argv_buf_size];\n-        cvt_wasi(__wasi_args_get(argc.as_mut_ptr(), argv_buf.as_mut_ptr()))?;\n-\n-        let args = argc.into_iter()\n-            .map(|ptr| CStr::from_ptr(ptr).to_bytes().to_vec())\n-            .map(|bytes| OsString::from_vec(bytes))\n-            .collect::<Vec<_>>();\n-        Ok(Args {\n-            iter: args.into_iter(),\n-            _dont_send_or_sync_me: PhantomData,\n-        })\n+    Args {\n+        iter: wasi::get_args().unwrap_or(Vec::new()),\n+        _dont_send_or_sync_me: PhantomData\n     }\n }\n \n@@ -66,7 +34,7 @@ impl Args {\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> {\n-        self.iter.next()\n+        self.iter.next().map(OsString::from_vec)\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()"}]}