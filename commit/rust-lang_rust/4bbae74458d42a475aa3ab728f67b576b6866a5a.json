{"sha": "4bbae74458d42a475aa3ab728f67b576b6866a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYmFlNzQ0NThkNDJhNDc1YWEzYWI3MjhmNjdiNTc2YjY4NjZhNWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T15:38:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T15:38:17Z"}, "message": "Merge codegen_call_inner into codegen_terminator_call", "tree": {"sha": "235db3be6caa7f8544bec52d72e867de848b0253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/235db3be6caa7f8544bec52d72e867de848b0253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbae74458d42a475aa3ab728f67b576b6866a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbae74458d42a475aa3ab728f67b576b6866a5a", "html_url": "https://github.com/rust-lang/rust/commit/4bbae74458d42a475aa3ab728f67b576b6866a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbae74458d42a475aa3ab728f67b576b6866a5a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04af24d418da041c1e95dbd7c35f62d661353f3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04af24d418da041c1e95dbd7c35f62d661353f3b", "html_url": "https://github.com/rust-lang/rust/commit/04af24d418da041c1e95dbd7c35f62d661353f3b"}], "stats": {"total": 35, "additions": 9, "deletions": 26}, "files": [{"sha": "05ca51c452f24b09701cac2cee55ba31ab395889", "filename": "src/abi/mod.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4bbae74458d42a475aa3ab728f67b576b6866a5a/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbae74458d42a475aa3ab728f67b576b6866a5a/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=4bbae74458d42a475aa3ab728f67b576b6866a5a", "patch": "@@ -495,31 +495,6 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             .collect::<Vec<_>>()\n     };\n \n-    codegen_call_inner(\n-        fx,\n-        span,\n-        Some(func),\n-        fn_ty,\n-        args,\n-        destination.map(|(place, _)| place),\n-    );\n-\n-    if let Some((_, dest)) = destination {\n-        let ret_block = fx.get_block(dest);\n-        fx.bcx.ins().jump(ret_block, &[]);\n-    } else {\n-        trap_unreachable(fx, \"[corruption] Diverging function returned\");\n-    }\n-}\n-\n-fn codegen_call_inner<'tcx>(\n-    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    span: Span,\n-    func: Option<&Operand<'tcx>>,\n-    fn_ty: Ty<'tcx>,\n-    args: Vec<CValue<'tcx>>,\n-    ret_place: Option<CPlace<'tcx>>,\n-) {\n     // FIXME mark the current block as cold when calling a `#[cold]` function.\n     let fn_sig = fx\n         .tcx\n@@ -572,7 +547,7 @@ fn codegen_call_inner<'tcx>(\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(nop_inst, \"indirect call\");\n             }\n-            let func = trans_operand(fx, func.expect(\"indirect call without func Operand\"))\n+            let func = trans_operand(fx, func)\n                 .load_scalar(fx);\n             (\n                 Some(func),\n@@ -584,6 +559,7 @@ fn codegen_call_inner<'tcx>(\n         }\n     };\n \n+    let ret_place = destination.map(|(place, _)| place);\n     let (call_inst, call_args) =\n         self::returning::codegen_with_call_return_arg(fx, fn_sig, ret_place, |fx, return_ptr| {\n             let mut call_args: Vec<Value> = return_ptr\n@@ -641,6 +617,13 @@ fn codegen_call_inner<'tcx>(\n             .collect::<Vec<AbiParam>>();\n         fx.bcx.func.dfg.signatures[sig_ref].params = abi_params;\n     }\n+\n+    if let Some((_, dest)) = destination {\n+        let ret_block = fx.get_block(dest);\n+        fx.bcx.ins().jump(ret_block, &[]);\n+    } else {\n+        trap_unreachable(fx, \"[corruption] Diverging function returned\");\n+    }\n }\n \n pub(crate) fn codegen_drop<'tcx>("}]}