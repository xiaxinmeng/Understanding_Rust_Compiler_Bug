{"sha": "db002a06ae9154a35d410550bc5132df883d7baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMDAyYTA2YWU5MTU0YTM1ZDQxMDU1MGJjNTEzMmRmODgzZDdiYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-21T09:25:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-21T09:25:28Z"}, "message": "Auto merge of #87570 - nikic:llvm-13, r=nagisa\n\nUpgrade to LLVM 13\n\nWork in progress update to LLVM 13. Main changes:\n\n * InlineAsm diagnostics reported using SrcMgr diagnostic kind are now handled. Previously these used a separate diag handler.\n * Codegen tests are updated for additional attributes.\n * Some data layouts have changed.\n * Switch `#[used]` attribute from `llvm.used` to `llvm.compiler.used` to avoid SHF_GNU_RETAIN flag introduced in https://reviews.llvm.org/D97448, which appears to trigger a bug in older versions of gold.\n * Set `LLVM_INCLUDE_TESTS=OFF` to avoid Python 3.6 requirement.\n\nUpstream issues:\n\n * ~~https://bugs.llvm.org/show_bug.cgi?id=51210 (InlineAsm diagnostic reporting for module asm)~~ Fixed by https://github.com/llvm/llvm-project/commit/1558bb80c01b695ce12642527cbfccf16cf54ece.\n * ~~https://bugs.llvm.org/show_bug.cgi?id=51476 (Miscompile on AArch64 due to incorrect comparison elimination)~~ Fixed by https://github.com/llvm/llvm-project/commit/81b106584f2baf33e09be2362c35c1bf2f6bfe94.\n * https://bugs.llvm.org/show_bug.cgi?id=51207 (Can't set custom section flags anymore). Problematic change reverted in our fork, https://reviews.llvm.org/D107216 posted for upstream revert.\n * https://bugs.llvm.org/show_bug.cgi?id=51211 (Regression in codegen for #83623). This is an optimization regression that we may likely have to eat for this release. The fix for #83623 was based on an incorrect premise, and this needs to be properly addressed in the MergeICmps pass.\n\nThe [compile-time impact](https://perf.rust-lang.org/compare.html?start=ef9549b6c0efb7525c9b012148689c8d070f9bc0&end=0983094463497eec22d550dad25576a894687002) is mixed, but quite positive as LLVM upgrades go.\n\nThe LLVM 13 final release is scheduled for Sep 21st. The current nightly is scheduled for stable release on Oct 21st.\n\nr? `@ghost`", "tree": {"sha": "7e0777fa551baec421b9b53dd5dc0d9a5e2165e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0777fa551baec421b9b53dd5dc0d9a5e2165e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db002a06ae9154a35d410550bc5132df883d7baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db002a06ae9154a35d410550bc5132df883d7baa", "html_url": "https://github.com/rust-lang/rust/commit/db002a06ae9154a35d410550bc5132df883d7baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db002a06ae9154a35d410550bc5132df883d7baa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "html_url": "https://github.com/rust-lang/rust/commit/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c"}, {"sha": "306259c64595807db0632f0a293bd06bf034f97b", "url": "https://api.github.com/repos/rust-lang/rust/commits/306259c64595807db0632f0a293bd06bf034f97b", "html_url": "https://github.com/rust-lang/rust/commit/306259c64595807db0632f0a293bd06bf034f97b"}], "stats": {"total": 369, "additions": 201, "deletions": 168}, "files": [{"sha": "e22d5762790421b6fcd9767bd815914a26818db8", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -34,7 +34,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/12.0-2021-07-10\n+\tbranch = rustc/13.0-2021-08-08\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "791604a18273d62ef6567329572419f50c93c310", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -296,39 +296,8 @@ unsafe extern \"C\" fn inline_asm_handler(diag: &SMDiagnostic, user: *const c_void\n     }\n     let (cgcx, _) = *(user as *const (&CodegenContext<LlvmCodegenBackend>, &Handler));\n \n-    // Recover the post-substitution assembly code from LLVM for better\n-    // diagnostics.\n-    let mut have_source = false;\n-    let mut buffer = String::new();\n-    let mut level = llvm::DiagnosticLevel::Error;\n-    let mut loc = 0;\n-    let mut ranges = [0; 8];\n-    let mut num_ranges = ranges.len() / 2;\n-    let msg = llvm::build_string(|msg| {\n-        buffer = llvm::build_string(|buffer| {\n-            have_source = llvm::LLVMRustUnpackSMDiagnostic(\n-                diag,\n-                msg,\n-                buffer,\n-                &mut level,\n-                &mut loc,\n-                ranges.as_mut_ptr(),\n-                &mut num_ranges,\n-            );\n-        })\n-        .expect(\"non-UTF8 inline asm\");\n-    })\n-    .expect(\"non-UTF8 SMDiagnostic\");\n-\n-    let source = have_source.then(|| {\n-        let mut spans = vec![InnerSpan::new(loc as usize, loc as usize)];\n-        for i in 0..num_ranges {\n-            spans.push(InnerSpan::new(ranges[i * 2] as usize, ranges[i * 2 + 1] as usize));\n-        }\n-        (buffer, spans)\n-    });\n-\n-    report_inline_asm(cgcx, msg, level, cookie, source);\n+    let smdiag = llvm::diagnostic::SrcMgrDiagnostic::unpack(diag);\n+    report_inline_asm(cgcx, smdiag.message, smdiag.level, cookie, smdiag.source);\n }\n \n unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void) {\n@@ -339,13 +308,7 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n     match llvm::diagnostic::Diagnostic::unpack(info) {\n         llvm::diagnostic::InlineAsm(inline) => {\n-            report_inline_asm(\n-                cgcx,\n-                llvm::twine_to_string(inline.message),\n-                inline.level,\n-                inline.cookie,\n-                None,\n-            );\n+            report_inline_asm(cgcx, inline.message, inline.level, inline.cookie, inline.source);\n         }\n \n         llvm::diagnostic::Optimization(opt) => {"}, {"sha": "a6bdbd11899deab8bb81cba65f3b8a7889d13bea", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -157,16 +157,18 @@ pub fn compile_codegen_unit(\n             }\n \n             // Finalize code coverage by injecting the coverage map. Note, the coverage map will\n-            // also be added to the `llvm.used` variable, created next.\n+            // also be added to the `llvm.compiler.used` variable, created next.\n             if cx.sess().instrument_coverage() {\n                 cx.coverageinfo_finalize();\n             }\n \n-            // Create the llvm.used variable\n-            // This variable has type [N x i8*] and is stored in the llvm.metadata section\n+            // Create the llvm.used and llvm.compiler.used variables.\n             if !cx.used_statics().borrow().is_empty() {\n                 cx.create_used_variable()\n             }\n+            if !cx.compiler_used_statics().borrow().is_empty() {\n+                cx.create_compiler_used_variable()\n+            }\n \n             // Finalize debuginfo\n             if cx.sess().opts.debuginfo != DebugInfo::None {"}, {"sha": "e1baf95e1d9e5c0325f9addcc3abf471b579aeaf", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -474,7 +474,13 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             }\n \n             if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n-                self.add_used_global(g);\n+                // The semantics of #[used] in Rust only require the symbol to make it into the\n+                // object file. It is explicitly allowed for the linker to strip the symbol if it\n+                // is dead. As such, use llvm.compiler.used instead of llvm.used.\n+                // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n+                // sections with SHF_GNU_RETAIN flag for llvm.used symbols, which may trigger bugs\n+                // in some versions of the gold linker.\n+                self.add_compiler_used_global(g);\n             }\n         }\n     }\n@@ -484,4 +490,11 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n         let cast = unsafe { llvm::LLVMConstPointerCast(global, self.type_i8p()) };\n         self.used_statics.borrow_mut().push(cast);\n     }\n+\n+    /// Add a global value to a list to be stored in the `llvm.compiler.used` variable,\n+    /// an array of i8*.\n+    fn add_compiler_used_global(&self, global: &'ll Value) {\n+        let cast = unsafe { llvm::LLVMConstPointerCast(global, self.type_i8p()) };\n+        self.compiler_used_statics.borrow_mut().push(cast);\n+    }\n }"}, {"sha": "35c866d48a41b489ca4a2ce200ecbce082041914", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -75,6 +75,10 @@ pub struct CodegenCx<'ll, 'tcx> {\n     /// See <https://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n     pub used_statics: RefCell<Vec<&'ll Value>>,\n \n+    /// Statics that will be placed in the llvm.compiler.used variable\n+    /// See <https://llvm.org/docs/LangRef.html#the-llvm-compiler-used-global-variable> for details\n+    pub compiler_used_statics: RefCell<Vec<&'ll Value>>,\n+\n     /// Mapping of non-scalar types to llvm types and field remapping if needed.\n     pub type_lowering: RefCell<FxHashMap<(Ty<'tcx>, Option<VariantIdx>), TypeLowering<'ll>>>,\n \n@@ -115,10 +119,6 @@ fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n     }\n }\n \n-fn strip_powerpc64_vectors(data_layout: String) -> String {\n-    data_layout.replace(\"-v256:256:256-v512:512:512\", \"\")\n-}\n-\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -130,7 +130,18 @@ pub unsafe fn create_module(\n \n     let mut target_data_layout = sess.target.data_layout.clone();\n     if llvm_util::get_version() < (12, 0, 0) && sess.target.arch == \"powerpc64\" {\n-        target_data_layout = strip_powerpc64_vectors(target_data_layout);\n+        target_data_layout = target_data_layout.replace(\"-v256:256:256-v512:512:512\", \"\");\n+    }\n+    if llvm_util::get_version() < (13, 0, 0) {\n+        if sess.target.arch == \"powerpc64\" {\n+            target_data_layout = target_data_layout.replace(\"-S128\", \"\");\n+        }\n+        if sess.target.arch == \"wasm32\" {\n+            target_data_layout = \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string();\n+        }\n+        if sess.target.arch == \"wasm64\" {\n+            target_data_layout = \"e-m:e-p:64:64-i64:64-n32:64-S128\".to_string();\n+        }\n     }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n@@ -318,6 +329,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),\n             used_statics: RefCell::new(Vec::new()),\n+            compiler_used_statics: RefCell::new(Vec::new()),\n             type_lowering: Default::default(),\n             scalar_lltypes: Default::default(),\n             pointee_infos: Default::default(),\n@@ -340,6 +352,18 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n     pub fn coverage_context(&'a self) -> Option<&'a coverageinfo::CrateCoverageContext<'ll, 'tcx>> {\n         self.coverage_cx.as_ref()\n     }\n+\n+    fn create_used_variable_impl(&self, name: &'static CStr, values: &[&'ll Value]) {\n+        let section = cstr!(\"llvm.metadata\");\n+        let array = self.const_array(&self.type_ptr_to(self.type_i8()), values);\n+\n+        unsafe {\n+            let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n+            llvm::LLVMSetInitializer(g, array);\n+            llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n+            llvm::LLVMSetSection(g, section.as_ptr());\n+        }\n+    }\n }\n \n impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -430,6 +454,10 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.used_statics\n     }\n \n+    fn compiler_used_statics(&self) -> &RefCell<Vec<&'ll Value>> {\n+        &self.compiler_used_statics\n+    }\n+\n     fn set_frame_pointer_type(&self, llfn: &'ll Value) {\n         attributes::set_frame_pointer_type(self, llfn)\n     }\n@@ -440,17 +468,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn create_used_variable(&self) {\n-        let name = cstr!(\"llvm.used\");\n-        let section = cstr!(\"llvm.metadata\");\n-        let array =\n-            self.const_array(&self.type_ptr_to(self.type_i8()), &*self.used_statics.borrow());\n+        self.create_used_variable_impl(cstr!(\"llvm.used\"), &*self.used_statics.borrow());\n+    }\n \n-        unsafe {\n-            let g = llvm::LLVMAddGlobal(self.llmod, self.val_ty(array), name.as_ptr());\n-            llvm::LLVMSetInitializer(g, array);\n-            llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n-            llvm::LLVMSetSection(g, section.as_ptr());\n-        }\n+    fn create_compiler_used_variable(&self) {\n+        self.create_used_variable_impl(\n+            cstr!(\"llvm.compiler.used\"),\n+            &*self.compiler_used_statics.borrow(),\n+        );\n     }\n \n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function> {"}, {"sha": "1e6e5252b25ded1b2045b0b21175e9280a61c1b4", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -352,8 +352,8 @@ impl ModuleLlvm {\n impl Drop for ModuleLlvm {\n     fn drop(&mut self) {\n         unsafe {\n-            llvm::LLVMContextDispose(&mut *(self.llcx as *mut _));\n             llvm::LLVMRustDisposeTargetMachine(&mut *(self.tm as *mut _));\n+            llvm::LLVMContextDispose(&mut *(self.llcx as *mut _));\n         }\n     }\n }"}, {"sha": "36aa022d74658688c32ddf65766aaff40e90cb35", "filename": "compiler/rustc_codegen_llvm/src/llvm/diagnostic.rs", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fdiagnostic.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -6,7 +6,8 @@ pub use self::OptimizationDiagnosticKind::*;\n use crate::value::Value;\n use libc::c_uint;\n \n-use super::{DiagnosticInfo, Twine};\n+use super::{DiagnosticInfo, SMDiagnostic};\n+use rustc_span::InnerSpan;\n \n #[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n@@ -86,36 +87,91 @@ impl OptimizationDiagnostic<'ll> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct InlineAsmDiagnostic<'ll> {\n+pub struct SrcMgrDiagnostic {\n+    pub level: super::DiagnosticLevel,\n+    pub message: String,\n+    pub source: Option<(String, Vec<InnerSpan>)>,\n+}\n+\n+impl SrcMgrDiagnostic {\n+    pub unsafe fn unpack(diag: &SMDiagnostic) -> SrcMgrDiagnostic {\n+        // Recover the post-substitution assembly code from LLVM for better\n+        // diagnostics.\n+        let mut have_source = false;\n+        let mut buffer = String::new();\n+        let mut level = super::DiagnosticLevel::Error;\n+        let mut loc = 0;\n+        let mut ranges = [0; 8];\n+        let mut num_ranges = ranges.len() / 2;\n+        let message = super::build_string(|message| {\n+            buffer = super::build_string(|buffer| {\n+                have_source = super::LLVMRustUnpackSMDiagnostic(\n+                    diag,\n+                    message,\n+                    buffer,\n+                    &mut level,\n+                    &mut loc,\n+                    ranges.as_mut_ptr(),\n+                    &mut num_ranges,\n+                );\n+            })\n+            .expect(\"non-UTF8 inline asm\");\n+        })\n+        .expect(\"non-UTF8 SMDiagnostic\");\n+\n+        SrcMgrDiagnostic {\n+            message,\n+            level,\n+            source: have_source.then(|| {\n+                let mut spans = vec![InnerSpan::new(loc as usize, loc as usize)];\n+                for i in 0..num_ranges {\n+                    spans.push(InnerSpan::new(ranges[i * 2] as usize, ranges[i * 2 + 1] as usize));\n+                }\n+                (buffer, spans)\n+            }),\n+        }\n+    }\n+}\n+\n+#[derive(Clone)]\n+pub struct InlineAsmDiagnostic {\n     pub level: super::DiagnosticLevel,\n     pub cookie: c_uint,\n-    pub message: &'ll Twine,\n-    pub instruction: Option<&'ll Value>,\n+    pub message: String,\n+    pub source: Option<(String, Vec<InnerSpan>)>,\n }\n \n-impl InlineAsmDiagnostic<'ll> {\n-    unsafe fn unpack(di: &'ll DiagnosticInfo) -> Self {\n+impl InlineAsmDiagnostic {\n+    unsafe fn unpackInlineAsm(di: &'ll DiagnosticInfo) -> Self {\n         let mut cookie = 0;\n         let mut message = None;\n-        let mut instruction = None;\n         let mut level = super::DiagnosticLevel::Error;\n \n-        super::LLVMRustUnpackInlineAsmDiagnostic(\n-            di,\n-            &mut level,\n-            &mut cookie,\n-            &mut message,\n-            &mut instruction,\n-        );\n+        super::LLVMRustUnpackInlineAsmDiagnostic(di, &mut level, &mut cookie, &mut message);\n \n-        InlineAsmDiagnostic { level, cookie, message: message.unwrap(), instruction }\n+        InlineAsmDiagnostic {\n+            level,\n+            cookie,\n+            message: super::twine_to_string(message.unwrap()),\n+            source: None,\n+        }\n+    }\n+\n+    unsafe fn unpackSrcMgr(di: &'ll DiagnosticInfo) -> Self {\n+        let mut cookie = 0;\n+        let smdiag = SrcMgrDiagnostic::unpack(super::LLVMRustGetSMDiagnostic(di, &mut cookie));\n+        InlineAsmDiagnostic {\n+            level: smdiag.level,\n+            cookie,\n+            message: smdiag.message,\n+            source: smdiag.source,\n+        }\n     }\n }\n \n pub enum Diagnostic<'ll> {\n     Optimization(OptimizationDiagnostic<'ll>),\n-    InlineAsm(InlineAsmDiagnostic<'ll>),\n+    InlineAsm(InlineAsmDiagnostic),\n     PGO(&'ll DiagnosticInfo),\n     Linker(&'ll DiagnosticInfo),\n     Unsupported(&'ll DiagnosticInfo),\n@@ -130,7 +186,7 @@ impl Diagnostic<'ll> {\n         let kind = super::LLVMRustGetDiagInfoKind(di);\n \n         match kind {\n-            Dk::InlineAsm => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n+            Dk::InlineAsm => InlineAsm(InlineAsmDiagnostic::unpackInlineAsm(di)),\n \n             Dk::OptimizationRemark => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di))\n@@ -162,6 +218,8 @@ impl Diagnostic<'ll> {\n             Dk::Linker => Linker(di),\n             Dk::Unsupported => Unsupported(di),\n \n+            Dk::SrcMgr => InlineAsm(InlineAsmDiagnostic::unpackSrcMgr(di)),\n+\n             _ => UnknownDiagnostic(di),\n         }\n     }"}, {"sha": "3f2ed02d90df3d78889facb1131e0f86b76236e0", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -490,6 +490,7 @@ pub enum DiagnosticKind {\n     PGOProfile,\n     Linker,\n     Unsupported,\n+    SrcMgr,\n }\n \n /// LLVMRustDiagnosticLevel\n@@ -2264,13 +2265,17 @@ extern \"C\" {\n         level_out: &mut DiagnosticLevel,\n         cookie_out: &mut c_uint,\n         message_out: &mut Option<&'a Twine>,\n-        instruction_out: &mut Option<&'a Value>,\n     );\n \n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n+    pub fn LLVMRustGetSMDiagnostic(\n+        DI: &'a DiagnosticInfo,\n+        cookie_out: &mut c_uint,\n+    ) -> &'a SMDiagnostic;\n+\n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(\n         C: &Context,\n         H: InlineAsmDiagHandler,"}, {"sha": "4266e42ec2b50359dfe1574bf9e06e5473bf2a92", "filename": "compiler/rustc_codegen_ssa/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fmisc.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -16,9 +16,11 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &'tcx CodegenUnit<'tcx>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n+    fn compiler_used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_type(&self, llfn: Self::Function);\n     fn apply_target_cpu_attr(&self, llfn: Self::Function);\n     fn create_used_variable(&self);\n+    fn create_compiler_used_variable(&self);\n     /// Declares the extern \"C\" main function for the entry point. Returns None if the symbol already exists.\n     fn declare_c_main(&self, fn_type: Self::Type) -> Option<Self::Function>;\n }"}, {"sha": "a2a3cb56c78062f34196314999482f66e5f1a4b4", "filename": "compiler/rustc_codegen_ssa/src/traits/statics.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fstatics.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -6,17 +6,15 @@ pub trait StaticMethods: BackendTypes {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;\n     fn codegen_static(&self, def_id: DefId, is_mutable: bool);\n \n-    /// Mark the given global value as \"used\", to prevent a backend from potentially removing a\n-    /// static variable that may otherwise appear unused.\n-    ///\n-    /// Static variables in Rust can be annotated with the `#[used]` attribute to direct the `rustc`\n-    /// compiler to mark the variable as a \"used global\".\n-    ///\n-    /// ```no_run\n-    /// #[used]\n-    /// static FOO: u32 = 0;\n-    /// ```\n+    /// Mark the given global value as \"used\", to prevent the compiler and linker from potentially\n+    /// removing a static variable that may otherwise appear unused.\n     fn add_used_global(&self, global: Self::Value);\n+\n+    /// Same as add_used_global(), but only prevent the compiler from potentially removing an\n+    /// otherwise unused symbol. The linker is still permitted to drop it.\n+    ///\n+    /// This corresponds to the semantics of the `#[used]` attribute.\n+    fn add_compiler_used_global(&self, global: Self::Value);\n }\n \n pub trait StaticBuilderMethods: BackendTypes {"}, {"sha": "18294dfad240df6d1f921e95dd6bb0141667d3e3", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -178,7 +178,7 @@ declare_features! (\n     /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n     /// This defines the behavior of panics.\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    /// Allows `#[used]` to preserve symbols (see llvm.used).\n+    /// Allows `#[used]` to preserve symbols (see llvm.compiler.used).\n     (accepted, used, \"1.30.0\", Some(40289), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),"}, {"sha": "4edfed034018759dc78c7b37e2ec4ca162ba9e84", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -1114,15 +1114,13 @@ extern \"C\" void\n LLVMRustUnpackInlineAsmDiagnostic(LLVMDiagnosticInfoRef DI,\n                                   LLVMRustDiagnosticLevel *LevelOut,\n                                   unsigned *CookieOut,\n-                                  LLVMTwineRef *MessageOut,\n-                                  LLVMValueRef *InstructionOut) {\n+                                  LLVMTwineRef *MessageOut) {\n   // Undefined to call this not on an inline assembly diagnostic!\n   llvm::DiagnosticInfoInlineAsm *IA =\n       static_cast<llvm::DiagnosticInfoInlineAsm *>(unwrap(DI));\n \n   *CookieOut = IA->getLocCookie();\n   *MessageOut = wrap(&IA->getMsgStr());\n-  *InstructionOut = wrap(IA->getInstruction());\n \n   switch (IA->getSeverity()) {\n     case DS_Error:\n@@ -1165,6 +1163,7 @@ enum class LLVMRustDiagnosticKind {\n   PGOProfile,\n   Linker,\n   Unsupported,\n+  SrcMgr,\n };\n \n static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n@@ -1193,6 +1192,10 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n     return LLVMRustDiagnosticKind::Linker;\n   case DK_Unsupported:\n     return LLVMRustDiagnosticKind::Unsupported;\n+#if LLVM_VERSION_GE(13, 0)\n+  case DK_SrcMgr:\n+    return LLVMRustDiagnosticKind::SrcMgr;\n+#endif\n   default:\n     return (Kind >= DK_FirstRemark && Kind <= DK_LastRemark)\n                ? LLVMRustDiagnosticKind::OptimizationRemarkOther\n@@ -1280,6 +1283,17 @@ extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n #endif\n }\n \n+extern \"C\" LLVMSMDiagnosticRef LLVMRustGetSMDiagnostic(\n+    LLVMDiagnosticInfoRef DI, unsigned *Cookie) {\n+#if LLVM_VERSION_GE(13, 0)\n+  llvm::DiagnosticInfoSrcMgr *SM = static_cast<llvm::DiagnosticInfoSrcMgr *>(unwrap(DI));\n+  *Cookie = SM->getLocCookie();\n+  return wrap(&SM->getSMDiag());\n+#else\n+  report_fatal_error(\"Shouldn't get called on older versions\");\n+#endif\n+}\n+\n extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n                                            RustStringRef MessageOut,\n                                            RustStringRef BufferOut,"}, {"sha": "f10d4d49bb90936832b3f16c7bd10ba6899838ad", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "611621727bd19051de41e7c05183c7e7c3c5a1fc", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "9c63997ce2f9586d7abe866a40679e9a21ee8bfe", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"E-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { endian: Endian::Big, ..base },\n     }"}, {"sha": "f645eceadfe3a78654cfd0bd1b3a86b3d4ce59d4", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "934371fb2211ce2bc1cc105f91c75e1489058ab6", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-i64:64-n32:64-v256:256:256-v512:512:512\".to_string(),\n+        data_layout: \"e-m:e-i64:64-n32:64-S128-v256:256:256-v512:512:512\".to_string(),\n         arch: \"powerpc64\".to_string(),\n         options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }"}, {"sha": "86b1a75523359a2af1f33a209ab42738ea31533b", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -43,7 +43,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-f128:64-n32:64-S128-ni:1:10:20\".to_string(),\n         arch: \"wasm32\".to_string(),\n         options: opts,\n     }"}, {"sha": "134c6803b15d13dbacd839cfb1ba55011e73bffb", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -54,7 +54,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"wasm32-unknown-unknown\".to_string(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n         arch: \"wasm32\".to_string(),\n         options,\n     }"}, {"sha": "2dab206dc760250b87bbe21b8b5a0bfdeae0c649", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -109,7 +109,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"wasm32-wasi\".to_string(),\n         pointer_width: 32,\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n         arch: \"wasm32\".to_string(),\n         options,\n     }"}, {"sha": "fb6526c0e720356fe0927f0bc319de86e8804ed0", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"wasm64-unknown-unknown\".to_string(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-n32:64-S128-ni:1:10:20\".to_string(),\n         arch: \"wasm64\".to_string(),\n         options,\n     }"}, {"sha": "d1397394be75f4455864fc2cbcc18f4eeea7b1e7", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -180,6 +180,7 @@ impl Step for Llvm {\n             .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n             .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")\n             .define(\"LLVM_INCLUDE_BENCHMARKS\", \"OFF\")\n+            .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n             .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")\n             .define(\"LLVM_ENABLE_LIBEDIT\", \"OFF\")\n             .define(\"LLVM_ENABLE_BINDINGS\", \"OFF\")"}, {"sha": "e6c5dd473b7da567dc20ed3a635ca4dd2c6b7fb6", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -1 +1 @@\n-Subproject commit 260e0f8682098faab68af9c608534756ad378365\n+Subproject commit e6c5dd473b7da567dc20ed3a635ca4dd2c6b7fb6"}, {"sha": "fefc232b490409d1cb218fffdc8055cea3023a7e", "filename": "src/test/codegen/array-equality.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fcodegen%2Farray-equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fcodegen%2Farray-equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-equality.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -29,7 +29,7 @@ pub fn array_eq_value_still_passed_by_pointer(a: [u16; 9], b: [u16; 9]) -> bool\n     // CHECK-NEXT: start:\n     // CHECK-NEXT: bitcast\n     // CHECK-NEXT: bitcast\n-    // CHECK-NEXT: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(i8* nonnull dereferenceable(18) %{{.+}}, i8* nonnull dereferenceable(18) %{{.+}}, i64 18)\n+    // CHECK-NEXT: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(i8* {{.*}} dereferenceable(18) %{{.+}}, i8* {{.*}} dereferenceable(18) %{{.+}}, i64 18)\n     // CHECK-NEXT: %[[EQ:.+]] = icmp eq i32 %[[CMP]], 0\n     // CHECK-NEXT: ret i1 %[[EQ]]\n     a == b\n@@ -41,7 +41,7 @@ pub fn array_eq_long(a: &[u16; 1234], b: &[u16; 1234]) -> bool {\n     // CHECK-NEXT: start:\n     // CHECK-NEXT: bitcast\n     // CHECK-NEXT: bitcast\n-    // CHECK-NEXT: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(i8* nonnull dereferenceable(2468) %{{.+}}, i8* nonnull dereferenceable(2468) %{{.+}}, i64 2468)\n+    // CHECK-NEXT: %[[CMP:.+]] = tail call i32 @{{bcmp|memcmp}}(i8* {{.*}} dereferenceable(2468) %{{.+}}, i8* {{.*}} dereferenceable(2468) %{{.+}}, i64 2468)\n     // CHECK-NEXT: %[[EQ:.+]] = icmp eq i32 %[[CMP]], 0\n     // CHECK-NEXT: ret i1 %[[EQ]]\n     a == b"}, {"sha": "b22b7f52402dde3984447014b88e09d6f2bf7c84", "filename": "src/test/codegen/issue-83623-SIMD-PartialEq.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c/src%2Ftest%2Fcodegen%2Fissue-83623-SIMD-PartialEq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c/src%2Ftest%2Fcodegen%2Fissue-83623-SIMD-PartialEq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-83623-SIMD-PartialEq.rs?ref=e7f7fe462a54b1caeb804a974cd43ba9fd7bee5c", "patch": "@@ -1,46 +0,0 @@\n-// This test checks that jumps generated by logical operators can be optimized away\n-\n-// compile-flags: -Copt-level=3\n-// only-64bit\n-\n-#![crate_type=\"lib\"]\n-\n-pub struct Blueprint {\n-    pub fuel_tank_size: u32,\n-    pub payload: u32,\n-    pub wheel_diameter: u32,\n-    pub wheel_width: u32,\n-    pub storage: u32,\n-}\n-\n-// && chains should not prevent SIMD optimizations for primitives\n-impl PartialEq for Blueprint{\n-    fn eq(&self, other: &Self)->bool{\n-       // CHECK-NOT: call{{.*}}bcmp\n-       // CHECK-NOT: call{{.*}}memcmp\n-       // CHECK-NOT: br {{.*}}\n-       self.fuel_tank_size == other.fuel_tank_size\n-            && self.payload == other.payload\n-            && self.wheel_diameter == other.wheel_diameter\n-            && self.wheel_width == other.wheel_width\n-            && self.storage == other.storage\n-    }\n-}\n-\n-#[derive(PartialEq)]\n-pub struct Blueprint2 {\n-    pub fuel_tank_size: u32,\n-    pub payload: u32,\n-    pub wheel_diameter: u32,\n-    pub wheel_width: u32,\n-    pub storage: u32,\n-}\n-\n-// Derived PartialEq should not generate jumps and should use SIMD\n-#[no_mangle]\n-pub fn partial_eq_should_not_jump(a: &Blueprint2, b:&Blueprint2)->bool{\n-    // CHECK-NOT: call{{.*}}bcmp\n-    // CHECK-NOT: call{{.*}}memcmp\n-    // CHECK-NOT: br {{.*}}\n-    a==b\n-}"}, {"sha": "cb2d0ef809af49c3d5fdc536625178aa88d0e155", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -8,6 +8,6 @@ use std::iter;\n // CHECK-LABEL: @repeat_take_collect\n #[no_mangle]\n pub fn repeat_take_collect() -> Vec<u8> {\n-// CHECK: call void @llvm.memset.p0i8.i{{[0-9]+}}(i8* {{(nonnull )?}}align 1{{.*}} %{{[0-9]+}}, i8 42, i{{[0-9]+}} 100000, i1 false)\n+// CHECK: call void @llvm.memset.p0i8.i{{[0-9]+}}(i8* {{.*}}align 1{{.*}} %{{[0-9]+}}, i8 42, i{{[0-9]+}} 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }"}, {"sha": "1ff1ffcc4b0b8a80dde01c8f60df5b0de136859c", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -22,7 +22,6 @@ DEFINE_INTERNAL=define internal\n ifdef IS_WINDOWS\n \tLLVM_FILECHECK_OPTIONS=\\\n \t\t-check-prefixes=CHECK,WINDOWS \\\n-\t\t-DPRIVATE_GLOBAL='internal global' \\\n \t\t-DDEFINE_INTERNAL='$(DEFINE_INTERNAL)' \\\n \t\t-DCOMDAT_IF_SUPPORTED='$(COMDAT_IF_SUPPORTED)' \\\n \t\t-DINSTR_PROF_DATA='.lprfd$$M' \\\n@@ -36,7 +35,6 @@ ifdef IS_WINDOWS\n else\n \tLLVM_FILECHECK_OPTIONS=\\\n \t\t-check-prefixes=CHECK \\\n-\t\t-DPRIVATE_GLOBAL='private global' \\\n \t\t-DDEFINE_INTERNAL='$(DEFINE_INTERNAL)' \\\n \t\t-DCOMDAT_IF_SUPPORTED='$(COMDAT_IF_SUPPORTED)' \\\n \t\t-DINSTR_PROF_DATA='$(DATA_SECTION_PREFIX)__llvm_prf_data$(INSTR_PROF_DATA_SUFFIX)' \\"}, {"sha": "8e5f210468773cd91c97eea4ea6f14c302380e8f", "filename": "src/test/run-make-fulldeps/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -11,27 +11,25 @@ CHECK-SAME:   section \"[[INSTR_PROF_COVMAP]]\", align 8\n \n WINDOWS:      @__llvm_profile_runtime = external global i32\n \n-CHECK:        @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called = [[PRIVATE_GLOBAL]]\n-CHECK-SAME:   section \"[[INSTR_PROF_CNTS]]\", align 8\n+CHECK:        @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called = {{private|internal}} global\n+CHECK-SAME:   section \"[[INSTR_PROF_CNTS]]\"{{.*}}, align 8\n \n-CHECK:        @__profd__R{{[a-zA-Z0-9_]+}}testprog14will_be_called = [[PRIVATE_GLOBAL]]\n+CHECK:        @__profd__R{{[a-zA-Z0-9_]+}}testprog14will_be_called = {{private|internal}} global\n CHECK-SAME:   @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called,\n-CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\", align 8\n+CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\"{{.*}}, align 8\n \n-CHECK:        @__profc__R{{[a-zA-Z0-9_]+}}testprog4main = [[PRIVATE_GLOBAL]]\n-CHECK-SAME:   section \"[[INSTR_PROF_CNTS]]\", align 8\n+CHECK:        @__profc__R{{[a-zA-Z0-9_]+}}testprog4main = {{private|internal}} global\n+CHECK-SAME:   section \"[[INSTR_PROF_CNTS]]\"{{.*}}, align 8\n \n-CHECK:        @__profd__R{{[a-zA-Z0-9_]+}}testprog4main = [[PRIVATE_GLOBAL]]\n+CHECK:        @__profd__R{{[a-zA-Z0-9_]+}}testprog4main = {{private|internal}} global\n CHECK-SAME:   @__profc__R{{[a-zA-Z0-9_]+}}testprog4main,\n-CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\", align 8\n+CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\"{{.*}}, align 8\n \n CHECK:        @__llvm_prf_nm = private constant\n CHECK-SAME:   section \"[[INSTR_PROF_NAME]]\", align 1\n \n CHECK:        @llvm.used = appending global\n CHECK-SAME:   i8* bitcast ({ {{.*}} }* @__llvm_coverage_mapping to i8*)\n-WINDOWS-SAME: i8* bitcast (i32 ()* @__llvm_profile_runtime_user to i8*)\n-CHECK-SAME:   i8* bitcast ({ {{.*}} }* @__profd__R{{[a-zA-Z0-9_]*}}testprog4main to i8*)\n CHECK-SAME:   i8* getelementptr inbounds ({{.*}}* @__llvm_prf_nm, i32 0, i32 0)\n CHECK-SAME:   section \"llvm.metadata\"\n "}, {"sha": "ea1b80cc9b06b69370de9792841abde0b15cc3ff", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -1,11 +1,13 @@\n // build-fail\n // ignore-emscripten no asm! support\n+// The error message differs slightly between LLVM versions\n+// min-llvm-version: 13.0\n // Regression test for #69092\n \n #![feature(llvm_asm)]\n #![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-    //~^ ERROR: expected string in '.ascii' directive\n+    //~^ ERROR: expected string\n }"}, {"sha": "28c5fbbca3c6045dfc27318fa1aa8af4db456e28", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db002a06ae9154a35d410550bc5132df883d7baa/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=db002a06ae9154a35d410550bc5132df883d7baa", "patch": "@@ -1,5 +1,5 @@\n-error: expected string in '.ascii' directive\n-  --> $DIR/issue-69092.rs:9:14\n+error: expected string\n+  --> $DIR/issue-69092.rs:11:14\n    |\n LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n    |              ^"}]}