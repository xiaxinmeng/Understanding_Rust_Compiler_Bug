{"sha": "5d22b18bf28a54586008e9d8d4bfd72012c00e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjJiMThiZjI4YTU0NTg2MDA4ZTlkOGQ0YmZkNzIwMTJjMDBlMmU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-08-16T14:10:54Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-08-16T18:31:48Z"}, "message": "Improve codegen of align_offset when stride == 1\n\nPreviously checking for `pmoda == 0` would get LLVM to generate branchy\ncode, when, for `stride = 1` the offset can be computed without such a\nbranch by doing effectively a `-p % a`.\n\nFor well-known (constant) alignments, with the new ordering of these\nconditionals, we end up generating 2 to 3 cheap instructions on x86_64:\n\n    movq    %rdi, %rax\n    negl    %eax\n    andl    $7, %eax\n\ninstead of 5+ as previously.\n\nFor unknown alignments the new code also generates just 3 instructions:\n\n    negq    %rdi\n    leaq    -1(%rsi), %rax\n    andq    %rdi, %rax", "tree": {"sha": "4ca3500e0654687aee1d933df544dd4dcdeda021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca3500e0654687aee1d933df544dd4dcdeda021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d22b18bf28a54586008e9d8d4bfd72012c00e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d22b18bf28a54586008e9d8d4bfd72012c00e2e", "html_url": "https://github.com/rust-lang/rust/commit/5d22b18bf28a54586008e9d8d4bfd72012c00e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d22b18bf28a54586008e9d8d4bfd72012c00e2e/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7271da69a7f69d9aef931f30fbb403ffd49436e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7271da69a7f69d9aef931f30fbb403ffd49436e", "html_url": "https://github.com/rust-lang/rust/commit/e7271da69a7f69d9aef931f30fbb403ffd49436e"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "68b5d1df71cb265c9c1cc18f9cbc912d76d35662", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d22b18bf28a54586008e9d8d4bfd72012c00e2e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d22b18bf28a54586008e9d8d4bfd72012c00e2e/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=5d22b18bf28a54586008e9d8d4bfd72012c00e2e", "patch": "@@ -1172,7 +1172,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n \n     /// Calculate multiplicative modular inverse of `x` modulo `m`.\n     ///\n-    /// This implementation is tailored for align_offset and has following preconditions:\n+    /// This implementation is tailored for `align_offset` and has following preconditions:\n     ///\n     /// * `m` is a power-of-two;\n     /// * `x < m`; (if `x \u2265 m`, pass in `x % m` instead)\n@@ -1220,23 +1220,21 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     }\n \n     let stride = mem::size_of::<T>();\n-    // SAFETY: `a` is a power-of-two, hence non-zero.\n+    // SAFETY: `a` is a power-of-two, therefore non-zero.\n     let a_minus_one = unsafe { unchecked_sub(a, 1) };\n-    let pmoda = p as usize & a_minus_one;\n+    if stride == 1 {\n+        // `stride == 1` case can be computed more efficiently through `-p (mod a)`.\n+        return wrapping_sub(0, p as usize) & a_minus_one;\n+    }\n \n+    let pmoda = p as usize & a_minus_one;\n     if pmoda == 0 {\n         // Already aligned. Yay!\n         return 0;\n-    }\n-\n-    if stride <= 1 {\n-        return if stride == 0 {\n-            // If the pointer is not aligned, and the element is zero-sized, then no amount of\n-            // elements will ever align the pointer.\n-            !0\n-        } else {\n-            wrapping_sub(a, pmoda)\n-        };\n+    } else if stride == 0 {\n+        // If the pointer is not aligned, and the element is zero-sized, then no amount of\n+        // elements will ever align the pointer.\n+        return usize::MAX;\n     }\n \n     let smoda = stride & a_minus_one;"}]}