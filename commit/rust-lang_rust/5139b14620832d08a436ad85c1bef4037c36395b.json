{"sha": "5139b14620832d08a436ad85c1bef4037c36395b", "node_id": "C_kwDOAAsO6NoAKDUxMzliMTQ2MjA4MzJkMDhhNDM2YWQ4NWMxYmVmNDAzN2MzNjM5NWI", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2023-01-24T17:13:54Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2023-01-24T17:38:44Z"}, "message": "fix: version gate changes for multiline single generic bound", "tree": {"sha": "3c7bca51bf5e448b95ef910e94fe6de07a520921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7bca51bf5e448b95ef910e94fe6de07a520921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5139b14620832d08a436ad85c1bef4037c36395b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5139b14620832d08a436ad85c1bef4037c36395b", "html_url": "https://github.com/rust-lang/rust/commit/5139b14620832d08a436ad85c1bef4037c36395b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5139b14620832d08a436ad85c1bef4037c36395b/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eeb4fd23050d531293580dc83ca19e0fd7244e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eeb4fd23050d531293580dc83ca19e0fd7244e4", "html_url": "https://github.com/rust-lang/rust/commit/6eeb4fd23050d531293580dc83ca19e0fd7244e4"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "01e2fb6e61e159368f65b5dd9a5df9edec4091c3", "filename": "src/types.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5139b14620832d08a436ad85c1bef4037c36395b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5139b14620832d08a436ad85c1bef4037c36395b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=5139b14620832d08a436ad85c1bef4037c36395b", "patch": "@@ -1057,21 +1057,22 @@ fn join_bounds_inner(\n         },\n     )?;\n \n-    // Whether retry the function with forced newline is needed:\n+    // Whether to retry with a forced newline:\n     //   Only if result is not already multiline and did not exceed line width,\n     //   and either there is more than one item;\n     //       or the single item is of type `Trait`,\n     //          and any of the internal arrays contains more than one item;\n-    let retry_with_force_newline =\n-        if force_newline || (!result.0.contains('\\n') && result.0.len() <= shape.width) {\n-            false\n-        } else {\n-            if items.len() > 1 {\n-                true\n-            } else {\n-                is_item_with_multi_items_array(&items[0])\n-            }\n-        };\n+    let retry_with_force_newline = match context.config.version() {\n+        Version::One => {\n+            !force_newline\n+                && items.len() > 1\n+                && (result.0.contains('\\n') || result.0.len() > shape.width)\n+        }\n+        Version::Two if force_newline => false,\n+        Version::Two if (!result.0.contains('\\n') && result.0.len() <= shape.width) => false,\n+        Version::Two if items.len() > 1 => true,\n+        Version::Two => is_item_with_multi_items_array(&items[0]),\n+    };\n \n     if retry_with_force_newline {\n         join_bounds_inner(context, shape, items, need_indent, true)"}, {"sha": "7735e34f3b5ed61b976592806a38a86792072fc9", "filename": "tests/target/issue-4689/one.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5139b14620832d08a436ad85c1bef4037c36395b/tests%2Ftarget%2Fissue-4689%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5139b14620832d08a436ad85c1bef4037c36395b/tests%2Ftarget%2Fissue-4689%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4689%2Fone.rs?ref=5139b14620832d08a436ad85c1bef4037c36395b", "patch": "@@ -3,14 +3,14 @@\n // Based on the issue description\n pub trait PrettyPrinter<'tcx>:\n     Printer<\n-        'tcx,\n-        Error = fmt::Error,\n-        Path = Self,\n-        Region = Self,\n-        Type = Self,\n-        DynExistential = Self,\n-        Const = Self,\n-    >\n+    'tcx,\n+    Error = fmt::Error,\n+    Path = Self,\n+    Region = Self,\n+    Type = Self,\n+    DynExistential = Self,\n+    Const = Self,\n+>\n {\n     //\n }"}]}