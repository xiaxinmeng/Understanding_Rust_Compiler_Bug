{"sha": "c620a972f3bae8171e17eb8a243b419caadd9ab7", "node_id": "C_kwDOAAsO6NoAKGM2MjBhOTcyZjNiYWU4MTcxZTE3ZWI4YTI0M2I0MTljYWFkZDlhYjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T04:48:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-24T01:10:24Z"}, "message": "Disable dyn* upcasting", "tree": {"sha": "a6ed01263d6ad7420e52e5fed47dcac11ad4a03d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6ed01263d6ad7420e52e5fed47dcac11ad4a03d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c620a972f3bae8171e17eb8a243b419caadd9ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c620a972f3bae8171e17eb8a243b419caadd9ab7", "html_url": "https://github.com/rust-lang/rust/commit/c620a972f3bae8171e17eb8a243b419caadd9ab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c620a972f3bae8171e17eb8a243b419caadd9ab7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f8737b2f5d3bf7d6b784fad00b663b7ff9feda", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f8737b2f5d3bf7d6b784fad00b663b7ff9feda", "html_url": "https://github.com/rust-lang/rust/commit/70f8737b2f5d3bf7d6b784fad00b663b7ff9feda"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "ea842af1e7f64bb8020484133b746d1ffe8e28e7", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -755,20 +755,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         if let ty::Dynamic(a_data, _, _) = a.kind()\n             && let ty::Dynamic(b_data, _, _) = b.kind()\n+            && a_data.principal_def_id() == b_data.principal_def_id()\n         {\n-            if a_data.principal_def_id() == b_data.principal_def_id() {\n-                return self.unify_and(a, b, |_| vec![]);\n-            } else if !self.tcx().features().trait_upcasting {\n-                let mut err = feature_err(\n-                    &self.tcx.sess.parse_sess,\n-                    sym::trait_upcasting,\n-                    self.cause.span,\n-                    &format!(\n-                        \"cannot cast `{a}` to `{b}`, trait upcasting coercion is experimental\"\n-                    ),\n-                );\n-                err.emit();\n-            }\n+            return self.unify_and(a, b, |_| vec![]);\n         }\n \n         // Check the obligations of the cast -- for example, when casting\n@@ -796,19 +785,16 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ])\n             .collect();\n \n-        // Enforce that the type is `usize`/pointer-sized. For now, only those\n-        // can be coerced to `dyn*`, except for `dyn* -> dyn*` upcasts.\n-        if !a.is_dyn_star() {\n-            obligations.push(Obligation::new(\n-                self.tcx,\n-                self.cause.clone(),\n-                self.param_env,\n-                ty::Binder::dummy(\n-                    self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n-                )\n-                .to_poly_trait_predicate(),\n-            ));\n-        }\n+        // Enforce that the type is `usize`/pointer-sized.\n+        obligations.push(Obligation::new(\n+            self.tcx,\n+            self.cause.clone(),\n+            self.param_env,\n+            ty::Binder::dummy(\n+                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n+            )\n+            .to_poly_trait_predicate(),\n+        ));\n \n         Ok(InferOk {\n             value: (vec![Adjustment { kind: Adjust::DynStar, target: b }], b),"}, {"sha": "9d899da9bba248392567de5e1af22fca69421393", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -776,9 +776,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         match (source.kind(), target.kind()) {\n             // Trait+Kx+'a -> Trait+Ky+'b (upcasts).\n-            (&ty::Dynamic(ref data_a, _, dyn_a), &ty::Dynamic(ref data_b, _, dyn_b))\n-                if dyn_a == dyn_b =>\n-            {\n+            (&ty::Dynamic(ref data_a, _, ty::Dyn), &ty::Dynamic(ref data_b, _, ty::Dyn)) => {\n                 // Upcast coercions permit several things:\n                 //\n                 // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`"}, {"sha": "3cffd2bb7801766ee6d1a9f7884b09ae13bccd5d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -803,9 +803,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let upcast_trait_ref;\n         match (source.kind(), target.kind()) {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n-            (&ty::Dynamic(ref data_a, r_a, repr_a), &ty::Dynamic(ref data_b, r_b, repr_b))\n-                if repr_a == repr_b =>\n-            {\n+            (\n+                &ty::Dynamic(ref data_a, r_a, repr_a @ ty::Dyn),\n+                &ty::Dynamic(ref data_b, r_b, ty::Dyn),\n+            ) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n                 // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n@@ -831,7 +832,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             .map(ty::Binder::dummy),\n                     );\n                 let existential_predicates = tcx.mk_poly_existential_predicates(iter);\n-                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_b);\n+                let source_trait = tcx.mk_dynamic(existential_predicates, r_b, repr_a);\n \n                 // Require that the traits involved in this upcast are **equal**;\n                 // only the **lifetime bound** is changed."}, {"sha": "a4eb669e3210430d0c3ce1efbd13cee6b1d978b6", "filename": "src/test/ui/dyn-star/no-unsize-coerce-dyn-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.rs?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -0,0 +1,13 @@\n+#![feature(dyn_star, trait_upcasting)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait A: B {}\n+trait B {}\n+impl A for usize {}\n+impl B for usize {}\n+\n+fn main() {\n+    let x: Box<dyn* A> = Box::new(1usize as dyn* A);\n+    let y: Box<dyn* B> = x;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "2fc751b3b4a1efbff854a2355448c7922ac284fc", "filename": "src/test/ui/dyn-star/no-unsize-coerce-dyn-trait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fno-unsize-coerce-dyn-trait.stderr?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no-unsize-coerce-dyn-trait.rs:1:12\n+   |\n+LL | #![feature(dyn_star, trait_upcasting)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/no-unsize-coerce-dyn-trait.rs:11:26\n+   |\n+LL |     let y: Box<dyn* B> = x;\n+   |            -----------   ^ expected trait `B`, found trait `A`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `Box<dyn* B>`\n+              found struct `Box<dyn* A>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "24c077047e94996f05d43fc52125cbc58f0c25f5", "filename": "src/test/ui/dyn-star/upcast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.rs?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -1,7 +1,6 @@\n-// run-pass\n+// known-bug: unknown\n \n #![feature(dyn_star, trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: Bar {\n     fn hello(&self);"}, {"sha": "6a95f7754e68548d8abb417105c7bb88d2e62dbd", "filename": "src/test/ui/dyn-star/upcast.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c620a972f3bae8171e17eb8a243b419caadd9ab7/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fupcast.stderr?ref=c620a972f3bae8171e17eb8a243b419caadd9ab7", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/upcast.rs:3:12\n+   |\n+LL | #![feature(dyn_star, trait_upcasting)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0277]: `dyn* Foo` needs to be a pointer-sized type\n+  --> $DIR/upcast.rs:30:23\n+   |\n+LL |     let w: dyn* Bar = w;\n+   |                       ^ `dyn* Foo` needs to be a pointer-sized type\n+   |\n+   = help: the trait `PointerSized` is not implemented for `dyn* Foo`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0277`."}]}