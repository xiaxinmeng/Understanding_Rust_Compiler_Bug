{"sha": "d848ce0ddf4f20bd6fbae70ad126640247f61a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDhjZTBkZGY0ZjIwYmQ2ZmJhZTcwYWQxMjY2NDAyNDdmNjFhNTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T12:16:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T12:16:01Z"}, "message": "document check_pat_slice", "tree": {"sha": "49ea3981727a7efa7d63e36123db94023c886670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ea3981727a7efa7d63e36123db94023c886670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d848ce0ddf4f20bd6fbae70ad126640247f61a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d848ce0ddf4f20bd6fbae70ad126640247f61a56", "html_url": "https://github.com/rust-lang/rust/commit/d848ce0ddf4f20bd6fbae70ad126640247f61a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d848ce0ddf4f20bd6fbae70ad126640247f61a56/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2d6413eb276caa4d881da1aad759b02a64c6aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d6413eb276caa4d881da1aad759b02a64c6aea", "html_url": "https://github.com/rust-lang/rust/commit/f2d6413eb276caa4d881da1aad759b02a64c6aea"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "4fb57a65625747cfe82607c4f4b20faf7ed4d6e2", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d848ce0ddf4f20bd6fbae70ad126640247f61a56/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d848ce0ddf4f20bd6fbae70ad126640247f61a56/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d848ce0ddf4f20bd6fbae70ad126640247f61a56", "patch": "@@ -1154,6 +1154,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_ref(region, mt)\n     }\n \n+    /// Type check a slice pattern.\n+    ///\n+    /// Syntactically, these look like `[pat_0, ..., pat_n]`.\n+    /// Semantically, we are type checking a pattern with structure:\n+    /// ```\n+    /// [before_0, ..., before_n, (slice, after_0, ... after_n)?]\n+    /// ```\n+    /// The type of `slice`, if it is present, depends on the `expected` type.\n+    /// If `slice` is missing, then so is `after_i`.\n+    /// If `slice` is present, it can still represent 0 elements.\n     fn check_pat_slice(\n         &self,\n         span: Span,\n@@ -1167,27 +1177,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let expected_ty = self.structurally_resolved_type(span, expected);\n         let (inner_ty, slice_ty) = match expected_ty.kind {\n+            // An array, so we might have something like `let [a, b, c] = [0, 1, 2];`.\n             ty::Array(inner_ty, size) => {\n                 let slice_ty = if let Some(size) = size.try_eval_usize(tcx, self.param_env) {\n+                    // Now we know the length...\n                     let min_len = before.len() as u64 + after.len() as u64;\n                     if slice.is_none() {\n+                        // ...and since there is no variable-length pattern,\n+                        // we require an exact match between the number of elements\n+                        // in the array pattern and as provided by the matched type.\n                         if min_len != size {\n                             self.error_scrutinee_inconsistent_length(span, min_len, size)\n                         }\n                         tcx.types.err\n                     } else if let Some(rest) = size.checked_sub(min_len) {\n+                        // The variable-length pattern was there,\n+                        // so it has an array type with the remaining elements left as its size...\n                         tcx.mk_array(inner_ty, rest)\n                     } else {\n+                        // ...however, in this case, there were no remaining elements.\n+                        // That is, the slice pattern requires more than the array type offers.\n                         self.error_scrutinee_with_rest_inconsistent_length(span, min_len, size);\n                         tcx.types.err\n                     }\n                 } else {\n+                    // No idea what the length is, which happens if we have e.g.,\n+                    // `let [a, b] = arr` where `arr: [T; N]` where `const N: usize`.\n                     self.error_scrutinee_unfixed_length(span);\n                     tcx.types.err\n                 };\n                 (inner_ty, slice_ty)\n             }\n             ty::Slice(inner_ty) => (inner_ty, expected_ty),\n+            // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected_ty.references_error() {\n                     self.error_expected_array_or_slice(span, expected_ty);\n@@ -1196,12 +1218,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         };\n \n+        // Type check all the patterns before `slice`.\n         for elt in before {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }\n+        // Type check the `slice`, if present, against its expected type.\n         if let Some(slice) = slice {\n             self.check_pat(&slice, slice_ty, def_bm, discrim_span);\n         }\n+        // Type check the elements after `slice`, if present.\n         for elt in after {\n             self.check_pat(&elt, inner_ty, def_bm, discrim_span);\n         }"}]}