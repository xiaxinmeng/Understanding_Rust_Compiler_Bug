{"sha": "787d49e4cbfe54162e79b5e205f18b61f4320e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4N2Q0OWU0Y2JmZTU0MTYyZTc5YjVlMjA1ZjE4YjYxZjQzMjBlNWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-19T23:01:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-19T23:01:42Z"}, "message": "Rollup merge of #60960 - matthewjasper:remove-lowering-gensym, r=petrochenkov\n\nStop using gensyms in HIR lowering\n\nThese names aren't ever handled by resolve, so there's no reason to\nmake them gensyms.\n\nDiagnostics wanting to behave differently for these variables should\ninspect either the `MatchSource`/`LocalSource` or the `Span`. All\ncurrent diagnostics appear to do this.\n\nr? @petrochenkov", "tree": {"sha": "f3b08fba0ecebc7f25cca67e49d6229698c8a87a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3b08fba0ecebc7f25cca67e49d6229698c8a87a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/787d49e4cbfe54162e79b5e205f18b61f4320e5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc4eBWCRBK7hj4Ov3rIwAAdHIIAHB+jVq1xCzkyKv8MAk7nhGZ\nH1dfpNKm/P1bXYqjkAIhEZSbgxukbaf+8eFvJ+nibLxOBMVYjBj5yYK8xfNB1cx3\nxdgSYPq6KQYyzSkqWAWGYWCTxzFIKPK1qQ26SG6UwecZgDebjAJBB9QF+DIMafXn\nSQYbBAILV3xDCvYtsJgapiuioZj7OG8ekBc7Euvpxyir2bNJ0aMyI3vb4RG8SCmv\ndtcZLq1j9ipWkWQBjVCO+HPVqDWOPSmy+9d5OwNvM1NHle1g4U98sWqKcGAlJjCf\nUx1PoBYRm0jeS16xH1EAO72Qn2hWUlIgGBCDFyxDXj7NULSqkyLvUH+ADmbGnDA=\n=JFYf\n-----END PGP SIGNATURE-----\n", "payload": "tree f3b08fba0ecebc7f25cca67e49d6229698c8a87a\nparent 986aa36ed1987bf5c2f97dbdd8b5c6ce2720faa7\nparent 6bb3980e7a7b6ecf891e2309cc858fe167d1a651\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558306902 +0200\ncommitter GitHub <noreply@github.com> 1558306902 +0200\n\nRollup merge of #60960 - matthewjasper:remove-lowering-gensym, r=petrochenkov\n\nStop using gensyms in HIR lowering\n\nThese names aren't ever handled by resolve, so there's no reason to\nmake them gensyms.\n\nDiagnostics wanting to behave differently for these variables should\ninspect either the `MatchSource`/`LocalSource` or the `Span`. All\ncurrent diagnostics appear to do this.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/787d49e4cbfe54162e79b5e205f18b61f4320e5c", "html_url": "https://github.com/rust-lang/rust/commit/787d49e4cbfe54162e79b5e205f18b61f4320e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/787d49e4cbfe54162e79b5e205f18b61f4320e5c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "986aa36ed1987bf5c2f97dbdd8b5c6ce2720faa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/986aa36ed1987bf5c2f97dbdd8b5c6ce2720faa7", "html_url": "https://github.com/rust-lang/rust/commit/986aa36ed1987bf5c2f97dbdd8b5c6ce2720faa7"}, {"sha": "6bb3980e7a7b6ecf891e2309cc858fe167d1a651", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb3980e7a7b6ecf891e2309cc858fe167d1a651", "html_url": "https://github.com/rust-lang/rust/commit/6bb3980e7a7b6ecf891e2309cc858fe167d1a651"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "3ec4d4e8cc8f68350eba397be435676d2c89fc91", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/787d49e4cbfe54162e79b5e205f18b61f4320e5c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787d49e4cbfe54162e79b5e205f18b61f4320e5c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=787d49e4cbfe54162e79b5e205f18b61f4320e5c", "patch": "@@ -855,10 +855,6 @@ impl<'a> LoweringContext<'a> {\n         self.sess.diagnostic()\n     }\n \n-    fn str_to_ident(&self, s: &'static str) -> Ident {\n-        Ident::with_empty_ctxt(Symbol::gensym(s))\n-    }\n-\n     fn with_anonymous_lifetime_mode<R>(\n         &mut self,\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n@@ -4621,18 +4617,18 @@ impl<'a> LoweringContext<'a> {\n                 );\n                 head.span = desugared_span;\n \n-                let iter = self.str_to_ident(\"iter\");\n+                let iter = Ident::with_empty_ctxt(sym::iter);\n \n-                let next_ident = self.str_to_ident(\"__next\");\n+                let next_ident = Ident::with_empty_ctxt(sym::__next);\n                 let (next_pat, next_pat_hid) = self.pat_ident_binding_mode(\n                     desugared_span,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n                 );\n \n-                // `::std::option::Option::Some(val) => next = val`\n+                // `::std::option::Option::Some(val) => __next = val`\n                 let pat_arm = {\n-                    let val_ident = self.str_to_ident(\"val\");\n+                    let val_ident = Ident::with_empty_ctxt(sym::val);\n                     let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n                     let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_hid));\n                     let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_hid));\n@@ -4771,17 +4767,13 @@ impl<'a> LoweringContext<'a> {\n                 let unstable_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n-                    Some(vec![\n-                        Symbol::intern(\"try_trait\")\n-                    ].into()),\n+                    Some(vec![sym::try_trait].into()),\n                 );\n                 let try_span = self.sess.source_map().end_point(e.span);\n                 let try_span = self.sess.source_map().mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     try_span,\n-                    Some(vec![\n-                        Symbol::intern(\"try_trait\")\n-                    ].into()),\n+                    Some(vec![sym::try_trait].into()),\n                 );\n \n                 // `Try::into_result(<expr>)`\n@@ -4802,7 +4794,8 @@ impl<'a> LoweringContext<'a> {\n                     // `allow(unreachable_code)`\n                     let allow = {\n                         let allow_ident = Ident::with_empty_ctxt(sym::allow).with_span_pos(e.span);\n-                        let uc_ident = Ident::from_str(\"unreachable_code\").with_span_pos(e.span);\n+                        let uc_ident = Ident::with_empty_ctxt(sym::unreachable_code)\n+                            .with_span_pos(e.span);\n                         let uc_nested = attr::mk_nested_word_item(uc_ident);\n                         attr::mk_list_item(e.span, allow_ident, vec![uc_nested])\n                     };\n@@ -4812,7 +4805,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // `Ok(val) => #[allow(unreachable_code)] val,`\n                 let ok_arm = {\n-                    let val_ident = self.str_to_ident(\"val\");\n+                    let val_ident = Ident::with_empty_ctxt(sym::val);\n                     let (val_pat, val_pat_nid) = self.pat_ident(e.span, val_ident);\n                     let val_expr = P(self.expr_ident_with_attrs(\n                         e.span,\n@@ -4828,7 +4821,7 @@ impl<'a> LoweringContext<'a> {\n                 // `Err(err) => #[allow(unreachable_code)]\n                 //              return Try::from_error(From::from(err)),`\n                 let err_arm = {\n-                    let err_ident = self.str_to_ident(\"err\");\n+                    let err_ident = Ident::with_empty_ctxt(sym::err);\n                     let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n                     let from_expr = {\n                         let from_path = &[sym::convert, sym::From, sym::from];\n@@ -5552,7 +5545,7 @@ impl<'a> LoweringContext<'a> {\n         //         match ::std::future::poll_with_tls_context(unsafe {\n         //             ::std::pin::Pin::new_unchecked(&mut pinned)\n         //         }) {\n-        //             ::std::task::Poll::Ready(x) => break x,\n+        //             ::std::task::Poll::Ready(result) => break result,\n         //             ::std::task::Poll::Pending => {},\n         //         }\n         //         yield ();\n@@ -5580,12 +5573,12 @@ impl<'a> LoweringContext<'a> {\n         let gen_future_span = self.sess.source_map().mark_span_with_reason(\n             CompilerDesugaringKind::Await,\n             await_span,\n-            Some(vec![Symbol::intern(\"gen_future\")].into()),\n+            Some(vec![sym::gen_future].into()),\n         );\n \n         // let mut pinned = <expr>;\n         let expr = P(self.lower_expr(expr));\n-        let pinned_ident = self.str_to_ident(\"pinned\");\n+        let pinned_ident = Ident::with_empty_ctxt(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) = self.pat_ident_binding_mode(\n             span,\n             pinned_ident,\n@@ -5621,11 +5614,11 @@ impl<'a> LoweringContext<'a> {\n             ))\n         };\n \n-        // `::std::task::Poll::Ready(x) => break x`\n+        // `::std::task::Poll::Ready(result) => break result`\n         let loop_node_id = self.sess.next_node_id();\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n-            let x_ident = self.str_to_ident(\"x\");\n+            let x_ident = Ident::with_empty_ctxt(sym::result);\n             let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n             let x_expr = P(self.expr_ident(span, x_ident, x_pat_hid));\n             let ready_pat = self.pat_std_enum("}, {"sha": "97b22282668ad1b77d27e00391d49b0e5cb4fba4", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/787d49e4cbfe54162e79b5e205f18b61f4320e5c/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/787d49e4cbfe54162e79b5e205f18b61f4320e5c/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=787d49e4cbfe54162e79b5e205f18b61f4320e5c", "patch": "@@ -229,6 +229,7 @@ symbols! {\n         eh_personality,\n         eh_unwind_resume,\n         enable,\n+        err,\n         Err,\n         except,\n         exclusive_range_pattern,\n@@ -260,6 +261,7 @@ symbols! {\n         fundamental,\n         future,\n         Future,\n+        gen_future,\n         generators,\n         generic_associated_types,\n         generic_param_attrs,\n@@ -361,6 +363,7 @@ symbols! {\n         never,\n         never_type,\n         next,\n+        __next,\n         nll,\n         no_builtins,\n         no_core,\n@@ -406,6 +409,7 @@ symbols! {\n         Pending,\n         pin,\n         Pin,\n+        pinned,\n         platform_intrinsics,\n         plugin,\n         plugin_registrar,\n@@ -569,6 +573,7 @@ symbols! {\n         trivial_bounds,\n         Try,\n         try_blocks,\n+        try_trait,\n         tuple_indexing,\n         ty,\n         type_alias_enum_variants,\n@@ -587,6 +592,7 @@ symbols! {\n         uniform_paths,\n         universal_impl_trait,\n         unmarked_api,\n+        unreachable_code,\n         unrestricted_attribute_tokens,\n         unsafe_destructor_blind_to_params,\n         unsafe_no_drop_flag,\n@@ -601,6 +607,7 @@ symbols! {\n         use_nested_groups,\n         usize,\n         v1,\n+        val,\n         vis,\n         visible_private_types,\n         volatile,"}]}