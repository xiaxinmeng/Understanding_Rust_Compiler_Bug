{"sha": "c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDU0ODUzZDIxZThhZTNiNWI0ZTNjOGVlN2YwMmY3YTdmNjQ4N2Y=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-21T03:27:34Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-21T03:27:34Z"}, "message": "Remove useless ToPrimitive bound on range_inclusive()", "tree": {"sha": "70f603ff03e67a1f5ad76c44f30100048cbaf8cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f603ff03e67a1f5ad76c44f30100048cbaf8cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f", "html_url": "https://github.com/rust-lang/rust/commit/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e546452727379f701f2104eb826141a29d4b39fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e546452727379f701f2104eb826141a29d4b39fd", "html_url": "https://github.com/rust-lang/rust/commit/e546452727379f701f2104eb826141a29d4b39fd"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "da1462a7047589c408db1d59963fc6a7dead9f4d", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c7454853d21e8ae3b5b4e3c8ee7f02f7a7f6487f", "patch": "@@ -2016,7 +2016,7 @@ pub struct RangeInclusive<A> {\n \n /// Return an iterator over the range [start, stop]\n #[inline]\n-pub fn range_inclusive<A: Add<A, A> + Ord + Clone + One + ToPrimitive>(start: A, stop: A)\n+pub fn range_inclusive<A: Add<A, A> + Ord + Clone + One>(start: A, stop: A)\n     -> RangeInclusive<A> {\n     RangeInclusive{range: range(start, stop), done: false}\n }"}]}