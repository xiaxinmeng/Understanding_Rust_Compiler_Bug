{"sha": "9d61b4e081b05228186aeb62a79ab33c28f39f6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjFiNGUwODFiMDUyMjgxODZhZWI2MmE3OWFiMzNjMjhmMzlmNmY=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-24T15:46:45Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-05-24T15:51:40Z"}, "message": "Fix SpanlessEq for GenericArg::Const", "tree": {"sha": "14f53ee088baaef9b1ce5a662bd38b0fd8c96e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f53ee088baaef9b1ce5a662bd38b0fd8c96e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d61b4e081b05228186aeb62a79ab33c28f39f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d61b4e081b05228186aeb62a79ab33c28f39f6f", "html_url": "https://github.com/rust-lang/rust/commit/9d61b4e081b05228186aeb62a79ab33c28f39f6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d61b4e081b05228186aeb62a79ab33c28f39f6f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebd5018bf1e0de83f9c1cbe97d00e219d269e85", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebd5018bf1e0de83f9c1cbe97d00e219d269e85", "html_url": "https://github.com/rust-lang/rust/commit/0ebd5018bf1e0de83f9c1cbe97d00e219d269e85"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6d092680540dc9131e060ab147b74639b0291d5a", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d61b4e081b05228186aeb62a79ab33c28f39f6f/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d61b4e081b05228186aeb62a79ab33c28f39f6f/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=9d61b4e081b05228186aeb62a79ab33c28f39f6f", "patch": "@@ -168,6 +168,12 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    pub fn eq_body(&mut self, left: BodyId, right: BodyId) -> bool {\n+        let cx = self.inner.cx;\n+        let eval_const = |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n+        eval_const(left) == eval_const(right)\n+    }\n+\n     #[allow(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n         if !self.inner.allow_side_effects && differing_macro_contexts(left.span, right.span) {\n@@ -243,12 +249,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 self.inner.allow_side_effects && self.eq_path_segment(l_path, r_path) && self.eq_exprs(l_args, r_args)\n             },\n             (&ExprKind::Repeat(le, ref ll_id), &ExprKind::Repeat(re, ref rl_id)) => {\n-                let mut celcx = constant_context(self.inner.cx, self.inner.cx.tcx.typeck_body(ll_id.body));\n-                let ll = celcx.expr(&self.inner.cx.tcx.hir().body(ll_id.body).value);\n-                let mut celcx = constant_context(self.inner.cx, self.inner.cx.tcx.typeck_body(rl_id.body));\n-                let rl = celcx.expr(&self.inner.cx.tcx.hir().body(rl_id.body).value);\n-\n-                self.eq_expr(le, re) && ll == rl\n+                self.eq_expr(le, re) && self.eq_body(ll_id.body, rl_id.body)\n             },\n             (&ExprKind::Ret(ref l), &ExprKind::Ret(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprKind::Path(ref l), &ExprKind::Path(ref r)) => self.eq_qpath(l, r),\n@@ -284,6 +285,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     fn eq_generic_arg(&mut self, left: &GenericArg<'_>, right: &GenericArg<'_>) -> bool {\n         match (left, right) {\n+            (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n             _ => false,\n@@ -384,10 +386,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ref ll_id), &TyKind::Array(rt, ref rl_id)) => {\n-                let cx = self.inner.cx;\n-                let eval_const =\n-                    |body| constant_context(cx, cx.tcx.typeck_body(body)).expr(&cx.tcx.hir().body(body).value);\n-                self.eq_ty(lt, rt) && eval_const(ll_id.body) == eval_const(rl_id.body)\n+                self.eq_ty(lt, rt) && self.eq_body(ll_id.body, rl_id.body)\n             },\n             (&TyKind::Ptr(ref l_mut), &TyKind::Ptr(ref r_mut)) => {\n                 l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty)\n@@ -837,6 +836,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             _ => {\n                 for seg in path.segments {\n                     self.hash_name(seg.ident.name);\n+                    self.hash_generic_args(seg.args().args);\n                 }\n             },\n         }"}]}