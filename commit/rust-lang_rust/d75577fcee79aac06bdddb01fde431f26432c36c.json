{"sha": "d75577fcee79aac06bdddb01fde431f26432c36c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NTU3N2ZjZWU3OWFhYzA2YmRkZGIwMWZkZTQzMWYyNjQzMmMzNmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T10:10:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T10:10:16Z"}, "message": "Merge #3483\n\n3483: Unfold groups with single assists into plain assists r=matklad a=SomeoneToIgnore\n\nA follow-up of https://github.com/rust-analyzer/rust-analyzer/pull/3120/files#r378788698 , made to show more detailed label when the assist group contains a single element\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "693a4d4c970cbc88feed6dbadd0656a04449242e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693a4d4c970cbc88feed6dbadd0656a04449242e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75577fcee79aac06bdddb01fde431f26432c36c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYiGICRBK7hj4Ov3rIwAAdHIIAH5pPD5zv2Nph2+JorJ9VAOM\nOqfWA4utkU4aQZUkfr8utXkD3KsQknGwhOsaYYpv69cJZVNTOm7QBpcDGFcvQltj\nemlMbeNsMhi2AQfCqlMm+TOY3Gx+vdM6TRszmK2ydlFnZMtEvOJ07j0daLb/CS9E\n5+7T4Jd+1C0T0xyhzcUv7HMFnTHi6a5tU9zPyWbZETgY7H5jcXm6qTy/S4JfSdqL\nNf2QPh/wAFi/VZtZJX2uGMtN3JqSwJqFxSzr6UOx3mOvyLLmADDJ+CEjnJDZLOp4\npwC7MruHy6MhcEhI2+ZsW1RxX8US0N18j70mUckPG6lk61WVDgWzWBqxOYcOWug=\n=41j+\n-----END PGP SIGNATURE-----\n", "payload": "tree 693a4d4c970cbc88feed6dbadd0656a04449242e\nparent 670895a49c271751bf275f0ca1303a1bca7aad5a\nparent 0ff8c55246d242af2f2fc4f88e67395320d00865\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583489416 +0000\ncommitter GitHub <noreply@github.com> 1583489416 +0000\n\nMerge #3483\n\n3483: Unfold groups with single assists into plain assists r=matklad a=SomeoneToIgnore\n\nA follow-up of https://github.com/rust-analyzer/rust-analyzer/pull/3120/files#r378788698 , made to show more detailed label when the assist group contains a single element\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75577fcee79aac06bdddb01fde431f26432c36c", "html_url": "https://github.com/rust-lang/rust/commit/d75577fcee79aac06bdddb01fde431f26432c36c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75577fcee79aac06bdddb01fde431f26432c36c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "670895a49c271751bf275f0ca1303a1bca7aad5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/670895a49c271751bf275f0ca1303a1bca7aad5a", "html_url": "https://github.com/rust-lang/rust/commit/670895a49c271751bf275f0ca1303a1bca7aad5a"}, {"sha": "0ff8c55246d242af2f2fc4f88e67395320d00865", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff8c55246d242af2f2fc4f88e67395320d00865", "html_url": "https://github.com/rust-lang/rust/commit/0ff8c55246d242af2f2fc4f88e67395320d00865"}], "stats": {"total": 139, "additions": 73, "deletions": 66}, "files": [{"sha": "62182cf03f22fd8d1f63a69ae04a63dc3e0f406b", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=d75577fcee79aac06bdddb01fde431f26432c36c", "patch": "@@ -166,8 +166,11 @@ impl<'a> AssistGroup<'a> {\n     }\n \n     pub(crate) fn finish(self) -> Option<Assist> {\n-        assert!(!self.assists.is_empty());\n-        Some(Assist(self.assists))\n+        if self.assists.is_empty() {\n+            None\n+        } else {\n+            Some(Assist(self.assists))\n+        }\n     }\n }\n "}, {"sha": "4b62aac48627d4a3084370d0cdaee6992bc595bc", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=d75577fcee79aac06bdddb01fde431f26432c36c", "patch": "@@ -42,12 +42,7 @@ pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n         return None;\n     }\n \n-    let assist_group_name = if proposed_imports.len() == 1 {\n-        format!(\"Import `{}`\", proposed_imports.iter().next().unwrap())\n-    } else {\n-        auto_import_assets.get_import_group_message()\n-    };\n-    let mut group = ctx.add_assist_group(assist_group_name);\n+    let mut group = ctx.add_assist_group(auto_import_assets.get_import_group_message());\n     for import in proposed_imports {\n         group.add_assist(AssistId(\"auto_import\"), format!(\"Import `{}`\", &import), |edit| {\n             edit.target(auto_import_assets.syntax_under_caret.text_range());"}, {"sha": "b5db1fd3877c20e180539337c2ba60f8eb79707e", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 67, "deletions": 58, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75577fcee79aac06bdddb01fde431f26432c36c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d75577fcee79aac06bdddb01fde431f26432c36c", "patch": "@@ -3,7 +3,6 @@\n //! `ra_ide` crate.\n \n use std::{\n-    collections::hash_map::Entry,\n     fmt::Write as _,\n     io::Write as _,\n     process::{self, Stdio},\n@@ -13,15 +12,15 @@ use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeAction, CodeActionOrCommand, CodeActionResponse, CodeLens, Command, CompletionItem,\n-    Diagnostic, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n-    FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n-    PrepareRenameResponse, Range, RenameParams, SemanticTokens, SemanticTokensParams,\n-    SemanticTokensRangeParams, SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation,\n-    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n+    CodeAction, CodeActionResponse, CodeLens, Command, CompletionItem, Diagnostic,\n+    DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange, FoldingRangeParams,\n+    Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n+    Range, RenameParams, SemanticTokens, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n+    TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n+    Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n     SearchScope,\n };\n use ra_prof::profile;\n@@ -649,6 +648,31 @@ pub fn handle_formatting(\n     }]))\n }\n \n+fn create_single_code_action(assist: Assist, world: &WorldSnapshot) -> Result<CodeAction> {\n+    let arg = to_value(assist.source_change.try_conv_with(world)?)?;\n+    let title = assist.label;\n+    let command = Command {\n+        title: title.clone(),\n+        command: \"rust-analyzer.applySourceChange\".to_string(),\n+        arguments: Some(vec![arg]),\n+    };\n+\n+    let kind = match assist.id {\n+        AssistId(\"introduce_variable\") => Some(\"refactor.extract.variable\".to_string()),\n+        AssistId(\"add_custom_impl\") => Some(\"refactor.rewrite.add_custom_impl\".to_string()),\n+        _ => None,\n+    };\n+\n+    Ok(CodeAction {\n+        title,\n+        kind,\n+        diagnostics: None,\n+        edit: None,\n+        command: Some(command),\n+        is_preferred: None,\n+    })\n+}\n+\n pub fn handle_code_action(\n     world: WorldSnapshot,\n     params: req::CodeActionParams,\n@@ -695,59 +719,44 @@ pub fn handle_code_action(\n         res.push(fix.action.clone());\n     }\n \n-    let mut groups = FxHashMap::default();\n+    let mut grouped_assists: FxHashMap<String, Vec<Assist>> = FxHashMap::default();\n     for assist in world.analysis().assists(FileRange { file_id, range })?.into_iter() {\n-        let arg = to_value(assist.source_change.try_conv_with(&world)?)?;\n-\n-        let (command, title, arg) = match assist.group_label {\n-            None => (\"rust-analyzer.applySourceChange\", assist.label.clone(), arg),\n-\n-            // Group all assists with the same `group_label` into a single CodeAction.\n-            Some(group_label) => {\n-                match groups.entry(group_label.clone()) {\n-                    Entry::Occupied(entry) => {\n-                        let idx: usize = *entry.get();\n-                        match &mut res[idx] {\n-                            CodeActionOrCommand::CodeAction(CodeAction {\n-                                command: Some(Command { arguments: Some(arguments), .. }),\n-                                ..\n-                            }) => match arguments.as_mut_slice() {\n-                                [serde_json::Value::Array(arguments)] => arguments.push(arg),\n-                                _ => panic!(\"invalid group\"),\n-                            },\n-                            _ => panic!(\"invalid group\"),\n-                        }\n-                        continue;\n-                    }\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(res.len());\n-                    }\n-                }\n-                (\"rust-analyzer.selectAndApplySourceChange\", group_label, to_value(vec![arg])?)\n-            }\n-        };\n-\n-        let command = Command {\n-            title: assist.label.clone(),\n-            command: command.to_string(),\n-            arguments: Some(vec![arg]),\n-        };\n+        match &assist.group_label {\n+            Some(label) => grouped_assists.entry(label.to_owned()).or_default().push(assist),\n+            None => res.push(create_single_code_action(assist, &world)?.into()),\n+        }\n+    }\n \n-        let kind = match assist.id {\n-            AssistId(\"introduce_variable\") => Some(\"refactor.extract.variable\".to_string()),\n-            AssistId(\"add_custom_impl\") => Some(\"refactor.rewrite.add_custom_impl\".to_string()),\n-            _ => None,\n-        };\n+    for (group_label, assists) in grouped_assists {\n+        if assists.len() == 1 {\n+            res.push(\n+                create_single_code_action(assists.into_iter().next().unwrap(), &world)?.into(),\n+            );\n+        } else {\n+            let title = group_label;\n+\n+            let mut arguments = Vec::with_capacity(assists.len());\n+            for assist in assists {\n+                arguments.push(to_value(assist.source_change.try_conv_with(&world)?)?);\n+            }\n \n-        let action = CodeAction {\n-            title,\n-            kind,\n-            diagnostics: None,\n-            edit: None,\n-            command: Some(command),\n-            is_preferred: None,\n-        };\n-        res.push(action.into());\n+            let command = Some(Command {\n+                title: title.clone(),\n+                command: \"rust-analyzer.selectAndApplySourceChange\".to_string(),\n+                arguments: Some(vec![serde_json::Value::Array(arguments)]),\n+            });\n+            res.push(\n+                CodeAction {\n+                    title,\n+                    kind: None,\n+                    diagnostics: None,\n+                    edit: None,\n+                    command,\n+                    is_preferred: None,\n+                }\n+                .into(),\n+            );\n+        }\n     }\n \n     Ok(Some(res))"}]}