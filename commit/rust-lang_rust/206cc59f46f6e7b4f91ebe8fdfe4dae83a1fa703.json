{"sha": "206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmNjNTlmNDZmNmU3YjRmOTFlYmU4ZmRmZTRkYWU4M2ExZmE3MDM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-11T12:09:18Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-09-15T10:28:25Z"}, "message": "debuginfo: Implement DI for ty_opaque_box.", "tree": {"sha": "da0e1fec2f645cf67e0a96a8c51af4a565bb15b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0e1fec2f645cf67e0a96a8c51af4a565bb15b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703", "html_url": "https://github.com/rust-lang/rust/commit/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf37de9fc675a90d12c37fd0e8acdfe4107545f9", "html_url": "https://github.com/rust-lang/rust/commit/bf37de9fc675a90d12c37fd0e8acdfe4107545f9"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "5f4b169a482d1e065ff4afdc7b365f1c922a5944", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=206cc59f46f6e7b4f91ebe8fdfe4dae83a1fa703", "patch": "@@ -573,7 +573,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n             _,\n             _,\n             _) => {\n-            (ident, fn_decl, generics, None, span)\n+            //(ident, fn_decl, generics, None, span)\n+            return FunctionWithoutDebugInfo;\n         }\n         ast_map::node_variant(*)     |\n         ast_map::node_struct_ctor(*) => {\n@@ -591,7 +592,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     let file_metadata = file_metadata(cx, loc.file.name);\n \n     let function_type_metadata = unsafe {\n-        let fn_signature = get_function_signature(cx, fn_ast_id, fn_decl, param_substs);\n+        let fn_signature = get_function_signature(cx, fn_ast_id, fn_decl, param_substs, span);\n         llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n     };\n \n@@ -670,7 +671,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n     fn get_function_signature(cx: &mut CrateContext,\n                               fn_ast_id: ast::NodeId,\n                               fn_decl: &ast::fn_decl,\n-                              param_substs: Option<@param_substs>) -> DIArray {\n+                              param_substs: Option<@param_substs>,\n+                              error_span: Span) -> DIArray {\n         if !cx.sess.opts.extra_debuginfo {\n             return create_DIArray(DIB(cx), []);\n         }\n@@ -683,6 +685,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 signature.push(ptr::null());\n             }\n             _ => {\n+                assert_type_for_node_id(cx, fn_ast_id, error_span);\n+\n                 let return_type = ty::node_id_to_type(cx.tcx, fn_ast_id);\n                 let return_type = match param_substs {\n                     None => return_type,\n@@ -697,6 +701,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n         // Arguments types\n         for arg in fn_decl.inputs.iter() {\n+            assert_type_for_node_id(cx, arg.pat.id, arg.pat.span);\n             let arg_type = ty::node_id_to_type(cx.tcx, arg.pat.id);\n             let arg_type = match param_substs {\n                 None => arg_type,\n@@ -1820,8 +1825,7 @@ fn type_metadata(cx: &mut CrateContext,\n             tuple_metadata(cx, t, *elements, usage_site_span)\n         },\n         ty::ty_opaque_box => {\n-            cx.sess.span_note(usage_site_span, \"debuginfo for ty_opaque_box NYI\");\n-            unimplemented_type_metadata(cx, t)\n+            create_pointer_to_box_metadata(cx, t, ty::mk_nil())\n         }\n         _ => cx.sess.bug(fmt!(\"debuginfo: unexpected type in type_metadata: %?\", sty))\n     };\n@@ -1923,6 +1927,12 @@ fn fn_should_be_ignored(fcx: &FunctionContext) -> bool {\n     }\n }\n \n+fn assert_type_for_node_id(cx: &CrateContext, node_id: ast::NodeId, error_span: Span) {\n+    if !cx.tcx.node_types.contains_key(&(node_id as uint)) {\n+        cx.sess.span_bug(error_span, \"debuginfo: Could not find type for node id!\");\n+    }\n+}\n+\n fn get_namespace_and_span_for_item(cx: &mut CrateContext,\n                                    def_id: ast::DefId,\n                                    warning_span: Span)\n@@ -2618,6 +2628,12 @@ impl<'self> visit::Visitor<()> for NamespaceVisitor<'self> {\n         visit::walk_item(self, item, ());\n     }\n \n+    fn visit_foreign_item(&mut self, item: @ast::foreign_item, _: ()) {\n+        debug_context(self.crate_context)\n+            .local_namespace_map\n+            .insert(item.id, *self.scope_stack.last());\n+    }\n+\n     fn visit_fn(&mut self,\n                 _: &visit::fn_kind,\n                 _: &ast::fn_decl,"}]}