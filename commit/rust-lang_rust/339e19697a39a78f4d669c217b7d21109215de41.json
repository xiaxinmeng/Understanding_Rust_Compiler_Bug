{"sha": "339e19697a39a78f4d669c217b7d21109215de41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOWUxOTY5N2EzOWE3OGY0ZDY2OWMyMTdiN2QyMTEwOTIxNWRlNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T09:14:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-21T09:14:37Z"}, "message": "Auto merge of #80958 - bstrie:deptbdnums, r=KodrAus\n\nDeprecate-in-future the constants superceded by RFC 2700\n\nSuccessor to #78335, re-opened after addressing the issues tracked in #68490.\n\nThis PR makes use of the new ability to explicitly annotate an item as triggering the deprecated-in-future lint (via `rustc_deprecated(since=\"TBD\"`, see #78381). We might call this *soft deprecation*; unlike with deprecation, users will *not* receive warnings when compiling code that uses these items *unless* they opt-in via `#[warn(deprecated_in_future)]`. Like deprecation, soft deprecation causes documentation to formally acknowledge that an item is marked for eventual deprecation (at a non-specific point in the future).\n\nWith this new ability, we can sidestep all debate about when or on what timeframe something ought to be deprecated; as long as we can agree that something ought to be deprecated, we can receive much of the benefits of deprecation with none of the drawbacks. For these items specifically, the libs team has already agreed that they should be deprecated (see https://github.com/rust-lang/rust/issues/68490#issuecomment-747022696).", "tree": {"sha": "bf04f4cd2b1c30ca69b7445c8aa3d34999240c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf04f4cd2b1c30ca69b7445c8aa3d34999240c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339e19697a39a78f4d669c217b7d21109215de41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339e19697a39a78f4d669c217b7d21109215de41", "html_url": "https://github.com/rust-lang/rust/commit/339e19697a39a78f4d669c217b7d21109215de41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339e19697a39a78f4d669c217b7d21109215de41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a71ac0e17e4f7070b090ab7bdc5474d8e37ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a71ac0e17e4f7070b090ab7bdc5474d8e37ecc", "html_url": "https://github.com/rust-lang/rust/commit/57a71ac0e17e4f7070b090ab7bdc5474d8e37ecc"}, {"sha": "6f3df006105ee637f91f0e2af8ecd00c0fda03e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3df006105ee637f91f0e2af8ecd00c0fda03e6", "html_url": "https://github.com/rust-lang/rust/commit/6f3df006105ee637f91f0e2af8ecd00c0fda03e6"}], "stats": {"total": 339, "additions": 241, "deletions": 98}, "files": [{"sha": "139863bbe7f816137f184e1f1e3fd83a1bf4e472", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -460,7 +460,6 @@ pub trait TryInto<T>: Sized {\n /// assert!(try_successful_smaller_number.is_ok());\n /// ```\n ///\n-/// [`i32::MAX`]: crate::i32::MAX\n /// [`try_from`]: TryFrom::try_from\n /// [`!`]: ../../std/primitive.never.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]"}, {"sha": "ce5e9936bbd7fb52dd0e862ede05104a36d4f4e8", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,5 +1,5 @@\n use crate::iter::{DoubleEndedIterator, FusedIterator, Iterator, TrustedLen};\n-use crate::{ops::Try, usize};\n+use crate::ops::Try;\n \n /// An iterator that links two iterators together, in a chain.\n ///"}, {"sha": "a07cb90f9f2af189d561972a7f41d1e1370f952e", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -225,8 +225,6 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than [`usize::MAX`]\n     /// elements.\n     ///\n-    /// [`usize::MAX`]: crate::usize::MAX\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -871,7 +869,6 @@ pub trait Iterator {\n     /// overflow a [`usize`].\n     ///\n     /// [`usize`]: type@usize\n-    /// [`usize::MAX`]: crate::usize::MAX\n     /// [`zip`]: Iterator::zip\n     ///\n     /// # Examples\n@@ -2383,7 +2380,6 @@ pub trait Iterator {\n     /// non-matching elements.\n     ///\n     /// [`Some(index)`]: Some\n-    /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n     ///"}, {"sha": "ed8eea672f80bb0a7de9307e2278744373db1b74", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -33,8 +33,6 @@ impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n ///\n /// This trait must only be implemented when the contract is upheld. Consumers\n /// of this trait must inspect [`Iterator::size_hint()`]\u2019s upper bound.\n-///\n-/// [`usize::MAX`]: crate::usize::MAX\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n #[rustc_unsafe_specialization_marker]\n pub unsafe trait TrustedLen: Iterator {}"}, {"sha": "795f94ec0345486ab433320bc5fcd7ab4cfa0025", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,12 +1,13 @@\n-//! This module provides constants which are specific to the implementation\n-//! of the `f32` floating point data type.\n+//! Constants specific to the `f32` single-precision floating point type.\n //!\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! For the constants defined directly in this module\n+//! (as distinct from those defined in the `consts` sub-module),\n+//! new code should instead use the associated constants\n+//! defined directly on the `f32` type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -23,12 +24,14 @@ use crate::num::FpCategory;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let r = std::f32::RADIX;\n ///\n /// // intended way\n /// let r = f32::RADIX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `RADIX` associated constant on `f32`\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n@@ -38,12 +41,17 @@ pub const RADIX: u32 = f32::RADIX;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let d = std::f32::MANTISSA_DIGITS;\n ///\n /// // intended way\n /// let d = f32::MANTISSA_DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MANTISSA_DIGITS` associated constant on `f32`\"\n+)]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n@@ -53,12 +61,14 @@ pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let d = std::f32::DIGITS;\n ///\n /// // intended way\n /// let d = f32::DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `DIGITS` associated constant on `f32`\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n@@ -72,12 +82,17 @@ pub const DIGITS: u32 = f32::DIGITS;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let e = std::f32::EPSILON;\n ///\n /// // intended way\n /// let e = f32::EPSILON;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `EPSILON` associated constant on `f32`\"\n+)]\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n@@ -87,12 +102,14 @@ pub const EPSILON: f32 = f32::EPSILON;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f32::MIN;\n ///\n /// // intended way\n /// let min = f32::MIN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on `f32`\")]\n pub const MIN: f32 = f32::MIN;\n \n /// Smallest positive normal `f32` value.\n@@ -102,12 +119,17 @@ pub const MIN: f32 = f32::MIN;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f32::MIN_POSITIVE;\n ///\n /// // intended way\n /// let min = f32::MIN_POSITIVE;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_POSITIVE` associated constant on `f32`\"\n+)]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n \n /// Largest finite `f32` value.\n@@ -117,12 +139,14 @@ pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f32::MAX;\n ///\n /// // intended way\n /// let max = f32::MAX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on `f32`\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n@@ -132,12 +156,17 @@ pub const MAX: f32 = f32::MAX;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f32::MIN_EXP;\n ///\n /// // intended way\n /// let min = f32::MIN_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_EXP` associated constant on `f32`\"\n+)]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n@@ -147,12 +176,17 @@ pub const MIN_EXP: i32 = f32::MIN_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f32::MAX_EXP;\n ///\n /// // intended way\n /// let max = f32::MAX_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MAX_EXP` associated constant on `f32`\"\n+)]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n@@ -162,12 +196,17 @@ pub const MAX_EXP: i32 = f32::MAX_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f32::MIN_10_EXP;\n ///\n /// // intended way\n /// let min = f32::MIN_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_10_EXP` associated constant on `f32`\"\n+)]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n@@ -177,12 +216,17 @@ pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f32::MAX_10_EXP;\n ///\n /// // intended way\n /// let max = f32::MAX_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MAX_10_EXP` associated constant on `f32`\"\n+)]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n@@ -192,12 +236,14 @@ pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let nan = std::f32::NAN;\n ///\n /// // intended way\n /// let nan = f32::NAN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `NAN` associated constant on `f32`\")]\n pub const NAN: f32 = f32::NAN;\n \n /// Infinity (\u221e).\n@@ -207,12 +253,17 @@ pub const NAN: f32 = f32::NAN;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let inf = std::f32::INFINITY;\n ///\n /// // intended way\n /// let inf = f32::INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `INFINITY` associated constant on `f32`\"\n+)]\n pub const INFINITY: f32 = f32::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n@@ -222,12 +273,17 @@ pub const INFINITY: f32 = f32::INFINITY;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let ninf = std::f32::NEG_INFINITY;\n ///\n /// // intended way\n /// let ninf = f32::NEG_INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `NEG_INFINITY` associated constant on `f32`\"\n+)]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n \n /// Basic mathematical constants."}, {"sha": "7af968f7fe84ba924b382192dbf661d6c17be18f", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,12 +1,13 @@\n-//! This module provides constants which are specific to the implementation\n-//! of the `f64` floating point data type.\n+//! Constants specific to the `f64` double-precision floating point type.\n //!\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! For the constants defined directly in this module\n+//! (as distinct from those defined in the `consts` sub-module),\n+//! new code should instead use the associated constants\n+//! defined directly on the `f64` type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -23,12 +24,14 @@ use crate::num::FpCategory;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let r = std::f64::RADIX;\n ///\n /// // intended way\n /// let r = f64::RADIX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `RADIX` associated constant on `f64`\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n@@ -38,12 +41,17 @@ pub const RADIX: u32 = f64::RADIX;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let d = std::f64::MANTISSA_DIGITS;\n ///\n /// // intended way\n /// let d = f64::MANTISSA_DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MANTISSA_DIGITS` associated constant on `f64`\"\n+)]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n@@ -53,12 +61,14 @@ pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let d = std::f64::DIGITS;\n ///\n /// // intended way\n /// let d = f64::DIGITS;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `DIGITS` associated constant on `f64`\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n@@ -72,12 +82,17 @@ pub const DIGITS: u32 = f64::DIGITS;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let e = std::f64::EPSILON;\n ///\n /// // intended way\n /// let e = f64::EPSILON;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `EPSILON` associated constant on `f64`\"\n+)]\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n@@ -87,12 +102,14 @@ pub const EPSILON: f64 = f64::EPSILON;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f64::MIN;\n ///\n /// // intended way\n /// let min = f64::MIN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on `f64`\")]\n pub const MIN: f64 = f64::MIN;\n \n /// Smallest positive normal `f64` value.\n@@ -102,12 +119,17 @@ pub const MIN: f64 = f64::MIN;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f64::MIN_POSITIVE;\n ///\n /// // intended way\n /// let min = f64::MIN_POSITIVE;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_POSITIVE` associated constant on `f64`\"\n+)]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n \n /// Largest finite `f64` value.\n@@ -117,12 +139,14 @@ pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f64::MAX;\n ///\n /// // intended way\n /// let max = f64::MAX;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on `f64`\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n@@ -132,12 +156,17 @@ pub const MAX: f64 = f64::MAX;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f64::MIN_EXP;\n ///\n /// // intended way\n /// let min = f64::MIN_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_EXP` associated constant on `f64`\"\n+)]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n@@ -147,12 +176,17 @@ pub const MIN_EXP: i32 = f64::MIN_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f64::MAX_EXP;\n ///\n /// // intended way\n /// let max = f64::MAX_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MAX_EXP` associated constant on `f64`\"\n+)]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n@@ -162,12 +196,17 @@ pub const MAX_EXP: i32 = f64::MAX_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let min = std::f64::MIN_10_EXP;\n ///\n /// // intended way\n /// let min = f64::MIN_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MIN_10_EXP` associated constant on `f64`\"\n+)]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n@@ -177,12 +216,17 @@ pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let max = std::f64::MAX_10_EXP;\n ///\n /// // intended way\n /// let max = f64::MAX_10_EXP;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `MAX_10_EXP` associated constant on `f64`\"\n+)]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n@@ -192,12 +236,14 @@ pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let nan = std::f64::NAN;\n ///\n /// // intended way\n /// let nan = f64::NAN;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `NAN` associated constant on `f64`\")]\n pub const NAN: f64 = f64::NAN;\n \n /// Infinity (\u221e).\n@@ -207,12 +253,17 @@ pub const NAN: f64 = f64::NAN;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let inf = std::f64::INFINITY;\n ///\n /// // intended way\n /// let inf = f64::INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `INFINITY` associated constant on `f64`\"\n+)]\n pub const INFINITY: f64 = f64::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n@@ -222,12 +273,17 @@ pub const INFINITY: f64 = f64::INFINITY;\n ///\n /// ```rust\n /// // deprecated way\n+/// # #[allow(deprecated, deprecated_in_future)]\n /// let ninf = std::f64::NEG_INFINITY;\n ///\n /// // intended way\n /// let ninf = f64::NEG_INFINITY;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"replaced by the `NEG_INFINITY` associated constant on `f64`\"\n+)]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n \n /// Basic mathematical constants."}, {"sha": "f732f11d909e767238ca00cb1ee4d9dd1078d3dc", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1975,32 +1975,28 @@ macro_rules! int_impl {\n             unsafe { mem::transmute(bytes) }\n         }\n \n-        /// **This method is soft-deprecated.**\n-        ///\n-        /// Although using it won\u2019t cause a compilation warning, new code should use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN)\")]\n-        /// instead.\n+        /// New code should prefer to use\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN).\")]\n         ///\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline(always)]\n         #[rustc_promotable]\n         #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n         pub const fn min_value() -> Self {\n             Self::MIN\n         }\n \n-        /// **This method is soft-deprecated.**\n-        ///\n-        /// Although using it won\u2019t cause a compilation warning, new code should use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX)\")]\n-        /// instead.\n+        /// New code should prefer to use\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX).\")]\n         ///\n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline(always)]\n         #[rustc_promotable]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n         pub const fn max_value() -> Self {\n             Self::MAX\n         }"}, {"sha": "785e9a4e9cfb72bb7b2b7b8841ebf96db9a07a76", "filename": "library/core/src/num/shells/i128.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 128-bit signed integer type.\n+//! Constants for the 128-bit signed integer type.\n //!\n //! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `i128`\"\n+)]\n \n int_module! { i128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "48ea2e3e964c2ad75dd944a548cbefb9909f7967", "filename": "library/core/src/num/shells/i16.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 16-bit signed integer type.\n+//! Constants for the 16-bit signed integer type.\n //!\n //! *[See also the `i16` primitive type](../../std/primitive.i16.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `i16`\"\n+)]\n \n int_module! { i16 }"}, {"sha": "fce6980f4567949331b33db7a7d4b34ba77b5450", "filename": "library/core/src/num/shells/i32.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 32-bit signed integer type.\n+//! Constants for the 32-bit signed integer type.\n //!\n //! *[See also the `i32` primitive type](../../std/primitive.i32.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `i32`\"\n+)]\n \n int_module! { i32 }"}, {"sha": "6aa8fcf452bde8189f76dba4f3a26e818e57b041", "filename": "library/core/src/num/shells/i64.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 64-bit signed integer type.\n+//! Constants for the 64-bit signed integer type.\n //!\n //! *[See also the `i64` primitive type](../../std/primitive.i64.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `i64`\"\n+)]\n \n int_module! { i64 }"}, {"sha": "b4e0fef61bb289e6d7abbfe812a368f670a6df6a", "filename": "library/core/src/num/shells/i8.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 8-bit signed integer type.\n+//! Constants for the 8-bit signed integer type.\n //!\n //! *[See also the `i8` primitive type](../../std/primitive.i8.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `i8`\"\n+)]\n \n int_module! { i8 }"}, {"sha": "78513d44b7580c7d8aec215392675a0b659285ff", "filename": "library/core/src/num/shells/int_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -20,6 +20,7 @@ macro_rules! int_module {\n         /// ```\n         ///\n         #[$attr]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n         pub const MIN: $T = $T::MIN;\n \n         #[doc = concat!(\n@@ -39,6 +40,7 @@ macro_rules! int_module {\n         /// ```\n         ///\n         #[$attr]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n         pub const MAX: $T = $T::MAX;\n     )\n }"}, {"sha": "5dc128d58ae0263fc0b472bdd256609fc73f478b", "filename": "library/core/src/num/shells/isize.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The pointer-sized signed integer type.\n+//! Constants for the pointer-sized signed integer type.\n //!\n //! *[See also the `isize` primitive type](../../std/primitive.isize.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `isize`\"\n+)]\n \n int_module! { isize }"}, {"sha": "6012584ae86aee44bcb1dcd60fad62fc007d18ca", "filename": "library/core/src/num/shells/u128.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,9 +1,13 @@\n-//! The 128-bit unsigned integer type.\n+//! Constants for the 128-bit unsigned integer type.\n //!\n //! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `u128`\"\n+)]\n+\n int_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "36641196403bcecceb912085e6ae53540a28667f", "filename": "library/core/src/num/shells/u16.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 16-bit unsigned integer type.\n+//! Constants for the 16-bit unsigned integer type.\n //!\n //! *[See also the `u16` primitive type](../../std/primitive.u16.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `u16`\"\n+)]\n \n int_module! { u16 }"}, {"sha": "f58f71423dbc3701cb87c721529ae7d432557d25", "filename": "library/core/src/num/shells/u32.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 32-bit unsigned integer type.\n+//! Constants for the 32-bit unsigned integer type.\n //!\n //! *[See also the `u32` primitive type](../../std/primitive.u32.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `u32`\"\n+)]\n \n int_module! { u32 }"}, {"sha": "2b221f66da60a752a4f10d4b4da74a6d6bf31166", "filename": "library/core/src/num/shells/u64.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 64-bit unsigned integer type.\n+//! Constants for the 64-bit unsigned integer type.\n //!\n //! *[See also the `u64` primitive type](../../std/primitive.u64.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `u64`\"\n+)]\n \n int_module! { u64 }"}, {"sha": "83ec60dcbd8523609827fb38d52d22daf65cddc0", "filename": "library/core/src/num/shells/u8.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The 8-bit unsigned integer type.\n+//! Constants for the 8-bit unsigned integer type.\n //!\n //! *[See also the `u8` primitive type](../../std/primitive.u8.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `u8`\"\n+)]\n \n int_module! { u8 }"}, {"sha": "c38d521f3dae06e8f047fa0298e6e3977d00d7d8", "filename": "library/core/src/num/shells/usize.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,10 +1,13 @@\n-//! The pointer-sized unsigned integer type.\n+//! Constants for the pointer-sized unsigned integer type.\n //!\n //! *[See also the `usize` primitive type](../../std/primitive.usize.html).*\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! New code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![rustc_deprecated(\n+    since = \"TBD\",\n+    reason = \"all constants in this module replaced by associated constants on `usize`\"\n+)]\n \n int_module! { usize }"}, {"sha": "9fccf3f72ce1a46b16f167c929b40a77aee95622", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1805,30 +1805,28 @@ macro_rules! uint_impl {\n             unsafe { mem::transmute(bytes) }\n         }\n \n-        /// **This method is soft-deprecated.**\n-        ///\n-        /// Although using it won\u2019t cause compilation warning, new code should use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN)\")]\n+        /// New code should prefer to use\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN).\")]\n         /// instead.\n         ///\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_promotable]\n         #[inline(always)]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MIN` associated constant on this type\")]\n         pub const fn min_value() -> Self { Self::MIN }\n \n-        /// **This method is soft-deprecated.**\n-        ///\n-        /// Although using it won\u2019t cause compilation warning, new code should use\n-        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX)\")]\n+        /// New code should prefer to use\n+        #[doc = concat!(\"[`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX).\")]\n         /// instead.\n         ///\n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_promotable]\n         #[inline(always)]\n         #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+        #[rustc_deprecated(since = \"TBD\", reason = \"replaced by the `MAX` associated constant on this type\")]\n         pub const fn max_value() -> Self { Self::MAX }\n     }\n }"}, {"sha": "f51b2c2462166d911c7138b7214e162160a3b3b6", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,12 +1,13 @@\n-//! This module provides constants which are specific to the implementation\n-//! of the `f32` floating point data type.\n+//! Constants specific to the `f32` single-precision floating point type.\n //!\n //! *[See also the `f32` primitive type](primitive@f32).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! For the constants defined directly in this module\n+//! (as distinct from those defined in the `consts` sub-module),\n+//! new code should instead use the associated constants\n+//! defined directly on the `f32` type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n@@ -20,15 +21,11 @@ use crate::intrinsics;\n use crate::sys::cmath;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f32::consts;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f32::{DIGITS, EPSILON, MANTISSA_DIGITS, RADIX};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f32::{INFINITY, MAX_10_EXP, NAN, NEG_INFINITY};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f32::{MAX, MIN, MIN_POSITIVE};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f32::{MAX_EXP, MIN_10_EXP, MIN_EXP};\n+#[allow(deprecated, deprecated_in_future)]\n+pub use core::f32::{\n+    consts, DIGITS, EPSILON, INFINITY, MANTISSA_DIGITS, MAX, MAX_10_EXP, MAX_EXP, MIN, MIN_10_EXP,\n+    MIN_EXP, MIN_POSITIVE, NAN, NEG_INFINITY, RADIX,\n+};\n \n #[cfg(not(test))]\n #[lang = \"f32_runtime\"]"}, {"sha": "8c41e4486865cd826764d79fda03e9ab7dfe9ccf", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,12 +1,13 @@\n-//! This module provides constants which are specific to the implementation\n-//! of the `f64` floating point data type.\n+//! Constants specific to the `f64` double-precision floating point type.\n //!\n //! *[See also the `f64` primitive type](primitive@f64).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n-//! Although using these constants won\u2019t cause compilation warnings,\n-//! new code should use the associated constants directly on the primitive type.\n+//! For the constants defined directly in this module\n+//! (as distinct from those defined in the `consts` sub-module),\n+//! new code should instead use the associated constants\n+//! defined directly on the `f64` type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n@@ -20,15 +21,11 @@ use crate::intrinsics;\n use crate::sys::cmath;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f64::consts;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f64::{DIGITS, EPSILON, MANTISSA_DIGITS, RADIX};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f64::{INFINITY, MAX_10_EXP, NAN, NEG_INFINITY};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f64::{MAX, MIN, MIN_POSITIVE};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::f64::{MAX_EXP, MIN_10_EXP, MIN_EXP};\n+#[allow(deprecated, deprecated_in_future)]\n+pub use core::f64::{\n+    consts, DIGITS, EPSILON, INFINITY, MANTISSA_DIGITS, MAX, MAX_10_EXP, MAX_EXP, MIN, MIN_10_EXP,\n+    MIN_EXP, MIN_POSITIVE, NAN, NEG_INFINITY, RADIX,\n+};\n \n #[cfg(not(test))]\n #[lang = \"f64_runtime\"]"}, {"sha": "5ba13c2f9133461a94cf89f6fd24fdaebfacb91a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -411,18 +411,24 @@ pub use core::hash;\n #[stable(feature = \"core_hint\", since = \"1.27.0\")]\n pub use core::hint;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::i128;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::i16;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::i32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::i64;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::i8;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::intrinsics;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::isize;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::iter;\n@@ -443,16 +449,22 @@ pub use core::raw;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::u128;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::u16;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::u32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::u64;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::u8;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated, deprecated_in_future)]\n pub use core::usize;\n \n pub mod f32;"}, {"sha": "58427bb8b69d94e82cb23be0a1e0e692173c499a", "filename": "library/std/src/sys/unix/process/zircon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -1,7 +1,6 @@\n #![allow(non_camel_case_types, unused)]\n \n use crate::convert::TryInto;\n-use crate::i64;\n use crate::io;\n use crate::mem::MaybeUninit;\n use crate::os::raw::c_char;"}, {"sha": "9a22903a94cc809c94ed783b9367041be3bcc62e", "filename": "src/test/rustdoc/reexport-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339e19697a39a78f4d669c217b7d21109215de41/src%2Ftest%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339e19697a39a78f4d669c217b7d21109215de41/src%2Ftest%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-check.rs?ref=339e19697a39a78f4d669c217b7d21109215de41", "patch": "@@ -4,7 +4,7 @@\n extern crate reexport_check;\n \n // @!has 'foo/index.html' '//code' 'pub use self::i32;'\n-// @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'i32'\n+// @has 'foo/index.html' '//tr[@class=\"deprecated module-item\"]' 'i32'\n // @has 'foo/i32/index.html'\n #[allow(deprecated, deprecated_in_future)]\n pub use std::i32;"}]}