{"sha": "f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTJmY2Y4ZjU5ZWRhMzQ5OGJiZGNiODc1NjhlNWJhNmI0ZGI4Yjc=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-16T13:10:13Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-17T13:47:05Z"}, "message": "Change existing OUT_DIR override config to make use of new infrastructure", "tree": {"sha": "1ace16a13f74d6165780b8054b0b4e8b43f945c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ace16a13f74d6165780b8054b0b4e8b43f945c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "html_url": "https://github.com/rust-lang/rust/commit/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c6c7abc6621f8b0cf083a98f7e4788cf4b5b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/33c6c7abc6621f8b0cf083a98f7e4788cf4b5b54", "html_url": "https://github.com/rust-lang/rust/commit/33c6c7abc6621f8b0cf083a98f7e4788cf4b5b54"}], "stats": {"total": 83, "additions": 26, "deletions": 57}, "files": [{"sha": "97fa48b8b6a91813a049351504046d01986e3ec2", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -39,6 +39,9 @@ pub struct CargoFeatures {\n \n     /// Runs cargo check on launch to figure out the correct values of OUT_DIR\n     pub load_out_dirs_from_check: bool,\n+\n+    /// Fine grained controls for additional `OUT_DIR` env variables\n+    pub out_dir_overrides: FxHashMap<PackageId, PathBuf>,\n }\n \n impl Default for CargoFeatures {\n@@ -48,6 +51,7 @@ impl Default for CargoFeatures {\n             all_features: true,\n             features: Vec::new(),\n             load_out_dirs_from_check: false,\n+            out_dir_overrides: FxHashMap::default(),\n         }\n     }\n }\n@@ -191,6 +195,10 @@ impl CargoWorkspace {\n         if cargo_features.load_out_dirs_from_check {\n             out_dir_by_id = load_out_dirs(cargo_toml, cargo_features);\n         }\n+        // We explicitly extend afterwards to allow overriding the value returned by cargo\n+        out_dir_by_id.extend(\n+            cargo_features.out_dir_overrides.iter().map(|(id, path)| (id.clone(), path.clone())),\n+        );\n \n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();"}, {"sha": "b2c3e576d5f48daa7f038bc58645adb7f6857305", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -177,7 +177,6 @@ impl ProjectWorkspace {\n     pub fn to_crate_graph(\n         &self,\n         default_cfg_options: &CfgOptions,\n-        additional_out_dirs: &FxHashMap<String, PathBuf>,\n         extern_source_roots: &FxHashMap<PathBuf, ExternSourceId>,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n     ) -> CrateGraph {\n@@ -251,15 +250,8 @@ impl ProjectWorkspace {\n                             opts\n                         };\n \n-                        let mut env = Env::default();\n-                        let mut extern_source = ExternSource::default();\n-                        if let Some(path) = additional_out_dirs.get(krate.name(&sysroot)) {\n-                            env.set(\"OUT_DIR\", path.to_string_lossy().to_string());\n-                            if let Some(extern_source_id) = extern_source_roots.get(path) {\n-                                extern_source.set_extern_path(&path, *extern_source_id);\n-                            }\n-                        }\n-\n+                        let env = Env::default();\n+                        let extern_source = ExternSource::default();\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n@@ -310,19 +302,11 @@ impl ProjectWorkspace {\n                             };\n                             let mut env = Env::default();\n                             let mut extern_source = ExternSource::default();\n-                            if let Some(out_dir) = dbg!(pkg.out_dir(cargo)) {\n+                            if let Some(out_dir) = pkg.out_dir(cargo) {\n+                                // FIXME: We probably mangle non UTF-8 paths here, figure out a better solution\n                                 env.set(\"OUT_DIR\", out_dir.to_string_lossy().to_string());\n-                                if let Some(extern_source_id) =\n-                                    dbg!(dbg!(&extern_source_roots).get(out_dir))\n-                                {\n-                                    extern_source.set_extern_path(&out_dir, *extern_source_id);\n-                                }\n-                            } else {\n-                                if let Some(path) = additional_out_dirs.get(pkg.name(&cargo)) {\n-                                    env.set(\"OUT_DIR\", path.to_string_lossy().to_string());\n-                                    if let Some(extern_source_id) = extern_source_roots.get(path) {\n-                                        extern_source.set_extern_path(&path, *extern_source_id);\n-                                    }\n+                                if let Some(&extern_source_id) = extern_source_roots.get(out_dir) {\n+                                    extern_source.set_extern_path(&out_dir, extern_source_id);\n                                 }\n                             }\n                             let crate_id = crate_graph.add_crate_root("}, {"sha": "af61d1e0af38e88a402998b16bb9d98e0821ff72", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -53,19 +53,14 @@ pub(crate) fn load_cargo(\n     };\n \n     // FIXME: outdirs?\n-    let outdirs = FxHashMap::default();\n     let extern_source_roots = FxHashMap::default();\n \n-    let crate_graph = ws.to_crate_graph(\n-        &default_cfg_options,\n-        &outdirs,\n-        &extern_source_roots,\n-        &mut |path: &Path| {\n+    let crate_graph =\n+        ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut |path: &Path| {\n             let vfs_file = vfs.load(path);\n             log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n             vfs_file.map(vfs_file_to_id)\n-        },\n-    );\n+        });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n \n     let source_roots = roots"}, {"sha": "103b2b53c456fa83d35d0b316b41fd99e46d398b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -48,9 +48,6 @@ pub struct ServerConfig {\n     /// Fine grained feature flags to disable specific features.\n     pub feature_flags: FxHashMap<String, bool>,\n \n-    /// Fine grained controls for additional `OUT_DIR` env variables\n-    pub additional_out_dirs: FxHashMap<String, String>,\n-\n     pub rustfmt_args: Vec<String>,\n \n     /// Cargo feature configurations.\n@@ -76,7 +73,6 @@ impl Default for ServerConfig {\n             cargo_watch_all_targets: true,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n-            additional_out_dirs: FxHashMap::default(),\n             cargo_features: Default::default(),\n             rustfmt_args: Vec::new(),\n             vscode_lldb: false,"}, {"sha": "a8a5894d2f52122969c3b738c438a874c170b1b3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -204,7 +204,6 @@ pub fn main_loop(\n             Watch(!config.use_client_watching),\n             options,\n             feature_flags,\n-            config.additional_out_dirs,\n         )\n     };\n "}, {"sha": "c4244fee24e049335910ec41b3ce68ec0e9c621b", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -82,7 +82,6 @@ impl WorldState {\n         watch: Watch,\n         options: Options,\n         feature_flags: FeatureFlags,\n-        additional_out_dirs: FxHashMap<String, String>,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n@@ -105,8 +104,7 @@ impl WorldState {\n             }));\n         }\n \n-        let mut extern_dirs: FxHashSet<_> =\n-            additional_out_dirs.iter().map(|(_, path)| (PathBuf::from(path))).collect();\n+        let mut extern_dirs = FxHashSet::default();\n         for ws in workspaces.iter() {\n             extern_dirs.extend(ws.out_dirs());\n         }\n@@ -152,21 +150,9 @@ impl WorldState {\n             vfs_file.map(|f| FileId(f.0))\n         };\n \n-        let additional_out_dirs: FxHashMap<String, PathBuf> = additional_out_dirs\n-            .into_iter()\n-            .map(|(name, path)| (name, PathBuf::from(&path)))\n-            .collect();\n-\n         workspaces\n             .iter()\n-            .map(|ws| {\n-                ws.to_crate_graph(\n-                    &default_cfg_options,\n-                    &additional_out_dirs,\n-                    &extern_source_roots,\n-                    &mut load,\n-                )\n-            })\n+            .map(|ws| ws.to_crate_graph(&default_cfg_options, &extern_source_roots, &mut load))\n             .for_each(|graph| {\n                 crate_graph.extend(graph);\n             });"}, {"sha": "b4128acf07b0667ae46f62137980bd3f8d627c29", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -237,11 +237,6 @@\n                     \"default\": true,\n                     \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n                 },\n-                \"rust-analyzer.additionalOutDirs\": {\n-                    \"type\": \"object\",\n-                    \"default\": {},\n-                    \"markdownDescription\": \"Fine grained controls for OUT_DIR `env!(\\\"OUT_DIR\\\")` variable. e.g. `{\\\"foo\\\":\\\"/path/to/foo\\\"}`, \"\n-                },\n                 \"rust-analyzer.serverPath\": {\n                     \"type\": [\n                         \"null\",\n@@ -367,6 +362,11 @@\n                     \"type\": \"boolean\",\n                     \"default\": false,\n                     \"markdownDescription\": \"Run `cargo check` on startup to get the correct value for package OUT_DIRs\"\n+                },\n+                \"rust-analyzer.cargoFeatures.outDirOverrides\": {\n+                    \"type\": \"object\",\n+                    \"default\": {},\n+                    \"markdownDescription\": \"Fine grained controls for OUT_DIR `env!(\\\"OUT_DIR\\\")` variable. e.g. `{\\\"foo 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\\\":\\\"/path/to/foo\\\"}`, \"\n                 }\n             }\n         },"}, {"sha": "c7323f6e9248b0f569527ee533d75433e28c2956", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f5a2fcf8f59eda3498bbdcb87568e5ba6b4db8b7", "patch": "@@ -23,6 +23,7 @@ export interface CargoFeatures {\n     allFeatures: boolean;\n     features: string[];\n     loadOutDirsFromCheck: boolean;\n+    outDirOverrides: Record<string, string>;\n }\n \n export const enum UpdatesChannel {\n@@ -203,7 +204,6 @@ export class Config {\n     get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n     get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n     get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n-    get additionalOutDirs() { return this.cfg.get(\"additionalOutDirs\") as Record<string, string>; }\n     get rustfmtArgs() { return this.cfg.get(\"rustfmtArgs\") as string[]; }\n     get loadOutDirsFromCheck() { return this.cfg.get(\"loadOutDirsFromCheck\") as boolean; }\n \n@@ -222,6 +222,7 @@ export class Config {\n             allFeatures: this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n             features: this.cfg.get(\"cargoFeatures.features\") as string[],\n             loadOutDirsFromCheck: this.cfg.get(\"cargoFeatures.loadOutDirsFromCheck\") as boolean,\n+            outDirOverrides: this.cfg.get(\"cargoFeatures.outDirOverrides\") as Record<string, string>,\n         };\n     }\n "}]}