{"sha": "64878458841d00882d1673a0b4579b4babaab91f", "node_id": "C_kwDOAAsO6NoAKDY0ODc4NDU4ODQxZDAwODgyZDE2NzNhMGI0NTc5YjRiYWJhYWI5MWY", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-12-21T22:08:47Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2022-01-19T21:33:57Z"}, "message": "Properly account for binders in get_impl_future_output_ty", "tree": {"sha": "f7df0cbce5cebbfa87fbce084c4bec355d276db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7df0cbce5cebbfa87fbce084c4bec355d276db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64878458841d00882d1673a0b4579b4babaab91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64878458841d00882d1673a0b4579b4babaab91f", "html_url": "https://github.com/rust-lang/rust/commit/64878458841d00882d1673a0b4579b4babaab91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64878458841d00882d1673a0b4579b4babaab91f/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e57faa78aa7661c6000204591558f6665f11abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e57faa78aa7661c6000204591558f6665f11abc", "html_url": "https://github.com/rust-lang/rust/commit/5e57faa78aa7661c6000204591558f6665f11abc"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "75472faeebafabbb059b46acb6f12ae69407d97b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=64878458841d00882d1673a0b4579b4babaab91f", "patch": "@@ -69,7 +69,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    Region, Ty, TyCtxt, TypeFoldable,\n+    Binder, Region, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1765,7 +1765,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.note_error_origin(diag, cause, exp_found, terr);\n     }\n \n-    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Binder<'tcx, Ty<'tcx>>> {\n         if let ty::Opaque(def_id, substs) = ty.kind() {\n             let future_trait = self.tcx.require_lang_item(LangItem::Future, None);\n             // Future::Output\n@@ -1775,13 +1775,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             for (predicate, _) in bounds {\n                 let predicate = predicate.subst(self.tcx, substs);\n-                if let ty::PredicateKind::Projection(projection_predicate) =\n-                    predicate.kind().skip_binder()\n-                {\n-                    if projection_predicate.projection_ty.item_def_id == item_def_id {\n-                        // We don't account for multiple `Future::Output = Ty` contraints.\n-                        return projection_predicate.term.ty();\n-                    }\n+                let output = predicate\n+                    .kind()\n+                    .map_bound(|kind| match kind {\n+                        ty::PredicateKind::Projection(projection_predicate)\n+                            if projection_predicate.projection_ty.item_def_id == item_def_id =>\n+                        {\n+                            projection_predicate.term.ty()\n+                        }\n+                        _ => None,\n+                    })\n+                    .transpose();\n+                if output.is_some() {\n+                    // We don't account for multiple `Future::Output = Ty` contraints.\n+                    return output;\n                 }\n             }\n         }\n@@ -1823,8 +1830,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         match (\n-            self.get_impl_future_output_ty(exp_found.expected),\n-            self.get_impl_future_output_ty(exp_found.found),\n+            self.get_impl_future_output_ty(exp_found.expected).map(Binder::skip_binder),\n+            self.get_impl_future_output_ty(exp_found.found).map(Binder::skip_binder),\n         ) {\n             (Some(exp), Some(found)) if same_type_modulo_infer(exp, found) => match cause.code() {\n                 ObligationCauseCode::IfExpression(box IfExpressionCause { then, .. }) => {"}, {"sha": "f6abeff60cd9468427320a917d0e696abc18ea9f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=64878458841d00882d1673a0b4579b4babaab91f", "patch": "@@ -1909,7 +1909,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => return,\n         };\n         let mut add_label = true;\n-        if let ty::Adt(def, _) = output_ty.kind() {\n+        if let ty::Adt(def, _) = output_ty.skip_binder().kind() {\n             // no field access on enum type\n             if !def.is_enum() {\n                 if def"}, {"sha": "be4c9ec99b9c68a093f24882b520ec5c4f1c75df", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=64878458841d00882d1673a0b4579b4babaab91f", "patch": "@@ -609,14 +609,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n             let ty = match self.tcx.asyncness(fn_id.owner) {\n-                hir::IsAsync::Async => self.tcx.infer_ctxt().enter(|infcx| {\n-                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n-                        span_bug!(\n-                            fn_decl.output.span(),\n-                            \"failed to get output type of async function\"\n-                        )\n+                hir::IsAsync::Async => self\n+                    .tcx\n+                    .infer_ctxt()\n+                    .enter(|infcx| {\n+                        infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                            span_bug!(\n+                                fn_decl.output.span(),\n+                                \"failed to get output type of async function\"\n+                            )\n+                        })\n                     })\n-                }),\n+                    .skip_binder(),\n                 hir::IsAsync::NotAsync => ty,\n             };\n             if self.can_coerce(found, ty) {"}, {"sha": "96ab800afaffed0f4738907e902c1ee78a19e42e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64878458841d00882d1673a0b4579b4babaab91f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=64878458841d00882d1673a0b4579b4babaab91f", "patch": "@@ -1274,7 +1274,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         span: Span,\n     ) {\n         let output_ty = match self.infcx.get_impl_future_output_ty(ty) {\n-            Some(output_ty) => self.resolve_vars_if_possible(output_ty),\n+            Some(output_ty) => self.resolve_vars_if_possible(output_ty).skip_binder(),\n             _ => return,\n         };\n         let method_exists = self.method_exists(item_name, output_ty, call.hir_id, true);"}]}