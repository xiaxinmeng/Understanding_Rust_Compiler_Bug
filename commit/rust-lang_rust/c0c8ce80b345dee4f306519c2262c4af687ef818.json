{"sha": "c0c8ce80b345dee4f306519c2262c4af687ef818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYzhjZTgwYjM0NWRlZTRmMzA2NTE5YzIyNjJjNGFmNjg3ZWY4MTg=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-11T11:46:17Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T00:11:12Z"}, "message": "[const-prop] Replace `Ref` handling with use of `InterpCx`", "tree": {"sha": "2c8d553f54b00dbb8a66e52490516410c857b53d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8d553f54b00dbb8a66e52490516410c857b53d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0c8ce80b345dee4f306519c2262c4af687ef818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c8ce80b345dee4f306519c2262c4af687ef818", "html_url": "https://github.com/rust-lang/rust/commit/c0c8ce80b345dee4f306519c2262c4af687ef818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0c8ce80b345dee4f306519c2262c4af687ef818/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec928ca06877611f60fbf652775ae8e4aaf8cfc", "html_url": "https://github.com/rust-lang/rust/commit/9ec928ca06877611f60fbf652775ae8e4aaf8cfc"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "0aa6f5174c111ac8f02ce3947ddd489e6d1fe6a3", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8ce80b345dee4f306519c2262c4af687ef818/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8ce80b345dee4f306519c2262c4af687ef818/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=c0c8ce80b345dee4f306519c2262c4af687ef818", "patch": "@@ -2,11 +2,11 @@\n //!\n //! The main entry point is the `step` method.\n \n-use rustc::mir;\n+use rustc::mir::{self, Place, PlaceBase};\n use rustc::ty::layout::LayoutOf;\n use rustc::mir::interpret::{InterpResult, Scalar, PointerArithmetic};\n \n-use super::{InterpCx, Machine};\n+use super::{InterpCx, LocalValue, Machine};\n \n /// Classify whether an operator is \"left-homogeneous\", i.e., the LHS has the\n /// same type as the result.\n@@ -240,6 +240,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Ref(_, _, ref place) => {\n+                // FIXME(wesleywiser) we don't currently handle the case where we try to make a ref\n+                // from a function argument that hasn't been assigned to in this function. So just\n+                // report those as uninitialized for now.\n+                if let Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: None\n+                } = place {\n+                    let alive =\n+                        if let LocalValue::Live(_) = self.frame().locals[*local].value {\n+                            true\n+                        } else { false };\n+\n+                    if local.as_usize() <= self.frame().body.arg_count && !alive {\n+                        trace!(\"skipping Ref({:?})\", place);\n+                        throw_unsup!(UninitializedLocal);\n+                    }\n+                }\n                 let src = self.eval_place(place)?;\n                 let place = self.force_allocation(src)?;\n                 if place.layout.size.bytes() > 0 {"}, {"sha": "0653598bc86000c37cc8754e8972691028dbafe6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0c8ce80b345dee4f306519c2262c4af687ef818/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0c8ce80b345dee4f306519c2262c4af687ef818/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c0c8ce80b345dee4f306519c2262c4af687ef818", "patch": "@@ -313,17 +313,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Rvalue::Len(_) |\n             Rvalue::Cast(..) |\n             Rvalue::NullaryOp(..) |\n-            Rvalue::CheckedBinaryOp(..) => {\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::Ref(..) => {\n                 self.use_ecx(source_info, |this| {\n                     this.ecx.eval_rvalue_into_place(rvalue, place)?;\n                     this.ecx.eval_place_to_op(place, Some(place_layout))\n                 })\n             },\n-            Rvalue::Ref(_, _, ref place) => {\n-                let src = self.eval_place(place, source_info)?;\n-                let mplace = src.try_as_mplace().ok()?;\n-                Some(ImmTy::from_scalar(mplace.ptr.into(), place_layout).into())\n-            },\n \n             Rvalue::UnaryOp(op, ref arg) => {\n                 let overflow_check = self.tcx.sess.overflow_checks();"}]}