{"sha": "313cb8acaea05e703441bd5adb92aacce5bf6411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxM2NiOGFjYWVhMDVlNzAzNDQxYmQ1YWRiOTJhYWNjZTViZjY0MTE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-10T06:57:14Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-10T16:15:13Z"}, "message": "Change ItemModifier and ItemDecorator to traits\n\nFor convenience, the traits are implemented for the respective bare\nfunctions. Change code from this:\n\n```rust\nItemDecorator(some_function)\n// or\nItemModifier(some_other_function)\n```\nto\n```rust\nItemDecorator(box some_function)\n// or\nItemModifier(box some_other_function)\n```\n\n[breaking-change]", "tree": {"sha": "66f774dcb2ed082983adeea86d26bd23175a1678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f774dcb2ed082983adeea86d26bd23175a1678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313cb8acaea05e703441bd5adb92aacce5bf6411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313cb8acaea05e703441bd5adb92aacce5bf6411", "html_url": "https://github.com/rust-lang/rust/commit/313cb8acaea05e703441bd5adb92aacce5bf6411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313cb8acaea05e703441bd5adb92aacce5bf6411/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ceb9b4157a076977b0d782632960bb90a0d39d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ceb9b4157a076977b0d782632960bb90a0d39d9", "html_url": "https://github.com/rust-lang/rust/commit/6ceb9b4157a076977b0d782632960bb90a0d39d9"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "43be3c227ac2fde30210d6b9022042dd6e8496a9", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=313cb8acaea05e703441bd5adb92aacce5bf6411", "patch": "@@ -39,11 +39,45 @@ pub struct MacroDef {\n     pub ext: SyntaxExtension\n }\n \n-pub type ItemDecorator =\n-    fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>, |Gc<ast::Item>|);\n+pub trait ItemDecorator {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>,\n+              push: |Gc<ast::Item>|);\n+}\n+\n+impl ItemDecorator for fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>, |Gc<ast::Item>|) {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              sp: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>,\n+              push: |Gc<ast::Item>|) {\n+        (*self)(ecx, sp, meta_item, item, push)\n+    }\n+}\n \n-pub type ItemModifier =\n-    fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>) -> Gc<ast::Item>;\n+pub trait ItemModifier {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              span: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>)\n+              -> Gc<ast::Item>;\n+}\n+\n+impl ItemModifier for fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>) -> Gc<ast::Item> {\n+    fn expand(&self,\n+              ecx: &mut ExtCtxt,\n+              span: Span,\n+              meta_item: Gc<ast::MetaItem>,\n+              item: Gc<ast::Item>)\n+              -> Gc<ast::Item> {\n+        (*self)(ecx, span, meta_item, item)\n+    }\n+}\n \n pub struct BasicMacroExpander {\n     pub expander: MacroExpanderFn,\n@@ -281,11 +315,11 @@ pub enum SyntaxExtension {\n     /// based upon it.\n     ///\n     /// `#[deriving(...)]` is an `ItemDecorator`.\n-    ItemDecorator(ItemDecorator),\n+    ItemDecorator(Box<ItemDecorator + 'static>),\n \n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place.\n-    ItemModifier(ItemModifier),\n+    ItemModifier(Box<ItemModifier + 'static>),\n \n     /// A normal, function-like syntax extension.\n     ///\n@@ -371,7 +405,7 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"deriving\"),\n-                            ItemDecorator(ext::deriving::expand_meta_deriving));\n+                            ItemDecorator(box ext::deriving::expand_meta_deriving));\n \n     // Quasi-quoting expanders\n     syntax_expanders.insert(intern(\"quote_tokens\"),"}, {"sha": "c531da0bd8737dae25353c6caceb758377ce5df1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=313cb8acaea05e703441bd5adb92aacce5bf6411", "patch": "@@ -251,7 +251,7 @@ fn expand_item(it: Gc<ast::Item>, fld: &mut MacroExpander)\n \n         match fld.cx.syntax_env.find(&intern(mname.get())) {\n             Some(rc) => match *rc {\n-                ItemDecorator(dec_fn) => {\n+                ItemDecorator(ref dec) => {\n                     attr::mark_used(attr);\n \n                     fld.cx.bt_push(ExpnInfo {\n@@ -266,8 +266,7 @@ fn expand_item(it: Gc<ast::Item>, fld: &mut MacroExpander)\n                     // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n                     // but that double-mut-borrows fld\n                     let mut items: SmallVector<Gc<ast::Item>> = SmallVector::zero();\n-                    dec_fn(fld.cx, attr.span, attr.node.value, it,\n-                        |item| items.push(item));\n+                    dec.expand(fld.cx, attr.span, attr.node.value, it, |item| items.push(item));\n                     decorator_items.extend(items.move_iter()\n                         .flat_map(|item| expand_item(item, fld).move_iter()));\n \n@@ -328,7 +327,7 @@ fn expand_item_modifiers(mut it: Gc<ast::Item>, fld: &mut MacroExpander)\n \n         match fld.cx.syntax_env.find(&intern(mname.get())) {\n             Some(rc) => match *rc {\n-                ItemModifier(dec_fn) => {\n+                ItemModifier(ref mac) => {\n                     attr::mark_used(attr);\n                     fld.cx.bt_push(ExpnInfo {\n                         call_site: attr.span,\n@@ -338,7 +337,7 @@ fn expand_item_modifiers(mut it: Gc<ast::Item>, fld: &mut MacroExpander)\n                             span: None,\n                         }\n                     });\n-                    it = dec_fn(fld.cx, attr.span, attr.node.value, it);\n+                    it = mac.expand(fld.cx, attr.span, attr.node.value, it);\n                     fld.cx.bt_pop();\n                 }\n                 _ => unreachable!()"}, {"sha": "fbbee2e625a8c996bd5b9705c585f258c6243904", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313cb8acaea05e703441bd5adb92aacce5bf6411/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=313cb8acaea05e703441bd5adb92aacce5bf6411", "patch": "@@ -36,7 +36,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         token::intern(\"into_foo\"),\n-        ItemModifier(expand_into_foo));\n+        ItemModifier(box expand_into_foo));\n }\n \n fn expand_make_a_1(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])"}]}