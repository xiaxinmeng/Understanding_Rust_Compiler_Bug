{"sha": "58e4ab2b33f559107dbdfa9d3cab882cf8029481", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTRhYjJiMzNmNTU5MTA3ZGJkZmE5ZDNjYWI4ODJjZjgwMjk0ODE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-14T18:16:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-14T20:59:02Z"}, "message": "extra: Put the nail in the coffin, delete libextra\n\nThis commit shreds all remnants of libextra from the compiler and standard\ndistribution. Two modules, c_vec/tempfile, were moved into libstd after some\ncleanup, and the other modules were moved to separate crates as seen fit.\n\nCloses #8784\nCloses #12413\nCloses #12576", "tree": {"sha": "749ec81e1a287e6ce082c201d97cec7243612a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749ec81e1a287e6ce082c201d97cec7243612a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e4ab2b33f559107dbdfa9d3cab882cf8029481", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e4ab2b33f559107dbdfa9d3cab882cf8029481", "html_url": "https://github.com/rust-lang/rust/commit/58e4ab2b33f559107dbdfa9d3cab882cf8029481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e4ab2b33f559107dbdfa9d3cab882cf8029481/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99d523707c8058383e7a551e49d59ce622d5765", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99d523707c8058383e7a551e49d59ce622d5765", "html_url": "https://github.com/rust-lang/rust/commit/e99d523707c8058383e7a551e49d59ce622d5765"}], "stats": {"total": 1180, "additions": 311, "deletions": 869}, "files": [{"sha": "2a6e38a6d3d46111054e6a6667f6b0c00dd35013", "filename": "mk/crates.mk", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -37,7 +37,7 @@\n #\n #   DEPS_<crate>\n #\tThese lists are the dependencies of the <crate> that is to be built.\n-#\tRust dependencies are listed bare (i.e. std, extra, green) and native\n+#\tRust dependencies are listed bare (i.e. std, green) and native\n #\tdependencies have a \"native:\" prefix (i.e. native:sundown). All deps\n #\twill be built before the crate itself is built.\n #\n@@ -49,23 +49,23 @@\n # automatically generated for all stage/host/target combinations.\n ################################################################################\n \n-TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections num test time rand\n+TARGET_CRATES := std green rustuv native flate arena glob term semver \\\n+                 uuid serialize sync getopts collections num test time rand \\\n+\t\t workcache url\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt native:compiler-rt native:backtrace\n-DEPS_extra := std term sync serialize getopts collections time rand\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections time extra\n+              collections time\n DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n                 test time\n-DEPS_flate := std extra native:miniz\n+DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n DEPS_serialize := std collections\n@@ -78,9 +78,11 @@ DEPS_collections := std rand\n DEPS_fourcc := syntax std\n DEPS_hexfloat := syntax std\n DEPS_num := std rand\n-DEPS_test := std extra collections getopts serialize term\n+DEPS_test := std collections getopts serialize term time\n DEPS_time := std serialize\n DEPS_rand := std\n+DEPS_url := std collections\n+DEPS_workcache := std serialize collections std\n \n TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc native"}, {"sha": "6ffb7549c39a2bd13c9d0f2f2fa65e5ff9cdaa26", "filename": "src/doc/index.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -49,6 +49,8 @@ li {list-style-type: none; }\n * [The `test` library containing the unit-testing & micro-benchmark framework](test/index.html)\n * [The `time` library](time/index.html)\n * [The `uuid` 128-bit universally unique identifier library](uuid/index.html)\n+* [The `url` library](url/index.html)\n+* [The `workcache` library](workcache/index.html)\n \n # Tooling\n "}, {"sha": "f0b9a430771b5d8c01499ed2e3673d73ee567a01", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -787,9 +787,9 @@ Four examples of `extern crate` declarations:\n ~~~~ {.ignore}\n extern crate pcre;\n \n-extern crate extra; // equivalent to: extern crate extra = \"extra\";\n+extern crate std; // equivalent to: extern crate std = \"std\";\n \n-extern crate rustextra = \"extra\"; // linking to 'extra' under another name\n+extern crate ruststd = \"std\"; // linking to 'std' under another name\n \n extern crate foo = \"some/where/rust-foo#foo:1.0\"; // a full package ID for external tools\n ~~~~"}, {"sha": "9b4d4444da4ea9412ef3530aea0e0cf1e9acd270", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -3228,17 +3228,6 @@ See the [API documentation][stddoc] for details.\n \n [stddoc]: std/index.html\n \n-## The extra library\n-\n-Rust ships with crates such as the [extra library], an accumulation of useful things,\n-that are however not important enough to deserve a place in the standard\n-library.  You can link to a library such as `extra` with an `extern crate extra;`.\n-\n-[extra library]: extra/index.html\n-\n-Right now `extra` contains those definitions directly, but in the future it will likely just\n-re-export a bunch of 'officially blessed' crates that get managed with a package manager.\n-\n # What next?\n \n Now that you know the essentials, check out any of the additional"}, {"sha": "a7f23405de5f70dfddf8f66650fd0c5ac9756809", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -56,7 +56,6 @@ def scrub(b):\n #[feature(globs, macro_rules, struct_variant, managed_boxes)];\n #[allow(warnings)];\n extern crate collections;\n-extern crate extra;\n \"\"\"\n )\n for t in stage2_tests:\n@@ -73,7 +72,6 @@ def scrub(b):\n \"\"\"\n // AUTO-GENERATED FILE: DO NOT EDIT\n #[feature(globs, managed_boxes)];\n-extern crate extra;\n extern crate run_pass_stage2;\n use run_pass_stage2::*;\n use std::io;"}, {"sha": "05ce884dfb18655b236fada9980a55a4697ac7d7", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -38,7 +38,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n {error_deriving}"}, {"sha": "b93ffce636b2c6b11d25e68c1271176b1643f600", "filename": "src/libextra/c_vec.rs", "status": "removed", "additions": 0, "deletions": 240, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=e99d523707c8058383e7a551e49d59ce622d5765", "patch": "@@ -1,240 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n- * Library to interface with chunks of memory allocated in C.\n- *\n- * It is often desirable to safely interface with memory allocated from C,\n- * encapsulating the unsafety into allocation and destruction time.  Indeed,\n- * allocating memory externally is currently the only way to give Rust shared\n- * mut state with C programs that keep their own references; vectors are\n- * unsuitable because they could be reallocated or moved at any time, and\n- * importing C memory into a vector takes a one-time snapshot of the memory.\n- *\n- * This module simplifies the usage of such external blocks of memory.  Memory\n- * is encapsulated into an opaque object after creation; the lifecycle of the\n- * memory can be optionally managed by Rust, if an appropriate destructor\n- * closure is provided.  Safety is ensured by bounds-checking accesses, which\n- * are marshalled through get and set functions.\n- *\n- * There are three unsafe functions: the two constructors, and the\n- * unwrap method. The constructors are unsafe for the\n- * obvious reason (they act on a pointer that cannot be checked inside the\n- * method), but `unwrap()` is somewhat more subtle in its unsafety.\n- * It returns the contained pointer, but at the same time destroys the CVec\n- * without running its destructor. This can be used to pass memory back to\n- * C, but care must be taken that the ownership of underlying resources are\n- * handled correctly, i.e. that allocated memory is eventually freed\n- * if necessary.\n- */\n-\n-use std::cast;\n-use std::ptr;\n-use std::raw;\n-\n-/**\n- * The type representing a foreign chunk of memory\n- */\n-pub struct CVec<T> {\n-    priv base: *mut T,\n-    priv len: uint,\n-    priv rsrc: DtorRes,\n-}\n-\n-struct DtorRes {\n-    dtor: Option<proc()>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for DtorRes {\n-    fn drop(&mut self) {\n-        let dtor = self.dtor.take();\n-        match dtor {\n-            None => (),\n-            Some(f) => f()\n-        }\n-    }\n-}\n-\n-impl DtorRes {\n-    fn new(dtor: Option<proc()>) -> DtorRes {\n-        DtorRes {\n-            dtor: dtor,\n-        }\n-    }\n-}\n-\n-impl <T> CVec<T> {\n-    /**\n-     * Create a `CVec` from a raw pointer to a buffer with a given length.\n-     *\n-     * Fails if the given pointer is null.\n-     *\n-     * # Arguments\n-     *\n-     * * base - A raw pointer to a buffer\n-     * * len - The number of elements in the buffer\n-     */\n-    pub unsafe fn new(base: *mut T, len: uint) -> CVec<T> {\n-        assert!(base != ptr::mut_null());\n-        CVec {\n-            base: base,\n-            len: len,\n-            rsrc: DtorRes::new(None)\n-        }\n-    }\n-\n-    /**\n-     * Create a `CVec` from a foreign buffer, with a given length,\n-     * and a function to run upon destruction.\n-     *\n-     * Fails if the given pointer is null.\n-     *\n-     * # Arguments\n-     *\n-     * * base - A foreign pointer to a buffer\n-     * * len - The number of elements in the buffer\n-     * * dtor - A proc to run when the value is destructed, useful\n-     *          for freeing the buffer, etc.\n-     */\n-    pub unsafe fn new_with_dtor(base: *mut T, len: uint, dtor: proc()) -> CVec<T> {\n-        assert!(base != ptr::mut_null());\n-        CVec {\n-            base: base,\n-            len: len,\n-            rsrc: DtorRes::new(Some(dtor))\n-        }\n-    }\n-\n-    /// View the stored data as a slice.\n-    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n-        unsafe {\n-            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n-        }\n-    }\n-\n-    /// View the stored data as a mutable slice.\n-    pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n-        unsafe {\n-            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n-        }\n-    }\n-\n-    /**\n-     * Retrieves an element at a given index\n-     *\n-     * Fails if `ofs` is greater or equal to the length of the vector\n-     */\n-    pub fn get<'a>(&'a self, ofs: uint) -> &'a T {\n-        assert!(ofs < self.len);\n-        unsafe {\n-            &*self.base.offset(ofs as int)\n-        }\n-    }\n-\n-    /**\n-     * Retrieves a mutable element at a given index\n-     *\n-     * Fails if `ofs` is greater or equal to the length of the vector\n-     */\n-    pub fn get_mut<'a>(&'a mut self, ofs: uint) -> &'a mut T {\n-        assert!(ofs < self.len);\n-        unsafe {\n-            &mut *self.base.offset(ofs as int)\n-        }\n-    }\n-\n-    /**\n-     * Unwrap the pointer without running the destructor\n-     *\n-     * This method retrieves the underlying pointer, and in the process\n-     * destroys the CVec but without running the destructor. A use case\n-     * would be transferring ownership of the buffer to a C function, as\n-     * in this case you would not want to run the destructor.\n-     *\n-     * Note that if you want to access the underlying pointer without\n-     * cancelling the destructor, you can simply call `transmute` on the return\n-     * value of `get(0)`.\n-     */\n-    pub unsafe fn unwrap(mut self) -> *mut T {\n-        self.rsrc.dtor = None;\n-        self.base\n-    }\n-}\n-\n-impl <T> Container for CVec<T> {\n-    /// Returns the length of the vector\n-    fn len(&self) -> uint { self.len }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    use std::libc::*;\n-    use std::libc;\n-    use std::ptr;\n-    use std::rt::global_heap::malloc_raw;\n-\n-    fn malloc(n: uint) -> CVec<u8> {\n-        unsafe {\n-            let mem = malloc_raw(n);\n-\n-            CVec::new_with_dtor(mem as *mut u8, n,\n-                proc() { libc::free(mem as *mut c_void); })\n-        }\n-    }\n-\n-    #[test]\n-    fn test_basic() {\n-        let mut cv = malloc(16);\n-\n-        *cv.get_mut(3) = 8;\n-        *cv.get_mut(4) = 9;\n-        assert_eq!(*cv.get(3), 8);\n-        assert_eq!(*cv.get(4), 9);\n-        assert_eq!(cv.len(), 16);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_fail_at_null() {\n-        unsafe {\n-            CVec::new(ptr::mut_null::<u8>(), 9);\n-        }\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_overrun_get() {\n-        let cv = malloc(16);\n-\n-        cv.get(17);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    fn test_overrun_set() {\n-        let mut cv = malloc(16);\n-\n-        *cv.get_mut(17) =  0;\n-    }\n-\n-    #[test]\n-    fn test_unwrap() {\n-        unsafe {\n-            let cv = CVec::new_with_dtor(1 as *mut int, 0,\n-                proc() { fail!(\"Don't run this destructor!\") });\n-            let p = cv.unwrap();\n-            assert_eq!(p, 1 as *mut int);\n-        }\n-    }\n-\n-}"}, {"sha": "4bb6b0050b89767ff46934000412922be3118ec1", "filename": "src/libextra/lib.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=e99d523707c8058383e7a551e49d59ce622d5765", "patch": "@@ -1,52 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-Rust extras.\n-\n-The `extra` crate is a set of useful modules for a variety of\n-purposes, including collections, numerics, I/O, serialization,\n-and concurrency.\n-\n-Rust extras are part of the standard Rust distribution.\n-\n-*/\n-\n-#[crate_id = \"extra#0.10-pre\"];\n-#[comment = \"Rust extras\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(macro_rules, globs, managed_boxes, asm, default_type_params)];\n-\n-#[allow(deprecated_owned_vector)];\n-#[deny(non_camel_case_types)];\n-#[deny(missing_doc)];\n-\n-extern crate collections;\n-extern crate rand;\n-extern crate serialize;\n-extern crate sync;\n-extern crate time;\n-\n-// Utility modules\n-pub mod c_vec;\n-pub mod url;\n-pub mod tempfile;\n-pub mod workcache;\n-pub mod stats;\n-\n-#[cfg(unicode)]\n-mod unicode;"}, {"sha": "094a4b02a249fe877fd34e1d98c0736230151fbe", "filename": "src/libextra/unicode.rs", "status": "removed", "additions": 0, "deletions": 262, "changes": 262, "blob_url": "https://github.com/rust-lang/rust/blob/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99d523707c8058383e7a551e49d59ce622d5765/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=e99d523707c8058383e7a551e49d59ce622d5765", "patch": "@@ -1,262 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[allow(missing_doc)];\n-\n-pub mod icu {\n-    pub type UBool = u8;\n-    pub type UProperty = int;\n-    pub type UChar32 = char;\n-\n-    pub static TRUE : u8 = 1u8;\n-    pub static FALSE : u8 = 0u8;\n-\n-    pub static UCHAR_ALPHABETIC : UProperty = 0;\n-    pub static UCHAR_BINARY_START : UProperty = 0; // = UCHAR_ALPHABETIC\n-    pub static UCHAR_ASCII_HEX_DIGIT : UProperty = 1;\n-    pub static UCHAR_BIDI_CONTROL : UProperty = 2;\n-\n-    pub static UCHAR_BIDI_MIRRORED : UProperty = 3;\n-    pub static UCHAR_DASH : UProperty = 4;\n-    pub static UCHAR_DEFAULT_IGNORABLE_CODE_POINT : UProperty = 5;\n-    pub static UCHAR_DEPRECATED : UProperty = 6;\n-\n-    pub static UCHAR_DIACRITIC : UProperty = 7;\n-    pub static UCHAR_EXTENDER : UProperty = 8;\n-    pub static UCHAR_FULL_COMPOSITION_EXCLUSION : UProperty = 9;\n-    pub static UCHAR_GRAPHEME_BASE : UProperty = 10;\n-\n-    pub static UCHAR_GRAPHEME_EXTEND : UProperty = 11;\n-    pub static UCHAR_GRAPHEME_LINK : UProperty = 12;\n-    pub static UCHAR_HEX_DIGIT : UProperty = 13;\n-    pub static UCHAR_HYPHEN : UProperty = 14;\n-\n-    pub static UCHAR_ID_CONTINUE : UProperty = 15;\n-    pub static UCHAR_ID_START : UProperty = 16;\n-    pub static UCHAR_IDEOGRAPHIC : UProperty = 17;\n-    pub static UCHAR_IDS_BINARY_OPERATOR : UProperty = 18;\n-\n-    pub static UCHAR_IDS_TRINARY_OPERATOR : UProperty = 19;\n-    pub static UCHAR_JOIN_CONTROL : UProperty = 20;\n-    pub static UCHAR_LOGICAL_ORDER_EXCEPTION : UProperty = 21;\n-    pub static UCHAR_LOWERCASE : UProperty = 22;\n-\n-    pub static UCHAR_MATH : UProperty = 23;\n-    pub static UCHAR_NONCHARACTER_CODE_POINT : UProperty = 24;\n-    pub static UCHAR_QUOTATION_MARK : UProperty = 25;\n-    pub static UCHAR_RADICAL : UProperty = 26;\n-\n-    pub static UCHAR_SOFT_DOTTED : UProperty = 27;\n-    pub static UCHAR_TERMINAL_PUNCTUATION : UProperty = 28;\n-    pub static UCHAR_UNIFIED_IDEOGRAPH : UProperty = 29;\n-    pub static UCHAR_UPPERCASE : UProperty = 30;\n-\n-    pub static UCHAR_WHITE_SPACE : UProperty = 31;\n-    pub static UCHAR_XID_CONTINUE : UProperty = 32;\n-    pub static UCHAR_XID_START : UProperty = 33;\n-    pub static UCHAR_CASE_SENSITIVE : UProperty = 34;\n-\n-    pub static UCHAR_S_TERM : UProperty = 35;\n-    pub static UCHAR_VARIATION_SELECTOR : UProperty = 36;\n-    pub static UCHAR_NFD_INERT : UProperty = 37;\n-    pub static UCHAR_NFKD_INERT : UProperty = 38;\n-\n-    pub static UCHAR_NFC_INERT : UProperty = 39;\n-    pub static UCHAR_NFKC_INERT : UProperty = 40;\n-    pub static UCHAR_SEGMENT_STARTER : UProperty = 41;\n-    pub static UCHAR_PATTERN_SYNTAX : UProperty = 42;\n-\n-    pub static UCHAR_PATTERN_WHITE_SPACE : UProperty = 43;\n-    pub static UCHAR_POSIX_ALNUM : UProperty = 44;\n-    pub static UCHAR_POSIX_BLANK : UProperty = 45;\n-    pub static UCHAR_POSIX_GRAPH : UProperty = 46;\n-\n-    pub static UCHAR_POSIX_PRINT : UProperty = 47;\n-    pub static UCHAR_POSIX_XDIGIT : UProperty = 48;\n-    pub static UCHAR_CASED : UProperty = 49;\n-    pub static UCHAR_CASE_IGNORABLE : UProperty = 50;\n-\n-    pub static UCHAR_CHANGES_WHEN_LOWERCASED : UProperty = 51;\n-    pub static UCHAR_CHANGES_WHEN_UPPERCASED : UProperty = 52;\n-    pub static UCHAR_CHANGES_WHEN_TITLECASED : UProperty = 53;\n-    pub static UCHAR_CHANGES_WHEN_CASEFOLDED : UProperty = 54;\n-\n-    pub static UCHAR_CHANGES_WHEN_CASEMAPPED : UProperty = 55;\n-    pub static UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED : UProperty = 56;\n-    pub static UCHAR_BINARY_LIMIT : UProperty = 57;\n-    pub static UCHAR_BIDI_CLASS : UProperty = 0x1000;\n-\n-    pub static UCHAR_INT_START : UProperty = 0x1000; // UCHAR_BIDI_CLASS\n-    pub static UCHAR_BLOCK : UProperty = 0x1001;\n-    pub static UCHAR_CANONICAL_COMBINING_CLASS : UProperty = 0x1002;\n-    pub static UCHAR_DECOMPOSITION_TYPE : UProperty = 0x1003;\n-\n-    pub static UCHAR_EAST_ASIAN_WIDTH : UProperty = 0x1004;\n-    pub static UCHAR_GENERAL_CATEGORY : UProperty = 0x1005;\n-    pub static UCHAR_JOINING_GROUP : UProperty = 0x1006;\n-    pub static UCHAR_JOINING_TYPE : UProperty = 0x1007;\n-\n-    pub static UCHAR_LINE_BREAK : UProperty = 0x1008;\n-    pub static UCHAR_NUMERIC_TYPE : UProperty = 0x1009;\n-    pub static UCHAR_SCRIPT : UProperty = 0x100A;\n-    pub static UCHAR_HANGUL_SYLLABLE_TYPE : UProperty = 0x100B;\n-\n-    pub static UCHAR_NFD_QUICK_CHECK : UProperty = 0x100C;\n-    pub static UCHAR_NFKD_QUICK_CHECK : UProperty = 0x100D;\n-    pub static UCHAR_NFC_QUICK_CHECK : UProperty = 0x100E;\n-    pub static UCHAR_NFKC_QUICK_CHECK : UProperty = 0x100F;\n-\n-    pub static UCHAR_LEAD_CANONICAL_COMBINING_CLASS : UProperty = 0x1010;\n-    pub static UCHAR_TRAIL_CANONICAL_COMBINING_CLASS : UProperty = 0x1011;\n-    pub static UCHAR_GRAPHEME_CLUSTER_BREAK : UProperty = 0x1012;\n-    pub static UCHAR_SENTENCE_BREAK : UProperty = 0x1013;\n-\n-    pub static UCHAR_WORD_BREAK : UProperty = 0x1014;\n-    pub static UCHAR_INT_LIMIT : UProperty = 0x1015;\n-\n-    pub static UCHAR_GENERAL_CATEGORY_MASK : UProperty = 0x2000;\n-    pub static UCHAR_MASK_START : UProperty = 0x2000;\n-    // = UCHAR_GENERAL_CATEGORY_MASK\n-    pub static UCHAR_MASK_LIMIT : UProperty = 0x2001;\n-\n-    pub static UCHAR_NUMERIC_VALUE : UProperty = 0x3000;\n-    pub static UCHAR_DOUBLE_START : UProperty = 0x3000;\n-    // = UCHAR_NUMERIC_VALUE\n-    pub static UCHAR_DOUBLE_LIMIT : UProperty = 0x3001;\n-\n-    pub static UCHAR_AGE : UProperty = 0x4000;\n-    pub static UCHAR_STRING_START : UProperty = 0x4000; // = UCHAR_AGE\n-    pub static UCHAR_BIDI_MIRRORING_GLYPH : UProperty = 0x4001;\n-    pub static UCHAR_CASE_FOLDING : UProperty = 0x4002;\n-\n-    pub static UCHAR_ISO_COMMENT : UProperty = 0x4003;\n-    pub static UCHAR_LOWERCASE_MAPPING : UProperty = 0x4004;\n-    pub static UCHAR_NAME : UProperty = 0x4005;\n-    pub static UCHAR_SIMPLE_CASE_FOLDING : UProperty = 0x4006;\n-\n-    pub static UCHAR_SIMPLE_LOWERCASE_MAPPING : UProperty = 0x4007;\n-    pub static UCHAR_SIMPLE_TITLECASE_MAPPING : UProperty = 0x4008;\n-    pub static UCHAR_SIMPLE_UPPERCASE_MAPPING : UProperty = 0x4009;\n-    pub static UCHAR_TITLECASE_MAPPING : UProperty = 0x400A;\n-\n-    pub static UCHAR_UNICODE_1_NAME : UProperty = 0x400B;\n-    pub static UCHAR_UPPERCASE_MAPPING : UProperty = 0x400C;\n-    pub static UCHAR_STRING_LIMIT : UProperty = 0x400D;\n-\n-    pub static UCHAR_SCRIPT_EXTENSIONS : UProperty = 0x7000;\n-    pub static UCHAR_OTHER_PROPERTY_START : UProperty = 0x7000;\n-    // = UCHAR_SCRIPT_EXTENSIONS;\n-    pub static UCHAR_OTHER_PROPERTY_LIMIT : UProperty = 0x7001;\n-\n-    pub static UCHAR_INVALID_CODE : UProperty = -1;\n-\n-    pub mod libicu {\n-        use unicode::icu::*;\n-\n-        // #[link_name = \"icuuc\"]\n-        #[link(name = \"icuuc\")]\n-        extern {\n-            pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n-            pub fn u_isdigit(c: UChar32) -> UBool;\n-            pub fn u_islower(c: UChar32) -> UBool;\n-            pub fn u_isspace(c: UChar32) -> UBool;\n-            pub fn u_isupper(c: UChar32) -> UBool;\n-            pub fn u_tolower(c: UChar32) -> UChar32;\n-            pub fn u_toupper(c: UChar32) -> UChar32;\n-        }\n-    }\n-}\n-\n-pub fn is_XID_start(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n-            == icu::TRUE;\n-    }\n-}\n-\n-pub fn is_XID_continue(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n-            == icu::TRUE;\n-    }\n-}\n-\n-/*\n-Function: is_digit\n-\n-Returns true if a character is a digit.\n-*/\n-pub fn is_digit(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_isdigit(c) == icu::TRUE;\n-    }\n-}\n-\n-/*\n-Function: is_lower\n-\n-Returns true if a character is a lowercase letter.\n-*/\n-pub fn is_lower(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_islower(c) == icu::TRUE;\n-    }\n-}\n-\n-/*\n-Function: is_space\n-\n-Returns true if a character is space.\n-*/\n-pub fn is_space(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_isspace(c) == icu::TRUE;\n-    }\n-}\n-\n-/*\n-Function: is_upper\n-\n-Returns true if a character is an uppercase letter.\n-*/\n-pub fn is_upper(c: char) -> bool {\n-    unsafe {\n-        return icu::libicu::u_isupper(c) == icu::TRUE;\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use unicode::*;\n-\n-    #[test]\n-    fn test_is_digit() {\n-        assert!((is_digit('0')));\n-        assert!((!is_digit('m')));\n-    }\n-\n-    #[test]\n-    fn test_is_lower() {\n-        assert!((is_lower('m')));\n-        assert!((!is_lower('M')));\n-    }\n-\n-    #[test]\n-    fn test_is_space() {\n-        assert!((is_space(' ')));\n-        assert!((!is_space('m')));\n-    }\n-\n-    #[test]\n-    fn test_is_upper() {\n-        assert!((is_upper('M')));\n-        assert!((!is_upper('m')));\n-    }\n-}"}, {"sha": "41dc4e3976a681376dea99a837e3f8f9e9658b4d", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -18,12 +18,10 @@ Simple compression\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n-#[allow(missing_doc)];\n \n-extern crate extra;\n use std::libc::{c_void, size_t, c_int};\n use std::libc;\n-use extra::c_vec::CVec;\n+use std::c_vec::CVec;\n \n pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};"}, {"sha": "a47b68600142e8406e91bcf099b09def6088be67", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -17,14 +17,13 @@ use lib::llvm::{ArchiveRef, llvm};\n \n use std::cast;\n use std::vec_ng::Vec;\n-use std::io::fs;\n use std::io;\n+use std::io::{fs, TempDir};\n use std::libc;\n use std::os;\n use std::io::process::{ProcessConfig, Process, ProcessOutput};\n use std::str;\n use std::raw;\n-use extra::tempfile::TempDir;\n use syntax::abi;\n \n pub static METADATA_FILENAME: &'static str = \"rust.metadata.bin\";"}, {"sha": "25081017f07d552d741858167044ee14d88b5d55", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -32,12 +32,10 @@ use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n use std::str;\n use std::io;\n-use std::io::Process;\n-use std::io::fs;\n+use std::io::{fs, TempDir, Process};\n use std::vec_ng::Vec;\n use flate;\n use serialize::hex::ToHex;\n-use extra::tempfile::TempDir;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast_map::{PathElem, PathElems, PathName};"}, {"sha": "e7764802f1707ad002dd8bc0812f2334c262e30b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -32,7 +32,6 @@ This API is completely unstable and subject to change.\n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n #[feature(quote, default_type_params)];\n \n-extern crate extra;\n extern crate flate;\n extern crate arena;\n extern crate syntax;"}, {"sha": "d502018da17cf6eaba98193d2add4fec122eefed", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -19,8 +19,8 @@ use metadata::loader;\n \n use std::cell::RefCell;\n use std::vec_ng::Vec;\n+use std::c_vec::CVec;\n use collections::HashMap;\n-use extra::c_vec::CVec;\n use syntax::ast;\n use syntax::parse::token::IdentInterner;\n use syntax::crateid::CrateId;"}, {"sha": "3f8703b4f7563e91fe49b2c351c934022a79191b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -19,7 +19,6 @@\n \n extern crate syntax;\n extern crate rustc;\n-extern crate extra;\n extern crate serialize;\n extern crate sync;\n extern crate getopts;"}, {"sha": "5b6edeaf79d68d9db0d867e5a3103109e2d8704a", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,14 +11,13 @@\n use std::cell::RefCell;\n use std::char;\n use std::io;\n-use std::io::Process;\n+use std::io::{Process, TempDir};\n use std::local_data;\n use std::os;\n use std::str;\n \n use collections::HashSet;\n use testing;\n-use extra::tempfile::TempDir;\n use rustc::back::link;\n use rustc::driver::driver;\n use rustc::driver::session;\n@@ -178,9 +177,6 @@ fn maketest(s: &str, cratename: &str, loose_feature_gating: bool) -> ~str {\n     }\n \n     if !s.contains(\"extern crate\") {\n-        if s.contains(\"extra\") {\n-            prog.push_str(\"extern crate extra;\\n\");\n-        }\n         if s.contains(cratename) {\n             prog.push_str(format!(\"extern crate {};\\n\", cratename));\n         }"}, {"sha": "00d250a5fc70d3f47c7cc52e1a9b893fd17d12d1", "filename": "src/libstd/c_vec.rs", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -0,0 +1,216 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Library to interface with chunks of memory allocated in C.\n+//!\n+//! It is often desirable to safely interface with memory allocated from C,\n+//! encapsulating the unsafety into allocation and destruction time.  Indeed,\n+//! allocating memory externally is currently the only way to give Rust shared\n+//! mut state with C programs that keep their own references; vectors are\n+//! unsuitable because they could be reallocated or moved at any time, and\n+//! importing C memory into a vector takes a one-time snapshot of the memory.\n+//!\n+//! This module simplifies the usage of such external blocks of memory.  Memory\n+//! is encapsulated into an opaque object after creation; the lifecycle of the\n+//! memory can be optionally managed by Rust, if an appropriate destructor\n+//! closure is provided.  Safety is ensured by bounds-checking accesses, which\n+//! are marshalled through get and set functions.\n+//!\n+//! There are three unsafe functions: the two constructors, and the\n+//! unwrap method. The constructors are unsafe for the\n+//! obvious reason (they act on a pointer that cannot be checked inside the\n+//! method), but `unwrap()` is somewhat more subtle in its unsafety.\n+//! It returns the contained pointer, but at the same time destroys the CVec\n+//! without running its destructor. This can be used to pass memory back to\n+//! C, but care must be taken that the ownership of underlying resources are\n+//! handled correctly, i.e. that allocated memory is eventually freed\n+//! if necessary.\n+\n+use cast;\n+use container::Container;\n+use ptr;\n+use ptr::RawPtr;\n+use raw;\n+use option::{Option, Some, None};\n+use ops::Drop;\n+\n+/// The type representing a foreign chunk of memory\n+pub struct CVec<T> {\n+    priv base: *mut T,\n+    priv len: uint,\n+    priv dtor: Option<proc()>,\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for CVec<T> {\n+    fn drop(&mut self) {\n+        match self.dtor.take() {\n+            None => (),\n+            Some(f) => f()\n+        }\n+    }\n+}\n+\n+impl<T> CVec<T> {\n+    /// Create a `CVec` from a raw pointer to a buffer with a given length.\n+    ///\n+    /// Fails if the given pointer is null. The returned vector will not attempt\n+    /// to deallocate the vector when dropped.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * base - A raw pointer to a buffer\n+    /// * len - The number of elements in the buffer\n+    pub unsafe fn new(base: *mut T, len: uint) -> CVec<T> {\n+        assert!(base != ptr::mut_null());\n+        CVec {\n+            base: base,\n+            len: len,\n+            dtor: None,\n+        }\n+    }\n+\n+    /// Create a `CVec` from a foreign buffer, with a given length,\n+    /// and a function to run upon destruction.\n+    ///\n+    /// Fails if the given pointer is null.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * base - A foreign pointer to a buffer\n+    /// * len - The number of elements in the buffer\n+    /// * dtor - A proc to run when the value is destructed, useful\n+    ///          for freeing the buffer, etc.\n+    pub unsafe fn new_with_dtor(base: *mut T, len: uint,\n+                                dtor: proc()) -> CVec<T> {\n+        assert!(base != ptr::mut_null());\n+        CVec {\n+            base: base,\n+            len: len,\n+            dtor: Some(dtor),\n+        }\n+    }\n+\n+    /// View the stored data as a slice.\n+    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n+    /// View the stored data as a mutable slice.\n+    pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n+    /// Retrieves an element at a given index, returning `None` if the requested\n+    /// index is greater than the length of the vector.\n+    pub fn get<'a>(&'a self, ofs: uint) -> Option<&'a T> {\n+        if ofs < self.len {\n+            Some(unsafe { &*self.base.offset(ofs as int) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Retrieves a mutable element at a given index, returning `None` if the\n+    /// requested index is greater than the length of the vector.\n+    pub fn get_mut<'a>(&'a mut self, ofs: uint) -> Option<&'a mut T> {\n+        if ofs < self.len {\n+            Some(unsafe { &mut *self.base.offset(ofs as int) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Unwrap the pointer without running the destructor\n+    ///\n+    /// This method retrieves the underlying pointer, and in the process\n+    /// destroys the CVec but without running the destructor. A use case\n+    /// would be transferring ownership of the buffer to a C function, as\n+    /// in this case you would not want to run the destructor.\n+    ///\n+    /// Note that if you want to access the underlying pointer without\n+    /// cancelling the destructor, you can simply call `transmute` on the return\n+    /// value of `get(0)`.\n+    pub unsafe fn unwrap(mut self) -> *mut T {\n+        self.dtor = None;\n+        self.base\n+    }\n+}\n+\n+impl<T> Container for CVec<T> {\n+    fn len(&self) -> uint { self.len }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use prelude::*;\n+\n+    use super::CVec;\n+    use libc;\n+    use ptr;\n+    use rt::global_heap::malloc_raw;\n+\n+    fn malloc(n: uint) -> CVec<u8> {\n+        unsafe {\n+            let mem = malloc_raw(n);\n+\n+            CVec::new_with_dtor(mem as *mut u8, n,\n+                proc() { libc::free(mem as *mut libc::c_void); })\n+        }\n+    }\n+\n+    #[test]\n+    fn test_basic() {\n+        let mut cv = malloc(16);\n+\n+        *cv.get_mut(3).unwrap() = 8;\n+        *cv.get_mut(4).unwrap() = 9;\n+        assert_eq!(*cv.get(3).unwrap(), 8);\n+        assert_eq!(*cv.get(4).unwrap(), 9);\n+        assert_eq!(cv.len(), 16);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_fail_at_null() {\n+        unsafe {\n+            CVec::new(ptr::mut_null::<u8>(), 9);\n+        }\n+    }\n+\n+    #[test]\n+    fn test_overrun_get() {\n+        let cv = malloc(16);\n+\n+        assert!(cv.get(17).is_none());\n+    }\n+\n+    #[test]\n+    fn test_overrun_set() {\n+        let mut cv = malloc(16);\n+\n+        assert!(cv.get_mut(17).is_none());\n+    }\n+\n+    #[test]\n+    fn test_unwrap() {\n+        unsafe {\n+            let cv = CVec::new_with_dtor(1 as *mut int, 0,\n+                proc() { fail!(\"Don't run this destructor!\") });\n+            let p = cv.unwrap();\n+            assert_eq!(p, 1 as *mut int);\n+        }\n+    }\n+\n+}"}, {"sha": "28f6d13070eae5b7e339bf286679e2288bf32f57", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -241,40 +241,31 @@ pub use self::net::tcp::TcpStream;\n pub use self::net::udp::UdpStream;\n pub use self::pipe::PipeStream;\n pub use self::process::{Process, ProcessConfig};\n+pub use self::tempfile::TempDir;\n \n pub use self::mem::{MemReader, BufReader, MemWriter, BufWriter};\n pub use self::buffered::{BufferedReader, BufferedWriter, BufferedStream,\n                          LineBufferedWriter};\n pub use self::comm_adapters::{ChanReader, ChanWriter};\n \n+// this comes first to get the iotest! macro\n pub mod test;\n \n+mod buffered;\n+mod comm_adapters;\n+mod mem;\n+mod result;\n+mod tempfile;\n+pub mod extensions;\n pub mod fs;\n-\n+pub mod net;\n pub mod pipe;\n-\n pub mod process;\n-\n-pub mod net;\n-\n-mod mem;\n-\n+pub mod signal;\n pub mod stdio;\n-\n-mod result;\n-\n-pub mod extensions;\n-\n pub mod timer;\n-\n-mod buffered;\n-\n-pub mod signal;\n-\n pub mod util;\n \n-mod comm_adapters;\n-\n /// The default buffer size for various I/O operations\n // libuv recommends 64k buffers to maximize throughput\n // https://groups.google.com/forum/#!topic/libuv/oQO1HJAIDdA"}, {"sha": "34d6b19199a7140f302bd3d3e241cadbc57d1a62", "filename": "src/libstd/io/tempfile.rs", "status": "renamed", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,11 +10,16 @@\n \n //! Temporary files and directories\n \n-\n-use std::os;\n-use rand::{task_rng, Rng};\n-use std::io;\n-use std::io::fs;\n+use io::fs;\n+use io;\n+use iter::{Iterator, range};\n+use libc;\n+use ops::Drop;\n+use option::{Option, None, Some};\n+use os;\n+use path::{Path, GenericPath};\n+use result::{Ok, Err};\n+use sync::atomics;\n \n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-based deletion.\n@@ -30,13 +35,17 @@ impl TempDir {\n     /// If no directory can be created, None is returned.\n     pub fn new_in(tmpdir: &Path, suffix: &str) -> Option<TempDir> {\n         if !tmpdir.is_absolute() {\n-            let abs_tmpdir = os::make_absolute(tmpdir);\n-            return TempDir::new_in(&abs_tmpdir, suffix);\n+            return TempDir::new_in(&os::make_absolute(tmpdir), suffix);\n         }\n \n-        let mut r = task_rng();\n+        static mut CNT: atomics::AtomicUint = atomics::INIT_ATOMIC_UINT;\n+\n         for _ in range(0u, 1000) {\n-            let p = tmpdir.join(r.gen_ascii_str(16) + suffix);\n+            let filename = format!(\"rs-{}-{}-{}\",\n+                                   unsafe { libc::getpid() },\n+                                   unsafe { CNT.fetch_add(1, atomics::SeqCst) },\n+                                   suffix);\n+            let p = tmpdir.join(filename);\n             match fs::mkdir(&p, io::UserRWX) {\n                 Err(..) => {}\n                 Ok(()) => return Some(TempDir { path: Some(p) })", "previous_filename": "src/libextra/tempfile.rs"}, {"sha": "6b1773ec7ffbe40f2eb82ef2c0db42f3d3ed48a3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -74,9 +74,8 @@\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n \n-// Make extra and rand accessible for benchmarking/testcases\n+// Make and rand accessible for benchmarking/testcases\n #[cfg(test)] extern crate rand;\n-#[cfg(test)] extern crate extra = \"extra\";\n \n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern crate realstd = \"std\";\n@@ -172,6 +171,7 @@ pub mod sync;\n #[unstable]\n pub mod libc;\n pub mod c_str;\n+pub mod c_vec;\n pub mod os;\n pub mod io;\n pub mod path;"}, {"sha": "b8f00d1b692a8a8fb1a4d90c9d433a4852fbc671", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -1392,7 +1392,6 @@ mod tests {\n     use rand::Rng;\n     use rand;\n \n-\n     #[test]\n     pub fn last_os_error() {\n         debug!(\"{}\", os::last_os_error());"}, {"sha": "040c4da68858f2fc94c2855b7096e0340ef3ede0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -4320,7 +4320,7 @@ impl Parser {\n     ///\n     /// # Example\n     ///\n-    /// extern crate extra;\n+    /// extern crate url;\n     /// extern crate foo = \"bar\";\n     fn parse_item_extern_crate(&mut self,\n                                 lo: BytePos,"}, {"sha": "3ed72e384f7b804ebf60e0c864766d9481824e4c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -29,19 +29,17 @@\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n \n-#[feature(asm)];\n+#[feature(asm, macro_rules)];\n #[allow(deprecated_owned_vector)];\n \n extern crate collections;\n-extern crate extra;\n extern crate getopts;\n extern crate serialize;\n extern crate term;\n extern crate time;\n \n use collections::TreeMap;\n-use extra::stats::Stats;\n-use extra::stats;\n+use stats::Stats;\n use time::precise_time_ns;\n use getopts::{OptGroup, optflag, optopt};\n use serialize::{json, Decodable};\n@@ -68,9 +66,11 @@ pub mod test {\n              MetricChange, Improvement, Regression, LikelyNoise,\n              StaticTestFn, StaticTestName, DynTestName, DynTestFn,\n              run_test, test_main, test_main_static, filter_tests,\n-             parse_opts};\n+             parse_opts, StaticBenchFn};\n }\n \n+pub mod stats;\n+\n // The name of a test. By convention this follows the rules for rust\n // paths; i.e. it should be a series of identifiers separated by double\n // colons. This way if some test runner wants to arrange the tests\n@@ -1309,7 +1309,7 @@ mod tests {\n                Metric, MetricMap, MetricAdded, MetricRemoved,\n                Improvement, Regression, LikelyNoise,\n                StaticTestName, DynTestName, DynTestFn};\n-    use extra::tempfile::TempDir;\n+    use std::io::TempDir;\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {"}, {"sha": "b3fd06bd6ad1f8a67c1a43380eef6d4dc4e2ecf6", "filename": "src/libtest/stats.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -1034,19 +1034,18 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::BenchHarness;\n+    use BenchHarness;\n     use std::vec;\n     use stats::Stats;\n \n     #[bench]\n-    fn sum_three_items(bh: &mut BenchHarness) {\n+    pub fn sum_three_items(bh: &mut BenchHarness) {\n         bh.iter(|| {\n             [1e20, 1.5, -1e20].sum();\n         })\n     }\n     #[bench]\n-    fn sum_many_f64(bh: &mut BenchHarness) {\n+    pub fn sum_many_f64(bh: &mut BenchHarness) {\n         let nums = [-1e30, 1e60, 1e30, 1.0, -1e60];\n         let v = vec::from_fn(500, |i| nums[i%5]);\n ", "previous_filename": "src/libextra/stats.rs"}, {"sha": "69e1dce7376a8099311161d4ba0a756ee51bdcb6", "filename": "src/liburl/lib.rs", "status": "renamed", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,7 +10,14 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n-#[allow(missing_doc)];\n+#[crate_id = \"url#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+#[feature(default_type_params)];\n+#[allow(deprecated_owned_vector)];\n+\n+extern crate collections;\n \n use std::cmp::Eq;\n use std::fmt;\n@@ -28,7 +35,7 @@ use collections::HashMap;\n /// # Example\n ///\n /// ```rust\n-/// use extra::url::{Url, UserInfo};\n+/// use url::{Url, UserInfo};\n ///\n /// let url = Url { scheme: ~\"https\",\n ///                 user: Some(UserInfo { user: ~\"username\", pass: None }),\n@@ -174,7 +181,7 @@ fn encode_inner(s: &str, full_url: bool) -> ~str {\n  * # Example\n  *\n  * ```rust\n- * use extra::url::encode;\n+ * use url::encode;\n  *\n  * let url = encode(&\"https://example.com/Rust (programming language)\");\n  * println!(\"{}\", url); // https://example.com/Rust%20(programming%20language)\n@@ -249,7 +256,7 @@ fn decode_inner(s: &str, full_url: bool) -> ~str {\n  * # Example\n  *\n  * ```rust\n- * use extra::url::decode;\n+ * use url::decode;\n  *\n  * let url = decode(&\"https://example.com/Rust%20(programming%20language)\");\n  * println!(\"{}\", url); // https://example.com/Rust (programming language)\n@@ -436,8 +443,6 @@ fn query_from_str(rawquery: &str) -> Query {\n  * # Example\n  *\n  * ```rust\n- * use extra::url;\n- *\n  * let query = ~[(~\"title\", ~\"The Village\"), (~\"north\", ~\"52.91\"), (~\"west\", ~\"4.10\")];\n  * println!(\"{}\", url::query_to_str(&query));  // title=The%20Village&north=52.91&west=4.10\n  * ```\n@@ -464,7 +469,7 @@ pub fn query_to_str(query: &Query) -> ~str {\n  * # Example\n  *\n  * ```rust\n- * use extra::url::get_scheme;\n+ * use url::get_scheme;\n  *\n  * let scheme = match get_scheme(\"https://example.com/\") {\n  *     Ok((sch, _)) => sch,\n@@ -948,8 +953,9 @@ fn test_get_path() {\n \n #[cfg(test)]\n mod tests {\n-\n-    use super::*;\n+    use {encode_form_urlencoded, decode_form_urlencoded, decode_component,\n+         decode, encode, from_str, encode_component, decode_component,\n+         path_from_str, UserInfo, get_scheme};\n \n     use collections::HashMap;\n ", "previous_filename": "src/libextra/url.rs"}, {"sha": "eb63f2dacbbf7d684630554e5db56c80b78ba840", "filename": "src/libworkcache/lib.rs", "status": "renamed", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n-#[allow(visible_private_types)];\n+#[crate_id = \"workcache#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+#[allow(deprecated_owned_vector, visible_private_types)];\n+\n+extern crate serialize;\n+extern crate collections;\n+extern crate sync;\n \n use serialize::json;\n use serialize::json::ToJson;", "previous_filename": "src/libextra/workcache.rs"}, {"sha": "ef5c141a3d5082a0f9f9cf2e0624309c6b324057", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,8 +11,6 @@\n #[crate_id=\"issue_2526#0.2\"];\n #[crate_type = \"lib\"];\n \n-extern crate extra;\n-\n struct arc_destruct<T> {\n   _data: int,\n }"}, {"sha": "448d545ee229447c1e1d3f08542006dbd87b6349", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,7 +12,6 @@\n #[crate_id=\"req\"];\n #[crate_type = \"lib\"];\n \n-extern crate extra;\n extern crate collections;\n \n use std::cell::RefCell;"}, {"sha": "044c4b07d443e5a896e7a65e98fa11cd5c634e7a", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -17,8 +17,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::os;\n use std::uint;\n "}, {"sha": "1a7302207d968857a30e34ece9624c669915fe82", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::os;\n use std::uint;\n "}, {"sha": "5f445de069ca208aa1cdb3c628dbe5bb74ad36ba", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task::spawn;\n use std::os;\n use std::uint;"}, {"sha": "889d663fb5b82d4bc65f96e80d750e07d3754528", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::os;\n \n fn ack(m: int, n: int) -> int {"}, {"sha": "51aff9699960fe1a9f82a5c367733f60e4b02340", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // chameneos\n \n-extern crate extra;\n-\n use std::option;\n use std::os;\n use std::task;"}, {"sha": "785481819aa1c91090b16463b01c2bde91f5fb8e", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::os;\n \n fn fib(n: int) -> int {"}, {"sha": "2ddcd2b5bfd2824317ac6d11f2708e953aec022b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,7 +13,6 @@\n // ignore-pretty the `let to_child` line gets an extra newline\n // multi tasking k-nucleotide\n \n-extern crate extra;\n extern crate collections;\n \n use std::cmp::Ord;"}, {"sha": "e69ede619de74e1094fa46d6c11732a1e78b19c9", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n use std::io;\n use std::io::stdio::StdReader;\n use std::io::BufferedReader;"}, {"sha": "37560444af695cdf8bc8abb4a66cbf5bd15d98bd", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "89acf95f1563e38ab96eed3c1f020311c513d1e4", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "0afcfa18c73fbff49f6008b4b692192ca9cb9c7f", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "d116a791620ce2dfc1d09eb50a13037823346802", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "09afd9730fb0a94e164c13b9390485b796da0f6a", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "4dbcc3de1fa5adaecb4dda8e6981492481f723ad", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "4e9dfd96c631ce74095f4c1e60c6d378642db578", "filename": "src/test/compile-fail/deriving-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "794c36b43d84ac051e56597635039da0f413d186", "filename": "src/test/compile-fail/deriving-span-Eq-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "4488e74d851f1a935c1413cd6b89bca4f24083f6", "filename": "src/test/compile-fail/deriving-span-Eq-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "949e1cee37a0c4298aa55f652f62e137a1cbc15d", "filename": "src/test/compile-fail/deriving-span-Eq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "1323c4daf94fee0a3d134b558f9c2d3fb8a5bd03", "filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "af78a1ace70ff2046eac374e3b0df934fa84f5c4", "filename": "src/test/compile-fail/deriving-span-Hash-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "c8fdb0f19a5e94dc77882802025b94e7e4e08546", "filename": "src/test/compile-fail/deriving-span-Hash-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "897483c8ada401c63e5ebbc16e5469f91cb519df", "filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "a99191fd0dcbe083fb7ec950c3bcd42e61258016", "filename": "src/test/compile-fail/deriving-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "2be3d5c83af151c013bfec025de946febd3f9748", "filename": "src/test/compile-fail/deriving-span-Ord-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "5848bda1750ba2f36b8f1707a4b6d3b291c84d4a", "filename": "src/test/compile-fail/deriving-span-Ord-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "198721e9b75b17359bc49a322c2eba1498086d98", "filename": "src/test/compile-fail/deriving-span-Ord-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "4fee8aa84e677df79b1b1464dd4814555133f13b", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "58f8a2b44b27b913de003f3024f77185f86e96c2", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "7350f94e76b6920f90bc972d5879467777e336d9", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "0d7631e8e2077fd412884e548f991cc4616860bb", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "b3f94ff606d20fa6e94ac2f53dfe7268108d123b", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "f3ff502c6e237bffac9c5a34a3500e7c8ceb373e", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "258efaaba0c74b7b916b41011afdbcd7eb8b231c", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "002495389f3914b9002a7fde84d35de7afcff42e", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "5d6d4531b40cd7c883d7c4a202bc88d13299b0ed", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "b80aa2646d2721f402ca3902c9c4c6f1bdaa1d1c", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "878316c4b036cd05cc094683893d96b3973fef44", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "c590a1f216498e541d76f3a354735c32c41f6aff", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "d6ca5f726753129c0363ca298929e754d94feb32", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "e53c849591412216c061332f59dd5e822c0271d1", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "8b7a9d3bea6822042103d2da18175570faa8b03a", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "ff13923721707c51d5b4e4de1f9cd23b80ec9ddb", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "acebdff28ff05cdbe59696f842abf61d68c9bc30", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "64600fef2c5699b642961cc2e62b666035dd4cc9", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern crate extra;\n extern crate rand;\n \n "}, {"sha": "daef77f63141eaedc64d5f88ab6be75291db8f5b", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n fn siphash(k0 : u64) {\n \n     struct siphash {"}, {"sha": "1fb71f01d06d32367ae76c831a72253818d57b6e", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n fn siphash<T>() {\n \n     trait t {"}, {"sha": "ddb33f1e61a811f9c7ad634584de2605770525ef", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n trait siphash {\n     fn result(&self) -> u64;\n     fn reset(&self);"}, {"sha": "d44d81b7fe01d1d7a399c901461cacb8ff2ad4ef", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n trait SipHash {\n     fn reset(&self);\n }"}, {"sha": "cf82cf087a3fba5e7f27c3560ffca349ce8d8587", "filename": "src/test/compile-fail/moves-based-on-type-cyclic-types-issue-4821.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n // temporary kinds wound up being stored in a cache and used later.\n // See middle::ty::type_contents() for more information.\n \n-extern crate extra;\n-\n struct List { key: int, next: Option<~List> }\n \n fn foo(node: ~List) -> int {"}, {"sha": "3e4b2502fd002efa0d5c128918855a13e5e57d62", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n \n-extern crate extra;\n-\n enum bar { t1((), Option<~[int]>), t2, }\n \n // n.b. my change changes this error message, but I think it's right -- tjc"}, {"sha": "94614e4970a62d3df0a85d2b461bf6818ebb00fe", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n // error-pattern: mismatched types\n \n enum bar { t1((), Option<~[int]>), t2, }"}, {"sha": "09cac75baa0fbd9b4de0ffe6cc4dc109464a1ec5", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(quote)];\n \n-extern crate extra;\n extern crate syntax;\n \n use io::*;"}, {"sha": "82d0cb2e198a210b64646b081bf93c2a8d551549", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,11 +12,8 @@\n \n #[feature(quote)];\n \n-extern crate extra;\n extern crate syntax;\n \n-use extra::io::*;\n-\n use syntax::diagnostic;\n use syntax::ast;\n use syntax::codemap;"}, {"sha": "8531a1a71c7ea5c3ce904ad7d71eb2e4d7dcc9b6", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n mod argparse {\n-    extern crate extra;\n-\n     pub struct Flag<'a> {\n         name: &'a str,\n         desc: &'a str,"}, {"sha": "35c18c495471c9b5872e55fe5e11442bb25de3f0", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n fn main() {\n trait seq { }\n "}, {"sha": "3a35d9cc309ab2f653e38b697e33abefce09d687", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: mismatched types\n \n-extern crate extra;\n-\n use std::task;\n \n fn main() { task::spawn(|| -> int { 10 }); }"}, {"sha": "c5b061caf6e78863512ab4125496930953c5a6a8", "filename": "src/test/compile-fail/unresolved-extern-mod-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-use extra; //~ ERROR unresolved import (maybe you meant `extra::*`?)\n+extern crate collections;\n+use collections; //~ ERROR unresolved import (maybe you meant `collections::*`?)\n \n fn main() {}"}, {"sha": "7b78a8d932b33c7dd3cd47d71bbe1a54327ef300", "filename": "src/test/compile-fail/view-items-at-top.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n+extern crate test;\n \n fn f() {\n }\n \n-use extra::net;    //~ ERROR `use` and `extern crate` declarations must precede items\n+use test::net;    //~ ERROR `use` and `extern crate` declarations must precede items\n \n fn main() {\n }"}, {"sha": "f90530a4435b1770da42f8cd9a30e38e1e18853f", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,5 +9,4 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern crate extra;\n fn main() { fail!(\"moop\"); }"}, {"sha": "e54c754f53bc18c3506b4492cba55c6a53041bc5", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n // error-pattern:meh\n-extern crate extra;\n \n fn main() { let str_var: ~str = ~\"meh\"; fail!(\"{}\", str_var); }"}, {"sha": "508463599a32fe36c2551dd958014c84365e6840", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern crate extra;\n \n fn main() { for _ in range(0u, 10u) { fail!(\"moop\"); } }"}, {"sha": "2430c5bb666b5de07b56df2ff2c73e9e5fc96244", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -16,8 +16,6 @@\n // See the hack in upcall_call_shim_on_c_stack where it messes\n // with the stack limit.\n \n-extern crate extra;\n-\n use std::libc;\n use std::task;\n "}, {"sha": "2e4aafb9b0d19d0b72c4ebb59daead410e627b7f", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,8 +13,6 @@\n \n // Just testing unwinding\n \n-extern crate extra;\n-\n use std::task;\n \n fn getbig_and_fail(i: int) {"}, {"sha": "6d326779ca2ed71bf6427d4527dd7c097ca44ab3", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,8 +13,6 @@\n \n // Just testing unwinding\n \n-extern crate extra;\n-\n use std::task;\n \n fn getbig_and_fail(i: int) {"}, {"sha": "b8941275591613ee28c12433df1124316102d31e", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n // compile-flags:--test\n // check-stdout\n \n-extern crate extra;\n-\n mod m {\n     pub fn exported() { }\n "}, {"sha": "9a37af1e1254c8800c9e7f6ad5a66e34130950b4", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,7 +13,6 @@\n \n #[feature(quote)];\n \n-extern crate extra;\n extern crate syntax;\n \n use std::io::*;"}, {"sha": "2a65fd9d8a655deed16e76b4998094b4845acc89", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:expected item\n \n #[foo = \"bar\"]\n-extern crate extra;\n+extern crate test;\n \n pub fn main() {\n }"}, {"sha": "5b8e62de6bd820a0d16831458bef2e01c7186f59", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,7 +12,7 @@\n \n mod m {\n     #[foo = \"bar\"]\n-    extern crate extra;\n+    extern crate test;\n }\n \n pub fn main() {"}, {"sha": "fd40f0b4b800299111d457e953788160d00a8668", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n fn asSendfn(f: proc() -> uint) -> uint {\n    return f();\n }"}, {"sha": "6db42c1e2eef226360b4e014229397103e9f9843", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n use std::task::spawn;\n \n struct Pair {"}, {"sha": "30b716f75d8dffa5361004250f0a7099d05e9c0f", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n /**\n  * A function that returns a hash of a value\n  *"}, {"sha": "434b684756b6965788bcb18f32cf0d4d0eab4be9", "filename": "src/test/run-pass/extern-foreign-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n extern crate mystd = \"std\";\n \n pub fn main() {}"}, {"sha": "4d9f7d507f0a50f316d729e9a5d2f0c6dcbb7b19", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::num::Float;\n \n pub fn main() {"}, {"sha": "7e6a362cabebbed65326552c514bf640142c3ecf", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n mod libc {\n     use std::libc::{c_char, size_t};\n "}, {"sha": "03c83bb24c89228c8a6e55cd4feaf07fac76a5c0", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,14 +13,13 @@\n \n #[feature(macro_rules)];\n \n-extern crate extra;\n extern crate glob;\n \n use glob::glob;\n-use extra::tempfile::TempDir;\n use std::unstable::finally::Finally;\n use std::{os, unstable};\n use std::io;\n+use std::io::TempDir;\n \n macro_rules! assert_eq ( ($e1:expr, $e2:expr) => (\n     if $e1 != $e2 {"}, {"sha": "3ba8f5eace5b18adff1e3321039093feb3602acb", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,7 +13,6 @@\n #[feature(globs)];\n #[allow(dead_assignment)];\n \n-extern crate extra;\n use std::vec::*;\n \n pub fn main() {"}, {"sha": "f4de938c66e7d9b0ee2a4d042ad03d13fc402625", "filename": "src/test/run-pass/infinite-loops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfinite-loops.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -14,8 +14,6 @@\n */\n // ignore-test\n \n-extern crate extra;\n-\n fn loopy(n: int) {\n     if n > 0 { spawn(proc() { loopy(n - 1) }); spawn(proc() { loopy(n - 1) }); }\n     loop { }"}, {"sha": "88c964462e835bfdf51881de68c717251fe4c096", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n #[feature(globs)];\n \n-extern crate extra;\n-\n mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn ctpop8(x: i8) -> i8;"}, {"sha": "463ed02a716b0f93d1061a01377419490ab048c0", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -14,8 +14,6 @@\n \n /// Map representation\n \n-extern crate extra;\n-\n use std::io;\n use std::fmt;\n "}, {"sha": "b603759380e3aca8d993f95794e751f2baa74932", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::vec;\n \n trait methods {"}, {"sha": "7cd995f18f446daf5ec280fafca56afb28cee01d", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // except according to those terms.\n \n // rustc --test ignores2.rs && ./ignores2\n-extern crate extra;\n \n use std::path::{Path};\n use std::path;"}, {"sha": "5a787f8c0eea4a44d7c0e7418278eb4d0246302a", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n enum Token {\n     Text(@~str),\n     ETag(@~[~str], @~str),"}, {"sha": "7d051e378ab06f2230a53769e338df204f4d9fac", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -16,7 +16,6 @@\n // However the extra library is designed to be optional (for code that must run on constrained\n //  environments like embedded devices or special environments like kernel code) so it must\n // be explicitly linked in.\n-extern crate extra;\n \n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method."}, {"sha": "b3b610b91a799a90a274babeefd22fc11e356b55", "filename": "src/test/run-pass/issue-3574.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3574.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n #[allow(unnecessary_allocation)];\n \n // rustc --test match_borrowed_str.rs.rs && ./match_borrowed_str.rs\n-extern crate extra;\n \n fn compare(x: &str, y: &str) -> bool\n {"}, {"sha": "d50a1b6a0be6c4ac1ec1daccb0eb5df3ce1d44d9", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n type RingBuffer = ~[f64];"}, {"sha": "2235676441047eeccb28f5ae04824fab82d1ae3e", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -16,7 +16,7 @@\n #[attr3];\n #[attr4(attr5)];\n \n-#[crate_id=\"extra#0.1\"];\n+#[crate_id=\"foobar#0.1\"];\n \n // These are attributes of the following mod\n #[attr1 = \"val\"]\n@@ -140,8 +140,6 @@ mod test_attr_inner_then_outer_multi {\n }\n \n mod test_distinguish_syntax_ext {\n-    extern crate extra;\n-\n     pub fn f() {\n         format!(\"test{}\", \"s\");\n         #[attr = \"val\"]"}, {"sha": "d6654db854f81240f111c9c398e59ba62fe0abec", "filename": "src/test/run-pass/match-join.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-join.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate extra;\n-\n fn foo<T>(y: Option<T>) {\n     let mut x: int;\n     let mut rs: ~[int] = ~[];"}, {"sha": "60cd2941becab396135508fb45ab3fb1cc573dc6", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n trait Serializer {\n }\n "}, {"sha": "65dabba191bc820f845e36a41a63ef1419e78896", "filename": "src/test/run-pass/morestack5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n // This test will call __morestack with various minimum stack sizes\n \n-extern crate extra;\n-\n use std::task;\n \n fn getbig(i: int) {"}, {"sha": "867f00aff530e654ff838c33d9d2ff17afc71b94", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n #[deriving(Clone)]\n struct Triple {\n     x: int,"}, {"sha": "b065b612be5b572339d9f50481ee209206f51411", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n struct Triple { x: int, y: int, z: int }\n \n fn test(x: bool, foo: @Triple) -> int {"}, {"sha": "60537d99d84e5ccda3509f63bb9761ff68a5e048", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n struct Triple {a: int, b: int, c: int}\n \n fn test(foo: ~Triple) -> ~Triple {"}, {"sha": "a7ff1bfb23e10abf71cd03eb35433dc140b725bf", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n struct Triple { a: int, b: int, c: int }\n \n fn test(foo: @Triple) -> @Triple {"}, {"sha": "34ce5c66539d8c03e5987e3dfb55768cb123311c", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n fn grow(v: &mut ~[int]) {\n     v.push(1);\n }"}, {"sha": "df1d22f2c86fbf98a1df608839e38c804b7f1f1e", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,10 +12,7 @@\n // This checks that preemption works.\n \n // note: halfway done porting to modern rust\n-extern crate extra;\n-\n use std::comm;\n-use extra::comm;\n \n fn starve_main(alive: Receiver<int>) {\n     info!(\"signalling main\");"}, {"sha": "9e0ca203698313e15091344e29cd0de93cdb0f88", "filename": "src/test/run-pass/regions-lifetime-static-items-enclosing-scopes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-lifetime-static-items-enclosing-scopes.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // This test verifies that temporary lifetime is correctly computed\n // for static objects in enclosing scopes.\n \n-extern crate extra;\n use std::cmp::Eq;\n \n fn f<T:Eq>(o: &mut Option<T>) {"}, {"sha": "ef43dad2c68ea3fcd641ab40a8f6ea0717a2c9e9", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,9 +12,8 @@\n // because it needs TempDir, which is in extra\n \n // ignore-fast\n-extern crate extra;\n \n-use extra::tempfile::TempDir;\n+use std::io::TempDir;\n use std::os;\n use std::libc;\n use std::io;"}, {"sha": "987aa9ee7e3220d5022d6922c7227cdb84dd0fc4", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() {"}, {"sha": "96e76c798ff43cfddefdf08c636d37b96b5a7d68", "filename": "src/test/run-pass/stat.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,13 +10,10 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n-use extra::tempfile;\n-use std::io::File;\n+use std::io::{File, TempDir};\n \n pub fn main() {\n-    let dir = tempfile::TempDir::new_in(&Path::new(\".\"), \"\").unwrap();\n+    let dir = TempDir::new_in(&Path::new(\".\"), \"\").unwrap();\n     let path = dir.path().join(\"file\");\n \n     {"}, {"sha": "90d5bae56f4391e134b22c0d282a3cc99b422f9b", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-extern crate extra;\n-\n fn test1() {\n     let mut s: ~str = ~\"hello\";\n     s.push_str(\"world\");"}, {"sha": "2331ca64dee591edcf7d526ea063ba2b6e882a6d", "filename": "src/test/run-pass/str-multiline.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstr-multiline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstr-multiline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-multiline.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-extern crate extra;\n-\n pub fn main() {\n     let a: ~str = ~\"this \\\n is a test\";"}, {"sha": "10230065b9141ab28dd41e9813b5fad46791f528", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n pub fn main() {\n     // Make sure we properly handle repeated self-appends.\n     let mut a: ~str = ~\"A\";"}, {"sha": "cbab11003b17dc7244da60f6e3dd68e59be4ef5d", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() { test05(); }"}, {"sha": "844e39e584ed28ef032b92aab8a4f8930f301fd8", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n fn start(tx: &Sender<Sender<~str>>) {"}, {"sha": "254988c8b0ed46d696d32147475c937f02a21d4d", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n fn start(tx: &Sender<Sender<int>>) {"}, {"sha": "d0c5efbfa227b0673b6851d620400ba4e8fb8fdf", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() { test00(); }"}, {"sha": "0b1e9580a1e22547697273e922eaa3e31af28857", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n fn start(tx: &Sender<int>, start: int, number_of_messages: int) {"}, {"sha": "355f179ad17947c43a8ce4900b085a4ba095a2a6", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n fn start(tx: &Sender<int>, i0: int) {"}, {"sha": "4f4d365901e7903cd48969cf48cb42473bcfb0c3", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n // This test is specifically about spawning temporary closures.\n \n-extern crate extra;\n-\n use std::task;\n \n fn f() {"}, {"sha": "0ed76593b9e8475266d92057b144a00e99fc1ed0", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() { info!(\"===== WITHOUT THREADS =====\"); test00(); }"}, {"sha": "e51e14f7fbe82eabefb6eacfa13dfd1296604246", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n pub fn main() { test00(); }\n \n fn test00() {"}, {"sha": "5d918a4c88fb1b6e8823679138135bafab525db1", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n #[allow(dead_assignment)];\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() { test00(); }"}, {"sha": "f2493e5d1022317d552f750b650dec8004677cd5", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() { test00(); }"}, {"sha": "3ea17898eada213886d38449085f3e9e7aa0602d", "filename": "src/test/run-pass/task-comm-chan-nil.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-chan-nil.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern crate extra;\n-\n // rustboot can't transmit nils across channels because they don't have\n // any size, but rustc currently can because they do have size. Whether\n // or not this is desirable I don't know, but here's a regression test."}, {"sha": "dfcebbaaee058a43f9b2300907960bc25c9dd185", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() {"}, {"sha": "2bb839aa2cfe7c01a383e92a4bef8b2ce3a04114", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -19,10 +19,7 @@\n // they're in a different location than before. Hence, these tests are all run\n // serially here.\n \n-extern crate extra;\n-\n-use extra::tempfile::TempDir;\n-use std::io::fs;\n+use std::io::{fs, TempDir};\n use std::io;\n use std::os;\n use std::task;"}, {"sha": "9f648b9a4739c5508a512d952426b93c33994177", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -13,8 +13,6 @@\n // Issue #787\n // Don't try to clean up uninitialized locals\n \n-extern crate extra;\n-\n use std::task;\n \n fn test_break() { loop { let _x: @int = break; } }"}, {"sha": "ba131569bc49294ccc2fd04dbe753599818d9a27", "filename": "src/test/run-pass/test-ignore-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,8 +11,6 @@\n // compile-flags: --test --cfg ignorecfg\n // ignore-fast\n \n-extern crate extra;\n-\n #[test]\n #[ignore(cfg(ignorecfg))]\n fn shouldignore() {"}, {"sha": "3781a60fcfe0678ea95ba694b13781d1ced1354a", "filename": "src/test/run-pass/test-runner-hides-main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-main.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n // ignore-fast\n // ignore-win32 #10872\n \n-extern crate extra;\n-\n // Building as a test runner means that a synthetic main will be run,\n // not ours\n pub fn main() { fail!(); }"}, {"sha": "b00689db26b8b0a49b857e8bc8ae9c1f8e752d3c", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n pub fn main() {"}, {"sha": "3c3198379be24605c20ff34be633c669926ad477", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::cmp::{Eq, Ord};\n use std::num::NumCast;\n "}, {"sha": "2bfe11d23a3c6edfcae14f419d408b6951e3d1c9", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -12,8 +12,6 @@\n \n // A more complex example of numeric extensions\n \n-extern crate extra;\n-\n use std::cmp::{Eq, Ord};\n \n pub trait TypeExt {}"}, {"sha": "953140fcfef928a2af87dd9ab9e6adcbc5229912", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -11,7 +11,6 @@\n // Tests that the tail expr in null() has its type\n // unified with the type *T, and so the type variable\n // in that type gets resolved.\n-extern crate extra;\n \n use std::cast;\n "}, {"sha": "53e92fc4abb5880bd37c8f671164c8d09d4b0a8c", "filename": "src/test/run-pass/unwind-box.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-box.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n use std::task;\n \n fn f() {"}, {"sha": "fc37e1c39ed03dce56493c7b4d1bfc4ec8e57c11", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-fast\n \n-extern crate extra;\n-\n use std::task;\n \n struct complainer {"}, {"sha": "3331ee2181450f482c86178b4f8b2a4b8828d5e8", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -10,8 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n-\n use std::task;\n \n struct complainer {"}, {"sha": "8bc95b233f1cda7738ffa9349cc0249142a55f90", "filename": "src/test/run-pass/unwind-unique.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-unique.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::task;\n \n fn f() {"}, {"sha": "bf9c5838de8fd795c3dd9cd62248fd8314bf5fa1", "filename": "src/test/run-pass/use-crate-name-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-crate-name-alias.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // Issue #1706\n-extern crate stdlib = \"extra\";\n+extern crate stdlib = \"std\";\n \n pub fn main() {}"}, {"sha": "0e85c67edb7846a086ac2f21b41c4e4daa1afda2", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n use std::str;\n \n pub fn main() {"}, {"sha": "f190fd2cb9366081fc0cbf56122ffa72cdba123c", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e4ab2b33f559107dbdfa9d3cab882cf8029481/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=58e4ab2b33f559107dbdfa9d3cab882cf8029481", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n-\n fn test_heap_to_heap() {\n     // a spills onto the heap\n     let mut a = ~[0, 1, 2, 3, 4];"}]}