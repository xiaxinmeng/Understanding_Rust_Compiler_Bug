{"sha": "3aae223d938e5a36d997c45a0f86cfcabf83b570", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYWUyMjNkOTM4ZTVhMzZkOTk3YzQ1YTBmODZjZmNhYmY4M2I1NzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T06:31:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T06:31:03Z"}, "message": "hide some scopes", "tree": {"sha": "354c1e3c3a5e07b233c4e8490225f9be720a3315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/354c1e3c3a5e07b233c4e8490225f9be720a3315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aae223d938e5a36d997c45a0f86cfcabf83b570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aae223d938e5a36d997c45a0f86cfcabf83b570", "html_url": "https://github.com/rust-lang/rust/commit/3aae223d938e5a36d997c45a0f86cfcabf83b570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aae223d938e5a36d997c45a0f86cfcabf83b570/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58fe5598e70eef6edf109865cb87b806b22536fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/58fe5598e70eef6edf109865cb87b806b22536fb", "html_url": "https://github.com/rust-lang/rust/commit/58fe5598e70eef6edf109865cb87b806b22536fb"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "9493acec94dd0cce3ae06353ff92642df1045268", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=3aae223d938e5a36d997c45a0f86cfcabf83b570", "patch": "@@ -1,7 +1,4 @@\n-use hir::{\n-    db::HirDatabase,\n-    source_binder::function_from_child_node,\n-};\n+use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken, PatKind, ExprKind},\n     TextRange,\n@@ -29,10 +26,8 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n     } else {\n         let_stmt.syntax().range()\n     };\n-\n-    let function = function_from_child_node(ctx.db, ctx.frange.file_id, bind_pat.syntax())?;\n-    let scope = function.scopes(ctx.db);\n-    let refs = scope.find_all_refs(bind_pat);\n+    let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, bind_pat.syntax(), None);\n+    let refs = analyzer.find_all_refs(bind_pat)?;\n \n     let mut wrap_in_parens = vec![true; refs.len()];\n "}, {"sha": "a9be9fbdbdba2366e2794fae8fb6d84ba81a4e59", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=3aae223d938e5a36d997c45a0f86cfcabf83b570", "patch": "@@ -173,7 +173,10 @@ impl ScopesWithSourceMap {\n             .unwrap_or(original_scope)\n     }\n \n-    pub fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n+    pub(crate) fn resolve_local_name(\n+        &self,\n+        name_ref: &ast::NameRef,\n+    ) -> Option<ScopeEntryWithSyntax> {\n         let mut shadowed = FxHashSet::default();\n         let name = name_ref.as_name();\n         let ret = self\n@@ -190,7 +193,7 @@ impl ScopesWithSourceMap {\n         })\n     }\n \n-    pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n+    pub(crate) fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n         let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n         let ptr = Either::A(AstPtr::new(pat.into()));\n         fn_def"}, {"sha": "bdb30031105119bdbc5137d1135a4d74974a4eb2", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=3aae223d938e5a36d997c45a0f86cfcabf83b570", "patch": "@@ -17,6 +17,7 @@ use ra_syntax::{\n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n+    expr::scope::{ReferenceDescriptor, ScopeEntryWithSyntax},\n     ids::LocationCtx,\n     expr, AstId\n };\n@@ -222,6 +223,7 @@ pub struct SourceAnalyzer {\n     resolver: Resolver,\n     body_source_map: Option<Arc<crate::expr::BodySourceMap>>,\n     infer: Option<Arc<crate::ty::InferenceResult>>,\n+    scopes: Option<crate::expr::ScopesWithSourceMap>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -248,6 +250,7 @@ impl SourceAnalyzer {\n             resolver: resolver_for_node(db, file_id, node, offset),\n             body_source_map: def_with_body.map(|it| it.body_source_map(db)),\n             infer: def_with_body.map(|it| it.infer(db)),\n+            scopes: def_with_body.map(|it| it.scopes(db)),\n         }\n     }\n \n@@ -302,6 +305,14 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n+    pub fn find_all_refs(&self, pat: &ast::BindPat) -> Option<Vec<ReferenceDescriptor>> {\n+        self.scopes.as_ref().map(|it| it.find_all_refs(pat))\n+    }\n+\n+    pub fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n+        self.scopes.as_ref()?.resolve_local_name(name_ref)\n+    }\n+\n     #[cfg(test)]\n     pub(crate) fn body_source_map(&self) -> Arc<crate::expr::BodySourceMap> {\n         self.body_source_map.clone().unwrap()"}, {"sha": "ee2c1d0f09e13d7663bd76e6ea8a24037ca15a22", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aae223d938e5a36d997c45a0f86cfcabf83b570/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=3aae223d938e5a36d997c45a0f86cfcabf83b570", "patch": "@@ -61,12 +61,11 @@ pub(crate) fn find_all_refs(\n     position: FilePosition,\n ) -> Option<ReferenceSearchResult> {\n     let file = db.parse(position.file_id);\n-    let (binding, descr) = find_binding(db, &file, position)?;\n+    let (binding, analyzer) = find_binding(db, &file, position)?;\n     let declaration = NavigationTarget::from_bind_pat(position.file_id, binding);\n \n-    let references = descr\n-        .scopes(db)\n-        .find_all_refs(binding)\n+    let references = analyzer\n+        .find_all_refs(binding)?\n         .into_iter()\n         .map(move |ref_desc| FileRange { file_id: position.file_id, range: ref_desc.range })\n         .collect::<Vec<_>>();\n@@ -77,21 +76,18 @@ pub(crate) fn find_all_refs(\n         db: &RootDatabase,\n         source_file: &'a SourceFile,\n         position: FilePosition,\n-    ) -> Option<(&'a ast::BindPat, hir::Function)> {\n+    ) -> Option<(&'a ast::BindPat, hir::SourceAnalyzer)> {\n         let syntax = source_file.syntax();\n         if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n-            let descr =\n-                source_binder::function_from_child_node(db, position.file_id, binding.syntax())?;\n-            return Some((binding, descr));\n+            let analyzer = hir::SourceAnalyzer::new(db, position.file_id, binding.syntax(), None);\n+            return Some((binding, analyzer));\n         };\n         let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n-        let descr =\n-            source_binder::function_from_child_node(db, position.file_id, name_ref.syntax())?;\n-        let scope = descr.scopes(db);\n-        let resolved = scope.resolve_local_name(name_ref)?;\n+        let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n+        let resolved = analyzer.resolve_local_name(name_ref)?;\n         if let Either::A(ptr) = resolved.ptr() {\n             if let ast::PatKind::BindPat(binding) = ptr.to_node(source_file).kind() {\n-                return Some((binding, descr));\n+                return Some((binding, analyzer));\n             }\n         }\n         None"}]}