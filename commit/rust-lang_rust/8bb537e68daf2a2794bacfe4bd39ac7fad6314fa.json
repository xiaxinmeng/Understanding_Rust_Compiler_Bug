{"sha": "8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjUzN2U2OGRhZjJhMjc5NGJhY2ZlNGJkMzlhYzdmYWQ2MzE0ZmE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-06T17:30:54Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-06T17:41:52Z"}, "message": "finish removing parse_value_ident", "tree": {"sha": "1813d56d5a07d009790db7ae848b3a882271ed4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1813d56d5a07d009790db7ae848b3a882271ed4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "html_url": "https://github.com/rust-lang/rust/commit/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88451878f8eb12a32dbb0c1eded1a91cb6df8305", "url": "https://api.github.com/repos/rust-lang/rust/commits/88451878f8eb12a32dbb0c1eded1a91cb6df8305", "html_url": "https://github.com/rust-lang/rust/commit/88451878f8eb12a32dbb0c1eded1a91cb6df8305"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "267bcf2fd324f6d46fabf3e77d2ec1f1097a3277", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb537e68daf2a2794bacfe4bd39ac7fad6314fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8bb537e68daf2a2794bacfe4bd39ac7fad6314fa", "patch": "@@ -457,7 +457,7 @@ pub impl Parser {\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n-            let ident = p.parse_method_name();\n+            let ident = p.parse_ident();\n \n             let generics = p.parse_generics();\n \n@@ -2102,11 +2102,7 @@ pub impl Parser {\n             }\n \n             let lo1 = self.last_span.lo;\n-            let fieldname = if self.look_ahead(1u) == token::COLON {\n-                self.parse_ident()\n-            } else {\n-                self.parse_value_ident()\n-            };\n+            let fieldname = self.parse_ident();\n             let hi1 = self.last_span.lo;\n             let fieldpath = ast_util::ident_to_path(mk_sp(lo1, hi1),\n                                                     fieldname);\n@@ -2946,7 +2942,7 @@ pub impl Parser {\n     }\n \n     fn parse_fn_header(&self) -> (ident, ast::Generics) {\n-        let id = self.parse_value_ident();\n+        let id = self.parse_ident();\n         let generics = self.parse_generics();\n         (id, generics)\n     }\n@@ -2969,10 +2965,6 @@ pub impl Parser {\n         (ident, item_fn(decl, purity, generics, body), Some(inner_attrs))\n     }\n \n-    fn parse_method_name(&self) -> ident {\n-        self.parse_value_ident()\n-    }\n-\n     fn parse_method(&self) -> @method {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n@@ -2982,7 +2974,7 @@ pub impl Parser {\n \n         let visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n-        let ident = self.parse_method_name();\n+        let ident = self.parse_ident();\n         let generics = self.parse_generics();\n         let (self_ty, decl) = do self.parse_fn_decl_with_self() |p| {\n             p.parse_arg()\n@@ -3106,7 +3098,7 @@ pub impl Parser {\n     }\n \n     fn parse_item_struct(&self) -> item_info {\n-        let class_name = self.parse_value_ident();\n+        let class_name = self.parse_ident();\n         self.parse_region_param();\n         let generics = self.parse_generics();\n         if self.eat(&token::COLON) {\n@@ -3334,7 +3326,7 @@ pub impl Parser {\n     }\n \n     fn parse_item_const(&self) -> item_info {\n-        let id = self.parse_value_ident();\n+        let id = self.parse_ident();\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n         self.expect(&token::EQ);\n@@ -3732,7 +3724,7 @@ pub impl Parser {\n                 kind = enum_variant_kind(nested_enum_def);\n                 needs_comma = false;\n             } else {\n-                ident = self.parse_value_ident();\n+                ident = self.parse_ident();\n                 if self.eat(&token::LBRACE) {\n                     // Parse a struct variant.\n                     all_nullary = false;"}]}