{"sha": "dc04aaf77747583597d1a76a9668ecdeace753ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDRhYWY3Nzc0NzU4MzU5N2QxYTc2YTk2NjhlY2RlYWNlNzUzY2E=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-30T10:55:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-30T10:55:29Z"}, "message": "Rollup merge of #55472 - ljedrz:use_option_take, r=cramertj\n\nUse opt.take() instead of mem::replace(opt, None)\n\nIt's easier to read.", "tree": {"sha": "e86fc5fd2f0e27a74ae6632d80e8a3e051a8c236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86fc5fd2f0e27a74ae6632d80e8a3e051a8c236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc04aaf77747583597d1a76a9668ecdeace753ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb2DihCRBK7hj4Ov3rIwAAdHIIAGABI3d82HYPnncGUQZdJw56\ngP4ZV7u03BaFz54E4sJZy6aBPiz24oQZuHCk3cP/TJZvwyAHbZtT77D1BARTcJ+1\nl22l/WpfPqhRUoryMQOWbYJQjSthONTU34oJdQ7nswPIfZl/BfAbYMBIQYrWwL/I\nH3IpBddzMiJhkPXdcP/KrQ+E0JQb5sIe0ptIomE6q+cI/T0I4mcdPHwL3IYtqzls\n32XbxgbpLzzAPCG/FuIHMWr9PBKrqs925BRMtr/LMAkrD67IxZwbUWChb0M66DXV\nMRChsm3DUQT9ef80SMBgSkQKzN/JLDt7gonMHBlOdQdrzys7Euf5ihMfd/KnUTo=\n=5XD6\n-----END PGP SIGNATURE-----\n", "payload": "tree e86fc5fd2f0e27a74ae6632d80e8a3e051a8c236\nparent 64417a70fccfbae81458fd8fd02af58e60d69355\nparent 2203ec38cb7fc83122be94c4c269f775e6dedb67\nauthor kennytm <kennytm@gmail.com> 1540896929 +0800\ncommitter GitHub <noreply@github.com> 1540896929 +0800\n\nRollup merge of #55472 - ljedrz:use_option_take, r=cramertj\n\nUse opt.take() instead of mem::replace(opt, None)\n\nIt's easier to read.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc04aaf77747583597d1a76a9668ecdeace753ca", "html_url": "https://github.com/rust-lang/rust/commit/dc04aaf77747583597d1a76a9668ecdeace753ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc04aaf77747583597d1a76a9668ecdeace753ca/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64417a70fccfbae81458fd8fd02af58e60d69355", "url": "https://api.github.com/repos/rust-lang/rust/commits/64417a70fccfbae81458fd8fd02af58e60d69355", "html_url": "https://github.com/rust-lang/rust/commit/64417a70fccfbae81458fd8fd02af58e60d69355"}, {"sha": "2203ec38cb7fc83122be94c4c269f775e6dedb67", "url": "https://api.github.com/repos/rust-lang/rust/commits/2203ec38cb7fc83122be94c4c269f775e6dedb67", "html_url": "https://github.com/rust-lang/rust/commit/2203ec38cb7fc83122be94c4c269f775e6dedb67"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "fc3353e339b4d77a27dbad8f0ce933cc656b44bc", "filename": "src/librustc/ty/steal.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc%2Fty%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc%2Fty%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsteal.rs?ref=dc04aaf77747583597d1a76a9668ecdeace753ca", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use rustc_data_structures::sync::{RwLock, ReadGuard, MappedReadGuard};\n-use std::mem;\n \n /// The `Steal` struct is intended to used as the value for a query.\n /// Specifically, we sometimes have queries (*cough* MIR *cough*)\n@@ -51,7 +50,7 @@ impl<T> Steal<T> {\n \n     pub fn steal(&self) -> T {\n         let value_ref = &mut *self.value.try_write().expect(\"stealing value which is locked\");\n-        let value = mem::replace(value_ref, None);\n+        let value = value_ref.take();\n         value.expect(\"attempt to read from stolen value\")\n     }\n }"}, {"sha": "9dbf0ea9f438cb19b5b5ff4970ddf45b604e73a8", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=dc04aaf77747583597d1a76a9668ecdeace753ca", "patch": "@@ -22,8 +22,6 @@\n //! If you expect to store more than 1 element in the common case, steer clear\n //! and use a `Vec<T>`, `Box<[T]>`, or a `SmallVec<T>`.\n \n-use std::mem;\n-\n #[derive(Clone, Hash, Debug, PartialEq)]\n pub struct TinyList<T: PartialEq> {\n     head: Option<Element<T>>\n@@ -52,15 +50,15 @@ impl<T: PartialEq> TinyList<T> {\n     pub fn insert(&mut self, data: T) {\n         self.head = Some(Element {\n             data,\n-            next: mem::replace(&mut self.head, None).map(Box::new),\n+            next: self.head.take().map(Box::new)\n         });\n     }\n \n     #[inline]\n     pub fn remove(&mut self, data: &T) -> bool {\n         self.head = match self.head {\n             Some(ref mut head) if head.data == *data => {\n-                mem::replace(&mut head.next, None).map(|x| *x)\n+                head.next.take().map(|x| *x)\n             }\n             Some(ref mut head) => return head.remove_next(data),\n             None => return false,\n@@ -100,7 +98,7 @@ impl<T: PartialEq> Element<T> {\n             if next.data != *data {\n                 return next.remove_next(data)\n             } else {\n-                mem::replace(&mut next.next, None)\n+                next.next.take()\n             }\n         } else {\n             return false"}, {"sha": "abbdf6d10057b6e405db6d25a42603749737ab77", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc04aaf77747583597d1a76a9668ecdeace753ca/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=dc04aaf77747583597d1a76a9668ecdeace753ca", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         }\n \n         let static_candidates = mem::replace(&mut self.static_candidates, vec![]);\n-        let private_candidate = mem::replace(&mut self.private_candidate, None);\n+        let private_candidate = self.private_candidate.take();\n         let unsatisfied_predicates = mem::replace(&mut self.unsatisfied_predicates, vec![]);\n \n         // things failed, so lets look at all traits, for diagnostic purposes now:"}]}