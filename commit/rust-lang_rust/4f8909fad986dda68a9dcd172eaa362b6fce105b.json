{"sha": "4f8909fad986dda68a9dcd172eaa362b6fce105b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODkwOWZhZDk4NmRkYTY4YTlkY2QxNzJlYWEzNjJiNmZjZTEwNWI=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-09T19:28:31Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-25T18:00:39Z"}, "message": "Extend `useless_conversion` lint with TryFrom", "tree": {"sha": "f50018f7b0d5aba59d49b238b8f912fbee4b703b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50018f7b0d5aba59d49b238b8f912fbee4b703b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8909fad986dda68a9dcd172eaa362b6fce105b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8909fad986dda68a9dcd172eaa362b6fce105b", "html_url": "https://github.com/rust-lang/rust/commit/4f8909fad986dda68a9dcd172eaa362b6fce105b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8909fad986dda68a9dcd172eaa362b6fce105b/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c41916d9bd2ca98c9291d07a095503d9e934da60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c41916d9bd2ca98c9291d07a095503d9e934da60", "html_url": "https://github.com/rust-lang/rust/commit/c41916d9bd2ca98c9291d07a095503d9e934da60"}], "stats": {"total": 132, "additions": 112, "deletions": 20}, "files": [{"sha": "0b080d9be2c060e51ece89ca6dc9fdd4aff85397", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4f8909fad986dda68a9dcd172eaa362b6fce105b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8909fad986dda68a9dcd172eaa362b6fce105b/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=4f8909fad986dda68a9dcd172eaa362b6fce105b", "patch": "@@ -1,13 +1,16 @@\n use crate::utils::{\n-    match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_sugg,\n+    is_type_diagnostic_item, match_def_path, match_trait_method, paths, same_tys, snippet, snippet_with_macro_callsite,\n+    span_lint_and_help, span_lint_and_sugg,\n };\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`/`From`/`IntoIter` calls that useless converts\n+    /// **What it does:** Checks for `Into`, `From`, `TryFrom`,`IntoIter` calls that useless converts\n     /// to the same type as caller.\n     ///\n     /// **Why is this bad?** Redundant code.\n@@ -26,7 +29,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USELESS_CONVERSION,\n     complexity,\n-    \"calls to `Into`/`From`/`IntoIter` that performs useless conversions to the same type\"\n+    \"calls to `Into`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n }\n \n #[derive(Default)]\n@@ -68,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion\",\n+                            \"Useless conversion to the same type\",\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -84,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"useless conversion\",\n+                            \"Useless conversion to the same type\",\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -94,11 +97,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n             },\n \n             ExprKind::Call(ref path, ref args) => {\n-                if let ExprKind::Path(ref qpath) = path.kind {\n-                    if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id() {\n+                if_chain! {\n+                    if args.len() == 1;\n+                    if let ExprKind::Path(ref qpath) = path.kind;\n+                    if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n+                    let a = cx.tables.expr_ty(e);\n+                    let b = cx.tables.expr_ty(&args[0]);\n+\n+                    then {\n+                        if_chain! {\n+                            if match_def_path(cx, def_id, &paths::TRY_FROM);\n+                            if is_type_diagnostic_item(cx, a, sym!(result_type));\n+                            if let ty::Adt(_, substs) = a.kind;\n+                            if let Some(a_type) = substs.types().nth(0);\n+                            if same_tys(cx, a_type, b);\n+\n+                            then {\n+                                let hint = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"TryFrom::try_from\"));\n+                                span_lint_and_help(\n+                                    cx,\n+                                    USELESS_CONVERSION,\n+                                    e.span,\n+                                    \"Useless conversion to the same type\",\n+                                    None,\n+                                    &hint,\n+                                );\n+                            }\n+                        }\n+\n                         if match_def_path(cx, def_id, &paths::FROM_FROM) {\n-                            let a = cx.tables.expr_ty(e);\n-                            let b = cx.tables.expr_ty(&args[0]);\n                             if same_tys(cx, a, b) {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n@@ -107,7 +134,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"useless conversion\",\n+                                    \"Useless conversion to the same type\",\n                                     &sugg_msg,\n                                     sugg,\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "e00d726282a4145f20c2f510c4b2d95cb62b25e6", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f8909fad986dda68a9dcd172eaa362b6fce105b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8909fad986dda68a9dcd172eaa362b6fce105b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4f8909fad986dda68a9dcd172eaa362b6fce105b", "patch": "@@ -128,6 +128,7 @@ pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"\n pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];"}, {"sha": "0b2947f7d628207f0a285f3e3c43a6297ccac849", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=4f8909fad986dda68a9dcd172eaa362b6fce105b", "patch": "@@ -1,4 +1,4 @@\n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:6:13\n    |\n LL |     let _ = T::from(val);\n@@ -10,55 +10,55 @@ note: the lint level is defined here\n LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:7:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:19:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:51:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:52:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:53:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:54:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:55:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:56:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n-error: useless conversion\n+error: Useless conversion to the same type\n   --> $DIR/useless_conversion.rs:57:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();"}, {"sha": "abf0c891b5205d4f30d3f926ebf9ac576c808824", "filename": "tests/ui/useless_conversion_try.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=4f8909fad986dda68a9dcd172eaa362b6fce105b", "patch": "@@ -0,0 +1,25 @@\n+#![deny(clippy::useless_conversion)]\n+\n+use std::convert::TryFrom;\n+\n+fn test_generic<T: Copy>(val: T) -> T {\n+    T::try_from(val).unwrap()\n+}\n+\n+fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    let _ = U::try_from(val).unwrap();\n+}\n+\n+fn main() {\n+    test_generic(10i32);\n+    test_generic2::<i32, i32>(10i32);\n+\n+    let _: String = TryFrom::try_from(\"foo\").unwrap();\n+    let _ = String::try_from(\"foo\").unwrap();\n+    #[allow(clippy::useless_conversion)]\n+    let _ = String::try_from(\"foo\").unwrap();\n+\n+    let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n+    let _ = String::try_from(\"foo\".to_string()).unwrap();\n+    let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n+}"}, {"sha": "b3cb01fbe32438e2941abfc84ee4c60ebb1f7eac", "filename": "tests/ui/useless_conversion_try.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f8909fad986dda68a9dcd172eaa362b6fce105b/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=4f8909fad986dda68a9dcd172eaa362b6fce105b", "patch": "@@ -0,0 +1,39 @@\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:6:5\n+   |\n+LL |     T::try_from(val).unwrap()\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/useless_conversion_try.rs:1:9\n+   |\n+LL | #![deny(clippy::useless_conversion)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider removing `T::try_from()`\n+\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:22:21\n+   |\n+LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `TryFrom::try_from()`\n+\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:23:13\n+   |\n+LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `String::try_from()`\n+\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:24:13\n+   |\n+LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `String::try_from()`\n+\n+error: aborting due to 4 previous errors\n+"}]}