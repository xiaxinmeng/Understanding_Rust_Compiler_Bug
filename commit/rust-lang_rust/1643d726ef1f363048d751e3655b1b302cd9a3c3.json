{"sha": "1643d726ef1f363048d751e3655b1b302cd9a3c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDNkNzI2ZWYxZjM2MzA0OGQ3NTFlMzY1NWIxYjMwMmNkOWEzYzM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-16T02:15:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-16T02:15:28Z"}, "message": "Use correct indent when formatting complex fn type (#3731)", "tree": {"sha": "82c315281e4fd78ff82928be9e6f7da89fb05625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82c315281e4fd78ff82928be9e6f7da89fb05625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1643d726ef1f363048d751e3655b1b302cd9a3c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVhHACRBK7hj4Ov3rIwAAdHIIAEbI8w547B1+3xqVsexkD4Vu\nZRFRlsL9OeOdEcmyCyKwiRHCj74UBaUnmYYyjWdPfytotXP2wdIHWLR+bNziRM6J\nonLfah6APJ0IsigEqhs2Mzx72K2UJm9Qm9u+cu1KBdRRYv0JuF//nPH6gFbOzQHz\nfP9J5Ih+8eOx3gB8BVGLKPccD4G7BlWdvRk3e/mkH/52Ep30rgS+0h6LGi+4uLF+\nPLaYdFpLUk4UDzipG7vSITw0iye7QT4P9+wqSJ4Zb9HFkqiiVMoSlReVJP/a6gWh\nRAYmihk/sJY5nMgPWnFQMWRpQmnpf0WRThFPj7srLRAqtBJjQ17zmocn4+rxFAM=\n=ZL9P\n-----END PGP SIGNATURE-----\n", "payload": "tree 82c315281e4fd78ff82928be9e6f7da89fb05625\nparent dfd27663dca6b9e0e84c04a4d7319ccf8a879909\nauthor Seiichi Uchida <seuchida@gmail.com> 1565921728 +0900\ncommitter GitHub <noreply@github.com> 1565921728 +0900\n\nUse correct indent when formatting complex fn type (#3731)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1643d726ef1f363048d751e3655b1b302cd9a3c3", "html_url": "https://github.com/rust-lang/rust/commit/1643d726ef1f363048d751e3655b1b302cd9a3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1643d726ef1f363048d751e3655b1b302cd9a3c3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd27663dca6b9e0e84c04a4d7319ccf8a879909", "html_url": "https://github.com/rust-lang/rust/commit/dfd27663dca6b9e0e84c04a4d7319ccf8a879909"}], "stats": {"total": 164, "additions": 139, "deletions": 25}, "files": [{"sha": "bdae2eaafc6d00efe52c6b2832ae30318e55bad6", "filename": "src/items.rs", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -1822,9 +1822,17 @@ impl Rewrite for ast::FunctionRetTy {\n         match *self {\n             ast::FunctionRetTy::Default(_) => Some(String::new()),\n             ast::FunctionRetTy::Ty(ref ty) => {\n-                let inner_width = shape.width.checked_sub(3)?;\n-                ty.rewrite(context, Shape::legacy(inner_width, shape.indent + 3))\n-                    .map(|r| format!(\"-> {}\", r))\n+                if context.config.version() == Version::One\n+                    || context.config.indent_style() == IndentStyle::Visual\n+                {\n+                    let inner_width = shape.width.checked_sub(3)?;\n+                    return ty\n+                        .rewrite(context, Shape::legacy(inner_width, shape.indent + 3))\n+                        .map(|r| format!(\"-> {}\", r));\n+                }\n+\n+                ty.rewrite(context, shape.offset_left(3)?)\n+                    .map(|s| format!(\"-> {}\", s))\n             }\n         }\n     }\n@@ -2147,20 +2155,39 @@ fn rewrite_fn_base(\n                 sig_length > context.config.max_width()\n             }\n         };\n-        let ret_indent = if ret_should_indent {\n-            let indent = if arg_str.is_empty() {\n-                // Aligning with non-existent args looks silly.\n-                force_new_line_for_brace = true;\n-                indent + 4\n+        let ret_shape = if ret_should_indent {\n+            if context.config.version() == Version::One\n+                || context.config.indent_style() == IndentStyle::Visual\n+            {\n+                let indent = if arg_str.is_empty() {\n+                    // Aligning with non-existent args looks silly.\n+                    force_new_line_for_brace = true;\n+                    indent + 4\n+                } else {\n+                    // FIXME: we might want to check that using the arg indent\n+                    // doesn't blow our budget, and if it does, then fallback to\n+                    // the where-clause indent.\n+                    arg_indent\n+                };\n+\n+                result.push_str(&indent.to_string_with_newline(context.config));\n+                Shape::indented(indent, context.config)\n             } else {\n-                // FIXME: we might want to check that using the arg indent\n-                // doesn't blow our budget, and if it does, then fallback to\n-                // the where-clause indent.\n-                arg_indent\n-            };\n+                let mut ret_shape = Shape::indented(indent, context.config);\n+                if arg_str.is_empty() {\n+                    // Aligning with non-existent args looks silly.\n+                    force_new_line_for_brace = true;\n+                    ret_shape = if context.use_block_indent() {\n+                        ret_shape.offset_left(4).unwrap_or(ret_shape)\n+                    } else {\n+                        ret_shape.indent = ret_shape.indent + 4;\n+                        ret_shape\n+                    };\n+                }\n \n-            result.push_str(&indent.to_string_with_newline(context.config));\n-            indent\n+                result.push_str(&ret_shape.indent.to_string_with_newline(context.config));\n+                ret_shape\n+            }\n         } else {\n             if context.config.version() == Version::Two {\n                 if !arg_str.is_empty() || !no_args_and_over_max_width {\n@@ -2170,15 +2197,16 @@ fn rewrite_fn_base(\n                 result.push(' ');\n             }\n \n-            Indent::new(indent.block_indent, last_line_width(&result))\n+            let ret_shape = Shape::indented(indent, context.config);\n+            ret_shape\n+                .offset_left(last_line_width(&result))\n+                .unwrap_or(ret_shape)\n         };\n \n         if multi_line_ret_str || ret_should_indent {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-            let ret_str = fd\n-                .output\n-                .rewrite(context, Shape::indented(ret_indent, context.config))?;\n+            let ret_str = fd.output.rewrite(context, ret_shape)?;\n             result.push_str(&ret_str);\n         } else {\n             result.push_str(&ret_str);"}, {"sha": "012cdba3192be9acfba87956d8163957e3445236", "filename": "src/types.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -6,7 +6,7 @@ use syntax::source_map::{self, BytePos, Span};\n use syntax::symbol::kw;\n \n use crate::config::lists::*;\n-use crate::config::{IndentStyle, TypeDensity};\n+use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{format_expr, rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix, ExprType};\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n@@ -678,9 +678,35 @@ impl Rewrite for ast::Ty {\n             // FIXME: we drop any comments here, even though it's a silly place to put\n             // comments.\n             ast::TyKind::Paren(ref ty) => {\n-                let budget = shape.width.checked_sub(2)?;\n-                ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n-                    .map(|ty_str| format!(\"({})\", ty_str))\n+                if context.config.version() == Version::One\n+                    || context.config.indent_style() == IndentStyle::Visual\n+                {\n+                    let budget = shape.width.checked_sub(2)?;\n+                    return ty\n+                        .rewrite(context, Shape::legacy(budget, shape.indent + 1))\n+                        .map(|ty_str| format!(\"({})\", ty_str));\n+                }\n+\n+                // 2 = ()\n+                if let Some(sh) = shape.sub_width(2) {\n+                    if let Some(ref s) = ty.rewrite(context, sh) {\n+                        if !s.contains('\\n') {\n+                            return Some(format!(\"({})\", s));\n+                        }\n+                    }\n+                }\n+\n+                let indent_str = shape.indent.to_string_with_newline(context.config);\n+                let shape = shape\n+                    .block_indent(context.config.tab_spaces())\n+                    .with_max_width(context.config);\n+                let rw = ty.rewrite(context, shape)?;\n+                Some(format!(\n+                    \"({}{}{})\",\n+                    shape.to_string_with_newline(context.config),\n+                    rw,\n+                    indent_str\n+                ))\n             }\n             ast::TyKind::Slice(ref ty) => {\n                 let budget = shape.width.checked_sub(4)?;\n@@ -716,7 +742,15 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::ImplicitSelf => Some(String::from(\"\")),\n             ast::TyKind::ImplTrait(_, ref it) => {\n                 // Empty trait is not a parser error.\n-                it.rewrite(context, shape).map(|it_str| {\n+                if it.is_empty() {\n+                    return Some(\"impl\".to_owned());\n+                }\n+                let rw = if context.config.version() == Version::One {\n+                    it.rewrite(context, shape)\n+                } else {\n+                    join_bounds(context, shape, it, false)\n+                };\n+                rw.map(|it_str| {\n                     let space = if it_str.is_empty() { \"\" } else { \" \" };\n                     format!(\"impl{}{}\", space, it_str)\n                 })\n@@ -818,7 +852,9 @@ fn join_bounds(\n     // We need to use multiple lines.\n     let (type_strs, offset) = if need_indent {\n         // Rewrite with additional indentation.\n-        let nested_shape = shape.block_indent(context.config.tab_spaces());\n+        let nested_shape = shape\n+            .block_indent(context.config.tab_spaces())\n+            .with_max_width(context.config);\n         let type_strs = items\n             .iter()\n             .map(|item| item.rewrite(context, nested_shape))"}, {"sha": "a7f0bd3aa17a4c768b1480d3320cf943f78a4e9a", "filename": "tests/source/issue-3701/one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Fsource%2Fissue-3701%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Fsource%2Fissue-3701%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3701%2Fone.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: One\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: Vec<(u8, &'static str)>,\n+) -> (impl Fn(\n+    AlphabeticalTraversal,\n+    Box<dyn dirents_sink::Sink<AlphabeticalTraversal>>,\n+) -> BoxFuture<'static, Result<Box<dyn dirents_sink::Sealed>, Status>>\n+      + Send\n+      + Sync\n+      + 'static) {\n+}"}, {"sha": "8e15c58b8b259877d44478e173f122066e75119e", "filename": "tests/source/issue-3701/two.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Fsource%2Fissue-3701%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Fsource%2Fissue-3701%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3701%2Ftwo.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: Two\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: Vec<(u8, &'static str)>,\n+) -> (impl Fn(\n+    AlphabeticalTraversal,\n+    Box<dyn dirents_sink::Sink<AlphabeticalTraversal>>,\n+) -> BoxFuture<'static, Result<Box<dyn dirents_sink::Sealed>, Status>>\n+      + Send\n+      + Sync\n+      + 'static) {\n+}"}, {"sha": "9d1ef9eed9aeda7276a5e5ba1b4e5a60aa3e762f", "filename": "tests/target/issue-3701/one.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Ftarget%2Fissue-3701%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Ftarget%2Fissue-3701%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3701%2Fone.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -0,0 +1,12 @@\n+// rustfmt-version: One\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: Vec<(u8, &'static str)>,\n+) -> (impl Fn(\n+    AlphabeticalTraversal,\n+    Box<dyn dirents_sink::Sink<AlphabeticalTraversal>>,\n+) -> BoxFuture<'static, Result<Box<dyn dirents_sink::Sealed>, Status>>\n+        + Send\n+        + Sync\n+        + 'static) {\n+}"}, {"sha": "62ffc9d823dd8584da852fa5f6fa0829b7593ce7", "filename": "tests/target/issue-3701/two.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Ftarget%2Fissue-3701%2Ftwo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643d726ef1f363048d751e3655b1b302cd9a3c3/tests%2Ftarget%2Fissue-3701%2Ftwo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3701%2Ftwo.rs?ref=1643d726ef1f363048d751e3655b1b302cd9a3c3", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-version: Two\n+\n+fn build_sorted_static_get_entry_names(\n+    mut entries: Vec<(u8, &'static str)>,\n+) -> (\n+    impl Fn(\n+        AlphabeticalTraversal,\n+        Box<dyn dirents_sink::Sink<AlphabeticalTraversal>>,\n+    ) -> BoxFuture<'static, Result<Box<dyn dirents_sink::Sealed>, Status>>\n+    + Send\n+    + Sync\n+    + 'static\n+) {\n+}"}]}