{"sha": "1f86789bb3a67c21b88c0f4050d4794de2a128ba", "node_id": "C_kwDOAAsO6NoAKDFmODY3ODliYjNhNjdjMjFiODhjMGY0MDUwZDQ3OTRkZTJhMTI4YmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-31T15:29:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-31T15:29:54Z"}, "message": "Rollup merge of #95517 - lcnr:rustc_borrowck-misc, r=jackh726\n\nsmall rustc_borrowck cleanup\n\nr? `@jackh726` because of the second commit, seems like that comment was missed in #91243", "tree": {"sha": "03bc7ae2cecaf9ed436211148558a25498399cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03bc7ae2cecaf9ed436211148558a25498399cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f86789bb3a67c21b88c0f4050d4794de2a128ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRcjyCRBK7hj4Ov3rIwAA/3QIAERXGKbpb7mSEx4/PMTHR66l\nc5dziW6U3MrjIvf0I9A9LVHbOT8YUu8EBIjw9uyZRf5X8lbfc2zBetCJ7jbXd+yD\nxg10C2N5y38Pfgb62o/IvJi1qJNeJswg2WNMunypCgSWWCT6xw7hdgqblokVnact\nhxQ2Hckc4Gg6XdKQqvozyfqEhL8h0HqYPc/1OZ1CYvGl5jiWdclMW0GYKi3fy0d2\nt1BD+q5IiAQAeSaV3BtxM5SwUffsN4vblX+Q+Xx+QxyCZUXZQpaJ7o0TdALbEEre\nqsbWX5QqqF30ZaGmaShDgZqREwRsdykprp0rQL83RDmKNoZJ6IO8m4sAf9i5vmY=\n=DMRg\n-----END PGP SIGNATURE-----\n", "payload": "tree 03bc7ae2cecaf9ed436211148558a25498399cd8\nparent eb0e8c3418fd4f89743b5b12c84e4f683748ea1a\nparent 89c66eb42d385975c91d79de139b50c298414d71\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648740594 +0200\ncommitter GitHub <noreply@github.com> 1648740594 +0200\n\nRollup merge of #95517 - lcnr:rustc_borrowck-misc, r=jackh726\n\nsmall rustc_borrowck cleanup\n\nr? `@jackh726` because of the second commit, seems like that comment was missed in #91243\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f86789bb3a67c21b88c0f4050d4794de2a128ba", "html_url": "https://github.com/rust-lang/rust/commit/1f86789bb3a67c21b88c0f4050d4794de2a128ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f86789bb3a67c21b88c0f4050d4794de2a128ba/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0e8c3418fd4f89743b5b12c84e4f683748ea1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0e8c3418fd4f89743b5b12c84e4f683748ea1a", "html_url": "https://github.com/rust-lang/rust/commit/eb0e8c3418fd4f89743b5b12c84e4f683748ea1a"}, {"sha": "89c66eb42d385975c91d79de139b50c298414d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c66eb42d385975c91d79de139b50c298414d71", "html_url": "https://github.com/rust-lang/rust/commit/89c66eb42d385975c91d79de139b50c298414d71"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "f8439d2e163559f5c51faa2364f18c15b2dc1aed", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=1f86789bb3a67c21b88c0f4050d4794de2a128ba", "patch": "@@ -253,8 +253,10 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n-                // We add implied bounds from both the unnormalized and normalized ty\n-                // See issue #87748\n+                // We only add implied bounds for the normalized type as the unnormalized\n+                // type may not actually get checked by the caller.\n+                //\n+                // Can otherwise be unsound, see #91068.\n                 let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))"}, {"sha": "e9fa33f656f31006b12a39d0536091830056e4f6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=1f86789bb3a67c21b88c0f4050d4794de2a128ba", "patch": "@@ -1899,7 +1899,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     ObligationCause::new(\n                                         span,\n                                         self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                        traits::ObligationCauseCode::RepeatVec(is_const_fn),\n+                                        traits::ObligationCauseCode::RepeatElementCopy {\n+                                            is_const_fn,\n+                                        },\n                                     ),\n                                     self.param_env,\n                                     ty::Binder::dummy(ty::TraitRef::new("}, {"sha": "1f18260d9154f52929ea480d70e87dcbfeca8af3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1f86789bb3a67c21b88c0f4050d4794de2a128ba", "patch": "@@ -236,11 +236,12 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n-    /// `[T, ..n]` implies that `T` must be `Copy`.\n-    /// If the function in the array repeat expression is a `const fn`,\n-    /// display a help message suggesting to move the function call to a\n-    /// new `const` item while saying that `T` doesn't implement `Copy`.\n-    RepeatVec(bool),\n+    /// `[expr; N]` requires `type_of(expr): Copy`.\n+    RepeatElementCopy {\n+        /// If element is a `const fn` we display a help message suggesting to move the\n+        /// function call to a new `const` item while saying that `T` doesn't implement `Copy`.\n+        is_const_fn: bool,\n+    },\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {"}, {"sha": "72b597bb13d29caa22e322184925da867738a2d0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=1f86789bb3a67c21b88c0f4050d4794de2a128ba", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let kind = match pat.kind {\n             hir::PatKind::Wild => PatKind::Wild,\n \n-            hir::PatKind::Lit(ref value) => self.lower_lit(value),\n+            hir::PatKind::Lit(value) => self.lower_lit(value),\n \n             hir::PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n                 let (lo_expr, hi_expr) = (lo_expr.as_deref(), hi_expr.as_deref());"}, {"sha": "58e002b3360818382bdc4363bf0d410fbbb8bc6b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f86789bb3a67c21b88c0f4050d4794de2a128ba/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1f86789bb3a67c21b88c0f4050d4794de2a128ba", "patch": "@@ -1988,7 +1988,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec(is_const_fn) => {\n+            ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );"}]}