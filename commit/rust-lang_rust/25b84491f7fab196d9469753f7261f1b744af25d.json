{"sha": "25b84491f7fab196d9469753f7261f1b744af25d", "node_id": "C_kwDOAAsO6NoAKDI1Yjg0NDkxZjdmYWIxOTZkOTQ2OTc1M2Y3MjYxZjFiNzQ0YWYyNWQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-22T06:16:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-22T06:16:11Z"}, "message": "Rollup merge of #97516 - RalfJung:atomics, r=joshtriplett\n\nclarify how Rust atomics correspond to C++ atomics\n\n``@cbeuw`` noted in https://github.com/rust-lang/miri/pull/1963 that the correspondence between C++ atomics and Rust atomics is not quite as obvious as one might think, since in Rust I can use `get_mut` to treat previously non-atomic data as atomic. However, I think using C++20 `atomic_ref`, we can establish a suitable relation between the two -- or do you see problems with that ``@cbeuw?`` (I recall you said there was some issue, but it was deep inside that PR and Github makes it impossible to find...)\n\nCc ``@thomcc;`` not sure whom else to ping for atomic memory model things.", "tree": {"sha": "364fa5a221f5e10dc313baeb4d4d8ca98b7239a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/364fa5a221f5e10dc313baeb4d4d8ca98b7239a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b84491f7fab196d9469753f7261f1b744af25d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisrOrCRBK7hj4Ov3rIwAAfC4IAKRqwLUJv4YnthW8CFwOIFmk\n3ipE2qH/BjWuLEpMWtQ5ouhcK6iGHDD1arNkDdfMh2K8IAHsOgP8Z6p2lPd96K7c\n3t+uLjdsW1GqzPzlU5WUolVVg8Nwm3mvPwEg5ZrPelGoynfKi5KH24LnRuZfkPG3\nlzfKjHPNsDvifvtInz37z9WWhkcfTZqDSypcCPqXTbvIZNyhHhp8DKJq5IW49cWl\nWYubkZFgyOPlv5gab4ZKkwexj6P5o2j/lSRWVelZpydPRCeOrcAcs3SiwUIGpoRu\ncdjFtt7q7PMXKyCHe5dIA/QWGMzKjGZc15m1X08bSzCuHZ7ZTDhAK4e45/+khI0=\n=jROa\n-----END PGP SIGNATURE-----\n", "payload": "tree 364fa5a221f5e10dc313baeb4d4d8ca98b7239a3\nparent 75a2e5dddd024f3ed98b9c479114782b0b049aa3\nparent 4768bfc6ef34de2c2591c96286a958bcd5b40c80\nauthor Yuki Okushi <jtitor@2k36.org> 1655878571 +0900\ncommitter GitHub <noreply@github.com> 1655878571 +0900\n\nRollup merge of #97516 - RalfJung:atomics, r=joshtriplett\n\nclarify how Rust atomics correspond to C++ atomics\n\n``@cbeuw`` noted in https://github.com/rust-lang/miri/pull/1963 that the correspondence between C++ atomics and Rust atomics is not quite as obvious as one might think, since in Rust I can use `get_mut` to treat previously non-atomic data as atomic. However, I think using C++20 `atomic_ref`, we can establish a suitable relation between the two -- or do you see problems with that ``@cbeuw?`` (I recall you said there was some issue, but it was deep inside that PR and Github makes it impossible to find...)\n\nCc ``@thomcc;`` not sure whom else to ping for atomic memory model things.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b84491f7fab196d9469753f7261f1b744af25d", "html_url": "https://github.com/rust-lang/rust/commit/25b84491f7fab196d9469753f7261f1b744af25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b84491f7fab196d9469753f7261f1b744af25d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a2e5dddd024f3ed98b9c479114782b0b049aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a2e5dddd024f3ed98b9c479114782b0b049aa3", "html_url": "https://github.com/rust-lang/rust/commit/75a2e5dddd024f3ed98b9c479114782b0b049aa3"}, {"sha": "4768bfc6ef34de2c2591c96286a958bcd5b40c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4768bfc6ef34de2c2591c96286a958bcd5b40c80", "html_url": "https://github.com/rust-lang/rust/commit/4768bfc6ef34de2c2591c96286a958bcd5b40c80"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "a66ecc35bbdb105290b517430b7840056eeb1ac2", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25b84491f7fab196d9469753f7261f1b744af25d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b84491f7fab196d9469753f7261f1b744af25d/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=25b84491f7fab196d9469753f7261f1b744af25d", "patch": "@@ -4,6 +4,12 @@\n //! threads, and are the building blocks of other concurrent\n //! types.\n //!\n+//! Rust atomics currently follow the same rules as [C++20 atomics][cpp], specifically `atomic_ref`.\n+//! Basically, creating a *shared reference* to one of the Rust atomic types corresponds to creating\n+//! an `atomic_ref` in C++; the `atomic_ref` is destroyed when the lifetime of the shared reference\n+//! ends. (A Rust atomic type that is exclusively owned or behind a mutable reference does *not*\n+//! correspond to an \"atomic object\" in C++, since it can be accessed via non-atomic operations.)\n+//!\n //! This module defines atomic versions of a select number of primitive\n //! types, including [`AtomicBool`], [`AtomicIsize`], [`AtomicUsize`],\n //! [`AtomicI8`], [`AtomicU16`], etc.\n@@ -14,6 +20,7 @@\n //! the memory barrier for that operation. These orderings are the\n //! same as the [C++20 atomic orderings][1]. For more information see the [nomicon][2].\n //!\n+//! [cpp]: https://en.cppreference.com/w/cpp/atomic\n //! [1]: https://en.cppreference.com/w/cpp/atomic/memory_order\n //! [2]: ../../../nomicon/atomics.html\n //!"}]}