{"sha": "2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjViZWQ5YjE1NTJhOGFmNThmYjNmZTIxZDhkYjY5YTYxMTRhMTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T21:20:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T21:20:15Z"}, "message": "remove some `#[inline(never)]`", "tree": {"sha": "f9ec5b436e7899a53d66018224e300e239cd56c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ec5b436e7899a53d66018224e300e239cd56c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "html_url": "https://github.com/rust-lang/rust/commit/2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9240025afa161d0fc739ffad861ffed9f0ce417e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9240025afa161d0fc739ffad861ffed9f0ce417e", "html_url": "https://github.com/rust-lang/rust/commit/9240025afa161d0fc739ffad861ffed9f0ce417e"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "0eeacda467e03336ceac4d643d01beeae507ba7d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "patch": "@@ -470,7 +470,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.inferred_values = Some(inferred_values);\n     }\n \n-    #[inline(never)] // ensure dfs is identifiable in profiles\n     fn compute_region_values(&self, _mir: &Mir<'tcx>) -> RegionValues {\n         debug!(\"compute_region_values()\");\n         debug!(\"compute_region_values: constraints={:#?}\", {\n@@ -521,7 +520,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// indices of constraints that need to be re-evaluated when X changes.\n     /// These are constraints like Y: X @ P -- so if X changed, we may\n     /// need to grow Y.\n-    #[inline(never)] // ensure dfs is identifiable in profiles\n     fn build_dependency_map(&mut self) -> IndexVec<RegionVid, Option<ConstraintIndex>> {\n         let mut map = IndexVec::from_elem(None, &self.definitions);\n "}, {"sha": "d44eed65201cd91112c3ed96ffd607a9a6b8875f", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "patch": "@@ -32,7 +32,6 @@ use rustc_data_structures::indexed_vec::Idx;\n use super::{Locations, TypeChecker};\n \n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n-    #[inline(never)]\n     pub(super) fn equate_inputs_and_outputs(\n         &mut self,\n         mir: &Mir<'tcx>,"}, {"sha": "80f5fe4184f9db508757dd51fd05f566fce0d1f1", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "patch": "@@ -182,7 +182,6 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n     /// the regions in its type must be live at `location`. The\n     /// precise set will depend on the dropck constraints, and in\n     /// particular this takes `#[may_dangle]` into account.\n-    #[inline(never)]\n     fn add_drop_live_constraint(\n         &mut self,\n         dropped_local: Local,\n@@ -212,7 +211,6 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n         }\n     }\n \n-    #[inline(never)]\n     fn compute_drop_data(\n         cx: &mut TypeChecker<'_, 'gcx, 'tcx>,\n         dropped_ty: Ty<'tcx>,"}, {"sha": "d25cec7979140cdee49791fcfd523fe1c72bdfb6", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e25bed9b1552a8af58fb3fe21d8db69a6114a18/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2e25bed9b1552a8af58fb3fe21d8db69a6114a18", "patch": "@@ -774,7 +774,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     /// obligations. If the same `op` were to be performed at some\n     /// other location, then the same set of region obligations would\n     /// be generated there, so this can be useful for caching.\n-    #[inline(never)]\n     fn fully_perform_op_and_get_region_constraint_data<R>(\n         &mut self,\n         describe_op: impl Fn() -> String,\n@@ -811,7 +810,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    #[inline(never)]\n     fn sub_types(\n         &mut self,\n         sub: Ty<'tcx>,\n@@ -834,7 +832,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         )\n     }\n \n-    #[inline(never)]\n     fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> UnitResult<'tcx> {\n         // Micro-optimization.\n         if a == b {\n@@ -1605,7 +1602,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n     }\n \n-    #[inline(never)]\n     fn prove_predicates<T>(&mut self, predicates: T, location: Location)\n     where\n         T: IntoIterator<Item = ty::Predicate<'tcx>> + Clone,\n@@ -1674,7 +1670,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    #[inline(never)]\n     fn normalize<T>(&mut self, value: &T, location: impl ToLocations) -> T\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,"}]}