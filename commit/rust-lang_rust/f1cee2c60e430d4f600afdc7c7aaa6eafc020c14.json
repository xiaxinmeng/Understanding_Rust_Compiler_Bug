{"sha": "f1cee2c60e430d4f600afdc7c7aaa6eafc020c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxY2VlMmM2MGU0MzBkNGY2MDBhZmRjN2M3YWFhNmVhZmMwMjBjMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T22:45:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-03T22:45:14Z"}, "message": "Auto merge of #85867 - steffahn:remove_unnecessary_specfromiter_impls, r=Mark-Simulacrum\n\nRemove unnecessary SpecFromIter impls\n\nUnless I\u2019m missing something, these `SpecFromIter<&'a T, \u2026> for Vec<T>` implementations were completely unused.", "tree": {"sha": "9d0fd1747e509f2a6cb52ca3ca6a2f1401b089eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0fd1747e509f2a6cb52ca3ca6a2f1401b089eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14", "html_url": "https://github.com/rust-lang/rust/commit/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc77ba46fcb2d288aa01554b48cd586c5827c3dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc77ba46fcb2d288aa01554b48cd586c5827c3dd", "html_url": "https://github.com/rust-lang/rust/commit/cc77ba46fcb2d288aa01554b48cd586c5827c3dd"}, {"sha": "5ea3e733cbd2e4810e00c3e7420d1019456b8970", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3e733cbd2e4810e00c3e7420d1019456b8970", "html_url": "https://github.com/rust-lang/rust/commit/5ea3e733cbd2e4810e00c3e7420d1019456b8970"}], "stats": {"total": 35, "additions": 1, "deletions": 34}, "files": [{"sha": "efa6868473e49844bb8b4fabe299f840f5f19ad3", "filename": "library/alloc/src/vec/spec_from_iter.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1cee2c60e430d4f600afdc7c7aaa6eafc020c14/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs?ref=f1cee2c60e430d4f600afdc7c7aaa6eafc020c14", "patch": "@@ -1,6 +1,5 @@\n use core::mem::ManuallyDrop;\n use core::ptr::{self};\n-use core::slice::{self};\n \n use super::{IntoIter, SpecExtend, SpecFromIterNested, Vec};\n \n@@ -19,9 +18,7 @@ use super::{IntoIter, SpecExtend, SpecFromIterNested, Vec};\n /// |where I:                      |  |  |where I:             |\n /// |  Iterator (default)----------+  |  |  Iterator (default) |\n /// |  vec::IntoIter               |  |  |  TrustedLen         |\n-/// |  SourceIterMarker---fallback-+  |  |                     |\n-/// |  slice::Iter                    |  |                     |\n-/// |  Iterator<Item = &Clone>        |  +---------------------+\n+/// |  SourceIterMarker---fallback-+  |  +---------------------+\n /// +---------------------------------+\n /// ```\n pub(super) trait SpecFromIter<T, I> {\n@@ -65,33 +62,3 @@ impl<T> SpecFromIter<T, IntoIter<T>> for Vec<T> {\n         vec\n     }\n }\n-\n-impl<'a, T: 'a, I> SpecFromIter<&'a T, I> for Vec<T>\n-where\n-    I: Iterator<Item = &'a T>,\n-    T: Clone,\n-{\n-    default fn from_iter(iterator: I) -> Self {\n-        SpecFromIter::from_iter(iterator.cloned())\n-    }\n-}\n-\n-// This utilizes `iterator.as_slice().to_vec()` since spec_extend\n-// must take more steps to reason about the final capacity + length\n-// and thus do more work. `to_vec()` directly allocates the correct amount\n-// and fills it exactly.\n-impl<'a, T: 'a + Clone> SpecFromIter<&'a T, slice::Iter<'a, T>> for Vec<T> {\n-    #[cfg(not(test))]\n-    fn from_iter(iterator: slice::Iter<'a, T>) -> Self {\n-        iterator.as_slice().to_vec()\n-    }\n-\n-    // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is\n-    // required for this method definition, is not available. Instead use the\n-    // `slice::to_vec`  function which is only available with cfg(test)\n-    // NB see the slice::hack module in slice.rs for more information\n-    #[cfg(test)]\n-    fn from_iter(iterator: slice::Iter<'a, T>) -> Self {\n-        crate::slice::to_vec(iterator.as_slice(), crate::alloc::Global)\n-    }\n-}"}]}