{"sha": "a12e8394d7ec0677914749de18b56eb2a925bc3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmU4Mzk0ZDdlYzA2Nzc5MTQ3NDlkZTE4YjU2ZWIyYTkyNWJjM2Q=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-06-29T23:00:25Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-06-29T23:00:25Z"}, "message": "new lint: double_neg", "tree": {"sha": "e0b6c71b721ad902498f1eca52c65045989f3f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b6c71b721ad902498f1eca52c65045989f3f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12e8394d7ec0677914749de18b56eb2a925bc3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12e8394d7ec0677914749de18b56eb2a925bc3d", "html_url": "https://github.com/rust-lang/rust/commit/a12e8394d7ec0677914749de18b56eb2a925bc3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12e8394d7ec0677914749de18b56eb2a925bc3d/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e3fa8f4947b6b0a93f098c277731a42d452d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e3fa8f4947b6b0a93f098c277731a42d452d7e", "html_url": "https://github.com/rust-lang/rust/commit/d6e3fa8f4947b6b0a93f098c277731a42d452d7e"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "fece611c1dac772002e5bbaf858456f26e4de84e", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a12e8394d7ec0677914749de18b56eb2a925bc3d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a12e8394d7ec0677914749de18b56eb2a925bc3d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a12e8394d7ec0677914749de18b56eb2a925bc3d", "patch": "@@ -2,7 +2,7 @@\n All notable changes to this project will be documented in this file.\n \n ## 0.0.78 - TBA\n-* New lints: [`wrong_transmute`]\n+* New lints: [`wrong_transmute`, `double_neg`]\n * For compatibility, `cargo clippy` does not defines the `clippy` feature\n   introduced in 0.0.76 anymore\n * [`collapsible_if`] now considers `if let`\n@@ -153,6 +153,7 @@ All notable changes to this project will be documented in this file.\n [`deprecated_semver`]: https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver\n [`derive_hash_xor_eq`]: https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq\n [`doc_markdown`]: https://github.com/Manishearth/rust-clippy/wiki#doc_markdown\n+[`double_neg`]: https://github.com/Manishearth/rust-clippy/wiki#double_neg\n [`drop_ref`]: https://github.com/Manishearth/rust-clippy/wiki#drop_ref\n [`duplicate_underscore_argument`]: https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument\n [`empty_loop`]: https://github.com/Manishearth/rust-clippy/wiki#empty_loop"}, {"sha": "4aa18838718563757938c1b6d3d22e9d3637a372", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a12e8394d7ec0677914749de18b56eb2a925bc3d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a12e8394d7ec0677914749de18b56eb2a925bc3d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a12e8394d7ec0677914749de18b56eb2a925bc3d", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 156 lints included in this crate:\n+There are 157 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -49,6 +49,7 @@ name\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n [doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of `_`, `::` or camel-case outside ticks in documentation\n+[double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                             | warn    | --x is a double negation of x and not a pre-decrement as in C or C++\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected"}, {"sha": "040096dcbb4b9d628cf00ec13fb37b64da40fd4a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12e8394d7ec0677914749de18b56eb2a925bc3d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e8394d7ec0677914749de18b56eb2a925bc3d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a12e8394d7ec0677914749de18b56eb2a925bc3d", "patch": "@@ -369,6 +369,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc::MODULO_ONE,\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n+        misc_early::DOUBLE_NEG,\n         misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,"}, {"sha": "9275af3f12ad8d3f369e5bae5bf0ad29545c030e", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a12e8394d7ec0677914749de18b56eb2a925bc3d/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e8394d7ec0677914749de18b56eb2a925bc3d/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=a12e8394d7ec0677914749de18b56eb2a925bc3d", "patch": "@@ -40,12 +40,25 @@ declare_lint! {\n     \"Closures should not be called in the expression they are defined\"\n }\n \n+/// **What it does:** This lint detects expressions of the form `--x`\n+///\n+/// **Why is this bad?** It can mislead C/C++ programmers to think `x` was decremented.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `--x;`\n+declare_lint! {\n+    pub DOUBLE_NEG, Warn,\n+    \"--x is a double negation of x and not a pre-decrement as in C or C++\"\n+}\n+\n+\n #[derive(Copy, Clone)]\n pub struct MiscEarly;\n \n impl LintPass for MiscEarly {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT, REDUNDANT_CLOSURE_CALL)\n+        lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT, REDUNDANT_CLOSURE_CALL, DOUBLE_NEG)\n     }\n }\n \n@@ -126,21 +139,32 @@ impl EarlyLintPass for MiscEarly {\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n-        if let ExprKind::Call(ref paren, _) = expr.node {\n-            if let ExprKind::Paren(ref closure) = paren.node {\n-                if let ExprKind::Closure(_, ref decl, ref block, _) = closure.node {\n-                    span_lint_and_then(cx,\n-                                       REDUNDANT_CLOSURE_CALL,\n-                                       expr.span,\n-                                       \"Try not to call a closure in the expression where it is declared.\",\n-                                       |db| {\n-                                           if decl.inputs.is_empty() {\n-                                               let hint = format!(\"{}\", snippet(cx, block.span, \"..\"));\n-                                               db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n-                                           }\n-                                       });\n+        match expr.node {\n+            ExprKind::Call(ref paren, _) => {\n+                if let ExprKind::Paren(ref closure) = paren.node {\n+                    if let ExprKind::Closure(_, ref decl, ref block, _) = closure.node {\n+                        span_lint_and_then(cx,\n+                                           REDUNDANT_CLOSURE_CALL,\n+                                           expr.span,\n+                                           \"Try not to call a closure in the expression where it is declared.\",\n+                                           |db| {\n+                                               if decl.inputs.is_empty() {\n+                                                   let hint = format!(\"{}\", snippet(cx, block.span, \"..\"));\n+                                                   db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                                               }\n+                                           });\n+                    }\n                 }\n             }\n+            ExprKind::Unary(UnOp::Neg, ref inner) => {\n+                if let ExprKind::Unary(UnOp::Neg, _) = inner.node {\n+                    span_lint(cx,\n+                              DOUBLE_NEG,\n+                              expr.span,\n+                              \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\");\n+    }\n+            }\n+            _ => ()\n         }\n     }\n "}, {"sha": "790ca93728bac6043f026d442fc264d572407aeb", "filename": "tests/compile-fail/double_neg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a12e8394d7ec0677914749de18b56eb2a925bc3d/tests%2Fcompile-fail%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12e8394d7ec0677914749de18b56eb2a925bc3d/tests%2Fcompile-fail%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdouble_neg.rs?ref=a12e8394d7ec0677914749de18b56eb2a925bc3d", "patch": "@@ -0,0 +1,10 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(double_neg)]\n+fn main() {\n+    let x = 1;\n+    -x;\n+    -(-x);\n+    --x; //~ERROR: `--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\n+}"}]}