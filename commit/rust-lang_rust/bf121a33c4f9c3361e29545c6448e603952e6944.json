{"sha": "bf121a33c4f9c3361e29545c6448e603952e6944", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMTIxYTMzYzRmOWMzMzYxZTI5NTQ1YzY0NDhlNjAzOTUyZTY5NDQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-19T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-22T18:32:45Z"}, "message": "Create sanitizer passes in a separate function", "tree": {"sha": "78167d94c747eca7c51996da4682683aef21b668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78167d94c747eca7c51996da4682683aef21b668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf121a33c4f9c3361e29545c6448e603952e6944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf121a33c4f9c3361e29545c6448e603952e6944", "html_url": "https://github.com/rust-lang/rust/commit/bf121a33c4f9c3361e29545c6448e603952e6944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf121a33c4f9c3361e29545c6448e603952e6944/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5141aa36f670ddd04fa281281435a42e153222be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5141aa36f670ddd04fa281281435a42e153222be", "html_url": "https://github.com/rust-lang/rust/commit/5141aa36f670ddd04fa281281435a42e153222be"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "6cc7b0b4b1e42d77ecb3e69c4c296c432e2189eb", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bf121a33c4f9c3361e29545c6448e603952e6944/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf121a33c4f9c3361e29545c6448e603952e6944/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=bf121a33c4f9c3361e29545c6448e603952e6944", "patch": "@@ -363,26 +363,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 }\n             }\n \n-            if let Some(sanitizer) = &config.sanitizer {\n-                let recover = config.sanitizer_recover.contains(sanitizer);\n-                match sanitizer {\n-                    Sanitizer::Address => {\n-                        extra_passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(\n-                                recover));\n-                        extra_passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(\n-                                recover));\n-                    }\n-                    Sanitizer::Memory => {\n-                        let track_origins = config.sanitizer_memory_track_origins as c_int;\n-                        extra_passes.push(llvm::LLVMRustCreateMemorySanitizerPass(\n-                                track_origins, recover));\n-                    }\n-                    Sanitizer::Thread => {\n-                        extra_passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n-                    }\n-                    _ => {}\n-                }\n-            }\n+            add_sanitizer_passes(config, &mut extra_passes);\n \n             for pass_name in &cgcx.plugin_passes {\n                 if let Some(pass) = find_pass(pass_name) {\n@@ -469,6 +450,31 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     Ok(())\n }\n \n+unsafe fn add_sanitizer_passes(config: &ModuleConfig,\n+                               passes: &mut Vec<&'static mut llvm::Pass>) {\n+\n+    let sanitizer = match &config.sanitizer {\n+        None => return,\n+        Some(s) => s,\n+    };\n+\n+    let recover = config.sanitizer_recover.contains(sanitizer);\n+    match sanitizer {\n+        Sanitizer::Address => {\n+            passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n+            passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n+        }\n+        Sanitizer::Memory => {\n+            let track_origins = config.sanitizer_memory_track_origins as c_int;\n+            passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n+        }\n+        Sanitizer::Thread => {\n+            passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n+        }\n+        Sanitizer::Leak => {}\n+    }\n+}\n+\n pub(crate) unsafe fn codegen(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                   diag_handler: &Handler,\n                   module: ModuleCodegen<ModuleLlvm>,"}]}