{"sha": "9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "node_id": "C_kwDOAAsO6NoAKDlhMWVjNDUxZDNjOGM2YmVkMDYyZWUwMDJiNWM2MTNkNjRjYTFlY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T15:30:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-27T15:30:03Z"}, "message": "Auto merge of #12890 - Veykril:syntax-blocks, r=Veykril\n\ninternal: Assume condition/iterable is missing if there is only a BlockExpr\n\ncc https://github.com/rust-lang/rust-analyzer/pull/12880#issuecomment-1195567103\n\nIt sounds good on paper, so let's try it", "tree": {"sha": "3c22bfb3368e47be42b793dfc26f9a424957c58e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c22bfb3368e47be42b793dfc26f9a424957c58e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "html_url": "https://github.com/rust-lang/rust/commit/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4d652aa40911640c137314e97ca99557cd44df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d652aa40911640c137314e97ca99557cd44df5", "html_url": "https://github.com/rust-lang/rust/commit/b4d652aa40911640c137314e97ca99557cd44df5"}, {"sha": "bf893d59b54eb3b0dd3bcf34a66f9f0703753ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf893d59b54eb3b0dd3bcf34a66f9f0703753ffb", "html_url": "https://github.com/rust-lang/rust/commit/bf893d59b54eb3b0dd3bcf34a66f9f0703753ffb"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "63309a155219e55ebec99bcfd3b416ede648df38", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "patch": "@@ -880,7 +880,6 @@ impl ForExpr {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn in_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![in]) }\n-    pub fn iterable(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -890,7 +889,6 @@ pub struct IfExpr {\n impl ast::HasAttrs for IfExpr {}\n impl IfExpr {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n-    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn else_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![else]) }\n }\n \n@@ -1051,7 +1049,6 @@ pub struct WhileExpr {\n impl ast::HasAttrs for WhileExpr {}\n impl WhileExpr {\n     pub fn while_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![while]) }\n-    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1170,7 +1167,6 @@ pub struct MatchGuard {\n }\n impl MatchGuard {\n     pub fn if_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![if]) }\n-    pub fn condition(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "bb92c51e9a90ed766bce24344f8ddeeb2337ed8c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "patch": "@@ -806,6 +806,19 @@ impl ast::GenericParamList {\n     }\n }\n \n+impl ast::ForExpr {\n+    pub fn iterable(&self) -> Option<ast::Expr> {\n+        // If the iterable is a BlockExpr, check if the body is missing.\n+        // If it is assume the iterable is the expression that is missing instead.\n+        let mut exprs = support::children(self.syntax());\n+        let first = exprs.next();\n+        match first {\n+            Some(ast::Expr::BlockExpr(_)) => exprs.next().and(first),\n+            first => first,\n+        }\n+    }\n+}\n+\n impl ast::HasLoopBody for ast::ForExpr {\n     fn loop_body(&self) -> Option<ast::BlockExpr> {\n         let mut exprs = support::children(self.syntax());\n@@ -815,6 +828,19 @@ impl ast::HasLoopBody for ast::ForExpr {\n     }\n }\n \n+impl ast::WhileExpr {\n+    pub fn condition(&self) -> Option<ast::Expr> {\n+        // If the condition is a BlockExpr, check if the body is missing.\n+        // If it is assume the condition is the expression that is missing instead.\n+        let mut exprs = support::children(self.syntax());\n+        let first = exprs.next();\n+        match first {\n+            Some(ast::Expr::BlockExpr(_)) => exprs.next().and(first),\n+            first => first,\n+        }\n+    }\n+}\n+\n impl ast::HasLoopBody for ast::WhileExpr {\n     fn loop_body(&self) -> Option<ast::BlockExpr> {\n         let mut exprs = support::children(self.syntax());\n@@ -835,3 +861,15 @@ impl From<ast::Adt> for ast::Item {\n         }\n     }\n }\n+\n+impl ast::IfExpr {\n+    pub fn condition(&self) -> Option<ast::Expr> {\n+        support::child(&self.syntax)\n+    }\n+}\n+\n+impl ast::MatchGuard {\n+    pub fn condition(&self) -> Option<ast::Expr> {\n+        support::child(&self.syntax)\n+    }\n+}"}, {"sha": "6d2766225103f7b0aa2406a99939031a973b7274", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=9a1ec451d3c8c6bed062ee002b5c613d64ca1ecd", "patch": "@@ -682,6 +682,8 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, r\n                     | \"value\"\n                     | \"trait\"\n                     | \"self_ty\"\n+                    | \"iterable\"\n+                    | \"condition\"\n             );\n             if manually_implemented {\n                 return;"}]}