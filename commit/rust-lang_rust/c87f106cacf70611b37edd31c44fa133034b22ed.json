{"sha": "c87f106cacf70611b37edd31c44fa133034b22ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4N2YxMDZjYWNmNzA2MTFiMzdlZGQzMWM0NGZhMTMzMDM0YjIyZWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-24T08:23:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-24T08:27:14Z"}, "message": "update comments and some tweaks", "tree": {"sha": "6b530886b8372c356065462837c58c26834f290a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b530886b8372c356065462837c58c26834f290a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87f106cacf70611b37edd31c44fa133034b22ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87f106cacf70611b37edd31c44fa133034b22ed", "html_url": "https://github.com/rust-lang/rust/commit/c87f106cacf70611b37edd31c44fa133034b22ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87f106cacf70611b37edd31c44fa133034b22ed/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9340113efcf5c7bea4a143f42c8ea47da4550e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9340113efcf5c7bea4a143f42c8ea47da4550e", "html_url": "https://github.com/rust-lang/rust/commit/cf9340113efcf5c7bea4a143f42c8ea47da4550e"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "dd0530cf48b4e7970dbed0f3fdb681ca004879b9", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=c87f106cacf70611b37edd31c44fa133034b22ed", "patch": "@@ -379,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 _ => throw_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n             })?\n         } else {\n-            // FIXME: we have to implement the windows' equivalent of this.\n+            // FIXME: we have to implement the Windows equivalent of this.\n             throw_unsup_format!(\"Setting the last OS error from an io::Error is unsupported for {}.\", target.target_os)\n         };\n         this.set_last_error(last_error)\n@@ -390,7 +390,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// `Ok(-1)` and sets the last OS error accordingly.\n     ///\n     /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n+    /// functions return different integer types (like `read`, that returns an `i64`).\n     fn try_unwrap_io_result<T: From<i32>>(\n         &mut self,\n         result: std::io::Result<T>,\n@@ -423,11 +423,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, bool> {\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n-        // terminator to memory using the `ptr` pointer would cause an overflow.\n+        // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n         if size <= bytes.len() as u64 {\n             return Ok(false);\n         }\n-        // FIXME: We should use `Iterator::chain` instead when rust-lang/rust#65704 lands.\n         self.eval_context_mut().memory.write_bytes(scalar, bytes.iter().copied().chain(iter::once(0u8)))?;\n         Ok(true)\n     }"}, {"sha": "a60bc8c0b13d16df1c81d4c0f8166e0d9d985d99", "filename": "src/operator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=c87f106cacf70611b37edd31c44fa133034b22ed", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryFrom;\n+\n use rustc::ty::{Ty, layout::LayoutOf};\n use rustc::mir;\n \n@@ -117,8 +119,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         pointee_ty: Ty<'tcx>,\n         offset: i64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n-        // FIXME: assuming here that type size is less than `i64::max_value()`.\n-        let pointee_size = self.layout_of(pointee_ty)?.size.bytes() as i64;\n+        let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n         let offset = offset\n             .checked_mul(pointee_size)\n             .ok_or_else(|| err_panic!(Overflow(mir::BinOp::Mul)))?;"}, {"sha": "c484795d8fec71773ddb71c79b71afa982d0bc78", "filename": "src/shims/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87f106cacf70611b37edd31c44fa133034b22ed/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=c87f106cacf70611b37edd31c44fa133034b22ed", "patch": "@@ -95,7 +95,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path: std::path::PathBuf = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?.into();\n+        let path = this.read_os_string_from_c_string(this.read_scalar(path_op)?.not_undef()?)?;\n \n         let fd = options.open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;"}]}