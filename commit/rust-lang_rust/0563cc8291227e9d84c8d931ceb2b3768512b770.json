{"sha": "0563cc8291227e9d84c8d931ceb2b3768512b770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NjNjYzgyOTEyMjdlOWQ4NGM4ZDkzMWNlYjJiMzc2ODUxMmI3NzA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-05T20:32:08Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-05T20:32:08Z"}, "message": "fix regression from #3451", "tree": {"sha": "d9eab16e32a422cfe436ecddae1fa747263c5890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9eab16e32a422cfe436ecddae1fa747263c5890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0563cc8291227e9d84c8d931ceb2b3768512b770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0563cc8291227e9d84c8d931ceb2b3768512b770", "html_url": "https://github.com/rust-lang/rust/commit/0563cc8291227e9d84c8d931ceb2b3768512b770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0563cc8291227e9d84c8d931ceb2b3768512b770/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc4d0a7768c95ba50a224cab401b3a04501463d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc4d0a7768c95ba50a224cab401b3a04501463d3", "html_url": "https://github.com/rust-lang/rust/commit/fc4d0a7768c95ba50a224cab401b3a04501463d3"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "fb9fa5314946b5884d939ee1c4c5ff80171ca7b0", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0563cc8291227e9d84c8d931ceb2b3768512b770/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0563cc8291227e9d84c8d931ceb2b3768512b770/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=0563cc8291227e9d84c8d931ceb2b3768512b770", "patch": "@@ -448,7 +448,9 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             Some(tt::TokenTree::Leaf(tt::Leaf::Punct(_))),\n         ) = (last.token_tree(), next.token_tree())\n         {\n-            if curr.spacing == tt::Spacing::Alone {\n+            // Note: We always assume the semi-colon would be the last token in\n+            // other parts of RA such that we don't add whitespace here.\n+            if curr.spacing == tt::Spacing::Alone && curr.char != ';' {\n                 self.inner.token(WHITESPACE, \" \".into());\n                 self.text_pos += TextUnit::of_char(' ');\n             }"}, {"sha": "066ce150b5a20dd34c460a8ffbdf8f2f42afef51", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0563cc8291227e9d84c8d931ceb2b3768512b770/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0563cc8291227e9d84c8d931ceb2b3768512b770/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=0563cc8291227e9d84c8d931ceb2b3768512b770", "patch": "@@ -1593,6 +1593,60 @@ fn test_repeat_bad_var() {\n     .assert_expand_items(\"foo!(b0 b1);\", \"b0 b1\");\n }\n \n+#[test]\n+fn test_no_space_after_semi_colon() {\n+    let expanded = parse_macro(\n+        r#\"\n+        macro_rules! with_std { ($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*) }\n+    \"#,\n+    )\n+    .expand_items(r#\"with_std! {mod m;mod f;}\"#);\n+\n+    let dump = format!(\"{:#?}\", expanded);\n+    assert_eq_text!(\n+        dump.trim(),\n+        r###\"MACRO_ITEMS@[0; 52)\n+  MODULE@[0; 26)\n+    ATTR@[0; 21)\n+      POUND@[0; 1) \"#\"\n+      L_BRACK@[1; 2) \"[\"\n+      PATH@[2; 5)\n+        PATH_SEGMENT@[2; 5)\n+          NAME_REF@[2; 5)\n+            IDENT@[2; 5) \"cfg\"\n+      TOKEN_TREE@[5; 20)\n+        L_PAREN@[5; 6) \"(\"\n+        IDENT@[6; 13) \"feature\"\n+        EQ@[13; 14) \"=\"\n+        STRING@[14; 19) \"\\\"std\\\"\"\n+        R_PAREN@[19; 20) \")\"\n+      R_BRACK@[20; 21) \"]\"\n+    MOD_KW@[21; 24) \"mod\"\n+    NAME@[24; 25)\n+      IDENT@[24; 25) \"m\"\n+    SEMI@[25; 26) \";\"\n+  MODULE@[26; 52)\n+    ATTR@[26; 47)\n+      POUND@[26; 27) \"#\"\n+      L_BRACK@[27; 28) \"[\"\n+      PATH@[28; 31)\n+        PATH_SEGMENT@[28; 31)\n+          NAME_REF@[28; 31)\n+            IDENT@[28; 31) \"cfg\"\n+      TOKEN_TREE@[31; 46)\n+        L_PAREN@[31; 32) \"(\"\n+        IDENT@[32; 39) \"feature\"\n+        EQ@[39; 40) \"=\"\n+        STRING@[40; 45) \"\\\"std\\\"\"\n+        R_PAREN@[45; 46) \")\"\n+      R_BRACK@[46; 47) \"]\"\n+    MOD_KW@[47; 50) \"mod\"\n+    NAME@[50; 51)\n+      IDENT@[50; 51) \"f\"\n+    SEMI@[51; 52) \";\"\"###,\n+    );\n+}\n+\n #[test]\n fn test_expand_bad_literal() {\n     parse_macro("}]}