{"sha": "0e8f0b03cd94d9611063daaa516af2ae3489c6b5", "node_id": "C_kwDOAAsO6NoAKDBlOGYwYjAzY2Q5NGQ5NjExMDYzZGFhYTUxNmFmMmFlMzQ4OWM2YjU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-11T05:45:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-11T05:45:54Z"}, "message": "Rollup merge of #106001 - sdroege:glibc-skip-over-null-argv, r=ChrisDenton\n\nStop at the first `NULL` argument when iterating `argv`\n\nSome C commandline parsers (e.g. GLib and Qt) are replacing already handled arguments in `argv` with `NULL` and move them to the end. That means that `argc` might be bigger than the actual number of non-`NULL` pointers in `argv` at this point.\n\nTo handle this we simply stop iterating at the first `NULL` argument.\n\n`argv` is also guaranteed to be `NULL`-terminated so any non-`NULL` arguments after the first `NULL` can safely be ignored.\n\nFixes https://github.com/rust-lang/rust/issues/105999", "tree": {"sha": "1c4e1a348748109ceaa217c76412f8f631b302da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c4e1a348748109ceaa217c76412f8f631b302da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8f0b03cd94d9611063daaa516af2ae3489c6b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5yuSCRBK7hj4Ov3rIwAA0vYIAFt4kGGjkgifs2kJ7Ej/BcYH\npfPmz54cWTOIdBmcU2hAb/LEhz2hhkrR5lklbjcwiZTIHO79yyGtIpfILIlpmdSX\ncc+CbSs45lwh2GhFRqFUqFzZlagC+S2TW8/j4qez9iuqvZE2v5wmUINpNUkiR5ir\nUzVSfJbceNBExPBc2TYD0IZiggZ+UqiNYHuwhkn93KQ/b1gcd9muwTiRHIgmXNGU\nIJ3WFIxkiOjG5i/H7sYm3XzPvX8kbgnO3yBn05Gr8Bj9sCb6k+L4iy8kIXn+X0Mm\n2xi0M7b2GaRKVK4EoMnuqrSd0XRCygxmd/NH7ikSCU+UcTsfpc75BiMXkNqYBtg=\n=G567\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c4e1a348748109ceaa217c76412f8f631b302da\nparent 0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a\nparent e97203c3f893893611818997bbeb0116ded2605f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676094354 +0530\ncommitter GitHub <noreply@github.com> 1676094354 +0530\n\nRollup merge of #106001 - sdroege:glibc-skip-over-null-argv, r=ChrisDenton\n\nStop at the first `NULL` argument when iterating `argv`\n\nSome C commandline parsers (e.g. GLib and Qt) are replacing already handled arguments in `argv` with `NULL` and move them to the end. That means that `argc` might be bigger than the actual number of non-`NULL` pointers in `argv` at this point.\n\nTo handle this we simply stop iterating at the first `NULL` argument.\n\n`argv` is also guaranteed to be `NULL`-terminated so any non-`NULL` arguments after the first `NULL` can safely be ignored.\n\nFixes https://github.com/rust-lang/rust/issues/105999\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8f0b03cd94d9611063daaa516af2ae3489c6b5", "html_url": "https://github.com/rust-lang/rust/commit/0e8f0b03cd94d9611063daaa516af2ae3489c6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8f0b03cd94d9611063daaa516af2ae3489c6b5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a", "html_url": "https://github.com/rust-lang/rust/commit/0781d5dd8e7ee76dfa2e3d6f78386231d2465a7a"}, {"sha": "e97203c3f893893611818997bbeb0116ded2605f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97203c3f893893611818997bbeb0116ded2605f", "html_url": "https://github.com/rust-lang/rust/commit/e97203c3f893893611818997bbeb0116ded2605f"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "a5ce6d5120dad1fe88d312c359e500390d2fa54b", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e8f0b03cd94d9611063daaa516af2ae3489c6b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8f0b03cd94d9611063daaa516af2ae3489c6b5/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=0e8f0b03cd94d9611063daaa516af2ae3489c6b5", "patch": "@@ -141,12 +141,28 @@ mod imp {\n             // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n-            (0..argc)\n-                .map(|i| {\n-                    let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);\n-                    OsStringExt::from_vec(cstr.to_bytes().to_vec())\n-                })\n-                .collect()\n+            let mut args = Vec::with_capacity(argc as usize);\n+            for i in 0..argc {\n+                let ptr = *argv.offset(i) as *const libc::c_char;\n+\n+                // Some C commandline parsers (e.g. GLib and Qt) are replacing already\n+                // handled arguments in `argv` with `NULL` and move them to the end. That\n+                // means that `argc` might be bigger than the actual number of non-`NULL`\n+                // pointers in `argv` at this point.\n+                //\n+                // To handle this we simply stop iterating at the first `NULL` argument.\n+                //\n+                // `argv` is also guaranteed to be `NULL`-terminated so any non-`NULL` arguments\n+                // after the first `NULL` can safely be ignored.\n+                if ptr.is_null() {\n+                    break;\n+                }\n+\n+                let cstr = CStr::from_ptr(ptr);\n+                args.push(OsStringExt::from_vec(cstr.to_bytes().to_vec()));\n+            }\n+\n+            args\n         }\n     }\n }"}]}