{"sha": "38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "node_id": "C_kwDOAAsO6NoAKDM4ZjUwZDFlY2IyYWRmOWY5ZTYzMDViMjJjZGVlOTZiZDY1ZjljYmU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-26T14:47:03Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Eagerly merge hidden types.", "tree": {"sha": "dc6c1a79606c3f72d01698198e02466c676f6242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6c1a79606c3f72d01698198e02466c676f6242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "html_url": "https://github.com/rust-lang/rust/commit/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a745797142f932877695a0a3cd1b452ab67e59df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a745797142f932877695a0a3cd1b452ab67e59df", "html_url": "https://github.com/rust-lang/rust/commit/a745797142f932877695a0a3cd1b452ab67e59df"}], "stats": {"total": 204, "additions": 125, "deletions": 79}, "files": [{"sha": "a86471affaa1755b2675bcb76a26ddcdc1fd4baa", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -502,7 +502,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             let opaque = self.tcx.mk_opaque(key.def_id, substs);\n             for &ty in tys {\n                 let ty = substitute_value(self.tcx, &result_subst, ty);\n-                obligations.extend(self.handle_opaque_type(opaque, ty, cause, param_env)?);\n+                obligations\n+                    .extend(self.handle_opaque_type(opaque, ty, cause, param_env)?.obligations);\n             }\n         }\n "}, {"sha": "cf57270df29204abd1320a609bc3ee081b46993a", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,5 +1,5 @@\n use crate::infer::{InferCtxt, InferOk};\n-use crate::traits::{self, PredicateObligation, PredicateObligations};\n+use crate::traits::{self, PredicateObligation};\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -20,6 +20,8 @@ mod table;\n \n pub use table::{OpaqueTypeStorage, OpaqueTypeTable};\n \n+use super::InferResult;\n+\n /// Information about the opaque types whose values we\n /// are inferring in this function (these are the `impl Trait` that\n /// appear in the return type).\n@@ -152,11 +154,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         opaque: Ty<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> Option<InferOk<'tcx, Ty<'tcx>>> {\n-        let mut obligations = vec![];\n-        let value = Instantiator { infcx: self, cause, param_env, obligations: &mut obligations }\n-            .fold_opaque_ty_new(opaque, |_, _| ty)?;\n-        Some(InferOk { value, obligations })\n+    ) -> Option<InferResult<'tcx, ()>> {\n+        Instantiator { infcx: self, cause, param_env }.fold_opaque_ty_new(opaque, |_, _| ty)\n     }\n \n     pub fn handle_opaque_type(\n@@ -165,22 +164,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         b: Ty<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> Result<PredicateObligations<'tcx>, TypeError<'tcx>> {\n+    ) -> InferResult<'tcx, ()> {\n         if a.references_error() || b.references_error() {\n-            return Ok(vec![]);\n+            return Ok(InferOk { value: (), obligations: vec![] });\n         }\n         if self.defining_use_anchor.is_some() {\n             let process = |a: Ty<'tcx>, b: Ty<'tcx>| {\n                 if !matches!(a.kind(), ty::Opaque(..)) {\n                     return None;\n                 }\n                 self.instantiate_opaque_types(b, a, cause.clone(), param_env)\n-                    .map(|res| res.obligations)\n             };\n             if let Some(res) = process(a, b) {\n-                Ok(res)\n+                res\n             } else if let Some(res) = process(b, a) {\n-                Ok(res)\n+                res\n             } else {\n                 // Rerun equality check, but this time error out due to\n                 // different types.\n@@ -205,13 +203,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n             let key = opaque_type.expect_opaque_type();\n             let origin = self.opaque_ty_origin_unchecked(key.def_id, cause.span);\n-            self.inner.borrow_mut().opaque_types().register(\n+            let prev = self.inner.borrow_mut().opaque_types().register(\n                 key,\n                 opaque_type,\n                 OpaqueHiddenType { ty: hidden_ty, span: cause.span },\n                 origin,\n             );\n-            Ok(vec![])\n+            match prev {\n+                Some(prev) => self.at(cause, param_env).eq(prev, hidden_ty),\n+                None => Ok(InferOk { value: (), obligations: vec![] }),\n+            }\n         }\n     }\n \n@@ -599,15 +600,14 @@ struct Instantiator<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     cause: ObligationCause<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    obligations: &'a mut PredicateObligations<'tcx>,\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n     fn fold_opaque_ty_new(\n         &mut self,\n         ty: Ty<'tcx>,\n         mk_ty: impl FnOnce(&InferCtxt<'_, 'tcx>, Span) -> Ty<'tcx>,\n-    ) -> Option<Ty<'tcx>> {\n+    ) -> Option<InferResult<'tcx, ()>> {\n         // Check that this is `impl Trait` type is\n         // declared by `parent_def_id` -- i.e., one whose\n         // value we are inferring.  At present, this is\n@@ -659,7 +659,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         origin: hir::OpaqueTyOrigin,\n         mk_ty: impl FnOnce(&InferCtxt<'_, 'tcx>, Span) -> Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n+    ) -> InferResult<'tcx, ()> {\n         let infcx = self.infcx;\n         let tcx = infcx.tcx;\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n@@ -673,12 +673,16 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         // Foo, impl Bar)`.\n         let span = self.cause.span;\n \n-        self.infcx.inner.borrow_mut().opaque_types().register(\n+        let mut obligations = vec![];\n+        let prev = self.infcx.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n             ty,\n             OpaqueHiddenType { ty: ty_var, span },\n             origin,\n         );\n+        if let Some(prev) = prev {\n+            obligations = self.infcx.at(&self.cause, self.param_env).eq(prev, ty_var)?.obligations;\n+        }\n \n         debug!(\"generated new type inference var {:?}\", ty_var.kind());\n \n@@ -698,7 +702,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                         projection_ty,\n                         self.cause.clone(),\n                         0,\n-                        &mut self.obligations,\n+                        &mut obligations,\n                     ),\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n@@ -714,19 +718,19 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             if let ty::PredicateKind::Projection(projection) = predicate.kind().skip_binder() {\n                 if projection.term.references_error() {\n                     // No point on adding these obligations since there's a type error involved.\n-                    return tcx.ty_error();\n+                    return Ok(InferOk { value: (), obligations: vec![] });\n                 }\n                 trace!(\"{:#?}\", projection.term);\n             }\n             // Require that the predicate holds for the concrete type.\n             debug!(?predicate);\n-            self.obligations.push(traits::Obligation::new(\n+            obligations.push(traits::Obligation::new(\n                 self.cause.clone(),\n                 self.param_env,\n                 predicate,\n             ));\n         }\n-        ty_var\n+        Ok(InferOk { value: (), obligations })\n     }\n }\n "}, {"sha": "1895c1a85c7cc3186671bedbb4e98093c62a1d20", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -18,14 +18,14 @@ pub struct OpaqueTypeStorage<'tcx> {\n \n impl<'tcx> OpaqueTypeStorage<'tcx> {\n     #[instrument(level = \"debug\")]\n-    pub(crate) fn remove(&mut self, key: OpaqueTypeKey<'tcx>, idx: usize) {\n-        if idx == 0 {\n+    pub(crate) fn remove(&mut self, key: OpaqueTypeKey<'tcx>, idx: Option<OpaqueHiddenType<'tcx>>) {\n+        if let Some(idx) = idx {\n+            self.opaque_types.get_mut(&key).unwrap().hidden_types[0] = idx;\n+        } else {\n             match self.opaque_types.remove(&key) {\n                 None => bug!(\"reverted opaque type inference that was never registered: {:?}\", key),\n                 Some(_) => {}\n             }\n-        } else {\n-            self.opaque_types.get_mut(&key).unwrap().hidden_types.drain(idx..);\n         }\n     }\n \n@@ -75,14 +75,17 @@ impl<'a, 'tcx> OpaqueTypeTable<'a, 'tcx> {\n         opaque_type: Ty<'tcx>,\n         ty: OpaqueHiddenType<'tcx>,\n         origin: OpaqueTyOrigin,\n-    ) {\n+    ) -> Option<Ty<'tcx>> {\n         if let Some(decl) = self.storage.opaque_types.get_mut(&key) {\n-            decl.hidden_types.push(ty);\n-            self.undo_log.push(UndoLog::OpaqueTypes(key, decl.hidden_types.len()));\n-            return;\n+            assert_eq!(decl.hidden_types.len(), 1);\n+            let prev = decl.hidden_types[0];\n+            decl.hidden_types = vec![ty];\n+            self.undo_log.push(UndoLog::OpaqueTypes(key, Some(prev)));\n+            return Some(prev.ty);\n         }\n         let decl = OpaqueTypeDecl { opaque_type, hidden_types: vec![ty], origin };\n         self.storage.opaque_types.insert(key, decl);\n-        self.undo_log.push(UndoLog::OpaqueTypes(key, 0));\n+        self.undo_log.push(UndoLog::OpaqueTypes(key, None));\n+        None\n     }\n }"}, {"sha": "02b15baf8fb2dba45fc4221e23271b3fd76a1644", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -11,14 +11,16 @@ use crate::{\n     traits,\n };\n \n+use super::opaque_types::OpaqueHiddenType;\n+\n pub struct Snapshot<'tcx> {\n     pub(crate) undo_len: usize,\n     _marker: PhantomData<&'tcx ()>,\n }\n \n /// Records the \"undo\" data for a single operation that affects some form of inference variable.\n pub(crate) enum UndoLog<'tcx> {\n-    OpaqueTypes(OpaqueTypeKey<'tcx>, usize),\n+    OpaqueTypes(OpaqueTypeKey<'tcx>, Option<OpaqueHiddenType<'tcx>>),\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n     IntUnificationTable(sv::UndoLog<ut::Delegate<ty::IntVid>>),"}, {"sha": "274f8a3ef79fa138d4c84caa74495b87f5d3539c", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -652,7 +652,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         &obligation.cause,\n                         obligation.param_env,\n                     ) {\n-                        Ok(value) => ProcessResult::Changed(mk_pending(value)),\n+                        Ok(value) => ProcessResult::Changed(mk_pending(value.obligations)),\n                         Err(err) => ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(\n                             ExpectedFound::new(true, a, b),\n                             err,"}, {"sha": "35818786cbbf14c2ef76c949af6c90bca8741a99", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -705,8 +705,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         &obligation.cause,\n                         obligation.param_env,\n                     ) {\n-                        Ok(obligations) => {\n-                            self.evaluate_predicates_recursively(previous_stack, obligations)\n+                        Ok(res) => {\n+                            self.evaluate_predicates_recursively(previous_stack, res.obligations)\n                         }\n                         Err(_) => Ok(EvaluatedToErr),\n                     }"}, {"sha": "4032fbbceba4ce27dc5b930a86fc14d719a81748", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -11,11 +11,14 @@ LL | #![feature(specialization)]\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:15:5\n    |\n-LL |         return 1_i32;\n-   |                ----- type expected due to this\n-LL |     }\n+LL | fn two(x: bool) -> impl Foo {\n+   |                    -------- the expected opaque type\n+...\n LL |     0_u32\n    |     ^^^^^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl Foo`\n+                     found type `u32`\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "cf2c8b7e415408faac524e65a15070252072d169", "filename": "src/test/ui/impl-trait/issue-72911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -16,7 +16,6 @@ fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = Lint>\n \n fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n     //~^ ERROR: failed to resolve\n-    //~| ERROR `()` is not an iterator\n     unimplemented!()\n }\n "}, {"sha": "4a990286d966d2c0ad009200b3ce9dbcc496dff8", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -18,15 +18,7 @@ LL | pub fn gather_all() -> impl Iterator<Item = Lint> {\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-72911.rs:17:20\n-   |\n-LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0277, E0433.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "15476c706a7f2eab942c6a0ef53faea811766d05", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:28:22\n+  --> $DIR/ordinary-bounds-unrelated.rs:28:33\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n-   |                      ^\n+   |                                 ^\n    |\n help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |"}, {"sha": "7315aa8e9d4787f617c65d33e42b24eee4614f08", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:31:22\n+  --> $DIR/ordinary-bounds-unsuited.rs:31:33\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n-   |                      ^\n+   |                                 ^\n    |\n help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |"}, {"sha": "b2f7166f0ae3a19f0311b5bd487dd7354e9b8568", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-impl-trait.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-impl-trait.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,20 +1,26 @@\n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:36:5\n    |\n-LL |         return A;\n-   |                - type expected due to this\n-LL |     }\n+LL | fn can() -> impl NotObjectSafe {\n+   |             ------------------ the expected opaque type\n+...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n+   |\n+   = note: expected opaque type `impl NotObjectSafe`\n+                   found struct `B`\n \n error[E0308]: mismatched types\n   --> $DIR/object-unsafe-trait-in-return-position-impl-trait.rs:43:5\n    |\n-LL |         return A;\n-   |                - type expected due to this\n-LL |     }\n+LL | fn cat() -> impl ObjectSafe {\n+   |             --------------- the expected opaque type\n+...\n LL |     B\n    |     ^ expected struct `A`, found struct `B`\n+   |\n+   = note: expected opaque type `impl ObjectSafe`\n+                   found struct `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db0d446e559a3415e0876866b7b4e5a1207567b4", "filename": "src/test/ui/impl-trait/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,31 +1,41 @@\n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n    |\n-LL |         return 0i32;\n-   |                ---- type expected due to this\n-LL |     }\n+LL | fn foo() -> impl std::fmt::Display {\n+   |             ---------------------- the expected opaque type\n+...\n LL |     1u32\n    |     ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:12:16\n    |\n-LL |         return 0i32;\n-   |                ---- type expected due to this\n-LL |     } else {\n+LL | fn bar() -> impl std::fmt::Display {\n+   |             ---------------------- the expected opaque type\n+...\n LL |         return 1u32;\n    |                ^^^^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:17:5\n    |\n+LL |   fn baz() -> impl std::fmt::Display {\n+   |               ---------------------- the expected opaque type\n LL | /     if false {\n LL | |         return 0i32;\n-   | |                ---- type expected due to this\n LL | |     } else {\n LL | |         1u32\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:9\n@@ -53,36 +63,48 @@ LL ~         Box::new(1u32)\n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:33:5\n    |\n+LL |   fn bat() -> impl std::fmt::Display {\n+   |               ---------------------- the expected opaque type\n LL | /     match 13 {\n LL | |         0 => return 0i32,\n-   | |                     ---- type expected due to this\n LL | |         _ => 1u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:40:5\n    |\n+LL |   fn can() -> impl std::fmt::Display {\n+   |               ---------------------- the expected opaque type\n LL | /     match 13 {\n LL | |         0 => return 0i32,\n-   | |                     ---- type expected due to this\n LL | |         1 => 1u32,\n LL | |         _ => 2u32,\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: mismatched types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:48:5\n    |\n+LL |   fn cat() -> impl std::fmt::Display {\n+   |               ---------------------- the expected opaque type\n LL | /     match 13 {\n LL | |         0 => {\n LL | |             return 0i32;\n-   | |                    ---- type expected due to this\n LL | |         }\n ...  |\n LL | |         }\n LL | |     }\n    | |_____^ expected `i32`, found `u32`\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:61:14"}, {"sha": "e09e1a3afed696a708a4a7292ba64f26c6111946", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -8,6 +8,7 @@ type Closure = impl FnOnce();\n fn c() -> Closure {\n     || -> Closure { || () }\n     //~^ ERROR: mismatched types\n+    //~| ERROR: mismatched types\n     //~| ERROR: expected a `FnOnce<()>` closure, found `()`\n }\n "}, {"sha": "810c99c84bc4cd51596a13023d491f8d155ae200", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -15,18 +15,26 @@ LL |     || -> Closure { || () }\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/issue-63279.rs:9:21: 9:26]`\n-help: you might have meant to return this value\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-63279.rs:9:5\n+   |\n+LL | type Closure = impl FnOnce();\n+   |                ------------- the expected opaque type\n+...\n+LL |     || -> Closure { || () }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n-LL |     || -> Closure { return || (); }\n-   |                     ++++++      +\n+   = note: expected opaque type `impl FnOnce()`\n+                  found closure `[closure@$DIR/issue-63279.rs:9:5: 9:28]`\n \n error: could not find defining uses\n   --> $DIR/issue-63279.rs:5:16\n    |\n LL | type Closure = impl FnOnce();\n    |                ^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "db8c5b7a72befb50326a231ce0d0ae296d81fb95", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,10 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-74280.rs:10:5\n    |\n-LL |     let y = || -> Test { () };\n-   |                          -- type expected due to this\n+LL | type Test = impl Copy;\n+   |             --------- the expected opaque type\n+...\n LL |     7\n    |     ^ expected `()`, found integer\n+   |\n+   = note: expected opaque type `impl Copy`\n+                     found type `{integer}`\n \n error: could not find defining uses\n   --> $DIR/issue-74280.rs:5:13"}, {"sha": "20da37ec9a1860847dc09fb69c2f0558590f5014", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=38f50d1ecb2adf9f9e6305b22cdee96bd65f9cbe", "patch": "@@ -1,17 +1,18 @@\n error[E0308]: mismatched types\n   --> $DIR/multiple-def-uses-in-one-fn3.rs:14:9\n    |\n+LL | type X<A: ToString + Clone, B: ToString + Clone> = impl ToString;\n+   |                                                    ------------- the expected opaque type\n+...\n LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A, B>) {\n    |      -                    - found type parameter\n    |      |\n    |      expected type parameter\n LL |     (a, b)\n-   |      -  ^ expected type parameter `A`, found type parameter `B`\n-   |      |\n-   |      type expected due to this\n+   |         ^ expected type parameter `A`, found type parameter `B`\n    |\n-   = note: expected type parameter `A`\n-              found type parameter `B`\n+   = note: expected opaque type `impl ToString`\n+           found type parameter `B`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}]}