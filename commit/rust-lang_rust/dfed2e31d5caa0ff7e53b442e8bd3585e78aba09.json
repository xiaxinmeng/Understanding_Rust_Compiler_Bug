{"sha": "dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "node_id": "C_kwDOAAsO6NoAKGRmZWQyZTMxZDVjYWEwZmY3ZTUzYjQ0MmU4YmQzNTg1ZTc4YWJhMDk", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:00:50Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Do not use full type path in help message", "tree": {"sha": "867a7b20c465e2a4e3e6bdb10a6750fcfadd8f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867a7b20c465e2a4e3e6bdb10a6750fcfadd8f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "html_url": "https://github.com/rust-lang/rust/commit/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f01656a7d5d206488f9f3de879d43a637f943a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f01656a7d5d206488f9f3de879d43a637f943a1", "html_url": "https://github.com/rust-lang/rust/commit/4f01656a7d5d206488f9f3de879d43a637f943a1"}], "stats": {"total": 60, "additions": 29, "deletions": 31}, "files": [{"sha": "399b1a929e22ae9691bfe7daffefab4770e9d950", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::is_lint_allowed;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n use rustc_ast::ImplPolarity;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Item, ItemKind};\n+use rustc_hir::{FieldDef, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::Symbol;\n-use rustc_span::{sym, Span};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -99,11 +99,10 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                             if !is_lint_allowed(cx, NON_SEND_FIELD_IN_SEND_TY, field_hir_id);\n                             if let field_ty = field.ty(cx.tcx, impl_trait_substs);\n                             if !ty_allowed_in_send(cx, field_ty, send_trait);\n-                            if let Some(field_span) = hir_map.span_if_local(field.did);\n+                            if let Node::Field(field_def) = hir_map.get(field_hir_id);\n                             then {\n                                 non_send_fields.push(NonSendField {\n-                                    name: hir_map.name(field_hir_id),\n-                                    span: field_span,\n+                                    def: field_def,\n                                     ty: field_ty,\n                                     generic_params: collect_generic_params(cx, field_ty),\n                                 })\n@@ -119,13 +118,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                         item.span,\n                         &format!(\n                             \"this implementation is unsound, as some fields in `{}` are `!Send`\",\n-                            self_ty\n+                            snippet(cx, hir_impl.self_ty.span, \"Unknown\")\n                         ),\n                         |diag| {\n                             for field in non_send_fields {\n                                 diag.span_note(\n-                                    field.span,\n-                                    &format!(\"the field `{}` has type `{}` which is `!Send`\", field.name, field.ty),\n+                                    field.def.span,\n+                                    &format!(\"the type of field `{}` is `!Send`\", field.def.ident.name),\n                                 );\n \n                                 match field.generic_params.len() {\n@@ -135,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n                                         \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n                                         if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n                                         field.generic_params_string(),\n-                                        field.ty\n+                                        snippet(cx, field.def.ty.span, \"Unknown\"),\n                                     )),\n                                 };\n                             }\n@@ -148,8 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n }\n \n struct NonSendField<'tcx> {\n-    name: Symbol,\n-    span: Span,\n+    def: &'tcx FieldDef<'tcx>,\n     ty: Ty<'tcx>,\n     generic_params: Vec<Ty<'tcx>>,\n }"}, {"sha": "f49a7355b5368f24a8e84bf228c6b177486089d0", "filename": "tests/ui/non_send_field_in_send_ty.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfed2e31d5caa0ff7e53b442e8bd3585e78aba09/tests%2Fui%2Fnon_send_field_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_field_in_send_ty.stderr?ref=dfed2e31d5caa0ff7e53b442e8bd3585e78aba09", "patch": "@@ -5,46 +5,46 @@ LL | unsafe impl<T> Send for RingBuffer<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n-note: the field `data` has type `std::vec::Vec<std::cell::UnsafeCell<T>>` which is `!Send`\n+note: the type of field `data` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:11:5\n    |\n LL |     data: Vec<UnsafeCell<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: add bounds on type parameter `T` that satisfy `std::vec::Vec<std::cell::UnsafeCell<T>>: Send`\n+   = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n \n error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:24:1\n    |\n LL | unsafe impl<T> Send for MvccRwLock<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `lock` has type `std::sync::Mutex<std::boxed::Box<T>>` which is `!Send`\n+note: the type of field `lock` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:21:5\n    |\n LL |     lock: Mutex<Box<T>>,\n    |     ^^^^^^^^^^^^^^^^^^^\n-   = help: add bounds on type parameter `T` that satisfy `std::sync::Mutex<std::boxed::Box<T>>: Send`\n+   = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n \n error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:32:1\n    |\n LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `head` has type `std::sync::Arc<RC>` which is `!Send`\n+note: the type of field `head` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:29:5\n    |\n LL |     head: Arc<RC>,\n    |     ^^^^^^^^^^^^^\n-   = help: add bounds on type parameter `RC` that satisfy `std::sync::Arc<RC>: Send`\n+   = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n \n error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:48:1\n    |\n LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `context` has type `T` which is `!Send`\n+note: the type of field `context` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:44:5\n    |\n LL |     context: T,\n@@ -57,7 +57,7 @@ error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n LL | unsafe impl Send for NoGeneric {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `rc_is_not_send` has type `std::rc::Rc<std::string::String>` which is `!Send`\n+note: the type of field `rc_is_not_send` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:52:5\n    |\n LL |     rc_is_not_send: Rc<String>,\n@@ -70,19 +70,19 @@ error: this implementation is unsound, as some fields in `MultiField<T>` are `!S\n LL | unsafe impl<T> Send for MultiField<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field1` has type `T` which is `!Send`\n+note: the type of field `field1` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:58:5\n    |\n LL |     field1: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the field `field2` has type `T` which is `!Send`\n+note: the type of field `field2` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:59:5\n    |\n LL |     field2: T,\n    |     ^^^^^^^^^\n    = help: add `T: Send` bound in `Send` impl\n-note: the field `field3` has type `T` which is `!Send`\n+note: the type of field `field3` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:60:5\n    |\n LL |     field3: T,\n@@ -95,7 +95,7 @@ error: this implementation is unsound, as some fields in `MyOption<T>` are `!Sen\n LL | unsafe impl<T> Send for MyOption<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `0` has type `T` which is `!Send`\n+note: the type of field `0` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:66:12\n    |\n LL |     MySome(T),\n@@ -108,20 +108,20 @@ error: this implementation is unsound, as some fields in `MultiParam<A, B>` are\n LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `vec` has type `std::vec::Vec<(A, B)>` which is `!Send`\n+note: the type of field `vec` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:74:5\n    |\n LL |     vec: Vec<(A, B)>,\n    |     ^^^^^^^^^^^^^^^^\n-   = help: add bounds on type parameters `A, B` that satisfy `std::vec::Vec<(A, B)>: Send`\n+   = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n \n error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:95:1\n    |\n LL | unsafe impl Send for HeuristicTest {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field4` has type `(*const NonSend, std::rc::Rc<u8>)` which is `!Send`\n+note: the type of field `field4` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:90:5\n    |\n LL |     field4: (*const NonSend, Rc<u8>),\n@@ -134,7 +134,7 @@ error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Se\n LL | unsafe impl<T> Send for AttrTest3<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `0` has type `T` which is `!Send`\n+note: the type of field `0` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:109:11\n    |\n LL |     Enum2(T),\n@@ -147,20 +147,20 @@ error: this implementation is unsound, as some fields in `Complex<P, u32>` are `\n LL | unsafe impl<P> Send for Complex<P, u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field1` has type `P` which is `!Send`\n+note: the type of field `field1` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:118:5\n    |\n LL |     field1: A,\n    |     ^^^^^^^^^\n    = help: add `P: Send` bound in `Send` impl\n \n-error: this implementation is unsound, as some fields in `Complex<Q, std::sync::MutexGuard<'static, bool>>` are `!Send`\n+error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:125:1\n    |\n LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the field `field2` has type `std::sync::MutexGuard<'static, bool>` which is `!Send`\n+note: the type of field `field2` is `!Send`\n   --> $DIR/non_send_field_in_send_ty.rs:119:5\n    |\n LL |     field2: B,"}]}