{"sha": "1ee88db4121bfd4bad1dcfdb64922f126d93e286", "node_id": "C_kwDOAAsO6NoAKDFlZTg4ZGI0MTIxYmZkNGJhZDFkY2ZkYjY0OTIyZjEyNmQ5M2UyODY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T14:11:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T14:11:20Z"}, "message": "Auto merge of #14533 - lowr:feat/text-edits-for-inlay-hints, r=Veykril\n\nfeat: make inlay hints insertable\n\nPart of #13812\n\nThis PR implements text edit for inlay hints. When an inlay hint contain text edit, user can \"accept\" it (e.g. by double-clicking in VS Code) to make the hint actual code (effectively deprecating the hint itself).\n\nThis PR does not implement auto import despite the original request; text edits only insert qualified types along with necessary punctuation. I feel there are some missing pieces to implement efficient auto import (in particular, type traversal function with early exit) so left it for future work. Even without it, user can use `replace_qualified_name_with_use` assist after accepting the edit to achieve the same result.\n\nI implemented for the following inlay hints:\n- top-level identifier pattern in let statements\n- top-level identifier pattern in closure parameters\n- closure return type when its has block body\n\nOne somewhat strange interaction can be observed when top-level identifier pattern has subpattern: text edit inserts type annotation in different place than the inlay hint. Do we want to allow it or should we not provide text edits for these cases at all?\n\n```rust\nlet a /* inlay hint shown here */ @ (b, c) = foo();\nlet a @ (b, c) /* text edit inserts types here */ = foo();\n```", "tree": {"sha": "b3ab82616b6453c666f8ba5fc97905c10c610e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ab82616b6453c666f8ba5fc97905c10c610e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee88db4121bfd4bad1dcfdb64922f126d93e286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee88db4121bfd4bad1dcfdb64922f126d93e286", "html_url": "https://github.com/rust-lang/rust/commit/1ee88db4121bfd4bad1dcfdb64922f126d93e286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee88db4121bfd4bad1dcfdb64922f126d93e286/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7501d3b721560637e27f904d9fce79182c41bef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7501d3b721560637e27f904d9fce79182c41bef7", "html_url": "https://github.com/rust-lang/rust/commit/7501d3b721560637e27f904d9fce79182c41bef7"}, {"sha": "c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "html_url": "https://github.com/rust-lang/rust/commit/c978d4bf0c92e77ef94f354af8402af71bd7b5ab"}], "stats": {"total": 423, "additions": 374, "deletions": 49}, "files": [{"sha": "0eef25102e8479e025d6aef63a946144012b3fee", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -150,6 +150,7 @@ pub trait HirDisplay {\n         &'a self,\n         db: &'a dyn HirDatabase,\n         module_id: ModuleId,\n+        allow_opaque: bool,\n     ) -> Result<String, DisplaySourceCodeError> {\n         let mut result = String::new();\n         match self.hir_fmt(&mut HirFormatter {\n@@ -160,7 +161,7 @@ pub trait HirDisplay {\n             max_size: None,\n             omit_verbose_types: false,\n             closure_style: ClosureStyle::ImplFn,\n-            display_target: DisplayTarget::SourceCode { module_id },\n+            display_target: DisplayTarget::SourceCode { module_id, allow_opaque },\n         }) {\n             Ok(()) => {}\n             Err(HirDisplayError::FmtError) => panic!(\"Writing to String can't fail!\"),\n@@ -249,25 +250,34 @@ pub enum DisplayTarget {\n     Diagnostics,\n     /// Display types for inserting them in source files.\n     /// The generated code should compile, so paths need to be qualified.\n-    SourceCode { module_id: ModuleId },\n+    SourceCode { module_id: ModuleId, allow_opaque: bool },\n     /// Only for test purpose to keep real types\n     Test,\n }\n \n impl DisplayTarget {\n-    fn is_source_code(&self) -> bool {\n+    fn is_source_code(self) -> bool {\n         matches!(self, Self::SourceCode { .. })\n     }\n-    fn is_test(&self) -> bool {\n+\n+    fn is_test(self) -> bool {\n         matches!(self, Self::Test)\n     }\n+\n+    fn allows_opaque(self) -> bool {\n+        match self {\n+            Self::SourceCode { allow_opaque, .. } => allow_opaque,\n+            _ => true,\n+        }\n+    }\n }\n \n #[derive(Debug)]\n pub enum DisplaySourceCodeError {\n     PathNotFound,\n     UnknownType,\n     Generator,\n+    OpaqueType,\n }\n \n pub enum HirDisplayError {\n@@ -768,7 +778,7 @@ impl HirDisplay for Ty {\n                         };\n                         write!(f, \"{name}\")?;\n                     }\n-                    DisplayTarget::SourceCode { module_id } => {\n+                    DisplayTarget::SourceCode { module_id, allow_opaque: _ } => {\n                         if let Some(path) = find_path::find_path(\n                             db.upcast(),\n                             ItemInNs::Types((*def_id).into()),\n@@ -906,6 +916,11 @@ impl HirDisplay for Ty {\n                 f.end_location_link();\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {\n+                if !f.display_target.allows_opaque() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::OpaqueType,\n+                    ));\n+                }\n                 let impl_trait_id = db.lookup_intern_impl_trait_id((*opaque_ty_id).into());\n                 match impl_trait_id {\n                     ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n@@ -953,8 +968,14 @@ impl HirDisplay for Ty {\n                 }\n             }\n             TyKind::Closure(id, substs) => {\n-                if f.display_target.is_source_code() && f.closure_style != ClosureStyle::ImplFn {\n-                    never!(\"Only `impl Fn` is valid for displaying closures in source code\");\n+                if f.display_target.is_source_code() {\n+                    if !f.display_target.allows_opaque() {\n+                        return Err(HirDisplayError::DisplaySourceCodeError(\n+                            DisplaySourceCodeError::OpaqueType,\n+                        ));\n+                    } else if f.closure_style != ClosureStyle::ImplFn {\n+                        never!(\"Only `impl Fn` is valid for displaying closures in source code\");\n+                    }\n                 }\n                 match f.closure_style {\n                     ClosureStyle::Hide => return write!(f, \"{TYPE_HINT_TRUNCATION}\"),\n@@ -1053,6 +1074,11 @@ impl HirDisplay for Ty {\n             }\n             TyKind::Alias(AliasTy::Projection(p_ty)) => p_ty.hir_fmt(f)?,\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n+                if !f.display_target.allows_opaque() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::OpaqueType,\n+                    ));\n+                }\n                 let impl_trait_id = db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into());\n                 match impl_trait_id {\n                     ImplTraitId::ReturnTypeImplTrait(func, idx) => {"}, {"sha": "245617ab82e234005233993df842749999569b94", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -159,7 +159,7 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let range = node.as_ref().original_file_range(&db);\n             if let Some(expected) = types.remove(&range) {\n                 let actual = if display_source {\n-                    ty.display_source_code(&db, def.module(&db)).unwrap()\n+                    ty.display_source_code(&db, def.module(&db), true).unwrap()\n                 } else {\n                     ty.display_test(&db).to_string()\n                 };\n@@ -175,7 +175,7 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n             let range = node.as_ref().original_file_range(&db);\n             if let Some(expected) = types.remove(&range) {\n                 let actual = if display_source {\n-                    ty.display_source_code(&db, def.module(&db)).unwrap()\n+                    ty.display_source_code(&db, def.module(&db), true).unwrap()\n                 } else {\n                     ty.display_test(&db).to_string()\n                 };"}, {"sha": "8bc285614e039cfa5f86c6d93c73bca102e091d6", "filename": "crates/ide-assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -69,7 +69,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n         return None;\n     }\n \n-    let inferred_type = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let inferred_type = ty.display_source_code(ctx.db(), module.into(), false).ok()?;\n     acc.add(\n         AssistId(\"add_explicit_type\", AssistKind::RefactorRewrite),\n         format!(\"Insert explicit type `{inferred_type}`\"),"}, {"sha": "9e1022d809d0355de31a1a93371667be2fa89d40", "filename": "crates/ide-assists/src/handlers/add_return_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_return_type.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn add_return_type(acc: &mut Assists, ctx: &AssistContext<'_>) -> Opt\n     if ty.is_unit() {\n         return None;\n     }\n-    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let ty = ty.display_source_code(ctx.db(), module.into(), true).ok()?;\n \n     acc.add(\n         AssistId(\"add_return_type\", AssistKind::RefactorRewrite),"}, {"sha": "728018506d1b793cff20d28b9906f48212f11178", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -1884,7 +1884,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n-    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"_\".to_string())\n+    ty.display_source_code(ctx.db(), module.into(), true).ok().unwrap_or_else(|| \"_\".to_string())\n }\n \n fn make_ty(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> ast::Type {"}, {"sha": "eccd7675fbaaedead8a053e924819eabc6fb1726", "filename": "crates/ide-assists/src/handlers/generate_constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -46,7 +46,8 @@ pub(crate) fn generate_constant(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     let ty = ctx.sema.type_of_expr(&expr)?;\n     let scope = ctx.sema.scope(statement.syntax())?;\n     let constant_module = scope.module();\n-    let type_name = ty.original().display_source_code(ctx.db(), constant_module.into()).ok()?;\n+    let type_name =\n+        ty.original().display_source_code(ctx.db(), constant_module.into(), false).ok()?;\n     let target = statement.syntax().parent()?.text_range();\n     let path = constant_token.syntax().ancestors().find_map(ast::Path::cast)?;\n "}, {"sha": "184f523e01bd9b5ddeae6cbfb1fbe1ad17f2370a", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -192,7 +192,7 @@ fn expr_ty(\n     scope: &hir::SemanticsScope<'_>,\n ) -> Option<ast::Type> {\n     let ty = ctx.sema.type_of_expr(&arg).map(|it| it.adjusted())?;\n-    let text = ty.display_source_code(ctx.db(), scope.module().into()).ok()?;\n+    let text = ty.display_source_code(ctx.db(), scope.module().into(), false).ok()?;\n     Some(make::ty(&text))\n }\n "}, {"sha": "a5556878be6feceb173400d81f6c1bce5fcf892f", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -438,7 +438,7 @@ fn make_return_type(\n             Some(ty) if ty.is_unit() => (None, false),\n             Some(ty) => {\n                 necessary_generic_params.extend(ty.generic_params(ctx.db()));\n-                let rendered = ty.display_source_code(ctx.db(), target_module.into());\n+                let rendered = ty.display_source_code(ctx.db(), target_module.into(), true);\n                 match rendered {\n                     Ok(rendered) => (Some(make::ty(&rendered)), false),\n                     Err(_) => (Some(make::ty_placeholder()), true),\n@@ -992,9 +992,9 @@ fn fn_arg_type(\n             let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(fn_arg.syntax())?.krate());\n             convert_reference_type(ty.strip_references(), ctx.db(), famous_defs)\n                 .map(|conversion| conversion.convert_type(ctx.db()))\n-                .or_else(|| ty.display_source_code(ctx.db(), target_module.into()).ok())\n+                .or_else(|| ty.display_source_code(ctx.db(), target_module.into(), true).ok())\n         } else {\n-            ty.display_source_code(ctx.db(), target_module.into()).ok()\n+            ty.display_source_code(ctx.db(), target_module.into(), true).ok()\n         }\n     }\n "}, {"sha": "23153b4c566c8d4301f8480f253c1c369cff40ca", "filename": "crates/ide-assists/src/handlers/promote_local_to_const.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fpromote_local_to_const.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -57,11 +57,13 @@ pub(crate) fn promote_local_to_const(acc: &mut Assists, ctx: &AssistContext<'_>)\n     let local = ctx.sema.to_def(&pat)?;\n     let ty = ctx.sema.type_of_pat(&pat.into())?.original;\n \n-    if ty.contains_unknown() || ty.is_closure() {\n-        cov_mark::hit!(promote_lcoal_not_applicable_if_ty_not_inferred);\n-        return None;\n-    }\n-    let ty = ty.display_source_code(ctx.db(), module.into()).ok()?;\n+    let ty = match ty.display_source_code(ctx.db(), module.into(), false) {\n+        Ok(ty) => ty,\n+        Err(_) => {\n+            cov_mark::hit!(promote_local_not_applicable_if_ty_not_inferred);\n+            return None;\n+        }\n+    };\n \n     let initializer = let_stmt.initializer()?;\n     if !is_body_const(&ctx.sema, &initializer) {\n@@ -187,7 +189,7 @@ fn foo() {\n \n     #[test]\n     fn not_applicable_unknown_ty() {\n-        cov_mark::check!(promote_lcoal_not_applicable_if_ty_not_inferred);\n+        cov_mark::check!(promote_local_not_applicable_if_ty_not_inferred);\n         check_assist_not_applicable(\n             promote_local_to_const,\n             r\""}, {"sha": "43a97d7d3a551b485ad54aa21676f84bad7456ec", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -55,7 +55,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n     let returned_type = match ctx.sema.type_of_expr(&initializer) {\n         Some(returned_type) if !returned_type.original.contains_unknown() => {\n             let module = ctx.sema.scope(let_stmt.syntax())?.module();\n-            returned_type.original.display_source_code(ctx.db(), module.into()).ok()?\n+            returned_type.original.display_source_code(ctx.db(), module.into(), false).ok()?\n         }\n         _ => {\n             cov_mark::hit!(fallback_to_turbofish_type_if_type_info_not_available);"}, {"sha": "734e1bed8df1c822a7677d967c81f69ed6188dbf", "filename": "crates/ide-completion/src/completions/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -127,7 +127,7 @@ fn params_from_stmt_list_scope(\n         let module = scope.module().into();\n         scope.process_all_names(&mut |name, def| {\n             if let hir::ScopeDef::Local(local) = def {\n-                if let Ok(ty) = local.ty(ctx.db).display_source_code(ctx.db, module) {\n+                if let Ok(ty) = local.ty(ctx.db).display_source_code(ctx.db, module, true) {\n                     cb(name, ty);\n                 }\n             }"}, {"sha": "e47054756389bac08a486cf3807b334b5e165e09", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -242,7 +242,7 @@ pub(crate) fn complete_ascribed_type(\n         }\n     }?\n     .adjusted();\n-    let ty_string = x.display_source_code(ctx.db, ctx.module.into()).ok()?;\n+    let ty_string = x.display_source_code(ctx.db, ctx.module.into(), true).ok()?;\n     acc.add(render_type_inference(ty_string, ctx));\n     None\n }"}, {"sha": "0ee627a44c68ec6af39ca58e2c56be72ba64efad", "filename": "crates/ide-db/src/path_transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fpath_transform.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -116,7 +116,9 @@ impl<'a> PathTransform<'a> {\n                         Some((\n                             k,\n                             ast::make::ty(\n-                                &default.display_source_code(db, source_module.into()).ok()?,\n+                                &default\n+                                    .display_source_code(db, source_module.into(), false)\n+                                    .ok()?,\n                             ),\n                         ))\n                     }"}, {"sha": "a33a2cd85e2271327343d7c34e0b2e4b5ffe3b13", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -176,7 +176,9 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n fn make_ty(ty: &hir::Type, db: &dyn HirDatabase, module: hir::Module) -> ast::Type {\n     let ty_str = match ty.as_adt() {\n         Some(adt) => adt.name(db).to_string(),\n-        None => ty.display_source_code(db, module.into()).ok().unwrap_or_else(|| \"_\".to_string()),\n+        None => {\n+            ty.display_source_code(db, module.into(), false).ok().unwrap_or_else(|| \"_\".to_string())\n+        }\n     };\n \n     make::ty(&ty_str)"}, {"sha": "625c95ce201d740789cac0aa4fe226190b7c2479", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -69,7 +69,7 @@ fn missing_record_expr_field_fixes(\n     let new_field = make::record_field(\n         None,\n         make::name(record_expr_field.field_name()?.ident_token()?.text()),\n-        make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n+        make::ty(&new_field_type.display_source_code(sema.db, module.into(), true).ok()?),\n     );\n \n     let last_field = record_fields.fields().last()?;"}, {"sha": "7a8edfea83560b332ff24055bd4daf4da8c7cfcd", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -14,8 +14,9 @@ use smallvec::{smallvec, SmallVec};\n use stdx::never;\n use syntax::{\n     ast::{self, AstNode},\n-    match_ast, NodeOrToken, SyntaxNode, TextRange,\n+    match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n+use text_edit::TextEdit;\n \n use crate::{navigation_target::TryToNav, FileId};\n \n@@ -113,14 +114,26 @@ pub struct InlayHint {\n     pub kind: InlayKind,\n     /// The actual label to show in the inlay hint.\n     pub label: InlayHintLabel,\n+    /// Text edit to apply when \"accepting\" this inlay hint.\n+    pub text_edit: Option<TextEdit>,\n }\n \n impl InlayHint {\n     fn closing_paren(range: TextRange) -> InlayHint {\n-        InlayHint { range, kind: InlayKind::ClosingParenthesis, label: InlayHintLabel::from(\")\") }\n+        InlayHint {\n+            range,\n+            kind: InlayKind::ClosingParenthesis,\n+            label: InlayHintLabel::from(\")\"),\n+            text_edit: None,\n+        }\n     }\n     fn opening_paren(range: TextRange) -> InlayHint {\n-        InlayHint { range, kind: InlayKind::OpeningParenthesis, label: InlayHintLabel::from(\"(\") }\n+        InlayHint {\n+            range,\n+            kind: InlayKind::OpeningParenthesis,\n+            label: InlayHintLabel::from(\"(\"),\n+            text_edit: None,\n+        }\n     }\n }\n \n@@ -346,6 +359,23 @@ fn label_of_ty(\n     Some(r)\n }\n \n+fn ty_to_text_edit(\n+    sema: &Semantics<'_, RootDatabase>,\n+    node_for_hint: &SyntaxNode,\n+    ty: &hir::Type,\n+    offset_to_insert: TextSize,\n+    prefix: String,\n+) -> Option<TextEdit> {\n+    let scope = sema.scope(node_for_hint)?;\n+    // FIXME: Limit the length and bail out on excess somehow?\n+    let rendered = ty.display_source_code(scope.db, scope.module().into(), false).ok()?;\n+\n+    let mut builder = TextEdit::builder();\n+    builder.insert(offset_to_insert, prefix);\n+    builder.insert(offset_to_insert, rendered);\n+    Some(builder.finish())\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -553,6 +583,37 @@ mod tests {\n         expect.assert_debug_eq(&inlay_hints)\n     }\n \n+    /// Computes inlay hints for the fixture, applies all the provided text edits and then runs\n+    /// expect test.\n+    #[track_caller]\n+    pub(super) fn check_edit(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n+\n+        let edits = inlay_hints\n+            .into_iter()\n+            .filter_map(|hint| hint.text_edit)\n+            .reduce(|mut acc, next| {\n+                acc.union(next).expect(\"merging text edits failed\");\n+                acc\n+            })\n+            .expect(\"no edit returned\");\n+\n+        let mut actual = analysis.file_text(file_id).unwrap().to_string();\n+        edits.apply(&mut actual);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[track_caller]\n+    pub(super) fn check_no_edit(config: InlayHintsConfig, ra_fixture: &str) {\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n+\n+        let edits: Vec<_> = inlay_hints.into_iter().filter_map(|hint| hint.text_edit).collect();\n+\n+        assert!(edits.is_empty(), \"unexpected edits: {edits:?}\");\n+    }\n+\n     #[test]\n     fn hints_disabled() {\n         check_with_config("}, {"sha": "fea4b89b89f409f587e7b2a9688d1c686177534f", "filename": "crates/ide/src/inlay_hints/adjustment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fadjustment.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -135,6 +135,7 @@ pub(super) fn hints(\n                 ))),\n                 None,\n             ),\n+            text_edit: None,\n         });\n     }\n     if !postfix && needs_inner_parens {"}, {"sha": "a131427f5fd91c961f295b5c86780f835f1cb0d5", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 184, "deletions": 7, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -12,9 +12,10 @@ use syntax::{\n     match_ast,\n };\n \n-use crate::{inlay_hints::closure_has_block_body, InlayHint, InlayHintsConfig, InlayKind};\n-\n-use super::label_of_ty;\n+use crate::{\n+    inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n+    InlayHint, InlayHintsConfig, InlayKind,\n+};\n \n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n@@ -35,21 +36,39 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let label = label_of_ty(famous_defs, config, ty)?;\n+    let label = label_of_ty(famous_defs, config, ty.clone())?;\n \n     if config.hide_named_constructor_hints\n         && is_named_constructor(sema, pat, &label.to_string()).is_some()\n     {\n         return None;\n     }\n \n+    let type_annotation_is_valid = desc_pat\n+        .syntax()\n+        .parent()\n+        .map(|it| ast::LetStmt::can_cast(it.kind()) || ast::Param::can_cast(it.kind()))\n+        .unwrap_or(false);\n+    let text_edit = if type_annotation_is_valid {\n+        ty_to_text_edit(\n+            sema,\n+            desc_pat.syntax(),\n+            &ty,\n+            pat.syntax().text_range().end(),\n+            String::from(\": \"),\n+        )\n+    } else {\n+        None\n+    };\n+\n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::Type,\n         label,\n+        text_edit,\n     });\n \n     Some(())\n@@ -176,14 +195,16 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n mod tests {\n     // This module also contains tests for super::closure_ret\n \n+    use expect_test::expect;\n     use hir::ClosureStyle;\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n-    use crate::{fixture, inlay_hints::InlayHintsConfig};\n+    use crate::{fixture, inlay_hints::InlayHintsConfig, ClosureReturnTypeHints};\n \n-    use crate::inlay_hints::tests::{check, check_with_config, DISABLED_CONFIG, TEST_CONFIG};\n-    use crate::ClosureReturnTypeHints;\n+    use crate::inlay_hints::tests::{\n+        check, check_edit, check_no_edit, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n+    };\n \n     #[track_caller]\n     fn check_types(ra_fixture: &str) {\n@@ -1012,4 +1033,160 @@ fn main() {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn edit_for_let_stmt() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+struct S<T>(T);\n+fn test<F>(v: S<(S<i32>, S<()>)>, f: F) {\n+    let a = v;\n+    let S((b, c)) = v;\n+    let a @ S((b, c)) = v;\n+    let a = f;\n+}\n+\"#,\n+            expect![[r#\"\n+                struct S<T>(T);\n+                fn test<F>(v: S<(S<i32>, S<()>)>, f: F) {\n+                    let a: S<(S<i32>, S<()>)> = v;\n+                    let S((b, c)) = v;\n+                    let a @ S((b, c)): S<(S<i32>, S<()>)> = v;\n+                    let a: F = f;\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_for_closure_param() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+fn test<T>(t: T) {\n+    let f = |a, b, c| {};\n+    let result = f(42, \"\", t);\n+}\n+\"#,\n+            expect![[r#\"\n+                fn test<T>(t: T) {\n+                    let f = |a: i32, b: &str, c: T| {};\n+                    let result: () = f(42, \"\", t);\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_for_closure_ret() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+struct S<T>(T);\n+fn test() {\n+    let f = || { 3 };\n+    let f = |a: S<usize>| { S(a) };\n+}\n+\"#,\n+            expect![[r#\"\n+                struct S<T>(T);\n+                fn test() {\n+                    let f = || -> i32 { 3 };\n+                    let f = |a: S<usize>| -> S<S<usize>> { S(a) };\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_prefixes_paths() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+pub struct S<T>(T);\n+mod middle {\n+    pub struct S<T, U>(T, U);\n+    pub fn make() -> S<inner::S<i64>, super::S<usize>> { loop {} }\n+\n+    mod inner {\n+        pub struct S<T>(T);\n+    }\n+\n+    fn test() {\n+        let a = make();\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                pub struct S<T>(T);\n+                mod middle {\n+                    pub struct S<T, U>(T, U);\n+                    pub fn make() -> S<inner::S<i64>, super::S<usize>> { loop {} }\n+\n+                    mod inner {\n+                        pub struct S<T>(T);\n+                    }\n+\n+                    fn test() {\n+                        let a: S<inner::S<i64>, crate::S<usize>> = make();\n+                    }\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn no_edit_for_top_pat_where_type_annotation_is_invalid() {\n+        check_no_edit(\n+            TEST_CONFIG,\n+            r#\"\n+fn test() {\n+    if let a = 42 {}\n+    while let a = 42 {}\n+    match 42 {\n+        a => (),\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn no_edit_for_opaque_type() {\n+        check_no_edit(\n+            TEST_CONFIG,\n+            r#\"\n+trait Trait {}\n+struct S<T>(T);\n+fn foo() -> impl Trait {}\n+fn bar() -> S<impl Trait> {}\n+fn test() {\n+    let a = foo();\n+    let a = bar();\n+    let f = || { foo() };\n+    let f = || { bar() };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_edit_for_closure_return_without_body_block() {\n+        // We can lift this limitation; see FIXME in closure_ret module.\n+        let config = InlayHintsConfig {\n+            closure_return_type_hints: ClosureReturnTypeHints::Always,\n+            ..TEST_CONFIG\n+        };\n+        check_no_edit(\n+            config,\n+            r#\"\n+struct S<T>(T);\n+fn test() {\n+    let f = || 3;\n+    let f = |a: S<usize>| S(a);\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "3d7f969aaabf0e38a842039094bb95e4619a8dec", "filename": "crates/ide/src/inlay_hints/binding_mode.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbinding_mode.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -49,7 +49,12 @@ pub(super) fn hints(\n             (true, false) => \"&\",\n             _ => return,\n         };\n-        acc.push(InlayHint { range, kind: InlayKind::BindingMode, label: r.to_string().into() });\n+        acc.push(InlayHint {\n+            range,\n+            kind: InlayKind::BindingMode,\n+            label: r.to_string().into(),\n+            text_edit: None,\n+        });\n     });\n     match pat {\n         ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n@@ -63,6 +68,7 @@ pub(super) fn hints(\n                 range: pat.syntax().text_range(),\n                 kind: InlayKind::BindingMode,\n                 label: bm.to_string().into(),\n+                text_edit: None,\n             });\n         }\n         ast::Pat::OrPat(pat) if !pattern_adjustments.is_empty() && outer_paren_pat.is_none() => {"}, {"sha": "6db9b8b5443108ad08908307afd06a0ad772e1d6", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -61,6 +61,7 @@ pub(super) fn hints(\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::Chaining,\n                 label: label_of_ty(famous_defs, config, ty)?,\n+                text_edit: None,\n             });\n         }\n     }\n@@ -120,6 +121,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 147..154,\n@@ -140,6 +142,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],\n@@ -205,6 +208,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 143..179,\n@@ -225,6 +229,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],\n@@ -274,6 +279,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 143..179,\n@@ -294,6 +300,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],\n@@ -357,6 +364,7 @@ fn main() {\n                             },\n                             \"<i32, bool>>\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 246..265,\n@@ -390,6 +398,7 @@ fn main() {\n                             },\n                             \"<i32, bool>>\",\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],\n@@ -455,6 +464,7 @@ fn main() {\n                             },\n                             \" = ()>\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 174..224,\n@@ -488,6 +498,7 @@ fn main() {\n                             },\n                             \" = ()>\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 174..206,\n@@ -521,6 +532,7 @@ fn main() {\n                             },\n                             \" = ()>\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 174..189,\n@@ -541,6 +553,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],\n@@ -590,6 +603,16 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: Some(\n+                            TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \": Struct\",\n+                                        delete: 130..130,\n+                                    },\n+                                ],\n+                            },\n+                        ),\n                     },\n                     InlayHint {\n                         range: 145..185,\n@@ -610,6 +633,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 145..168,\n@@ -630,6 +654,7 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n+                        text_edit: None,\n                     },\n                     InlayHint {\n                         range: 222..228,\n@@ -648,6 +673,7 @@ fn main() {\n                                 tooltip: \"\",\n                             },\n                         ],\n+                        text_edit: None,\n                     },\n                 ]\n             \"#]],"}, {"sha": "10b5acd064ea78163470ef6b48073bdc60c83bc6", "filename": "crates/ide/src/inlay_hints/closing_brace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosing_brace.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -112,6 +112,7 @@ pub(super) fn hints(\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBrace,\n         label: InlayHintLabel::simple(label, None, linked_location),\n+        text_edit: None,\n     });\n \n     None"}, {"sha": "6214e9c8e7ff371e941bf33b46902c0389b019b7", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -1,14 +1,14 @@\n //! Implementation of \"closure return type\" inlay hints.\n+//!\n+//! Tests live in [`bind_pat`][super::bind_pat] module.\n use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n use syntax::ast::{self, AstNode};\n \n use crate::{\n-    inlay_hints::closure_has_block_body, ClosureReturnTypeHints, InlayHint, InlayHintsConfig,\n-    InlayKind,\n+    inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n+    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind,\n };\n \n-use super::label_of_ty;\n-\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n@@ -24,25 +24,39 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    if !closure_has_block_body(&closure)\n-        && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock\n-    {\n+    let has_block_body = closure_has_block_body(&closure);\n+    if !has_block_body && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock {\n         return None;\n     }\n \n     let param_list = closure.param_list()?;\n \n     let closure = sema.descend_node_into_attributes(closure).pop()?;\n-    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n+    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure.clone()))?.adjusted();\n     let callable = ty.as_callable(sema.db)?;\n     let ty = callable.return_type();\n     if ty.is_unit() {\n         return None;\n     }\n+\n+    // FIXME?: We could provide text edit to insert braces for closures with non-block body.\n+    let text_edit = if has_block_body {\n+        ty_to_text_edit(\n+            sema,\n+            closure.syntax(),\n+            &ty,\n+            param_list.syntax().text_range().end(),\n+            String::from(\" -> \"),\n+        )\n+    } else {\n+        None\n+    };\n+\n     acc.push(InlayHint {\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnType,\n         label: label_of_ty(famous_defs, config, ty)?,\n+        text_edit,\n     });\n     Some(())\n }"}, {"sha": "f9047efaf1af58d52354d7647ffe443cc854452f", "filename": "crates/ide/src/inlay_hints/discriminant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscriminant.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -75,6 +75,7 @@ fn variant_hints(\n             })),\n             None,\n         ),\n+        text_edit: None,\n     });\n \n     Some(())"}, {"sha": "34eb5eb94c4d080edfcd0be9239d61a50a573d9c", "filename": "crates/ide/src/inlay_hints/fn_lifetime_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Ffn_lifetime_fn.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -25,6 +25,7 @@ pub(super) fn hints(\n         range: t.text_range(),\n         kind: InlayKind::Lifetime,\n         label: label.into(),\n+        text_edit: None,\n     };\n \n     let param_list = func.param_list()?;\n@@ -189,12 +190,14 @@ pub(super) fn hints(\n                     if is_empty { \"\" } else { \", \" }\n                 )\n                 .into(),\n+                text_edit: None,\n             });\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamList,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n+            text_edit: None,\n         }),\n     }\n     Some(())"}, {"sha": "ba875649f7993e27e3e50948c1625f253fca7d74", "filename": "crates/ide/src/inlay_hints/implicit_static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fimplicit_static.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -34,6 +34,7 @@ pub(super) fn hints(\n                 range: t.text_range(),\n                 kind: InlayKind::Lifetime,\n                 label: \"'static\".to_owned().into(),\n+                text_edit: None,\n             });\n         }\n     }"}, {"sha": "9729a43c220aa0e922985b0dceb3bab073b12dbd", "filename": "crates/ide/src/inlay_hints/param_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fparam_name.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -57,6 +57,7 @@ pub(super) fn hints(\n                 range,\n                 kind: InlayKind::Parameter,\n                 label: InlayHintLabel::simple(param_name, None, linked_location),\n+                text_edit: None,\n             }\n         });\n "}, {"sha": "cc72c2e10b5eff9d272bcbeb8ac8f9e36bc337fc", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee88db4121bfd4bad1dcfdb64922f126d93e286/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=1ee88db4121bfd4bad1dcfdb64922f126d93e286", "patch": "@@ -510,7 +510,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::AdjustmentPostfix\n             | InlayKind::ClosingBrace => None,\n         },\n-        text_edits: None,\n+        text_edits: inlay_hint.text_edit.map(|it| text_edit_vec(line_index, it)),\n         data: None,\n         tooltip,\n         label,"}]}