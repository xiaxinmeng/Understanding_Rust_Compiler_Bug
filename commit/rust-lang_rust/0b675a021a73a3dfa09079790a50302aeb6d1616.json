{"sha": "0b675a021a73a3dfa09079790a50302aeb6d1616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNjc1YTAyMWE3M2EzZGZhMDkwNzk3OTBhNTAzMDJhZWI2ZDE2MTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-15T22:20:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-15T22:20:04Z"}, "message": "Make mutability no longer a type constructor", "tree": {"sha": "9bea8d18f02105844d05170450238ad19a7a0666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bea8d18f02105844d05170450238ad19a7a0666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b675a021a73a3dfa09079790a50302aeb6d1616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b675a021a73a3dfa09079790a50302aeb6d1616", "html_url": "https://github.com/rust-lang/rust/commit/0b675a021a73a3dfa09079790a50302aeb6d1616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b675a021a73a3dfa09079790a50302aeb6d1616/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f02f9cbf29c2fdc28baeaa5a25671d9be29d6eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f02f9cbf29c2fdc28baeaa5a25671d9be29d6eab", "html_url": "https://github.com/rust-lang/rust/commit/f02f9cbf29c2fdc28baeaa5a25671d9be29d6eab"}], "stats": {"total": 180, "additions": 105, "deletions": 75}, "files": [{"sha": "0f61eec4e6f2e03c024f2f853fd6391ab54081ed", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -35,6 +35,11 @@ type effect =\n   | UNSAFE\n ;;\n \n+type mutability =\n+    MUT_mutable\n+  | MUT_immutable\n+;;\n+\n type name_base =\n     BASE_ident of ident\n   | BASE_temp of temp_id\n@@ -187,21 +192,21 @@ and ty_obj = (effect * ((ident,ty_fn) Hashtbl.t))\n \n and check_calls = (lval * (atom array)) array\n \n-and rec_input = (ident * atom)\n+and rec_input = (ident * mutability * atom)\n \n-and tup_input = atom\n+and tup_input = (mutability * atom)\n \n and stmt' =\n \n   (* lval-assigning stmts. *)\n     STMT_spawn of (lval * domain * lval * (atom array))\n   | STMT_init_rec of (lval * (rec_input array) * lval option)\n   | STMT_init_tup of (lval * (tup_input array))\n-  | STMT_init_vec of (lval * atom array)\n+  | STMT_init_vec of (lval * mutability * atom array)\n   | STMT_init_str of (lval * string)\n   | STMT_init_port of lval\n   | STMT_init_chan of (lval * (lval option))\n-  | STMT_init_box of (lval * atom)\n+  | STMT_init_box of (lval * mutability * atom)\n   | STMT_copy of (lval * expr)\n   | STMT_copy_binop of (lval * binop * atom)\n   | STMT_call of (lval * lval * (atom array))\n@@ -1018,7 +1023,8 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           do\n             if i != 0\n             then fmt ff \", \";\n-            let (ident, atom) = entries.(i) in\n+            let (ident, mutability, atom) = entries.(i) in\n+              if mutability = MUT_mutable then fmt ff \"mutable \";\n               fmt_ident ff ident;\n               fmt ff \" = \";\n               fmt_atom ff atom;\n@@ -1032,9 +1038,11 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           end;\n           fmt ff \");\"\n \n-      | STMT_init_vec (dst, atoms) ->\n+      | STMT_init_vec (dst, mutability, atoms) ->\n           fmt_lval ff dst;\n-          fmt ff \" = vec(\";\n+          fmt ff \" = vec\";\n+          if mutability = MUT_mutable then fmt ff \"[mutable]\";\n+          fmt ff \"(\";\n           for i = 0 to (Array.length atoms) - 1\n           do\n             if i != 0\n@@ -1050,7 +1058,9 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           do\n             if i != 0\n             then fmt ff \", \";\n-            fmt_atom ff entries.(i);\n+            let (mutability, atom) = entries.(i) in\n+            if mutability = MUT_mutable then fmt ff \"mutable \";\n+            fmt_atom ff atom;\n           done;\n           fmt ff \");\";\n \n@@ -1166,9 +1176,10 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n           fmt_lval ff t;\n           fmt ff \";\"\n \n-      | STMT_init_box (lv, at) ->\n+      | STMT_init_box (lv, mutability, at) ->\n           fmt_lval ff lv;\n           fmt ff \" = @@\";\n+          if mutability = MUT_mutable then fmt ff \" mutable \";\n           fmt_atom ff at;\n           fmt ff \";\"\n "}, {"sha": "27ec881077e5247b0215d2654dc30ffed258c6c4", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 57, "deletions": 39, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -20,9 +20,9 @@ type pexp' =\n     PEXP_call of (pexp * pexp array)\n   | PEXP_spawn of (Ast.domain * pexp)\n   | PEXP_bind of (pexp * pexp option array)\n-  | PEXP_rec of ((Ast.ident * pexp) array * pexp option)\n-  | PEXP_tup of (pexp array)\n-  | PEXP_vec of (pexp array)\n+  | PEXP_rec of ((Ast.ident * Ast.mutability * pexp) array * pexp option)\n+  | PEXP_tup of ((Ast.mutability * pexp) array)\n+  | PEXP_vec of Ast.mutability * (pexp array)\n   | PEXP_port\n   | PEXP_chan of (pexp option)\n   | PEXP_binop of (Ast.binop * pexp * pexp)\n@@ -32,8 +32,7 @@ type pexp' =\n   | PEXP_lval of plval\n   | PEXP_lit of Ast.lit\n   | PEXP_str of string\n-  | PEXP_mutable of pexp\n-  | PEXP_box of pexp\n+  | PEXP_box of Ast.mutability * pexp\n   | PEXP_custom of Ast.name * (pexp array) * (string option)\n \n and plval =\n@@ -177,6 +176,11 @@ and parse_effect (ps:pstate) : Ast.effect =\n     | UNSAFE -> bump ps; Ast.UNSAFE\n     | _ -> Ast.PURE\n \n+and parse_mutability (ps:pstate) : Ast.mutability =\n+  match peek ps with\n+      MUTABLE -> bump ps; Ast.MUT_mutable\n+    | _ -> Ast.MUT_immutable\n+\n and parse_ty_fn\n     (effect:Ast.effect)\n     (ps:pstate)\n@@ -421,13 +425,14 @@ and parse_ty (ps:pstate) : Ast.ty =\n   parse_constrained_ty ps\n \n \n-and parse_rec_input (ps:pstate) : (Ast.ident * pexp) =\n+and parse_rec_input (ps:pstate) : (Ast.ident * Ast.mutability * pexp) =\n+  let mutability = parse_mutability ps in\n   let lab = (ctxt \"rec input: label\" parse_ident ps) in\n     match peek ps with\n         EQ ->\n           bump ps;\n           let pexp = ctxt \"rec input: expr\" parse_pexp ps in\n-            (lab, pexp)\n+            (lab, mutability, pexp)\n       | _ -> raise (unexpected ps)\n \n \n@@ -439,7 +444,7 @@ and parse_rec_body (ps:pstate) : pexp' = (*((Ast.ident * pexp) array) =*)\n       | WITH -> raise (err \"empty record extension\" ps)\n       | _ ->\n           let inputs = one_or_more COMMA parse_rec_input ps in\n-          let labels = Array.map (fun (l, _) -> l) inputs in\n+          let labels = Array.map (fun (l, _, _) -> l) inputs in\n             begin\n               check_dup_rec_labels ps labels;\n               match peek ps with\n@@ -472,21 +477,18 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n   let apos = lexpos ps in\n   match peek ps with\n \n-      MUTABLE ->\n-        bump ps;\n-        let inner = parse_pexp ps in\n-        let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_mutable inner)\n-\n-    | AT ->\n+      AT ->\n         bump ps;\n+        let mutability = parse_mutability ps in\n         let inner = parse_pexp ps in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_box inner)\n+          span ps apos bpos (PEXP_box (mutability, inner))\n \n     | TUP ->\n         bump ps;\n-        let pexps = ctxt \"paren pexps(s)\" (rstr false parse_pexp_list) ps in\n+        let pexps =\n+          ctxt \"paren pexps(s)\" (rstr false parse_mutable_and_pexp_list) ps\n+        in\n         let bpos = lexpos ps in\n           span ps apos bpos (PEXP_tup pexps)\n \n@@ -498,11 +500,18 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n \n     | VEC ->\n         bump ps;\n-        begin\n-          let pexps = ctxt \"vec pexp: exprs\" parse_pexp_list ps in\n-          let bpos = lexpos ps in\n-            span ps apos bpos (PEXP_vec pexps)\n-        end\n+        let mutability =\n+          match peek ps with\n+              LBRACKET ->\n+                bump ps;\n+                expect ps MUTABLE;\n+                expect ps RBRACKET;\n+                Ast.MUT_mutable\n+            | _ -> Ast.MUT_immutable\n+        in\n+        let pexps = ctxt \"vec pexp: exprs\" parse_pexp_list ps in\n+        let bpos = lexpos ps in\n+          span ps apos bpos (PEXP_vec (mutability, pexps))\n \n \n     | LIT_STR s ->\n@@ -947,6 +956,9 @@ and parse_as_pexp (ps:pstate) : pexp =\n and parse_pexp (ps:pstate) : pexp =\n   parse_as_pexp ps\n \n+and parse_mutable_and_pexp (ps:pstate) : (Ast.mutability * pexp) =\n+  let mutability = parse_mutability ps in\n+  (mutability, parse_as_pexp ps)\n \n and parse_pexp_list (ps:pstate) : pexp array =\n   match peek ps with\n@@ -955,6 +967,13 @@ and parse_pexp_list (ps:pstate) : pexp array =\n           (ctxt \"pexp list\" parse_pexp) ps\n     | _ -> raise (unexpected ps)\n \n+and parse_mutable_and_pexp_list (ps:pstate) : (Ast.mutability * pexp) array =\n+  match peek ps with\n+      LPAREN ->\n+        bracketed_zero_or_more LPAREN RPAREN (Some COMMA)\n+          (ctxt \"mutable-and-pexp list\" parse_mutable_and_pexp) ps\n+    | _ -> raise (unexpected ps)\n+\n ;;\n \n (* \n@@ -1099,8 +1118,7 @@ and desugar_expr_atom\n       | PEXP_bind _\n       | PEXP_spawn _\n       | PEXP_custom _\n-      | PEXP_box _\n-      | PEXP_mutable _ ->\n+      | PEXP_box _ ->\n           let (_, tmp, decl_stmt) = build_tmp ps slot_auto apos bpos in\n           let stmts = desugar_expr_init ps tmp pexp in\n             (Array.append [| decl_stmt |] stmts,\n@@ -1233,11 +1251,11 @@ and desugar_expr_init\n               begin\n                 Array.map\n                   begin\n-                    fun (ident, pexp) ->\n+                    fun (ident, mutability, pexp) ->\n                       let (stmts, atom) =\n                         desugar_expr_atom ps pexp\n                       in\n-                        (stmts, (ident, atom))\n+                        (stmts, (ident, mutability, atom))\n                   end\n                   args\n               end\n@@ -1259,19 +1277,24 @@ and desugar_expr_init\n             end\n \n       | PEXP_tup args ->\n+          let muts = Array.to_list (Array.map fst args) in\n           let (arg_stmts, arg_atoms) =\n-            desugar_expr_atoms ps args\n+            desugar_expr_atoms ps (Array.map snd args)\n           in\n-          let stmt = ss (Ast.STMT_init_tup (dst_lval, arg_atoms)) in\n+          let arg_atoms = Array.to_list arg_atoms in\n+          let tup_args = Array.of_list (List.combine muts arg_atoms) in\n+          let stmt = ss (Ast.STMT_init_tup (dst_lval, tup_args)) in\n             aa arg_stmts [| stmt |]\n \n       | PEXP_str s ->\n           let stmt = ss (Ast.STMT_init_str (dst_lval, s)) in\n             [| stmt |]\n \n-      | PEXP_vec args ->\n+      | PEXP_vec (mutability, args) ->\n           let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n-          let stmt = ss (Ast.STMT_init_vec (dst_lval, arg_atoms)) in\n+          let stmt =\n+            ss (Ast.STMT_init_vec (dst_lval, mutability, arg_atoms))\n+          in\n             aa arg_stmts [| stmt |]\n \n       | PEXP_port ->\n@@ -1296,20 +1319,15 @@ and desugar_expr_init\n           in\n             aa port_stmts [| chan_stmt |]\n \n-      | PEXP_box arg ->\n+      | PEXP_box (mutability, arg) ->\n           let (arg_stmts, arg_mode_atom) =\n             desugar_expr_atom ps arg\n           in\n-          let stmt = ss (Ast.STMT_init_box (dst_lval, arg_mode_atom)) in\n+          let stmt =\n+            ss (Ast.STMT_init_box (dst_lval, mutability, arg_mode_atom))\n+          in\n             aa arg_stmts [| stmt |]\n \n-      | PEXP_mutable arg ->\n-          (* Initializing a local from a \"mutable\" atom is the same as\n-           * initializing it from an immutable one; all locals are mutable\n-           * anyways. So this is just a fall-through.\n-           *)\n-          desugar_expr_init ps dst_lval arg\n-\n       | PEXP_custom (n, a, b) ->\n           let (arg_stmts, args) = desugar_expr_atoms ps a in\n           let stmts ="}, {"sha": "1f268fa1d9a4db232e7cad9e2b0349add89e29d2", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -761,18 +761,18 @@ let trans_crate\n             let trans_tail () = trans_tail_with_builder llbuilder in\n \n             match head.node with\n-                Ast.STMT_init_tup (dest, atoms) ->\n+                Ast.STMT_init_tup (dest, elems) ->\n                   let zero = const_i32 0 in\n                   let lldest = trans_lval dest in\n-                  let trans_tup_atom idx atom =\n+                  let trans_tup_elem idx (_, atom) =\n                     let indices = [| zero; const_i32 idx |] in\n                     let gep_id = anon_llid \"init_tup_gep\" in\n                     let ptr =\n                       Llvm.build_gep lldest indices gep_id llbuilder\n                     in\n                     ignore (Llvm.build_store (trans_atom atom) ptr llbuilder)\n                   in\n-                  Array.iteri trans_tup_atom atoms;\n+                  Array.iteri trans_tup_elem elems;\n                   trans_tail ()\n \n               | Ast.STMT_copy (dest, src) ->"}, {"sha": "148f12497f30aa4185c5e41b0baa432c171df9a6", "filename": "src/boot/me/alias.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Falias.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Falias.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Falias.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -67,7 +67,7 @@ let alias_analysis_visitor\n           | Ast.STMT_recv (dst, _) -> alias dst\n           | Ast.STMT_init_port (dst) -> alias dst\n           | Ast.STMT_init_chan (dst, _) -> alias dst\n-          | Ast.STMT_init_vec (dst, _) -> alias dst\n+          | Ast.STMT_init_vec (dst, _, _) -> alias dst\n           | Ast.STMT_init_str (dst, _) -> alias dst\n           | Ast.STMT_for_each sfe ->\n               let (slot, _) = sfe.Ast.for_each_slot in"}, {"sha": "434fb025c01913e77458c7a1b516212ca1c276d1", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -583,13 +583,13 @@ let atoms_slots (cx:ctxt) (az:Ast.atom array) : node_id array =\n ;;\n \n let tup_inputs_slots (cx:ctxt) (az:Ast.tup_input array) : node_id array =\n-  Array.concat (List.map (atom_slots cx) (Array.to_list az))\n+  Array.concat (List.map (atom_slots cx) (Array.to_list (Array.map snd az)))\n ;;\n \n let rec_inputs_slots (cx:ctxt)\n     (inputs:Ast.rec_input array) : node_id array =\n   Array.concat (List.map\n-                  (fun (_, atom) -> atom_slots cx atom)\n+                  (fun (_, _, atom) -> atom_slots cx atom)\n                   (Array.to_list inputs))\n ;;\n "}, {"sha": "46329a1082e34dc322428d3f142e2b8898b4e153", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -3244,13 +3244,13 @@ let trans_visitor\n       (dst:Il.cell)\n       (dst_tys:Ast.ty array)\n       (trec:Ast.ty_rec)\n-      (atab:(Ast.ident * Ast.atom) array)\n+      (atab:(Ast.ident * Ast.mutability * Ast.atom) array)\n       (base:Ast.lval)\n       : unit =\n     Array.iteri\n       begin\n         fun i (fml_ident, _) ->\n-          let fml_entry _ (act_ident, atom) =\n+          let fml_entry _ (act_ident, _, atom) =\n             if act_ident = fml_ident then Some atom else None\n           in\n           let dst_ty = dst_tys.(i) in\n@@ -4315,15 +4315,15 @@ let trans_visitor\n             begin\n               match base with\n                   None ->\n-                    let atoms = Array.map snd atab in\n+                    let atoms = Array.map (fun (_, _, atom) -> atom) atab in\n                       trans_init_structural_from_atoms\n                         dst_cell dst_tys atoms\n                 | Some base_lval ->\n                     trans_init_rec_update\n                       dst_cell dst_tys trec atab base_lval\n             end\n \n-      | Ast.STMT_init_tup (dst, atoms) ->\n+      | Ast.STMT_init_tup (dst, elems) ->\n           let (slot_cell, ty) = trans_lval_init dst in\n           let dst_tys =\n             match ty with\n@@ -4332,14 +4332,15 @@ let trans_visitor\n                   bugi cx stmt.id\n                     \"non-tup destination type in stmt_init_tup\"\n           in\n+          let atoms = Array.map snd elems in\n           let (dst_cell, _) = deref_ty DEREF_none true slot_cell ty in\n             trans_init_structural_from_atoms dst_cell dst_tys atoms\n \n \n       | Ast.STMT_init_str (dst, s) ->\n           trans_init_str dst s\n \n-      | Ast.STMT_init_vec (dst, atoms) ->\n+      | Ast.STMT_init_vec (dst, _, atoms) ->\n           trans_init_vec dst atoms\n \n       | Ast.STMT_init_port dst ->\n@@ -4357,7 +4358,7 @@ let trans_visitor\n                   trans_init_chan dst p\n           end\n \n-      | Ast.STMT_init_box (dst, src) ->\n+      | Ast.STMT_init_box (dst, _, src) ->\n           trans_init_box dst src\n \n       | Ast.STMT_block block ->"}, {"sha": "4557070808f11a9117eb387d823ad900c86818ad", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -1144,7 +1144,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | Ast.STMT_init_rec (dst, fields, Some base) ->\n             let dct = Hashtbl.create 10 in\n             let tvrec = ref (TYSPEC_record dct) in\n-            let add_field (ident, atom) =\n+            let add_field (ident, _, atom) =\n               let tv = any() in\n                 unify_atom arg_pass_ctx atom tv;\n                 Hashtbl.add dct ident tv\n@@ -1157,7 +1157,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n \n         | Ast.STMT_init_rec (dst, fields, None) ->\n             let dct = Hashtbl.create 10 in\n-            let add_field (ident, atom) =\n+            let add_field (ident, _, atom) =\n               let tv = any() in\n                 unify_atom arg_pass_ctx atom tv;\n                 Hashtbl.add dct ident tv\n@@ -1166,15 +1166,15 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               unify_lval init_ctx dst (ref (TYSPEC_record dct))\n \n         | Ast.STMT_init_tup (dst, members) ->\n-            let member_to_tv atom =\n+            let member_to_tv (_, atom) =\n               let tv = any() in\n                 unify_atom arg_pass_ctx atom tv;\n                 tv\n             in\n             let member_tvs = Array.map member_to_tv members in\n               unify_lval init_ctx dst (ref (TYSPEC_tuple member_tvs))\n \n-        | Ast.STMT_init_vec (dst, atoms) ->\n+        | Ast.STMT_init_vec (dst, _, atoms) ->\n             let tv = any() in\n             let unify_with_tv atom = unify_atom arg_pass_ctx atom tv in\n               Array.iter unify_with_tv atoms;\n@@ -1304,7 +1304,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n         | Ast.STMT_join lval ->\n             unify_lval rval_ctx lval (ty Ast.TY_task);\n \n-        | Ast.STMT_init_box (dst, v) ->\n+        | Ast.STMT_init_box (dst, _, v) ->\n             let in_tv = any() in\n             let tv = ref (TYSPEC_mutable (ref (TYSPEC_box in_tv))) in\n               unify_lval strict_ctx dst tv;"}, {"sha": "cca548b8bf18e840e30fe98ebc0a08b0f067e4bf", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -434,7 +434,7 @@ let condition_assigning_visitor\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_vec (dst, atoms) ->\n+        | Ast.STMT_init_vec (dst, _, atoms) ->\n             let precond = slot_inits (atoms_slots cx atoms) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n@@ -454,7 +454,7 @@ let condition_assigning_visitor\n               raise_pre_post_cond s.id precond;\n               raise_postcondition s.id postcond\n \n-        | Ast.STMT_init_box (dst, src) ->\n+        | Ast.STMT_init_box (dst, _, src) ->\n             let precond = slot_inits (atom_slots cx src) in\n             let postcond = slot_inits (lval_slots cx dst) in\n               raise_pre_post_cond s.id precond;\n@@ -1106,11 +1106,11 @@ let lifecycle_visitor\n \n           | Ast.STMT_init_rec (lv_dst, _, _)\n           | Ast.STMT_init_tup (lv_dst, _)\n-          | Ast.STMT_init_vec (lv_dst, _)\n+          | Ast.STMT_init_vec (lv_dst, _, _)\n           | Ast.STMT_init_str (lv_dst, _)\n           | Ast.STMT_init_port lv_dst\n           | Ast.STMT_init_chan (lv_dst, _)\n-          | Ast.STMT_init_box (lv_dst, _) ->\n+          | Ast.STMT_init_box (lv_dst, _, _) ->\n               init_lval lv_dst\n \n           | Ast.STMT_for f ->"}, {"sha": "fac44170d703ee124d9d6375b38a38d4341f7094", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -386,16 +386,16 @@ and walk_stmt\n \n       | Ast.STMT_init_rec (lv, atab, base) ->\n           walk_lval v lv;\n-          Array.iter (fun (_, a) -> walk_atom v a) atab;\n+          Array.iter (fun (_, _, a) -> walk_atom v a) atab;\n           walk_option (walk_lval v) base;\n \n-      | Ast.STMT_init_vec (lv, atoms) ->\n+      | Ast.STMT_init_vec (lv, _, atoms) ->\n           walk_lval v lv;\n           Array.iter (walk_atom v) atoms\n \n       | Ast.STMT_init_tup (lv, mut_atoms) ->\n           walk_lval v lv;\n-          Array.iter (walk_atom v) mut_atoms\n+          Array.iter (fun (_, atom) -> walk_atom v atom) mut_atoms\n \n       | Ast.STMT_init_str (lv, _) ->\n           walk_lval v lv\n@@ -407,7 +407,7 @@ and walk_stmt\n           walk_option (walk_lval v) port;\n           walk_lval v chan;\n \n-      | Ast.STMT_init_box (dst, src) ->\n+      | Ast.STMT_init_box (dst, _, src) ->\n           walk_lval v dst;\n           walk_atom v src\n "}, {"sha": "f09ee8234e35dc235453871881756758ba7a243d", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -9,7 +9,7 @@ fn f(@point p) {\n }\n \n fn main() {\n-  let point a = rec(x=10, y=11, z=mutable 12);\n+  let point a = rec(x=10, y=11, mutable z=12);\n   let @point b = @a;\n   check (b.z == 12);\n   f(b);"}, {"sha": "8bf8140f315805566e42599cbe3c3a4f3960d9df", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b675a021a73a3dfa09079790a50302aeb6d1616/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=0b675a021a73a3dfa09079790a50302aeb6d1616", "patch": "@@ -7,7 +7,7 @@ fn f(& mutable point p) {\n }\n \n fn main() {\n-  let point x = rec(x=10, y=11, z=mutable 12);\n+  let point x = rec(x=10, y=11, mutable z=12);\n   f(x);\n   check (x.z == 13);\n }"}]}