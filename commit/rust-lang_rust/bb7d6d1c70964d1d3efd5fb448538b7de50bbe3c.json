{"sha": "bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2Q2ZDFjNzA5NjRkMWQzZWZkNWZiNDQ4NTM4YjdkZTUwYmJlM2M=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-07T21:15:19Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:55Z"}, "message": "Prepare renumber MutVisitor to have projections interned", "tree": {"sha": "7922760d2ac3099fbcb92a18d2b2d71090a2b2ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7922760d2ac3099fbcb92a18d2b2d71090a2b2ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHj8ACgkQiMlBzaHU\nZDIfjg//YHfhH9QtfxiYFrYVv7wCgln3XExKXfRThNcxt53IL5dE2EaGr3ANKeB3\nrvubQkYpbMVIYf/hx9HVFwHjPYSyLArxEQWmptZstkw5m+u2C5itkigrczT+yurw\nPIifCg1Hc0tdjgqljqtrNtyh7ZnuNywYfMARbunRF/u0VzvxsBcrThwANe3Kfoqd\nIe0ahW6B7cuAAZZd9p19Je8S/Ul/eq6qrf042yftlaT8HUJGUmw8V+8c0aFx0qkD\nYVkMQrpEu/zDKym2W7isnoXO9nubHL52tGzghIedUFnPV2xtZoslsgofiMMeJSmT\nCtoslHyXTB7cFB72PYn43jUQZ11lIVOv8pHElCgkXZR8X2NPhuOBaf72h7fuBoi2\nBa8XY9tqF2eCa5gRxZ+aGdq5sswlN+TtilWc5mMoiPFZfrOZLrNa9KcqlH/nEjZ1\nSe10EAB+0TPlm1/a3lIlAZUIdinDVIN2l+4a1N/P+FuoFzT98tKXLZc7HKDhlk8q\nbJUDlWte48IkmQc8m9KdRIJwT3VkSz3ur+YTUdqyeX+5D8BzChIW2ortlctKKC2y\nmb90NPYbt069QKQq7XKSNvGzwSfRI8ZmXX9kGAXaulJ9kwHZLKrA0y/FqvJUY1/r\nefmz+G0LglGbOM94Wb/rb3liAQAf67qLElx73xO/Bl8v4EQVDMY=\n=xgQz\n-----END PGP SIGNATURE-----", "payload": "tree 7922760d2ac3099fbcb92a18d2b2d71090a2b2ff\nparent 591cc9aede4aec9b8816b8489eb98c2f2a3bfe90\nauthor Santiago Pastorino <spastorino@gmail.com> 1570482919 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364415 -0400\n\nPrepare renumber MutVisitor to have projections interned\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "html_url": "https://github.com/rust-lang/rust/commit/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "591cc9aede4aec9b8816b8489eb98c2f2a3bfe90", "url": "https://api.github.com/repos/rust-lang/rust/commits/591cc9aede4aec9b8816b8489eb98c2f2a3bfe90", "html_url": "https://github.com/rust-lang/rust/commit/591cc9aede4aec9b8816b8489eb98c2f2a3bfe90"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "6eb5735cb16baac16a6e6045fee721669b291978", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=bb7d6d1c70964d1d3efd5fb448538b7de50bbe3c", "patch": "@@ -1,7 +1,7 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::mir::{Location, Body, Promoted};\n-use rustc::mir::visit::{MutVisitor, TyContext};\n+use rustc::mir::{Body, Location, Place, PlaceElem, Promoted};\n+use rustc::mir::visit::{MutVisitor, PlaceContext, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_index::vec::IndexVec;\n \n@@ -62,6 +62,25 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n+        self.visit_place_base(&mut place.base, context, location);\n+\n+        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n+            if let PlaceElem::Field(field, ty) = elem {\n+                PlaceElem::Field(*field, self.renumber_regions(ty))\n+            } else {\n+                elem.clone()\n+            }\n+        ).collect();\n+\n+        place.projection = new_projection.into_boxed_slice();\n+    }\n+\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n "}]}