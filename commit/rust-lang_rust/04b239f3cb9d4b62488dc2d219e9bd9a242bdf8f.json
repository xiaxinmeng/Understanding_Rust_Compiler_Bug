{"sha": "04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjIzOWYzY2I5ZDRiNjI0ODhkYzJkMjE5ZTliZDlhMjQyYmRmOGY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-13T22:30:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-13T22:30:30Z"}, "message": "Use more precise spans in error messages for bad FRU exprs\n\nThe type error message for an expression using FRU where a field\nexpression had the wrong type was using the span for the entire\nexpression. Fixed it to use the span for the individual field.\n\nCloses #628.", "tree": {"sha": "a947b3c65d71fc7aedba30b9ea3f230cae7d8d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a947b3c65d71fc7aedba30b9ea3f230cae7d8d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f", "html_url": "https://github.com/rust-lang/rust/commit/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b86dcde676ad0640e4a35f33ef0e49429cdc9b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b86dcde676ad0640e4a35f33ef0e49429cdc9b7", "html_url": "https://github.com/rust-lang/rust/commit/6b86dcde676ad0640e4a35f33ef0e49429cdc9b7"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "bfbd00b6cd7f7e85916e96c18f727a8b24ef0d2a", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=04b239f3cb9d4b62488dc2d219e9bd9a242bdf8f", "patch": "@@ -4,6 +4,7 @@ import ast::mutability;\n import ast::local_def;\n import ast::path_to_str;\n import ast::respan;\n+import ast::spanned;\n import syntax::walk;\n import metadata::csearch;\n import driver::session;\n@@ -2177,16 +2178,21 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 case (none) {/* no-op */ }\n                 case (some(?b_0)) { check_expr(fcx, b_0); }\n             }\n-            let field[] fields_t = ~[];\n+            let (spanned[field])[] fields_t = ~[];\n             for (ast::field f in fields) {\n                 check_expr(fcx, f.node.expr);\n                 auto expr_t = expr_ty(fcx.ccx.tcx, f.node.expr);\n                 auto expr_mt = rec(ty=expr_t, mut=f.node.mut);\n-                fields_t += ~[rec(ident=f.node.ident, mt=expr_mt)];\n+                // for the most precise error message,\n+                // should be f.node.expr.span, not f.span\n+                fields_t += ~[respan(f.node.expr.span,\n+                                     rec(ident=f.node.ident, mt=expr_mt))];\n             }\n             alt (base) {\n                 case (none) {\n-                    auto typ = ty::mk_rec(fcx.ccx.tcx, fields_t);\n+                    fn get_node(&spanned[field] f) -> field { f.node }\n+                    auto typ = ty::mk_rec(fcx.ccx.tcx, \n+                                          ivec::map(get_node, fields_t));\n                     write::ty_only_fixup(fcx, id, typ);\n                 }\n                 case (some(?bexpr)) {\n@@ -2202,20 +2208,20 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                         }\n                     }\n                     write::ty_only_fixup(fcx, id, bexpr_t);\n-                    for (ty::field f in fields_t) {\n+                    for (spanned[ty::field] f in fields_t) {\n                         auto found = false;\n                         for (ty::field bf in base_fields) {\n-                            if (str::eq(f.ident, bf.ident)) {\n-                                demand::simple(fcx, expr.span, bf.mt.ty,\n-                                               f.mt.ty);\n+                            if (str::eq(f.node.ident, bf.ident)) {\n+                                demand::simple(fcx, f.span, bf.mt.ty,\n+                                               f.node.mt.ty);\n                                 found = true;\n                             }\n                         }\n                         if (!found) {\n-                            fcx.ccx.tcx.sess.span_fatal(expr.span,\n+                            fcx.ccx.tcx.sess.span_fatal(f.span,\n                                                       \"unknown field in \\\n                                                        record update: \"\n-                                                      + f.ident);\n+                                                      + f.node.ident);\n                         }\n                     }\n                 }"}]}