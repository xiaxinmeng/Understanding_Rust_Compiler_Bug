{"sha": "65ac1e92fe0f77ce5d64960c32c6fa074e1442ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YWMxZTkyZmUwZjc3Y2U1ZDY0OTYwYzMyYzZmYTA3NGUxNDQyY2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-07T18:13:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-07T18:13:17Z"}, "message": "Add missing urls in some macros doc", "tree": {"sha": "78c005e367809ec535f2e2a97f849bd5009e0325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78c005e367809ec535f2e2a97f849bd5009e0325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce", "html_url": "https://github.com/rust-lang/rust/commit/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bc48a15a7ef23ba795a77d6eb72e4f873373b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bc48a15a7ef23ba795a77d6eb72e4f873373b4", "html_url": "https://github.com/rust-lang/rust/commit/11bc48a15a7ef23ba795a77d6eb72e4f873373b4"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "b22f7fa17077b7890940b0ac82ba331d685d3e7f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ac1e92fe0f77ce5d64960c32c6fa074e1442ce/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=65ac1e92fe0f77ce5d64960c32c6fa074e1442ce", "patch": "@@ -32,11 +32,11 @@ macro_rules! panic {\n \n /// Ensure that a boolean expression is `true` at runtime.\n ///\n-/// This will invoke the `panic!` macro if the provided expression cannot be\n+/// This will invoke the [`panic!`] macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n /// Assertions are always checked in both debug and release builds, and cannot\n-/// be disabled. See `debug_assert!` for assertions that are not enabled in\n+/// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n /// release builds by default.\n ///\n /// Unsafe code relies on `assert!` to enforce run-time invariants that, if\n@@ -48,6 +48,8 @@ macro_rules! panic {\n /// This macro has a second version, where a custom panic message can\n /// be provided with or without arguments for formatting.\n ///\n+/// [`panic!`]: macro.panic.html\n+/// [`debug_assert!`]: macro.debug_assert.html\n /// [testing]: ../book/testing.html\n ///\n /// # Examples\n@@ -88,9 +90,11 @@ macro_rules! assert {\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Like `assert!()`, this macro has a second version, where a custom\n+/// Like [`assert!()`], this macro has a second version, where a custom\n /// panic message can be provided.\n ///\n+/// [`assert!()`]: macro.assert.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -134,6 +138,8 @@ macro_rules! assert_eq {\n /// Like `assert!()`, this macro has a second version, where a custom\n /// panic message can be provided.\n ///\n+/// [`assert!`]: macro.assert.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -171,13 +177,13 @@ macro_rules! assert_ne {\n \n /// Ensure that a boolean expression is `true` at runtime.\n ///\n-/// This will invoke the `panic!` macro if the provided expression cannot be\n+/// This will invoke the [`panic!`] macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n-/// Like `assert!`, this macro also has a second version, where a custom panic\n+/// Like [`assert!`], this macro also has a second version, where a custom panic\n /// message can be provided.\n ///\n-/// Unlike `assert!`, `debug_assert!` statements are only enabled in non\n+/// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n /// optimized builds by default. An optimized build will omit all\n /// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert!` useful for checks that are too\n@@ -187,10 +193,13 @@ macro_rules! assert_ne {\n /// An unchecked assertion allows a program in an inconsistent state to keep\n /// running, which might have unexpected consequences but does not introduce\n /// unsafety as long as this only happens in safe code. The performance cost\n-/// of assertions, is however, not measurable in general. Replacing `assert!`\n+/// of assertions, is however, not measurable in general. Replacing [`assert!`]\n /// with `debug_assert!` is thus only encouraged after thorough profiling, and\n /// more importantly, only in safe code!\n ///\n+/// [`panic!`]: macro.panic.html\n+/// [`assert!`]: macro.assert.html\n+///\n /// # Examples\n ///\n /// ```"}]}