{"sha": "d290dec97f8bace2a2585505518b109b1e368f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTBkZWM5N2Y4YmFjZTJhMjU4NTUwNTUxOGIxMDliMWUzNjhmNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T12:48:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-10T12:48:55Z"}, "message": "Auto merge of #44474 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 13 pull requests\n\n- Successful merges: #44262, #44329, #44332, #44347, #44372, #44384, #44387, #44396, #44449, #44451, #44457, #44464, #44467\n- Failed merges:", "tree": {"sha": "b3973604ffde6b7dce3897b531a7faaf8c0aeb69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3973604ffde6b7dce3897b531a7faaf8c0aeb69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d290dec97f8bace2a2585505518b109b1e368f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d290dec97f8bace2a2585505518b109b1e368f4c", "html_url": "https://github.com/rust-lang/rust/commit/d290dec97f8bace2a2585505518b109b1e368f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d290dec97f8bace2a2585505518b109b1e368f4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23aaeb573b626a51af9ecc97680663153e4ab2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/23aaeb573b626a51af9ecc97680663153e4ab2b0", "html_url": "https://github.com/rust-lang/rust/commit/23aaeb573b626a51af9ecc97680663153e4ab2b0"}, {"sha": "8a7d93bf6f5b1a699bafec6f59964a3962b2e927", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7d93bf6f5b1a699bafec6f59964a3962b2e927", "html_url": "https://github.com/rust-lang/rust/commit/8a7d93bf6f5b1a699bafec6f59964a3962b2e927"}], "stats": {"total": 263, "additions": 158, "deletions": 105}, "files": [{"sha": "f0c63a2eb55d5cb99f58c2861f8e3e7b2f428a4f", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -297,6 +297,34 @@ impl str {\n     /// [`str::from_utf8_mut`] function.\n     ///\n     /// [`str::from_utf8_mut`]: ./str/fn.from_utf8_mut.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let mut s = String::from(\"Hello\");\n+    /// let bytes = unsafe { s.as_bytes_mut() };\n+    ///\n+    /// assert_eq!(b\"Hello\", bytes);\n+    /// ```\n+    ///\n+    /// Mutability:\n+    ///\n+    /// ```\n+    /// let mut s = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n+    ///\n+    /// unsafe {\n+    ///     let bytes = s.as_bytes_mut();\n+    ///\n+    ///     bytes[0] = 0xF0;\n+    ///     bytes[1] = 0x9F;\n+    ///     bytes[2] = 0x8D;\n+    ///     bytes[3] = 0x94;\n+    /// }\n+    ///\n+    /// assert_eq!(\"\ud83c\udf54\u2208\ud83c\udf0f\", s);\n+    /// ```\n     #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n     #[inline(always)]\n     pub unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n@@ -362,16 +390,25 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n-    /// let mut v = String::from(\"\ud83d\uddfb\u2208\ud83c\udf0f\");\n-    ///\n-    /// assert_eq!(Some(\"\ud83d\uddfb\"), v.get_mut(0..4).map(|v| &*v));\n-    ///\n-    /// // indices not on UTF-8 sequence boundaries\n-    /// assert!(v.get_mut(1..).is_none());\n-    /// assert!(v.get_mut(..8).is_none());\n+    /// use std::ascii::AsciiExt;\n     ///\n+    /// let mut v = String::from(\"hello\");\n+    /// // correct length\n+    /// assert!(v.get_mut(0..5).is_some());\n     /// // out of bounds\n     /// assert!(v.get_mut(..42).is_none());\n+    /// assert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n+    ///\n+    /// assert_eq!(\"hello\", v);\n+    /// {\n+    ///     let s = v.get_mut(0..2);\n+    ///     let s = s.map(|s| {\n+    ///         s.make_ascii_uppercase();\n+    ///         &*s\n+    ///     });\n+    ///     assert_eq!(Some(\"HE\"), s);\n+    /// }\n+    /// assert_eq!(\"HEllo\", v);\n     /// ```\n     #[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]\n     #[inline]"}, {"sha": "1708f3e398756d493b22d8ec6c8810363c6ede06", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -743,6 +743,16 @@ impl String {\n     }\n \n     /// Extracts a string slice containing the entire string.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let s = String::from(\"foo\");\n+    ///\n+    /// assert_eq!(\"foo\", s.as_str());\n+    /// ```\n     #[inline]\n     #[stable(feature = \"string_as_str\", since = \"1.7.0\")]\n     pub fn as_str(&self) -> &str {"}, {"sha": "599d79104c3b073b51e7ff30c47f0279f69650d3", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -221,7 +221,7 @@ mod platform {\n         }\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"redox\"))]\n+    #[cfg(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\"))]\n     #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n         // On android we currently target API level 9 which unfortunately\n@@ -244,7 +244,7 @@ mod platform {\n         libc::memalign(layout.align(), layout.size()) as *mut u8\n     }\n \n-    #[cfg(not(any(target_os = \"android\", target_os = \"redox\")))]\n+    #[cfg(not(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\")))]\n     #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n         let mut out = ptr::null_mut();"}, {"sha": "38ffaf97aa418cc369ca0197a72a0b927cc0f622", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -1 +1 @@\n-Subproject commit 6b9281d2b2f0ebb94838814b1e8ace2de4b7035b\n+Subproject commit 38ffaf97aa418cc369ca0197a72a0b927cc0f622"}, {"sha": "3e802c8be5bf4f3569648b76e06162b128e05e26", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -383,16 +383,16 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         };\n                         let msg_str = Symbol::intern(str).as_str();\n                         let msg_str = C_str_slice(bcx.ccx, msg_str);\n-                        let msg_file_line = C_struct(bcx.ccx,\n-                                                     &[msg_str, filename, line],\n+                        let msg_file_line_col = C_struct(bcx.ccx,\n+                                                     &[msg_str, filename, line, col],\n                                                      false);\n-                        let align = llalign_of_min(bcx.ccx, common::val_ty(msg_file_line));\n-                        let msg_file_line = consts::addr_of(bcx.ccx,\n-                                                            msg_file_line,\n-                                                            align,\n-                                                            \"panic_loc\");\n+                        let align = llalign_of_min(bcx.ccx, common::val_ty(msg_file_line_col));\n+                        let msg_file_line_col = consts::addr_of(bcx.ccx,\n+                                                                msg_file_line_col,\n+                                                                align,\n+                                                                \"panic_loc\");\n                         (lang_items::PanicFnLangItem,\n-                         vec![msg_file_line],\n+                         vec![msg_file_line_col],\n                          None)\n                     }\n                 };"}, {"sha": "8ddfb5b3050b0f8220a9f8cc8f3b547922caff3a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -1554,9 +1554,12 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);\n     if repr_type_ty == tcx.types.i128 || repr_type_ty == tcx.types.u128 {\n-        if !tcx.sess.features.borrow().i128_type {\n+        if !tcx.sess.features.borrow().repr128 {\n             emit_feature_err(&tcx.sess.parse_sess,\n-                             \"i128_type\", sp, GateIssue::Language, \"128-bit type is unstable\");\n+                             \"repr128\",\n+                             sp,\n+                             GateIssue::Language,\n+                             \"repr with 128-bit type is unstable\");\n         }\n     }\n "}, {"sha": "49d4bd2324033dbaeb3c3d327aee8c6afd96e7eb", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 83, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -606,12 +606,20 @@ pub fn run(mut krate: clean::Crate,\n }\n \n // A short, single-line view of `s`.\n-fn concise_str(s: &str) -> String {\n+fn concise_str(mut s: &str) -> String {\n     if s.contains('\\n') {\n-        return format!(\"{}...\", s.lines().next().expect(\"Impossible! We just found a newline\"));\n+        s = s.lines().next().expect(\"Impossible! We just found a newline\");\n     }\n     if s.len() > 70 {\n-        return format!(\"{} ... {}\", &s[..50], &s[s.len()-20..]);\n+        let mut lo = 50;\n+        let mut hi = s.len() - 20;\n+        while !s.is_char_boundary(lo) {\n+            lo -= 1;\n+        }\n+        while !s.is_char_boundary(hi) {\n+            hi += 1;\n+        }\n+        return format!(\"{} ... {}\", &s[..lo], &s[hi..]);\n     }\n     s.to_owned()\n }\n@@ -660,9 +668,13 @@ fn render_difference(diff: &html_diff::Difference) {\n                      elem.path, elem.element_name, elem_attributes, opposite_elem_attributes);\n         }\n         html_diff::Difference::NodeText { ref elem, ref elem_text, ref opposite_elem_text, .. } => {\n-            let (s1, s2) = concise_compared_strs(elem_text, opposite_elem_text);\n-            println!(\"    {} Text differs:\\n        expected: `{}`\\n        found:    `{}`\",\n-                     elem.path, s1, s2);\n+            if elem_text.split(\"\\n\")\n+                        .zip(opposite_elem_text.split(\"\\n\"))\n+                        .any(|(a, b)| a.trim() != b.trim()) {\n+                let (s1, s2) = concise_compared_strs(elem_text, opposite_elem_text);\n+                println!(\"    {} Text differs:\\n        expected: `{}`\\n        found:    `{}`\",\n+                         elem.path, s1, s2);\n+            }\n         }\n         html_diff::Difference::NotPresent { ref elem, ref opposite_elem } => {\n             if let Some(ref elem) = *elem {\n@@ -1756,18 +1768,18 @@ fn render_markdown(w: &mut fmt::Formatter,\n     // We only emit warnings if the user has opted-in to Pulldown rendering.\n     let output = if render_type == RenderType::Pulldown {\n         let pulldown_output = format!(\"{}\", Markdown(md_text, RenderType::Pulldown));\n-        let differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n-        let differences = differences.into_iter()\n-            .filter(|s| {\n-                match *s {\n-                    html_diff::Difference::NodeText { ref elem_text,\n-                                                      ref opposite_elem_text,\n-                                                      .. }\n-                        if match_non_whitespace(elem_text, opposite_elem_text) => false,\n-                    _ => true,\n+        let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+        differences.retain(|s| {\n+            match *s {\n+                html_diff::Difference::NodeText { ref elem_text,\n+                                                  ref opposite_elem_text,\n+                                                  .. }\n+                    if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n+                        false\n                 }\n-            })\n-            .collect::<Vec<_>>();\n+                _ => true,\n+            }\n+        });\n \n         if !differences.is_empty() {\n             scx.markdown_warnings.borrow_mut().push((span, md_text.to_owned(), differences));\n@@ -1781,40 +1793,6 @@ fn render_markdown(w: &mut fmt::Formatter,\n     write!(w, \"<div class='docblock'>{}{}</div>\", prefix, output)\n }\n \n-// Returns true iff s1 and s2 match, ignoring whitespace.\n-fn match_non_whitespace(s1: &str, s2: &str) -> bool {\n-    let s1 = s1.trim();\n-    let s2 = s2.trim();\n-    let mut cs1 = s1.chars();\n-    let mut cs2 = s2.chars();\n-    while let Some(c1) = cs1.next() {\n-        if c1.is_whitespace() {\n-            continue;\n-        }\n-\n-        loop {\n-            if let Some(c2) = cs2.next() {\n-                if !c2.is_whitespace() {\n-                    if c1 != c2 {\n-                        return false;\n-                    }\n-                    break;\n-                }\n-            } else {\n-                return false;\n-            }\n-        }\n-    }\n-\n-    while let Some(c2) = cs2.next() {\n-        if !c2.is_whitespace() {\n-            return false;\n-        }\n-    }\n-\n-    true\n-}\n-\n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n                   cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n@@ -3791,35 +3769,3 @@ fn test_name_sorting() {\n     sorted.sort_by_key(|&s| name_key(s));\n     assert_eq!(names, sorted);\n }\n-\n-#[cfg(test)]\n-#[test]\n-fn test_match_non_whitespace() {\n-    assert!(match_non_whitespace(\"\", \"\"));\n-    assert!(match_non_whitespace(\"  \", \"\"));\n-    assert!(match_non_whitespace(\"\", \"  \"));\n-\n-    assert!(match_non_whitespace(\"a\", \"a\"));\n-    assert!(match_non_whitespace(\" a \", \"a\"));\n-    assert!(match_non_whitespace(\"a\", \"  a\"));\n-    assert!(match_non_whitespace(\"abc\", \"abc\"));\n-    assert!(match_non_whitespace(\"abc\", \" abc \"));\n-    assert!(match_non_whitespace(\"abc  \", \"abc\"));\n-    assert!(match_non_whitespace(\"abc xyz\", \"abc xyz\"));\n-    assert!(match_non_whitespace(\"abc xyz\", \"abc\\nxyz\"));\n-    assert!(match_non_whitespace(\"abc xyz\", \"abcxyz\"));\n-    assert!(match_non_whitespace(\"abcxyz\", \"abc xyz\"));\n-    assert!(match_non_whitespace(\"abc    xyz \", \" abc xyz\\n\"));\n-\n-    assert!(!match_non_whitespace(\"a\", \"b\"));\n-    assert!(!match_non_whitespace(\" a \", \"c\"));\n-    assert!(!match_non_whitespace(\"a\", \"  aa\"));\n-    assert!(!match_non_whitespace(\"abc\", \"ac\"));\n-    assert!(!match_non_whitespace(\"abc\", \" adc \"));\n-    assert!(!match_non_whitespace(\"abc  \", \"abca\"));\n-    assert!(!match_non_whitespace(\"abc xyz\", \"abc xy\"));\n-    assert!(!match_non_whitespace(\"abc xyz\", \"bc\\nxyz\"));\n-    assert!(!match_non_whitespace(\"abc xyz\", \"abc.xyz\"));\n-    assert!(!match_non_whitespace(\"abcxyz\", \"abc.xyz\"));\n-    assert!(!match_non_whitespace(\"abc    xyz \", \" abc xyz w\"));\n-}"}, {"sha": "21f0b3724c13066883416d8eaf41e2f7278d1f0a", "filename": "src/libstd/sys/unix/backtrace/printing/dladdr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Fdladdr.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -22,7 +22,8 @@ pub fn resolve_symname<F>(frame: Frame,\n {\n     unsafe {\n         let mut info: Dl_info = intrinsics::init();\n-        let symname = if dladdr(frame.exact_position, &mut info) == 0 {\n+        let symname = if dladdr(frame.exact_position, &mut info) == 0 ||\n+                         info.dli_sname.is_null() {\n             None\n         } else {\n             CStr::from_ptr(info.dli_sname).to_str().ok()"}, {"sha": "a53c76a333a99dbc576ec72411c5da6433ea3df1", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -31,6 +31,10 @@ use mem;\n /// within a thread, and values that implement [`Drop`] get destructed when a\n /// thread exits. Some caveats apply, which are explained below.\n ///\n+/// A `LocalKey`'s initializer cannot recursively depend on itself, and using\n+/// a `LocalKey` in this way will cause the initializer to infinitely recurse\n+/// on the first call to `with`.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "e9e9c6bf4eacaf730b855692388445b2ca2182c2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -312,6 +312,9 @@ declare_features! (\n     // The `i128` type\n     (active, i128_type, \"1.16.0\", Some(35118)),\n \n+    // The `repr(i128)` annotation for enums\n+    (active, repr128, \"1.16.0\", Some(35118)),\n+\n     // The `unadjusted` ABI. Perma unstable.\n     (active, abi_unadjusted, \"1.16.0\", None),\n "}, {"sha": "a52d048830715204b7effef8c87d5e2ea55ff7b6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -4699,7 +4699,7 @@ impl<'a> Parser<'a> {\n                     SeqSep::trailing_allowed(token::Comma),\n                     |p| p.parse_fn_block_arg()\n                 );\n-                self.bump();\n+                self.expect(&token::BinOp(token::Or))?;\n                 args\n             }\n         };"}, {"sha": "96fffa6cdd0dcee0625459da8023f981709789f7", "filename": "src/test/compile-fail/feature-gate-repr128.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr128.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u128)]\n+enum A { //~ ERROR repr with 128-bit type is unstable\n+    //~| HELP: add #![feature(repr128)]\n+    A(u64)\n+}\n+\n+fn main() {}"}, {"sha": "31bc21c23ba5f08e1f2306a097717b9f4d041986", "filename": "src/test/compile-fail/issue-41229-ref-str.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn example(ref s: str) {}\n+//~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+//~| `str` does not have a constant size known at compile-time\n+//~| the trait `std::marker::Sized` is not implemented for `str`\n+\n+fn main() {}"}, {"sha": "b6ec21b94c73f5661a75a98bd4a0573144bd7a89", "filename": "src/test/compile-fail/issue-44021.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Fissue-44021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d290dec97f8bace2a2585505518b109b1e368f4c/src%2Ftest%2Fcompile-fail%2Fissue-44021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44021.rs?ref=d290dec97f8bace2a2585505518b109b1e368f4c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyStruct;\n+impl MyStruct {\n+    fn f() {|x, y} //~ ERROR expected one of `:`, `@`, or `|`, found `}`\n+}\n+\n+fn main() {}"}]}