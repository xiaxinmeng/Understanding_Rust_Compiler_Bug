{"sha": "d37cee3b0e859a1303ece1cade3176cc150d28b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzN2NlZTNiMGU4NTlhMTMwM2VjZTFjYWRlMzE3NmNjMTUwZDI4YjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T00:34:12Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-22T15:05:50Z"}, "message": "Rename ty::TyVariants to ty::TyKind", "tree": {"sha": "2ff894257ebb606980f20bdfa20778c91aae37ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff894257ebb606980f20bdfa20778c91aae37ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d37cee3b0e859a1303ece1cade3176cc150d28b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d37cee3b0e859a1303ece1cade3176cc150d28b4", "html_url": "https://github.com/rust-lang/rust/commit/d37cee3b0e859a1303ece1cade3176cc150d28b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d37cee3b0e859a1303ece1cade3176cc150d28b4/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87c7e5702021542f4b73b49f6023b33d1f0ef2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c7e5702021542f4b73b49f6023b33d1f0ef2eb", "html_url": "https://github.com/rust-lang/rust/commit/87c7e5702021542f4b73b49f6023b33d1f0ef2eb"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "7e40d634def20db7e941d403fae9152eed20322d", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -797,12 +797,12 @@ impl_stable_hash_for!(enum ty::BoundRegion {\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ty::TypeVariants<'gcx>\n+for ty::TyKind<'gcx>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use ty::TypeVariants::*;\n+        use ty::TyKind::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n@@ -905,7 +905,7 @@ for ty::TyVid\n                                           _hasher: &mut StableHasher<W>) {\n         // TyVid values are confined to an inference context and hence\n         // should not be hashed.\n-        bug!(\"ty::TypeVariants::hash_stable() - can't hash a TyVid {:?}.\", *self)\n+        bug!(\"ty::TyKind::hash_stable() - can't hash a TyVid {:?}.\", *self)\n     }\n }\n \n@@ -917,7 +917,7 @@ for ty::IntVid\n                                           _hasher: &mut StableHasher<W>) {\n         // IntVid values are confined to an inference context and hence\n         // should not be hashed.\n-        bug!(\"ty::TypeVariants::hash_stable() - can't hash an IntVid {:?}.\", *self)\n+        bug!(\"ty::TyKind::hash_stable() - can't hash an IntVid {:?}.\", *self)\n     }\n }\n \n@@ -929,7 +929,7 @@ for ty::FloatVid\n                                           _hasher: &mut StableHasher<W>) {\n         // FloatVid values are confined to an inference context and hence\n         // should not be hashed.\n-        bug!(\"ty::TypeVariants::hash_stable() - can't hash a FloatVid {:?}.\", *self)\n+        bug!(\"ty::TyKind::hash_stable() - can't hash a FloatVid {:?}.\", *self)\n     }\n }\n "}, {"sha": "b9b48505efbea1787ec99181ab23ef6e28c8c92e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -66,7 +66,7 @@ use hir::map as hir_map;\n use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n-use ty::{self, subst::Subst, Region, Ty, TyCtxt, TypeFoldable, TypeVariants};\n+use ty::{self, subst::Subst, Region, Ty, TyCtxt, TypeFoldable, TyKind};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -979,14 +979,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n                         let (def_id, ret_ty) = match exp_found.found.sty {\n-                            TypeVariants::TyFnDef(def, _) => {\n+                            TyKind::TyFnDef(def, _) => {\n                                 (Some(def), Some(self.tcx.fn_sig(def).output()))\n                             }\n                             _ => (None, None),\n                         };\n \n                         let exp_is_struct = match exp_found.expected.sty {\n-                            TypeVariants::TyAdt(def, _) => def.is_struct(),\n+                            TyKind::TyAdt(def, _) => def.is_struct(),\n                             _ => false,\n                         };\n "}, {"sha": "a85170c1edf67e465dd7422e89685b6719f54582", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -236,7 +236,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 self.handle_field_access(&lhs, expr.id);\n             }\n             hir::ExprKind::Struct(_, ref fields, _) => {\n-                if let ty::TypeVariants::TyAdt(ref adt, _) = self.tables.expr_ty(expr).sty {\n+                if let ty::TyKind::TyAdt(ref adt, _) = self.tables.expr_ty(expr).sty {\n                     self.mark_as_used_if_union(adt, fields);\n                 }\n             }"}, {"sha": "dc491db9eeca62e047d2347edb86bb2e9d8da1d9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -2221,7 +2221,7 @@ impl<'tcx> Debug for Constant<'tcx> {\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n-    use ty::TypeVariants::*;\n+    use ty::TyKind::*;\n     let value = const_val.val;\n     let ty = const_val.ty;\n     // print some primitives"}, {"sha": "961a66b229f564a705118493eef17493a19a4f2c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -802,7 +802,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let expected = match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n                     ty::TyTuple(ref tys) => tys.iter()\n                         .map(|t| match t.sty {\n-                            ty::TypeVariants::TyTuple(ref tys) => ArgKind::Tuple(\n+                            ty::TyKind::TyTuple(ref tys) => ArgKind::Tuple(\n                                 Some(span),\n                                 tys.iter()\n                                     .map(|ty| (\"_\".to_owned(), ty.sty.to_string()))\n@@ -899,7 +899,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             let mut trait_type = trait_ref.self_ty();\n \n             for refs_remaining in 0..refs_number {\n-                if let ty::TypeVariants::TyRef(_, t_type, _) = trait_type.sty {\n+                if let ty::TyKind::TyRef(_, t_type, _) = trait_type.sty {\n                     trait_type = t_type;\n \n                     let substs = self.tcx.mk_substs_trait(trait_type, &[]);"}, {"sha": "cc3e8a458a01fe698d75f0697d8cbcce447742e5", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -37,7 +37,7 @@ pub trait EncodableWithShorthand: Clone + Eq + Hash {\n }\n \n impl<'tcx> EncodableWithShorthand for Ty<'tcx> {\n-    type Variant = ty::TypeVariants<'tcx>;\n+    type Variant = ty::TyKind<'tcx>;\n     fn variant(&self) -> &Self::Variant {\n         &self.sty\n     }\n@@ -164,7 +164,7 @@ pub fn decode_ty<'a, 'tcx, D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n         })\n     } else {\n         let tcx = decoder.tcx();\n-        Ok(tcx.mk_ty(ty::TypeVariants::decode(decoder)?))\n+        Ok(tcx.mk_ty(ty::TyKind::decode(decoder)?))\n     }\n }\n "}, {"sha": "099c05a61ef1979cb76fba18d548e8a128932ebb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -38,12 +38,12 @@ use ty::ReprOptions;\n use traits;\n use traits::{Clause, Clauses, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n-use ty::{TyS, TypeVariants, List};\n+use ty::{TyS, TyKind, List};\n use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use ty::RegionKind;\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n-use ty::TypeVariants::*;\n+use ty::TyKind::*;\n use ty::GenericParamDefKind;\n use ty::layout::{LayoutDetails, TargetDataLayout};\n use ty::query;\n@@ -167,7 +167,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n     fn intern_ty(\n         local: &CtxtInterners<'tcx>,\n         global: &CtxtInterners<'gcx>,\n-        st: TypeVariants<'tcx>\n+        st: TyKind<'tcx>\n     ) -> Ty<'tcx> {\n         let flags = super::flags::FlagComputation::for_sty(&st);\n \n@@ -803,7 +803,7 @@ impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n         #[cfg(target_pointer_width = \"64\")]\n-        assert!(mem::size_of::<ty::TypeVariants>() <= 24);\n+        assert!(mem::size_of::<ty::TyKind>() <= 24);\n         #[cfg(target_pointer_width = \"64\")]\n         assert!(mem::size_of::<ty::TyS>() <= 32);\n \n@@ -1540,7 +1540,7 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n /// None is returned if the value or one of the components is not part\n /// of the provided context.\n /// For Ty, None can be returned if either the type interner doesn't\n-/// contain the TypeVariants key or if the address of the interned\n+/// contain the TyKind key or if the address of the interned\n /// pointer differs. The latter case is possible if a primitive type,\n /// e.g. `()` or `u8`, was interned in a different context.\n pub trait Lift<'tcx>: fmt::Debug {\n@@ -2107,8 +2107,8 @@ impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     }\n }\n \n-impl<'tcx: 'lcx, 'lcx> Borrow<TypeVariants<'lcx>> for Interned<'tcx, TyS<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a TypeVariants<'lcx> {\n+impl<'tcx: 'lcx, 'lcx> Borrow<TyKind<'lcx>> for Interned<'tcx, TyS<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a TyKind<'lcx> {\n         &self.0.sty\n     }\n }\n@@ -2340,7 +2340,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_fn_ptr(converted_sig)\n     }\n \n-    pub fn mk_ty(&self, st: TypeVariants<'tcx>) -> Ty<'tcx> {\n+    pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         CtxtInterners::intern_ty(&self.interners, &self.global_interners, st)\n     }\n "}, {"sha": "7dbd509f4f2ad329ae74e3ae98af3d389217eefd", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -28,7 +28,7 @@ impl FlagComputation {\n         }\n     }\n \n-    pub fn for_sty(st: &ty::TypeVariants) -> FlagComputation {\n+    pub fn for_sty(st: &ty::TyKind) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_sty(st);\n         result\n@@ -67,7 +67,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_sty(&mut self, st: &ty::TypeVariants) {\n+    fn add_sty(&mut self, st: &ty::TyKind) {\n         match st {\n             &ty::TyBool |\n             &ty::TyChar |"}, {"sha": "f8b0b1cc88713341a885c75fb1e1cdd4aec2a5f4", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -13,7 +13,7 @@ use ty::context::TyCtxt;\n use ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n use ty::{DefId, Substs};\n use ty::{AdtKind, Visibility};\n-use ty::TypeVariants::*;\n+use ty::TyKind::*;\n \n pub use self::def_id_forest::DefIdForest;\n "}, {"sha": "74c09c25f4e210b8f4ad99d3fd011148bc7c5f28", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -65,7 +65,7 @@ pub use self::sty::{Binder, CanonicalVar, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n-pub use self::sty::{TraitRef, TypeVariants, PolyTraitRef};\n+pub use self::sty::{TraitRef, TyKind, PolyTraitRef};\n pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};\n pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n@@ -74,7 +74,7 @@ pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid};\n pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind::*;\n-pub use self::sty::TypeVariants::*;\n+pub use self::sty::TyKind::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n@@ -490,7 +490,7 @@ bitflags! {\n }\n \n pub struct TyS<'tcx> {\n-    pub sty: TypeVariants<'tcx>,\n+    pub sty: TyKind<'tcx>,\n     pub flags: TypeFlags,\n \n     /// This is a kind of confusing thing: it stores the smallest\n@@ -542,29 +542,29 @@ impl<'tcx> Hash for TyS<'tcx> {\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n-            TypeVariants::TyBool |\n-                TypeVariants::TyChar |\n-                TypeVariants::TyInt(_) |\n-                TypeVariants::TyUint(_) |\n-                TypeVariants::TyFloat(_) |\n-                TypeVariants::TyInfer(InferTy::IntVar(_)) |\n-                TypeVariants::TyInfer(InferTy::FloatVar(_)) |\n-                TypeVariants::TyInfer(InferTy::FreshIntTy(_)) |\n-                TypeVariants::TyInfer(InferTy::FreshFloatTy(_)) => true,\n-            TypeVariants::TyRef(_, x, _) => x.is_primitive_ty(),\n+            TyKind::TyBool |\n+                TyKind::TyChar |\n+                TyKind::TyInt(_) |\n+                TyKind::TyUint(_) |\n+                TyKind::TyFloat(_) |\n+                TyKind::TyInfer(InferTy::IntVar(_)) |\n+                TyKind::TyInfer(InferTy::FloatVar(_)) |\n+                TyKind::TyInfer(InferTy::FreshIntTy(_)) |\n+                TyKind::TyInfer(InferTy::FreshFloatTy(_)) => true,\n+            TyKind::TyRef(_, x, _) => x.is_primitive_ty(),\n             _ => false,\n         }\n     }\n \n     pub fn is_suggestable(&self) -> bool {\n         match self.sty {\n-            TypeVariants::TyAnon(..) |\n-            TypeVariants::TyFnDef(..) |\n-            TypeVariants::TyFnPtr(..) |\n-            TypeVariants::TyDynamic(..) |\n-            TypeVariants::TyClosure(..) |\n-            TypeVariants::TyInfer(..) |\n-            TypeVariants::TyProjection(..) => false,\n+            TyKind::TyAnon(..) |\n+            TyKind::TyFnDef(..) |\n+            TyKind::TyFnPtr(..) |\n+            TyKind::TyDynamic(..) |\n+            TyKind::TyClosure(..) |\n+            TyKind::TyInfer(..) |\n+            TyKind::TyProjection(..) => false,\n             _ => true,\n         }\n     }"}, {"sha": "144abf2d7bd594882572de53f3b2dc8712792da6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This module contains TypeVariants and its major components\n+//! This module contains TyKind and its major components\n \n use hir::def_id::DefId;\n \n@@ -33,7 +33,7 @@ use serialize;\n use hir;\n \n use self::InferTy::*;\n-use self::TypeVariants::*;\n+use self::TyKind::*;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct TypeAndMut<'tcx> {\n@@ -82,7 +82,7 @@ impl BoundRegion {\n /// NB: If you change this, you'll probably want to change the corresponding\n /// AST structure in libsyntax/ast.rs as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub enum TypeVariants<'tcx> {\n+pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n     TyBool,\n "}, {"sha": "ea0b00483620b9202fc2b85db64173c949306cd2", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -19,7 +19,7 @@ use traits::{self, ObligationCause};\n use ty::{self, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n use ty::subst::{Substs, UnpackedKind};\n use ty::query::TyCtxtAt;\n-use ty::TypeVariants::*;\n+use ty::TyKind::*;\n use ty::layout::{Integer, IntegerExt};\n use util::common::ErrorReported;\n use middle::lang_items;\n@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     UnpackedKind::Type(&ty::TyS {\n-                        sty: ty::TypeVariants::TyParam(ref pt), ..\n+                        sty: ty::TyKind::TyParam(ref pt), ..\n                     }) => {\n                         !impl_generics.type_param(pt, self).pure_wrt_drop\n                     }"}, {"sha": "9be3dd731cd83c88c85ccc97876fe0074b3b1365", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -1029,7 +1029,7 @@ define_print! {\n }\n \n define_print! {\n-    ('tcx) ty::TypeVariants<'tcx>, (self, f, cx) {\n+    ('tcx) ty::TyKind<'tcx>, (self, f, cx) {\n         display {\n             match *self {\n                 TyBool => write!(f, \"bool\"),"}, {"sha": "869ac44a856a8a0272565ce3c07367e9f9e6fa47", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -697,7 +697,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                              Some(nl.to_string()),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n-                    ty::TypeVariants::TyClosure(id, _) => {\n+                    ty::TyKind::TyClosure(id, _) => {\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n                         if let Some((span, name)) = self.tables.closure_kind_origins().get(hir_id) {"}, {"sha": "2fbae59a5158936739a2d30ddcab846c72b5c975", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -1801,7 +1801,7 @@ fn int_type_width_signed(ty: Ty, cx: &CodegenCx) -> Option<(u64, bool)> {\n \n // Returns the width of a float TypeVariant\n // Returns None if the type is not a float\n-fn float_type_width<'tcx>(sty: &ty::TypeVariants<'tcx>) -> Option<u64> {\n+fn float_type_width<'tcx>(sty: &ty::TyKind<'tcx>) -> Option<u64> {\n     match *sty {\n         ty::TyFloat(t) => Some(t.bit_width() as u64),\n         _ => None,"}, {"sha": "b501afbc1bd30458a45f9cfa866b74f568ee0b6c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -1332,7 +1332,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n         fn get_transmute_from_to<'a, 'tcx>\n             (cx: &LateContext<'a, 'tcx>,\n              expr: &hir::Expr)\n-             -> Option<(&'tcx ty::TypeVariants<'tcx>, &'tcx ty::TypeVariants<'tcx>)> {\n+             -> Option<(&'tcx ty::TyKind<'tcx>, &'tcx ty::TyKind<'tcx>)> {\n             let def = if let hir::ExprKind::Path(ref qpath) = expr.node {\n                 cx.tables.qpath_def(qpath, expr.hir_id)\n             } else {"}, {"sha": "f56bbc9764f64453ea9473f68ed00d004f19ff9b", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         //\n         // No suggestion for: `isize`, `usize`.\n         fn get_type_suggestion<'a>(\n-            t: &ty::TypeVariants,\n+            t: &ty::TyKind,\n             val: u128,\n             negative: bool,\n         ) -> Option<String> {\n@@ -367,7 +367,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         fn report_bin_hex_error(\n             cx: &LateContext,\n             expr: &hir::Expr,\n-            ty: ty::TypeVariants,\n+            ty: ty::TyKind,\n             repr_str: String,\n             val: u128,\n             negative: bool,"}, {"sha": "15226a944afa198ba27c04163c8af2d08588b801", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -134,7 +134,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let Some(ty) = self.retrieve_type_for_place(place) {\n                 let needs_note = match ty.sty {\n-                    ty::TypeVariants::TyClosure(id, _) => {\n+                    ty::TyKind::TyClosure(id, _) => {\n                         let tables = self.tcx.typeck_tables_of(id);\n                         let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n                         let hir_id = self.tcx.hir.node_to_hir_id(node_id);"}, {"sha": "4b8effbc2d62bfa4a80433d25b007c10791382ee", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -37,7 +37,7 @@ use rustc::mir::*;\n use rustc::traits::query::type_op;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n+use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n use rustc_errors::Diagnostic;\n use std::fmt;\n use std::rc::Rc;\n@@ -917,7 +917,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             } => {\n                 let place_type = place.ty(mir, tcx).to_ty(tcx);\n                 let adt = match place_type.sty {\n-                    TypeVariants::TyAdt(adt, _) if adt.is_enum() => adt,\n+                    TyKind::TyAdt(adt, _) if adt.is_enum() => adt,\n                     _ => {\n                         span_bug!(\n                             stmt.source_info.span,"}, {"sha": "577d55f05d1f7aa70288daffd48d42ea71f83799", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n         src_layout: TyLayout<'tcx>,\n         dest_layout: TyLayout<'tcx>,\n     ) -> EvalResult<'tcx, Scalar> {\n-        use rustc::ty::TypeVariants::*;\n+        use rustc::ty::TyKind::*;\n         trace!(\"Casting {:?}: {:?} to {:?}\", val, src_layout.ty, dest_layout.ty);\n \n         match val {\n@@ -184,7 +184,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             v\n         };\n         trace!(\"cast_from_int: {}, {}, {}\", v, src_layout.ty, dest_layout.ty);\n-        use rustc::ty::TypeVariants::*;\n+        use rustc::ty::TyKind::*;\n         match dest_layout.ty.sty {\n             TyInt(_) | TyUint(_) => {\n                 let v = self.truncate(v, dest_layout);\n@@ -230,7 +230,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     fn cast_from_float(&self, bits: u128, fty: FloatTy, dest_ty: Ty<'tcx>) -> EvalResult<'tcx, Scalar> {\n-        use rustc::ty::TypeVariants::*;\n+        use rustc::ty::TyKind::*;\n         use rustc_apfloat::FloatConvert;\n         match dest_ty.sty {\n             // float -> uint\n@@ -290,7 +290,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     }\n \n     fn cast_from_ptr(&self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, Scalar> {\n-        use rustc::ty::TypeVariants::*;\n+        use rustc::ty::TyKind::*;\n         match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n             TyRawPtr(_) |"}, {"sha": "eef5246476e36738b6845bef3aa243bb205a71a8", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -12,7 +12,7 @@\n \n use rustc::mir::{Constant, Location, Place, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::{TyCtxt, TypeVariants};\n+use rustc::ty::{TyCtxt, TyKind};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n@@ -100,7 +100,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n \n         if let Rvalue::Len(ref place) = *rvalue {\n             let place_ty = place.ty(&self.mir.local_decls, self.tcx).to_ty(self.tcx);\n-            if let TypeVariants::TyArray(_, len) = place_ty.sty {\n+            if let TyKind::TyArray(_, len) = place_ty.sty {\n                 let span = self.mir.source_info(location).span;\n                 let ty = self.tcx.types.usize;\n                 let constant = Constant { span, ty, literal: len };"}, {"sha": "6eb8f1cefb02b6b7a6ad5ade5143c2cc79994133", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -13,7 +13,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use rustc::mir::*;\n-use rustc::ty::{List, Ty, TyCtxt, TypeVariants};\n+use rustc::ty::{List, Ty, TyCtxt, TyKind};\n use rustc_data_structures::indexed_vec::{Idx};\n use transform::{MirPass, MirSource};\n use syntax;\n@@ -190,8 +190,8 @@ impl RhsKind {\n \n fn sign_of_128bit(ty: Ty) -> Option<bool> {\n     match ty.sty {\n-        TypeVariants::TyInt(syntax::ast::IntTy::I128) => Some(true),\n-        TypeVariants::TyUint(syntax::ast::UintTy::U128) => Some(false),\n+        TyKind::TyInt(syntax::ast::IntTy::I128) => Some(true),\n+        TyKind::TyUint(syntax::ast::UintTy::U128) => Some(false),\n         _ => None,\n     }\n }"}, {"sha": "6088a80922e57a5de7a77ed43a6212f9aecc2bc4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -108,7 +108,7 @@ struct GenericArgMismatchErrorCode {\n /// Dummy type used for the `Self` of a `TraitRef` created for converting\n /// a trait object, and which gets removed in `ExistentialTraitRef`.\n /// This type must not appear anywhere in other converted types.\n-const TRAIT_OBJECT_DUMMY_SELF: ty::TypeVariants<'static> = ty::TyInfer(ty::FreshTy(0));\n+const TRAIT_OBJECT_DUMMY_SELF: ty::TyKind<'static> = ty::TyInfer(ty::FreshTy(0));\n \n impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     pub fn ast_region_to_region(&self,"}, {"sha": "c961bcd1e5913ffe5062dfa61fbf84aa51c95dc8", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             PatKind::Lit(ref lt) => {\n                 let ty = self.check_expr(lt);\n                 match ty.sty {\n-                    ty::TypeVariants::TyRef(..) => false,\n+                    ty::TyKind::TyRef(..) => false,\n                     _ => true,\n                 }\n             }\n@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             expected = loop {\n                 debug!(\"inspecting {:?} with type {:?}\", exp_ty, exp_ty.sty);\n                 match exp_ty.sty {\n-                    ty::TypeVariants::TyRef(_, inner_ty, inner_mutability) => {\n+                    ty::TyKind::TyRef(_, inner_ty, inner_mutability) => {\n                         debug!(\"current discriminant is TyRef, inserting implicit deref\");\n                         // Preserve the reference type. We'll need it later during HAIR lowering.\n                         pat_adjustments.push(exp_ty);"}, {"sha": "3415ad2742a2c5ffeb2398a40ca118b09e5a5e06", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -477,12 +477,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (RPtr(p), Int(_)) |\n             (RPtr(p), Float) => {\n                 match p.ty.sty {\n-                    ty::TypeVariants::TyInt(_) |\n-                    ty::TypeVariants::TyUint(_) |\n-                    ty::TypeVariants::TyFloat(_) => {\n+                    ty::TyKind::TyInt(_) |\n+                    ty::TyKind::TyUint(_) |\n+                    ty::TyKind::TyFloat(_) => {\n                         Err(CastError::NeedDeref)\n                     }\n-                    ty::TypeVariants::TyInfer(t) => {\n+                    ty::TyKind::TyInfer(t) => {\n                         match t {\n                             ty::InferTy::IntVar(_) |\n                             ty::InferTy::FloatVar(_) => Err(CastError::NeedDeref),"}, {"sha": "b5e8fe2cd0b505025dce20437ccf045a3dd62fb8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -13,7 +13,7 @@\n use super::{FnCtxt, Needs};\n use super::method::MethodCallee;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::ty::TypeVariants::{TyRef, TyAdt, TyStr, TyUint, TyNever, TyTuple, TyChar, TyArray};\n+use rustc::ty::TyKind::{TyRef, TyAdt, TyStr, TyUint, TyNever, TyTuple, TyChar, TyArray};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use errors;"}, {"sha": "7cc15d67b95dd2d66c2260b91329a1a0b5e1db5c", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37cee3b0e859a1303ece1cade3176cc150d28b4/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=d37cee3b0e859a1303ece1cade3176cc150d28b4", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                                              .expect(\"Cannot get impl trait\");\n \n                     match trait_ref.self_ty().sty {\n-                        ty::TypeVariants::TyParam(_) => {},\n+                        ty::TyParam(_) => {},\n                         _ => return,\n                     }\n "}]}