{"sha": "b952ada0ae2c957bdb8503366da4717224d3efc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NTJhZGEwYWUyYzk1N2JkYjg1MDMzNjZkYTQ3MTcyMjRkM2VmYzM=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-08-10T15:24:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T14:15:36Z"}, "message": "Use `ty::Error` for opaque types with errors in its bounds.\n\nThis reduces unhelpful diagnostics down the road.", "tree": {"sha": "e1d00afebd2e543b41e14a17aa0aa4010c1998ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d00afebd2e543b41e14a17aa0aa4010c1998ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b952ada0ae2c957bdb8503366da4717224d3efc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b952ada0ae2c957bdb8503366da4717224d3efc3", "html_url": "https://github.com/rust-lang/rust/commit/b952ada0ae2c957bdb8503366da4717224d3efc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b952ada0ae2c957bdb8503366da4717224d3efc3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34de78fd8131ac8149caab086c9696899d8d2bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/34de78fd8131ac8149caab086c9696899d8d2bed", "html_url": "https://github.com/rust-lang/rust/commit/34de78fd8131ac8149caab086c9696899d8d2bed"}], "stats": {"total": 48, "additions": 10, "deletions": 38}, "files": [{"sha": "c01faae5d6a51c039f088df9aff6f0a7b5e782a7", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -1022,7 +1022,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n             if let ty::PredicateKind::Projection(projection) = predicate.kind().skip_binder() {\n                 if projection.ty.references_error() {\n                     // No point on adding these obligations since there's a type error involved.\n-                    return ty_var;\n+                    return tcx.ty_error();\n                 }\n             }\n             // Change the predicate to refer to the type variable,"}, {"sha": "df2ca025705d3955fae6c9b1a0d7333e29f39684", "filename": "src/test/ui/async-await/issues/issue-65159.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.rs?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -6,7 +6,6 @@ async fn copy() -> Result<()>\n //~^ ERROR this enum takes 2 generic arguments\n {\n     Ok(())\n-    //~^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "45f5ec40cd758b08f914aabdce72e0d85bd7996f", "filename": "src/test/ui/async-await/issues/issue-65159.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65159.stderr?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -16,13 +16,6 @@ help: add missing generic argument\n LL | async fn copy() -> Result<(), E>\n    |                             +++\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-65159.rs:8:5\n-   |\n-LL |     Ok(())\n-   |     ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0107, E0282.\n-For more information about an error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "dd0320bc53ba7d79d1151e7b34ea1ba3e85d845a", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.rs?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -17,7 +17,6 @@ async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_> {\n     //~^ ERROR this struct takes 0 lifetime arguments but 1 lifetime argument was supplied\n     //~^^ ERROR this struct takes 1 generic argument but 0 generic arguments were supplied\n     LockedMarket(generator.lock().unwrap().buy())\n-    //~^ ERROR cannot return value referencing temporary value\n }\n \n struct LockedMarket<T>(T);"}, {"sha": "d2b927fb664c66b1958dbdfd914b771b95b1d2d1", "filename": "src/test/ui/borrowck/issue-82126-mismatched-subst-and-hir.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82126-mismatched-subst-and-hir.stderr?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -7,7 +7,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           expected 0 lifetime arguments\n    |\n note: struct defined here, with 0 lifetime parameters\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^\n@@ -19,7 +19,7 @@ LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_>\n    |                                                           ^^^^^^^^^^^^ expected 1 generic argument\n    |\n note: struct defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:23:8\n+  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:22:8\n    |\n LL | struct LockedMarket<T>(T);\n    |        ^^^^^^^^^^^^ -\n@@ -28,16 +28,6 @@ help: add missing generic argument\n LL | async fn buy_lock(generator: &Mutex<MarketMultiplier>) -> LockedMarket<'_, T> {\n    |                                                                          +++\n \n-error[E0515]: cannot return value referencing temporary value\n-  --> $DIR/issue-82126-mismatched-subst-and-hir.rs:19:5\n-   |\n-LL |     LockedMarket(generator.lock().unwrap().buy())\n-   |     ^^^^^^^^^^^^^-------------------------^^^^^^^\n-   |     |            |\n-   |     |            temporary value created here\n-   |     returns a value referencing data owned by the current function\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0107, E0515.\n-For more information about an error, try `rustc --explain E0107`.\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "dee5a41f6de375d30f06611cc23677ea8770498f", "filename": "src/test/ui/impl-trait/issue-72911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.rs?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -16,7 +16,6 @@ fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = Lint>\n \n fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n     //~^ ERROR: failed to resolve\n-    //~| ERROR: `()` is not an iterator\n     unimplemented!()\n }\n "}, {"sha": "17748ae42770fdfdf7a3e283d75f200671fe596d", "filename": "src/test/ui/impl-trait/issue-72911.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b952ada0ae2c957bdb8503366da4717224d3efc3/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-72911.stderr?ref=b952ada0ae2c957bdb8503366da4717224d3efc3", "patch": "@@ -28,15 +28,7 @@ LL | fn gather_from_file(dir_entry: &foo::MissingItem) -> impl Iterator<Item = L\n LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n    |                    -------------------------------------- returning this opaque type `FlatMap<impl Iterator, [type error], [closure@$DIR/issue-72911.rs:9:27: 9:51]>`\n \n-error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-72911.rs:17:20\n-   |\n-LL | fn lint_files() -> impl Iterator<Item = foo::MissingItem> {\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n-   |\n-   = help: the trait `Iterator` is not implemented for `()`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0277, E0433, E0720.\n-For more information about an error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0433, E0720.\n+For more information about an error, try `rustc --explain E0433`."}]}