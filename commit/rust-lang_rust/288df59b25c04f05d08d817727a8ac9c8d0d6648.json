{"sha": "288df59b25c04f05d08d817727a8ac9c8d0d6648", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OGRmNTliMjVjMDRmMDVkMDhkODE3NzI3YThhYzljOGQwZDY2NDg=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-06-07T20:12:35Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-06-08T20:00:33Z"}, "message": "Fix suggestion output, add run-rustfix to test file, stop sorting import segments duh", "tree": {"sha": "50f878bfb0678cabca1812d209a76c19bd118605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f878bfb0678cabca1812d209a76c19bd118605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/288df59b25c04f05d08d817727a8ac9c8d0d6648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/288df59b25c04f05d08d817727a8ac9c8d0d6648", "html_url": "https://github.com/rust-lang/rust/commit/288df59b25c04f05d08d817727a8ac9c8d0d6648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/288df59b25c04f05d08d817727a8ac9c8d0d6648/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5a5a92ec6f298a067ba052a0d5b6150537c1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5a5a92ec6f298a067ba052a0d5b6150537c1c9", "html_url": "https://github.com/rust-lang/rust/commit/8c5a5a92ec6f298a067ba052a0d5b6150537c1c9"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "7e3ce07254f7afb9c7d70a300610dff7d058bf90", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/288df59b25c04f05d08d817727a8ac9c8d0d6648/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288df59b25c04f05d08d817727a8ac9c8d0d6648/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=288df59b25c04f05d08d817727a8ac9c8d0d6648", "patch": "@@ -167,32 +167,33 @@ impl<'l, 'txc> LateLintPass<'l, 'txc> for MacroUseImports {\n                     [] => unreachable!(\"this should never be empty\"),\n                     [_] => unreachable!(\"path must have two segments ?\"),\n                     [root, item] => {\n-                        if !check_dup.contains(&item.to_string()) {\n+                        if !check_dup.contains(&(*item).to_string()) {\n                             used.entry((root.to_string(), span))\n-                                .or_insert(vec![])\n+                                .or_insert_with(|| vec![])\n                                 .push(item.to_string());\n                             check_dup.push(item.to_string());\n                         }\n                     },\n                     [root, rest @ ..] => {\n-                        if !rest.iter().all(|item| !check_dup.contains(&item.to_string())) {\n-                            let mut rest = rest.to_vec();\n-                            rest.sort();\n-                            used.entry((root.to_string(), span))\n-                                .or_insert(vec![])\n-                                .push(rest.join(\"::\"));\n-                            check_dup.extend(rest.iter().map(ToString::to_string));\n-                        } else {\n-                            let mut filtered = rest\n+                        if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n+                            let filtered = rest\n                                 .iter()\n-                                .filter(|item| !check_dup.contains(&item.to_string()))\n-                                .map(ToString::to_string)\n+                                .filter_map(|item| if check_dup.contains(&(*item).to_string()) {\n+                                    None\n+                                } else {\n+                                    Some(item.to_string())\n+                                })\n                                 .collect::<Vec<_>>();\n-                            filtered.sort();\n-                            used.entry((root.to_string(), span))\n-                                .or_insert(vec![])\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(|| vec![])\n                                 .push(filtered.join(\"::\"));\n                             check_dup.extend(filtered);\n+                        } else {\n+                            let rest = rest.to_vec();\n+                            used.entry((root.to_string(), span))\n+                                .or_insert_with(|| vec![])\n+                                .push(rest.join(\"::\"));\n+                            check_dup.extend(rest.iter().map(ToString::to_string));\n                         }\n                     },\n                 }\n@@ -212,7 +213,7 @@ impl<'l, 'txc> LateLintPass<'l, 'txc> for MacroUseImports {\n         // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n         if self.mac_refs.is_empty() {\n             for (span, import) in suggestions {\n-                let help = format!(\"use {}\", import);\n+                let help = format!(\"use {};\", import);\n                 span_lint_and_sugg(\n                     cx,\n                     MACRO_USE_IMPORTS,"}, {"sha": "8034c56b59adbfe54bb9f706dcd0c9f68a07dc8a", "filename": "tests/ui/macro_use_imports.fixed", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=288df59b25c04f05d08d817727a8ac9c8d0d6648", "patch": "@@ -0,0 +1,41 @@\n+// compile-flags: --edition 2018\n+// aux-build:macro_rules.rs\n+// aux-build:macro_use_helper.rs\n+// run-rustfix\n+\n+#![allow(clippy::single_component_path_imports)]\n+#![warn(clippy::macro_use_imports)]\n+\n+#[macro_use]\n+extern crate macro_use_helper as mac;\n+\n+#[macro_use]\n+extern crate clippy_mini_macro_test as mini_mac;\n+\n+mod a {\n+    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n+    use mac;\n+    use mini_mac::ClippyMiniMacroTest;\n+    use mini_mac;\n+    use mac::{inner::foofoo, inner::try_err};\n+    use mac::inner;\n+    use mac::inner::nested::string_add;\n+    use mac::inner::nested;\n+\n+    #[derive(ClippyMiniMacroTest)]\n+    struct Test;\n+\n+    fn test() {\n+        pub_macro!();\n+        inner_mod_macro!();\n+        pub_in_private_macro!(_var);\n+        function_macro!();\n+        let v: ty_macro!() = Vec::default();\n+\n+        inner::try_err!();\n+        inner::foofoo!();\n+        nested::string_add!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7d415222d64fcea35be4bef134bc62e6760d9661", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=288df59b25c04f05d08d817727a8ac9c8d0d6648", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: --edition 2018\n // aux-build:macro_rules.rs\n // aux-build:macro_use_helper.rs\n+// run-rustfix\n \n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]"}, {"sha": "6feda8a52226bcf95408aa25277046c3aaf39d21", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/288df59b25c04f05d08d817727a8ac9c8d0d6648/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=288df59b25c04f05d08d817727a8ac9c8d0d6648", "patch": "@@ -1,28 +1,28 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:17:5\n+  --> $DIR/macro_use_imports.rs:18:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:21:5\n+  --> $DIR/macro_use_imports.rs:20:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:19:5\n+  --> $DIR/macro_use_imports.rs:16:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{foofoo::inner, inner::try_err}`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:15:5\n+  --> $DIR/macro_use_imports.rs:22:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro}`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n \n error: aborting due to 4 previous errors\n "}]}