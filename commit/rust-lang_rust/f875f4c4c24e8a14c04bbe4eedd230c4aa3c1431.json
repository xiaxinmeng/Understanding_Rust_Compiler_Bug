{"sha": "f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzVmNGM0YzI0ZThhMTRjMDRiYmU0ZWVkZDIzMGM0YWEzYzE0MzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T12:21:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::UnOp variants", "tree": {"sha": "49aa5846267f8660ddf5c1a69e87348a1ea30081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49aa5846267f8660ddf5c1a69e87348a1ea30081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "html_url": "https://github.com/rust-lang/rust/commit/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060848c31534284ed06cd63c5dbb41e2e839d2b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/060848c31534284ed06cd63c5dbb41e2e839d2b0", "html_url": "https://github.com/rust-lang/rust/commit/060848c31534284ed06cd63c5dbb41e2e839d2b0"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "698d82adff41e7ca5fa5d17deb72ee6a77ace27d", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "patch": "@@ -876,9 +876,9 @@ pub fn lower_constness(_lctx: &LoweringContext, c: Constness) -> hir::Constness\n \n pub fn lower_unop(_lctx: &LoweringContext, u: UnOp) -> hir::UnOp {\n     match u {\n-        UnDeref => hir::UnDeref,\n-        UnNot => hir::UnNot,\n-        UnNeg => hir::UnNeg,\n+        UnOp::Deref => hir::UnDeref,\n+        UnOp::Not => hir::UnNot,\n+        UnOp::Neg => hir::UnNeg,\n     }\n }\n "}, {"sha": "2b3ca63c26f963307bf151456e1e85fcfe56c35f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "patch": "@@ -38,7 +38,6 @@ pub use self::TraitItem_::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UintTy::*;\n-pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n pub use self::Visibility::*;\n@@ -723,27 +722,27 @@ pub type BinOp = Spanned<BinOp_>;\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnOp {\n     /// The `*` operator for dereferencing\n-    UnDeref,\n+    Deref,\n     /// The `!` operator for logical inversion\n-    UnNot,\n+    Not,\n     /// The `-` operator for negation\n-    UnNeg\n+    Neg,\n }\n \n impl UnOp {\n     /// Returns `true` if the unary operator takes its argument by value\n     pub fn is_by_value(u: UnOp) -> bool {\n         match u {\n-            UnNeg | UnNot => true,\n+            UnOp::Neg | UnOp::Not => true,\n             _ => false,\n         }\n     }\n \n     pub fn to_string(op: UnOp) -> &'static str {\n         match op {\n-            UnDeref => \"*\",\n-            UnNot => \"!\",\n-            UnNeg => \"-\",\n+            UnOp::Deref => \"*\",\n+            UnOp::Not => \"!\",\n+            UnOp::Neg => \"-\",\n         }\n     }\n }"}, {"sha": "2ce2e7f71f3f99a7752d3ffeeb10f047125b12b6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "patch": "@@ -10,6 +10,7 @@\n \n use abi;\n use ast::{Ident, Generics, Expr};\n+use ast::UnOp;\n use ast;\n use attr;\n use codemap::{Span, respan, Spanned, DUMMY_SP, Pos};\n@@ -610,7 +611,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_deref(&self, sp: Span, e: P<ast::Expr>) -> P<ast::Expr> {\n-        self.expr_unary(sp, ast::UnDeref, e)\n+        self.expr_unary(sp, UnOp::Deref, e)\n     }\n     fn expr_unary(&self, sp: Span, op: ast::UnOp, e: P<ast::Expr>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprUnary(op, e))"}, {"sha": "c174e35d93b4690aea1a8bae19f79add4e0497a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "patch": "@@ -13,13 +13,13 @@ pub use self::PathParsingMode::*;\n use abi;\n use ast::BareFnTy;\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Public, Unsafety};\n+use ast::{Public, Unsafety, UnOp};\n use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindingMode};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n use ast::{Decl, DeclItem, DeclLocal, DefaultBlock, DefaultReturn};\n-use ast::{UnDeref, BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n+use ast::{BiDiv, EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast, ExprInPlace};\n@@ -39,7 +39,7 @@ use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, BiMul, Mutability};\n-use ast::{NamedField, UnNeg, NoReturn, UnNot};\n+use ast::{NamedField, NoReturn};\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n use ast::{PatRegion, PatStruct, PatTup, PatVec, PatWild};\n use ast::{PolyTraitRef, QSelf};\n@@ -1608,7 +1608,7 @@ impl<'a> Parser<'a> {\n \n         if minus_present {\n             let minus_hi = self.last_span.hi;\n-            let unary = self.mk_unary(UnNeg, expr);\n+            let unary = self.mk_unary(UnOp::Neg, expr);\n             Ok(self.mk_expr(minus_lo, minus_hi, unary, None))\n         } else {\n             Ok(expr)\n@@ -2740,21 +2740,21 @@ impl<'a> Parser<'a> {\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n-                self.mk_unary(UnNot, e)\n+                self.mk_unary(UnOp::Not, e)\n             }\n             token::BinOp(token::Minus) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n-                self.mk_unary(UnNeg, e)\n+                self.mk_unary(UnOp::Neg, e)\n             }\n             token::BinOp(token::Star) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = try!(self.interpolated_or_expr_span(e));\n                 hi = span.hi;\n-                self.mk_unary(UnDeref, e)\n+                self.mk_unary(UnOp::Deref, e)\n             }\n             token::BinOp(token::And) | token::AndAnd => {\n                 try!(self.expect_and());"}, {"sha": "4c10a3a31d0bc16e0ca5dc348118f692dfc61b70", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=f875f4c4c24e8a14c04bbe4eedd230c4aa3c1431", "patch": "@@ -211,7 +211,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n \n             let cmp = cx.expr_binary(span, op, self_f.clone(), other_f.clone());\n \n-            let not_cmp = cx.expr_unary(span, ast::UnNot,\n+            let not_cmp = cx.expr_unary(span, ast::UnOp::Not,\n                                         cx.expr_binary(span, op, other_f.clone(), self_f));\n \n             let and = cx.expr_binary(span, ast::BiAnd, not_cmp, subexpr);"}]}