{"sha": "ab8e92514cc273477e63c089ea6f38b0adba5ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGU5MjUxNGNjMjczNDc3ZTYzYzA4OWVhNmYzOGIwYWRiYTVkZGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-01-03T14:54:38Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-01-03T14:58:05Z"}, "message": "Regression test and exploratory unit test.", "tree": {"sha": "1c89dbef9c7783fd56dd93c0d1057a16ebca2870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c89dbef9c7783fd56dd93c0d1057a16ebca2870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8e92514cc273477e63c089ea6f38b0adba5ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e92514cc273477e63c089ea6f38b0adba5ddd", "html_url": "https://github.com/rust-lang/rust/commit/ab8e92514cc273477e63c089ea6f38b0adba5ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e92514cc273477e63c089ea6f38b0adba5ddd/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae13a72ded3e9b42908a62cb23367a0ec337d7c9", "html_url": "https://github.com/rust-lang/rust/commit/ae13a72ded3e9b42908a62cb23367a0ec337d7c9"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "9dc4cf1252ec33234f4c613b7c2447d541a46ef2", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=ab8e92514cc273477e63c089ea6f38b0adba5ddd", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This crate attempts to enumerate the various scenarios for how a\n+// type can define fields and methods with various visiblities and\n+// stabilities.\n+//\n+// The basic stability pattern in this file has four cases:\n+// 1. no stability attribute at all\n+// 2. a stable attribute (feature \"unit_test\")\n+// 3. an unstable attribute that unit test declares (feature \"unstable_declared\")\n+// 4. an unstable attribute that unit test fails to declare (feature \"unstable_undeclared\")\n+//\n+// This file also covers four kinds of visibility: private,\n+// pub(module), pub(crate), and pub.\n+//\n+// However, since stability attributes can only be observed in\n+// cross-crate linkage scenarios, there is little reason to take the\n+// cross-product (4 stability cases * 4 visiblity cases), because the\n+// first three visibility cases cannot be accessed outside this crate,\n+// and therefore stability is only relevant when the visibility is pub\n+// to the whole universe.\n+//\n+// (The only reason to do so would be if one were worried about the\n+// compiler having some subtle bug where adding a stability attribute\n+// introduces a privacy violation. As a way to provide evidence that\n+// this is not occurring, I have put stability attributes on some\n+// non-pub fields, marked with SILLY below)\n+\n+#![feature(staged_api)]\n+#![feature(pub_restricted)]\n+\n+#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+\n+#[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+pub use m::{Record, Trait, Tuple};\n+\n+mod m {\n+    #[derive(Default)]\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    pub struct Record {\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub a_stable_pub: i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub a_unstable_declared_pub: i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub a_unstable_undeclared_pub: i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n+        pub(crate) b_crate: i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n+        pub(m) c_mod: i32,\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        d_priv: i32\n+    }\n+\n+    #[derive(Default)]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+    pub struct Tuple(\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub i32,\n+\n+        pub(crate) i32,\n+        pub(m) i32,\n+        i32);\n+\n+    impl Record {\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+        pub fn new() -> Self { Default::default() }\n+    }\n+\n+    impl Tuple {\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+        pub fn new() -> Self { Default::default() }\n+    }\n+\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    pub trait Trait {\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        type Type;\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        fn stable_trait_method(&self) -> Self::Type;\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        fn unstable_undeclared_trait_method(&self) -> Self::Type;\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        fn unstable_declared_trait_method(&self) -> Self::Type;\n+    }\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    impl Trait for Record {\n+        type Type = i32;\n+        fn stable_trait_method(&self) -> i32 { self.d_priv }\n+        fn unstable_undeclared_trait_method(&self) -> i32 { self.d_priv }\n+        fn unstable_declared_trait_method(&self) -> i32 { self.d_priv }\n+    }\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    impl Trait for Tuple {\n+        type Type = i32;\n+        fn stable_trait_method(&self) -> i32 { self.3 }\n+        fn unstable_undeclared_trait_method(&self) -> i32 { self.3 }\n+        fn unstable_declared_trait_method(&self) -> i32 { self.3 }\n+    }\n+\n+    impl Record {\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub fn unstable_undeclared(&self) -> i32 { self.d_priv }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub fn unstable_declared(&self) -> i32 { self.d_priv }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub fn stable(&self) -> i32 { self.d_priv }\n+\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n+        pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n+        pub(m) fn pub_mod(&self) -> i32 { self.d_priv }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        fn private(&self) -> i32 { self.d_priv }\n+    }\n+\n+    impl Tuple {\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub fn unstable_undeclared(&self) -> i32 { self.0 }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub fn unstable_declared(&self) -> i32 { self.0 }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub fn stable(&self) -> i32 { self.0 }\n+\n+        pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n+        pub(m) fn pub_mod(&self) -> i32 { self.0 }\n+        fn private(&self) -> i32 { self.0 }\n+    }\n+}"}, {"sha": "aab92575321e34704db011cf353753b2bf4c9c2e", "filename": "src/test/compile-fail-fulldeps/explore-issue-38412.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs?ref=ab8e92514cc273477e63c089ea6f38b0adba5ddd", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:pub_and_stability.rs\n+\n+#![feature(staged_api)]\n+#![feature(unused_feature)]\n+\n+// A big point of this test is that we *declare* `unstable_declared`,\n+// but do *not* declare `unstable_undeclared`. This way we can check\n+// that the compiler is letting in uses of declared feature-gated\n+// stuff but still rejecting uses of undeclared feature-gated stuff.\n+#![feature(unstable_declared)]\n+\n+extern crate pub_and_stability;\n+use pub_and_stability::{Record, Trait, Tuple};\n+\n+fn main() {\n+    // Okay\n+    let Record { .. } = Record::new();\n+    // Okay (for now; see RFC Issue #902)\n+    let Tuple(..) = Tuple::new();\n+\n+    // Okay\n+    let Record { a_stable_pub: _, a_unstable_declared_pub: _, .. } = Record::new();\n+    // Okay (for now; see RFC Issue #902)\n+    let Tuple(_, _, ..) = Tuple::new(); // analogous to above\n+\n+    let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n+        Record::new();\n+    //~^^ ERROR use of unstable library feature 'unstable_undeclared'\n+\n+    let Tuple(_, _, _, ..) = Tuple::new(); // analogous to previous\n+    //~^ ERROR use of unstable library feature 'unstable_undeclared'\n+\n+    let r = Record::new();\n+    let t = Tuple::new();\n+\n+    r.a_stable_pub;\n+    r.a_unstable_declared_pub;\n+    r.a_unstable_undeclared_pub; //~ ERROR use of unstable library feature\n+    r.b_crate;                   //~ ERROR is private\n+    r.c_mod;                     //~ ERROR is private\n+    r.d_priv;                    //~ ERROR is private\n+\n+    t.0;\n+    t.1;\n+    t.2;                         //~ ERROR use of unstable library feature\n+    t.3;                         //~ ERROR is private\n+    t.4;                         //~ ERROR is private\n+    t.5;                         //~ ERROR is private\n+\n+    r.stable_trait_method();\n+    r.unstable_declared_trait_method();\n+    r.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature\n+\n+    r.stable();\n+    r.unstable_declared();\n+    r.unstable_undeclared();              //~ ERROR use of unstable library feature\n+\n+    r.pub_crate();                        //~ ERROR `pub_crate` is private\n+    r.pub_mod();                          //~ ERROR `pub_mod` is private\n+    r.private();                          //~ ERROR `private` is private\n+\n+    let t = Tuple::new();\n+    t.stable_trait_method();\n+    t.unstable_declared_trait_method();\n+    t.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature\n+\n+    t.stable();\n+    t.unstable_declared();\n+    t.unstable_undeclared();              //~ ERROR use of unstable library feature\n+\n+    t.pub_crate();                        //~ ERROR `pub_crate` is private\n+    t.pub_mod();                          //~ ERROR `pub_mod` is private\n+    t.private();                          //~ ERROR `private` is private\n+\n+}"}, {"sha": "00305eb2bc04bf2f3e9f7a31aacc5f4cf44a645a", "filename": "src/test/compile-fail/issue-38412.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8e92514cc273477e63c089ea6f38b0adba5ddd/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs?ref=ab8e92514cc273477e63c089ea6f38b0adba5ddd", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let Box(a) = loop { };\n+    //~^ ERROR field `0` of struct `std::boxed::Box` is private\n+\n+    // (The below is a trick to allow compiler to infer a type for\n+    // variable `a` without attempting to ascribe a type to the\n+    // pattern or otherwise attempting to name the Box type, which\n+    // would run afoul of issue #22207)\n+    let _b: *mut i32 = *a;\n+}"}]}