{"sha": "724cca6d7f792cf3edea743a8fdc2dab397467e2", "node_id": "C_kwDOAAsO6NoAKDcyNGNjYTZkN2Y3OTJjZjNlZGVhNzQzYThmZGMyZGFiMzk3NDY3ZTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T22:23:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T22:23:07Z"}, "message": "Rollup merge of #93847 - solid-rs:fix-kmc-solid-fs-ts, r=yaahc\n\nkmc-solid: Use the filesystem thread-safety wrapper\n\nFixes the thread unsafety of the `std::fs` implementation used by the [`*-kmc-solid_*`](https://doc.rust-lang.org/nightly/rustc/platform-support/kmc-solid.html) Tier 3 targets.\n\nNeither the SOLID filesystem API nor built-in filesystem drivers guarantee thread safety by default. Although this may suffice in general embedded-system use cases, and in fact the API can be used from multiple threads without any problems in many cases, this has been a source of unsoundness in `std::sys::solid::fs`.\n\nThis commit updates the implementation to leverage the filesystem thread-safety wrapper (which uses a pluggable synchronization mechanism) to enforce thread safety. This is done by prefixing all paths passed to the filesystem API with `\\TS`. (Note that relative paths aren't supported in this platform.)", "tree": {"sha": "bfa0696afadfac9d4e3ecc6b80ffcccdf17f50de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfa0696afadfac9d4e3ecc6b80ffcccdf17f50de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724cca6d7f792cf3edea743a8fdc2dab397467e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEBxLCRBK7hj4Ov3rIwAALMsIAA5WlWRhzz1gVC6HZIT1h5mb\n9xAWh3puEmNXSpASWEkNgV+FrgQDc4JwTIvUVsn9w3f1+uRZ/vdpvS3y0+1ge81/\nDCPRuQqPlTD8aVR3edBz+fBj3suR8s317Xfr89ukJG0oZ39lAyHhXGHroKNKprtp\ndukTom5h3UiHRfMJEXcnysqW6WK0wX0HExgOygu+M+Zs7X5uT0Ma72L5vJZKXtfc\naWF/Ykn/kpV1AICWRwG/c9JRwwvwoXQw+EdRPBewBdq8sq/v2rb0Yz/TLbTCXqFA\nCIUgfNLX/wrZ2vFB4c6uUYrfxyDU5yvbK6Y3LHQ0lPtlHm2dt73dnlk1vi9r/y8=\n=Lzgc\n-----END PGP SIGNATURE-----\n", "payload": "tree bfa0696afadfac9d4e3ecc6b80ffcccdf17f50de\nparent 32c8acd769bdf8d649b8eba3b382a98f22827df5\nparent 64406c5996a0775493c8a2acd457e612bd84cde6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645222987 +0100\ncommitter GitHub <noreply@github.com> 1645222987 +0100\n\nRollup merge of #93847 - solid-rs:fix-kmc-solid-fs-ts, r=yaahc\n\nkmc-solid: Use the filesystem thread-safety wrapper\n\nFixes the thread unsafety of the `std::fs` implementation used by the [`*-kmc-solid_*`](https://doc.rust-lang.org/nightly/rustc/platform-support/kmc-solid.html) Tier 3 targets.\n\nNeither the SOLID filesystem API nor built-in filesystem drivers guarantee thread safety by default. Although this may suffice in general embedded-system use cases, and in fact the API can be used from multiple threads without any problems in many cases, this has been a source of unsoundness in `std::sys::solid::fs`.\n\nThis commit updates the implementation to leverage the filesystem thread-safety wrapper (which uses a pluggable synchronization mechanism) to enforce thread safety. This is done by prefixing all paths passed to the filesystem API with `\\TS`. (Note that relative paths aren't supported in this platform.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724cca6d7f792cf3edea743a8fdc2dab397467e2", "html_url": "https://github.com/rust-lang/rust/commit/724cca6d7f792cf3edea743a8fdc2dab397467e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724cca6d7f792cf3edea743a8fdc2dab397467e2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c8acd769bdf8d649b8eba3b382a98f22827df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c8acd769bdf8d649b8eba3b382a98f22827df5", "html_url": "https://github.com/rust-lang/rust/commit/32c8acd769bdf8d649b8eba3b382a98f22827df5"}, {"sha": "64406c5996a0775493c8a2acd457e612bd84cde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/64406c5996a0775493c8a2acd457e612bd84cde6", "html_url": "https://github.com/rust-lang/rust/commit/64406c5996a0775493c8a2acd457e612bd84cde6"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "a2cbee4dcf07b7ad8d665fb31417479c8c77e952", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/724cca6d7f792cf3edea743a8fdc2dab397467e2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724cca6d7f792cf3edea743a8fdc2dab397467e2/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=724cca6d7f792cf3edea743a8fdc2dab397467e2", "patch": "@@ -289,7 +289,26 @@ impl OpenOptions {\n }\n \n fn cstr(path: &Path) -> io::Result<CString> {\n-    Ok(CString::new(path.as_os_str().as_bytes())?)\n+    let path = path.as_os_str().as_bytes();\n+\n+    if !path.starts_with(br\"\\\") {\n+        // Relative paths aren't supported\n+        return Err(crate::io::const_io_error!(\n+            crate::io::ErrorKind::Unsupported,\n+            \"relative path is not supported on this platform\",\n+        ));\n+    }\n+\n+    // Apply the thread-safety wrapper\n+    const SAFE_PREFIX: &[u8] = br\"\\TS\";\n+    let wrapped_path = [SAFE_PREFIX, &path, &[0]].concat();\n+\n+    CString::from_vec_with_nul(wrapped_path).map_err(|_| {\n+        crate::io::const_io_error!(\n+            io::ErrorKind::InvalidInput,\n+            \"path provided contains a nul byte\",\n+        )\n+    })\n }\n \n impl File {"}]}