{"sha": "8716c4cec3a05ba891b20b5f28df69d925b913ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MTZjNGNlYzNhMDViYTg5MWIyMGI1ZjI4ZGY2OWQ5MjViOTEzYWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T13:45:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T14:45:08Z"}, "message": "Move ide::AnalysisChange -> base_db::Change\n\nThis seems like a better factoring logically; ideally, clients shouldn't touch\n`set_` methods of the database directly. Additionally, I think this\nshould remove the unfortunate duplication in fixture code.", "tree": {"sha": "e2f073c459e9a1e1c98b98d524565633524b84c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f073c459e9a1e1c98b98d524565633524b84c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8716c4cec3a05ba891b20b5f28df69d925b913ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8716c4cec3a05ba891b20b5f28df69d925b913ad", "html_url": "https://github.com/rust-lang/rust/commit/8716c4cec3a05ba891b20b5f28df69d925b913ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8716c4cec3a05ba891b20b5f28df69d925b913ad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700c9bc019346a321d230c51bbea597a497bed84", "url": "https://api.github.com/repos/rust-lang/rust/commits/700c9bc019346a321d230c51bbea597a497bed84", "html_url": "https://github.com/rust-lang/rust/commit/700c9bc019346a321d230c51bbea597a497bed84"}], "stats": {"total": 215, "additions": 122, "deletions": 93}, "files": [{"sha": "043e03bba5c8b2612924c38c66538057672f4e84", "filename": "crates/base_db/src/change.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fbase_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fbase_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Fchange.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -0,0 +1,97 @@\n+//! Defines a unit of change that can applied to the database to get the next\n+//! state. Changes are transactional.\n+\n+use std::{fmt, sync::Arc};\n+\n+use rustc_hash::FxHashSet;\n+use salsa::Durability;\n+use vfs::FileId;\n+\n+use crate::{CrateGraph, SourceDatabaseExt, SourceRoot, SourceRootId};\n+\n+/// Encapsulate a bunch of raw `.set` calls on the database.\n+#[derive(Default)]\n+pub struct Change {\n+    pub roots: Option<Vec<SourceRoot>>,\n+    pub files_changed: Vec<(FileId, Option<Arc<String>>)>,\n+    pub crate_graph: Option<CrateGraph>,\n+}\n+\n+impl fmt::Debug for Change {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        let mut d = fmt.debug_struct(\"AnalysisChange\");\n+        if let Some(roots) = &self.roots {\n+            d.field(\"roots\", roots);\n+        }\n+        if !self.files_changed.is_empty() {\n+            d.field(\"files_changed\", &self.files_changed.len());\n+        }\n+        if self.crate_graph.is_some() {\n+            d.field(\"crate_graph\", &self.crate_graph);\n+        }\n+        d.finish()\n+    }\n+}\n+\n+impl Change {\n+    pub fn new() -> Change {\n+        Change::default()\n+    }\n+\n+    pub fn set_roots(&mut self, roots: Vec<SourceRoot>) {\n+        self.roots = Some(roots);\n+    }\n+\n+    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<String>>) {\n+        self.files_changed.push((file_id, new_text))\n+    }\n+\n+    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n+        self.crate_graph = Some(graph);\n+    }\n+\n+    pub fn apply(self, db: &mut dyn SourceDatabaseExt) {\n+        let _p = profile::span(\"RootDatabase::apply_change\");\n+        // db.request_cancellation();\n+        // log::info!(\"apply_change {:?}\", change);\n+        if let Some(roots) = self.roots {\n+            let mut local_roots = FxHashSet::default();\n+            let mut library_roots = FxHashSet::default();\n+            for (idx, root) in roots.into_iter().enumerate() {\n+                let root_id = SourceRootId(idx as u32);\n+                let durability = durability(&root);\n+                if root.is_library {\n+                    library_roots.insert(root_id);\n+                } else {\n+                    local_roots.insert(root_id);\n+                }\n+                for file_id in root.iter() {\n+                    db.set_file_source_root_with_durability(file_id, root_id, durability);\n+                }\n+                db.set_source_root_with_durability(root_id, Arc::new(root), durability);\n+            }\n+            // db.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n+            // db.set_library_roots_with_durability(Arc::new(library_roots), Durability::HIGH);\n+        }\n+\n+        for (file_id, text) in self.files_changed {\n+            let source_root_id = db.file_source_root(file_id);\n+            let source_root = db.source_root(source_root_id);\n+            let durability = durability(&source_root);\n+            // XXX: can't actually remove the file, just reset the text\n+            let text = text.unwrap_or_default();\n+            db.set_file_text_with_durability(file_id, text, durability)\n+        }\n+        if let Some(crate_graph) = self.crate_graph {\n+            db.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n+        }\n+    }\n+}\n+\n+fn durability(source_root: &SourceRoot) -> Durability {\n+    if source_root.is_library {\n+        Durability::HIGH\n+    } else {\n+        Durability::LOW\n+    }\n+}"}, {"sha": "e38aa725751bcc381c447374d5fd514d14346b1d", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -1,6 +1,7 @@\n //! base_db defines basic database traits. The concrete DB is defined by ide.\n mod cancellation;\n mod input;\n+mod change;\n pub mod fixture;\n \n use std::{panic, sync::Arc};\n@@ -10,6 +11,7 @@ use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n     cancellation::Canceled,\n+    change::Change,\n     input::{\n         CrateData, CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, ProcMacroId,\n         SourceRoot, SourceRootId,"}, {"sha": "073b766a56d0da25493ccb914273e1774d9e8417", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -87,12 +87,11 @@ pub use assists::{\n     utils::MergeBehaviour, Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist,\n };\n pub use base_db::{\n-    Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n+    Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRoot,\n     SourceRootId,\n };\n pub use hir::{Documentation, Semantics};\n pub use ide_db::{\n-    change::AnalysisChange,\n     label::Label,\n     line_index::{LineCol, LineIndex},\n     search::SearchScope,\n@@ -141,7 +140,7 @@ impl AnalysisHost {\n \n     /// Applies changes to the current state of the world. If there are\n     /// outstanding snapshots, they will be canceled.\n-    pub fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: Change) {\n         self.db.apply_change(change)\n     }\n \n@@ -195,7 +194,7 @@ impl Analysis {\n         file_set.insert(file_id, VfsPath::new_virtual_path(\"/main.rs\".to_string()));\n         let source_root = SourceRoot::new_local(file_set);\n \n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n         change.set_roots(vec![source_root]);\n         let mut crate_graph = CrateGraph::default();\n         // FIXME: cfg options"}, {"sha": "6812db9b97b26b37e74e75b91de1f072b825cb96", "filename": "crates/ide/src/mock_analysis.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -7,9 +7,7 @@ use test_utils::{\n     extract_annotations, extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER,\n };\n \n-use crate::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n-};\n+use crate::{Analysis, AnalysisHost, Change, CrateGraph, Edition, FileId, FilePosition, FileRange};\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -95,7 +93,7 @@ impl MockAnalysis {\n     }\n     pub(crate) fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();\n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n         let mut file_set = FileSet::default();\n         let mut crate_graph = CrateGraph::default();\n         let mut root_crate = None;"}, {"sha": "68b107901f85f71547dba0d705dcb5b2d6a3604e", "filename": "crates/ide/src/parent_module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fparent_module.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -69,7 +69,7 @@ mod tests {\n \n     use crate::{\n         mock_analysis::{analysis_and_position, MockAnalysis},\n-        AnalysisChange, CrateGraph,\n+        Change, CrateGraph,\n         Edition::Edition2018,\n     };\n \n@@ -146,7 +146,7 @@ mod foo;\n             Env::default(),\n             Default::default(),\n         );\n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);\n "}, {"sha": "da16fa21dc6f28f7afd8f24a23098a42243ec759", "filename": "crates/ide_db/src/apply_change.rs", "status": "renamed", "additions": 6, "deletions": 72, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -1,58 +1,16 @@\n-//! Defines a unit of change that can applied to a state of IDE to get the next\n-//! state. Changes are transactional.\n+//! Applies changes to the IDE state transactionally.\n \n use std::{fmt, sync::Arc};\n \n use base_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, FileId, SourceDatabase, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    Change, FileId, SourceRootId,\n };\n use profile::{memory_usage, Bytes};\n use rustc_hash::FxHashSet;\n \n use crate::{symbol_index::SymbolsDatabase, RootDatabase};\n \n-#[derive(Default)]\n-pub struct AnalysisChange {\n-    roots: Option<Vec<SourceRoot>>,\n-    files_changed: Vec<(FileId, Option<Arc<String>>)>,\n-    crate_graph: Option<CrateGraph>,\n-}\n-\n-impl fmt::Debug for AnalysisChange {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let mut d = fmt.debug_struct(\"AnalysisChange\");\n-        if let Some(roots) = &self.roots {\n-            d.field(\"roots\", roots);\n-        }\n-        if !self.files_changed.is_empty() {\n-            d.field(\"files_changed\", &self.files_changed.len());\n-        }\n-        if self.crate_graph.is_some() {\n-            d.field(\"crate_graph\", &self.crate_graph);\n-        }\n-        d.finish()\n-    }\n-}\n-\n-impl AnalysisChange {\n-    pub fn new() -> AnalysisChange {\n-        AnalysisChange::default()\n-    }\n-\n-    pub fn set_roots(&mut self, roots: Vec<SourceRoot>) {\n-        self.roots = Some(roots);\n-    }\n-\n-    pub fn change_file(&mut self, file_id: FileId, new_text: Option<Arc<String>>) {\n-        self.files_changed.push((file_id, new_text))\n-    }\n-\n-    pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n-        self.crate_graph = Some(graph);\n-    }\n-}\n-\n #[derive(Debug)]\n struct AddFile {\n     file_id: FileId,\n@@ -87,41 +45,25 @@ impl RootDatabase {\n         self.salsa_runtime_mut().synthetic_write(Durability::LOW);\n     }\n \n-    pub fn apply_change(&mut self, change: AnalysisChange) {\n+    pub fn apply_change(&mut self, change: Change) {\n         let _p = profile::span(\"RootDatabase::apply_change\");\n         self.request_cancellation();\n         log::info!(\"apply_change {:?}\", change);\n-        if let Some(roots) = change.roots {\n+        if let Some(roots) = &change.roots {\n             let mut local_roots = FxHashSet::default();\n             let mut library_roots = FxHashSet::default();\n-            for (idx, root) in roots.into_iter().enumerate() {\n+            for (idx, root) in roots.iter().enumerate() {\n                 let root_id = SourceRootId(idx as u32);\n-                let durability = durability(&root);\n                 if root.is_library {\n                     library_roots.insert(root_id);\n                 } else {\n                     local_roots.insert(root_id);\n                 }\n-                for file_id in root.iter() {\n-                    self.set_file_source_root_with_durability(file_id, root_id, durability);\n-                }\n-                self.set_source_root_with_durability(root_id, Arc::new(root), durability);\n             }\n             self.set_local_roots_with_durability(Arc::new(local_roots), Durability::HIGH);\n             self.set_library_roots_with_durability(Arc::new(library_roots), Durability::HIGH);\n         }\n-\n-        for (file_id, text) in change.files_changed {\n-            let source_root_id = self.file_source_root(file_id);\n-            let source_root = self.source_root(source_root_id);\n-            let durability = durability(&source_root);\n-            // XXX: can't actually remove the file, just reset the text\n-            let text = text.unwrap_or_default();\n-            self.set_file_text_with_durability(file_id, text, durability)\n-        }\n-        if let Some(crate_graph) = change.crate_graph {\n-            self.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n-        }\n+        change.apply(self);\n     }\n \n     pub fn collect_garbage(&mut self) {\n@@ -295,11 +237,3 @@ impl RootDatabase {\n         acc\n     }\n }\n-\n-fn durability(source_root: &SourceRoot) -> Durability {\n-    if source_root.is_library {\n-        Durability::HIGH\n-    } else {\n-        Durability::LOW\n-    }\n-}", "previous_filename": "crates/ide_db/src/change.rs"}, {"sha": "7eff247c73eb16a8de36456c175fe5e825114285", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -2,10 +2,10 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n+mod apply_change;\n pub mod label;\n pub mod line_index;\n pub mod symbol_index;\n-pub mod change;\n pub mod defs;\n pub mod search;\n pub mod imports_locator;"}, {"sha": "d1c095ba5cf279f8e063e4fd8aff19f9162b6cd1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -8,8 +8,7 @@ use base_db::{\n     FileId,\n };\n use ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CompletionConfig, DiagnosticsConfig, FilePosition,\n-    LineCol,\n+    Analysis, AnalysisHost, Change, CompletionConfig, DiagnosticsConfig, FilePosition, LineCol,\n };\n use vfs::AbsPathBuf;\n \n@@ -143,7 +142,7 @@ fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, w\n         {\n             let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n             text.push_str(\"\\n/* Hello world */\\n\");\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             change.change_file(file_id, Some(Arc::new(text)));\n             host.apply_change(change);\n         }\n@@ -156,7 +155,7 @@ fn do_work<F: Fn(&Analysis) -> T, T>(host: &mut AnalysisHost, file_id: FileId, w\n         {\n             let mut text = host.analysis().file_text(file_id).unwrap().to_string();\n             text.push_str(\"\\npub fn _dummy() {}\\n\");\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             change.change_file(file_id, Some(Arc::new(text)));\n             host.apply_change(change);\n         }"}, {"sha": "7ae1c905527e3f2577260a053240726e2dfbbebd", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -5,7 +5,7 @@ use std::{path::Path, sync::Arc};\n use anyhow::Result;\n use base_db::CrateGraph;\n use crossbeam_channel::{unbounded, Receiver};\n-use ide::{AnalysisChange, AnalysisHost};\n+use ide::{AnalysisHost, Change};\n use project_model::{CargoConfig, ProcMacroClient, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n@@ -62,7 +62,7 @@ fn load(\n ) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n     let mut host = AnalysisHost::new(lru_cap);\n-    let mut analysis_change = AnalysisChange::new();\n+    let mut analysis_change = Change::new();\n \n     // wait until Vfs has loaded all roots\n     for task in receiver {"}, {"sha": "dafab6a6a7a70247cda90cc15aae42e12eb34086", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -8,7 +8,7 @@ use std::{sync::Arc, time::Instant};\n use base_db::{CrateId, VfsPath};\n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n+use ide::{Analysis, AnalysisHost, Change, FileId};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n use project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n@@ -139,7 +139,7 @@ impl GlobalState {\n         let mut has_fs_changes = false;\n \n         let change = {\n-            let mut change = AnalysisChange::new();\n+            let mut change = Change::new();\n             let (vfs, line_endings_map) = &mut *self.vfs.write();\n             let changed_files = vfs.take_changes();\n             if changed_files.is_empty() {"}, {"sha": "f7215f12908e9f2bd1b729bd18dcac95bfeafba0", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8716c4cec3a05ba891b20b5f28df69d925b913ad/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=8716c4cec3a05ba891b20b5f28df69d925b913ad", "patch": "@@ -3,7 +3,7 @@ use std::{mem, sync::Arc};\n \n use base_db::{CrateGraph, SourceRoot, VfsPath};\n use flycheck::{FlycheckConfig, FlycheckHandle};\n-use ide::AnalysisChange;\n+use ide::Change;\n use project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n@@ -171,7 +171,7 @@ impl GlobalState {\n             );\n         }\n \n-        let mut change = AnalysisChange::new();\n+        let mut change = Change::new();\n \n         let project_folders = ProjectFolders::new(&workspaces);\n "}]}