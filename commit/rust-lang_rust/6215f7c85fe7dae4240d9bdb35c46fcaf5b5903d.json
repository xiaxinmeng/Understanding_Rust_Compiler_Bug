{"sha": "6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "node_id": "C_kwDOAAsO6NoAKDYyMTVmN2M4NWZlN2RhZTQyNDBkOWJkYjM1YzQ2ZmNhZjViNTkwM2Q", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:59:22Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-01T03:59:22Z"}, "message": "Clean up now that visitors only need `&clean::Crate`", "tree": {"sha": "bc470de5148309617cf8a3f036f170f7ff4cd764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc470de5148309617cf8a3f036f170f7ff4cd764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "html_url": "https://github.com/rust-lang/rust/commit/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "url": "https://api.github.com/repos/rust-lang/rust/commits/28bdf892d6c2fc3a38d8fc40fab013d810fb3269", "html_url": "https://github.com/rust-lang/rust/commit/28bdf892d6c2fc3a38d8fc40fab013d810fb3269"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "069862efde6409a0a49891cd32263b08b836a5c7", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "patch": "@@ -461,9 +461,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             }\n         }\n \n-        let (mut krate, local_sources, matches) = collect_spans_and_sources(\n+        let (local_sources, matches) = collect_spans_and_sources(\n             tcx,\n-            krate,\n+            &krate,\n             &src_root,\n             include_sources,\n             generate_link_to_definition,\n@@ -522,7 +522,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         };\n \n         if emit_crate {\n-            krate = sources::render(&mut cx, krate)?;\n+            sources::render(&mut cx, &krate)?;\n         }\n \n         // Build our search index"}, {"sha": "7803a779727c5b09e8ef033f6ecc343dd41b6c90", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "patch": "@@ -37,21 +37,21 @@ crate enum LinkFromSrc {\n /// only keep the `lo` and `hi`.\n crate fn collect_spans_and_sources(\n     tcx: TyCtxt<'_>,\n-    krate: clean::Crate,\n+    krate: &clean::Crate,\n     src_root: &Path,\n     include_sources: bool,\n     generate_link_to_definition: bool,\n-) -> (clean::Crate, FxHashMap<PathBuf, String>, FxHashMap<Span, LinkFromSrc>) {\n+) -> (FxHashMap<PathBuf, String>, FxHashMap<Span, LinkFromSrc>) {\n     let mut visitor = SpanMapVisitor { tcx, matches: FxHashMap::default() };\n \n     if include_sources {\n         if generate_link_to_definition {\n             tcx.hir().walk_toplevel_module(&mut visitor);\n         }\n-        let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n-        (krate, sources, visitor.matches)\n+        let sources = sources::collect_local_sources(tcx, src_root, &krate);\n+        (sources, visitor.matches)\n     } else {\n-        (krate, Default::default(), Default::default())\n+        (Default::default(), Default::default())\n     }\n }\n "}, {"sha": "0a9f9741d7bd639edbf7a1746acebc21987851cc", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=6215f7c85fe7dae4240d9bdb35c46fcaf5b5903d", "patch": "@@ -16,25 +16,25 @@ use std::ffi::OsStr;\n use std::fs;\n use std::path::{Component, Path, PathBuf};\n \n-crate fn render(cx: &mut Context<'_>, krate: clean::Crate) -> Result<clean::Crate, Error> {\n+crate fn render(cx: &mut Context<'_>, krate: &clean::Crate) -> Result<(), Error> {\n     info!(\"emitting source files\");\n \n     let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n \n     let mut collector = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };\n-    collector.visit_crate(&krate);\n-    Ok(krate)\n+    collector.visit_crate(krate);\n+    Ok(())\n }\n \n crate fn collect_local_sources<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     src_root: &Path,\n-    krate: clean::Crate,\n-) -> (clean::Crate, FxHashMap<PathBuf, String>) {\n+    krate: &clean::Crate,\n+) -> FxHashMap<PathBuf, String> {\n     let mut lsc = LocalSourcesCollector { tcx, local_sources: FxHashMap::default(), src_root };\n-    lsc.visit_crate(&krate);\n-    (krate, lsc.local_sources)\n+    lsc.visit_crate(krate);\n+    lsc.local_sources\n }\n \n struct LocalSourcesCollector<'a, 'tcx> {"}]}