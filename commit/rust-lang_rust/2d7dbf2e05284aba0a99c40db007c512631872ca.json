{"sha": "2d7dbf2e05284aba0a99c40db007c512631872ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkN2RiZjJlMDUyODRhYmEwYTk5YzQwZGIwMDdjNTEyNjMxODcyY2E=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T11:53:03Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T11:53:03Z"}, "message": "Fix rustfmt test", "tree": {"sha": "05dd023c8530557d1fc12cc447f13e563ddd322e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05dd023c8530557d1fc12cc447f13e563ddd322e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7dbf2e05284aba0a99c40db007c512631872ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEo0h8ACgkQAn35M4hi\nrd1Q6hAAgaT3ptai0WZ0Ch6V2+D1zUKkyhICGrjIsn4Pv+fakXCv4q39C0ovLF6V\nDfvmvsAkFrYLqKx9F0xjgFKHc1Jkb2R5Qh1IjSfbg19rZHFXrXz3xM7z+PrXt83B\nm0JaI8q1vhBQ2Xf1Xq0i6jgtULu1D7IoFJzHCpwwpKvgFehZF6OWAzPLSF9VXHQx\nkhK3CP8sMBpDDv16NFMHSS+re7HxLZYSFD5fDiXunOKXVOG6g7xfoT0wr22KUW3a\n0f+E9V+uYRv0SCnC8hxS1S0IMLZHZ7b3dQryRf8C7rYgqDYHQdMEYUOa5EWFjE+A\nH1N94l/t+oQi/VP+q0ycy+9K7QdTkTSoCSC4w711Y1MYLvKKmnPpsGS5GesP1Lxk\nXNzXCBDaT0uhZ5Kys6FXSPfLPWL9MCJgd15LqaeZ3cgXye3a481wavl9zuhAeqF+\nzIAqSBmb8lmZlt02+mfrPlW5zm2ALgXO2Nj2KV+zZAO73MSMpmXfhU1B8G3CseTa\nvqOSMDSxYuVGp1LeF/7wZ2aXliHAGGbaEo4fghsmL0tV6OuWJ27F4v9m8LWYcfD2\nSOABRn+aD+1tzmWN97G6Z/uBTcS7g3gB8cLLMhzoROGozXtLBKyUk4MyF0lxal+F\nlJVm7IOhJUIwRNbppdyYc+89eF+VlyFO7B5sqr9AOYE4w8cKKnA=\n=LqdM\n-----END PGP SIGNATURE-----", "payload": "tree 05dd023c8530557d1fc12cc447f13e563ddd322e\nparent 0a3a6087fb91d185700d18b13365ad5969c97eb9\nauthor Deadbeef <ent3rm4n@gmail.com> 1630065183 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630065183 +0000\n\nFix rustfmt test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7dbf2e05284aba0a99c40db007c512631872ca", "html_url": "https://github.com/rust-lang/rust/commit/2d7dbf2e05284aba0a99c40db007c512631872ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7dbf2e05284aba0a99c40db007c512631872ca/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3a6087fb91d185700d18b13365ad5969c97eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3a6087fb91d185700d18b13365ad5969c97eb9", "html_url": "https://github.com/rust-lang/rust/commit/0a3a6087fb91d185700d18b13365ad5969c97eb9"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "61ef73a3cab1c6dbe80399e0f4fc5c0f77ae6685", "filename": "src/tools/rustfmt/tests/source/type.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d7dbf2e05284aba0a99c40db007c512631872ca/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7dbf2e05284aba0a99c40db007c512631872ca/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Ftype.rs?ref=2d7dbf2e05284aba0a99c40db007c512631872ca", "patch": "@@ -140,29 +140,23 @@ fn foo(a: SomeLongComplexType, b: SomeOtherLongComplexType) -> Box<Future<Item =\n \n type MyFn = fn(a: SomeLongComplexType, b: SomeOtherLongComplexType,) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;\n \n-// Const opt-out\n+// Const bound\n \n-trait T: ?   const  Super {}\n+trait T: ~   const  Super {}\n \n-const fn maybe_const<S: ?   const    T>() -> i32 { <S as T>::CONST }\n+const fn not_quite_const<S: ~  const    T>() -> i32 { <S as T>::CONST }\n \n-struct S<T:?  const   ?  Sized>(std::marker::PhantomData<T>);\n+struct S<T:~  const   ?  Sized>(std::marker::PhantomData<T>);\n \n-impl ?    const T {}\n+impl ~    const T {}\n \n-fn trait_object() -> &'static dyn ?  const T { &S }\n+fn apit(_: impl ~   const T) {}\n \n-fn i(_: impl IntoIterator<Item = Box<dyn ?    const    T>>) {}\n-\n-fn apit(_: impl ?const T) {}\n-\n-fn rpit() -> impl ?  const T { S }\n+fn rpit() -> impl ~  const T { S }\n \n pub struct Foo<T: Trait>(T);\n-impl<T:   ?  const Trait> Foo<T> {\n+impl<T:   ~  const Trait> Foo<T> {\n     fn new(t: T) -> Self {\n-        // not calling methods on `t`, so we opt out of requiring\n-        // `<T as Trait>` to have const methods via `?const`\n         Self(t)\n     }\n }\n@@ -171,4 +165,4 @@ impl<T:   ?  const Trait> Foo<T> {\n type T = typeof(\n 1);\n impl T for  .. {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "38cf909c2587a52c0b4b452df0cf6a79400d8270", "filename": "src/tools/rustfmt/tests/target/type.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d7dbf2e05284aba0a99c40db007c512631872ca/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7dbf2e05284aba0a99c40db007c512631872ca/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Ftype.rs?ref=2d7dbf2e05284aba0a99c40db007c512631872ca", "patch": "@@ -157,12 +157,6 @@ struct S<T: ~const ?Sized>(std::marker::PhantomData<T>);\n \n impl ~const T {}\n \n-fn trait_object() -> &'static dyn ~const T {\n-    &S\n-}\n-\n-fn i(_: impl IntoIterator<Item = Box<dyn ~const T>>) {}\n-\n fn apit(_: impl ~const T) {}\n \n fn rpit() -> impl ~const T {"}]}