{"sha": "4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlN2FlYWYxYjUyZWU2NmVkZTFhZGIxMDRmY2QwOGIwNDYzZWIwZjk=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2019-12-24T11:47:51Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2020-02-11T09:22:47Z"}, "message": "Improve `char::is_ascii_*` code\n\nThese methods explicitly check if a char is in a specific ASCII range,\ntherefore the `is_ascii()` check is not needed, but LLVM seems to be\nunable to remove it.\n\nWARNING: this change improves the performance on ASCII `char`s, but\ncomplex checks such as `is_ascii_punctuation` become slower on\nnon-ASCII `char`s.", "tree": {"sha": "63714665d664085780edc48352ec4ee60a9e881a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63714665d664085780edc48352ec4ee60a9e881a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "html_url": "https://github.com/rust-lang/rust/commit/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4242d9052a42cdf329c3a2430d02a3b3d415cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4242d9052a42cdf329c3a2430d02a3b3d415cb", "html_url": "https://github.com/rust-lang/rust/commit/dc4242d9052a42cdf329c3a2430d02a3b3d415cb"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "302400744e25df541fbda73dcfbdb17dc240997f", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "patch": "@@ -1075,7 +1075,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_alphabetic()\n+        match *self {\n+            'A'..='Z' | 'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -1108,7 +1111,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_uppercase()\n+        match *self {\n+            'A'..='Z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -1141,7 +1147,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_lowercase()\n+        match *self {\n+            'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -1177,7 +1186,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_alphanumeric()\n+        match *self {\n+            '0'..='9' | 'A'..='Z' | 'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -1210,7 +1222,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_digit()\n+        match *self {\n+            '0'..='9' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -1246,7 +1261,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_hexdigit()\n+        match *self {\n+            '0'..='9' | 'A'..='F' | 'a'..='f' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -1283,7 +1301,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_punctuation()\n+        match *self {\n+            '!'..='/' | ':'..='@' | '['..='`' | '{'..='~' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -1316,7 +1337,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_graphic()\n+        match *self {\n+            '!'..='~' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -1366,7 +1390,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_whitespace()\n+        match *self {\n+            '\\t' | '\\n' | '\\x0C' | '\\r' | ' ' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -1401,6 +1428,9 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_control()\n+        match *self {\n+            '\\0'..='\\x1F' | '\\x7F' => true,\n+            _ => false,\n+        }\n     }\n }"}]}