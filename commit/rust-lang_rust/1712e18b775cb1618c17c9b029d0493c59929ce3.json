{"sha": "1712e18b775cb1618c17c9b029d0493c59929ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTJlMThiNzc1Y2IxNjE4YzE3YzliMDI5ZDA0OTNjNTk5MjljZTM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-28T10:56:31Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-28T10:56:31Z"}, "message": "Rustup to latest nightly\n\nDue to https://github.com/rust-lang/rust/pull/48995 and\nhttps://github.com/rust-lang/rust/pull/49894", "tree": {"sha": "9a85205223f9aa474a55d874c8ae53221c5b1b9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a85205223f9aa474a55d874c8ae53221c5b1b9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1712e18b775cb1618c17c9b029d0493c59929ce3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJa5FO7AAoJELb6Bqbg4mZbUIYP/2s9THSbvmMsOaUZSbwU2klW\nZw791kkqwh/B1EHJk/4V5sAefOb7eQG52omT/GauYYkFY0tk803hTEn0LCE41lN8\nNEspfvOd+vMY+XfTsa0T8bBFJMJc1ZZYZfjRyovKMX3k4OhExS42N0tSiwU4azFy\npzevOA2RY3X0qoUBhryPXZ1z7AkW2eGPW4oDkamXlvyKTW1rkaJfPzZrvk92nMQz\nk3//huyBwZqpKWCX7yjowxMe2fyoQJBOsAxzfWpGwgtsWxa4rLY6+M3XfoFX66Ld\ne/YEEQ7iOHFTYYfS85z/pCI3oEFO0AQ2ZCAsI4fgoG8qicwxxp0taEZnI2naQgIh\nRVUyjzJ7LlcSEry1Sag22BAPEaNjhc4kRl3+ykeukjBsyoIpyl+GIa3rUWNrH+Ze\n9ltBvmIWvXf6P0TBIIG8VT7m9+n+VUyuOkFu6jeTZRzxHQdpC9VNONlc1LB77zZJ\nZUAHbFjcTDCdbVfiK2rifXL1/b5ALSDp1HkJHAoI9f9Jul0HWev3G9tqNtI0wdFZ\npHJK/YgAeA6F1cvTP7eHHzMZ8R4VTJiyxVihYFLR844pSLMC8lt1xu8d9Pf5gS95\nW0epA7dpFVP1uTbhnbwpPVawo3AsDXtvbQVbrpXMhthWpcoaBV8MksY7KCOoccsc\njgy7jCW8VHmFbKpjivbW\n=OYl6\n-----END PGP SIGNATURE-----", "payload": "tree 9a85205223f9aa474a55d874c8ae53221c5b1b9b\nparent d45612e606a28f95d2d204776ce736f3026f45ba\nauthor Philipp Hansch <dev@phansch.net> 1524912991 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1524912991 +0200\n\nRustup to latest nightly\n\nDue to https://github.com/rust-lang/rust/pull/48995 and\nhttps://github.com/rust-lang/rust/pull/49894\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1712e18b775cb1618c17c9b029d0493c59929ce3", "html_url": "https://github.com/rust-lang/rust/commit/1712e18b775cb1618c17c9b029d0493c59929ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1712e18b775cb1618c17c9b029d0493c59929ce3/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45612e606a28f95d2d204776ce736f3026f45ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45612e606a28f95d2d204776ce736f3026f45ba", "html_url": "https://github.com/rust-lang/rust/commit/d45612e606a28f95d2d204776ce736f3026f45ba"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "5cbf7d03191cab701b591dfd53bbcd52aaa4011c", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::Ty;\n use rustc::hir::*;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax::util::small_vector::SmallVector;\n use utils::{SpanlessEq, SpanlessHash};\n use utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n@@ -262,8 +262,8 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n }\n \n /// Return the list of bindings in a pattern.\n-fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<InternedString, Ty<'tcx>> {\n-    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut HashMap<InternedString, Ty<'tcx>>) {\n+fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<LocalInternedString, Ty<'tcx>> {\n+    fn bindings_impl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat, map: &mut HashMap<LocalInternedString, Ty<'tcx>>) {\n         match pat.node {\n             PatKind::Box(ref pat) | PatKind::Ref(ref pat, _) => bindings_impl(cx, pat, map),\n             PatKind::TupleStruct(_, ref pats, _) => for pat in pats {"}, {"sha": "860cd69303e0500e968f5fe021eeb18db9a5d339", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Span;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use utils::{span_help_and_lint, span_lint};\n use utils::{camel_case_from, camel_case_until, in_macro};\n \n@@ -99,7 +99,7 @@ declare_clippy_lint! {\n }\n \n pub struct EnumVariantNames {\n-    modules: Vec<(InternedString, String)>,\n+    modules: Vec<(LocalInternedString, String)>,\n     threshold: u64,\n }\n \n@@ -118,7 +118,7 @@ impl LintPass for EnumVariantNames {\n     }\n }\n \n-fn var2str(var: &Variant) -> InternedString {\n+fn var2str(var: &Variant) -> LocalInternedString {\n     var.node.ident.name.as_str()\n }\n "}, {"sha": "022591329b5d4cf25df81e0d08a0446ba68cdb68", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n@@ -73,7 +73,7 @@ impl LintPass for NonExpressiveNames {\n }\n \n struct ExistingName {\n-    interned: InternedString,\n+    interned: LocalInternedString,\n     span: Span,\n     len: usize,\n     whitelist: &'static [&'static str],"}, {"sha": "ff460e50d8c0486af57f00ea1f6e945ec338a312", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Span;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use utils::span_lint;\n \n /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n@@ -75,6 +75,6 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext, spa\n     }\n }\n \n-fn contains_unsafe(name: &InternedString) -> bool {\n+fn contains_unsafe(name: &LocalInternedString) -> bool {\n     name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n }"}, {"sha": "7e3f31d76c07713db02ed9c0d2173da9a8c18a8e", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visit\n use std::collections::HashMap;\n use syntax::ast;\n use syntax::codemap::Span;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for unused labels.\n@@ -30,7 +30,7 @@ declare_clippy_lint! {\n pub struct UnusedLabel;\n \n struct UnusedLabelVisitor<'a, 'tcx: 'a> {\n-    labels: HashMap<InternedString, Span>,\n+    labels: HashMap<LocalInternedString, Span>,\n     cx: &'a LateContext<'a, 'tcx>,\n }\n "}, {"sha": "5c9500afa46069b54189675c556415062c7439a7", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use utils::{match_qpath, paths, span_lint};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name, NodeId};\n use syntax::codemap::Span;\n use std::collections::{HashMap, HashSet};\n@@ -76,7 +76,7 @@ impl EarlyLintPass for Clippy {\n                     .find(|item| item.ident.name == \"paths\")\n                 {\n                     if let ItemKind::Mod(ref paths_mod) = paths.node {\n-                        let mut last_name: Option<InternedString> = None;\n+                        let mut last_name: Option<LocalInternedString> = None;\n                         for item in &paths_mod.items {\n                             let name = item.ident.name.as_str();\n                             if let Some(ref last_name) = last_name {"}, {"sha": "6701ad00722074fad0a8f8bf4426ca2e80e7dff0", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -116,7 +116,7 @@ pub fn match_def_path(tcx: TyCtxt, def_id: DefId, path: &[&str]) -> bool {\n     use syntax::symbol;\n \n     struct AbsolutePathBuffer {\n-        names: Vec<symbol::InternedString>,\n+        names: Vec<symbol::LocalInternedString>,\n     }\n \n     impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n@@ -302,7 +302,7 @@ pub fn implements_trait<'a, 'tcx>(\n         cx.tcx\n             .predicate_for_trait_def(cx.param_env, traits::ObligationCause::dummy(), trait_id, 0, ty, ty_params);\n     cx.tcx.infer_ctxt().enter(|infcx| {\n-        traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n+        traits::SelectionContext::new(&infcx).infcx().predicate_must_hold(&obligation)\n     })\n }\n "}, {"sha": "9a32d4e696cd1d292343df7a5512db6461c9368c", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1712e18b775cb1618c17c9b029d0493c59929ce3/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=1712e18b775cb1618c17c9b029d0493c59929ce3", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::*;\n use std::ops::Deref;\n use syntax::ast::LitKind;\n use syntax::ptr;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax_pos::Span;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n use utils::{opt_def_id, paths, last_path_segment};\n@@ -389,7 +389,7 @@ where\n }\n \n /// Check for fmtstr = \"... \\n\"\n-fn has_newline_end(args: &HirVec<Expr>, fmtstr: InternedString, fmtlen: usize) -> bool {\n+fn has_newline_end(args: &HirVec<Expr>, fmtstr: LocalInternedString, fmtlen: usize) -> bool {\n     if_chain! {\n         // check the final format string part\n         if let Some('\\n') = fmtstr.chars().last();\n@@ -407,7 +407,7 @@ fn has_newline_end(args: &HirVec<Expr>, fmtstr: InternedString, fmtlen: usize) -\n }\n \n /// Check for writeln!(v, \"\") / println!(\"\")\n-fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: InternedString, fmtlen: usize) -> Option<Span> {\n+fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: LocalInternedString, fmtlen: usize) -> Option<Span> {\n     if_chain! {\n         // check that the string is empty\n         if fmtlen == 1;\n@@ -427,7 +427,7 @@ fn has_empty_arg<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, fmtstr: Inter\n }\n \n /// Returns the slice of format string parts in an `Arguments::new_v1` call.\n-fn get_argument_fmtstr_parts(expr: &Expr) -> Option<(InternedString, usize)> {\n+fn get_argument_fmtstr_parts(expr: &Expr) -> Option<(LocalInternedString, usize)> {\n     if_chain! {\n         if let ExprAddrOf(_, ref expr) = expr.node; // &[\"\u2026\", \"\u2026\", \u2026]\n         if let ExprArray(ref exprs) = expr.node;"}]}