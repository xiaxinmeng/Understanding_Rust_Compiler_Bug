{"sha": "4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmQ1Yzc1YThkMDNiOWFkMmI1ZDdkZTNkNThlYjM0MjQyODg0NGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-23T12:12:15Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-23T17:00:47Z"}, "message": "Fix an ICE with continue inside a closure inside a loop condition", "tree": {"sha": "0aed3c0ed29656fd3776340493824d9516fd4336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aed3c0ed29656fd3776340493824d9516fd4336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "html_url": "https://github.com/rust-lang/rust/commit/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f68ee0b4e14a8a7e50587bf9752fc1aa72297770", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68ee0b4e14a8a7e50587bf9752fc1aa72297770", "html_url": "https://github.com/rust-lang/rust/commit/f68ee0b4e14a8a7e50587bf9752fc1aa72297770"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "13e033e67fcbb4066b047e2aa04a4dc0116ffb2e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "patch": "@@ -3538,12 +3538,22 @@ impl<'a> LoweringContext<'a> {\n                         this.expr_block(block, ThinVec::new())\n                     })\n                 })\n-            },\n+            }\n             ExprKind::Closure(\n-                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span) =>\n-            {\n-                self.with_new_scopes(|this| {\n-                    if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n+            ) => {\n+                if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                    let outer_decl = FnDecl {\n+                        inputs: decl.inputs.clone(),\n+                        output: FunctionRetTy::Default(fn_decl_span),\n+                        variadic: false,\n+                    };\n+                    // We need to lower the declaration outside the new scope, because we\n+                    // have to conserve the state of being inside a loop condition for the\n+                    // closure argument types.\n+                    let fn_decl = self.lower_fn_decl(&outer_decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         // FIXME(cramertj) allow `async` non-`move` closures with\n                         if capture_clause == CaptureBy::Ref &&\n                             !decl.inputs.is_empty()\n@@ -3563,11 +3573,6 @@ impl<'a> LoweringContext<'a> {\n \n                         // Transform `async |x: u8| -> X { ... }` into\n                         // `|x: u8| future_from_generator(|| -> X { ... })`\n-                        let outer_decl = FnDecl {\n-                            inputs: decl.inputs.clone(),\n-                            output: FunctionRetTy::Default(fn_decl_span),\n-                            variadic: false,\n-                        };\n                         let body_id = this.lower_body(Some(&outer_decl), |this| {\n                             let async_ret_ty = if let FunctionRetTy::Ty(ty) = &decl.output {\n                                 Some(&**ty)\n@@ -3581,12 +3586,17 @@ impl<'a> LoweringContext<'a> {\n                         });\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(&outer_decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             None,\n                         )\n-                    } else {\n+                    })\n+                } else {\n+                    // Lower outside new scope to preserve `is_in_loop_condition`.\n+                    let fn_decl = self.lower_fn_decl(decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         let mut is_generator = false;\n                         let body_id = this.lower_body(Some(decl), |this| {\n                             let e = this.lower_expr(body);\n@@ -3620,13 +3630,13 @@ impl<'a> LoweringContext<'a> {\n                         };\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             generator_option,\n                         )\n-                    }\n-                })\n+                    })\n+                }\n             }\n             ExprKind::Block(ref blk, opt_label) => {\n                 hir::ExprBlock(self.lower_block(blk,"}, {"sha": "4b0e941a3ce2aacef71cffd6b4fb5af2a41e322c", "filename": "src/test/ui/closure-array-break-length.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.rs?ref=4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "patch": "@@ -10,4 +10,6 @@\n \n fn main() {\n     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+\n+    while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n }"}, {"sha": "7cedcb254d697342a25d2d556cb63f87fe9219b0", "filename": "src/test/ui/closure-array-break-length.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efd5c75a8d03b9ad2b5d7de3d58eb342428844d/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr?ref=4efd5c75a8d03b9ad2b5d7de3d58eb342428844d", "patch": "@@ -4,6 +4,13 @@ error[E0268]: `continue` outside of loop\n LL |     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n    |             ^^^^^^^^ cannot break outside of a loop\n \n-error: aborting due to previous error\n+error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n+  --> $DIR/closure-array-break-length.rs:14:19\n+   |\n+LL |     while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+   |                   ^^^^^^^^ unlabeled `continue` in the condition of a `while` loop\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0268`.\n+Some errors occurred: E0268, E0590.\n+For more information about an error, try `rustc --explain E0268`."}]}