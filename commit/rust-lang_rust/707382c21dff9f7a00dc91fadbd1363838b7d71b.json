{"sha": "707382c21dff9f7a00dc91fadbd1363838b7d71b", "node_id": "C_kwDOAAsO6NoAKDcwNzM4MmMyMWRmZjlmN2EwMGRjOTFmYWRiZDEzNjM4MzhiN2Q3MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T20:36:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T20:36:45Z"}, "message": "Auto merge of #14652 - Veykril:pat2021, r=Veykril\n\nfix: Fix pat fragment handling in 2021 edition\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/9055\n\nThe fix isn't that great, but we are kind of forced to do it the quick and hacky way right now since std has changed the `matches` macro to make use of this now. And for a proper fix we need to track hygiene for identifiers which is a long way off anyways", "tree": {"sha": "d74b6e106e935c1db2e173ecaf321965379fe609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74b6e106e935c1db2e173ecaf321965379fe609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707382c21dff9f7a00dc91fadbd1363838b7d71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707382c21dff9f7a00dc91fadbd1363838b7d71b", "html_url": "https://github.com/rust-lang/rust/commit/707382c21dff9f7a00dc91fadbd1363838b7d71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707382c21dff9f7a00dc91fadbd1363838b7d71b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0025f4cd14a61eb279efaa76dad4b672233f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0025f4cd14a61eb279efaa76dad4b672233f75", "html_url": "https://github.com/rust-lang/rust/commit/0c0025f4cd14a61eb279efaa76dad4b672233f75"}, {"sha": "d1ca5055253a5dd4871b37f2813b6094203b81b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ca5055253a5dd4871b37f2813b6094203b81b2", "html_url": "https://github.com/rust-lang/rust/commit/d1ca5055253a5dd4871b37f2813b6094203b81b2"}], "stats": {"total": 103, "additions": 80, "deletions": 23}, "files": [{"sha": "99c405fb9171ad1a89b0aefc074bc7077701e4e3", "filename": "crates/hir-def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -1293,19 +1293,53 @@ ok!();\n }\n \n #[test]\n-fn test_vertical_bar_with_pat() {\n+fn test_vertical_bar_with_pat_param() {\n     check(\n         r#\"\n-macro_rules! m { (|$pat:pat| ) => { ok!(); } }\n+macro_rules! m { (|$pat:pat_param| ) => { ok!(); } }\n m! { |x| }\n  \"#,\n         expect![[r#\"\n-macro_rules! m { (|$pat:pat| ) => { ok!(); } }\n+macro_rules! m { (|$pat:pat_param| ) => { ok!(); } }\n ok!();\n  \"#]],\n     );\n }\n \n+#[test]\n+fn test_new_std_matches() {\n+    check(\n+        r#\"\n+macro_rules! matches {\n+    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) => {\n+        match $expression {\n+            $pattern $(if $guard)? => true,\n+            _ => false\n+        }\n+    };\n+}\n+fn main() {\n+    matches!(0, 0 | 1 if true);\n+}\n+ \"#,\n+        expect![[r#\"\n+macro_rules! matches {\n+    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) => {\n+        match $expression {\n+            $pattern $(if $guard)? => true,\n+            _ => false\n+        }\n+    };\n+}\n+fn main() {\n+    match 0 {\n+        0|1if true =>true , _=>false\n+    };\n+}\n+ \"#]],\n+    );\n+}\n+\n #[test]\n fn test_dollar_crate_lhs_is_not_meta() {\n     check("}, {"sha": "bb957e3ffa029a4f6ec1800af2cf97ecbefa9a05", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use base_db::{salsa, SourceDatabase};\n+use base_db::{salsa, Edition, SourceDatabase};\n use either::Either;\n use limit::Limit;\n use mbe::syntax_node_to_token_tree;\n@@ -406,21 +406,22 @@ fn macro_def(\n ) -> Result<Arc<TokenExpander>, mbe::ParseError> {\n     match id.kind {\n         MacroDefKind::Declarative(ast_id) => {\n+            let is_2021 = db.crate_graph()[id.krate].edition >= Edition::Edition2021;\n             let (mac, def_site_token_map) = match ast_id.to_node(db) {\n                 ast::Macro::MacroRules(macro_rules) => {\n                     let arg = macro_rules\n                         .token_tree()\n                         .ok_or_else(|| mbe::ParseError::Expected(\"expected a token tree\".into()))?;\n                     let (tt, def_site_token_map) = mbe::syntax_node_to_token_tree(arg.syntax());\n-                    let mac = mbe::DeclarativeMacro::parse_macro_rules(&tt)?;\n+                    let mac = mbe::DeclarativeMacro::parse_macro_rules(&tt, is_2021)?;\n                     (mac, def_site_token_map)\n                 }\n                 ast::Macro::MacroDef(macro_def) => {\n                     let arg = macro_def\n                         .body()\n                         .ok_or_else(|| mbe::ParseError::Expected(\"expected a token tree\".into()))?;\n                     let (tt, def_site_token_map) = mbe::syntax_node_to_token_tree(arg.syntax());\n-                    let mac = mbe::DeclarativeMacro::parse_macro2(&tt)?;\n+                    let mac = mbe::DeclarativeMacro::parse_macro2(&tt, is_2021)?;\n                     (mac, def_site_token_map)\n                 }\n             };"}, {"sha": "212e0a02dbc3b12ce3b310eac9ebf64bbe74c21e", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -20,7 +20,10 @@ fn benchmark_parse_macro_rules() {\n     let rules = macro_rules_fixtures_tt();\n     let hash: usize = {\n         let _pt = bench(\"mbe parse macro rules\");\n-        rules.values().map(|it| DeclarativeMacro::parse_macro_rules(it).unwrap().rules.len()).sum()\n+        rules\n+            .values()\n+            .map(|it| DeclarativeMacro::parse_macro_rules(it, true).unwrap().rules.len())\n+            .sum()\n     };\n     assert_eq!(hash, 1144);\n }\n@@ -50,7 +53,7 @@ fn benchmark_expand_macro_rules() {\n fn macro_rules_fixtures() -> FxHashMap<String, DeclarativeMacro> {\n     macro_rules_fixtures_tt()\n         .into_iter()\n-        .map(|(id, tt)| (id, DeclarativeMacro::parse_macro_rules(&tt).unwrap()))\n+        .map(|(id, tt)| (id, DeclarativeMacro::parse_macro_rules(&tt, true).unwrap()))\n         .collect()\n }\n "}, {"sha": "8e2181e977e1d85f9876f94a0199583f94d69d40", "filename": "crates/mbe/src/expander.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fexpander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fexpander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -13,10 +13,11 @@ use crate::{parser::MetaVarKind, tt, ExpandError, ExpandResult};\n pub(crate) fn expand_rules(\n     rules: &[crate::Rule],\n     input: &tt::Subtree,\n+    is_2021: bool,\n ) -> ExpandResult<tt::Subtree> {\n     let mut match_: Option<(matcher::Match, &crate::Rule)> = None;\n     for rule in rules {\n-        let new_match = matcher::match_(&rule.lhs, input);\n+        let new_match = matcher::match_(&rule.lhs, input, is_2021);\n \n         if new_match.err.is_none() {\n             // If we find a rule that applies without errors, we're done."}, {"sha": "0ab5c8c3c9e7335e3acf6c0ff11fba12022d6566", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -111,8 +111,8 @@ impl Match {\n }\n \n /// Matching errors are added to the `Match`.\n-pub(super) fn match_(pattern: &MetaTemplate, input: &tt::Subtree) -> Match {\n-    let mut res = match_loop(pattern, input);\n+pub(super) fn match_(pattern: &MetaTemplate, input: &tt::Subtree, is_2021: bool) -> Match {\n+    let mut res = match_loop(pattern, input, is_2021);\n     res.bound_count = count(res.bindings.bindings());\n     return res;\n \n@@ -354,6 +354,7 @@ struct MatchState<'t> {\n /// - `eof_items`: the set of items that would be valid if this was the EOF.\n /// - `bb_items`: the set of items that are waiting for the black-box parser.\n /// - `error_items`: the set of items in errors, used for error-resilient parsing\n+#[inline]\n fn match_loop_inner<'t>(\n     src: TtIter<'t>,\n     stack: &[TtIter<'t>],\n@@ -364,6 +365,7 @@ fn match_loop_inner<'t>(\n     next_items: &mut Vec<MatchState<'t>>,\n     eof_items: &mut SmallVec<[MatchState<'t>; 1]>,\n     error_items: &mut SmallVec<[MatchState<'t>; 1]>,\n+    is_2021: bool,\n ) {\n     macro_rules! try_push {\n         ($items: expr, $it:expr) => {\n@@ -474,7 +476,7 @@ fn match_loop_inner<'t>(\n             OpDelimited::Op(Op::Var { kind, name, .. }) => {\n                 if let &Some(kind) = kind {\n                     let mut fork = src.clone();\n-                    let match_res = match_meta_var(kind, &mut fork);\n+                    let match_res = match_meta_var(kind, &mut fork, is_2021);\n                     match match_res.err {\n                         None => {\n                             // Some meta variables are optional (e.g. vis)\n@@ -583,7 +585,7 @@ fn match_loop_inner<'t>(\n     }\n }\n \n-fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n+fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree, is_2021: bool) -> Match {\n     let mut src = TtIter::new(src);\n     let mut stack: SmallVec<[TtIter<'_>; 1]> = SmallVec::new();\n     let mut res = Match::default();\n@@ -622,6 +624,7 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n             &mut next_items,\n             &mut eof_items,\n             &mut error_items,\n+            is_2021,\n         );\n         stdx::always!(cur_items.is_empty());\n \n@@ -731,14 +734,17 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n     }\n }\n \n-fn match_meta_var(kind: MetaVarKind, input: &mut TtIter<'_>) -> ExpandResult<Option<Fragment>> {\n+fn match_meta_var(\n+    kind: MetaVarKind,\n+    input: &mut TtIter<'_>,\n+    is_2021: bool,\n+) -> ExpandResult<Option<Fragment>> {\n     let fragment = match kind {\n         MetaVarKind::Path => parser::PrefixEntryPoint::Path,\n         MetaVarKind::Ty => parser::PrefixEntryPoint::Ty,\n-        // FIXME: These two should actually behave differently depending on the edition.\n-        //\n-        // https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html\n-        MetaVarKind::Pat | MetaVarKind::PatParam => parser::PrefixEntryPoint::Pat,\n+        MetaVarKind::Pat if is_2021 => parser::PrefixEntryPoint::PatTop,\n+        MetaVarKind::Pat => parser::PrefixEntryPoint::Pat,\n+        MetaVarKind::PatParam => parser::PrefixEntryPoint::Pat,\n         MetaVarKind::Stmt => parser::PrefixEntryPoint::Stmt,\n         MetaVarKind::Block => parser::PrefixEntryPoint::Block,\n         MetaVarKind::Meta => parser::PrefixEntryPoint::MetaItem,"}, {"sha": "d20641062c1a7071052436a55bf1e8f63eccbe5e", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -107,6 +107,9 @@ pub struct DeclarativeMacro {\n     rules: Vec<Rule>,\n     /// Highest id of the token we have in TokenMap\n     shift: Shift,\n+    // This is used for correctly determining the behavior of the pat fragment\n+    // FIXME: This should be tracked by hygiene of the fragment identifier!\n+    is_2021: bool,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -190,7 +193,10 @@ pub enum Origin {\n \n impl DeclarativeMacro {\n     /// The old, `macro_rules! m {}` flavor.\n-    pub fn parse_macro_rules(tt: &tt::Subtree) -> Result<DeclarativeMacro, ParseError> {\n+    pub fn parse_macro_rules(\n+        tt: &tt::Subtree,\n+        is_2021: bool,\n+    ) -> Result<DeclarativeMacro, ParseError> {\n         // Note: this parsing can be implemented using mbe machinery itself, by\n         // matching against `$($lhs:tt => $rhs:tt);*` pattern, but implementing\n         // manually seems easier.\n@@ -211,11 +217,11 @@ impl DeclarativeMacro {\n             validate(lhs)?;\n         }\n \n-        Ok(DeclarativeMacro { rules, shift: Shift::new(tt) })\n+        Ok(DeclarativeMacro { rules, shift: Shift::new(tt), is_2021 })\n     }\n \n     /// The new, unstable `macro m {}` flavor.\n-    pub fn parse_macro2(tt: &tt::Subtree) -> Result<DeclarativeMacro, ParseError> {\n+    pub fn parse_macro2(tt: &tt::Subtree, is_2021: bool) -> Result<DeclarativeMacro, ParseError> {\n         let mut src = TtIter::new(tt);\n         let mut rules = Vec::new();\n \n@@ -244,14 +250,14 @@ impl DeclarativeMacro {\n             validate(lhs)?;\n         }\n \n-        Ok(DeclarativeMacro { rules, shift: Shift::new(tt) })\n+        Ok(DeclarativeMacro { rules, shift: Shift::new(tt), is_2021 })\n     }\n \n     pub fn expand(&self, tt: &tt::Subtree) -> ExpandResult<tt::Subtree> {\n         // apply shift\n         let mut tt = tt.clone();\n         self.shift.shift_all(&mut tt);\n-        expander::expand_rules(&self.rules, &tt)\n+        expander::expand_rules(&self.rules, &tt, self.is_2021)\n     }\n \n     pub fn map_id_down(&self, id: tt::TokenId) -> tt::TokenId {"}, {"sha": "1814e0e54c592699470f960a145b7fe1cccc4bde", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -66,6 +66,10 @@ pub(crate) mod entry {\n             patterns::pattern_single(p);\n         }\n \n+        pub(crate) fn pat_top(p: &mut Parser<'_>) {\n+            patterns::pattern_top(p);\n+        }\n+\n         pub(crate) fn ty(p: &mut Parser<'_>) {\n             types::type_(p);\n         }"}, {"sha": "1aba1f7674ffdc2ae728e7c972f76f41d5af944c", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707382c21dff9f7a00dc91fadbd1363838b7d71b/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=707382c21dff9f7a00dc91fadbd1363838b7d71b", "patch": "@@ -131,6 +131,7 @@ pub enum PrefixEntryPoint {\n     Block,\n     Stmt,\n     Pat,\n+    PatTop,\n     Ty,\n     Expr,\n     Path,\n@@ -145,6 +146,7 @@ impl PrefixEntryPoint {\n             PrefixEntryPoint::Block => grammar::entry::prefix::block,\n             PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n             PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n+            PrefixEntryPoint::PatTop => grammar::entry::prefix::pat_top,\n             PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n             PrefixEntryPoint::Expr => grammar::entry::prefix::expr,\n             PrefixEntryPoint::Path => grammar::entry::prefix::path,"}]}