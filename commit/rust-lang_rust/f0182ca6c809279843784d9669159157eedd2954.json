{"sha": "f0182ca6c809279843784d9669159157eedd2954", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMTgyY2E2YzgwOTI3OTg0Mzc4NGQ5NjY5MTU5MTU3ZWVkZDI5NTQ=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T13:57:50Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T13:57:50Z"}, "message": "fixed formatting", "tree": {"sha": "df3d7f8a00403e6625290be032633e38be3fab7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df3d7f8a00403e6625290be032633e38be3fab7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0182ca6c809279843784d9669159157eedd2954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0182ca6c809279843784d9669159157eedd2954", "html_url": "https://github.com/rust-lang/rust/commit/f0182ca6c809279843784d9669159157eedd2954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0182ca6c809279843784d9669159157eedd2954/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d55381a9698694fe74438ff7ab28f9f99a45ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d55381a9698694fe74438ff7ab28f9f99a45ecd", "html_url": "https://github.com/rust-lang/rust/commit/2d55381a9698694fe74438ff7ab28f9f99a45ecd"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "47af63e6dea7fa0719948707bf6f3b12b430bc58", "filename": "src/strings.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f0182ca6c809279843784d9669159157eedd2954/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0182ca6c809279843784d9669159157eedd2954/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=f0182ca6c809279843784d9669159157eedd2954", "patch": "@@ -18,9 +18,9 @@ declare_lint! {\n }\n \n declare_lint! {\n-\tpub STRING_ADD,\n-\tAllow,\n-\t\"Warn on `x + ..` where x is a `String`\"\n+    pub STRING_ADD,\n+    Allow,\n+    \"Warn on `x + ..` where x is a `String`\"\n }\n \n #[derive(Copy, Clone)]\n@@ -32,26 +32,26 @@ impl LintPass for StringAdd {\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n-\t\tif let &ExprBinary(Spanned{ node: BiAdd, .. }, ref left, _) = &e.node {\n-\t\t\tif is_string(cx, left) {\n-\t\t\t\tif let Allow = cx.current_level(STRING_ADD_ASSIGN) {\n-\t\t\t\t\t// the string_add_assign is allow, so no duplicates\n-\t\t\t\t} else {\n-\t\t\t\t\tlet parent = get_parent_expr(cx, e);\n-\t\t\t\t\tif let Some(ref p) = parent {\n-\t\t\t\t\t\tif let &ExprAssign(ref target, _) = &p.node {\n-\t\t\t\t\t\t\t// avoid duplicate matches\n-\t\t\t\t\t\t\tif is_exp_equal(target, left) { return; }\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//TODO check for duplicates\n-\t\t\t\t span_lint(cx, STRING_ADD, e.span,\n-\t\t\t\t\t\t\"you add something to a string. \\\n-\t\t\t\t\t\tConsider using `String::push_str()` instead.\")\n-\t\t\t}\n-\t\t}\n-\t}\n+        if let &ExprBinary(Spanned{ node: BiAdd, .. }, ref left, _) = &e.node {\n+            if is_string(cx, left) {\n+                if let Allow = cx.current_level(STRING_ADD_ASSIGN) {\n+                    // the string_add_assign is allow, so no duplicates\n+                } else {\n+                    let parent = get_parent_expr(cx, e);\n+                    if let Some(ref p) = parent {\n+                        if let &ExprAssign(ref target, _) = &p.node {\n+                            // avoid duplicate matches\n+                            if is_exp_equal(target, left) { return; }\n+                        }\n+                    }\n+                }\n+                //TODO check for duplicates\n+                 span_lint(cx, STRING_ADD, e.span,\n+                        \"you add something to a string. \\\n+                        Consider using `String::push_str()` instead.\")\n+            }\n+        }\n+    }\n }\n             \n \n@@ -75,7 +75,7 @@ impl LintPass for StringAddAssign {\n }\n \n fn is_string(cx: &Context, e: &Expr) -> bool {\n-\tlet ty = walk_ptrs_ty(cx.tcx.expr_ty(e));\n+    let ty = walk_ptrs_ty(cx.tcx.expr_ty(e));\n     if let TyStruct(did, _) = ty.sty {\n         match_def_path(cx, did.did, &[\"collections\", \"string\", \"String\"])\n     } else { false }"}]}