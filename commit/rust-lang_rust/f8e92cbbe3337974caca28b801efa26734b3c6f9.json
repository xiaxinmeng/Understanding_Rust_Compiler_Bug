{"sha": "f8e92cbbe3337974caca28b801efa26734b3c6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZTkyY2JiZTMzMzc5NzRjYWNhMjhiODAxZWZhMjY3MzRiM2M2Zjk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T03:56:15Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:17Z"}, "message": "fix Vec<ZeroSizeType>", "tree": {"sha": "6aad0021abcdb801f827f56db2e4c9e169ae3f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aad0021abcdb801f827f56db2e4c9e169ae3f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e92cbbe3337974caca28b801efa26734b3c6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e92cbbe3337974caca28b801efa26734b3c6f9", "html_url": "https://github.com/rust-lang/rust/commit/f8e92cbbe3337974caca28b801efa26734b3c6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e92cbbe3337974caca28b801efa26734b3c6f9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138437956c9ab78aede9bb698aa80f9367b3b75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/138437956c9ab78aede9bb698aa80f9367b3b75a", "html_url": "https://github.com/rust-lang/rust/commit/138437956c9ab78aede9bb698aa80f9367b3b75a"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "11c737672fb4c033a4e07739a94ded2716768bc3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8e92cbbe3337974caca28b801efa26734b3c6f9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e92cbbe3337974caca28b801efa26734b3c6f9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f8e92cbbe3337974caca28b801efa26734b3c6f9", "patch": "@@ -91,6 +91,7 @@ impl<T> Vec<T> {\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n     /// ```\n     pub fn with_capacity(capacity: uint) -> Vec<T> {\n+        if size_of::<T>() == 0 { return Vec { len: 0, cap: ::uint::MAX, ptr: 0 as *mut T } }\n         if capacity == 0 {\n             Vec::new()\n         } else {\n@@ -486,6 +487,7 @@ impl<T> Vec<T> {\n     /// assert_eq!(vec.capacity(), 11);\n     /// ```\n     pub fn reserve_exact(&mut self, capacity: uint) {\n+        if size_of::<T>() == 0 { return }\n         if capacity > self.cap {\n             let size = capacity.checked_mul(&size_of::<T>()).expect(\"capacity overflow\");\n             unsafe {\n@@ -505,6 +507,7 @@ impl<T> Vec<T> {\n     /// vec.shrink_to_fit();\n     /// ```\n     pub fn shrink_to_fit(&mut self) {\n+        if size_of::<T>() == 0 { return }\n         if self.len == 0 {\n             if self.cap != 0 {\n                 unsafe {\n@@ -559,6 +562,12 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn push(&mut self, value: T) {\n+        if size_of::<T>() == 0 {\n+            // zero-size types consume no memory, so we can't rely on the address space running out\n+            self.len = self.len.checked_add(&1).expect(\"length overflow\");\n+            unsafe { forget(value); }\n+            return\n+        }\n         if self.len == self.cap {\n             let old_size = self.cap * size_of::<T>();\n             let size = max(old_size, 2 * size_of::<T>()) * 2;\n@@ -1405,7 +1414,9 @@ impl<T> Drop for Vec<T> {\n                 for x in self.as_mut_slice().iter() {\n                     ptr::read(x);\n                 }\n-                deallocate(self.ptr as *mut u8, self.cap * size_of::<T>(), min_align_of::<T>())\n+                if size_of::<T>() != 0 {\n+                    deallocate(self.ptr as *mut u8, self.cap * size_of::<T>(), min_align_of::<T>())\n+                }\n             }\n         }\n     }\n@@ -1460,7 +1471,9 @@ impl<T> Drop for MoveItems<T> {\n         if self.cap != 0 {\n             for _x in *self {}\n             unsafe {\n-                deallocate(self.allocation, self.cap * size_of::<T>(), min_align_of::<T>())\n+                if size_of::<T>() != 0 {\n+                    deallocate(self.allocation, self.cap * size_of::<T>(), min_align_of::<T>())\n+                }\n             }\n         }\n     }"}]}