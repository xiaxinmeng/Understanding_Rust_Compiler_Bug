{"sha": "9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzRiY2JkM2QxMjBlN2ExM2I2MmJiNDdlODgyZmM5Y2U2MzM4Y2Q=", "commit": {"author": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-06-03T14:12:16Z"}, "committer": {"name": "Carol Nichols", "email": "carol.nichols@gmail.com", "date": "2015-06-03T14:12:16Z"}, "message": "Improve `try!` docs to make clearer it returns `Result`.\n\nThe API documentation is not explicit enough that because `try!` returns\n`Err` early for you, you can only use it in functions that return\n`Result`. The book mentions this, but if you come across `try!` outside\nof the book and look it up in the docs, this restriction on the return\ntype of the function is not particularly clear.", "tree": {"sha": "242e0ba071a808b321eedcf7aaa2e48521df15fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/242e0ba071a808b321eedcf7aaa2e48521df15fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "html_url": "https://github.com/rust-lang/rust/commit/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b56d73dc0e8b988f91c44fd9f9e40331451796b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b56d73dc0e8b988f91c44fd9f9e40331451796b", "html_url": "https://github.com/rust-lang/rust/commit/5b56d73dc0e8b988f91c44fd9f9e40331451796b"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "003c4b2b78c5ccc8e3f790b4c4f298e5758b4859", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "patch": "@@ -223,7 +223,9 @@\n //! }\n //! ```\n //!\n-//! `try!` is imported by the prelude, and is available everywhere.\n+//! `try!` is imported by the prelude and is available everywhere, but it can only\n+//! be used in functions that return `Result` because of the early return of\n+//! `Err` that it provides.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "a7c18783025e0159457c14c66549e66645d53c5f", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9634bcbd3d120e7a13b62bb47e882fc9ce6338cd/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=9634bcbd3d120e7a13b62bb47e882fc9ce6338cd", "patch": "@@ -117,7 +117,33 @@ macro_rules! println {\n }\n \n /// Helper macro for unwrapping `Result` values while returning early with an\n-/// error if the value of the expression is `Err`.\n+/// error if the value of the expression is `Err`. Can only be used in\n+/// functions that return `Result` because of the early return of `Err` that\n+/// it provides.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::io;\n+/// use std::fs::File;\n+///\n+/// fn write_to_file_using_try() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     try!(file.write_line(\"This is a list of my best friends.\"));\n+///     println!(\"I wrote to the file\");\n+///     Ok()\n+/// }\n+/// // This is equivalent to:\n+/// fn write_to_file_using_match() -> Result<(), io::Error> {\n+///     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+///     match file.write_line(\"This is a list of my best friends.\") {\n+///       Ok(_) => (),\n+///       Err(e) => return Err(e),\n+///     }\n+///     println!(\"I wrote to the file\");\n+///     Ok()\n+/// }\n+/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! try {"}]}