{"sha": "fada46c4214f26dbdc0fd150a713aced476e75b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGE0NmM0MjE0ZjI2ZGJkYzBmZDE1MGE3MTNhY2VkNDc2ZTc1YjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-24T21:32:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-25T00:11:13Z"}, "message": "Add core::hash containing SipHash-2-4 implementation. Re: #1616 and #859.", "tree": {"sha": "785647aa824f6ee061be7fcd46021c03eb367b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/785647aa824f6ee061be7fcd46021c03eb367b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fada46c4214f26dbdc0fd150a713aced476e75b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fada46c4214f26dbdc0fd150a713aced476e75b5", "html_url": "https://github.com/rust-lang/rust/commit/fada46c4214f26dbdc0fd150a713aced476e75b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fada46c4214f26dbdc0fd150a713aced476e75b5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0737f1b53d1af2dfcd7884e51cfb7ddcab770810", "url": "https://api.github.com/repos/rust-lang/rust/commits/0737f1b53d1af2dfcd7884e51cfb7ddcab770810", "html_url": "https://github.com/rust-lang/rust/commit/0737f1b53d1af2dfcd7884e51cfb7ddcab770810"}], "stats": {"total": 184, "additions": 171, "deletions": 13}, "files": [{"sha": "d298ff15a9ece805cf446957ea2b797d8089e888", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=fada46c4214f26dbdc0fd150a713aced476e75b5", "patch": "@@ -49,6 +49,7 @@ export tuple;\n export to_str, to_bytes;\n export dvec, dvec_iter;\n export dlist, dlist_iter;\n+export hash;\n export cmp;\n export num;\n \n@@ -162,6 +163,7 @@ mod tuple;\n \n mod cmp;\n mod num;\n+mod hash;\n mod either;\n mod iter;\n mod logging;"}, {"sha": "072c3fe70fdd6ce3ed0c8c02df96cb9a0edaf8da", "filename": "src/libcore/hash.rs", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=fada46c4214f26dbdc0fd150a713aced476e75b5", "patch": "@@ -0,0 +1,163 @@\n+/*!\n+ * Implementation of SipHash 2-4\n+ *\n+ * See: http://131002.net/siphash/\n+ *\n+ * Consider this as a main \"general-purpose\" hash for all hashtables: it\n+ * runs at good speed (competitive with spooky and city) and permits\n+ * cryptographically strong _keyed_ hashing. Key your hashtables from a\n+ * CPRNG like rand::rng.\n+ */\n+\n+pure fn hash_bytes(buf: &[const u8]) -> u64 {\n+    ret hash_bytes_keyed(buf, 0u64, 0u64);\n+}\n+\n+pure fn hash_bytes_keyed(buf: &[const u8], k0: u64, k1: u64) -> u64 {\n+\n+    let mut v0 : u64 = k0 ^ 0x736f_6d65_7073_6575;\n+    let mut v1 : u64 = k1 ^ 0x646f_7261_6e64_6f6d;\n+    let mut v2 : u64 = k0 ^ 0x6c79_6765_6e65_7261;\n+    let mut v3 : u64 = k1 ^ 0x7465_6462_7974_6573;\n+\n+    #macro([#u8to64_le(buf,i),\n+            (buf[0+i] as u64 |\n+             buf[1+i] as u64 << 8 |\n+             buf[2+i] as u64 << 16 |\n+             buf[3+i] as u64 << 24 |\n+             buf[4+i] as u64 << 32 |\n+             buf[5+i] as u64 << 40 |\n+             buf[6+i] as u64 << 48 |\n+             buf[7+i] as u64 << 56)]);\n+\n+    #macro([#rotl(x,b), (x << b) | (x >> (64 - b))]);\n+\n+    #macro([#compress(), {\n+        v0 += v1; v1 = #rotl(v1, 13); v1 ^= v0; v0 = #rotl(v0, 32);\n+        v2 += v3; v3 = #rotl(v3, 16); v3 ^= v2;\n+        v0 += v3; v3 = #rotl(v3, 21); v3 ^= v0;\n+        v2 += v1; v1 = #rotl(v1, 17); v1 ^= v2; v2 = #rotl(v2, 32);\n+    }]);\n+\n+    let len = vec::len(buf);\n+    let end = len & (!0x7);\n+    let left = len & 0x7;\n+\n+    let mut i = 0;\n+    while i < end {\n+        let m = #u8to64_le(buf, i);\n+        v3 ^= m;\n+        #compress();\n+        #compress();\n+        v0 ^= m;\n+        i += 8;\n+    }\n+\n+    let mut b : u64 = (len as u64 & 0xff) << 56;\n+\n+    if left > 0 { b |= buf[i] as u64; }\n+    if left > 1 { b |= buf[i + 1] as u64 << 8; }\n+    if left > 2 { b |= buf[i + 2] as u64 << 16; }\n+    if left > 3 { b |= buf[i + 3] as u64 << 24; }\n+    if left > 4 { b |= buf[i + 4] as u64 << 32; }\n+    if left > 5 { b |= buf[i + 5] as u64 << 40; }\n+    if left > 6 { b |= buf[i + 6] as u64 << 48; }\n+\n+    v3 ^= b;\n+    #compress();\n+    #compress();\n+    v0 ^= b;\n+\n+    v2 ^= 0xff;\n+    #compress();\n+    #compress();\n+    #compress();\n+    #compress();\n+\n+    ret v0 ^ v1 ^ v2 ^ v3;\n+}\n+\n+#[test]\n+fn test_siphash() {\n+    let vecs : [[u8]/8]/64 = [\n+        [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ]/_,\n+        [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ]/_,\n+        [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ]/_,\n+        [ 0x2d, 0x7e, 0xfb, 0xd7, 0x96, 0x66, 0x67, 0x85, ]/_,\n+        [ 0xb7, 0x87, 0x71, 0x27, 0xe0, 0x94, 0x27, 0xcf, ]/_,\n+        [ 0x8d, 0xa6, 0x99, 0xcd, 0x64, 0x55, 0x76, 0x18, ]/_,\n+        [ 0xce, 0xe3, 0xfe, 0x58, 0x6e, 0x46, 0xc9, 0xcb, ]/_,\n+        [ 0x37, 0xd1, 0x01, 0x8b, 0xf5, 0x00, 0x02, 0xab, ]/_,\n+        [ 0x62, 0x24, 0x93, 0x9a, 0x79, 0xf5, 0xf5, 0x93, ]/_,\n+        [ 0xb0, 0xe4, 0xa9, 0x0b, 0xdf, 0x82, 0x00, 0x9e, ]/_,\n+        [ 0xf3, 0xb9, 0xdd, 0x94, 0xc5, 0xbb, 0x5d, 0x7a, ]/_,\n+        [ 0xa7, 0xad, 0x6b, 0x22, 0x46, 0x2f, 0xb3, 0xf4, ]/_,\n+        [ 0xfb, 0xe5, 0x0e, 0x86, 0xbc, 0x8f, 0x1e, 0x75, ]/_,\n+        [ 0x90, 0x3d, 0x84, 0xc0, 0x27, 0x56, 0xea, 0x14, ]/_,\n+        [ 0xee, 0xf2, 0x7a, 0x8e, 0x90, 0xca, 0x23, 0xf7, ]/_,\n+        [ 0xe5, 0x45, 0xbe, 0x49, 0x61, 0xca, 0x29, 0xa1, ]/_,\n+        [ 0xdb, 0x9b, 0xc2, 0x57, 0x7f, 0xcc, 0x2a, 0x3f, ]/_,\n+        [ 0x94, 0x47, 0xbe, 0x2c, 0xf5, 0xe9, 0x9a, 0x69, ]/_,\n+        [ 0x9c, 0xd3, 0x8d, 0x96, 0xf0, 0xb3, 0xc1, 0x4b, ]/_,\n+        [ 0xbd, 0x61, 0x79, 0xa7, 0x1d, 0xc9, 0x6d, 0xbb, ]/_,\n+        [ 0x98, 0xee, 0xa2, 0x1a, 0xf2, 0x5c, 0xd6, 0xbe, ]/_,\n+        [ 0xc7, 0x67, 0x3b, 0x2e, 0xb0, 0xcb, 0xf2, 0xd0, ]/_,\n+        [ 0x88, 0x3e, 0xa3, 0xe3, 0x95, 0x67, 0x53, 0x93, ]/_,\n+        [ 0xc8, 0xce, 0x5c, 0xcd, 0x8c, 0x03, 0x0c, 0xa8, ]/_,\n+        [ 0x94, 0xaf, 0x49, 0xf6, 0xc6, 0x50, 0xad, 0xb8, ]/_,\n+        [ 0xea, 0xb8, 0x85, 0x8a, 0xde, 0x92, 0xe1, 0xbc, ]/_,\n+        [ 0xf3, 0x15, 0xbb, 0x5b, 0xb8, 0x35, 0xd8, 0x17, ]/_,\n+        [ 0xad, 0xcf, 0x6b, 0x07, 0x63, 0x61, 0x2e, 0x2f, ]/_,\n+        [ 0xa5, 0xc9, 0x1d, 0xa7, 0xac, 0xaa, 0x4d, 0xde, ]/_,\n+        [ 0x71, 0x65, 0x95, 0x87, 0x66, 0x50, 0xa2, 0xa6, ]/_,\n+        [ 0x28, 0xef, 0x49, 0x5c, 0x53, 0xa3, 0x87, 0xad, ]/_,\n+        [ 0x42, 0xc3, 0x41, 0xd8, 0xfa, 0x92, 0xd8, 0x32, ]/_,\n+        [ 0xce, 0x7c, 0xf2, 0x72, 0x2f, 0x51, 0x27, 0x71, ]/_,\n+        [ 0xe3, 0x78, 0x59, 0xf9, 0x46, 0x23, 0xf3, 0xa7, ]/_,\n+        [ 0x38, 0x12, 0x05, 0xbb, 0x1a, 0xb0, 0xe0, 0x12, ]/_,\n+        [ 0xae, 0x97, 0xa1, 0x0f, 0xd4, 0x34, 0xe0, 0x15, ]/_,\n+        [ 0xb4, 0xa3, 0x15, 0x08, 0xbe, 0xff, 0x4d, 0x31, ]/_,\n+        [ 0x81, 0x39, 0x62, 0x29, 0xf0, 0x90, 0x79, 0x02, ]/_,\n+        [ 0x4d, 0x0c, 0xf4, 0x9e, 0xe5, 0xd4, 0xdc, 0xca, ]/_,\n+        [ 0x5c, 0x73, 0x33, 0x6a, 0x76, 0xd8, 0xbf, 0x9a, ]/_,\n+        [ 0xd0, 0xa7, 0x04, 0x53, 0x6b, 0xa9, 0x3e, 0x0e, ]/_,\n+        [ 0x92, 0x59, 0x58, 0xfc, 0xd6, 0x42, 0x0c, 0xad, ]/_,\n+        [ 0xa9, 0x15, 0xc2, 0x9b, 0xc8, 0x06, 0x73, 0x18, ]/_,\n+        [ 0x95, 0x2b, 0x79, 0xf3, 0xbc, 0x0a, 0xa6, 0xd4, ]/_,\n+        [ 0xf2, 0x1d, 0xf2, 0xe4, 0x1d, 0x45, 0x35, 0xf9, ]/_,\n+        [ 0x87, 0x57, 0x75, 0x19, 0x04, 0x8f, 0x53, 0xa9, ]/_,\n+        [ 0x10, 0xa5, 0x6c, 0xf5, 0xdf, 0xcd, 0x9a, 0xdb, ]/_,\n+        [ 0xeb, 0x75, 0x09, 0x5c, 0xcd, 0x98, 0x6c, 0xd0, ]/_,\n+        [ 0x51, 0xa9, 0xcb, 0x9e, 0xcb, 0xa3, 0x12, 0xe6, ]/_,\n+        [ 0x96, 0xaf, 0xad, 0xfc, 0x2c, 0xe6, 0x66, 0xc7, ]/_,\n+        [ 0x72, 0xfe, 0x52, 0x97, 0x5a, 0x43, 0x64, 0xee, ]/_,\n+        [ 0x5a, 0x16, 0x45, 0xb2, 0x76, 0xd5, 0x92, 0xa1, ]/_,\n+        [ 0xb2, 0x74, 0xcb, 0x8e, 0xbf, 0x87, 0x87, 0x0a, ]/_,\n+        [ 0x6f, 0x9b, 0xb4, 0x20, 0x3d, 0xe7, 0xb3, 0x81, ]/_,\n+        [ 0xea, 0xec, 0xb2, 0xa3, 0x0b, 0x22, 0xa8, 0x7f, ]/_,\n+        [ 0x99, 0x24, 0xa4, 0x3c, 0xc1, 0x31, 0x57, 0x24, ]/_,\n+        [ 0xbd, 0x83, 0x8d, 0x3a, 0xaf, 0xbf, 0x8d, 0xb7, ]/_,\n+        [ 0x0b, 0x1a, 0x2a, 0x32, 0x65, 0xd5, 0x1a, 0xea, ]/_,\n+        [ 0x13, 0x50, 0x79, 0xa3, 0x23, 0x1c, 0xe6, 0x60, ]/_,\n+        [ 0x93, 0x2b, 0x28, 0x46, 0xe4, 0xd7, 0x06, 0x66, ]/_,\n+        [ 0xe1, 0x91, 0x5f, 0x5c, 0xb1, 0xec, 0xa4, 0x6c, ]/_,\n+        [ 0xf3, 0x25, 0x96, 0x5c, 0xa1, 0x6d, 0x62, 0x9f, ]/_,\n+        [ 0x57, 0x5f, 0xf2, 0x8e, 0x60, 0x38, 0x1b, 0xe5, ]/_,\n+        [ 0x72, 0x45, 0x06, 0xeb, 0x4c, 0x32, 0x8a, 0x95, ]/_\n+    ]/_;\n+\n+    let k0 = 0x_07_06_05_04_03_02_01_00_u64;\n+    let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08_u64;\n+    let mut buf : ~[u8] = ~[];\n+    let mut t = 0;\n+    while t < 64 {\n+        #debug(\"siphash test %?\", t);\n+        let vec = #u8to64_le(vecs[t], 0);\n+        let out = hash_bytes_keyed(buf, k0, k1);\n+        #debug(\"got %?, expected %?\", out, vec);\n+        assert vec == out;\n+        buf += ~[t as u8];\n+        t += 1;\n+    }\n+\n+}\n\\ No newline at end of file"}, {"sha": "b819ef0761e172c614c35ea6f426f8fbcd5e1c43", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fada46c4214f26dbdc0fd150a713aced476e75b5", "patch": "@@ -660,11 +660,10 @@ pure fn le(&&a: ~str, &&b: ~str) -> bool { a <= b }\n \n /// String hash function\n pure fn hash(&&s: ~str) -> uint {\n-    // djb hash.\n-    // FIXME: replace with murmur. (see #859 and #1616)\n-    let mut u: uint = 5381u;\n-    for each(s) |c| { u *= 33u; u += c as uint; }\n-    ret u;\n+    let x = do as_bytes(s) |bytes| {\n+        hash::hash_bytes(bytes)\n+    };\n+    ret x as uint;\n }\n \n /*"}, {"sha": "d10ac3a1b0f5a4b6c5b992f46698a2e3afa12536", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fada46c4214f26dbdc0fd150a713aced476e75b5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=fada46c4214f26dbdc0fd150a713aced476e75b5", "patch": "@@ -1663,15 +1663,9 @@ mod u8 {\n     /// Bytewise greater than\n     pure fn gt(&&a: ~[u8], &&b: ~[u8]) -> bool { cmp(a, b) > 0 }\n \n-    /// String hash function\n+    /// Byte-vec hash function\n     fn hash(&&s: ~[u8]) -> uint {\n-        /* Seems to have been tragically copy/pasted from str.rs,\n-           or vice versa. But I couldn't figure out how to abstract\n-           it out. -- tjc */\n-\n-        let mut u: uint = 5381u;\n-        vec::iter(s, |c| {u *= 33u; u += c as uint;});\n-        ret u;\n+        hash::hash_bytes(s) as uint\n     }\n \n     /**"}]}