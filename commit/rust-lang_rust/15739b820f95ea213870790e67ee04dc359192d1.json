{"sha": "15739b820f95ea213870790e67ee04dc359192d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzM5YjgyMGY5NWVhMjEzODcwNzkwZTY3ZWUwNGRjMzU5MTkyZDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-14T20:12:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:56Z"}, "message": "Nit: rework region obligations to a snapshotted vector", "tree": {"sha": "b2afb1181a40a2dd976a136374dc6f882e499fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2afb1181a40a2dd976a136374dc6f882e499fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15739b820f95ea213870790e67ee04dc359192d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15739b820f95ea213870790e67ee04dc359192d1", "html_url": "https://github.com/rust-lang/rust/commit/15739b820f95ea213870790e67ee04dc359192d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15739b820f95ea213870790e67ee04dc359192d1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72259101f275c5e0013cea7cff34b718e240866", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72259101f275c5e0013cea7cff34b718e240866", "html_url": "https://github.com/rust-lang/rust/commit/f72259101f275c5e0013cea7cff34b718e240866"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "f734ff84f639eadb2cca80f29dc4dbc1c2346178", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=15739b820f95ea213870790e67ee04dc359192d1", "patch": "@@ -35,7 +35,7 @@ use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n use syntax_pos::{self, Span, DUMMY_SP};\n-use util::nodemap::{NodeMap, FxHashMap};\n+use util::nodemap::FxHashMap;\n use arena::DroplessArena;\n \n use self::combine::CombineFields;\n@@ -179,7 +179,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // for each body-id in this map, which will process the\n     // obligations within. This is expected to be done 'late enough'\n     // that all type inference variables have been bound and so forth.\n-    region_obligations: RefCell<NodeMap<Vec<RegionObligation<'tcx>>>>,\n+    region_obligations: RefCell<Vec<(ast::NodeId, RegionObligation<'tcx>)>>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -450,7 +450,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             tainted_by_errors_flag: Cell::new(false),\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n-            region_obligations: RefCell::new(NodeMap()),\n+            region_obligations: RefCell::new(vec![]),\n         }))\n     }\n }\n@@ -478,6 +478,7 @@ pub struct CombinedSnapshot<'a, 'tcx:'a> {\n     int_snapshot: unify::Snapshot<ty::IntVid>,\n     float_snapshot: unify::Snapshot<ty::FloatVid>,\n     region_constraints_snapshot: RegionSnapshot,\n+    region_obligations_snapshot: usize,\n     was_in_snapshot: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n@@ -786,6 +787,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             int_snapshot: self.int_unification_table.borrow_mut().snapshot(),\n             float_snapshot: self.float_unification_table.borrow_mut().snapshot(),\n             region_constraints_snapshot: self.borrow_region_constraints().start_snapshot(),\n+            region_obligations_snapshot: self.region_obligations.borrow().len(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e. during typeck)\n             // to ban writes from within a snapshot to them.\n@@ -802,6 +804,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                int_snapshot,\n                                float_snapshot,\n                                region_constraints_snapshot,\n+                               region_obligations_snapshot,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n \n@@ -819,6 +822,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.float_unification_table\n             .borrow_mut()\n             .rollback_to(float_snapshot);\n+        self.region_obligations\n+            .borrow_mut()\n+            .truncate(region_obligations_snapshot);\n         self.borrow_region_constraints()\n             .rollback_to(region_constraints_snapshot);\n     }\n@@ -830,6 +836,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                int_snapshot,\n                                float_snapshot,\n                                region_constraints_snapshot,\n+                               region_obligations_snapshot: _,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n "}, {"sha": "32f09795668bf50d2032ed0dd8448e327af29577", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=15739b820f95ea213870790e67ee04dc359192d1", "patch": "@@ -86,9 +86,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) {\n         self.region_obligations\n             .borrow_mut()\n-            .entry(body_id)\n-            .or_insert(vec![])\n-            .push(obligation);\n+            .push((body_id, obligation));\n     }\n \n     /// Process the region obligations that must be proven (during\n@@ -131,10 +129,16 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: ast::NodeId,\n     ) {\n-        let region_obligations = match self.region_obligations.borrow_mut().remove(&body_id) {\n-            None => vec![],\n-            Some(vec) => vec,\n-        };\n+        assert!(!self.in_snapshot.get(), \"cannot process registered region obligations in a snapshot\");\n+\n+        // pull out the region obligations with the given `body_id` (leaving the rest)\n+        let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n+        {\n+            let mut r_o = self.region_obligations.borrow_mut();\n+            for (_, obligation) in r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id) {\n+                my_region_obligations.push(obligation);\n+            }\n+        }\n \n         let outlives =\n             TypeOutlives::new(self, region_bound_pairs, implicit_region_bound, param_env);\n@@ -143,7 +147,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             sup_type,\n             sub_region,\n             cause,\n-        } in region_obligations\n+        } in my_region_obligations\n         {\n             let origin = SubregionOrigin::from_obligation_cause(\n                 &cause,\n@@ -170,11 +174,13 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         outlives.type_must_outlive(origin, ty, region);\n     }\n \n-    /// Ignore the region obligations for a given `body_id`, not bothering to\n-    /// prove them. This function should not really exist; it is used to accommodate some older\n-    /// code for the time being.\n-    pub fn ignore_region_obligations(&self, body_id: ast::NodeId) {\n-        self.region_obligations.borrow_mut().remove(&body_id);\n+    /// Ignore the region obligations, not bothering to prove\n+    /// them. This function should not really exist; it is used to\n+    /// accommodate some older code for the time being.\n+    pub fn ignore_region_obligations(&self) {\n+        assert!(!self.in_snapshot.get(), \"cannot ignore registered region obligations in a snapshot\");\n+\n+        self.region_obligations.borrow_mut().clear();\n     }\n }\n "}, {"sha": "5e9019c92c5b73be37503504310f8b5eb5c04de6", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=15739b820f95ea213870790e67ee04dc359192d1", "patch": "@@ -45,6 +45,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n+#![feature(drain_filter)]\n #![feature(i128_type)]\n #![feature(match_default_bindings)]\n #![feature(inclusive_range_syntax)]"}, {"sha": "55b1a913f0d1de6da737053e7b7edd95ff6ed97e", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15739b820f95ea213870790e67ee04dc359192d1/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=15739b820f95ea213870790e67ee04dc359192d1", "patch": "@@ -511,7 +511,6 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            unnormalized_env.reveal);\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let body_id = cause.body_id;\n         let predicates = match fully_normalize(\n             &infcx,\n             cause,\n@@ -546,7 +545,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // properly, and that code is currently largely confined to\n         // regionck (though I made some efforts to extract it\n         // out). -nmatsakis\n-        let _ = infcx.ignore_region_obligations(body_id);\n+        let _ = infcx.ignore_region_obligations();\n \n         infcx.resolve_regions_and_report_errors(region_context, &region_scope_tree, &free_regions);\n         let predicates = match infcx.fully_resolve(&predicates) {"}]}