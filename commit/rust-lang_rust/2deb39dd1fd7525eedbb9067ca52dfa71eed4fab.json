{"sha": "2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWIzOWRkMWZkNzUyNWVlZGJiOTA2N2NhNTJkZmE3MWVlZDRmYWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-16T10:47:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-16T16:00:30Z"}, "message": "ty: add `ty::ConstKind::Error` to replace `tcx.consts.err`.", "tree": {"sha": "21211b7221818e81648df00e86819dc8b86a26a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21211b7221818e81648df00e86819dc8b86a26a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "html_url": "https://github.com/rust-lang/rust/commit/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4d49d60fd696c4036d438292673a2d7fd34519", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4d49d60fd696c4036d438292673a2d7fd34519", "html_url": "https://github.com/rust-lang/rust/commit/4e4d49d60fd696c4036d438292673a2d7fd34519"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "a95d276f4a8b8cc901b016e145373e1c7e2f229b", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -251,7 +251,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 bug!(\"unexpected const {:?}\", ct)\n             }\n \n-            ty::ConstKind::Param(_) | ty::ConstKind::Value(_) | ty::ConstKind::Unevaluated(..) => {}\n+            ty::ConstKind::Param(_)\n+            | ty::ConstKind::Value(_)\n+            | ty::ConstKind::Unevaluated(..)\n+            | ty::ConstKind::Error => {}\n         }\n \n         ct.super_fold_with(self)"}, {"sha": "bd9d108cfe871278ad7920bf6221ef1b352345c6", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             match c.val {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     self.err = Some(FixupError::UnresolvedConst(vid));\n-                    return self.tcx().consts.err;\n+                    return self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: c.ty });\n                 }\n                 ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);"}, {"sha": "0762c0eed99595c18ec22d8c1958dae17bf3f282", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -182,7 +182,7 @@ pub struct CommonLifetimes<'tcx> {\n }\n \n pub struct CommonConsts<'tcx> {\n-    pub err: &'tcx Const<'tcx>,\n+    pub unit: &'tcx Const<'tcx>,\n }\n \n pub struct LocalTableInContext<'a, V> {\n@@ -858,9 +858,9 @@ impl<'tcx> CommonConsts<'tcx> {\n         let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;\n \n         CommonConsts {\n-            err: mk_const(ty::Const {\n+            unit: mk_const(ty::Const {\n                 val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::zst())),\n-                ty: types.err,\n+                ty: types.unit,\n             }),\n         }\n     }"}, {"sha": "a88f362810995761eadc0c2ab5a7dedfb2b59fb2", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -70,14 +70,7 @@ impl FlagComputation {\n             | &ty::Str\n             | &ty::Foreign(..) => {}\n \n-            // You might think that we could just return Error for\n-            // any type containing Error as a component, and get\n-            // rid of the TypeFlags::HAS_TY_ERR flag -- likewise for ty_bot (with\n-            // the exception of function types that return bot).\n-            // But doing so caused sporadic memory corruption, and\n-            // neither I (tjc) nor nmatsakis could figure out why,\n-            // so we're doing it this way.\n-            &ty::Error => self.add_flags(TypeFlags::HAS_TY_ERR),\n+            &ty::Error => self.add_flags(TypeFlags::HAS_ERROR),\n \n             &ty::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_TY_PARAM);\n@@ -239,6 +232,7 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Value(_) => {}\n+            ty::ConstKind::Error => self.add_flags(TypeFlags::HAS_ERROR),\n         }\n     }\n "}, {"sha": "248dd00ef47be562095414b57508811038a03433", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -82,7 +82,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n     }\n     fn references_error(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n+        self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)"}, {"sha": "25d900fbc878cd5a473e78420cf0cb792a9f3c62", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -567,8 +567,8 @@ bitflags! {\n                                           | TypeFlags::HAS_TY_OPAQUE.bits\n                                           | TypeFlags::HAS_CT_PROJECTION.bits;\n \n-        /// Is an error type reachable?\n-        const HAS_TY_ERR                  = 1 << 13;\n+        /// Is an error type/const reachable?\n+        const HAS_ERROR                   = 1 << 13;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but [ReLateBound] and [ReErased]."}, {"sha": "2aa849f89c4f9d52c8c11bc0f4d50c3ce426f15a", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -938,6 +938,7 @@ pub trait PrettyPrinter<'tcx>:\n                 self.pretty_print_bound_var(debruijn, bound_var)?\n             }\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::ConstKind::Error => p!(write(\"[const error]\")),\n         };\n         Ok(self)\n     }"}, {"sha": "f4f0b6c41b92f678c00772cfb2e9b8dfaf729e60", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -510,12 +510,21 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     let tcx = relation.tcx();\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| {\n+        // FIXME(eddyb) this doesn't account for lifetime inference variables\n+        // being erased by `eval`, *nor* for the polymorphic aspect of `eval`.\n+        // That is, we could always use `eval` and it will just return the\n+        // old value back if it doesn't succeed.\n         if !x.val.needs_infer() {\n             return x.eval(tcx, relation.param_env()).val;\n         }\n         x.val\n     };\n \n+    // FIXME(eddyb) doesn't look like everything below checks that `a.ty == b.ty`.\n+    // We could probably always assert it early, as `const` generic parameters\n+    // are not allowed to depend on other generic parameters, i.e. are concrete.\n+    // (although there could be normalization differences)\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n@@ -524,6 +533,9 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n+\n+        (ty::ConstKind::Error, _) | (_, ty::ConstKind::Error) => Ok(ty::ConstKind::Error),\n+\n         (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n             return Ok(a);\n         }"}, {"sha": "1c0ffe12314b31218efd3ac61ad8f69b20763583", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -1022,9 +1022,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Unevaluated(did, substs, promoted) => {\n                 ty::ConstKind::Unevaluated(did, substs.fold_with(folder), promoted)\n             }\n-            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(..) => {\n-                *self\n-            }\n+            ty::ConstKind::Value(_)\n+            | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(..)\n+            | ty::ConstKind::Error => *self,\n         }\n     }\n \n@@ -1033,9 +1034,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n             ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n-            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n-                false\n-            }\n+            ty::ConstKind::Value(_)\n+            | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(_)\n+            | ty::ConstKind::Error => false,\n         }\n     }\n }"}, {"sha": "644be1607f049f327fbccc9e8e12f724974cb3b0", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -2429,6 +2429,10 @@ pub enum ConstKind<'tcx> {\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),\n+\n+    /// A placeholder for a const which could not be computed; this is\n+    /// propagated to avoid useless error messages.\n+    Error,\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "b6cadd009965660ce1ac8ab3f3800e9110750757", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -170,7 +170,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Param(_)\n                 | ty::ConstKind::Placeholder(_)\n                 | ty::ConstKind::Bound(..)\n-                | ty::ConstKind::Value(_) => {}\n+                | ty::ConstKind::Value(_)\n+                | ty::ConstKind::Error => {}\n \n                 ty::ConstKind::Unevaluated(_, substs, _) => {\n                     stack.extend(substs.iter().copied().rev());"}, {"sha": "648c1f5347c15c7262c170d88a6f80d8d0e477ec", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -518,6 +518,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n+            ty::ConstKind::Error => throw_inval!(TypeckError),\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation."}, {"sha": "f67b8b87ced5f33968a39d93829ac3206877d248", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -972,7 +972,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             )\n                             .emit();\n \n-                        self.tcx().consts.err\n+                        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n                     }\n                 }\n             }"}, {"sha": "4a8cd9e91e2786ab3bc193fe5dbf7f3067f1b399", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -826,14 +826,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const => {\n+                        let ty = tcx.at(span).type_of(param.def_id);\n                         // FIXME(const_generics:defaults)\n                         if infer_args {\n                             // No const parameters were provided, we can infer all.\n-                            let ty = tcx.at(span).type_of(param.def_id);\n                             self.ct_infer(ty, Some(param), span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n-                            tcx.consts.err.into()\n+                            tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty }).into()\n                         }\n                     }\n                 }"}, {"sha": "990cc84d029a9e5e4e838a2b03395f213d0d11cc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -673,7 +673,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n                 // accept a &'tcx ty::Const.\n                 self.replaced_with_error = true;\n-                self.tcx().consts.err\n+                self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n             }\n         }\n     }"}, {"sha": "7794f62efb71f32fab2e7683f844c48d63db7904", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deb39dd1fd7525eedbb9067ca52dfa71eed4fab/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2deb39dd1fd7525eedbb9067ca52dfa71eed4fab", "patch": "@@ -316,13 +316,13 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n \n     fn ct_infer(\n         &self,\n-        _: Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n         bad_placeholder_type(self.tcx(), vec![span]).emit();\n \n-        self.tcx().consts.err\n+        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty })\n     }\n \n     fn projected_ty_from_poly_trait_ref(\n@@ -2037,7 +2037,8 @@ fn associated_item_predicates(\n             }\n             ty::GenericParamDefKind::Const => {\n                 unimplemented_error(\"const\");\n-                tcx.consts.err.into()\n+                tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty: tcx.type_of(param.def_id) })\n+                    .into()\n             }\n         }\n     };"}]}