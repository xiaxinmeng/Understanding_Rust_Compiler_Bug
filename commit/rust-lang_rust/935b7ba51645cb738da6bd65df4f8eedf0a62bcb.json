{"sha": "935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNWI3YmE1MTY0NWNiNzM4ZGE2YmQ2NWRmNGY4ZWVkZjBhNjJiY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-13T16:28:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-13T16:28:46Z"}, "message": "auto merge of #6443 : cmr/rust/resolution, r=bstrie\n\nWhen trying to import nonexistent items from existing modules, specify that\r\nthat is what happened, rather than just reporting \"unresolved name\".\r\n\r\nIdeally the error would be reported on the span of the import... but I do not see a way to get a span there. Help appreciated :smile:", "tree": {"sha": "f48afbd55cbca34d3cadbda8d8a67c62220b125d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48afbd55cbca34d3cadbda8d8a67c62220b125d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "html_url": "https://github.com/rust-lang/rust/commit/935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/935b7ba51645cb738da6bd65df4f8eedf0a62bcb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf2f68bb255cc6833d4253c4f6d071af9e05648", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf2f68bb255cc6833d4253c4f6d071af9e05648", "html_url": "https://github.com/rust-lang/rust/commit/1bf2f68bb255cc6833d4253c4f6d071af9e05648"}, {"sha": "2210d2d5d5166674fdb8412573e8ae78b39e4e99", "url": "https://api.github.com/repos/rust-lang/rust/commits/2210d2d5d5166674fdb8412573e8ae78b39e4e99", "html_url": "https://github.com/rust-lang/rust/commit/2210d2d5d5166674fdb8412573e8ae78b39e4e99"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "b8f1aa62f572ab8a9db2213532cb98894a2052c1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/935b7ba51645cb738da6bd65df4f8eedf0a62bcb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b7ba51645cb738da6bd65df4f8eedf0a62bcb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "patch": "@@ -2282,25 +2282,27 @@ pub impl Resolver {\n         }\n \n         let i = import_resolution;\n+        let mut resolve_fail = false;\n+        let mut priv_fail = false;\n         match (i.value_target, i.type_target) {\n             // If this name wasn't found in either namespace, it's definitely\n             // unresolved.\n-            (None, None) => { return Failed; }\n+            (None, None) => { resolve_fail = true; }\n             // If it's private, it's also unresolved.\n             (Some(t), None) | (None, Some(t)) => {\n                 let bindings = &mut *t.bindings;\n                 match bindings.type_def {\n                     Some(ref type_def) => {\n                         if type_def.privacy == Private {\n-                            return Failed;\n+                            priv_fail = true;\n                         }\n                     }\n                     _ => ()\n                 }\n                 match bindings.value_def {\n                     Some(ref value_def) => {\n                         if value_def.privacy == Private {\n-                            return Failed;\n+                            priv_fail = true;\n                         }\n                     }\n                     _ => ()\n@@ -2313,13 +2315,25 @@ pub impl Resolver {\n                     (Some(ref value_def), Some(ref type_def)) =>\n                         if value_def.privacy == Private\n                             && type_def.privacy == Private {\n-                            return Failed;\n+                                priv_fail = true;\n                         },\n                     _ => ()\n                 }\n             }\n         }\n \n+        if resolve_fail {\n+            self.session.err(fmt!(\"unresolved import: there is no `%s` in `%s`\",\n+                                  *self.session.str_of(source),\n+                                  self.module_to_str(containing_module)));\n+            return Failed;\n+        } else if priv_fail {\n+            self.session.err(fmt!(\"unresolved import: found `%s` in `%s` but it is private\",\n+                                  *self.session.str_of(source),\n+                                  self.module_to_str(containing_module)));\n+            return Failed;\n+        }\n+\n         assert!(import_resolution.outstanding_references >= 1);\n         import_resolution.outstanding_references -= 1;\n \n@@ -2491,7 +2505,8 @@ pub impl Resolver {\n                                                                     *segment_name));\n                         return Failed;\n                     }\n-                    self.session.span_err(span, ~\"unresolved name\");\n+                    self.session.span_err(span, fmt!(\"unresolved import: could not find `%s` in \\\n+                                                     `%s`.\", *segment_name, module_name));\n                     return Failed;\n                 }\n                 Indeterminate => {"}, {"sha": "7cb017091e0c67094da8c3357c3d6139b80da968", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/935b7ba51645cb738da6bd65df4f8eedf0a62bcb/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b7ba51645cb738da6bd65df4f8eedf0a62bcb/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=935b7ba51645cb738da6bd65df4f8eedf0a62bcb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use baz::zed::bar;  //~ ERROR unresolved name\n+use baz::zed::bar;  //~ ERROR unresolved import\n //~^ ERROR failed to resolve import\n \n mod baz {}"}]}