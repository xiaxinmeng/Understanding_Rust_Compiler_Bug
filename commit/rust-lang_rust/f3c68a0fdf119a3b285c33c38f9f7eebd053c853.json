{"sha": "f3c68a0fdf119a3b285c33c38f9f7eebd053c853", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYzY4YTBmZGYxMTlhM2IyODVjMzNjMzhmOWY3ZWViZDA1M2M4NTM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-05-26T05:10:43Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-06-02T13:34:00Z"}, "message": "Add a test to ensure mutexes and rwlocks can't be re-locked", "tree": {"sha": "ae1b86c872c98fb18f49e19559055fbd643c9724", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1b86c872c98fb18f49e19559055fbd643c9724"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3c68a0fdf119a3b285c33c38f9f7eebd053c853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c68a0fdf119a3b285c33c38f9f7eebd053c853", "html_url": "https://github.com/rust-lang/rust/commit/f3c68a0fdf119a3b285c33c38f9f7eebd053c853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3c68a0fdf119a3b285c33c38f9f7eebd053c853/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960d1b74c5b8db59b871af50d948168f64b1be8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/960d1b74c5b8db59b871af50d948168f64b1be8a", "html_url": "https://github.com/rust-lang/rust/commit/960d1b74c5b8db59b871af50d948168f64b1be8a"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "f5635fddaf951c9514fd1b0b8c08529cfbc7eb46", "filename": "src/test/run-pass/issue-33770.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f3c68a0fdf119a3b285c33c38f9f7eebd053c853/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c68a0fdf119a3b285c33c38f9f7eebd053c853/src%2Ftest%2Frun-pass%2Fissue-33770.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33770.rs?ref=f3c68a0fdf119a3b285c33c38f9f7eebd053c853", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::process::{Command, Stdio};\n+use std::env;\n+use std::sync::{Mutex, RwLock};\n+use std::time::Duration;\n+use std::thread;\n+\n+fn test_mutex() {\n+    let m = Mutex::new(0);\n+    let _g = m.lock().unwrap();\n+    let _g2 = m.lock().unwrap();\n+}\n+\n+fn test_try_mutex() {\n+    let m = Mutex::new(0);\n+    let _g = m.lock().unwrap();\n+    let _g2 = m.try_lock().unwrap();\n+}\n+\n+fn test_rwlock_ww() {\n+    let m = RwLock::new(0);\n+    let _g = m.write().unwrap();\n+    let _g2 = m.write().unwrap();\n+}\n+\n+fn test_try_rwlock_ww() {\n+    let m = RwLock::new(0);\n+    let _g = m.write().unwrap();\n+    let _g2 = m.try_write().unwrap();\n+}\n+\n+fn test_rwlock_rw() {\n+    let m = RwLock::new(0);\n+    let _g = m.read().unwrap();\n+    let _g2 = m.write().unwrap();\n+}\n+\n+fn test_try_rwlock_rw() {\n+    let m = RwLock::new(0);\n+    let _g = m.read().unwrap();\n+    let _g2 = m.try_write().unwrap();\n+}\n+\n+fn test_rwlock_wr() {\n+    let m = RwLock::new(0);\n+    let _g = m.write().unwrap();\n+    let _g2 = m.read().unwrap();\n+}\n+\n+fn test_try_rwlock_wr() {\n+    let m = RwLock::new(0);\n+    let _g = m.write().unwrap();\n+    let _g2 = m.try_read().unwrap();\n+}\n+\n+fn main() {\n+    let args: Vec<String> = env::args().collect();\n+    if args.len() > 1 {\n+        match &*args[1] {\n+            \"mutex\" => test_mutex(),\n+            \"try_mutex\" => test_try_mutex(),\n+            \"rwlock_ww\" => test_rwlock_ww(),\n+            \"try_rwlock_ww\" => test_try_rwlock_ww(),\n+            \"rwlock_rw\" => test_rwlock_rw(),\n+            \"try_rwlock_rw\" => test_try_rwlock_rw(),\n+            \"rwlock_wr\" => test_rwlock_wr(),\n+            \"try_rwlock_wr\" => test_try_rwlock_wr(),\n+            _ => unreachable!(),\n+        }\n+        // If we reach this point then the test failed\n+        println!(\"TEST FAILED: {}\", args[1]);\n+    } else {\n+        let mut v = vec![];\n+        v.push(Command::new(&args[0]).arg(\"mutex\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"try_mutex\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"rwlock_ww\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"try_rwlock_ww\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"rwlock_rw\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"try_rwlock_rw\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"rwlock_wr\").stderr(Stdio::null()).spawn().unwrap());\n+        v.push(Command::new(&args[0]).arg(\"try_rwlock_wr\").stderr(Stdio::null()).spawn().unwrap());\n+\n+        thread::sleep(Duration::new(1, 0));\n+\n+        // Make sure all subprocesses either panicked or were killed because they deadlocked\n+        for mut c in v {\n+            c.kill().ok();\n+            assert!(!c.wait().unwrap().success());\n+        }\n+    }\n+}"}]}