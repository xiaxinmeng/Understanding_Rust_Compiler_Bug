{"sha": "edd0157069b09e3fceb8036cabbdba96972cb2f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDAxNTcwNjliMDllM2ZjZWI4MDM2Y2FiYmRiYTk2OTcyY2IyZjc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-13T16:57:20Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-11-13T16:57:20Z"}, "message": "Cap `count` twice", "tree": {"sha": "bdb8b3179051011e98418d2676668ec17749ef54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb8b3179051011e98418d2676668ec17749ef54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd0157069b09e3fceb8036cabbdba96972cb2f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd0157069b09e3fceb8036cabbdba96972cb2f7", "html_url": "https://github.com/rust-lang/rust/commit/edd0157069b09e3fceb8036cabbdba96972cb2f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd0157069b09e3fceb8036cabbdba96972cb2f7/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2", "html_url": "https://github.com/rust-lang/rust/commit/6e37f2f3e158c98d094b7f3c9f681ed8e5b8c4c2"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "9a819cd9db4b25200420559e5f89cccc0ee996d7", "filename": "src/shims/fs.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edd0157069b09e3fceb8036cabbdba96972cb2f7/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd0157069b09e3fceb8036cabbdba96972cb2f7/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=edd0157069b09e3fceb8036cabbdba96972cb2f7", "patch": "@@ -168,10 +168,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr_size = this.pointer_size().bits();\n \n+        // We cap the number of read bytes to the largest value that we are able to fit in both the\n+        // host's and target's `isize`.\n         let count = this\n             .read_scalar(count_op)?\n             .to_machine_usize(&*this.tcx)?\n-            .min(1 << (ptr_size - 1));\n+            .min(1 << (ptr_size - 1))\n+            .min(isize::max_value() as u64);\n         // Reading zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);\n@@ -180,6 +183,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.read_scalar(buf_op)?.not_undef()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.get_mut(&fd) {\n+            // This can never fail because `count` was capped to be smaller than\n+            // `isize::max_value()`.\n             let count = isize::try_from(count).unwrap();\n             // We want to read at most `count` bytes. We are sure that `count` is not negative\n             // because it was a target's `usize`. Also we are sure that its smaller than\n@@ -188,6 +193,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let result = handle\n                 .file\n                 .read(&mut bytes)\n+                // `File::read` never returns a value larger than `i64::max_value()`, so this\n+                // unwrap cannot fail.\n                 .map(|c| i64::try_from(c).unwrap());\n \n             match result {\n@@ -218,10 +225,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr_size = this.pointer_size().bits();\n \n+        // We cap the number of read bytes to the largest value that we are able to fit in both the\n+        // host's and target's `isize`.\n         let count = this\n             .read_scalar(count_op)?\n             .to_machine_usize(&*this.tcx)?\n-            .min(1 << (ptr_size - 1));\n+            .min(1 << (ptr_size - 1))\n+            .min(isize::max_value() as u64);\n         // Writing zero bytes should not change `buf`.\n         if count == 0 {\n             return Ok(0);"}]}