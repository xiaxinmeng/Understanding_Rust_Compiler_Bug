{"sha": "9e432bd454d9116cd640d1059ccec09ce31313d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDMyYmQ0NTRkOTExNmNkNjQwZDEwNTljY2VjMDljZTMxMzEzZDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-21T22:48:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-21T22:48:18Z"}, "message": "etc: Remove old num/libc generation code", "tree": {"sha": "a78fc5f2bc6b99053ffc56f490fde97b5a3f4a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78fc5f2bc6b99053ffc56f490fde97b5a3f4a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e432bd454d9116cd640d1059ccec09ce31313d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e432bd454d9116cd640d1059ccec09ce31313d0", "html_url": "https://github.com/rust-lang/rust/commit/9e432bd454d9116cd640d1059ccec09ce31313d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e432bd454d9116cd640d1059ccec09ce31313d0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de4a74956713afea951e95caf732e20a9299b663", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4a74956713afea951e95caf732e20a9299b663", "html_url": "https://github.com/rust-lang/rust/commit/de4a74956713afea951e95caf732e20a9299b663"}], "stats": {"total": 369, "additions": 0, "deletions": 369}, "files": [{"sha": "f523b4c93858b36f255e8d663e3d7189c99de7e8", "filename": "src/etc/cmathconsts.c", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/de4a74956713afea951e95caf732e20a9299b663/src%2Fetc%2Fcmathconsts.c", "raw_url": "https://github.com/rust-lang/rust/raw/de4a74956713afea951e95caf732e20a9299b663/src%2Fetc%2Fcmathconsts.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcmathconsts.c?ref=de4a74956713afea951e95caf732e20a9299b663", "patch": "@@ -1,103 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-//\n-// This is a helper C program for generating required math constants\n-//\n-// Should only be required when porting to a different target architecture\n-// (or c compiler/libmath)\n-//\n-// Call with <rust machine type of c_float> <rust machine type of c_double>\n-// and ensure that libcore/cmath.rs complies to the output\n-//\n-// Requires a printf that supports \"%a\" specifiers\n-//\n-\n-#include <float.h>\n-#include <math.h>\n-#include <stdio.h>\n-\n-// must match std::ctypes\n-\n-#define C_FLT(x) (float)x\n-#define C_DBL(x) (double)x\n-\n-int main(int argc, char** argv) {\n-  if (argc != 3) {\n-    fprintf(stderr, \"%s <ctypes::c_float> <ctypes::c_double>\\n\", argv[0]);\n-    return 1;\n-  }\n-  char* c_flt = argv[1];\n-  char* c_dbl = argv[2];\n-\n-  printf(\"mod c_float_math_consts {\\n\");\n-  printf(\"    const pi: c_float = %a_%s;\\n\", C_FLT(M_PI), c_flt);\n-  printf(\"    const div_1_pi: c_float = %a_%s;\\n\", C_FLT(M_1_PI), c_flt);\n-  printf(\"    const div_2_pi: c_float = %a_%s;\\n\", C_FLT(M_2_PI), c_flt);\n-  printf(\"    const div_pi_2: c_float = %a_%s;\\n\", C_FLT(M_PI_2), c_flt);\n-  printf(\"    const div_pi_4: c_float = %a_%s;\\n\", C_FLT(M_PI_4), c_flt);\n-  printf(\"    const div_2_sqrtpi: c_float = %a_%s;\\n\",\n-         C_FLT(M_2_SQRTPI), c_flt);\n-  printf(\"    const e: c_float = %a_%s;\\n\", C_FLT(M_E), c_flt);\n-  printf(\"    const log2_e: c_float = %a_%s;\\n\", C_FLT(M_LOG2E), c_flt);\n-  printf(\"    const log10_e: c_float = %a_%s;\\n\", C_FLT(M_LOG10E), c_flt);\n-  printf(\"    const ln_2: c_float = %a_%s;\\n\",  C_FLT(M_LN2), c_flt);\n-  printf(\"    const ln_10: c_float = %a_%s;\\n\",  C_FLT(M_LN10), c_flt);\n-  printf(\"    const sqrt2: c_float = %a_%s;\\n\",  C_FLT(M_SQRT2), c_flt);\n-  printf(\"    const div_1_sqrt2: c_float = %a_%s;\\n\",\n-         C_FLT(M_SQRT1_2), c_flt);\n-  printf(\"}\\n\\n\");\n-\n-  printf(\"mod c_double_math_consts {\\n\");\n-  printf(\"    const pi: c_double = %a_%s;\\n\", C_DBL(M_PI), c_dbl);\n-  printf(\"    const div_1_pi: c_double = %a_%s;\\n\", C_DBL(M_1_PI), c_dbl);\n-  printf(\"    const div_2_pi: c_double = %a_%s;\\n\", C_DBL(M_2_PI), c_dbl);\n-  printf(\"    const div_pi_2: c_double = %a_%s;\\n\", C_DBL(M_PI_2), c_dbl);\n-  printf(\"    const div_pi_4: c_double = %a_%s;\\n\", C_DBL(M_PI_4), c_dbl);\n-  printf(\"    const div_2_sqrtpi: c_double = %a_%s;\\n\",\n-         C_DBL(M_2_SQRTPI), c_dbl);\n-  printf(\"    const e: c_double = %a_%s;\\n\", C_DBL(M_E), c_dbl);\n-  printf(\"    const log2_e: c_double = %a_%s;\\n\", C_DBL(M_LOG2E), c_dbl);\n-  printf(\"    const log10_e: c_double = %a_%s;\\n\", C_DBL(M_LOG10E), c_dbl);\n-  printf(\"    const ln_2: c_double = %a_%s;\\n\", C_DBL(M_LN2), c_dbl);\n-  printf(\"    const ln_10: c_double = %a_%s;\\n\", C_DBL(M_LN10), c_dbl);\n-  printf(\"    const sqrt2: c_double = %a_%s;\\n\", C_DBL(M_SQRT2), c_dbl);\n-  printf(\"    const div_1_sqrt2: c_double = %a_%s;\\n\",\n-         C_DBL(M_SQRT1_2), c_dbl);\n-  printf(\"}\\n\\n\");\n-\n-  printf(\"mod c_float_targ_consts {\\n\");\n-  printf(\"    const radix: uint = %uu;\\n\", FLT_RADIX);\n-  printf(\"    const mantissa_digits: uint = %uu;\\n\", FLT_MANT_DIG);\n-  printf(\"    const digits: uint = %uu;\\n\", FLT_DIG);\n-  printf(\"    const min_exp: int = %i;\\n\", FLT_MIN_EXP);\n-  printf(\"    const max_exp: int = %i;\\n\", FLT_MAX_EXP);\n-  printf(\"    const min_10_exp: int = %i;\\n\", FLT_MIN_10_EXP);\n-  printf(\"    const max_10_exp: int = %i;\\n\", FLT_MAX_10_EXP);\n-  printf(\"    const min_value: c_float = %a_%s;\\n\", C_FLT(FLT_MIN), c_flt);\n-  printf(\"    const max_value: c_float = %a_%s;\\n\", C_FLT(FLT_MAX), c_flt);\n-  printf(\"    const epsilon: c_float = %a_%s;\\n\", C_FLT(FLT_EPSILON), c_flt);\n-  printf(\"}\\n\\n\");\n-\n-  printf(\"mod c_double_targ_consts {\\n\");\n-  printf(\"    const radix: uint = %uu;\\n\", FLT_RADIX);\n-  printf(\"    const mantissa_digits: uint = %uu;\\n\", DBL_MANT_DIG);\n-  printf(\"    const digits: uint = %uu;\\n\", DBL_DIG);\n-  printf(\"    const min_exp: int = %i;\\n\", DBL_MIN_EXP);\n-  printf(\"    const max_exp: int = %i;\\n\", DBL_MAX_EXP);\n-  printf(\"    const min_10_exp: int = %i;\\n\", DBL_MIN_10_EXP);\n-  printf(\"    const max_10_exp: int = %i;\\n\", DBL_MAX_10_EXP);\n-  printf(\"    const min_value: c_double = %a_%s;\\n\", C_DBL(DBL_MIN), c_dbl);\n-  printf(\"    const max_value: c_double = %a_%s;\\n\", C_DBL(DBL_MAX), c_dbl);\n-  printf(\"    const epsilon: c_double = %a_%s;\\n\", C_DBL(DBL_EPSILON), c_dbl);\n-  printf(\"}\\n\");\n-\n-  return 0;\n-}"}, {"sha": "249b5d22b6b23ad763df4d8a586abb33ae82cc79", "filename": "src/etc/libc.c", "status": "removed", "additions": 0, "deletions": 266, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/de4a74956713afea951e95caf732e20a9299b663/src%2Fetc%2Flibc.c", "raw_url": "https://github.com/rust-lang/rust/raw/de4a74956713afea951e95caf732e20a9299b663/src%2Fetc%2Flibc.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flibc.c?ref=de4a74956713afea951e95caf732e20a9299b663", "patch": "@@ -1,266 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- * This calculates the platform-variable portion of the libc module.\n- * Move code in here only as you discover it is platform-variable.\n- *\n- */\n-\n- /* c95 */\n-#include <stddef.h>\n-#include <time.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <limits.h>\n-#include <wchar.h>\n-\n-/* c99 */\n-#include <inttypes.h>\n-\n-/* posix */\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <fcntl.h>\n-#include <unistd.h>\n-\n-#define S(T) ((((T)-1)<0) ? 'i' : 'u')\n-#define B(T) (((int)sizeof(T)) * CHAR_BIT)\n-#define put_type(N,T) \\\n-        printf(\"        type %s = %c%d;\\n\", N, S(T), B(T))\n-\n-#define put_ftype(N,T) \\\n-        printf(\"        type %s = f%d;\\n\", N, B(T))\n-\n-#define CT(T) ((((T)-1)<0) ? \"int\" : \"uint\")\n-#define CS(T) ((((T)-1)<0) ? \"\" : \"_u\")\n-#define put_const(N,T)                            \\\n-        printf(\"        const %s : %s = %d%s;\\n\", \\\n-               #N, CT(T), N, CS(T))\n-\n-void c95_types() {\n-  printf(\"    mod c95 {\\n\");\n-\n-  put_type(\"c_char\", char);\n-  put_type(\"c_schar\", signed char);\n-  put_type(\"c_uchar\", unsigned char);\n-\n-  put_type(\"c_short\", short);\n-  put_type(\"c_ushort\", unsigned short);\n-\n-  put_type(\"c_int\", int);\n-  put_type(\"c_uint\", unsigned int);\n-\n-  put_type(\"c_long\", long);\n-  put_type(\"c_ulong\", unsigned long);\n-\n-  put_ftype(\"c_float\", float);\n-  put_ftype(\"c_double\", double);\n-\n-  put_type(\"size_t\", size_t);\n-  put_type(\"ptrdiff_t\", ptrdiff_t);\n-\n-  put_type(\"clock_t\", clock_t);\n-  put_type(\"time_t\", time_t);\n-\n-  put_type(\"wchar_t\", wchar_t);\n-\n-  printf(\"    }\\n\");\n-}\n-\n-void c99_types() {\n-  printf(\"    mod c99 {\\n\");\n-\n-  put_type(\"c_longlong\", long long);\n-  put_type(\"c_ulonglong\", unsigned long long);\n-\n-  put_type(\"intptr_t\", intptr_t);\n-  put_type(\"uintptr_t\", uintptr_t);\n-\n-  printf(\"    }\\n\");\n-}\n-\n-void posix88_types() {\n-  printf(\"    mod posix88 {\\n\");\n-\n-  put_type(\"off_t\", off_t);\n-  put_type(\"dev_t\", dev_t);\n-  put_type(\"ino_t\", ino_t);\n-  put_type(\"pid_t\", pid_t);\n-#ifndef __WIN32__\n-  put_type(\"uid_t\", uid_t);\n-  put_type(\"gid_t\", gid_t);\n-#endif\n-  put_type(\"useconds_t\", useconds_t);\n-  put_type(\"mode_t\", mode_t);\n-\n-  put_type(\"ssize_t\", ssize_t);\n-\n-  printf(\"    }\\n\");\n-}\n-\n-void extra_types() {\n-  printf(\"    mod extra {\\n\");\n-  printf(\"    }\\n\");\n-}\n-\n-\n-void c95_consts() {\n-  printf(\"    mod c95 {\\n\");\n-\n-  put_const(EXIT_FAILURE, int);\n-  put_const(EXIT_SUCCESS, int);\n-  put_const(RAND_MAX, int);\n-\n-  put_const(EOF, int);\n-  put_const(SEEK_SET, int);\n-  put_const(SEEK_CUR, int);\n-  put_const(SEEK_END, int);\n-\n-  put_const(_IOFBF, int);\n-  put_const(_IONBF, int);\n-  put_const(_IOLBF, int);\n-\n-  put_const(BUFSIZ, size_t);\n-  put_const(FOPEN_MAX, size_t);\n-  put_const(FILENAME_MAX, size_t);\n-  put_const(L_tmpnam, size_t);\n-  put_const(TMP_MAX, size_t);\n-\n-  printf(\"    }\\n\");\n-}\n-\n-\n-void posix88_consts() {\n-  printf(\"    mod posix88 {\\n\");\n-  put_const(O_RDONLY, int);\n-  put_const(O_WRONLY, int);\n-  put_const(O_RDWR, int);\n-  put_const(O_APPEND, int);\n-  put_const(O_CREAT, int);\n-  put_const(O_EXCL, int);\n-  put_const(O_TRUNC, int);\n-\n-  put_const(S_IFIFO, int);\n-  put_const(S_IFCHR, int);\n-  put_const(S_IFBLK, int);\n-  put_const(S_IFDIR, int);\n-  put_const(S_IFREG, int);\n-  put_const(S_IFLNK, int);\n-  put_const(S_IFMT, int);\n-\n-  put_const(S_IEXEC, int);\n-  put_const(S_IWRITE, int);\n-  put_const(S_IREAD, int);\n-\n-  put_const(S_IRWXU, int);\n-  put_const(S_IXUSR, int);\n-  put_const(S_IWUSR, int);\n-  put_const(S_IRUSR, int);\n-\n-  put_const(S_IRWXG, int);\n-  put_const(S_IXGRP, int);\n-  put_const(S_IWGRP, int);\n-  put_const(S_IRGRP, int);\n-\n-  put_const(S_IRWXO, int);\n-  put_const(S_IXOTH, int);\n-  put_const(S_IWOTH, int);\n-  put_const(S_IROTH, int);\n-\n-#ifdef F_OK\n-  put_const(F_OK, int);\n-#endif\n-#ifdef R_OK\n-  put_const(R_OK, int);\n-#endif\n-#ifdef W_OK\n-  put_const(W_OK, int);\n-#endif\n-#ifdef X_OK\n-  put_const(X_OK, int);\n-#endif\n-\n-#ifdef STDIN_FILENO\n-  put_const(STDIN_FILENO, int);\n-#endif\n-#ifdef STDOUT_FILENO\n-  put_const(STDOUT_FILENO, int);\n-#endif\n-#ifdef STDERR_FILENO\n-  put_const(STDERR_FILENO, int);\n-#endif\n-\n-#ifdef F_LOCK\n-  put_const(F_LOCK, int);\n-#endif\n-\n-#ifdef F_TEST\n-  put_const(F_TEST, int);\n-#endif\n-\n-#ifdef F_TLOCK\n-  put_const(F_TLOCK, int);\n-#endif\n-\n-#ifdef F_ULOCK\n-  put_const(F_ULOCK, int);\n-#endif\n-\n-  printf(\"    }\\n\");\n-}\n-\n-void extra_consts() {\n-  printf(\"    mod extra {\\n\");\n-#ifdef O_RSYNC\n-  put_const(O_RSYNC, int);\n-#endif\n-\n-#ifdef O_DSYNC\n-  put_const(O_DSYNC, int);\n-#endif\n-\n-#ifdef O_SYNC\n-  put_const(O_SYNC, int);\n-#endif\n-\n-#ifdef O_TEXT\n-  put_const(O_TEXT, int);\n-#endif\n-\n-#ifdef O_BINARY\n-  put_const(O_BINARY, int);\n-#endif\n-\n-#ifdef O_IRUSR\n-  put_const(O_IRUSR, int);\n-#endif\n-\n-#ifdef O_IWUSR\n-  put_const(O_IWUSR, int);\n-#endif\n-\n-  printf(\"    }\\n\");\n-}\n-\n-int main() {\n-  printf(\"mod types {\");\n-  c95_types();\n-  c99_types();\n-  posix88_types();\n-  extra_types();\n-  printf(\"}\\n\");\n-\n-  printf(\"mod consts {\\n\");\n-  c95_consts();\n-  posix88_consts();\n-  extra_consts();\n-  printf(\"}\\n\");\n-}"}]}