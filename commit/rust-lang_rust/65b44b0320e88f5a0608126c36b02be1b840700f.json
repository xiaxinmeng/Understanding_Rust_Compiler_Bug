{"sha": "65b44b0320e88f5a0608126c36b02be1b840700f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjQ0YjAzMjBlODhmNWEwNjA4MTI2YzM2YjAyYmUxYjg0MDcwMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T23:47:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T23:47:51Z"}, "message": "Auto merge of #83692 - Dylan-DPC:rollup-2a2m3jy, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #80720 (Make documentation of which items the prelude exports more readable.)\n - #83654 (Do not emit a suggestion that causes the E0632 error)\n - #83671 (Add a regression test for issue-75801)\n - #83678 (Fix Self keyword doc URL conflict on case insensitive file systems (until definitely fixed on rustdoc))\n - #83680 (Update for loop desugaring docs)\n - #83683 (bootstrap: don't complain about linkcheck if it is excluded)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "51213a7b156833231b47a2881b95419d76435ef0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51213a7b156833231b47a2881b95419d76435ef0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b44b0320e88f5a0608126c36b02be1b840700f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b44b0320e88f5a0608126c36b02be1b840700f", "html_url": "https://github.com/rust-lang/rust/commit/65b44b0320e88f5a0608126c36b02be1b840700f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b44b0320e88f5a0608126c36b02be1b840700f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74874a690bc95443292496ff5df5cc5c8cb56e0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74874a690bc95443292496ff5df5cc5c8cb56e0b", "html_url": "https://github.com/rust-lang/rust/commit/74874a690bc95443292496ff5df5cc5c8cb56e0b"}, {"sha": "7a587f0d06d13e9e8186e5c481abddb1760e6020", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a587f0d06d13e9e8186e5c481abddb1760e6020", "html_url": "https://github.com/rust-lang/rust/commit/7a587f0d06d13e9e8186e5c481abddb1760e6020"}], "stats": {"total": 214, "additions": 153, "deletions": 61}, "files": [{"sha": "d9a1193aac4bafc0f02516e3480ea48a2f1dd3c1", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -287,6 +287,7 @@ pub struct InferenceDiagnosticsData {\n pub struct InferenceDiagnosticsParentData {\n     pub prefix: &'static str,\n     pub name: String,\n+    pub def_id: DefId,\n }\n \n pub enum UnderspecifiedArgKind {\n@@ -328,6 +329,7 @@ impl InferenceDiagnosticsParentData {\n         Some(InferenceDiagnosticsParentData {\n             prefix: tcx.def_kind(parent_def_id).descr(parent_def_id),\n             name: parent_name,\n+            def_id: parent_def_id,\n         })\n     }\n }\n@@ -754,12 +756,30 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             if let (UnderspecifiedArgKind::Const { .. }, Some(parent_data)) =\n                 (&arg_data.kind, &arg_data.parent)\n             {\n-                err.span_suggestion_verbose(\n-                    span,\n-                    \"consider specifying the const argument\",\n-                    format!(\"{}::<{}>\", parent_data.name, arg_data.name),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                let has_impl_trait =\n+                    self.tcx.generics_of(parent_data.def_id).params.iter().any(|param| {\n+                        matches!(\n+                            param.kind,\n+                            ty::GenericParamDefKind::Type {\n+                                synthetic: Some(\n+                                    hir::SyntheticTyParamKind::ImplTrait\n+                                        | hir::SyntheticTyParamKind::FromAttr,\n+                                ),\n+                                ..\n+                            }\n+                        )\n+                    });\n+\n+                // (#83606): Do not emit a suggestion if the parent has an `impl Trait`\n+                // as an argument otherwise it will cause the E0282 error.\n+                if !has_impl_trait {\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"consider specifying the const argument\",\n+                        format!(\"{}::<{}>\", parent_data.name, arg_data.name),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n \n             err.span_label("}, {"sha": "2a3d44fb17d9f2a2ce20fd6c462dc4c224e3d2fb", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -547,15 +547,18 @@ mod fn_keyword {}\n /// # fn code() { }\n /// # let iterator = 0..2;\n /// {\n-///     let mut _iter = std::iter::IntoIterator::into_iter(iterator);\n-///     loop {\n-///         match _iter.next() {\n-///             Some(loop_variable) => {\n-///                 code()\n-///             },\n-///             None => break,\n-///         }\n-///     }\n+///     let result = match IntoIterator::into_iter(iterator) {\n+///         mut iter => loop {\n+///             let next;\n+///             match iter.next() {\n+///                 Some(val) => next = val,\n+///                 None => break,\n+///             };\n+///             let loop_variable = next;\n+///             let () = { code(); };\n+///         },\n+///     };\n+///     result\n /// }\n /// ```\n ///\n@@ -1310,7 +1313,11 @@ mod return_keyword {}\n /// [Reference]: ../reference/items/associated-items.html#methods\n mod self_keyword {}\n \n-#[doc(keyword = \"Self\")]\n+// FIXME: Once rustdoc can handle URL conflicts on case insensitive file systems, we can remove the\n+// three next lines and put back: `#[doc(keyword = \"Self\")]`.\n+#[doc(alias = \"Self\")]\n+#[allow(rustc::existing_doc_keyword)]\n+#[doc(keyword = \"SelfTy\")]\n //\n /// The implementing type within a [`trait`] or [`impl`] block, or the current type within a type\n /// definition."}, {"sha": "1b4facdd049bbeab64eff81abe740217091670e5", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -28,53 +28,53 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n+//! * <code>[std::marker]::{[Copy], [Send], [Sized], [Sync], [Unpin]}</code>,\n //!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n+//! * <code>[std::ops]::{[Drop], [Fn], [FnMut], [FnOnce]}</code>, various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n+//! * <code>[std::mem]::[drop][mem::drop]</code>, a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n+//! * <code>[std::boxed]::[Box]</code>, a way to allocate values on the heap.\n+//! * <code>[std::borrow]::[ToOwned]</code>, the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n-//!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n+//! * <code>[std::clone]::[Clone]</code>, the ubiquitous trait that defines\n+//!   [`clone`][Clone::clone], the method for producing a copy of a value.\n+//! * <code>[std::cmp]::{[PartialEq], [PartialOrd], [Eq], [Ord]}</code>, the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n+//! * <code>[std::convert]::{[AsRef], [AsMut], [Into], [From]}</code>, generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n-//! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n+//! * <code>[std::default]::[Default]</code>, types that have default values.\n+//! * <code>[std::iter]::{[Iterator], [Extend], [IntoIterator], [DoubleEndedIterator], [ExactSizeIterator]}</code>,\n+//!   iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n+//! * <code>[std::option]::[Option]::{[self][Option], [Some], [None]}</code>, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n+//! * <code>[std::result]::[Result]::{[self][Result], [Ok], [Err]}</code>, a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n-//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n+//! * <code>[std::string]::{[String], [ToString]}</code>, heap-allocated strings.\n+//! * <code>[std::vec]::[Vec]</code>, a growable, heap-allocated vector.\n //!\n-//! [`mem::drop`]: crate::mem::drop\n-//! [`std::borrow`]: crate::borrow\n-//! [`std::boxed`]: crate::boxed\n-//! [`std::clone`]: crate::clone\n-//! [`std::cmp`]: crate::cmp\n-//! [`std::convert`]: crate::convert\n-//! [`std::default`]: crate::default\n-//! [`std::iter`]: crate::iter\n-//! [`std::marker`]: crate::marker\n-//! [`std::mem`]: crate::mem\n-//! [`std::ops`]: crate::ops\n-//! [`std::option`]: crate::option\n+//! [mem::drop]: crate::mem::drop\n+//! [std::borrow]: crate::borrow\n+//! [std::boxed]: crate::boxed\n+//! [std::clone]: crate::clone\n+//! [std::cmp]: crate::cmp\n+//! [std::convert]: crate::convert\n+//! [std::default]: crate::default\n+//! [std::iter]: crate::iter\n+//! [std::marker]: crate::marker\n+//! [std::mem]: crate::mem\n+//! [std::ops]: crate::ops\n+//! [std::option]: crate::option\n //! [`std::prelude::v1`]: v1\n-//! [`std::result`]: crate::result\n-//! [`std::slice`]: crate::slice\n-//! [`std::string`]: crate::string\n-//! [`std::vec`]: mod@crate::vec\n+//! [std::result]: crate::result\n+//! [std::slice]: crate::slice\n+//! [std::string]: crate::string\n+//! [std::vec]: mod@crate::vec\n //! [`to_owned`]: crate::borrow::ToOwned::to_owned\n //! [book-closures]: ../../book/ch13-01-closures.html\n //! [book-dtor]: ../../book/ch15-03-drop.html"}, {"sha": "adb0a372c64dd16d56cba0ecc469efbb47977b8e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -108,6 +108,19 @@ impl Step for Linkcheck {\n     /// documentation to ensure we don't have a bunch of dead ones.\n     fn run(self, builder: &Builder<'_>) {\n         let host = self.host;\n+        let hosts = &builder.hosts;\n+        let targets = &builder.targets;\n+\n+        // if we have different hosts and targets, some things may be built for\n+        // the host (e.g. rustc) and others for the target (e.g. std). The\n+        // documentation built for each will contain broken links to\n+        // docs built for the other platform (e.g. rustc linking to cargo)\n+        if (hosts != targets) && !hosts.is_empty() && !targets.is_empty() {\n+            panic!(\n+                \"Linkcheck currently does not support builds with different hosts and targets.\n+You can skip linkcheck with --exclude src/tools/linkchecker\"\n+            );\n+        }\n \n         builder.info(&format!(\"Linkcheck ({})\", host));\n \n@@ -123,19 +136,6 @@ impl Step for Linkcheck {\n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n         let run = run.path(\"src/tools/linkchecker\");\n-        let hosts = &builder.hosts;\n-        let targets = &builder.targets;\n-\n-        // if we have different hosts and targets, some things may be built for\n-        // the host (e.g. rustc) and others for the target (e.g. std). The\n-        // documentation built for each will contain broken links to\n-        // docs built for the other platform (e.g. rustc linking to cargo)\n-        if (hosts != targets) && !hosts.is_empty() && !targets.is_empty() {\n-            panic!(\n-                \"Linkcheck currently does not support builds with different hosts and targets.\n-You can skip linkcheck with --exclude src/tools/linkchecker\"\n-            );\n-        }\n         run.default_condition(builder.config.docs)\n     }\n "}, {"sha": "be56a3020cc33b911451b5aab5502272a0cc04a7", "filename": "src/test/ui/inference/issue-83606.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #83606.\n+\n+fn foo<const N: usize>(_: impl std::fmt::Display) -> [usize; N] {\n+    [0; N]\n+}\n+\n+fn main() {\n+    let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+    //~^ ERROR: type annotations needed for `[usize; _]`\n+}"}, {"sha": "65f3336b9358a3f205d20c617cbd9859aaefb945", "filename": "src/test/ui/inference/issue-83606.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed for `[usize; _]`\n+  --> $DIR/issue-83606.rs:8:13\n+   |\n+LL |     let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+   |         -   ^^^ cannot infer the value of const parameter `N` declared on the function `foo`\n+   |         |\n+   |         consider giving this pattern the explicit type `[usize; _]`, where the type parameter `N` is specified\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "d6c031d7d4f7e8b26844b4d5a07d079fb92f2235", "filename": "src/test/ui/proc-macro/auxiliary/issue-75801.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-75801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-75801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-75801.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -0,0 +1,13 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn foo(_args: TokenStream, item: TokenStream) -> TokenStream {\n+    item\n+}"}, {"sha": "b07cde0fabd74bbdc72a039277b74e477e6bb9b7", "filename": "src/test/ui/proc-macro/issue-75801.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.rs?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -0,0 +1,19 @@\n+// aux-build: issue-75801.rs\n+\n+// Regression test for #75801.\n+\n+#[macro_use]\n+extern crate issue_75801;\n+\n+macro_rules! foo {\n+    ($arg:expr) => {\n+        #[foo]\n+        fn bar() {\n+            let _bar: u32 = $arg;\n+        }\n+    };\n+}\n+\n+foo!(\"baz\"); //~ ERROR: mismatched types [E0308]\n+\n+fn main() {}"}, {"sha": "ee0a9bd7783e65f900c6597fc7278aa5c9c26d7c", "filename": "src/test/ui/proc-macro/issue-75801.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65b44b0320e88f5a0608126c36b02be1b840700f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75801.stderr?ref=65b44b0320e88f5a0608126c36b02be1b840700f", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-75801.rs:17:6\n+   |\n+LL |             let _bar: u32 = $arg;\n+   |                       --- expected due to this\n+...\n+LL | foo!(\"baz\");\n+   |      ^^^^^ expected `u32`, found `&str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}