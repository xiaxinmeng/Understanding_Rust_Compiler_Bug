{"sha": "baa3ad4dc846981902926ec230a89f452f5bc370", "node_id": "C_kwDOAAsO6NoAKGJhYTNhZDRkYzg0Njk4MTkwMjkyNmVjMjMwYTg5ZjQ1MmY1YmMzNzA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-01T09:15:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-03-26T09:38:46Z"}, "message": "proc-macro: Stop wrapping `ident` matchers into groups", "tree": {"sha": "bce96269908d8f64bb4d60cb529133a09c729252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce96269908d8f64bb4d60cb529133a09c729252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baa3ad4dc846981902926ec230a89f452f5bc370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baa3ad4dc846981902926ec230a89f452f5bc370", "html_url": "https://github.com/rust-lang/rust/commit/baa3ad4dc846981902926ec230a89f452f5bc370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baa3ad4dc846981902926ec230a89f452f5bc370/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2882c2023d6e1dee4128611e89fcde0cf6199f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2882c2023d6e1dee4128611e89fcde0cf6199f6d", "html_url": "https://github.com/rust-lang/rust/commit/2882c2023d6e1dee4128611e89fcde0cf6199f6d"}], "stats": {"total": 545, "additions": 25, "deletions": 520}, "files": [{"sha": "bfdf99762f57a413b8cfb58d202faab2be6d6cda", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 4, "deletions": 106, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/baa3ad4dc846981902926ec230a89f452f5bc370/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baa3ad4dc846981902926ec230a89f452f5bc370/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=baa3ad4dc846981902926ec230a89f452f5bc370", "patch": "@@ -1,22 +1,19 @@\n use crate::base::ExtCtxt;\n \n use rustc_ast as ast;\n-use rustc_ast::token::{self, Nonterminal, NtIdent};\n+use rustc_ast::token;\n use rustc_ast::tokenstream::{self, CanSynthesizeMissingTokens};\n use rustc_ast::tokenstream::{DelimSpan, Spacing::*, TokenStream, TreeAndSpacing};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, PResult};\n-use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n-use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n use rustc_span::def_id::CrateNum;\n-use rustc_span::hygiene::ExpnKind;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, MultiSpan, Pos, RealFileName, SourceFile, Span};\n+use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n \n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n@@ -178,10 +175,8 @@ impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>\n                 tt!(Punct::new('#', false))\n             }\n \n-            Interpolated(nt)\n-                if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, rustc) =>\n-            {\n-                TokenTree::Ident(Ident::new(rustc.sess(), name.name, is_raw, name.span))\n+            Interpolated(nt) if let NtIdent(ident, is_raw) = *nt => {\n+                TokenTree::Ident(Ident::new(rustc.sess(), ident.name, is_raw, ident.span))\n             }\n             Interpolated(nt) => {\n                 let stream = nt_to_tokenstream(&nt, rustc.sess(), CanSynthesizeMissingTokens::No);\n@@ -868,100 +863,3 @@ impl server::Span for Rustc<'_, '_> {\n         })\n     }\n }\n-\n-// See issue #74616 for details\n-fn ident_name_compatibility_hack(\n-    nt: &Nonterminal,\n-    orig_span: Span,\n-    rustc: &mut Rustc<'_, '_>,\n-) -> Option<(rustc_span::symbol::Ident, bool)> {\n-    if let NtIdent(ident, is_raw) = nt {\n-        if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n-            let source_map = rustc.sess().source_map();\n-            let filename = source_map.span_to_filename(orig_span);\n-            if let FileName::Real(RealFileName::LocalPath(path)) = filename {\n-                let matches_prefix = |prefix, filename| {\n-                    // Check for a path that ends with 'prefix*/src/<filename>'\n-                    let mut iter = path.components().rev();\n-                    iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n-                        && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n-                        && iter\n-                            .next()\n-                            .and_then(|p| p.as_os_str().to_str())\n-                            .map_or(false, |p| p.starts_with(prefix))\n-                };\n-\n-                let time_macros_impl =\n-                    macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\", \"lib.rs\");\n-                let js_sys = macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\");\n-                if time_macros_impl || js_sys {\n-                    let snippet = source_map.span_to_snippet(orig_span);\n-                    if snippet.as_deref() == Ok(\"$name\") {\n-                        if time_macros_impl {\n-                            rustc.sess().buffer_lint_with_diagnostic(\n-                                &PROC_MACRO_BACK_COMPAT,\n-                                orig_span,\n-                                ast::CRATE_NODE_ID,\n-                                \"using an old version of `time-macros-impl`\",\n-                                BuiltinLintDiagnostics::ProcMacroBackCompat(\n-                                \"the `time-macros-impl` crate will stop compiling in futures version of Rust. \\\n-                                Please update to the latest version of the `time` crate to avoid breakage\".to_string())\n-                            );\n-                            return Some((*ident, *is_raw));\n-                        }\n-                        if js_sys {\n-                            if let Some(c) = path\n-                                .components()\n-                                .flat_map(|c| c.as_os_str().to_str())\n-                                .find(|c| c.starts_with(\"js-sys\"))\n-                            {\n-                                let mut version = c.trim_start_matches(\"js-sys-\").split('.');\n-                                if version.next() == Some(\"0\")\n-                                    && version.next() == Some(\"3\")\n-                                    && version\n-                                        .next()\n-                                        .and_then(|c| c.parse::<u32>().ok())\n-                                        .map_or(false, |v| v < 40)\n-                                {\n-                                    rustc.sess().buffer_lint_with_diagnostic(\n-                                        &PROC_MACRO_BACK_COMPAT,\n-                                        orig_span,\n-                                        ast::CRATE_NODE_ID,\n-                                        \"using an old version of `js-sys`\",\n-                                        BuiltinLintDiagnostics::ProcMacroBackCompat(\n-                                        \"older versions of the `js-sys` crate will stop compiling in future versions of Rust; \\\n-                                        please update to `js-sys` v0.3.40 or above\".to_string())\n-                                    );\n-                                    return Some((*ident, *is_raw));\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-\n-                if macro_name == sym::tuple_from_req && matches_prefix(\"actix-web\", \"extract.rs\") {\n-                    let snippet = source_map.span_to_snippet(orig_span);\n-                    if snippet.as_deref() == Ok(\"$T\") {\n-                        if let FileName::Real(RealFileName::LocalPath(macro_path)) =\n-                            source_map.span_to_filename(rustc.def_site)\n-                        {\n-                            if macro_path.to_string_lossy().contains(\"pin-project-internal-0.\") {\n-                                rustc.sess().buffer_lint_with_diagnostic(\n-                                    &PROC_MACRO_BACK_COMPAT,\n-                                    orig_span,\n-                                    ast::CRATE_NODE_ID,\n-                                    \"using an old version of `actix-web`\",\n-                                    BuiltinLintDiagnostics::ProcMacroBackCompat(\n-                                    \"the version of `actix-web` you are using might stop compiling in future versions of Rust; \\\n-                                    please update to the latest version of the `actix-web` crate to avoid breakage\".to_string())\n-                                );\n-                                return Some((*ident, *is_raw));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    None\n-}"}, {"sha": "4de8746a1b4602b64cbcbb9c101563dae7f64b31", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=baa3ad4dc846981902926ec230a89f452f5bc370", "patch": "@@ -112,15 +112,9 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         spacing: Alone,\n         span: $DIR/capture-macro-rules-invoke.rs:14:54: 14:55 (#8),\n     },\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"my_name\",\n-                span: $DIR/capture-macro-rules-invoke.rs:42:13: 42:20 (#0),\n-            },\n-        ],\n-        span: $DIR/capture-macro-rules-invoke.rs:14:56: 14:62 (#8),\n+    Ident {\n+        ident: \"my_name\",\n+        span: $DIR/capture-macro-rules-invoke.rs:42:13: 42:20 (#0),\n     },\n     Punct {\n         ch: ',',"}, {"sha": "2d4f6010012df08ba599f39c4b1ce04973386cc8", "filename": "src/test/ui/proc-macro/group-compat-hack/actix-web-2.0.0/src/extract.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web-2.0.0%2Fsrc%2Fextract.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! tuple_from_req {\n-    ($T:ident) => {\n-        #[my_macro] struct Three($T);\n-    }\n-}"}, {"sha": "2d4f6010012df08ba599f39c4b1ce04973386cc8", "filename": "src/test/ui/proc-macro/group-compat-hack/actix-web/src/extract.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factix-web%2Fsrc%2Fextract.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! tuple_from_req {\n-    ($T:ident) => {\n-        #[my_macro] struct Three($T);\n-    }\n-}"}, {"sha": "9ec6aba63f35fee0d89eced1e2e6ac86fc72579d", "filename": "src/test/ui/proc-macro/group-compat-hack/actori-web-2.0.0/src/extract.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web-2.0.0%2Fsrc%2Fextract.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! tuple_from_req {\n-    ($T:ident) => {\n-        #[my_macro] struct Four($T);\n-    }\n-}"}, {"sha": "9ec6aba63f35fee0d89eced1e2e6ac86fc72579d", "filename": "src/test/ui/proc-macro/group-compat-hack/actori-web/src/extract.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Factori-web%2Fsrc%2Fextract.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! tuple_from_req {\n-    ($T:ident) => {\n-        #[my_macro] struct Four($T);\n-    }\n-}"}, {"sha": "baa4fd3a10559d77043812621240db10de9fe587", "filename": "src/test/ui/proc-macro/group-compat-hack/auxiliary/pin-project-internal-0.4.0.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fpin-project-internal-0.4.0.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,17 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-#![crate_name = \"group_compat_hack\"]\n-\n-// This file has an unusual name in order to trigger the back-compat\n-// code in the compiler\n-\n-extern crate proc_macro;\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn my_macro(_attr: TokenStream, input: TokenStream) -> TokenStream {\n-    println!(\"Called proc_macro_hack with {:?}\", input);\n-    input\n-}"}, {"sha": "3a2a6fa2253fae3901fd15ac8308e6663d56dded", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,87 +0,0 @@\n-// aux-build:pin-project-internal-0.4.0.rs\n-// compile-flags: -Z span-debug\n-\n-#![no_std] // Don't load unnecessary hygiene information from std\n-extern crate std;\n-\n-#[macro_use] extern crate group_compat_hack;\n-\n-// Tests the backwards compatibility hack added for certain macros\n-// When an attribute macro named `proc_macro_hack` or `wasm_bindgen`\n-// has an `NtIdent` named `$name`, we pass a plain `Ident` token in\n-// place of a `None`-delimited group. This allows us to maintain\n-// backwards compatibility for older versions of these crates.\n-\n-mod no_version {\n-    include!(\"js-sys/src/lib.rs\");\n-    include!(\"time-macros-impl/src/lib.rs\");\n-\n-    macro_rules! other {\n-        ($name:ident) => {\n-            #[my_macro] struct Three($name);\n-        }\n-    }\n-\n-    struct Foo;\n-    impl_macros!(Foo); //~ ERROR  using an old version\n-                       //~| WARN this was previously\n-    arrays!(Foo);\n-    other!(Foo);\n-}\n-\n-mod with_version {\n-    include!(\"js-sys-0.3.17/src/lib.rs\");\n-    include!(\"time-macros-impl-0.1.0/src/lib.rs\");\n-\n-    macro_rules! other {\n-        ($name:ident) => {\n-            #[my_macro] struct Three($name);\n-        }\n-    }\n-\n-    struct Foo;\n-    impl_macros!(Foo); //~  ERROR using an old version\n-                       //~| WARN this was previously\n-    arrays!(Foo); //~  ERROR using an old version\n-                  //~| WARN this was previously\n-    other!(Foo);\n-}\n-\n-mod actix_web_test {\n-    include!(\"actix-web/src/extract.rs\");\n-\n-    struct Foo;\n-    tuple_from_req!(Foo); //~ ERROR using an old version\n-    //~| WARN this was previously\n-}\n-\n-mod actix_web_version_test {\n-    include!(\"actix-web-2.0.0/src/extract.rs\");\n-\n-    struct Foo;\n-    tuple_from_req!(Foo); //~ ERROR using an old version\n-    //~| WARN this was previously\n-}\n-\n-mod actori_web_test {\n-    include!(\"actori-web/src/extract.rs\");\n-\n-    struct Foo;\n-    tuple_from_req!(Foo);\n-}\n-\n-mod actori_web_version_test {\n-    include!(\"actori-web-2.0.0/src/extract.rs\");\n-\n-    struct Foo;\n-    tuple_from_req!(Foo);\n-}\n-\n-mod with_good_js_sys_version {\n-    include!(\"js-sys-0.3.40/src/lib.rs\");\n-    struct Foo;\n-    arrays!(Foo);\n-}\n-\n-\n-fn main() {}"}, {"sha": "acba357b0d336566ef6b8be5cb7fd8acd428ca69", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "removed", "additions": 0, "deletions": 173, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,173 +0,0 @@\n-error: using an old version of `time-macros-impl`\n-  --> $DIR/time-macros-impl/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct One($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:26:5\n-   |\n-LL |     impl_macros!(Foo);\n-   |     ----------------- in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: using an old version of `time-macros-impl`\n-  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct One($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:43:5\n-   |\n-LL |     impl_macros!(Foo);\n-   |     ----------------- in this macro invocation\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: using an old version of `js-sys`\n-  --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct Two($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:45:5\n-   |\n-LL |     arrays!(Foo);\n-   |     ------------ in this macro invocation\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: using an old version of `actix-web`\n-  --> $DIR/actix-web/src/extract.rs:5:34\n-   |\n-LL |         #[my_macro] struct Three($T);\n-   |                                  ^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:54:5\n-   |\n-LL |     tuple_from_req!(Foo);\n-   |     -------------------- in this macro invocation\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: using an old version of `actix-web`\n-  --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n-   |\n-LL |         #[my_macro] struct Three($T);\n-   |                                  ^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:62:5\n-   |\n-LL |     tuple_from_req!(Foo);\n-   |     -------------------- in this macro invocation\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 5 previous errors\n-\n-Future incompatibility report: Future breakage diagnostic:\n-error: using an old version of `time-macros-impl`\n-  --> $DIR/time-macros-impl/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct One($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:26:5\n-   |\n-LL |     impl_macros!(Foo);\n-   |     ----------------- in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: using an old version of `time-macros-impl`\n-  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct One($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:43:5\n-   |\n-LL |     impl_macros!(Foo);\n-   |     ----------------- in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this error originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: using an old version of `js-sys`\n-  --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n-   |\n-LL |         #[my_macro] struct Two($name);\n-   |                                ^^^^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:45:5\n-   |\n-LL |     arrays!(Foo);\n-   |     ------------ in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this error originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: using an old version of `actix-web`\n-  --> $DIR/actix-web/src/extract.rs:5:34\n-   |\n-LL |         #[my_macro] struct Three($T);\n-   |                                  ^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:54:5\n-   |\n-LL |     tuple_from_req!(Foo);\n-   |     -------------------- in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-Future breakage diagnostic:\n-error: using an old version of `actix-web`\n-  --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n-   |\n-LL |         #[my_macro] struct Three($T);\n-   |                                  ^^\n-   |\n-  ::: $DIR/group-compat-hack.rs:62:5\n-   |\n-LL |     tuple_from_req!(Foo);\n-   |     -------------------- in this macro invocation\n-   |\n-   = note: `#[deny(proc_macro_back_compat)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n-   = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this error originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n-"}, {"sha": "51312b10ad17616bb7e4d4c187ee469f39e49073", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,11 +0,0 @@\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:26:18: 26:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:32: 5:37 (#10) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:25: 21:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:32: 21:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:38: 21:43 (#14) }], span: $DIR/group-compat-hack.rs:21:37: 21:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:44: 21:45 (#14) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:13: 45:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:62:21: 62:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:70:21: 70:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:33: 5:35 (#43) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:77:21: 77:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:33: 5:35 (#48) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:21: 5:27 (#53) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.40/src/lib.rs:5:28: 5:31 (#53) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:83:13: 83:16 (#0) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:32: 5:37 (#53) }], span: $DIR/js-sys-0.3.40/src/lib.rs:5:31: 5:38 (#53) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.40/src/lib.rs:5:38: 5:39 (#53) }]"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys-0.3.17/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.17%2Fsrc%2Flib.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! arrays {\n-    ($name:ident) => {\n-        #[my_macro] struct Two($name);\n-    }\n-}"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys-0.3.40/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys-0.3.40%2Fsrc%2Flib.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! arrays {\n-    ($name:ident) => {\n-        #[my_macro] struct Two($name);\n-    }\n-}"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! arrays {\n-    ($name:ident) => {\n-        #[my_macro] struct Two($name);\n-    }\n-}"}, {"sha": "c94c357920974b1e3e6c8f45fb1cc5f06a63cf3e", "filename": "src/test/ui/proc-macro/group-compat-hack/time-macros-impl-0.1.0/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl-0.1.0%2Fsrc%2Flib.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! impl_macros {\n-    ($name:ident) => {\n-        #[my_macro] struct One($name);\n-    }\n-}"}, {"sha": "c94c357920974b1e3e6c8f45fb1cc5f06a63cf3e", "filename": "src/test/ui/proc-macro/group-compat-hack/time-macros-impl/src/lib.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2882c2023d6e1dee4128611e89fcde0cf6199f6d/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs?ref=2882c2023d6e1dee4128611e89fcde0cf6199f6d", "patch": "@@ -1,7 +0,0 @@\n-// ignore-test this is not a test\n-\n-macro_rules! impl_macros {\n-    ($name:ident) => {\n-        #[my_macro] struct One($name);\n-    }\n-}"}, {"sha": "34566c780194410f9073112cb52fb7b4ebf2b105", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=baa3ad4dc846981902926ec230a89f452f5bc370", "patch": "@@ -1,14 +1,8 @@\n PRINT-BANG INPUT (DISPLAY): A\n PRINT-BANG INPUT (DEBUG): TokenStream [\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"A\",\n-                span: #0 bytes(503..504),\n-            },\n-        ],\n-        span: #4 bytes(370..372),\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(503..504),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n@@ -17,15 +11,9 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         ident: \"const\",\n         span: #4 bytes(416..421),\n     },\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"A\",\n-                span: #0 bytes(503..504),\n-            },\n-        ],\n-        span: #4 bytes(422..424),\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(503..504),\n     },\n     Punct {\n         ch: ':',\n@@ -59,15 +47,9 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         ident: \"struct\",\n         span: #4 bytes(468..474),\n     },\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"A\",\n-                span: #0 bytes(503..504),\n-            },\n-        ],\n-        span: #4 bytes(475..477),\n+    Ident {\n+        ident: \"A\",\n+        span: #0 bytes(503..504),\n     },\n     Group {\n         delimiter: Brace,"}, {"sha": "fa35e81148b071b4777b756af0a243bd6222ce45", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=baa3ad4dc846981902926ec230a89f452f5bc370", "patch": "@@ -35,15 +35,9 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n ]\n PRINT-BANG INPUT (DISPLAY): SecondStruct\n PRINT-BANG INPUT (DEBUG): TokenStream [\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"SecondStruct\",\n-                span: $DIR/nested-macro-rules.rs:21:38: 21:50 (#16),\n-            },\n-        ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:9:30: 9:35 (#15),\n+    Ident {\n+        ident: \"SecondStruct\",\n+        span: $DIR/nested-macro-rules.rs:21:38: 21:50 (#16),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct SecondAttrStruct {}\n@@ -52,15 +46,9 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         ident: \"struct\",\n         span: $DIR/auxiliary/nested-macro-rules.rs:10:32: 10:38 (#15),\n     },\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"SecondAttrStruct\",\n-                span: $DIR/nested-macro-rules.rs:21:52: 21:68 (#16),\n-            },\n-        ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:10:39: 10:56 (#15),\n+    Ident {\n+        ident: \"SecondAttrStruct\",\n+        span: $DIR/nested-macro-rules.rs:21:52: 21:68 (#16),\n     },\n     Group {\n         delimiter: Brace,"}, {"sha": "6824395ae40563c89aa3db4a94f49dd7eba9d60d", "filename": "src/test/ui/proc-macro/nonterminal-recollect-attr.stdout", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/baa3ad4dc846981902926ec230a89f452f5bc370/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-recollect-attr.stdout?ref=baa3ad4dc846981902926ec230a89f452f5bc370", "patch": "@@ -1,13 +1,7 @@\n First recollected: TokenStream [\n-    Group {\n-        delimiter: None,\n-        stream: TokenStream [\n-            Ident {\n-                ident: \"pub\",\n-                span: $DIR/nonterminal-recollect-attr.rs:20:11: 20:14 (#0),\n-            },\n-        ],\n-        span: $DIR/nonterminal-recollect-attr.rs:14:9: 14:11 (#4),\n+    Ident {\n+        ident: \"pub\",\n+        span: $DIR/nonterminal-recollect-attr.rs:20:11: 20:14 (#0),\n     },\n     Ident {\n         ident: \"struct\","}]}