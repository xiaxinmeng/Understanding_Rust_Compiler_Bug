{"sha": "e156df2a1cd722ebea9f2958d3627f1819835c0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTZkZjJhMWNkNzIyZWJlYTlmMjk1OGQzNjI3ZjE4MTk4MzVjMGE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-10T23:51:10Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-09-11T01:46:40Z"}, "message": "Fix debuginfo tests for the latest version of the Windows SDK.\n\n- Cdb now correctly visualizes enums.\n- Cdb doesn't render emoji characters in `OSStr` anymore.\n- Cdb doesn't always render `str` correctly (#88840)", "tree": {"sha": "4c85e18d602a2516a1e546761a262632ced9f6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c85e18d602a2516a1e546761a262632ced9f6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e156df2a1cd722ebea9f2958d3627f1819835c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e156df2a1cd722ebea9f2958d3627f1819835c0a", "html_url": "https://github.com/rust-lang/rust/commit/e156df2a1cd722ebea9f2958d3627f1819835c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e156df2a1cd722ebea9f2958d3627f1819835c0a/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f5108ca367bef48d1429e889f0ec9340de5038", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f5108ca367bef48d1429e889f0ec9340de5038", "html_url": "https://github.com/rust-lang/rust/commit/f1f5108ca367bef48d1429e889f0ec9340de5038"}], "stats": {"total": 135, "additions": 58, "deletions": 77}, "files": [{"sha": "c8879856b9670c841d481c97db268e42943d744b", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=e156df2a1cd722ebea9f2958d3627f1819835c0a", "patch": "@@ -128,8 +128,9 @@\n // cdb-command:dx f64\n // cdb-check:f64              : 3.500000 [Type: double]\n // cdb-command:.enable_unicode 1\n+// FIXME(#88840): The latest version of the Windows SDK broke the visualizer for str.\n // cdb-command:dx  s\n-// cdb-check:s                : \"Hello, World!\" [Type: str]\n+// cdb-check:s                : [...] [Type: str]\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "642694355addf47e8e98d91cd192093ef926fc52", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 48, "deletions": 72, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=e156df2a1cd722ebea9f2958d3627f1819835c0a", "patch": "@@ -1,77 +1,52 @@\n // only-cdb\n-// ignore-tidy-linelength\n // compile-flags:-g\n \n // cdb-command: g\n \n-// Note: The natvis used to visualize niche-layout enums don't work correctly in cdb\n-//       so the best we can do is to make sure we are generating the right debuginfo.\n-//       Therefore, we use the `!` [format specifier](https://docs.microsoft.com/en-us/visualstudio/debugger/format-specifiers-in-cpp?view=vs-2019#BKMK_Visual_Studio_2012_format_specifiers)\n-//       to disable the natvis for a given expression. We also provide the `-r2` flag\n-//       to expand the expression 2 levels.\n-\n-// cdb-command: dx -r2 a,!\n-// cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n-// cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n-\n-// cdb-command: dx -r2 b,!\n-// cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n-// cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n-\n-// cdb-command: dx -r2 c,!\n-// cdb-check:c,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n-// cdb-check:        [+0x000] my_data          : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : Tag1 (0x11) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n-\n-// cdb-command: dx -r2 d,!\n-// cdb-check:d,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n-// cdb-check:        [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : 0x10 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n-\n-// cdb-command: dx -r2 e,!\n-// cdb-check:e,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n-// cdb-check:        [+0x000] my_data          : 0x13 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n-\n-// cdb-command: dx -r2 f,!\n-// cdb-check:f,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n-// cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n-\n-// cdb-command: dx -r2 g,!\n-// cdb-check:g,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n-// cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n-\n-// cdb-command: dx -r2 h,!\n-// cdb-check:h,!              : Some [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n-// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n-// cdb-check:        [+0x004] __0              : 0xc [Type: unsigned int]\n-// cdb-check:    [+0x000] discriminant     : Some (0x1) [Type: core::option::Option]\n+// cdb-command: dx a\n+// cdb-check:a                :  Some({...}) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [variant]        :  Some\n+// cdb-check:    [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n+\n+// cdb-command: dx b\n+// cdb-check:b                : None [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [variant]        : None\n+\n+// cdb-command: dx c\n+// cdb-check:c                : Tag1 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [variant]        : Tag1\n+\n+// cdb-command: dx d\n+// cdb-check:d                :  Data({...}) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [variant]        :  Data\n+// cdb-check:    [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n+\n+// cdb-command: dx e\n+// cdb-check:e                : Tag2 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:    [variant]        : Tag2\n+\n+// cdb-command: dx f\n+// cdb-check:f                :  Some({...}) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [variant]        :  Some\n+// cdb-check:    [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n+\n+// cdb-command: dx g\n+// cdb-check:g                : None [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [variant]        : None\n \n // cdb-command: dx h\n // cdb-check:h                : Some [Type: enum$<core::option::Option<u32> >]\n // cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n // cdb-check:    [variant]        : Some\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n-// cdb-command: dx -r2 i,!\n-// cdb-check:i,!              : None [Type: enum$<core::option::Option<u32> >]\n-// cdb-check:    [+0x000] variant0         [Type: enum$<core::option::Option<u32> >::None]\n-// cdb-check:    [+0x000] variant1         [Type: enum$<core::option::Option<u32> >::Some]\n-// cdb-check:        [+0x004] __0              : 0x[...] [Type: unsigned int]\n-// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: core::option::Option]\n-\n // cdb-command: dx i\n // cdb-check:i                : None [Type: enum$<core::option::Option<u32> >]\n // cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<u32> >]\n@@ -80,16 +55,17 @@\n // cdb-command: dx j\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n \n-// cdb-command: dx -r2 k,!\n-// cdb-check:k,!              [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n-// cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n-// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]\n-\n-// cdb-command: dx -r2 l,!\n-// cdb-check:l,!              : $T2 [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>]\n-// cdb-check:    [+0x000] Ok               [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>::Ok]\n-// cdb-check:        [+0x000] __0              : 0x2a [Type: unsigned int]\n+// cdb-command: dx k\n+// cdb-check:k                :  Some({...}) [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [variant]        :  Some\n+// cdb-check:    [+0x000] __0              : \"IAMA optional string!\" [Type: alloc::string::String]\n+\n+// cdb-command: dx l\n+// cdb-check:l                :  Ok [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> >, Ok>]\n+// cdb-check:    [variant]        :  Ok\n+// cdb-check:    [+0x000] __0              : 0x2a [Type: unsigned int]\n \n pub enum CStyleEnum {\n     Low = 2,"}, {"sha": "55a4ecc1c1a29fffa0a6cd5cc256990cb0db063f", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e156df2a1cd722ebea9f2958d3627f1819835c0a/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=e156df2a1cd722ebea9f2958d3627f1819835c0a", "patch": "@@ -111,9 +111,11 @@\n // cdb-check:    [11]             : 33 '!' [Type: char]\n \n // cdb-command: dx os_string\n-// cdb-check:os_string        : \"IAMA OS string \ud83d\ude03\" [Type: std::ffi::os_str::OsString]\n+// NOTE: OSString is WTF-8 encoded which Windows debuggers don't understand. Verify the UTF-8\n+//       portion displays correctly.\n+// cdb-check:os_string        : \"IAMA OS string [...]\" [Type: std::ffi::os_str::OsString]\n // cdb-check:    [<Raw View>]     [Type: std::ffi::os_str::OsString]\n-// cdb-check:    [chars]          : \"IAMA OS string \ud83d\ude03\"\n+// cdb-check:    [chars]          : \"IAMA OS string [...]\"\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n@@ -127,8 +129,10 @@\n // cdb-check:    [variant]        : None\n \n // cdb-command: dx some_string\n-// NOTE: cdb fails to interpret debug info of Option enums on i686.\n-// cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:some_string      :  Some({...}) [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:    [variant]        :  Some\n+// cdb-check:    [+0x000] __0              : \"IAMA optional string!\" [Type: alloc::string::String]\n \n // cdb-command: dx linkedlist\n // cdb-check:linkedlist       : { len=0x2 } [Type: alloc::collections::linked_list::LinkedList<i32>]"}]}