{"sha": "e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYmIzMmJlYTE5ZjhiZmQyMTY1MzYxYjVhZDJkMDI1YzJmZmViYTA=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T09:47:49Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-25T09:57:52Z"}, "message": "libstd: Handle IPv4-Mapped/Compatible IPv6 addresses.", "tree": {"sha": "355fdbb16fdb7436855214315a8ee27dbb91a072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355fdbb16fdb7436855214315a8ee27dbb91a072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "html_url": "https://github.com/rust-lang/rust/commit/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac40d5323da30211c8dd516681c6e518777135e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac40d5323da30211c8dd516681c6e518777135e9", "html_url": "https://github.com/rust-lang/rust/commit/ac40d5323da30211c8dd516681c6e518777135e9"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "a039f3ab7ed2a85d1d96d8c138f43fdec38db9c7", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=e2bb32bea19f8bfd2165361b5ad2d025c2ffeba0", "patch": "@@ -113,7 +113,36 @@ fn uv_ip_as_ip<T>(addr: UvIpAddr, f: &fn(IpAddr) -> T) -> T {\n                         };\n                         match s {\n                             \"\" => ~[],\n-                            s => s.split_iter(':').transform(read_hex_segment).collect(),\n+                            // IPv4-Mapped/Compatible IPv6 Address?\n+                            s if s.find('.').is_some() => {\n+                                let i = s.rfind(':').get_or_default(-1);\n+\n+                                let b = s.slice(i + 1, s.len()); // the ipv4 part\n+\n+                                let h = b.split_iter('.')\n+                                   .transform(|s: &str| -> u8 { FromStr::from_str(s).unwrap() })\n+                                   .transform(|s: u8| -> ~str { fmt!(\"%02x\", s as uint) })\n+                                   .collect::<~[~str]>();\n+\n+                                if i == -1 {\n+                                    // Ipv4 Compatible Address (::x.x.x.x)\n+                                    // first 96 bits are zero leaving 32 bits\n+                                    // for the ipv4 part\n+                                    // (i.e ::127.0.0.1 == ::7F00:1)\n+                                    ~[num::FromStrRadix::from_str_radix(h[0] + h[1], 16).unwrap(),\n+                                      num::FromStrRadix::from_str_radix(h[2] + h[3], 16).unwrap()]\n+                                } else {\n+                                    // Ipv4-Mapped Address (::FFFF:x.x.x.x)\n+                                    // first 80 bits are zero, followed by all ones\n+                                    // for the next 16 bits, leaving 32 bits for\n+                                    // the ipv4 part\n+                                    // (i.e ::FFFF:127.0.0.1 == ::FFFF:7F00:1)\n+                                    ~[1,\n+                                      num::FromStrRadix::from_str_radix(h[0] + h[1], 16).unwrap(),\n+                                      num::FromStrRadix::from_str_radix(h[2] + h[3], 16).unwrap()]\n+                                }\n+                            },\n+                            s => s.split_iter(':').transform(read_hex_segment).collect()\n                         }\n                     };\n                     s.split_str_iter(\"::\").transform(convert_each_segment).collect()"}]}