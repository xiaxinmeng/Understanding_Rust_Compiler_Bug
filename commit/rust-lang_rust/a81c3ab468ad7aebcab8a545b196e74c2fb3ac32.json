{"sha": "a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MWMzYWI0NjhhZDdhZWJjYWI4YTU0NWIxOTZlNzRjMmZiM2FjMzI=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-13T05:14:57Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2014-12-16T01:28:24Z"}, "message": "Use wrapper structs for `BTreeSet`'s iterators.\n\nUsing a type alias for iterator implementations is fragile since this\nexposes the implementation to users of the iterator, and any changes\ncould break existing code.\n\nThis commit changes the iterators of `BTreeSet` to use\nproper new types, rather than type aliases.  However, since it is\nfair-game to treat a type-alias as the aliased type, this is a:\n\n[breaking-change].", "tree": {"sha": "7ca3ce0c722ba6336d6af8352aa302e402cf2168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca3ce0c722ba6336d6af8352aa302e402cf2168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "html_url": "https://github.com/rust-lang/rust/commit/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765806ef1ee93b352b724aa76870d23d82894e4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/765806ef1ee93b352b724aa76870d23d82894e4e", "html_url": "https://github.com/rust-lang/rust/commit/765806ef1ee93b352b724aa76870d23d82894e4e"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "dbba5ebdc9968eaabc3f531dd9884498524e53b4", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a81c3ab468ad7aebcab8a545b196e74c2fb3ac32/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=a81c3ab468ad7aebcab8a545b196e74c2fb3ac32", "patch": "@@ -17,8 +17,8 @@ use btree_map::{BTreeMap, Keys, MoveEntries};\n use std::hash::Hash;\n use core::borrow::BorrowFrom;\n use core::default::Default;\n-use core::{iter, fmt};\n-use core::iter::Peekable;\n+use core::fmt;\n+use core::iter::{Peekable, Map};\n use core::fmt::Show;\n \n // FIXME(conventions): implement bounded iterators\n@@ -33,11 +33,14 @@ pub struct BTreeSet<T>{\n }\n \n /// An iterator over a BTreeSet's items.\n-pub type Items<'a, T> = Keys<'a, T, ()>;\n+pub struct Items<'a, T: 'a> {\n+    iter: Keys<'a, T, ()>\n+}\n \n /// An owning iterator over a BTreeSet's items.\n-pub type MoveItems<T> =\n-    iter::Map<(T, ()), T, MoveEntries<T, ()>, fn((T, ())) -> T>;\n+pub struct MoveItems<T> {\n+    iter: Map<(T, ()), T, MoveEntries<T, ()>, fn((T, ())) -> T>\n+}\n \n /// A lazy iterator producing elements in the set difference (in-order).\n pub struct DifferenceItems<'a, T:'a> {\n@@ -105,7 +108,7 @@ impl<T> BTreeSet<T> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn iter<'a>(&'a self) -> Items<'a, T> {\n-        self.map.keys()\n+        Items { iter: self.map.keys() }\n     }\n \n     /// Gets an iterator for moving out the BtreeSet's contents.\n@@ -124,7 +127,7 @@ impl<T> BTreeSet<T> {\n     pub fn into_iter(self) -> MoveItems<T> {\n         fn first<A, B>((a, _): (A, B)) -> A { a }\n \n-        self.map.into_iter().map(first)\n+        MoveItems { iter: self.map.into_iter().map(first) }\n     }\n }\n \n@@ -635,6 +638,25 @@ impl<T: Show> Show for BTreeSet<T> {\n     }\n }\n \n+impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n+    fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+impl<'a, T> DoubleEndedIterator<&'a T> for Items<'a, T> {\n+    fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }\n+}\n+impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n+\n+\n+impl<T> Iterator<T> for MoveItems<T> {\n+    fn next(&mut self) -> Option<T> { self.iter.next() }\n+    fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n+}\n+impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n+    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n+}\n+impl<T> ExactSizeIterator<T> for MoveItems<T> {}\n+\n /// Compare `x` and `y`, but return `short` if x is None and `long` if y is None\n fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>,\n                         short: Ordering, long: Ordering) -> Ordering {"}]}