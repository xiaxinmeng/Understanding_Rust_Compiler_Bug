{"sha": "f3752ee5d5777ed68231710a6410823f24417bdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzUyZWU1ZDU3NzdlZDY4MjMxNzEwYTY0MTA4MjNmMjQ0MTdiZGM=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-07T19:15:59Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "Cleanup `constructor_covered_by_range`", "tree": {"sha": "5651320f3b2008668254b6293ca3313b8d7690fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5651320f3b2008668254b6293ca3313b8d7690fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3752ee5d5777ed68231710a6410823f24417bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3752ee5d5777ed68231710a6410823f24417bdc", "html_url": "https://github.com/rust-lang/rust/commit/f3752ee5d5777ed68231710a6410823f24417bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3752ee5d5777ed68231710a6410823f24417bdc/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "html_url": "https://github.com/rust-lang/rust/commit/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89"}], "stats": {"total": 80, "additions": 29, "deletions": 51}, "files": [{"sha": "87d5795484e3a31f45e30e694250056e134134d7", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f3752ee5d5777ed68231710a6410823f24417bdc/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752ee5d5777ed68231710a6410823f24417bdc/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f3752ee5d5777ed68231710a6410823f24417bdc", "patch": "@@ -2137,57 +2137,34 @@ fn constructor_covered_by_range<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &Pat<'tcx>,\n-) -> Result<bool, ErrorReported> {\n-    let (from, to, end, ty) = match pat.kind {\n-        box PatKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n-        box PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n+) -> bool {\n+    if let Single = ctor {\n+        return true;\n+    }\n+\n+    let (pat_from, pat_to, pat_end, ty) = match *pat.kind {\n+        PatKind::Constant { value } => (value, value, RangeEnd::Included, value.ty),\n+        PatKind::Range(PatRange { lo, hi, end }) => (lo, hi, end, lo.ty),\n         _ => bug!(\"`constructor_covered_by_range` called with {:?}\", pat),\n     };\n-    trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);\n-    let cmp_from = |c_from| {\n-        compare_const_vals(tcx, c_from, from, param_env, ty).map(|res| res != Ordering::Less)\n+    let from_bits = |bits| ty::Const::from_bits(tcx, bits, ty::ParamEnv::empty().and(ty));\n+    let (ctor_from, ctor_to, ctor_end) = match *ctor {\n+        ConstantValue(value, _) => (value, value, RangeEnd::Included),\n+        ConstantRange(from, to, _, ctor_end, _) => (from_bits(from), from_bits(to), ctor_end),\n+        _ => bug!(\"`constructor_covered_by_range` called with {:?}\", ctor),\n     };\n-    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, param_env, ty);\n-    macro_rules! some_or_ok {\n-        ($e:expr) => {\n-            match $e {\n-                Some(to) => to,\n-                None => return Ok(false), // not char or int\n-            }\n-        };\n-    }\n-    match *ctor {\n-        ConstantValue(value, _) => {\n-            let to = some_or_ok!(cmp_to(value));\n-            let end =\n-                (to == Ordering::Less) || (end == RangeEnd::Included && to == Ordering::Equal);\n-            Ok(some_or_ok!(cmp_from(value)) && end)\n-        }\n-        ConstantRange(from, to, ty, RangeEnd::Included, _) => {\n-            let to =\n-                some_or_ok!(cmp_to(ty::Const::from_bits(tcx, to, ty::ParamEnv::empty().and(ty),)));\n-            let end =\n-                (to == Ordering::Less) || (end == RangeEnd::Included && to == Ordering::Equal);\n-            Ok(some_or_ok!(cmp_from(ty::Const::from_bits(\n-                tcx,\n-                from,\n-                ty::ParamEnv::empty().and(ty),\n-            ))) && end)\n-        }\n-        ConstantRange(from, to, ty, RangeEnd::Excluded, _) => {\n-            let to =\n-                some_or_ok!(cmp_to(ty::Const::from_bits(tcx, to, ty::ParamEnv::empty().and(ty))));\n-            let end =\n-                (to == Ordering::Less) || (end == RangeEnd::Excluded && to == Ordering::Equal);\n-            Ok(some_or_ok!(cmp_from(ty::Const::from_bits(\n-                tcx,\n-                from,\n-                ty::ParamEnv::empty().and(ty)\n-            ))) && end)\n-        }\n-        Single => Ok(true),\n-        _ => bug!(),\n-    }\n+    trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, pat_from, pat_to, ty);\n+\n+    let to = match compare_const_vals(tcx, ctor_to, pat_to, param_env, ty) {\n+        Some(to) => to,\n+        None => return false,\n+    };\n+    let from = match compare_const_vals(tcx, ctor_from, pat_from, param_env, ty) {\n+        Some(from) => from,\n+        None => return false,\n+    };\n+    (from == Ordering::Greater || from == Ordering::Equal)\n+        && (to == Ordering::Less || (pat_end == ctor_end && to == Ordering::Equal))\n }\n \n fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n@@ -2336,9 +2313,10 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                 // by `IntRange`. For these cases, the constructor may not be a\n                 // range so intersection actually devolves into being covered\n                 // by the pattern.\n-                match constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat) {\n-                    Ok(true) => Some(PatStack::default()),\n-                    Ok(false) | Err(ErrorReported) => None,\n+                if constructor_covered_by_range(cx.tcx, cx.param_env, constructor, pat) {\n+                    Some(PatStack::default())\n+                } else {\n+                    None\n                 }\n             }\n         }"}]}