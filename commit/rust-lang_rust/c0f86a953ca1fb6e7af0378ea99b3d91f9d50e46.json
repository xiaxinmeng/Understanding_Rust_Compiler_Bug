{"sha": "c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjg2YTk1M2NhMWZiNmU3YWYwMzc4ZWE5OWIzZDkxZjlkNTBlNDY=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-01T18:34:27Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-01T19:41:25Z"}, "message": "Re-add min_value, max_value methods\n\nRecent numerics stabilization removed the inherent `min_value` and\n`max_value` methods from integer types, assuming that the module-level\nconstants would suffice. However, that failed to account for the use\ncase in FFI code when dealing with integer type aliases.\n\nThis commit reintroduces the methods as `#[stable]`, since this is\nessential functionality for 1.0.\n\nIt's unfortunate to freeze these as methods, but when we can provide\ninherent associated constants these methods can be deprecated.", "tree": {"sha": "fea06f7aaffb6aadb0758438f5be4b69ee722f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea06f7aaffb6aadb0758438f5be4b69ee722f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46", "html_url": "https://github.com/rust-lang/rust/commit/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d528aa9960cb9b937d8ef6c09905a6a8076d5f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d528aa9960cb9b937d8ef6c09905a6a8076d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/d528aa9960cb9b937d8ef6c09905a6a8076d5f3a"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "337f2c4a1737dd0403cdb19ef458c05b1fdfac31", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c0f86a953ca1fb6e7af0378ea99b3d91f9d50e46", "patch": "@@ -820,6 +820,18 @@ macro_rules! int_impl {\n      $add_with_overflow:path,\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n+        /// Returns the smallest value that can be represented by this integer type.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn min_value() -> $T {\n+            (-1 as $T) << ($BITS - 1)\n+        }\n+\n+        /// Returns the largest value that can be represented by this integer type.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn max_value() -> $T {\n+            let min: $T = Int::min_value(); !min\n+        }\n+\n         /// Convert a string slice in a given base to an integer.\n         ///\n         /// Leading and trailing whitespace represent an error.\n@@ -1330,6 +1342,14 @@ macro_rules! uint_impl {\n      $add_with_overflow:path,\n      $sub_with_overflow:path,\n      $mul_with_overflow:path) => {\n+        /// Returns the smallest value that can be represented by this integer type.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn min_value() -> $T { 0 }\n+\n+        /// Returns the largest value that can be represented by this integer type.\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub fn max_value() -> $T { -1 }\n+\n         /// Convert a string slice in a given base to an integer.\n         ///\n         /// Leading and trailing whitespace represent an error."}]}