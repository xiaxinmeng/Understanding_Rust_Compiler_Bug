{"sha": "fd68670c0a65dc6b972b336d449ca60547a01355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNjg2NzBjMGE2NWRjNmI5NzJiMzM2ZDQ0OWNhNjA1NDdhMDEzNTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T16:19:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-15T16:19:37Z"}, "message": "merge closures and function and implement some closure vtable cases", "tree": {"sha": "8f9c6b9b63dd8393dc79b1790d6eb925019873a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f9c6b9b63dd8393dc79b1790d6eb925019873a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd68670c0a65dc6b972b336d449ca60547a01355", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYKzWZAAoJEFbW7qD8Z6xG6kwP/Akhsbf9SzXDE8iEaE4BegzA\nJOoSANzSqy4Jdn1dtdmYHzgkT9miC52QD6SoXpxRBl+fCdp4XZhwkW3wLNHTkvYN\napvb3PTV67Kz1jN7yp091l0sRS1tuqlcl0DCkkPAxjKnWapW2Nb19fGcJNxKPyPh\nQCP3RPR8q+OBxgTuDS9I5ORrvj0o0dCjUj6YSz5XJ/MLMbs9U4SrsHSH4hP2/VLc\nAfKOf/4sIcwKXZ3p49N0sa86kC1x/TPh80ze91Y2NE7lf0gD/JdQTHFT37zATXCh\nBXkj1vKhhrz0IFKVv69fFbY6mj4PrONSiPhIEPXZASJgLTH2GwAqtMZ8/zlwKghc\nKimTjP1Hx9/e/vIIV16/UuzS6G4boXs7wegMZzkk2nlI7wsINlrCKvpJwdAroB2w\nMsvAEt7YBtR0q0jLWgwiC+/xTG6hxNxEI8QfbYizk5ejKfcGEL87WrhLovdvlhR3\ncA9LYhn9joYYJG9WSzwQTMHlMy73M/d+FV6jmhPiy7BjqdkDSUCkCVk4Lab3s0nY\nq5T55VQ/njpkmHjQMZLWOXSjzPBugICBcn66I2n+C1c/edicR6BtJUVkwXNVU70I\nqIoWVk3LY1OVVb2Z/3wNRmon/xIzn6OtZkRNfVnM3RxLwMmSXPLHTSUEQ7ybBKCZ\nTbxSm/3sr6H6+JYNeGm5\n=hkx5\n-----END PGP SIGNATURE-----", "payload": "tree 8f9c6b9b63dd8393dc79b1790d6eb925019873a8\nparent 64155ffd102ba739008a903afd82bb7aeb4c3607\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479226777 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1479226777 +0100\n\nmerge closures and function and implement some closure vtable cases"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd68670c0a65dc6b972b336d449ca60547a01355", "html_url": "https://github.com/rust-lang/rust/commit/fd68670c0a65dc6b972b336d449ca60547a01355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd68670c0a65dc6b972b336d449ca60547a01355/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64155ffd102ba739008a903afd82bb7aeb4c3607", "url": "https://api.github.com/repos/rust-lang/rust/commits/64155ffd102ba739008a903afd82bb7aeb4c3607", "html_url": "https://github.com/rust-lang/rust/commit/64155ffd102ba739008a903afd82bb7aeb4c3607"}], "stats": {"total": 152, "additions": 75, "deletions": 77}, "files": [{"sha": "481815996a0e194baca5fc844bb5c5be06053551", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -1,14 +1,15 @@\n use std::error::Error;\n use std::fmt;\n use rustc::mir;\n-use rustc::ty::{BareFnTy, Ty};\n+use rustc::ty::{BareFnTy, Ty, FnSig};\n+use syntax::abi::Abi;\n use memory::Pointer;\n use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n \n #[derive(Clone, Debug)]\n pub enum EvalError<'tcx> {\n-    FunctionPointerTyMismatch(&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>),\n+    FunctionPointerTyMismatch(Abi, &'tcx FnSig<'tcx>, &'tcx BareFnTy<'tcx>),\n     NoMirFor(String),\n     DanglingPointerDeref,\n     InvalidMemoryAccess,\n@@ -123,8 +124,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                        ptr.offset, ptr.offset + size, ptr.alloc_id, allocation_size)\n             },\n             EvalError::NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n-            EvalError::FunctionPointerTyMismatch(expected, got) =>\n-                write!(f, \"tried to call a function of type {:?} through a function pointer of type {:?}\", expected, got),\n+            EvalError::FunctionPointerTyMismatch(abi, sig, got) =>\n+                write!(f, \"tried to call a function with abi {:?} and sig {:?} through a function pointer of type {:?}\", abi, sig, got),\n             EvalError::ArrayIndexOutOfBounds(span, len, index) =>\n                 write!(f, \"index out of bounds: the len is {} but the index is {} at {:?}\", len, index, span),\n             EvalError::Math(span, ref err) =>"}, {"sha": "ee503f97d78ea5f7facd7b92b1087b95919127a1", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -666,7 +666,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ReifyFnPointer => match self.operand_ty(operand).sty {\n                         ty::TyFnDef(def_id, substs, fn_ty) => {\n                             let fn_ty = self.tcx.erase_regions(&fn_ty);\n-                            let fn_ptr = self.memory.create_fn_ptr(def_id, substs, fn_ty);\n+                            let fn_ptr = self.memory.create_fn_ptr(self.tcx,def_id, substs, fn_ty);\n                             self.write_value(Value::ByVal(PrimVal::from_fn_ptr(fn_ptr)), dest, dest_ty)?;\n                         },\n                         ref other => bug!(\"reify fn pointer on {:?}\", other),\n@@ -676,9 +676,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         ty::TyFnPtr(unsafe_fn_ty) => {\n                             let src = self.eval_operand(operand)?;\n                             let ptr = src.read_ptr(&self.memory)?;\n-                            let (def_id, substs, _) = self.memory.get_fn(ptr.alloc_id)?;\n+                            let (def_id, substs, _, _) = self.memory.get_fn(ptr.alloc_id)?;\n                             let unsafe_fn_ty = self.tcx.erase_regions(&unsafe_fn_ty);\n-                            let fn_ptr = self.memory.create_fn_ptr(def_id, substs, unsafe_fn_ty);\n+                            let fn_ptr = self.memory.create_fn_ptr(self.tcx, def_id, substs, unsafe_fn_ty);\n                             self.write_value(Value::ByVal(PrimVal::from_fn_ptr(fn_ptr)), dest, dest_ty)?;\n                         },\n                         ref other => bug!(\"fn to unsafe fn cast on {:?}\", other),\n@@ -1403,8 +1403,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyFloat(FloatTy::F64) => PrimVal::from_f64(self.memory.read_f64(ptr)?),\n \n             ty::TyFnDef(def_id, substs, fn_ty) => {\n-                let fn_ty = self.tcx.erase_regions(&fn_ty);\n-                PrimVal::from_fn_ptr(self.memory.create_fn_ptr(def_id, substs, fn_ty))\n+                PrimVal::from_fn_ptr(self.memory.create_fn_ptr(self.tcx, def_id, substs, fn_ty))\n             },\n             ty::TyFnPtr(_) => self.memory.read_ptr(ptr).map(PrimVal::from_fn_ptr)?,\n             ty::TyBox(ty) |"}, {"sha": "ccf7671eec23e5082fe6a20c85c3fd376f077c49", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -86,9 +86,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match func_ty.sty {\n                     ty::TyFnPtr(bare_fn_ty) => {\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr();\n-                        let (def_id, substs, fn_ty) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                        if fn_ty != bare_fn_ty {\n-                            return Err(EvalError::FunctionPointerTyMismatch(fn_ty, bare_fn_ty));\n+                        let (def_id, substs, abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n+                        if abi != bare_fn_ty.abi || sig != bare_fn_ty.sig.skip_binder() {\n+                            return Err(EvalError::FunctionPointerTyMismatch(abi, sig, bare_fn_ty));\n                         }\n                         self.eval_fn_call(def_id, substs, bare_fn_ty, destination, args,\n                                           terminator.source_info.span)?\n@@ -500,9 +500,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     let idx = idx + 3;\n                     let offset = idx * self.memory.pointer_size();\n                     let fn_ptr = self.memory.read_ptr(vtable.offset(offset as isize))?;\n-                    let (def_id, substs, ty) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                    // FIXME: skip_binder is wrong for HKL\n-                    *first_ty = ty.sig.skip_binder().inputs[0];\n+                    let (def_id, substs, _abi, sig) = self.memory.get_fn(fn_ptr.alloc_id)?;\n+                    *first_ty = sig.inputs[0];\n                     Ok((def_id, substs))\n                 } else {\n                     Err(EvalError::VtableForArgumentlessMethod)\n@@ -643,9 +642,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let drop_fn = self.memory.read_ptr(vtable)?;\n                 // some values don't need to call a drop impl, so the value is null\n                 if drop_fn != Pointer::from_int(0) {\n-                    let (def_id, substs, ty) = self.memory.get_fn(drop_fn.alloc_id)?;\n-                    let fn_sig = self.tcx.erase_late_bound_regions_and_normalize(&ty.sig);\n-                    let real_ty = fn_sig.inputs[0];\n+                    let (def_id, substs, _abi, sig) = self.memory.get_fn(drop_fn.alloc_id)?;\n+                    let real_ty = sig.inputs[0];\n                     self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n                     drop.push((def_id, Value::ByVal(PrimVal::from_ptr(ptr)), substs));\n                 } else {"}, {"sha": "6651194be7d1a8c88989692aa189df9f559eb808", "filename": "src/interpreter/vtable.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Finterpreter%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvtable.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         .into_iter()\n                         .map(|opt_mth| opt_mth.map(|mth| {\n                             let fn_ty = self.tcx.erase_regions(&mth.method.fty);\n-                            self.memory.create_fn_ptr(mth.method.def_id, mth.substs, fn_ty)\n+                            self.memory.create_fn_ptr(self.tcx, mth.method.def_id, mth.substs, fn_ty)\n                         }))\n                         .collect::<Vec<_>>()\n                         .into_iter()\n@@ -47,22 +47,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         substs,\n                         nested: _ }) => {\n                     let closure_type = self.tcx.closure_type(closure_def_id, substs);\n-                    let fn_ty = ty::BareFnTy {\n-                        unsafety: closure_type.unsafety,\n-                        abi: closure_type.abi,\n-                        sig: closure_type.sig,\n-                    };\n-                    let _fn_ty = self.tcx.mk_bare_fn(fn_ty);\n-                    unimplemented!()\n-                    //vec![Some(self.memory.create_fn_ptr(closure_def_id, substs.func_substs, fn_ty))].into_iter()\n+                    vec![Some(self.memory.create_closure_ptr(self.tcx, closure_def_id, substs, closure_type))].into_iter()\n                 }\n                 traits::VtableFnPointer(\n                     traits::VtableFnPointerData {\n                         fn_ty,\n                         nested: _ }) => {\n                     match fn_ty.sty {\n                         ty::TyFnDef(did, substs, bare_fn_ty) => {\n-                            vec![Some(self.memory.create_fn_ptr(did, substs, bare_fn_ty))].into_iter()\n+                            vec![Some(self.memory.create_fn_ptr(self.tcx, did, substs, bare_fn_ty))].into_iter()\n                         },\n                         _ => bug!(\"bad VtableFnPointer fn_ty: {:?}\", fn_ty),\n                     }\n@@ -97,7 +90,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TyFnDef(_, _, fn_ty) => self.tcx.erase_regions(&fn_ty),\n                     _ => bug!(\"drop method is not a TyFnDef\"),\n                 };\n-                let fn_ptr = self.memory.create_fn_ptr(drop_def_id, substs, fn_ty);\n+                let fn_ptr = self.memory.create_fn_ptr(self.tcx, drop_def_id, substs, fn_ty);\n                 self.memory.write_ptr(vtable, fn_ptr)?;\n             }\n         }"}, {"sha": "fce0ff4c976a4830a8ffbd267e0d2dd8042af76e", "filename": "src/memory.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -4,10 +4,12 @@ use std::collections::{btree_map, BTreeMap, HashMap, HashSet, VecDeque};\n use std::{fmt, iter, ptr};\n \n use rustc::hir::def_id::DefId;\n-use rustc::ty::{BareFnTy, ClosureTy, ClosureSubsts};\n+use rustc::ty::{self, BareFnTy, ClosureTy, ClosureSubsts, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::ty::layout::{self, TargetDataLayout};\n \n+use syntax::abi::Abi;\n+\n use error::{EvalError, EvalResult};\n use primval::PrimVal;\n \n@@ -88,19 +90,9 @@ impl Pointer {\n #[derive(Debug, Clone, Hash, Eq, PartialEq)]\n struct FunctionDefinition<'tcx> {\n     pub def_id: DefId,\n-    pub kind: FunctionKind<'tcx>,\n-}\n-\n-#[derive(Debug, Clone, Hash, Eq, PartialEq)]\n-enum FunctionKind<'tcx> {\n-    Closure {\n-        substs: ClosureSubsts<'tcx>,\n-        ty: ClosureTy<'tcx>,\n-    },\n-    Function {\n-        substs: &'tcx Substs<'tcx>,\n-        ty: &'tcx BareFnTy<'tcx>,\n-    }\n+    pub substs: &'tcx Substs<'tcx>,\n+    pub abi: Abi,\n+    pub sig: &'tcx ty::FnSig<'tcx>,\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -143,23 +135,31 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.alloc_map.iter()\n     }\n \n-    pub fn create_closure_ptr(&mut self, def_id: DefId, substs: ClosureSubsts<'tcx>, fn_ty: ClosureTy<'tcx>) -> Pointer {\n+    pub fn create_closure_ptr(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: ClosureSubsts<'tcx>, fn_ty: ClosureTy<'tcx>) -> Pointer {\n+        // FIXME: this is a hack\n+        let fn_ty = tcx.mk_bare_fn(ty::BareFnTy {\n+            unsafety: fn_ty.unsafety,\n+            abi: fn_ty.abi,\n+            sig: fn_ty.sig,\n+        });\n         self.create_fn_alloc(FunctionDefinition {\n             def_id: def_id,\n-            kind: FunctionKind::Closure {\n-                substs: substs,\n-                ty: fn_ty,\n-            }\n+            substs: substs.func_substs,\n+            abi: fn_ty.abi,\n+            // FIXME: why doesn't this compile?\n+            //sig: tcx.erase_late_bound_regions(&fn_ty.sig),\n+            sig: fn_ty.sig.skip_binder(),\n         })\n     }\n \n-    pub fn create_fn_ptr(&mut self, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n+    pub fn create_fn_ptr(&mut self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>, fn_ty: &'tcx BareFnTy<'tcx>) -> Pointer {\n         self.create_fn_alloc(FunctionDefinition {\n             def_id: def_id,\n-            kind: FunctionKind::Function {\n-                substs: substs,\n-                ty: fn_ty,\n-            }\n+            substs: substs,\n+            abi: fn_ty.abi,\n+            // FIXME: why doesn't this compile?\n+            //sig: tcx.erase_late_bound_regions(&fn_ty.sig),\n+            sig: fn_ty.sig.skip_binder(),\n         })\n     }\n \n@@ -308,33 +308,15 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n     }\n \n-    pub fn get_closure(&self, id: AllocId) -> EvalResult<'tcx, (DefId, ClosureSubsts<'tcx>, ClosureTy<'tcx>)> {\n-        debug!(\"reading closure fn ptr: {}\", id);\n-        match self.functions.get(&id) {\n-            Some(&FunctionDefinition {\n-                def_id,\n-                kind: FunctionKind::Closure { ref substs, ref ty }\n-            }) => Ok((def_id, *substs, ty.clone())),\n-            Some(&FunctionDefinition {\n-                kind: FunctionKind::Function { .. }, ..\n-            }) => Err(EvalError::CalledClosureAsFunction),\n-            None => match self.alloc_map.get(&id) {\n-                Some(_) => Err(EvalError::ExecuteMemory),\n-                None => Err(EvalError::InvalidFunctionPointer),\n-            }\n-        }\n-    }\n-\n-    pub fn get_fn(&self, id: AllocId) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, &'tcx BareFnTy<'tcx>)> {\n+    pub fn get_fn(&self, id: AllocId) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, Abi, &'tcx ty::FnSig<'tcx>)> {\n         debug!(\"reading fn ptr: {}\", id);\n         match self.functions.get(&id) {\n             Some(&FunctionDefinition {\n                 def_id,\n-                kind: FunctionKind::Function { substs, ty }\n-            }) => Ok((def_id, substs, ty)),\n-            Some(&FunctionDefinition {\n-                kind: FunctionKind::Closure { .. }, ..\n-            }) => Err(EvalError::CalledClosureAsFunction),\n+                substs,\n+                abi,\n+                sig,\n+            }) => Ok((def_id, substs, abi, sig)),\n             None => match self.alloc_map.get(&id) {\n                 Some(_) => Err(EvalError::ExecuteMemory),\n                 None => Err(EvalError::InvalidFunctionPointer),"}, {"sha": "c8070913f1cb5da88d3ba643275dffe6ac6813d3", "filename": "tests/compile-fail/cast_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -5,5 +5,5 @@ fn main() {\n         std::mem::transmute::<fn(), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR tried to call a function of type\n+    g(42) //~ ERROR tried to call a function with abi Rust and sig\n }"}, {"sha": "de2d815ca54ebe5de160bf28cde817197e4f5c54", "filename": "tests/run-pass/last-use-in-cap-clause.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd68670c0a65dc6b972b336d449ca60547a01355/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd68670c0a65dc6b972b336d449ca60547a01355/tests%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=fd68670c0a65dc6b972b336d449ca60547a01355", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure #1399 stays fixed\n+\n+#[allow(dead_code)]\n+struct A { a: Box<isize> }\n+\n+fn foo() -> Box<FnMut() -> isize + 'static> {\n+    let k: Box<_> = Box::new(22);\n+    let _u = A {a: k.clone()};\n+    let result  = || 22;\n+    Box::new(result)\n+}\n+\n+pub fn main() {\n+    assert_eq!(foo()(), 22);\n+}"}]}