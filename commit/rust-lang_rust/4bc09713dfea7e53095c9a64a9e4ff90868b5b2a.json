{"sha": "4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYzA5NzEzZGZlYTdlNTMwOTVjOWE2NGE5ZTRmZjkwODY4YjViMmE=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-12-28T00:14:01Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-12-29T20:25:26Z"}, "message": "Rename pkgid variables", "tree": {"sha": "aa2decf7ea76f759e6c986029658859c3cf1851a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa2decf7ea76f759e6c986029658859c3cf1851a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "html_url": "https://github.com/rust-lang/rust/commit/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5d779a3590b1ed1559e0489138040a71ae688b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5d779a3590b1ed1559e0489138040a71ae688b", "html_url": "https://github.com/rust-lang/rust/commit/aa5d779a3590b1ed1559e0489138040a71ae688b"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "cf4ed099cf26bc9f936476a980c3d7364acbb7ac", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -475,7 +475,7 @@ pub fn build_link_meta(sess: Session,\n         truncated_hash_result(symbol_hasher).to_managed()\n     }\n \n-    let pkgid = match attr::find_pkgid(attrs) {\n+    let crateid = match attr::find_crateid(attrs) {\n         None => {\n             let stem = session::expect(\n                 sess,"}, {"sha": "dba811d822feb59c1e6469fabc6338fea9f7a6a9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -1030,12 +1030,12 @@ pub fn build_output_filenames(input: &input,\n               str_input(_) => @\"rust_out\"\n           };\n \n-          // If a pkgid is present, we use it as the link name\n-          let pkgid = attr::find_pkgid(attrs);\n-          match pkgid {\n+          // If a crateid is present, we use it as the link name\n+          let crateid = attr::find_crateid(attrs);\n+          match crateid {\n               None => {}\n-              Some(pkgid) => {\n-                  stem = pkgid.name.to_managed()\n+              Some(crateid) => {\n+                  stem = crateid.name.to_managed()\n               }\n           }\n "}, {"sha": "476956c69f7c881bb9cc446285caa022d46a3b18", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -385,7 +385,7 @@ fn mk_tests(cx: &TestCtxt) -> @ast::item {\n }\n \n fn is_extra(crate: &ast::Crate) -> bool {\n-    match attr::find_pkgid(crate.attrs) {\n+    match attr::find_crateid(crate.attrs) {\n         Some(ref s) if \"extra\" == s.name => true,\n         _ => false\n     }"}, {"sha": "828e65b76487043351657ed0af6ff53a6a73a52b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -292,18 +292,18 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n         let t_outputs = d::build_output_filenames(&input, &odir, &ofile,\n                                                   attrs, sess);\n         if crate_id || crate_name {\n-            let pkgid = match attr::find_pkgid(attrs) {\n-                Some(pkgid) => pkgid,\n+            let crateid = match attr::find_crateid(attrs) {\n+                Some(crateid) => crateid,\n                 None => {\n                     sess.fatal(\"No crate_id and --crate-id or \\\n                                 --crate-name requested\")\n                 }\n             };\n             if crate_id {\n-                println(pkgid.to_str());\n+                println(crateid.to_str());\n             }\n             if crate_name {\n-                println(pkgid.name);\n+                println(crateid.name);\n             }\n         }\n "}, {"sha": "2c32c343ba86d8f66ec450c499f8833a60ca25ec", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -138,15 +138,15 @@ fn visit_view_item(e: &mut Env, i: &ast::view_item) {\n                  ident, path_opt);\n           let (name, version) = match path_opt {\n               Some((path_str, _)) => {\n-                  let pkgid: Option<PkgId> = from_str(path_str);\n-                  match pkgid {\n+                  let crateid: Option<PkgId> = from_str(path_str);\n+                  match crateid {\n                       None => (@\"\", @\"\"),\n-                      Some(pkgid) => {\n-                          let version = match pkgid.version {\n+                      Some(crateid) => {\n+                          let version = match crateid.version {\n                               None => @\"\",\n                               Some(ref ver) => ver.to_managed(),\n                           };\n-                          (pkgid.name.to_managed(), version)\n+                          (crateid.name.to_managed(), version)\n                       }\n                   }\n               }\n@@ -282,7 +282,7 @@ fn resolve_crate(e: &mut Env,\n         } = load_ctxt.load_library_crate();\n \n         let attrs = decoder::get_crate_attributes(metadata.as_slice());\n-        let pkgid = attr::find_pkgid(attrs).unwrap();\n+        let crateid = attr::find_crateid(attrs).unwrap();\n         let hash = decoder::get_crate_hash(metadata.as_slice());\n \n         // Claim this crate number and cache it"}, {"sha": "a409887575a5e275efc4e19f8c7d7cc8a584ce7a", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -1173,7 +1173,7 @@ pub fn get_crate_hash(data: &[u8]) -> @str {\n \n pub fn get_crate_vers(data: &[u8]) -> @str {\n     let attrs = decoder::get_crate_attributes(data);\n-    match attr::find_pkgid(attrs) {\n+    match attr::find_crateid(attrs) {\n         None => @\"0.0\",\n         Some(pkgid) => pkgid.version_or_default().to_managed(),\n     }"}, {"sha": "7c6be22208eb77793c5ce0fae854fa1617e11087", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -165,7 +165,7 @@ impl Context {\n                     }\n                     let data = lib.metadata.as_slice();\n                     let attrs = decoder::get_crate_attributes(data);\n-                    match attr::find_pkgid(attrs) {\n+                    match attr::find_crateid(attrs) {\n                         None => {}\n                         Some(pkgid) => {\n                             note_pkgid_attr(self.sess.diagnostic(), &pkgid);\n@@ -241,7 +241,7 @@ fn crate_matches(crate_data: &[u8],\n                  version: @str,\n                  hash: @str) -> bool {\n     let attrs = decoder::get_crate_attributes(crate_data);\n-    match attr::find_pkgid(attrs) {\n+    match attr::find_crateid(attrs) {\n         None => false,\n         Some(pkgid) => {\n             if !hash.is_empty() {"}, {"sha": "ab36079585fc4fd2f8529b1889160f1641ba11ce", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -73,7 +73,7 @@ pub struct Crate {\n \n impl Clean<Crate> for visit_ast::RustdocVisitor {\n     fn clean(&self) -> Crate {\n-        use syntax::attr::find_pkgid;\n+        use syntax::attr::find_crateid;\n         let cx = local_data::get(super::ctxtkey, |x| *x.unwrap());\n \n         let mut externs = HashMap::new();\n@@ -82,7 +82,7 @@ impl Clean<Crate> for visit_ast::RustdocVisitor {\n         });\n \n         Crate {\n-            name: match find_pkgid(self.attrs) {\n+            name: match find_crateid(self.attrs) {\n                 Some(n) => n.name,\n                 None => fail!(\"rustdoc requires a `crate_id` crate attribute\"),\n             },"}, {"sha": "0bd457b254c128d34daf6d58a0258b9abedadccc", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "patch": "@@ -234,10 +234,10 @@ pub fn find_linkage_metas(attrs: &[Attribute]) -> ~[@MetaItem] {\n     result\n }\n \n-pub fn find_pkgid(attrs: &[Attribute]) -> Option<PkgId> {\n+pub fn find_crateid(attrs: &[Attribute]) -> Option<CrateId> {\n     match first_attr_value_str_by_name(attrs, \"crate_id\") {\n         None => None,\n-        Some(id) => from_str::<PkgId>(id),\n+        Some(id) => from_str::<CrateId>(id),\n     }\n }\n "}]}