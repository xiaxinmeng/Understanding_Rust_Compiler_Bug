{"sha": "04c74f46f0a0ecf886f1c12b51483d38690fac22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Yzc0ZjQ2ZjBhMGVjZjg4NmYxYzEyYjUxNDgzZDM4NjkwZmFjMjI=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2019-01-13T10:16:14Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2019-01-13T15:58:08Z"}, "message": "Add core::iter::once_with", "tree": {"sha": "4519dc9dad6f4fe396b3150f229bd4ecaa566541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4519dc9dad6f4fe396b3150f229bd4ecaa566541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04c74f46f0a0ecf886f1c12b51483d38690fac22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04c74f46f0a0ecf886f1c12b51483d38690fac22", "html_url": "https://github.com/rust-lang/rust/commit/04c74f46f0a0ecf886f1c12b51483d38690fac22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04c74f46f0a0ecf886f1c12b51483d38690fac22/comments", "author": null, "committer": null, "parents": [{"sha": "75a369c5b11459baa6bf7734eeb6135998a0a7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a369c5b11459baa6bf7734eeb6135998a0a7de", "html_url": "https://github.com/rust-lang/rust/commit/75a369c5b11459baa6bf7734eeb6135998a0a7de"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "f647a61a584c69e77dac5972b46b24392d593b6b", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=04c74f46f0a0ecf886f1c12b51483d38690fac22", "patch": "@@ -329,6 +329,8 @@ pub use self::sources::{RepeatWith, repeat_with};\n pub use self::sources::{Empty, empty};\n #[stable(feature = \"iter_once\", since = \"1.2.0\")]\n pub use self::sources::{Once, once};\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+pub use self::sources::{OnceWith, once_with};\n #[unstable(feature = \"iter_unfold\", issue = \"55977\")]\n pub use self::sources::{Unfold, unfold, Successors, successors};\n "}, {"sha": "d183fa3a7c233640d857f3d1ae3e585a64f6ead2", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=04c74f46f0a0ecf886f1c12b51483d38690fac22", "patch": "@@ -377,6 +377,114 @@ pub fn once<T>(value: T) -> Once<T> {\n     Once { inner: Some(value).into_iter() }\n }\n \n+/// An iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure `F: FnMut() -> A`.\n+///\n+/// This `struct` is created by the [`once_with`] function.\n+/// See its documentation for more.\n+///\n+/// [`once_with`]: fn.once_with.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+pub struct OnceWith<F> {\n+    gen: Option<F>,\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        self.gen.take().map(|f| f())\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.gen.iter().size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+impl<A, F: FnOnce() -> A> DoubleEndedIterator for OnceWith<F> {\n+    fn next_back(&mut self) -> Option<A> {\n+        self.next()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+impl<A, F: FnOnce() -> A> ExactSizeIterator for OnceWith<F> {\n+    fn len(&self) -> usize {\n+        self.gen.iter().len()\n+    }\n+}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+impl<A, F: FnOnce() -> A> FusedIterator for OnceWith<F> {}\n+\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+unsafe impl<A, F: FnOnce() -> A> TrustedLen for OnceWith<F> {}\n+\n+/// Creates an iterator that lazily generates a value exactly once by invoking\n+/// the provided closure.\n+///\n+/// This is commonly used to adapt a single value generator into a [`chain`] of\n+/// other kinds of iteration. Maybe you have an iterator that covers almost\n+/// everything, but you need an extra special case. Maybe you have a function\n+/// which works on iterators, but you only need to process one value.\n+///\n+/// Unlike [`once`], this function will lazily generate the value on request.\n+///\n+/// [`once`]: fn.once.html\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // one is the loneliest number\n+/// let mut one = iter::once_with(|| 1);\n+///\n+/// assert_eq!(Some(1), one.next());\n+///\n+/// // just one, that's all we get\n+/// assert_eq!(None, one.next());\n+/// ```\n+///\n+/// Chaining together with another iterator. Let's say that we want to iterate\n+/// over each file of the `.foo` directory, but also a configuration file,\n+/// `.foorc`:\n+///\n+/// ```no_run\n+/// use std::iter;\n+/// use std::fs;\n+/// use std::path::PathBuf;\n+///\n+/// let dirs = fs::read_dir(\".foo\").unwrap();\n+///\n+/// // we need to convert from an iterator of DirEntry-s to an iterator of\n+/// // PathBufs, so we use map\n+/// let dirs = dirs.map(|file| file.unwrap().path());\n+///\n+/// // now, our iterator just for our config file\n+/// let config = iter::once_with(|| PathBuf::from(\".foorc\"));\n+///\n+/// // chain the two iterators together into one big iterator\n+/// let files = dirs.chain(config);\n+///\n+/// // this will give us all of the files in .foo as well as .foorc\n+/// for f in files {\n+///     println!(\"{:?}\", f);\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iter_once_with\", issue = \"0\")]\n+pub fn once_with<A, F: FnOnce() -> A>(gen: F) -> OnceWith<F> {\n+    OnceWith { gen: Some(gen) }\n+}\n+\n /// Creates a new iterator where each iteration calls the provided closure\n /// `F: FnMut(&mut St) -> Option<T>`.\n ///"}, {"sha": "598e7fd706a24c3d17159d7bd474dd654b6fffa0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=04c74f46f0a0ecf886f1c12b51483d38690fac22", "patch": "@@ -79,6 +79,7 @@\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]\n+#![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]"}, {"sha": "b62f55b2cd0034d09519a250349ec82ab55dfc0e", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=04c74f46f0a0ecf886f1c12b51483d38690fac22", "patch": "@@ -1906,6 +1906,23 @@ fn test_once() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_once_with() {\n+    let mut count = 0;\n+    let mut it = once_with(|| {\n+        count += 1;\n+        42\n+    });\n+\n+    assert_eq!(count, 0);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(count, 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count, 1);\n+    assert_eq!(it.next(), None);\n+    assert_eq!(count, 1);\n+}\n+\n #[test]\n fn test_empty() {\n     let mut it = empty::<i32>();"}, {"sha": "a9b8decfd0262beb381f0bffbf55e1b5a0c1a2da", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c74f46f0a0ecf886f1c12b51483d38690fac22/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=04c74f46f0a0ecf886f1c12b51483d38690fac22", "patch": "@@ -12,6 +12,7 @@\n #![feature(hashmap_internals)]\n #![feature(iter_copied)]\n #![feature(iter_nth_back)]\n+#![feature(iter_once_with)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}]}