{"sha": "68ab457aa04090d52b7b1a91058957afd56ecc52", "node_id": "C_kwDOAAsO6NoAKDY4YWI0NTdhYTA0MDkwZDUyYjdiMWE5MTA1ODk1N2FmZDU2ZWNjNTI", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-04-30T17:50:35Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-04-30T18:59:00Z"}, "message": "Pass AccessKind to check_protector", "tree": {"sha": "9ee5fc9fd45009bb9681d3d5672d7a581b91fb43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee5fc9fd45009bb9681d3d5672d7a581b91fb43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ab457aa04090d52b7b1a91058957afd56ecc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ab457aa04090d52b7b1a91058957afd56ecc52", "html_url": "https://github.com/rust-lang/rust/commit/68ab457aa04090d52b7b1a91058957afd56ecc52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ab457aa04090d52b7b1a91058957afd56ecc52/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cddd85e2f30fb185de55209f5843a235cdc79a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/cddd85e2f30fb185de55209f5843a235cdc79a88", "html_url": "https://github.com/rust-lang/rust/commit/cddd85e2f30fb185de55209f5843a235cdc79a88"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "fa7d72222ed099c1d338e119e41dc4d2abf024b0", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68ab457aa04090d52b7b1a91058957afd56ecc52/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ab457aa04090d52b7b1a91058957afd56ecc52/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=68ab457aa04090d52b7b1a91058957afd56ecc52", "patch": "@@ -327,20 +327,21 @@ impl<'tcx> Stack {\n     /// `None` during a deallocation.\n     fn check_protector(\n         item: &Item,\n-        provoking_access: Option<(SbTag, AllocId, AllocRange, Size)>, // just for debug printing and error messages\n+        provoking_access: Option<(SbTag, AllocId, AllocRange, Size, AccessKind)>, // just for debug printing and error messages\n         global: &GlobalStateInner,\n     ) -> InterpResult<'tcx> {\n         if let SbTag::Tagged(id) = item.tag {\n             if global.tracked_pointer_tags.contains(&id) {\n                 register_diagnostic(NonHaltingDiagnostic::PoppedPointerTag(\n                     *item,\n-                    None,\n+                    provoking_access\n+                        .map(|(tag, _alloc_id, _alloc_range, _size, access)| (tag, access)),\n                 ));\n             }\n         }\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n-                if let Some((tag, alloc_id, alloc_range, offset)) = provoking_access {\n+                if let Some((tag, alloc_id, alloc_range, offset, _access)) = provoking_access {\n                     Err(err_sb_ub(\n                         format!(\n                             \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n@@ -393,7 +394,11 @@ impl<'tcx> Stack {\n             let first_incompatible_idx = self.find_first_write_incompatible(granting_idx);\n             for item in self.borrows.drain(first_incompatible_idx..).rev() {\n                 trace!(\"access: popping item {:?}\", item);\n-                Stack::check_protector(&item, Some((tag, alloc_id, alloc_range, offset)), global)?;\n+                Stack::check_protector(\n+                    &item,\n+                    Some((tag, alloc_id, alloc_range, offset, access)),\n+                    global,\n+                )?;\n                 global.add_invalidation(item.tag, alloc_id, alloc_range);\n             }\n         } else {\n@@ -411,7 +416,7 @@ impl<'tcx> Stack {\n                     trace!(\"access: disabling item {:?}\", item);\n                     Stack::check_protector(\n                         item,\n-                        Some((tag, alloc_id, alloc_range, offset)),\n+                        Some((tag, alloc_id, alloc_range, offset, access)),\n                         global,\n                     )?;\n                     item.perm = Permission::Disabled;"}]}