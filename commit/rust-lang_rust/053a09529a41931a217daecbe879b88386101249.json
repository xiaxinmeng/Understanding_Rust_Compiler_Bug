{"sha": "053a09529a41931a217daecbe879b88386101249", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2EwOTUyOWE0MTkzMWEyMTdkYWVjYmU4NzliODgzODYxMDEyNDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-26T01:30:02Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-30T19:05:17Z"}, "message": "Reduce ammount of errors given unclosed delimiter\n\nWhen in a file with a non-terminated item, catch the error and consume\nthe block instead of trying to recover it more granularly in order to\nreduce the amount of unrelated errors that would be fixed after adding\nthe missing closing brace. Also point out the possible location of the\nmissing closing brace.", "tree": {"sha": "03a1d706c34c45f734bef94f2d9e26c627b298d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a1d706c34c45f734bef94f2d9e26c627b298d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053a09529a41931a217daecbe879b88386101249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053a09529a41931a217daecbe879b88386101249", "html_url": "https://github.com/rust-lang/rust/commit/053a09529a41931a217daecbe879b88386101249", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053a09529a41931a217daecbe879b88386101249/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3d28a49209a21628fda0245b631e5fc3465be1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d28a49209a21628fda0245b631e5fc3465be1a", "html_url": "https://github.com/rust-lang/rust/commit/d3d28a49209a21628fda0245b631e5fc3465be1a"}], "stats": {"total": 398, "additions": 302, "deletions": 96}, "files": [{"sha": "48cf117f65ae63c98be22738051c4e3793fe5100", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -23,7 +23,7 @@ mod unicode_chars;\n #[derive(Clone, Debug)]\n pub struct UnmatchedBrace {\n     pub expected_delim: token::DelimToken,\n-    pub found_delim: token::DelimToken,\n+    pub found_delim: Option<token::DelimToken>,\n     pub found_span: Span,\n     pub unclosed_span: Option<Span>,\n     pub candidate_span: Option<Span>,"}, {"sha": "de8ac2c71e818a5f0af1579fc1d8ac1627913fa1", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -80,6 +80,13 @@ impl<'a> TokenTreesReader<'a> {\n                     .struct_span_err(self.token.span, msg);\n                 for &(_, sp) in &self.open_braces {\n                     err.span_label(sp, \"un-closed delimiter\");\n+                    self.unmatched_braces.push(UnmatchedBrace {\n+                        expected_delim: token::DelimToken::Brace,\n+                        found_delim: None,\n+                        found_span: self.token.span,\n+                        unclosed_span: Some(sp),\n+                        candidate_span: None,\n+                    });\n                 }\n \n                 if let Some((delim, _)) = self.open_braces.last() {\n@@ -170,7 +177,7 @@ impl<'a> TokenTreesReader<'a> {\n                             let (tok, _) = self.open_braces.pop().unwrap();\n                             self.unmatched_braces.push(UnmatchedBrace {\n                                 expected_delim: tok,\n-                                found_delim: other,\n+                                found_delim: Some(other),\n                                 found_span: self.token.span,\n                                 unclosed_span: unclosed_delimiter,\n                                 candidate_span: candidate,"}, {"sha": "921c4ed0f0ad33a5c7b01013e4c52c2dfc579171", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -1,7 +1,7 @@\n //! The main parser interface.\n \n use crate::ast;\n-use crate::parse::parser::{Parser, emit_unclosed_delims};\n+use crate::parse::parser::{Parser, emit_unclosed_delims, make_unclosed_delims_error};\n use crate::parse::token::Nonterminal;\n use crate::tokenstream::{self, TokenStream, TokenTree};\n use crate::print::pprust;\n@@ -242,18 +242,9 @@ pub fn maybe_file_to_stream(\n             err.buffer(&mut buffer);\n             // Not using `emit_unclosed_delims` to use `db.buffer`\n             for unmatched in unmatched_braces {\n-                let mut db = sess.span_diagnostic.struct_span_err(unmatched.found_span, &format!(\n-                    \"incorrect close delimiter: `{}`\",\n-                    pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n-                ));\n-                db.span_label(unmatched.found_span, \"incorrect close delimiter\");\n-                if let Some(sp) = unmatched.candidate_span {\n-                    db.span_label(sp, \"close delimiter possibly meant for this\");\n+                if let Some(err) = make_unclosed_delims_error(unmatched, &sess.span_diagnostic) {\n+                    err.buffer(&mut buffer);\n                 }\n-                if let Some(sp) = unmatched.unclosed_span {\n-                    db.span_label(sp, \"un-closed delimiter\");\n-                }\n-                db.buffer(&mut buffer);\n             }\n             Err(buffer)\n         }"}, {"sha": "5dbe4d95a85d685948acd4b1a1049304be89d804", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -27,7 +27,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::ThinVec;\n \n-use errors::{Applicability, DiagnosticId, FatalError};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n use log::debug;\n@@ -1370,20 +1370,29 @@ impl<'a> Parser<'a> {\n     }\n }\n \n+crate fn make_unclosed_delims_error(\n+    unmatched: UnmatchedBrace,\n+    handler: &errors::Handler,\n+) -> Option<DiagnosticBuilder<'_>> {\n+    // `None` here means an `Eof` was found. We already emit those errors elsewhere, we add them to\n+    // `unmatched_braces` only for error recovery in the `Parser`.\n+    let found_delim = unmatched.found_delim?;\n+    let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n+        \"incorrect close delimiter: `{}`\",\n+        pprust::token_kind_to_string(&token::CloseDelim(found_delim)),\n+    ));\n+    err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n+    if let Some(sp) = unmatched.candidate_span {\n+        err.span_label(sp, \"close delimiter possibly meant for this\");\n+    }\n+    if let Some(sp) = unmatched.unclosed_span {\n+        err.span_label(sp, \"un-closed delimiter\");\n+    }\n+    Some(err)\n+}\n+\n pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler: &errors::Handler) {\n-    for unmatched in unclosed_delims.iter() {\n-        let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n-            \"incorrect close delimiter: `{}`\",\n-            pprust::token_kind_to_string(&token::CloseDelim(unmatched.found_delim)),\n-        ));\n-        err.span_label(unmatched.found_span, \"incorrect close delimiter\");\n-        if let Some(sp) = unmatched.candidate_span {\n-            err.span_label(sp, \"close delimiter possibly meant for this\");\n-        }\n-        if let Some(sp) = unmatched.unclosed_span {\n-            err.span_label(sp, \"un-closed delimiter\");\n-        }\n-        err.emit();\n+    for unmatched in unclosed_delims.drain(..) {\n+        make_unclosed_delims_error(unmatched, handler).map(|mut e| e.emit());\n     }\n-    unclosed_delims.clear();\n }"}, {"sha": "be1441d1c3f80dc6cd511d4925ed40a8606da527", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -171,6 +171,12 @@ impl RecoverQPath for Expr {\n     }\n }\n \n+/// Control whether the closing delimiter should be consumed when calling `Parser::consume_block`.\n+crate enum ConsumeClosingDelim {\n+    Yes,\n+    No,\n+}\n+\n impl<'a> Parser<'a> {\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.span_fatal(self.token.span, m)\n@@ -1105,8 +1111,8 @@ impl<'a> Parser<'a> {\n             Ok(x) => x,\n             Err(mut err) => {\n                 err.emit();\n-                // Recover from parse error.\n-                self.consume_block(delim);\n+                // Recover from parse error, callers expect the closing delim to be consumed.\n+                self.consume_block(delim, ConsumeClosingDelim::Yes);\n                 self.mk_expr(lo.to(self.prev_span), ExprKind::Err, ThinVec::new())\n             }\n         }\n@@ -1154,17 +1160,29 @@ impl<'a> Parser<'a> {\n                     delim.to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-                err.emit();\n-                self.expected_tokens.clear();  // reduce errors\n-                Ok(true)\n+                if unmatched.found_delim.is_none() {\n+                    // Encountered `Eof` when lexing blocks. Do not recover here to avoid knockdown\n+                    // errors which would be emitted elsewhere in the parser and let other error\n+                    // recovery consume the rest of the file.\n+                    Err(err)\n+                } else {\n+                    err.emit();\n+                    self.expected_tokens.clear();  // Reduce the number of errors.\n+                    Ok(true)\n+                }\n             }\n             _ => Err(err),\n         }\n     }\n \n     /// Recovers from `pub` keyword in places where it seems _reasonable_ but isn't valid.\n     pub(super) fn eat_bad_pub(&mut self) {\n-        if self.token.is_keyword(kw::Pub) {\n+        // When `unclosed_delims` is populated, it means that the code being parsed is already\n+        // quite malformed, which might mean that, for example, a pub struct definition could be\n+        // parsed as being a trait item, which is invalid and this error would trigger\n+        // unconditionally, resulting in misleading diagnostics. Because of this, we only attempt\n+        // this nice to have recovery for code that is otherwise well formed.\n+        if self.token.is_keyword(kw::Pub) && self.unclosed_delims.is_empty() {\n             match self.parse_visibility(false) {\n                 Ok(vis) => {\n                     self.diagnostic()\n@@ -1422,15 +1440,26 @@ impl<'a> Parser<'a> {\n         Ok(param)\n     }\n \n-    pub(super) fn consume_block(&mut self, delim: token::DelimToken) {\n+    pub(super) fn consume_block(\n+        &mut self,\n+        delim: token::DelimToken,\n+        consume_close: ConsumeClosingDelim,\n+    ) {\n         let mut brace_depth = 0;\n         loop {\n             if self.eat(&token::OpenDelim(delim)) {\n                 brace_depth += 1;\n-            } else if self.eat(&token::CloseDelim(delim)) {\n+            } else if self.check(&token::CloseDelim(delim)) {\n                 if brace_depth == 0 {\n+                    if let ConsumeClosingDelim::Yes = consume_close {\n+                        // Some of the callers of this method expect to be able to parse the\n+                        // closing delimiter themselves, so we leave it alone. Otherwise we advance\n+                        // the parser.\n+                        self.bump();\n+                    }\n                     return;\n                 } else {\n+                    self.bump();\n                     brace_depth -= 1;\n                     continue;\n                 }"}, {"sha": "5b60e7e6dba055cae6f82a4e75f89a7a90cc0d1f", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -1,5 +1,5 @@\n-use super::{Parser, PResult, PathStyle, SemiColonMode, BlockMode};\n-use super::diagnostics::{Error, dummy_arg};\n+use super::{Parser, PResult, PathStyle};\n+use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n use crate::ptr::P;\n@@ -339,7 +339,7 @@ impl<'a> Parser<'a> {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n                 let kw_name = self.recover_first_param();\n-                self.consume_block(token::Paren);\n+                self.consume_block(token::Paren, ConsumeClosingDelim::Yes);\n                 let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n                     self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n                     self.bump();  // `{`\n@@ -357,7 +357,7 @@ impl<'a> Parser<'a> {\n                 let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n                 let mut err = self.diagnostic().struct_span_err(sp, &msg);\n                 if !ambiguous {\n-                    self.consume_block(token::Brace);\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n                     let suggestion = format!(\"add `{}` here to parse `{}` as a public {}\",\n                                              kw,\n                                              ident,\n@@ -672,7 +672,8 @@ impl<'a> Parser<'a> {\n                 Err(mut err) => {\n                     err.emit();\n                     if !at_end {\n-                        self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                        self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                        break;\n                     }\n                 }\n             }\n@@ -861,7 +862,8 @@ impl<'a> Parser<'a> {\n                     Err(mut e) => {\n                         e.emit();\n                         if !at_end {\n-                            self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                            self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                            break;\n                         }\n                     }\n                 }\n@@ -1520,14 +1522,15 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n                 let field = self.parse_struct_decl_field().map_err(|e| {\n-                    self.recover_stmt();\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::No);\n                     recovered = true;\n                     e\n                 });\n                 match field {\n                     Ok(field) => fields.push(field),\n                     Err(mut err) => {\n                         err.emit();\n+                        break;\n                     }\n                 }\n             }"}, {"sha": "b3c1f60b7ebf6f0704f261208667aa3bbaf91c7e", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -1,16 +1,30 @@\n-impl dyn X { //~ ERROR cannot be made into an object\n-//~^ ERROR missing\n+impl dyn A { //~ ERROR missing\n     Y\n }\n \n struct S;\n \n trait X { //~ ERROR missing\n     X() {}\n-    fn xxx() { ### } //~ ERROR missing\n-    //~^ ERROR expected\n-    L = M; //~ ERROR missing\n-    Z = { 2 + 3 }; //~ ERROR expected one of\n+    fn xxx() { ### }\n+    L = M;\n+    Z = { 2 + 3 };\n+    ::Y ();\n+}\n+\n+trait A { //~ ERROR missing\n+    X() {}\n+}\n+trait B {\n+    fn xxx() { ### } //~ ERROR expected\n+}\n+trait C { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+    L = M;\n+}\n+trait D { //~ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+    Z = { 2 + 3 };\n+}\n+trait E {\n     ::Y (); //~ ERROR expected one of\n }\n \n@@ -21,5 +35,5 @@ impl S {\n }\n \n fn main() {\n-    S.hello_method();\n+    S.hello_method(); //~ no method named `hello_method` found for type `S` in the current scope\n }"}, {"sha": "f0baa175d63b7d5bd1a35512de386f0ed284fdba", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -1,70 +1,70 @@\n error: missing `fn`, `type`, or `const` for impl-item declaration\n   --> $DIR/issue-40006.rs:1:13\n    |\n-LL |   impl dyn X {\n+LL |   impl dyn A {\n    |  _____________^\n-LL | |\n LL | |     Y\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:8:10\n+  --> $DIR/issue-40006.rs:7:10\n    |\n LL |   trait X {\n    |  __________^\n LL | |     X() {}\n    | |____^ missing `fn`, `type`, or `const`\n \n+error: missing `fn`, `type`, or `const` for trait-item declaration\n+  --> $DIR/issue-40006.rs:15:10\n+   |\n+LL |   trait A {\n+   |  __________^\n+LL | |     X() {}\n+   | |____^ missing `fn`, `type`, or `const`\n+\n error: expected `[`, found `#`\n-  --> $DIR/issue-40006.rs:10:17\n+  --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:10:21\n+  --> $DIR/issue-40006.rs:21:10\n    |\n-LL |       fn xxx() { ### }\n-   |  _____________________^\n-LL | |\n+LL |   trait C {\n+   |  __________^\n LL | |     L = M;\n    | |____^ missing `fn`, `type`, or `const`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-40006.rs:12:11\n+  --> $DIR/issue-40006.rs:24:10\n    |\n-LL |       L = M;\n-   |  ___________^\n+LL |   trait D {\n+   |  __________^\n LL | |     Z = { 2 + 3 };\n    | |____^ missing `fn`, `type`, or `const`\n \n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n-  --> $DIR/issue-40006.rs:13:18\n-   |\n-LL |     Z = { 2 + 3 };\n-   |                  ^ expected one of 7 possible tokens here\n-\n error: expected one of `!` or `::`, found `(`\n-  --> $DIR/issue-40006.rs:14:9\n+  --> $DIR/issue-40006.rs:28:9\n    |\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::` here\n \n error: missing `fn`, `type`, or `const` for impl-item declaration\n-  --> $DIR/issue-40006.rs:18:8\n+  --> $DIR/issue-40006.rs:32:8\n    |\n LL |     pub hello_method(&self) {\n    |        ^ missing `fn`, `type`, or `const`\n \n-error[E0038]: the trait `X` cannot be made into an object\n-  --> $DIR/issue-40006.rs:1:6\n+error[E0599]: no method named `hello_method` found for type `S` in the current scope\n+  --> $DIR/issue-40006.rs:38:7\n    |\n-LL | impl dyn X {\n-   |      ^^^^^ the trait `X` cannot be made into an object\n+LL | struct S;\n+   | --------- method `hello_method` not found for this\n ...\n-LL |     fn xxx() { ### }\n-   |        --- associated function `xxx` has no `self` parameter\n+LL |     S.hello_method();\n+   |       ^^^^^^^^^^^^ method not found in `S`\n \n error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0038`.\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "1f53a92793236f82808a1b9bcba3cf2c32cb8fcd", "filename": "src/test/ui/issues/issue-60075.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -5,8 +5,7 @@ trait T {\n         let _ = if true {\n         });\n //~^ ERROR expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `;`\n-//~^^ ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n-//~^^^ ERROR 6:11: 6:12: expected identifier, found `;`\n-//~^^^^ ERROR missing `fn`, `type`, or `const` for trait-item declaration\n+//~| ERROR expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n+//~| ERROR expected identifier, found `;`\n         Some(4)\n     }"}, {"sha": "961a546d8d6204aa53a9886ad6aa0015fead95b5", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -19,17 +19,5 @@ error: expected identifier, found `;`\n LL |         });\n    |           ^ expected identifier\n \n-error: missing `fn`, `type`, or `const` for trait-item declaration\n-  --> $DIR/issue-60075.rs:6:12\n-   |\n-LL |           });\n-   |  ____________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |\n-LL | |         Some(4)\n-   | |________^ missing `fn`, `type`, or `const`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "82122ef0b6fd05e8a5027585fde5a13d06d4733d", "filename": "src/test/ui/parser/issue-62973.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62973.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -13,9 +13,11 @@ error: expected one of `,` or `}`, found `{`\n   --> $DIR/issue-62973.rs:6:25\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |                -        ^ expected one of `,` or `}` here\n-   |                |\n-   |                while parsing this struct\n+   |        -       -       -^ expected one of `,` or `}` here\n+   |        |       |       |\n+   |        |       |       help: `}` may belong here\n+   |        |       while parsing this struct\n+   |        unclosed delimiter\n \n error: struct literals are not allowed here\n   --> $DIR/issue-62973.rs:6:16"}, {"sha": "66f43889cec1c05257b8c607d89e07bab95439b0", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,13 @@\n+impl T for () { //~ ERROR `main` function not found\n+//~^ ERROR cannot find trait `T` in this scope\n+\n+fn foo(&self) {}\n+\n+trait T { //~ ERROR expected one of\n+    fn foo(&self);\n+}\n+\n+pub(crate) struct Bar<T>();\n+\n+fn main() {}\n+//~ ERROR this file contains an un-closed delimiter"}, {"sha": "52c00758b37227b7b56f0f8f5effb098d560df50", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,46 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:13:53\n+   |\n+LL | impl T for () {\n+   |               - un-closed delimiter\n+...\n+LL |\n+   |                                                     ^\n+\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `trait`\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:6:1\n+   |\n+LL | impl T for () {\n+   |               - unclosed delimiter\n+...\n+LL | fn foo(&self) {}\n+   |                 -\n+   |                 |\n+   |                 expected one of 10 possible tokens here\n+   |                 help: `}` may belong here\n+LL | \n+LL | trait T {\n+   | ^^^^^ unexpected token\n+\n+error[E0405]: cannot find trait `T` in this scope\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:1:6\n+   |\n+LL | impl T for () {\n+   |      ^ not found in this scope\n+\n+error[E0601]: `main` function not found in crate `missing_close_brace_in_impl_trait`\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:1:1\n+   |\n+LL | / impl T for () {\n+LL | |\n+LL | |\n+LL | | fn foo(&self) {}\n+...  |\n+LL | | fn main() {}\n+LL | |\n+   | |____________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-impl-trait.rs`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0405, E0601.\n+For more information about an error, try `rustc --explain E0405`."}, {"sha": "8f42897914ac5be074d9d5f74ac61fa26c65b432", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,14 @@\n+pub(crate) struct Bar<T> { //~ ERROR `main` function not found\n+  foo: T,\n+\n+trait T { //~ ERROR expected identifier, found keyword `trait`\n+//~^ ERROR expected `:`, found `T`\n+    fn foo(&self);\n+}\n+\n+\n+impl T for Bar<usize> {\n+fn foo(&self) {}\n+}\n+\n+fn main() {} //~ ERROR this file contains an un-closed delimiter"}, {"sha": "e0d5eb90aa1ccecffd5ea6c99ff294f6fc8a07a9", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,41 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-struct.rs:14:66\n+   |\n+LL | pub(crate) struct Bar<T> {\n+   |                          - un-closed delimiter\n+...\n+LL | fn main() {}\n+   |                                                                  ^\n+\n+error: expected identifier, found keyword `trait`\n+  --> $DIR/missing-close-brace-in-struct.rs:4:1\n+   |\n+LL | trait T {\n+   | ^^^^^ expected identifier, found keyword\n+   |\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | r#trait T {\n+   | ^^^^^^^\n+\n+error: expected `:`, found `T`\n+  --> $DIR/missing-close-brace-in-struct.rs:4:7\n+   |\n+LL | trait T {\n+   |       ^ expected `:`\n+\n+error[E0601]: `main` function not found in crate `missing_close_brace_in_struct`\n+  --> $DIR/missing-close-brace-in-struct.rs:1:1\n+   |\n+LL | / pub(crate) struct Bar<T> {\n+LL | |   foo: T,\n+LL | |\n+LL | | trait T {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |_________________________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-struct.rs`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "46b9cab66e96722f6c6af3b507b97f2e15b75857", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,11 @@\n+trait T {\n+//~^ ERROR `main` function not found in crate `missing_close_brace_in_trait`\n+    fn foo(&self);\n+\n+pub(crate) struct Bar<T>(); //~ ERROR expected one of\n+\n+impl T for Bar<usize> {\n+fn foo(&self) {}\n+}\n+\n+fn main() {} //~ ERROR this file contains an un-closed delimiter"}, {"sha": "7de6c1d0cdd958eddc362653444102b50a6c5368", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053a09529a41931a217daecbe879b88386101249/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=053a09529a41931a217daecbe879b88386101249", "patch": "@@ -0,0 +1,39 @@\n+error: this file contains an un-closed delimiter\n+  --> $DIR/missing-close-brace-in-trait.rs:11:66\n+   |\n+LL | trait T {\n+   |         - un-closed delimiter\n+...\n+LL | fn main() {}\n+   |                                                                  ^\n+\n+error: expected one of `async`, `const`, `extern`, `fn`, `type`, `unsafe`, or `}`, found `pub`\n+  --> $DIR/missing-close-brace-in-trait.rs:5:1\n+   |\n+LL | trait T {\n+   |         - unclosed delimiter\n+LL |\n+LL |     fn foo(&self);\n+   |                   -\n+   |                   |\n+   |                   expected one of 7 possible tokens here\n+   |                   help: `}` may belong here\n+LL | \n+LL | pub(crate) struct Bar<T>();\n+   | ^^^ unexpected token\n+\n+error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n+  --> $DIR/missing-close-brace-in-trait.rs:1:1\n+   |\n+LL | / trait T {\n+LL | |\n+LL | |     fn foo(&self);\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |_________________________________________________________________^ consider adding a `main` function to `$DIR/missing-close-brace-in-trait.rs`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}]}