{"sha": "bdb206f2855cc6f7d3d79379633f7429b7327fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjIwNmYyODU1Y2M2ZjdkM2Q3OTM3OTYzM2Y3NDI5YjczMjdmZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-15T02:20:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-15T23:20:34Z"}, "message": "rustc: Parse labeled loop, break, and again", "tree": {"sha": "05764770b6b2729780bb1289d3c2db55d1cc55c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05764770b6b2729780bb1289d3c2db55d1cc55c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb206f2855cc6f7d3d79379633f7429b7327fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb206f2855cc6f7d3d79379633f7429b7327fec", "html_url": "https://github.com/rust-lang/rust/commit/bdb206f2855cc6f7d3d79379633f7429b7327fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb206f2855cc6f7d3d79379633f7429b7327fec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54db12155257787797cd9c7eaf06a215ff516e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54db12155257787797cd9c7eaf06a215ff516e5", "html_url": "https://github.com/rust-lang/rust/commit/d54db12155257787797cd9c7eaf06a215ff516e5"}], "stats": {"total": 205, "additions": 152, "deletions": 53}, "files": [{"sha": "6ceb788ac4cf54cf4079d169252940d8193770cd", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -41,8 +41,8 @@ fn common_exprs() -> ~[ast::expr] {\n         { node: l, span: ast_util::dummy_sp() }\n     }\n \n-    ~[dse(ast::expr_break),\n-     dse(ast::expr_again),\n+    ~[dse(ast::expr_break(option::none)),\n+     dse(ast::expr_again(option::none)),\n      dse(ast::expr_fail(option::none)),\n      dse(ast::expr_fail(option::some(\n          @dse(ast::expr_lit(@dsl(ast::lit_str(@~\"boo\"))))))),"}, {"sha": "a09bd073c44ecac13ddfd3b437e98ce05dc2b404", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -89,7 +89,8 @@ enum def {\n               node_id /* expr node that creates the closure */),\n     def_class(def_id, bool /* has constructor */),\n     def_typaram_binder(node_id), /* class, impl or trait that has ty params */\n-    def_region(node_id)\n+    def_region(node_id),\n+    def_label(node_id)\n }\n \n // The set of meta_items that define the compilation environment of the crate,\n@@ -316,7 +317,7 @@ enum expr_ {\n     /* Conditionless loop (can be exited with break, cont, ret, or fail)\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n-    expr_loop(blk),\n+    expr_loop(blk, option<ident>),\n     expr_match(@expr, ~[arm], alt_mode),\n     expr_fn(proto, fn_decl, blk, capture_clause),\n     expr_fn_block(fn_decl, blk, capture_clause),\n@@ -339,8 +340,8 @@ enum expr_ {\n     expr_path(@path),\n     expr_addr_of(mutability, @expr),\n     expr_fail(option<@expr>),\n-    expr_break,\n-    expr_again,\n+    expr_break(option<ident>),\n+    expr_again(option<ident>),\n     expr_ret(option<@expr>),\n     expr_log(int, @expr, @expr),\n "}, {"sha": "4a6f8b1e77ab2c98fd8e6865c2b9f3705253f6e6", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -61,7 +61,7 @@ pure fn def_id_of_def(d: def) -> def_id {\n       }\n       def_arg(id, _) | def_local(id, _) | def_self(id) |\n       def_upvar(id, _, _) | def_binding(id, _) | def_region(id)\n-      | def_typaram_binder(id) => {\n+      | def_typaram_binder(id) | def_label(id) => {\n         local_def(id)\n       }\n "}, {"sha": "5bd35490f0e905967bdbe093768f348f3f7cb7bb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -448,8 +448,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_while(cond, body) => {\n             expr_while(fld.fold_expr(cond), fld.fold_block(body))\n           }\n-          expr_loop(body) => {\n-              expr_loop(fld.fold_block(body))\n+          expr_loop(body, opt_ident) => {\n+              expr_loop(fld.fold_block(body),\n+                        option::map(opt_ident, |x| fld.fold_ident(x)))\n           }\n           expr_match(expr, arms, mode) => {\n             expr_match(fld.fold_expr(expr),\n@@ -492,7 +493,10 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           }\n           expr_path(pth) => expr_path(fld.fold_path(pth)),\n           expr_fail(e) => expr_fail(option::map(e, |x| fld.fold_expr(x))),\n-          expr_break | expr_again => copy e,\n+          expr_break(opt_ident) =>\n+            expr_break(option::map(opt_ident, |x| fld.fold_ident(x))),\n+          expr_again(opt_ident) =>\n+            expr_again(option::map(opt_ident, |x| fld.fold_ident(x))),\n           expr_ret(e) => expr_ret(option::map(e, |x| fld.fold_expr(x))),\n           expr_log(i, lv, e) => expr_log(i, fld.fold_expr(lv),\n                                          fld.fold_expr(e)),"}, {"sha": "1fd9dc2c23c7a639b3d6c57068ef353e5e8a9515", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -7,7 +7,7 @@ import ast_util::operator_prec;\n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     match e.node {\n       ast::expr_if(_, _, _) | ast::expr_match(_, _, _) | ast::expr_block(_)\n-      | ast::expr_while(_, _) | ast::expr_loop(_)\n+      | ast::expr_while(_, _) | ast::expr_loop(_, _)\n       | ast::expr_call(_, _, true) => false,\n       _ => true\n     }"}, {"sha": "977e75362f873cf03953d79da9237637f4ba0199", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -939,10 +939,18 @@ class parser {\n                 ex = expr_ret(some(e));\n             } else { ex = expr_ret(none); }\n         } else if self.eat_keyword(~\"break\") {\n-            ex = expr_break;\n+            if is_ident(self.token) {\n+                ex = expr_break(some(self.parse_ident()));\n+            } else {\n+                ex = expr_break(none);\n+            }\n             hi = self.span.hi;\n         } else if self.eat_keyword(~\"again\") {\n-            ex = expr_again;\n+            if is_ident(self.token) {\n+                ex = expr_again(some(self.parse_ident()));\n+            } else {\n+                ex = expr_again(none);\n+            }\n             hi = self.span.hi;\n         } else if self.eat_keyword(~\"copy\") {\n             let e = self.parse_expr();\n@@ -1585,10 +1593,18 @@ class parser {\n     }\n \n     fn parse_loop_expr() -> @expr {\n+        let opt_ident;\n+        if is_ident(self.token) {\n+            opt_ident = some(self.parse_ident());\n+            self.expect(token::COLON);\n+        } else {\n+            opt_ident = none;\n+        }\n+\n         let lo = self.last_span.lo;\n         let body = self.parse_block_no_value();\n         let mut hi = body.span.hi;\n-        return self.mk_expr(lo, hi, expr_loop(body));\n+        return self.mk_expr(lo, hi, expr_loop(body, opt_ident));\n     }\n \n     // For distingishing between record literals and blocks"}, {"sha": "49ded036e045e8b8aeb45a925ac9f8deabfd40dd", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -1142,9 +1142,10 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::expr_loop(blk) => {\n+      ast::expr_loop(blk, opt_ident) => {\n         head(s, ~\"loop\");\n         space(s.s);\n+        option::iter(opt_ident, |ident| word_space(s, *ident));\n         print_block(s, blk);\n       }\n       ast::expr_match(expr, arms, mode) => {\n@@ -1310,8 +1311,16 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n           _ => ()\n         }\n       }\n-      ast::expr_break => word(s.s, ~\"break\"),\n-      ast::expr_again => word(s.s, ~\"again\"),\n+      ast::expr_break(opt_ident) => {\n+        word(s.s, ~\"break\");\n+        space(s.s);\n+        option::iter(opt_ident, |ident| word_space(s, *ident));\n+      }\n+      ast::expr_again(opt_ident) => {\n+        word(s.s, ~\"again\");\n+        space(s.s);\n+        option::iter(opt_ident, |ident| word_space(s, *ident));\n+      }\n       ast::expr_ret(result) => {\n         word(s.s, ~\"return\");\n         match result {"}, {"sha": "93d253d2163987bf593266fb65d8258828dfc4de", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -422,7 +422,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         visit_expr_opt(eo, e, v);\n       }\n       expr_while(x, b) => { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n-      expr_loop(b) => v.visit_block(b, e, v),\n+      expr_loop(b, _) => v.visit_block(b, e, v),\n       expr_match(x, arms, _) => {\n         v.visit_expr(x, e, v);\n         for arms.each |a| { v.visit_arm(a, e, v); }\n@@ -452,8 +452,8 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       expr_index(a, b) => { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n       expr_path(p) => visit_path(p, e, v),\n       expr_fail(eo) => visit_expr_opt(eo, e, v),\n-      expr_break => (),\n-      expr_again => (),\n+      expr_break(_) => (),\n+      expr_again(_) => (),\n       expr_ret(eo) => visit_expr_opt(eo, e, v),\n       expr_log(_, lv, x) => {\n         v.visit_expr(lv, e, v);"}, {"sha": "0f9f4db36e7eb7b12cbbb7b9f315d7716af1c728", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -374,6 +374,7 @@ impl ast::def: tr {\n           ast::def_typaram_binder(nid) => {\n             ast::def_typaram_binder(xcx.tr_id(nid))\n           }\n+          ast::def_label(nid) => ast::def_label(xcx.tr_id(nid))\n         }\n     }\n }"}, {"sha": "83dc54e5f8610ec6d3f059867778eef725eca559", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -227,7 +227,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n       }\n \n       // see explanation attached to the `root_ub` field:\n-      ast::expr_loop(body) => {\n+      ast::expr_loop(body, _) => {\n         self.root_ub = body.node.id;\n         visit::visit_expr(ex, self, vt);\n       }"}, {"sha": "1fef670c0ba1c2f3439892ab7c69e7a6f8ae5ddb", "filename": "src/rustc/middle/check_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_loop.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -15,7 +15,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                 v.visit_expr(e, cx, v);\n                 v.visit_block(b, {in_loop: true with cx}, v);\n               }\n-              expr_loop(b) => {\n+              expr_loop(b, _) => {\n                 v.visit_block(b, {in_loop: true with cx}, v);\n               }\n               expr_fn(_, _, _, _) => {\n@@ -29,12 +29,12 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n                                                                       e)));\n                 v.visit_block(b, {in_loop: true, can_ret: blk}, v);\n               }\n-              expr_break => {\n+              expr_break(_) => {\n                 if !cx.in_loop {\n                     tcx.sess.span_err(e.span, ~\"`break` outside of loop\");\n                 }\n               }\n-              expr_again => {\n+              expr_again(_) => {\n                 if !cx.in_loop {\n                     tcx.sess.span_err(e.span, ~\"`again` outside of loop\");\n                 }"}, {"sha": "c89095423c6b5cc48cff736844e7465079176162", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -469,7 +469,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n       expr_unary(*) | expr_fail(*) |\n-      expr_break | expr_again | expr_lit(_) | expr_ret(*) |\n+      expr_break(_) | expr_again(_) | expr_lit(_) | expr_ret(*) |\n       expr_block(*) | expr_move(*) | expr_unary_move(*) | expr_assign(*) |\n       expr_swap(*) | expr_assign_op(*) | expr_mac(*) | expr_struct(*) |\n       expr_repeat(*) => {\n@@ -962,7 +962,7 @@ class liveness {\n             self.propagate_through_loop(expr, some(cond), blk, succ)\n           }\n \n-          expr_loop(blk) => {\n+          expr_loop(blk, _) => {\n             self.propagate_through_loop(expr, none, blk, succ)\n           }\n \n@@ -1000,21 +1000,29 @@ class liveness {\n             self.propagate_through_opt_expr(o_e, self.s.exit_ln)\n           }\n \n-          expr_break => {\n+          expr_break(opt_label) => {\n             if !self.break_ln.is_valid() {\n                 self.tcx.sess.span_bug(\n                     expr.span, ~\"break with invalid break_ln\");\n             }\n \n+            if opt_label.is_some() {\n+                self.tcx.sess.span_unimpl(expr.span, ~\"labeled break\");\n+            }\n+\n             self.break_ln\n           }\n \n-          expr_again => {\n+          expr_again(opt_label) => {\n             if !self.cont_ln.is_valid() {\n                 self.tcx.sess.span_bug(\n                     expr.span, ~\"cont with invalid cont_ln\");\n             }\n \n+            if opt_label.is_some() {\n+                self.tcx.sess.span_unimpl(expr.span, ~\"labeled again\");\n+            }\n+\n             self.cont_ln\n           }\n \n@@ -1457,7 +1465,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_assert(*) | expr_copy(*) |\n       expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_fail(*) |\n-      expr_ret(*) | expr_break | expr_again | expr_lit(_) |\n+      expr_ret(*) | expr_break(*) | expr_again(*) | expr_lit(_) |\n       expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) |\n       expr_struct(*) | expr_repeat(*) => {\n         visit::visit_expr(expr, self, vt);"}, {"sha": "5ffc36f4160a2d74358335d6f96b40178925f5ac", "filename": "src/rustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmem_categorization.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -317,8 +317,8 @@ impl &mem_categorization_ctxt {\n           ast::expr_if(*) | ast::expr_log(*) |\n           ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_match(*) |\n-          ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n-          ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) |\n+          ast::expr_lit(*) | ast::expr_break(*) | ast::expr_mac(*) |\n+          ast::expr_again(*) | ast::expr_rec(*) | ast::expr_struct(*) |\n           ast::expr_unary_move(*) | ast::expr_repeat(*) => {\n             return self.cat_rvalue(expr, expr_ty);\n           }\n@@ -335,7 +335,8 @@ impl &mem_categorization_ctxt {\n           ast::def_use(_) | ast::def_variant(*) |\n           ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(*) | ast::def_class(*) |\n-          ast::def_typaram_binder(*) | ast::def_region(_) => {\n+          ast::def_typaram_binder(*) | ast::def_region(_) |\n+          ast::def_label(_) => {\n             @{id:id, span:span,\n               cat:cat_special(sk_static_item), lp:none,\n               mutbl:m_imm, ty:expr_ty}"}, {"sha": "0262efca156d26d7fbc127f92917770fbdd684a6", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -14,17 +14,18 @@ import syntax::ast::{bound_trait, binding_mode,\n                      capture_clause, class_ctor, class_dtor};\n import syntax::ast::{class_member, class_method, crate, crate_num, decl_item};\n import syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n-import syntax::ast::{def_foreign_mod, def_id, def_local, def_mod};\n+import syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n import syntax::ast::{def_typaram_binder, def_static_method};\n import syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n import syntax::ast::{expr_fn_block, expr_index, expr_path};\n import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n import syntax::ast::{def_upvar, def_use, def_variant, div, eq};\n-import syntax::ast::{enum_variant_kind, expr, expr_assign_op, expr_binary};\n-import syntax::ast::{expr_cast, expr_field, expr_fn, expr_fn_block};\n-import syntax::ast::{expr_index, expr_path, expr_struct, expr_unary, fn_decl};\n+import syntax::ast::{enum_variant_kind, expr, expr_again, expr_assign_op};\n+import syntax::ast::{expr_binary, expr_break, expr_cast, expr_field, expr_fn};\n+import syntax::ast::{expr_fn_block, expr_index, expr_loop};\n+import syntax::ast::{expr_path, expr_struct, expr_unary, fn_decl};\n import syntax::ast::{foreign_item, foreign_item_fn, ge, gt, ident, trait_ref};\n import syntax::ast::{impure_fn, instance_var, item, item_class, item_const};\n import syntax::ast::{item_enum, item_fn, item_mac, item_foreign_mod};\n@@ -310,10 +311,7 @@ fn atom_hashmap<V:copy>() -> hashmap<Atom,V> {\n     hashmap::<Atom,V>(uint::hash, uint::eq)\n }\n \n-/**\n- * One local scope. In Rust, local scopes can only contain value bindings.\n- * Therefore, we don't have to worry about the other namespaces here.\n- */\n+/// One local scope.\n class Rib {\n     let bindings: hashmap<Atom,def_like>;\n     let kind: RibKind;\n@@ -676,12 +674,14 @@ class Resolver {\n \n     // The current set of local scopes, for values.\n     // XXX: Reuse ribs to avoid allocation.\n-\n     let value_ribs: @DVec<@Rib>;\n \n     // The current set of local scopes, for types.\n     let type_ribs: @DVec<@Rib>;\n \n+    // The current set of local scopes, for labels.\n+    let label_ribs: @DVec<@Rib>;\n+\n     // Whether the current context is an X-ray context. An X-ray context is\n     // allowed to access private names of any module.\n     let mut xray_context: XrayFlag;\n@@ -728,6 +728,7 @@ class Resolver {\n         self.current_module = (*self.graph_root).get_module();\n         self.value_ribs = @dvec();\n         self.type_ribs = @dvec();\n+        self.label_ribs = @dvec();\n \n         self.xray_context = NoXray;\n         self.current_trait_refs = none;\n@@ -1486,7 +1487,7 @@ class Resolver {\n           def_self(*) | def_arg(*) | def_local(*) |\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n-          def_typaram_binder(*) => {\n+          def_typaram_binder(*) | def_label(*) => {\n             fail fmt!(\"didn't expect `%?`\", def);\n           }\n         }\n@@ -3305,12 +3306,18 @@ class Resolver {\n                 (*self.type_ribs).pop();\n             }\n \n-            NoTypeParameters =>{\n+            NoTypeParameters => {\n                 // Nothing to do.\n             }\n         }\n     }\n \n+    fn with_label_rib(f: fn()) {\n+        (*self.label_ribs).push(@Rib(NormalRibKind));\n+        f();\n+        (*self.label_ribs).pop();\n+    }\n+\n     fn resolve_function(rib_kind: RibKind,\n                         optional_declaration: option<@fn_decl>,\n                         type_parameters: TypeParameters,\n@@ -3348,6 +3355,10 @@ class Resolver {\n         let function_value_rib = @Rib(rib_kind);\n         (*self.value_ribs).push(function_value_rib);\n \n+        // Create a label rib for the function.\n+        let function_label_rib = @Rib(rib_kind);\n+        (*self.label_ribs).push(function_label_rib);\n+\n         // If this function has type parameters, add them now.\n         do self.with_type_parameter_rib(type_parameters) {\n             // Resolve the type parameters.\n@@ -3400,6 +3411,7 @@ class Resolver {\n             debug!{\"(resolving function) leaving function\"};\n         }\n \n+        (*self.label_ribs).pop();\n         (*self.value_ribs).pop();\n     }\n \n@@ -4428,6 +4440,33 @@ class Resolver {\n                 visit_expr(expr, (), visitor);\n             }\n \n+            expr_loop(_, some(label)) => {\n+                do self.with_label_rib {\n+                    let atom = self.atom_table.intern(label);\n+                    let def_like = dl_def(def_label(expr.id));\n+                    self.label_ribs.last().bindings.insert(atom, def_like);\n+\n+                    visit_expr(expr, (), visitor);\n+                }\n+            }\n+\n+            expr_break(some(label)) | expr_again(some(label)) => {\n+                let atom = self.atom_table.intern(label);\n+                match self.search_ribs(self.label_ribs, atom, expr.span,\n+                                       DontAllowCapturingSelf) {\n+                    none =>\n+                        self.session.span_err(expr.span,\n+                                              fmt!(\"use of undeclared label \\\n+                                                   `%s`\", *label)),\n+                    some(dl_def(def @ def_label(id))) =>\n+                        self.record_def(expr.id, def),\n+                    some(_) =>\n+                        self.session.span_bug(expr.span,\n+                                              ~\"label wasn't mapped to a \\\n+                                                label def!\")\n+                }\n+            }\n+\n             _ => {\n                 visit_expr(expr, (), visitor);\n             }"}, {"sha": "487435f2ef2cb1e29c057279934521ed0ad4a659", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -3852,12 +3852,18 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           }\n \n           // These return nothing\n-          ast::expr_break => {\n+          ast::expr_break(label_opt) => {\n             assert dest == ignore;\n+            if label_opt.is_some() {\n+                bcx.tcx().sess.span_unimpl(e.span, ~\"labeled break\");\n+            }\n             return trans_break(bcx);\n           }\n-          ast::expr_again => {\n+          ast::expr_again(label_opt) => {\n             assert dest == ignore;\n+            if label_opt.is_some() {\n+                bcx.tcx().sess.span_unimpl(e.span, ~\"labeled again\");\n+            }\n             return trans_cont(bcx);\n           }\n           ast::expr_ret(ex) => {\n@@ -3880,7 +3886,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n             assert dest == ignore;\n             return trans_while(bcx, cond, body);\n           }\n-          ast::expr_loop(body) => {\n+          ast::expr_loop(body, _) => {\n             assert dest == ignore;\n             return trans_loop(bcx, body);\n           }"}, {"sha": "a53d9b3a3bac4ae3b8c34f5c0e7cede5f4dc3795", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -253,10 +253,10 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n         })\n       }\n       expr_match(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n-      expr_while(_, _) | expr_fail(_) | expr_break | expr_again |\n+      expr_while(_, _) | expr_fail(_) | expr_break(_) | expr_again(_) |\n       expr_unary(_, _) | expr_lit(_) | expr_assert(_) |\n       expr_mac(_) | expr_addr_of(_, _) |\n-      expr_ret(_) | expr_loop(_) |\n+      expr_ret(_) | expr_loop(_, _) |\n       expr_loop_body(_) | expr_do_body(_) => ()\n     }\n }"}, {"sha": "64ebcd5fbbbb79b3f6274591869747d4dd8685ef", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -1466,8 +1466,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         }\n         fcx.write_bot(id);\n       }\n-      ast::expr_break => { fcx.write_bot(id); bot = true; }\n-      ast::expr_again => { fcx.write_bot(id); bot = true; }\n+      ast::expr_break(_) => { fcx.write_bot(id); bot = true; }\n+      ast::expr_again(_) => { fcx.write_bot(id); bot = true; }\n       ast::expr_ret(expr_opt) => {\n         bot = true;\n         let ret_ty = match fcx.indirect_ret_ty {\n@@ -1518,7 +1518,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         check_block_no_value(fcx, body);\n         fcx.write_ty(id, ty::mk_nil(tcx));\n       }\n-      ast::expr_loop(body) => {\n+      ast::expr_loop(body, _) => {\n         check_block_no_value(fcx, body);\n         fcx.write_ty(id, ty::mk_nil(tcx));\n         bot = !may_break(body);\n@@ -2296,6 +2296,9 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         fcx.ccx.tcx.sess.span_fatal(sp, ~\"expected value but found type \\\n                                           parameter\");\n       }\n+      ast::def_label(*) => {\n+        fcx.ccx.tcx.sess.span_fatal(sp, ~\"expected value but found label\");\n+      }\n     }\n }\n "}, {"sha": "b4195d0c04c013b285f728daa9c24cdd140d5263", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -59,7 +59,7 @@ fn loop_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n fn has_nonlocal_exits(b: ast::blk) -> bool {\n     do loop_query(b) |e| {\n         match e {\n-          ast::expr_break | ast::expr_again => true,\n+          ast::expr_break(_) | ast::expr_again(_) => true,\n           _ => false\n         }\n     }\n@@ -68,7 +68,7 @@ fn has_nonlocal_exits(b: ast::blk) -> bool {\n fn may_break(b: ast::blk) -> bool {\n     do loop_query(b) |e| {\n         match e {\n-          ast::expr_break => true,\n+          ast::expr_break(_) => true,\n           _ => false\n         }\n     }"}, {"sha": "1934540179a038c12b90564b1ac35b6538b6fcc7", "filename": "src/test/run-pass/labeled-break.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb206f2855cc6f7d3d79379633f7429b7327fec/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=bdb206f2855cc6f7d3d79379633f7429b7327fec", "patch": "@@ -0,0 +1,11 @@\n+// xfail-fast\n+// xfail-test\n+\n+fn main() {\n+    loop foo: {\n+        loop {\n+            break foo;\n+        }\n+    }\n+}\n+"}]}