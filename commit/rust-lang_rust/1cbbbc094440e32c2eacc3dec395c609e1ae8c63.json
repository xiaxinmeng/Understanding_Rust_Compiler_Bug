{"sha": "1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYmJiYzA5NDQ0MGUzMmMyZWFjYzNkZWMzOTVjNjA5ZTFhZThjNjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-08T17:58:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-08T17:58:46Z"}, "message": "Rollup merge of #47233 - dotdash:cleanup_llvm, r=alexcrichton\n\nRemove unused LLVM related code\n\nTicks a few more boxes on #46437", "tree": {"sha": "4d748a4b7590005f7eb226245fe93a3c253fc507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d748a4b7590005f7eb226245fe93a3c253fc507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "html_url": "https://github.com/rust-lang/rust/commit/1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6f440920a1b399edde29340fc21a3e32d42078", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6f440920a1b399edde29340fc21a3e32d42078", "html_url": "https://github.com/rust-lang/rust/commit/4a6f440920a1b399edde29340fc21a3e32d42078"}, {"sha": "907855fe885a3ea5b35179b54a0f19e0616b4e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/907855fe885a3ea5b35179b54a0f19e0616b4e7d", "html_url": "https://github.com/rust-lang/rust/commit/907855fe885a3ea5b35179b54a0f19e0616b4e7d"}], "stats": {"total": 59, "additions": 1, "deletions": 58}, "files": [{"sha": "5e470e8d86eac218ab3318ea90c6935bd0cb293c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -1084,8 +1084,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"omit landing pads for unwinding\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n-    debug_llvm: bool = (false, parse_bool, [UNTRACKED],\n-        \"enable debug output from LLVM\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather metadata statistics\"),\n     print_link_args: bool = (false, parse_bool, [UNTRACKED],\n@@ -2747,8 +2745,6 @@ mod tests {\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.borrowck_stats = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-        opts.debugging_opts.debug_llvm = true;\n-        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.meta_stats = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n         opts.debugging_opts.print_link_args = true;"}, {"sha": "237656eb43c69d3d0001e4f9e29ed6698c5e0d49", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -167,7 +167,6 @@ mod rustc_trans {\n     pub use rustc_trans_utils::trans_crate::TranslatedCrate as CrateTranslation;\n \n     pub fn init(_sess: &Session) {}\n-    pub fn enable_llvm_debug() {}\n     pub fn print_version() {}\n     pub fn print_passes() {}\n     pub fn print(_req: PrintRequest, _sess: &Session) {}\n@@ -205,10 +204,6 @@ pub fn run_compiler<'a>(args: &[String],\n \n     let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n \n-    if sopts.debugging_opts.debug_llvm {\n-        rustc_trans::enable_llvm_debug();\n-    }\n-\n     let descriptions = diagnostics_registry();\n \n     do_or_return!(callbacks.early_callback(&matches,"}, {"sha": "2cfb151ae85da6bc41bde3192d8fd50cd453cfae", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -1315,9 +1315,6 @@ extern \"C\" {\n                              ElementCount: c_uint,\n                              Packed: Bool);\n \n-    /// Enables LLVM debug output.\n-    pub fn LLVMRustSetDebug(Enabled: c_int);\n-\n     /// Prepares inline assembly.\n     pub fn LLVMRustInlineAsm(Ty: TypeRef,\n                              AsmString: *const c_char,\n@@ -1610,7 +1607,6 @@ extern \"C\" {\n     pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *const c_char);\n     pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef, AddLifetimes: bool);\n     pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef, bc: *const c_char, len: size_t) -> bool;\n-    pub fn LLVMRustLinkInParsedExternalBitcode(M: ModuleRef, M: ModuleRef) -> bool;\n     pub fn LLVMRustRunRestrictionPass(M: ModuleRef, syms: *const *const c_char, len: size_t);\n     pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);\n \n@@ -1646,8 +1642,6 @@ extern \"C\" {\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n     pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n-    pub fn LLVMRustWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n-\n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: ContextRef,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);"}, {"sha": "c75a026a0f8b9465740cda6f78dbcf7aecb5a1fd", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -296,11 +296,6 @@ pub unsafe fn twine_to_string(tr: TwineRef) -> String {\n     build_string(|s| LLVMRustWriteTwineToString(tr, s)).expect(\"got a non-UTF8 Twine from LLVM\")\n }\n \n-pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n-    build_string(|s| LLVMRustWriteDebugLocToString(c, tr, s))\n-        .expect(\"got a non-UTF8 DebugLoc from LLVM\")\n-}\n-\n pub fn initialize_available_targets() {\n     macro_rules! init_target(\n         ($cfg:meta, $($method:ident),*) => { {"}, {"sha": "fd6cd5c371d9781fc691e92cd0e9e734a31a38d3", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -69,7 +69,7 @@ pub use base::trans_crate;\n use back::bytecode::RLIB_BYTECODE_EXTENSION;\n \n pub use metadata::LlvmMetadataLoader;\n-pub use llvm_util::{init, target_features, print_version, print_passes, print, enable_llvm_debug};\n+pub use llvm_util::{init, target_features, print_version, print_passes, print};\n \n use std::any::Any;\n use std::path::PathBuf;"}, {"sha": "b3d0b574d1d432bd08f9e7f7101564b9baf78bd1", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -140,7 +140,3 @@ pub fn print(req: PrintRequest, sess: &Session) {\n         }\n     }\n }\n-\n-pub fn enable_llvm_debug() {\n-    unsafe { llvm::LLVMRustSetDebug(1); }\n-}"}, {"sha": "95130d596e165b05498143c96feb0805d7dc78ba", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -384,12 +384,6 @@ LLVMRustBuildAtomicFence(LLVMBuilderRef B, LLVMAtomicOrdering Order,\n   return wrap(unwrap(B)->CreateFence(fromRust(Order), fromRust(Scope)));\n }\n \n-extern \"C\" void LLVMRustSetDebug(int Enabled) {\n-#ifndef NDEBUG\n-  DebugFlag = Enabled;\n-#endif\n-}\n-\n enum class LLVMRustAsmDialect {\n   Other,\n   Att,\n@@ -933,23 +927,6 @@ extern \"C\" bool LLVMRustLinkInExternalBitcode(LLVMModuleRef DstRef, char *BC,\n   return true;\n }\n \n-extern \"C\" bool LLVMRustLinkInParsedExternalBitcode(\n-    LLVMModuleRef DstRef, LLVMModuleRef SrcRef) {\n-#if LLVM_VERSION_GE(4, 0)\n-  Module *Dst = unwrap(DstRef);\n-  std::unique_ptr<Module> Src(unwrap(SrcRef));\n-\n-  if (Linker::linkModules(*Dst, std::move(Src))) {\n-    LLVMRustSetLastError(\"failed to link modules\");\n-    return false;\n-  }\n-  return true;\n-#else\n-  LLVMRustSetLastError(\"can't link parsed modules on this LLVM\");\n-  return false;\n-#endif\n-}\n-\n // Note that the two following functions look quite similar to the\n // LLVMGetSectionName function. Sadly, it appears that this function only\n // returns a char* pointer, which isn't guaranteed to be null-terminated. The\n@@ -981,7 +958,6 @@ extern \"C\" LLVMTypeRef LLVMRustArrayType(LLVMTypeRef ElementTy,\n }\n \n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(Twine, LLVMTwineRef)\n-DEFINE_SIMPLE_CONVERSION_FUNCTIONS(DebugLoc, LLVMDebugLocRef)\n \n extern \"C\" void LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef Str) {\n   RawRustStringOstream OS(Str);\n@@ -1130,13 +1106,6 @@ extern \"C\" LLVMTypeKind LLVMRustGetTypeKind(LLVMTypeRef Ty) {\n   report_fatal_error(\"Unhandled TypeID.\");\n }\n \n-extern \"C\" void LLVMRustWriteDebugLocToString(LLVMContextRef C,\n-                                              LLVMDebugLocRef DL,\n-                                              RustStringRef Str) {\n-  RawRustStringOstream OS(Str);\n-  unwrap(DL)->print(OS);\n-}\n-\n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n \n extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler("}, {"sha": "f4bd78147f6316ed0d0e4c6330c68b68291a5642", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/1cbbbc094440e32c2eacc3dec395c609e1ae8c63/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=1cbbbc094440e32c2eacc3dec395c609e1ae8c63", "patch": "@@ -103,9 +103,7 @@ enum LLVMRustAttribute {\n \n typedef struct OpaqueRustString *RustStringRef;\n typedef struct LLVMOpaqueTwine *LLVMTwineRef;\n-typedef struct LLVMOpaqueDebugLoc *LLVMDebugLocRef;\n typedef struct LLVMOpaqueSMDiagnostic *LLVMSMDiagnosticRef;\n-typedef struct LLVMOpaqueRustJITMemoryManager *LLVMRustJITMemoryManagerRef;\n \n extern \"C\" void LLVMRustStringWriteImpl(RustStringRef Str, const char *Ptr,\n                                         size_t Size);"}]}