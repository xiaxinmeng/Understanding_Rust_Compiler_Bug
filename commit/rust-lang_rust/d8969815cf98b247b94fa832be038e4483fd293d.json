{"sha": "d8969815cf98b247b94fa832be038e4483fd293d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTY5ODE1Y2Y5OGIyNDdiOTRmYTgzMmJlMDM4ZTQ0ODNmZDI5M2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-17T16:13:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:49:52Z"}, "message": "comment wf more", "tree": {"sha": "e2aed0eead5ceeef08c9cc84a5a50c249e859612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2aed0eead5ceeef08c9cc84a5a50c249e859612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8969815cf98b247b94fa832be038e4483fd293d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8969815cf98b247b94fa832be038e4483fd293d", "html_url": "https://github.com/rust-lang/rust/commit/d8969815cf98b247b94fa832be038e4483fd293d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8969815cf98b247b94fa832be038e4483fd293d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27bedfa36bda9ec75751b0f0b5dee782108b56d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/27bedfa36bda9ec75751b0f0b5dee782108b56d3", "html_url": "https://github.com/rust-lang/rust/commit/27bedfa36bda9ec75751b0f0b5dee782108b56d3"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "2dd694501ed61f57862c602cad54cd2589ac9cc2", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d8969815cf98b247b94fa832be038e4483fd293d/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8969815cf98b247b94fa832be038e4483fd293d/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=d8969815cf98b247b94fa832be038e4483fd293d", "patch": "@@ -337,24 +337,36 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 }\n \n                 ty::TyGenerator(..) => {\n-                    // the types in a closure or generator are always the types of\n-                    // local variables (or possibly references to local\n-                    // variables), we'll walk those.\n-                    //\n-                    // (Though, local variables are probably not\n-                    // needed, as they are separately checked w/r/t\n-                    // WFedness.)\n+                    // Walk ALL the types in the generator: this will\n+                    // include the upvar types as well as the yield\n+                    // type. Note that this is mildly distinct from\n+                    // the closure case, where we have to be careful\n+                    // about the signature of the closure. We don't\n+                    // have the problem of implied bounds here since\n+                    // generators don't take arguments.\n                 }\n \n                 ty::TyClosure(def_id, substs) => {\n-                    // Just check the upvar types for WF. This is\n-                    // needed because we capture the signature and it\n-                    // may not be WF without the implied\n-                    // bounds. Consider a closure like `|x: &'a T|` --\n-                    // it may be that `T: 'a` is not known to hold in\n-                    // the creator's context (and indeed the closure\n-                    // may not be invoked by its creator, but rather\n-                    // turned to someone who *can* verify that).\n+                    // Only check the upvar types for WF, not the rest\n+                    // of the types within. This is needed because we\n+                    // capture the signature and it may not be WF\n+                    // without the implied bounds. Consider a closure\n+                    // like `|x: &'a T|` -- it may be that `T: 'a` is\n+                    // not known to hold in the creator's context (and\n+                    // indeed the closure may not be invoked by its\n+                    // creator, but rather turned to someone who *can*\n+                    // verify that).\n+                    //\n+                    // The special treatment of closures here really\n+                    // ought not to be necessary either; the problem\n+                    // is related to #25860 -- there is no way for us\n+                    // to express a fn type complete with the implied\n+                    // bounds that it is assuming. I think in reality\n+                    // the WF rules around fn are a bit messed up, and\n+                    // that is the rot problem: `fn(&'a T)` should\n+                    // probably always be WF, because it should be\n+                    // shorthand for something like `where(T: 'a) {\n+                    // fn(&'a T) }`, as discussed in #25860.\n                     subtys.skip_current_subtree(); // subtree handled by compute_projection\n                     for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n                         self.compute(upvar_ty);"}]}