{"sha": "83177a7cfea9a99b36733397661b5f79caef42cc", "node_id": "C_kwDOAAsO6NoAKDgzMTc3YTdjZmVhOWE5OWIzNjczMzM5NzY2MWI1Zjc5Y2FlZjQyY2M", "commit": {"author": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-17T15:22:11Z"}, "committer": {"name": "Artur Sinila", "email": "personal@logarithmus.dev", "date": "2022-07-17T15:22:11Z"}, "message": "fix: address suggestions", "tree": {"sha": "b98fda8beeab1484b68a97fece7ca6dd9a41eeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b98fda8beeab1484b68a97fece7ca6dd9a41eeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83177a7cfea9a99b36733397661b5f79caef42cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRdoiNI+SeWALw+khR3DmnWkHNcYQUCYtQpIwAKCRB3DmnWkHNc\nYb57AQDTk76Q3yZU99X0/hTj7fCzoFQyZjCtF7pxtUv68TOOfgD/cj54t7hyiJuk\nvPGsq4aCthtvM1USB7FEFOWRUoobfgk=\n=A+7A\n-----END PGP SIGNATURE-----", "payload": "tree b98fda8beeab1484b68a97fece7ca6dd9a41eeaf\nparent 15f73008f87c748d249f8f65e44a10d4d7e65b30\nauthor Artur Sinila <personal@logarithmus.dev> 1658071331 +0300\ncommitter Artur Sinila <personal@logarithmus.dev> 1658071331 +0300\n\nfix: address suggestions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83177a7cfea9a99b36733397661b5f79caef42cc", "html_url": "https://github.com/rust-lang/rust/commit/83177a7cfea9a99b36733397661b5f79caef42cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83177a7cfea9a99b36733397661b5f79caef42cc/comments", "author": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Logarithmus", "id": 29541480, "node_id": "MDQ6VXNlcjI5NTQxNDgw", "avatar_url": "https://avatars.githubusercontent.com/u/29541480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Logarithmus", "html_url": "https://github.com/Logarithmus", "followers_url": "https://api.github.com/users/Logarithmus/followers", "following_url": "https://api.github.com/users/Logarithmus/following{/other_user}", "gists_url": "https://api.github.com/users/Logarithmus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Logarithmus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Logarithmus/subscriptions", "organizations_url": "https://api.github.com/users/Logarithmus/orgs", "repos_url": "https://api.github.com/users/Logarithmus/repos", "events_url": "https://api.github.com/users/Logarithmus/events{/privacy}", "received_events_url": "https://api.github.com/users/Logarithmus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f73008f87c748d249f8f65e44a10d4d7e65b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f73008f87c748d249f8f65e44a10d4d7e65b30", "html_url": "https://github.com/rust-lang/rust/commit/15f73008f87c748d249f8f65e44a10d4d7e65b30"}], "stats": {"total": 137, "additions": 72, "deletions": 65}, "files": [{"sha": "33851d90a2fb9804d922a85dc744d3a92ae5f767", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -24,7 +24,7 @@ use syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use crate::{\n     attr::{Attrs, RawAttrs},\n     db::DefDatabase,\n-    expr::{Expr, ExprId, Label, LabelId, Pat, PatId},\n+    expr::{dummy_expr_id, Expr, ExprId, Label, LabelId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n     macro_id_to_def_id,\n     nameres::DefMap,\n@@ -238,7 +238,7 @@ pub struct Mark {\n }\n \n /// The body of an item (function, const etc.).\n-#[derive(Debug, Default, Eq, PartialEq)]\n+#[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n     pub exprs: Arena<Expr>,\n     pub pats: Arena<Pat>,\n@@ -389,6 +389,21 @@ impl Body {\n     }\n }\n \n+impl Default for Body {\n+    fn default() -> Self {\n+        Self {\n+            body_expr: dummy_expr_id(),\n+            exprs: Default::default(),\n+            pats: Default::default(),\n+            or_pats: Default::default(),\n+            labels: Default::default(),\n+            params: Default::default(),\n+            block_scopes: Default::default(),\n+            _c: Default::default(),\n+        }\n+    }\n+}\n+\n impl Index<ExprId> for Body {\n     type Output = Expr;\n "}, {"sha": "049afa82279d13d671f866c57f0bb0e88b124102", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{collections::HashMap, mem, sync::Arc};\n+use std::{mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n@@ -10,6 +10,8 @@ use hir_expand::{\n     name::{name, AsName, Name},\n     ExpandError, HirFileId, InFile,\n };\n+use la_arena::Arena;\n+use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{\n     ast::{\n@@ -26,8 +28,8 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n     expr::{\n-        Array, BindingAnnotation, Expr, ExprId, FloatTypeWrapper, Label, LabelId, Literal,\n-        MatchArm, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        dummy_expr_id, Array, BindingAnnotation, Expr, ExprId, FloatTypeWrapper, Label, LabelId,\n+        Literal, MatchArm, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     intern::Interned,\n     item_scope::BuiltinShadowMode,\n@@ -80,7 +82,24 @@ pub(super) fn lower(\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n-    ExprCollector::new(db, expander).collect(params, body)\n+    ExprCollector {\n+        db,\n+        source_map: BodySourceMap::default(),\n+        body: Body {\n+            exprs: Arena::default(),\n+            pats: Arena::default(),\n+            labels: Arena::default(),\n+            params: Vec::new(),\n+            body_expr: dummy_expr_id(),\n+            block_scopes: Vec::new(),\n+            _c: Count::new(),\n+            or_pats: Default::default(),\n+        },\n+        expander,\n+        name_to_pat_grouping: Default::default(),\n+        is_lowering_inside_or_pat: false,\n+    }\n+    .collect(params, body)\n }\n \n struct ExprCollector<'a> {\n@@ -93,18 +112,7 @@ struct ExprCollector<'a> {\n     is_lowering_inside_or_pat: bool,\n }\n \n-impl<'a> ExprCollector<'a> {\n-    pub(crate) fn new(db: &'a dyn DefDatabase, expander: Expander) -> Self {\n-        Self {\n-            db,\n-            expander,\n-            body: Body::default(),\n-            source_map: BodySourceMap::default(),\n-            name_to_pat_grouping: HashMap::default(),\n-            is_lowering_inside_or_pat: false,\n-        }\n-    }\n-\n+impl ExprCollector<'_> {\n     fn collect(\n         mut self,\n         param_list: Option<ast::ParamList>,\n@@ -681,6 +689,7 @@ impl<'a> ExprCollector<'a> {\n         };\n         let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n         let prev_local_module = mem::replace(&mut self.expander.module, module);\n+\n         let mut statements: Vec<_> =\n             block.statements().filter_map(|s| self.collect_stmt(s)).collect();\n         let tail = block.tail_expr().and_then(|e| self.maybe_collect_expr(e));"}, {"sha": "a991365d6bf4906fd532b2154710094669835d9e", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -13,7 +13,7 @@\n //! See also a neighboring `body` module.\n \n use hir_expand::name::Name;\n-use la_arena::Idx;\n+use la_arena::{Idx, RawIdx};\n \n use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n@@ -27,6 +27,11 @@ pub use syntax::ast::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, Unar\n \n pub type ExprId = Idx<Expr>;\n \n+/// FIXME: this is a hacky function which should be removed\n+pub(crate) fn dummy_expr_id() -> ExprId {\n+    ExprId::from_raw(RawIdx::from(u32::MAX))\n+}\n+\n pub type PatId = Idx<Pat>;\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "b6a24cd4ab17ad44a2e0e13a3ce1974022be7137", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -1,9 +1,6 @@\n //! Transforms syntax into `Path` objects, ideally with accounting for hygiene\n \n-use crate::{\n-    intern::Interned,\n-    type_ref::{ConstScalar, ConstScalarOrPath},\n-};\n+use crate::{intern::Interned, type_ref::ConstScalarOrPath};\n \n use either::Either;\n use hir_expand::name::{name, AsName};\n@@ -184,10 +181,7 @@ pub(super) fn lower_generic_args(\n                 }\n             }\n             ast::GenericArg::ConstArg(arg) => {\n-                let arg = arg.expr().map_or(\n-                    ConstScalarOrPath::Scalar(ConstScalar::Unknown),\n-                    ConstScalarOrPath::from_expr,\n-                );\n+                let arg = ConstScalarOrPath::from_expr_opt(arg.expr());\n                 args.push(GenericArg::Const(arg))\n             }\n         }"}, {"sha": "867d82f45a74a975160ba04eabe483272ea7b4c8", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -1,6 +1,8 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n+use std::fmt::Write;\n+\n use hir_expand::{\n     name::{AsName, Name},\n     AstId, InFile,\n@@ -182,11 +184,7 @@ impl TypeRef {\n                 // `hir_def::body::lower` to lower this into an `Expr` and then evaluate it at the\n                 // `hir_ty` level, which would allow knowing the type of:\n                 // let v: [u8; 2 + 2] = [0u8; 4];\n-                let len = inner.expr().map_or(\n-                    ConstScalarOrPath::Scalar(ConstScalar::Unknown),\n-                    ConstScalarOrPath::from_expr,\n-                );\n-\n+                let len = ConstScalarOrPath::from_expr_opt(inner.expr());\n                 TypeRef::Array(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())), len)\n             }\n             ast::Type::SliceType(inner) => {\n@@ -394,9 +392,16 @@ impl std::fmt::Display for ConstScalarOrPath {\n }\n \n impl ConstScalarOrPath {\n+    pub(crate) fn from_expr_opt(expr: Option<ast::Expr>) -> Self {\n+        match expr {\n+            Some(x) => Self::from_expr(x),\n+            None => Self::Scalar(ConstScalar::Unknown),\n+        }\n+    }\n+\n     // FIXME: as per the comments on `TypeRef::Array`, this evaluation should not happen at this\n     // parse stage.\n-    pub(crate) fn from_expr(expr: ast::Expr) -> Self {\n+    fn from_expr(expr: ast::Expr) -> Self {\n         match expr {\n             ast::Expr::PathExpr(p) => {\n                 match p.path().and_then(|x| x.segment()).and_then(|x| x.name_ref()) {\n@@ -480,7 +485,7 @@ impl std::fmt::Display for ConstScalar {\n             ConstScalar::UInt(num) => num.fmt(f),\n             ConstScalar::Bool(flag) => flag.fmt(f),\n             ConstScalar::Char(c) => write!(f, \"'{c}'\"),\n-            ConstScalar::Unknown => f.write_str(\"{unknown}\"),\n+            ConstScalar::Unknown => f.write_char('_'),\n         }\n     }\n }"}, {"sha": "0495a4e64cacadffb3ade02fa9f044348d945463", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -395,22 +395,14 @@ pub fn unknown_const_as_generic(ty: Ty) -> GenericArg {\n }\n \n /// Interns a constant scalar with the given type\n-pub fn intern_const_scalar_with_type(value: ConstScalar, ty: Ty) -> Const {\n+pub fn intern_const_scalar(value: ConstScalar, ty: Ty) -> Const {\n     ConstData { ty, value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: value }) }\n         .intern(Interner)\n }\n \n /// Interns a possibly-unknown target usize\n pub fn usize_const(value: Option<u128>) -> Const {\n-    intern_const_scalar_with_type(\n-        value.map(ConstScalar::UInt).unwrap_or(ConstScalar::Unknown),\n-        TyBuilder::usize(),\n-    )\n-}\n-\n-/// Interns a constant scalar with the default type\n-pub fn intern_const_scalar(value: ConstScalar) -> Const {\n-    intern_const_scalar_with_type(value, TyBuilder::builtin(value.builtin_type()))\n+    intern_const_scalar(value.map_or(ConstScalar::Unknown, ConstScalar::UInt), TyBuilder::usize())\n }\n \n pub(crate) fn const_eval_recover(\n@@ -470,7 +462,7 @@ pub(crate) fn eval_to_const<'a>(\n         Ok(ComputedExpr::Literal(literal)) => literal.into(),\n         _ => ConstScalar::Unknown,\n     };\n-    intern_const_scalar_with_type(const_scalar, TyBuilder::usize())\n+    intern_const_scalar(const_scalar, TyBuilder::usize())\n }\n \n #[cfg(test)]"}, {"sha": "5e7320a5dd305117da6814fbc3ca2e1c09af4d48", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -273,6 +273,7 @@ impl<'a> InferenceContext<'a> {\n                                 elem_ty.clone(),\n                                 intern_const_scalar(\n                                     len.map_or(ConstScalar::Unknown, |len| ConstScalar::UInt(len)),\n+                                    TyBuilder::usize(),\n                                 ),\n                             )\n                         }"}, {"sha": "c34c4b8a7c13e4bf95c85fa1717ddde30e9e997e", "filename": "crates/hir-ty/src/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finterner.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -257,7 +257,7 @@ impl chalk_ir::interner::Interner for Interner {\n         c1: &Self::InternedConcreteConst,\n         c2: &Self::InternedConcreteConst,\n     ) -> bool {\n-        c1 == c2\n+        (c1 == &ConstScalar::Unknown) || (c2 == &ConstScalar::Unknown) || (c1 == c2)\n     }\n \n     fn intern_generic_arg("}, {"sha": "e86b52c987b9002e97b79a8fc5edb25218a06786", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -44,9 +44,7 @@ use syntax::{ast, SmolStr};\n \n use crate::{\n     all_super_traits,\n-    consteval::{\n-        intern_const_scalar_with_type, path_to_const, unknown_const, unknown_const_as_generic,\n-    },\n+    consteval::{intern_const_scalar, path_to_const, unknown_const, unknown_const_as_generic},\n     db::HirDatabase,\n     make_binders,\n     mapping::ToChalk,\n@@ -1744,7 +1742,7 @@ pub(crate) fn const_or_path_to_chalk(\n     debruijn: DebruijnIndex,\n ) -> Const {\n     match value {\n-        ConstScalarOrPath::Scalar(s) => intern_const_scalar_with_type(s.clone(), expected_ty),\n+        ConstScalarOrPath::Scalar(s) => intern_const_scalar(s.clone(), expected_ty),\n         ConstScalarOrPath::Path(n) => {\n             let path = ModPath::from_segments(PathKind::Plain, Some(n.clone()));\n             path_to_const(db, resolver, &path, mode, args, debruijn)"}, {"sha": "5b08f552109efe4a533c134e15046079056636ad", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -3011,14 +3011,14 @@ struct TS(usize);\n fn main() {\n     let x;\n     [x,] = &[1,];\n-  //^^^^expected &[i32; 1], got [{unknown}; {unknown}]\n+  //^^^^expected &[i32; 1], got [{unknown}; _]\n \n     // FIXME we only want the outermost error, but this matches the current\n     // behavior of slice patterns\n     let x;\n     [(x,),] = &[(1,),];\n   // ^^^^expected {unknown}, got ({unknown},)\n-  //^^^^^^^expected &[(i32,); 1], got [{unknown}; {unknown}]\n+  //^^^^^^^expected &[(i32,); 1], got [{unknown}; _]\n \n     let x;\n     ((x,),) = &((1,),);"}, {"sha": "442268d13524a5605149a71d14c044be9a8efab0", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -328,7 +328,7 @@ fn div(x: i32, y: i32) -> Option<i32> {\n             }\n             fn main() {\n                 run(f()) // FIXME: remove this error\n-                  //^^^ error: expected Rate<5>, found Rate<{unknown}>\n+                  //^^^ error: expected Rate<5>, found Rate<_>\n             }\n \"#,\n         );"}, {"sha": "9fe6d6062342175c6ac60320a6281a8982353858", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/83177a7cfea9a99b36733397661b5f79caef42cc/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83177a7cfea9a99b36733397661b5f79caef42cc/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=83177a7cfea9a99b36733397661b5f79caef42cc", "patch": "@@ -17,12 +17,6 @@ pub use map::ArenaMap;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct RawIdx(u32);\n \n-impl Default for RawIdx {\n-    fn default() -> Self {\n-        Self(u32::MAX)\n-    }\n-}\n-\n impl From<RawIdx> for u32 {\n     fn from(raw: RawIdx) -> u32 {\n         raw.0\n@@ -53,12 +47,6 @@ pub struct Idx<T> {\n     _ty: PhantomData<fn() -> T>,\n }\n \n-impl<T> Default for Idx<T> {\n-    fn default() -> Self {\n-        Self::from_raw(RawIdx::default())\n-    }\n-}\n-\n impl<T> Clone for Idx<T> {\n     fn clone(&self) -> Self {\n         *self"}]}