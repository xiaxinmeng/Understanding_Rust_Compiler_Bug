{"sha": "a8d4ccf907e55f5b507b6f68103d6bf151804b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDRjY2Y5MDdlNTVmNWI1MDdiNmY2ODEwM2Q2YmYxNTE4MDRiNTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-10T00:54:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-10T00:54:21Z"}, "message": "Rollup merge of #69005 - ecstatic-morse:unified-dataflow-graphviz, r=wesleywiser\n\nSmall graphviz improvements for the new dataflow framework\n\nSplit out from #68241. This prints the correct effect diff for each line (the before-effect and the after-effect) and makes marginal improvements to the graphviz output for the new dataflow framework including using monospaced font and better line breaking. This will only be useful when #68241 is merged and the graphviz output changes from this:\n\n![image](https://user-images.githubusercontent.com/29463364/74107776-5e3c3300-4b28-11ea-9d33-4862228b5e87.png)\n\nto this:\n\n![image](https://user-images.githubusercontent.com/29463364/74107751-20d7a580-4b28-11ea-99ca-24f749386601.png)\n\nr? @wesleywiser", "tree": {"sha": "f2f4f6ecc9c43016c50f048e3a1a00c5a2505841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f4f6ecc9c43016c50f048e3a1a00c5a2505841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d4ccf907e55f5b507b6f68103d6bf151804b50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQKm+CRBK7hj4Ov3rIwAAdHIIAC3TA6+EfILLqZwZeBs5sZIQ\nvW31FmFjes58L4iAcjzJIfloW7DP025qNcRhYLnnQHE7pgPAiHtMCJu/dqfucgNQ\nMEf97BNaquEO+7NMNLxrag76hwxgU2A65yGBAaj5x6IehGRm/ub5PKpX0w19yxow\n6CmTU0ZS3OECE6MjgJESRsa1oQLUdwXmtxAr6LPKqPHdSRBxdsHZ9k07Wtfngs7K\nBdqnU/aF9FNJvPN+SW6fNPVeH0nP7xe2i4qPAnnw7hFo/ijAgp34oixRZDFZLx6Z\nm+zq+PZiH6f968S0+OAyS95nkc+chz0BhqIsrTN40/vMDATCMJWZfRUkMzYmH9I=\n=zYWU\n-----END PGP SIGNATURE-----\n", "payload": "tree f2f4f6ecc9c43016c50f048e3a1a00c5a2505841\nparent 64d2d04eb911bca923726fa6c481cc858187adc3\nparent 8d6208c39b5aa63c7bbda30e325fdffefc7b81b8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581296061 +0100\ncommitter GitHub <noreply@github.com> 1581296061 +0100\n\nRollup merge of #69005 - ecstatic-morse:unified-dataflow-graphviz, r=wesleywiser\n\nSmall graphviz improvements for the new dataflow framework\n\nSplit out from #68241. This prints the correct effect diff for each line (the before-effect and the after-effect) and makes marginal improvements to the graphviz output for the new dataflow framework including using monospaced font and better line breaking. This will only be useful when #68241 is merged and the graphviz output changes from this:\n\n![image](https://user-images.githubusercontent.com/29463364/74107776-5e3c3300-4b28-11ea-9d33-4862228b5e87.png)\n\nto this:\n\n![image](https://user-images.githubusercontent.com/29463364/74107751-20d7a580-4b28-11ea-99ca-24f749386601.png)\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d4ccf907e55f5b507b6f68103d6bf151804b50", "html_url": "https://github.com/rust-lang/rust/commit/a8d4ccf907e55f5b507b6f68103d6bf151804b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d4ccf907e55f5b507b6f68103d6bf151804b50/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d2d04eb911bca923726fa6c481cc858187adc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d2d04eb911bca923726fa6c481cc858187adc3", "html_url": "https://github.com/rust-lang/rust/commit/64d2d04eb911bca923726fa6c481cc858187adc3"}, {"sha": "8d6208c39b5aa63c7bbda30e325fdffefc7b81b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6208c39b5aa63c7bbda30e325fdffefc7b81b8", "html_url": "https://github.com/rust-lang/rust/commit/8d6208c39b5aa63c7bbda30e325fdffefc7b81b8"}], "stats": {"total": 91, "additions": 56, "deletions": 35}, "files": [{"sha": "a53e0012ca2210eee77bffc2b381eb3f90acf82b", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a8d4ccf907e55f5b507b6f68103d6bf151804b50", "patch": "@@ -597,6 +597,8 @@ pub enum RenderOption {\n     NoNodeLabels,\n     NoEdgeStyles,\n     NoNodeStyles,\n+\n+    Monospace,\n }\n \n /// Returns vec holding all the default render options.\n@@ -626,6 +628,14 @@ where\n     W: Write,\n {\n     writeln!(w, \"digraph {} {{\", g.graph_id().as_slice())?;\n+\n+    // Global graph properties\n+    if options.contains(&RenderOption::Monospace) {\n+        writeln!(w, r#\"    graph[fontname=\"monospace\"];\"#)?;\n+        writeln!(w, r#\"    node[fontname=\"monospace\"];\"#)?;\n+        writeln!(w, r#\"    edge[fontname=\"monospace\"];\"#)?;\n+    }\n+\n     for n in g.nodes().iter() {\n         write!(w, \"    \")?;\n         let id = g.node_id(n);"}, {"sha": "718c1e9ae2043937e5e720528f6ffb63fcc99151", "filename": "src/librustc_mir/dataflow/generic/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fengine.rs?ref=a8d4ccf907e55f5b507b6f68103d6bf151804b50", "patch": "@@ -331,7 +331,7 @@ where\n     let mut buf = Vec::new();\n \n     let graphviz = graphviz::Formatter::new(body, def_id, results, &mut *formatter);\n-    dot::render(&graphviz, &mut buf)?;\n+    dot::render_opts(&graphviz, &mut buf, &[dot::RenderOption::Monospace])?;\n     fs::write(&path, buf)?;\n     Ok(())\n }"}, {"sha": "b805b13592f898e13933c4dd6dd3c35897901bbb", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d4ccf907e55f5b507b6f68103d6bf151804b50/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=a8d4ccf907e55f5b507b6f68103d6bf151804b50", "patch": "@@ -171,10 +171,19 @@ where\n         //   | | (on successful return)           | +_4        |\n         //   +-+----------------------------------+------------+\n \n-        write!(\n-            w,\n-            r#\"<table border=\"1\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"3\" sides=\"rb\">\"#,\n-        )?;\n+        // N.B., Some attributes (`align`, `balign`) are repeated on parent elements and their\n+        // children. This is because `xdot` seemed to have a hard time correctly propagating\n+        // attributes. Make sure to test the output before trying to remove the redundancy.\n+        // Notably, `align` was found to have no effect when applied only to <table>.\n+\n+        let table_fmt = concat!(\n+            \" border=\\\"1\\\"\",\n+            \" cellborder=\\\"1\\\"\",\n+            \" cellspacing=\\\"0\\\"\",\n+            \" cellpadding=\\\"3\\\"\",\n+            \" sides=\\\"rb\\\"\",\n+        );\n+        write!(w, r#\"<table{fmt}>\"#, fmt = table_fmt)?;\n \n         // A + B: Block header\n         if self.state_formatter.column_names().is_empty() {\n@@ -186,7 +195,7 @@ where\n         // C: Entry state\n         self.bg = Background::Light;\n         self.results.seek_to_block_start(block);\n-        self.write_row_with_full_state(w, \"\", \"(on_entry)\")?;\n+        self.write_row_with_full_state(w, \"\", \"(on entry)\")?;\n \n         // D: Statement transfer functions\n         for (i, statement) in body[block].statements.iter().enumerate() {\n@@ -212,7 +221,7 @@ where\n             self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n                 write!(\n                     w,\n-                    r#\"<td colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n+                    r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n                     colspan = num_state_columns,\n                     fmt = fmt,\n                 )?;\n@@ -311,7 +320,9 @@ where\n         f: impl FnOnce(&mut Self, &mut W, &str) -> io::Result<()>,\n     ) -> io::Result<()> {\n         let bg = self.toggle_background();\n-        let fmt = format!(\"sides=\\\"tl\\\" {}\", bg.attr());\n+        let valign = if mir.starts_with(\"(on \") && mir != \"(on entry)\" { \"bottom\" } else { \"top\" };\n+\n+        let fmt = format!(\"valign=\\\"{}\\\" sides=\\\"tl\\\" {}\", valign, bg.attr());\n \n         write!(\n             w,\n@@ -345,7 +356,7 @@ where\n                 colspan = this.num_state_columns(),\n                 fmt = fmt,\n             )?;\n-            pretty_print_state_elems(w, analysis, state.iter(), \",\", LIMIT_40_ALIGN_1)?;\n+            pretty_print_state_elems(w, analysis, state.iter(), \", \", LIMIT_30_ALIGN_1)?;\n             write!(w, \"}}</td>\")\n         })\n     }\n@@ -387,7 +398,6 @@ pub struct SimpleDiff<T: Idx> {\n }\n \n impl<T: Idx> SimpleDiff<T> {\n-    #![allow(unused)]\n     pub fn new(bits_per_block: usize) -> Self {\n         SimpleDiff { prev_state: BitSet::new_empty(bits_per_block), prev_loc: Location::START }\n     }\n@@ -417,8 +427,8 @@ where\n         }\n \n         self.prev_loc = location;\n-        write!(w, r#\"<td {fmt} align=\"left\">\"#, fmt = fmt)?;\n-        results.seek_before(location);\n+        write!(w, r#\"<td {fmt} balign=\"left\" align=\"left\">\"#, fmt = fmt)?;\n+        results.seek_after(location);\n         let curr_state = results.get();\n         write_diff(&mut w, results.analysis(), &self.prev_state, curr_state)?;\n         self.prev_state.overwrite(curr_state);\n@@ -434,7 +444,6 @@ pub struct TwoPhaseDiff<T: Idx> {\n }\n \n impl<T: Idx> TwoPhaseDiff<T> {\n-    #![allow(unused)]\n     pub fn new(bits_per_block: usize) -> Self {\n         TwoPhaseDiff { prev_state: BitSet::new_empty(bits_per_block), prev_loc: Location::START }\n     }\n@@ -445,7 +454,7 @@ where\n     A: Analysis<'tcx>,\n {\n     fn column_names(&self) -> &[&str] {\n-        &[\"ENTRY\", \" EXIT\"]\n+        &[\"BEFORE\", \" AFTER\"]\n     }\n \n     fn write_state_for_location(\n@@ -465,7 +474,7 @@ where\n \n         self.prev_loc = location;\n \n-        // Entry\n+        // Before\n \n         write!(w, r#\"<td {fmt} align=\"left\">\"#, fmt = fmt)?;\n         results.seek_before(location);\n@@ -474,7 +483,7 @@ where\n         self.prev_state.overwrite(curr_state);\n         write!(w, \"</td>\")?;\n \n-        // Exit\n+        // After\n \n         write!(w, r#\"<td {fmt} align=\"left\">\"#, fmt = fmt)?;\n         results.seek_after(location);\n@@ -492,7 +501,6 @@ pub struct BlockTransferFunc<'a, 'tcx, T: Idx> {\n }\n \n impl<T: Idx> BlockTransferFunc<'mir, 'tcx, T> {\n-    #![allow(unused)]\n     pub fn new(\n         body: &'mir mir::Body<'tcx>,\n         trans_for_block: IndexVec<BasicBlock, GenKillSet<T>>,\n@@ -527,12 +535,12 @@ where\n         for set in &[&block_trans.gen, &block_trans.kill] {\n             write!(\n                 w,\n-                r#\"<td {fmt} rowspan=\"{rowspan}\" align=\"center\">\"#,\n+                r#\"<td {fmt} rowspan=\"{rowspan}\" balign=\"left\" align=\"left\">\"#,\n                 fmt = fmt,\n                 rowspan = rowspan\n             )?;\n \n-            pretty_print_state_elems(&mut w, results.analysis(), set.iter(), \"\\n\", None)?;\n+            pretty_print_state_elems(&mut w, results.analysis(), set.iter(), BR_LEFT, None)?;\n             write!(w, \"</td>\")?;\n         }\n \n@@ -564,25 +572,28 @@ fn write_diff<A: Analysis<'tcx>>(\n \n     if !set.is_empty() {\n         write!(w, r#\"<font color=\"darkgreen\">+\"#)?;\n-        pretty_print_state_elems(w, analysis, set.iter(), \",\", LIMIT_40_ALIGN_1)?;\n+        pretty_print_state_elems(w, analysis, set.iter(), \", \", LIMIT_30_ALIGN_1)?;\n         write!(w, r#\"</font>\"#)?;\n     }\n \n     if !set.is_empty() && !clear.is_empty() {\n-        write!(w, \"<br/>\")?;\n+        write!(w, \"{}\", BR_LEFT)?;\n     }\n \n     if !clear.is_empty() {\n         write!(w, r#\"<font color=\"red\">-\"#)?;\n-        pretty_print_state_elems(w, analysis, clear.iter(), \",\", LIMIT_40_ALIGN_1)?;\n+        pretty_print_state_elems(w, analysis, clear.iter(), \", \", LIMIT_30_ALIGN_1)?;\n         write!(w, r#\"</font>\"#)?;\n     }\n \n     Ok(())\n }\n \n+const BR_LEFT: &'static str = r#\"<br align=\"left\"/>\"#;\n+const BR_LEFT_SPACE: &'static str = r#\"<br align=\"left\"/> \"#;\n+\n /// Line break policy that breaks at 40 characters and starts the next line with a single space.\n-const LIMIT_40_ALIGN_1: Option<LineBreak> = Some(LineBreak { sequence: \"<br/> \", limit: 40 });\n+const LIMIT_30_ALIGN_1: Option<LineBreak> = Some(LineBreak { sequence: BR_LEFT_SPACE, limit: 30 });\n \n struct LineBreak {\n     sequence: &'static str,\n@@ -613,25 +624,25 @@ where\n     let mut line_break_inserted = false;\n \n     for idx in elems {\n-        if first {\n-            first = false;\n-        } else {\n-            write!(w, \"{}\", sep)?;\n-            curr_line_width += sep_width;\n-        }\n-\n         buf.clear();\n         analysis.pretty_print_idx(&mut buf, idx)?;\n         let idx_str =\n             str::from_utf8(&buf).expect(\"Output of `pretty_print_idx` must be valid UTF-8\");\n         let escaped = dot::escape_html(idx_str);\n         let escaped_width = escaped.chars().count();\n \n-        if let Some(line_break) = &line_break {\n-            if curr_line_width + sep_width + escaped_width > line_break.limit {\n-                write!(w, \"{}\", line_break.sequence)?;\n-                line_break_inserted = true;\n-                curr_line_width = 0;\n+        if first {\n+            first = false;\n+        } else {\n+            write!(w, \"{}\", sep)?;\n+            curr_line_width += sep_width;\n+\n+            if let Some(line_break) = &line_break {\n+                if curr_line_width + sep_width + escaped_width > line_break.limit {\n+                    write!(w, \"{}\", line_break.sequence)?;\n+                    line_break_inserted = true;\n+                    curr_line_width = 0;\n+                }\n             }\n         }\n "}]}