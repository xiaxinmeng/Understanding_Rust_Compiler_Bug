{"sha": "5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2EwYWM1MWVlZmJkYWNjNWIxNzYzZjhkNDlhNzg3NDA3YWZiMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T13:50:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T13:50:17Z"}, "message": "Auto merge of #83890 - Dylan-DPC:rollup-9fqy3fe, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #83368 (Add `download-rustc = \"if-unchanged\"`)\n - #83705 (Give a better error when --theme is not a CSS file)\n - #83853 (Disallow the use of high byte registes as operands on x86_64)\n - #83877 (Remove unnecessary exceptions to the platform-specific code check)\n - #83878 (Fix racing file access in tidy)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8cc9e203ddca741ce9899e6185e1aac39ec5bbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cc9e203ddca741ce9899e6185e1aac39ec5bbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "html_url": "https://github.com/rust-lang/rust/commit/5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39eee173fbcc21462d255b364b87715cd33b62db", "url": "https://api.github.com/repos/rust-lang/rust/commits/39eee173fbcc21462d255b364b87715cd33b62db", "html_url": "https://github.com/rust-lang/rust/commit/39eee173fbcc21462d255b364b87715cd33b62db"}, {"sha": "d856a26770787ce20f46e8bfe036d42fac313502", "url": "https://api.github.com/repos/rust-lang/rust/commits/d856a26770787ce20f46e8bfe036d42fac313502", "html_url": "https://github.com/rust-lang/rust/commit/d856a26770787ce20f46e8bfe036d42fac313502"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "a7a708fe7dec3f6e706ec5dbb2352519d9aeb0ee", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -68,7 +68,6 @@ fn frame_pointer_r11(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if !frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n@@ -81,7 +80,6 @@ fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n     target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(has_feature, target) {\n         Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")"}, {"sha": "e2268a61a42571277939de276759cc94827d1d0b", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -90,7 +90,7 @@ macro_rules! def_regs {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature, _target, false)?;)?\n+                            $($filter(_arch, &mut _has_feature, _target)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -114,7 +114,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature, _target, true).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, _target).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }"}, {"sha": "185d6ac8246c9a1bffc65fa92d78a9f5f41cf0f4", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -52,7 +52,6 @@ fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {\n         Err(\"register can't be used with the `e` target feature\")"}, {"sha": "90660dad4c2a1fb2496760e34eeb90faa4f44aa4", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -133,7 +133,6 @@ fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n         InlineAsmArch::X86 => Err(\"register is only available on x86_64\"),\n@@ -146,13 +145,9 @@ fn high_byte(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n     _target: &Target,\n-    allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n-        InlineAsmArch::X86_64 if allocating => {\n-            // The error message isn't actually used...\n-            Err(\"high byte registers are not allocated by reg_byte\")\n-        }\n+        InlineAsmArch::X86_64 => Err(\"high byte registers cannot be used as an operand on x86_64\"),\n         _ => Ok(()),\n     }\n }"}, {"sha": "b78e2b7b746c42aecb9b67c66fc4c6b8c4ed5e6f", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -373,7 +373,9 @@ changelog-seen = 2\n # Whether to download the stage 1 and 2 compilers from CI.\n # This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n #\n-# FIXME: currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n+# You can set this to \"if-unchanged\" to only download if `compiler/` has not been modified.\n+#\n+# FIXME(#82739): currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n #download-rustc = false\n \n # Number of codegen units to use for each compiler invocation. A value of 0"}, {"sha": "23af00d62930ac2b01fb058013132d0e874360ed", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -644,8 +644,10 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n     # If `download-rustc` is set, download the most recent commit with CI artifacts\n     def maybe_download_ci_toolchain(self):\n         # If `download-rustc` is not set, default to rebuilding.\n-        if self.get_toml(\"download-rustc\", section=\"rust\") != \"true\":\n+        download_rustc = self.get_toml(\"download-rustc\", section=\"rust\")\n+        if download_rustc is None or download_rustc == \"false\":\n             return None\n+        assert download_rustc == \"true\" or download_rustc == \"if-unchanged\", download_rustc\n \n         # Handle running from a directory other than the top level\n         rev_parse = [\"git\", \"rev-parse\", \"--show-toplevel\"]\n@@ -660,6 +662,8 @@ def maybe_download_ci_toolchain(self):\n         # Warn if there were changes to the compiler since the ancestor commit.\n         status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler])\n         if status != 0:\n+            if download_rustc == \"if-unchanged\":\n+                return None\n             print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n \n         if self.verbose:\n@@ -1175,6 +1179,8 @@ def bootstrap(help_triggered):\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     if toml_path:\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n+    if build.rustc_commit is not None:\n+        env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "04afed60a00b68cac54403bd92cbd09e9e02bdf3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -510,7 +510,8 @@ struct Rust {\n     new_symbol_mangling: Option<bool>,\n     profile_generate: Option<String>,\n     profile_use: Option<String>,\n-    download_rustc: Option<bool>,\n+    // ignored; this is set from an env var set by bootstrap.py\n+    download_rustc: Option<StringOrBool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -852,7 +853,7 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc = rust.download_rustc.unwrap_or(false);\n+            config.download_rustc = env::var(\"BOOTSTRAP_DOWNLOAD_RUSTC\").as_deref() == Ok(\"1\");\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;"}, {"sha": "946c354fd9d9cb06849917e3bc9e2a7d16c8e834", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -501,7 +501,7 @@ Here is the list of currently supported register classes:\n | x86 | `reg` | `ax`, `bx`, `cx`, `dx`, `si`, `di`, `r[8-15]` (x86-64 only) | `r` |\n | x86 | `reg_abcd` | `ax`, `bx`, `cx`, `dx` | `Q` |\n | x86-32 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh` | `q` |\n-| x86-64 | `reg_byte` | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b`, `ah`\\*, `bh`\\*, `ch`\\*, `dh`\\* | `q` |\n+| x86-64 | `reg_byte`\\* | `al`, `bl`, `cl`, `dl`, `sil`, `dil`, `r[8-15]b` | `q` |\n | x86 | `xmm_reg` | `xmm[0-7]` (x86) `xmm[0-15]` (x86-64) | `x` |\n | x86 | `ymm_reg` | `ymm[0-7]` (x86) `ymm[0-15]` (x86-64) | `x` |\n | x86 | `zmm_reg` | `zmm[0-7]` (x86) `zmm[0-31]` (x86-64) | `v` |\n@@ -532,7 +532,7 @@ Here is the list of currently supported register classes:\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n-> Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n+> Note #2: On x86-64 the high byte registers (e.g. `ah`) are not available in the `reg_byte` register class.\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n >"}, {"sha": "821675bb9f5426ffab219ff083825ae2f6e1ecf6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -484,7 +484,9 @@ impl Options {\n                     return Err(1);\n                 }\n                 if theme_file.extension() != Some(OsStr::new(\"css\")) {\n-                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s)).emit();\n+                    diag.struct_err(&format!(\"invalid argument: \\\"{}\\\"\", theme_s))\n+                        .help(\"arguments to --theme must have a .css extension\")\n+                        .emit();\n                     return Err(1);\n                 }\n                 let (success, ret) = theme::test_theme_against(&theme_file, &paths, &diag);"}, {"sha": "b65b727d2255c1fe20d68bea8a0aea324145c84a", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -748,10 +748,11 @@ check_reg!(eax_f64 f64 \"eax\" \"mov\");\n // CHECK: #NO_APP\n check_reg!(eax_ptr ptr \"eax\" \"mov\");\n \n-// CHECK-LABEL: ah_byte:\n-// CHECK: #APP\n-// CHECK: mov ah, ah\n-// CHECK: #NO_APP\n+// i686-LABEL: ah_byte:\n+// i686: #APP\n+// i686: mov ah, ah\n+// i686: #NO_APP\n+#[cfg(i686)]\n check_reg!(ah_byte i8 \"ah\" \"mov\");\n \n // CHECK-LABEL: xmm0_i32:"}, {"sha": "c22ebf02718e65ca3935f604020b376f1bdeeb49", "filename": "src/test/rustdoc-ui/invalid-theme-name.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags:--theme {{src-base}}/invalid-theme-name.rs\n+// error-pattern: invalid argument\n+// error-pattern: must have a .css extension"}, {"sha": "80204442dbec39a4ee757ec659b57456e5f01158", "filename": "src/test/rustdoc-ui/invalid-theme-name.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-theme-name.stderr?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -0,0 +1,4 @@\n+error: invalid argument: \"$DIR/invalid-theme-name.rs\"\n+   |\n+   = help: arguments to --theme must have a .css extension\n+"}, {"sha": "da302b248760fa18031eb1c1fedf5a4478526d43", "filename": "src/test/ui/asm/bad-reg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -37,6 +37,8 @@ fn main() {\n         //~^ ERROR invalid register `mm0`: MMX registers are not currently supported as operands\n         asm!(\"\", in(\"k0\") foo);\n         //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n+        asm!(\"\", in(\"ah\") foo);\n+        //~^ ERROR invalid register `ah`: high byte registers cannot be used as an operand\n \n         // Explicit register conflicts\n         // (except in/lateout which don't conflict)"}, {"sha": "2bfb4854c344220f81ce12a78abe4fe2764cc6ca", "filename": "src/test/ui/asm/bad-reg.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -94,49 +94,55 @@ error: invalid register `k0`: the k0 AVX mask register cannot be used as an oper\n LL |         asm!(\"\", in(\"k0\") foo);\n    |                  ^^^^^^^^^^^^\n \n+error: invalid register `ah`: high byte registers cannot be used as an operand on x86_64\n+  --> $DIR/bad-reg.rs:40:18\n+   |\n+LL |         asm!(\"\", in(\"ah\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n error: register `al` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:44:33\n+  --> $DIR/bad-reg.rs:46:33\n    |\n LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n    |                  -------------  ^^^^^^^^^^^^ register `al`\n    |                  |\n    |                  register `ax`\n \n error: register `ax` conflicts with register `ax`\n-  --> $DIR/bad-reg.rs:46:33\n+  --> $DIR/bad-reg.rs:48:33\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n    |                  |\n    |                  register `ax`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:46:18\n+  --> $DIR/bad-reg.rs:48:18\n    |\n LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n    |                  ^^^^^^^^^^^^^\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:49:34\n+  --> $DIR/bad-reg.rs:51:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n \n error: register `ymm0` conflicts with register `xmm0`\n-  --> $DIR/bad-reg.rs:51:34\n+  --> $DIR/bad-reg.rs:53:34\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n    |                  |\n    |                  register `xmm0`\n    |\n help: use `lateout` instead of `out` to avoid conflict\n-  --> $DIR/bad-reg.rs:51:18\n+  --> $DIR/bad-reg.rs:53:18\n    |\n LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n    |                  ^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "c2684bb4af3f6265f152a0c1ac664157927ca22c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -1909,8 +1909,7 @@ impl<'test> TestCx<'test> {\n         } else {\n             Command::new(&self.config.rustdoc_path.clone().expect(\"no rustdoc built yet\"))\n         };\n-        // FIXME Why is -L here?\n-        rustc.arg(input_file); //.arg(\"-L\").arg(&self.config.build_base);\n+        rustc.arg(input_file);\n \n         // Use a single thread for efficiency and a deterministic error message order\n         rustc.arg(\"-Zthreads=1\");"}, {"sha": "fcb27dae9ea90f4f53ace9c698cc60aa9133855f", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -53,6 +53,7 @@ pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n+        \"tidy-test-file\",\n         \"compiler/rustc_codegen_cranelift\",\n         \"src/llvm-project\",\n         \"library/backtrace\","}, {"sha": "144529d8641eee4c56bb02f00b1b0fcedae6e18c", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7a0ac51eefbdacc5b1763f8d49a787407afb34/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "patch": "@@ -40,35 +40,20 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"library/panic_abort\",\n     \"library/panic_unwind\",\n     \"library/unwind\",\n-    // black_box implementation is LLVM-version specific and it uses\n-    // target_os to tell targets with different LLVM-versions apart\n-    // (e.g. `wasm32-unknown-emscripten` vs `wasm32-unknown-unknown`):\n-    \"library/core/src/hint.rs\",\n     \"library/std/src/sys/\", // Platform-specific code for std lives here.\n     // This has the trailing slash so that sys_common is not excepted.\n     \"library/std/src/os\", // Platform-specific public interfaces\n     \"library/rtstartup\",  // Not sure what to do about this. magic stuff for mingw\n-    // temporary exceptions\n-    \"library/std/src/lib.rs\",\n-    \"library/std/src/path.rs\",\n-    \"library/std/src/f32.rs\",\n-    \"library/std/src/f64.rs\",\n     // Integration test for platform-specific run-time feature detection:\n     \"library/std/tests/run-time-detect.rs\",\n     \"library/std/src/net/test.rs\",\n     \"library/std/src/net/addr\",\n     \"library/std/src/net/udp\",\n-    \"library/std/src/sys_common/mod.rs\",\n-    \"library/std/src/sys_common/net.rs\",\n-    \"library/std/src/sys_common/backtrace.rs\",\n     \"library/std/src/sys_common/remutex.rs\",\n     \"library/std/src/sync/mutex.rs\",\n     \"library/std/src/sync/rwlock.rs\",\n-    // panic_unwind shims\n-    \"library/std/src/panicking.rs\",\n     \"library/term\", // Not sure how to make this crate portable, but test crate needs it.\n     \"library/test\", // Probably should defer to unstable `std::sys` APIs.\n-    \"library/std/src/sync/mpsc\", // some tests are only run on non-emscripten\n     // std testing crates, okay for now at least\n     \"library/core/tests\",\n     \"library/alloc/tests/lib.rs\",\n@@ -79,13 +64,6 @@ const EXCEPTION_PATHS: &[&str] = &[\n     // we must use `#[cfg(windows)]` to conditionally compile the\n     // correct `VaList` structure for windows.\n     \"library/core/src/ffi.rs\",\n-    // non-std crates\n-    \"src/test\",\n-    \"src/tools\",\n-    \"src/librustc\",\n-    \"src/librustdoc\",\n-    \"src/librustc_ast\",\n-    \"src/bootstrap\",\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {"}]}