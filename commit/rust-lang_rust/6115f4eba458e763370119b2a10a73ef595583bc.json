{"sha": "6115f4eba458e763370119b2a10a73ef595583bc", "node_id": "C_kwDOAAsO6NoAKDYxMTVmNGViYTQ1OGU3NjMzNzAxMTliMmExMGE3M2VmNTk1NTgzYmM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-29T04:55:42Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-07T15:18:23Z"}, "message": "Add a `DownloadSource` enum\n\nThis simplifies the arguments to `download_component` in config.rs.\n\nIt also moves stage0.json metadata handling to `Build::new`, making it easier to download the stage0\ncompiler in rustbuild later if necessary.", "tree": {"sha": "6ddbf816fb3cb436b9441a5345485fc103450750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ddbf816fb3cb436b9441a5345485fc103450750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6115f4eba458e763370119b2a10a73ef595583bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6115f4eba458e763370119b2a10a73ef595583bc", "html_url": "https://github.com/rust-lang/rust/commit/6115f4eba458e763370119b2a10a73ef595583bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6115f4eba458e763370119b2a10a73ef595583bc/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ca4b95295ce84ec1ba89a657647e2de03bb132", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ca4b95295ce84ec1ba89a657647e2de03bb132", "html_url": "https://github.com/rust-lang/rust/commit/a9ca4b95295ce84ec1ba89a657647e2de03bb132"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "99b69ee9a4fd18e521be31e32e9d0252fdf27b17", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 26, "deletions": 43, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6115f4eba458e763370119b2a10a73ef595583bc/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6115f4eba458e763370119b2a10a73ef595583bc/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6115f4eba458e763370119b2a10a73ef595583bc", "patch": "@@ -20,6 +20,7 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, output, program_out_of_date, t};\n+use crate::RustfmtMetadata;\n use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n \n@@ -1483,25 +1484,8 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n }\n \n fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n-    #[derive(Deserialize)]\n-    struct Stage0Metadata {\n-        dist_server: String,\n-        checksums_sha256: HashMap<String, String>,\n-        rustfmt: Option<RustfmtMetadata>,\n-    }\n-    #[derive(Deserialize)]\n-    struct RustfmtMetadata {\n-        date: String,\n-        version: String,\n-    }\n-\n-    let stage0_json = builder.read(&builder.src.join(\"src\").join(\"stage0.json\"));\n-    let Stage0Metadata { dist_server, checksums_sha256, rustfmt } =\n-        t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n-    let RustfmtMetadata { date, version } = rustfmt?;\n+    let RustfmtMetadata { date, version } = builder.stage0_metadata.rustfmt.as_ref()?;\n     let channel = format!(\"{version}-{date}\");\n-    let mut dist_server = env::var(\"RUSTUP_DIST_SERVER\").unwrap_or(dist_server);\n-    dist_server.push_str(\"/dist\");\n \n     let host = builder.config.build;\n     let rustfmt_path = builder.config.initial_rustc.with_file_name(exe(\"rustfmt\", host));\n@@ -1512,15 +1496,7 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n     }\n \n     let filename = format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple);\n-    download_component(\n-        builder,\n-        &dist_server,\n-        filename,\n-        \"rustfmt-preview\",\n-        &date,\n-        \"stage0\",\n-        Some(checksums_sha256),\n-    );\n+    download_component(builder, DownloadSource::Dist, filename, \"rustfmt-preview\", &date, \"stage0\");\n \n     builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n     builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n@@ -1563,28 +1539,24 @@ fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n     }\n }\n \n+pub(crate) enum DownloadSource {\n+    CI,\n+    Dist,\n+}\n+\n /// Download a single component of a CI-built toolchain (not necessarily a published nightly).\n // NOTE: intentionally takes an owned string to avoid downloading multiple times by accident\n fn download_ci_component(builder: &Builder<'_>, filename: String, prefix: &str, commit: &str) {\n-    download_component(\n-        builder,\n-        \"https://ci-artifacts.rust-lang.org/rustc-builds\",\n-        filename,\n-        prefix,\n-        commit,\n-        \"ci-rustc\",\n-        None,\n-    )\n+    download_component(builder, DownloadSource::CI, filename, prefix, commit, \"ci-rustc\")\n }\n \n fn download_component(\n     builder: &Builder<'_>,\n-    base_url: &str,\n+    mode: DownloadSource,\n     filename: String,\n     prefix: &str,\n     key: &str,\n     destination: &str,\n-    checksums: Option<HashMap<String, String>>,\n ) {\n     let cache_dst = builder.out.join(\"cache\");\n     let cache_dir = cache_dst.join(key);\n@@ -1594,20 +1566,31 @@ fn download_component(\n \n     let bin_root = builder.out.join(builder.config.build.triple).join(destination);\n     let tarball = cache_dir.join(&filename);\n-    let url = format!(\"{key}/{filename}\");\n+    let (base_url, url, should_verify) = match mode {\n+        DownloadSource::CI => (\n+            \"https://ci-artifacts.rust-lang.org/rustc-builds\".to_string(),\n+            format!(\"{key}/{filename}\"),\n+            false,\n+        ),\n+        DownloadSource::Dist => {\n+            let dist_server = env::var(\"RUSTUP_DIST_SERVER\")\n+                .unwrap_or(builder.stage0_metadata.dist_server.to_string());\n+            // NOTE: make `dist` part of the URL because that's how it's stored in src/stage0.json\n+            (dist_server, format!(\"dist/{key}/{filename}\"), true)\n+        }\n+    };\n \n     // For the beta compiler, put special effort into ensuring the checksums are valid.\n     // FIXME: maybe we should do this for download-rustc as well? but it would be a pain to update\n     // this on each and every nightly ...\n-    let checksum = if let Some(checksums) = &checksums {\n+    let checksum = if should_verify {\n         let error = format!(\n             \"src/stage0.json doesn't contain a checksum for {url}. \\\n             Pre-built artifacts might not be available for this \\\n             target at this time, see https://doc.rust-lang.org/nightly\\\n             /rustc/platform-support.html for more information.\"\n         );\n-        // TODO: add an enum { Commit, Published } so we don't have to hardcode `dist` in two places\n-        let sha256 = checksums.get(&format!(\"dist/{url}\")).expect(&error);\n+        let sha256 = builder.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n         if tarball.exists() {\n             if builder.verify(&tarball, sha256) {\n                 builder.unpack(&tarball, &bin_root, prefix);\n@@ -1627,7 +1610,7 @@ fn download_component(\n         None\n     };\n \n-    builder.download_component(base_url, &url, &tarball, \"\");\n+    builder.download_component(&base_url, &url, &tarball, \"\");\n     if let Some(sha256) = checksum {\n         if !builder.verify(&tarball, sha256) {\n             panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "022f2e0fc13874c3514608c32fd47086ca26763c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6115f4eba458e763370119b2a10a73ef595583bc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6115f4eba458e763370119b2a10a73ef595583bc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6115f4eba458e763370119b2a10a73ef595583bc", "patch": "@@ -118,6 +118,7 @@ use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n+use serde::Deserialize;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n@@ -294,6 +295,7 @@ pub struct Build {\n     targets: Vec<TargetSelection>,\n \n     // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n+    stage0_metadata: Stage0Metadata,\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n     initial_lld: PathBuf,\n@@ -320,6 +322,18 @@ pub struct Build {\n     metrics: metrics::BuildMetrics,\n }\n \n+#[derive(Deserialize)]\n+struct Stage0Metadata {\n+    dist_server: String,\n+    checksums_sha256: HashMap<String, String>,\n+    rustfmt: Option<RustfmtMetadata>,\n+}\n+#[derive(Deserialize)]\n+struct RustfmtMetadata {\n+    date: String,\n+    version: String,\n+}\n+\n #[derive(Debug)]\n struct Crate {\n     name: Interned<String>,\n@@ -468,7 +482,11 @@ impl Build {\n             bootstrap_out\n         };\n \n+        let stage0_json = t!(std::fs::read_to_string(&src.join(\"src\").join(\"stage0.json\")));\n+        let stage0_metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n+\n         let mut build = Build {\n+            stage0_metadata,\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             initial_lld,"}]}