{"sha": "1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MzdjZDRmYjE1NTJkZGVlZWU0ZjU5MGE5Y2JhNTlhM2Y5OWIyYjk=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-14T21:17:04Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-15T21:09:57Z"}, "message": "Remove refs from pat slices", "tree": {"sha": "14a275c5a1a000f790bbb46bc623de0abe9ac640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a275c5a1a000f790bbb46bc623de0abe9ac640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "html_url": "https://github.com/rust-lang/rust/commit/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26366828a40403c83d6cc29bf5614a6e0388354c", "url": "https://api.github.com/repos/rust-lang/rust/commits/26366828a40403c83d6cc29bf5614a6e0388354c", "html_url": "https://github.com/rust-lang/rust/commit/26366828a40403c83d6cc29bf5614a6e0388354c"}], "stats": {"total": 153, "additions": 85, "deletions": 68}, "files": [{"sha": "7fecf537cfbd3fc077008e6a2bc5ff4c38fde740", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -1067,6 +1067,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         eq_sign_span: Span,\n         assignments: &mut Vec<hir::Stmt<'hir>>,\n     ) -> &'hir hir::Pat<'hir> {\n+        self.arena.alloc(self.destructure_assign_mut(lhs, eq_sign_span, assignments))\n+    }\n+\n+    fn destructure_assign_mut(\n+        &mut self,\n+        lhs: &Expr,\n+        eq_sign_span: Span,\n+        assignments: &mut Vec<hir::Stmt<'hir>>,\n+    ) -> hir::Pat<'hir> {\n         match &lhs.kind {\n             // Underscore pattern.\n             ExprKind::Underscore => {\n@@ -1080,7 +1089,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let (before, after) = pats.split_at(i);\n                     hir::PatKind::Slice(\n                         before,\n-                        Some(self.pat_without_dbm(span, hir::PatKind::Wild)),\n+                        Some(self.arena.alloc(self.pat_without_dbm(span, hir::PatKind::Wild))),\n                         after,\n                     )\n                 } else {\n@@ -1165,14 +1174,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let tuple_pat = hir::PatKind::Tuple(&[], Some(0));\n                     return self.pat_without_dbm(lhs.span, tuple_pat);\n                 } else {\n-                    return self.destructure_assign(e, eq_sign_span, assignments);\n+                    return self.destructure_assign_mut(e, eq_sign_span, assignments);\n                 }\n             }\n             _ => {}\n         }\n         // Treat all other cases as normal lvalue.\n         let ident = Ident::new(sym::lhs, lhs.span);\n-        let (pat, binding) = self.pat_ident(lhs.span, ident);\n+        let (pat, binding) = self.pat_ident_mut(lhs.span, ident);\n         let ident = self.expr_ident(lhs.span, ident, binding);\n         let assign = hir::ExprKind::Assign(self.lower_expr(lhs), ident, eq_sign_span);\n         let expr = self.expr(lhs.span, assign, ThinVec::new());\n@@ -1191,7 +1200,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         ctx: &str,\n         eq_sign_span: Span,\n         assignments: &mut Vec<hir::Stmt<'hir>>,\n-    ) -> (&'hir [&'hir hir::Pat<'hir>], Option<(usize, Span)>) {\n+    ) -> (&'hir [hir::Pat<'hir>], Option<(usize, Span)>) {\n         let mut rest = None;\n         let elements =\n             self.arena.alloc_from_iter(elements.iter().enumerate().filter_map(|(i, e)| {\n@@ -1204,7 +1213,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     }\n                     None\n                 } else {\n-                    Some(self.destructure_assign(e, eq_sign_span, assignments))\n+                    Some(self.destructure_assign_mut(e, eq_sign_span, assignments))\n                 }\n             }));\n         (elements, rest)"}, {"sha": "a8d6a99cbeb4c91007ba4d68991f509c6308e088", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -2577,21 +2577,35 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.pat_ident_binding_mode(span, ident, hir::BindingAnnotation::Unannotated)\n     }\n \n+    fn pat_ident_mut(&mut self, span: Span, ident: Ident) -> (hir::Pat<'hir>, hir::HirId) {\n+        self.pat_ident_binding_mode_mut(span, ident, hir::BindingAnnotation::Unannotated)\n+    }\n+\n     fn pat_ident_binding_mode(\n         &mut self,\n         span: Span,\n         ident: Ident,\n         bm: hir::BindingAnnotation,\n     ) -> (&'hir hir::Pat<'hir>, hir::HirId) {\n+        let (pat, hir_id) = self.pat_ident_binding_mode_mut(span, ident, bm);\n+        (self.arena.alloc(pat), hir_id)\n+    }\n+\n+    fn pat_ident_binding_mode_mut(\n+        &mut self,\n+        span: Span,\n+        ident: Ident,\n+        bm: hir::BindingAnnotation,\n+    ) -> (hir::Pat<'hir>, hir::HirId) {\n         let hir_id = self.next_id();\n \n         (\n-            self.arena.alloc(hir::Pat {\n+            hir::Pat {\n                 hir_id,\n                 kind: hir::PatKind::Binding(bm, hir_id, ident.with_span_pos(span), None),\n                 span,\n                 default_binding_modes: true,\n-            }),\n+            },\n             hir_id,\n         )\n     }\n@@ -2609,13 +2623,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         })\n     }\n \n-    fn pat_without_dbm(&mut self, span: Span, kind: hir::PatKind<'hir>) -> &'hir hir::Pat<'hir> {\n-        self.arena.alloc(hir::Pat {\n-            hir_id: self.next_id(),\n-            kind,\n-            span,\n-            default_binding_modes: false,\n-        })\n+    fn pat_without_dbm(&mut self, span: Span, kind: hir::PatKind<'hir>) -> hir::Pat<'hir> {\n+        hir::Pat { hir_id: self.next_id(), kind, span, default_binding_modes: false }\n     }\n \n     fn ty_path("}, {"sha": "d81ddd2c082e7af2bc08a3aeb96a7b7f2e458b12", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -10,7 +10,11 @@ use rustc_span::symbol::Ident;\n use rustc_span::{source_map::Spanned, Span};\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n-    crate fn lower_pat(&mut self, mut pattern: &Pat) -> &'hir hir::Pat<'hir> {\n+    crate fn lower_pat(&mut self, pattern: &Pat) -> &'hir hir::Pat<'hir> {\n+        self.arena.alloc(self.lower_pat_mut(pattern))\n+    }\n+\n+    crate fn lower_pat_mut(&mut self, mut pattern: &Pat) -> hir::Pat<'hir> {\n         ensure_sufficient_stack(|| {\n             // loop here to avoid recursion\n             let node = loop {\n@@ -34,7 +38,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     PatKind::Or(ref pats) => {\n                         break hir::PatKind::Or(\n-                            self.arena.alloc_from_iter(pats.iter().map(|x| self.lower_pat(x))),\n+                            self.arena.alloc_from_iter(pats.iter().map(|x| self.lower_pat_mut(x))),\n                         );\n                     }\n                     PatKind::Path(ref qself, ref path) => {\n@@ -101,7 +105,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         pats: &[P<Pat>],\n         ctx: &str,\n-    ) -> (&'hir [&'hir hir::Pat<'hir>], Option<usize>) {\n+    ) -> (&'hir [hir::Pat<'hir>], Option<usize>) {\n         let mut elems = Vec::with_capacity(pats.len());\n         let mut rest = None;\n \n@@ -140,7 +144,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n \n             // It was not a sub-tuple pattern so lower it normally.\n-            elems.push(self.lower_pat(pat));\n+            elems.push(self.lower_pat_mut(pat));\n         }\n \n         for (_, pat) in iter {\n@@ -149,7 +153,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // ...but there was one again, so error.\n                 self.ban_extra_rest_pat(pat.span, rest.unwrap().1, ctx);\n             } else {\n-                elems.push(self.lower_pat(pat));\n+                elems.push(self.lower_pat_mut(pat));\n             }\n         }\n \n@@ -189,11 +193,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Record, lower it to `$binding_mode $ident @ _`, and stop here.\n                 PatKind::Ident(ref bm, ident, Some(ref sub)) if sub.is_rest() => {\n                     prev_rest_span = Some(sub.span);\n-                    slice = Some(lower_rest_sub(self, pat, bm, ident, sub));\n+                    slice = Some(self.arena.alloc(lower_rest_sub(self, pat, bm, ident, sub)));\n                     break;\n                 }\n                 // It was not a subslice pattern so lower it normally.\n-                _ => before.push(self.lower_pat(pat)),\n+                _ => before.push(self.lower_pat_mut(pat)),\n             }\n         }\n \n@@ -214,7 +218,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 self.ban_extra_rest_pat(rest_span, prev_rest_span.unwrap(), \"slice\");\n             } else {\n                 // Lower the pattern normally.\n-                after.push(self.lower_pat(pat));\n+                after.push(self.lower_pat_mut(pat));\n             }\n         }\n \n@@ -268,17 +272,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn pat_wild_with_node_id_of(&mut self, p: &Pat) -> &'hir hir::Pat<'hir> {\n-        self.pat_with_node_id_of(p, hir::PatKind::Wild)\n+        self.arena.alloc(self.pat_with_node_id_of(p, hir::PatKind::Wild))\n     }\n \n     /// Construct a `Pat` with the `HirId` of `p.id` lowered.\n-    fn pat_with_node_id_of(&mut self, p: &Pat, kind: hir::PatKind<'hir>) -> &'hir hir::Pat<'hir> {\n-        self.arena.alloc(hir::Pat {\n+    fn pat_with_node_id_of(&mut self, p: &Pat, kind: hir::PatKind<'hir>) -> hir::Pat<'hir> {\n+        hir::Pat {\n             hir_id: self.lower_node_id(p.id),\n             kind,\n             span: p.span,\n             default_binding_modes: true,\n-        })\n+        }\n     }\n \n     /// Emit a friendly error for extra `..` patterns in a tuple/tuple struct/slice pattern."}, {"sha": "4b2679e164aac6505208cf0427a9d4c49dc55348", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -808,13 +808,13 @@ impl<'hir> Pat<'hir> {\n         }\n \n         use PatKind::*;\n-        match &self.kind {\n+        match self.kind {\n             Wild | Lit(_) | Range(..) | Binding(.., None) | Path(_) => true,\n             Box(s) | Ref(s, _) | Binding(.., Some(s)) => s.walk_short_(it),\n             Struct(_, fields, _) => fields.iter().all(|field| field.pat.walk_short_(it)),\n             TupleStruct(_, s, _) | Tuple(s, _) | Or(s) => s.iter().all(|p| p.walk_short_(it)),\n             Slice(before, slice, after) => {\n-                before.iter().chain(slice.iter()).chain(after.iter()).all(|p| p.walk_short_(it))\n+                before.iter().chain(slice).chain(after.iter()).all(|p| p.walk_short_(it))\n             }\n         }\n     }\n@@ -836,13 +836,13 @@ impl<'hir> Pat<'hir> {\n         }\n \n         use PatKind::*;\n-        match &self.kind {\n+        match self.kind {\n             Wild | Lit(_) | Range(..) | Binding(.., None) | Path(_) => {}\n             Box(s) | Ref(s, _) | Binding(.., Some(s)) => s.walk_(it),\n             Struct(_, fields, _) => fields.iter().for_each(|field| field.pat.walk_(it)),\n             TupleStruct(_, s, _) | Tuple(s, _) | Or(s) => s.iter().for_each(|p| p.walk_(it)),\n             Slice(before, slice, after) => {\n-                before.iter().chain(slice.iter()).chain(after.iter()).for_each(|p| p.walk_(it))\n+                before.iter().chain(slice).chain(after.iter()).for_each(|p| p.walk_(it))\n             }\n         }\n     }\n@@ -940,19 +940,19 @@ pub enum PatKind<'hir> {\n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// `0 <= position <= subpats.len()`\n-    TupleStruct(QPath<'hir>, &'hir [&'hir Pat<'hir>], Option<usize>),\n+    TupleStruct(QPath<'hir>, &'hir [Pat<'hir>], Option<usize>),\n \n     /// An or-pattern `A | B | C`.\n     /// Invariant: `pats.len() >= 2`.\n-    Or(&'hir [&'hir Pat<'hir>]),\n+    Or(&'hir [Pat<'hir>]),\n \n     /// A path pattern for an unit struct/variant or a (maybe-associated) constant.\n     Path(QPath<'hir>),\n \n     /// A tuple pattern (e.g., `(a, b)`).\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// `0 <= position <= subpats.len()`\n-    Tuple(&'hir [&'hir Pat<'hir>], Option<usize>),\n+    Tuple(&'hir [Pat<'hir>], Option<usize>),\n \n     /// A `box` pattern.\n     Box(&'hir Pat<'hir>),\n@@ -975,7 +975,7 @@ pub enum PatKind<'hir> {\n     /// ```\n     /// PatKind::Slice([Binding(a), Binding(b)], Some(Wild), [Binding(c), Binding(d)])\n     /// ```\n-    Slice(&'hir [&'hir Pat<'hir>], Option<&'hir Pat<'hir>>, &'hir [&'hir Pat<'hir>]),\n+    Slice(&'hir [Pat<'hir>], Option<&'hir Pat<'hir>>, &'hir [Pat<'hir>]),\n }\n \n #[derive(Copy, Clone, PartialEq, Encodable, Debug, HashStable_Generic)]"}, {"sha": "046f41400366d69c1a3581c29058b685e09f7cf7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n     fn lower_tuple_subpats(\n         &mut self,\n-        pats: &'tcx [&'tcx hir::Pat<'tcx>],\n+        pats: &'tcx [hir::Pat<'tcx>],\n         expected_len: usize,\n         gap_pos: Option<usize>,\n     ) -> Vec<FieldPat<'tcx>> {\n@@ -338,7 +338,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n-    fn lower_patterns(&mut self, pats: &'tcx [&'tcx hir::Pat<'tcx>]) -> Vec<Pat<'tcx>> {\n+    fn lower_patterns(&mut self, pats: &'tcx [hir::Pat<'tcx>]) -> Vec<Pat<'tcx>> {\n         pats.iter().map(|p| self.lower_pattern(p)).collect()\n     }\n \n@@ -350,9 +350,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         &mut self,\n         span: Span,\n         ty: Ty<'tcx>,\n-        prefix: &'tcx [&'tcx hir::Pat<'tcx>],\n+        prefix: &'tcx [hir::Pat<'tcx>],\n         slice: &'tcx Option<&'tcx hir::Pat<'tcx>>,\n-        suffix: &'tcx [&'tcx hir::Pat<'tcx>],\n+        suffix: &'tcx [hir::Pat<'tcx>],\n     ) -> PatKind<'tcx> {\n         let prefix = self.lower_patterns(prefix);\n         let slice = self.lower_opt_pattern(slice);"}, {"sha": "981a040e66072991b67be655ec52e41b9d2ca113", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &'tcx Pat<'tcx>,\n         qpath: &'tcx hir::QPath<'tcx>,\n-        subpats: &'tcx [&'tcx Pat<'tcx>],\n+        subpats: &'tcx [Pat<'tcx>],\n         ddpos: Option<usize>,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n@@ -982,7 +982,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat_span: Span,\n         res: Res,\n         qpath: &hir::QPath<'_>,\n-        subpats: &'tcx [&'tcx Pat<'tcx>],\n+        subpats: &'tcx [Pat<'tcx>],\n         fields: &'tcx [ty::FieldDef],\n         expected: Ty<'tcx>,\n         had_err: bool,\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_tuple(\n         &self,\n         span: Span,\n-        elements: &'tcx [&'tcx Pat<'tcx>],\n+        elements: &'tcx [Pat<'tcx>],\n         ddpos: Option<usize>,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n@@ -1746,9 +1746,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_pat_slice(\n         &self,\n         span: Span,\n-        before: &'tcx [&'tcx Pat<'tcx>],\n+        before: &'tcx [Pat<'tcx>],\n         slice: Option<&'tcx Pat<'tcx>>,\n-        after: &'tcx [&'tcx Pat<'tcx>],\n+        after: &'tcx [Pat<'tcx>],\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,"}, {"sha": "dea016a467d646ca005cccc08d99068228ff5cb9", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -260,17 +260,12 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n         PatKind::Wild | PatKind::Struct(..) => return kw::Underscore,\n         PatKind::Binding(_, _, ident, _) => return ident.name,\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n-        PatKind::Or(ref pats) => pats\n-            .iter()\n-            .map(|p| name_from_pat(&**p).to_string())\n-            .collect::<Vec<String>>()\n-            .join(\" | \"),\n+        PatKind::Or(ref pats) => {\n+            pats.iter().map(|p| name_from_pat(p).to_string()).collect::<Vec<String>>().join(\" | \")\n+        }\n         PatKind::Tuple(ref elts, _) => format!(\n             \"({})\",\n-            elts.iter()\n-                .map(|p| name_from_pat(&**p).to_string())\n-                .collect::<Vec<String>>()\n-                .join(\", \")\n+            elts.iter().map(|p| name_from_pat(p).to_string()).collect::<Vec<String>>().join(\", \")\n         ),\n         PatKind::Box(ref p) => return name_from_pat(&**p),\n         PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n@@ -282,9 +277,9 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n         }\n         PatKind::Range(..) => return kw::Underscore,\n         PatKind::Slice(ref begin, ref mid, ref end) => {\n-            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n+            let begin = begin.iter().map(|p| name_from_pat(p).to_string());\n             let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n-            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n+            let end = end.iter().map(|p| name_from_pat(p).to_string());\n             format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n         }\n     })"}, {"sha": "9d8d77cf8f089aba80c1edd48bfd95d0dbda990f", "filename": "src/tools/clippy/clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -61,13 +61,13 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)| {\n                 match arm.pat.kind {\n                     PatKind::Path(ref qpath) => is_lang_ctor(cx, qpath, OptionNone),\n-                    PatKind::TupleStruct(ref qpath, &[pat], _) =>\n+                    PatKind::TupleStruct(ref qpath, [pat], _) =>\n                         matches!(pat.kind, PatKind::Wild) && is_lang_ctor(cx, qpath, ResultErr),\n                     _ => false,\n                 }\n             });\n             let unwrap_arm = &arms[1 - idx];\n-            if let PatKind::TupleStruct(ref qpath, &[unwrap_pat], _) = unwrap_arm.pat.kind;\n+            if let PatKind::TupleStruct(ref qpath, [unwrap_pat], _) = unwrap_arm.pat.kind;\n             if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n             if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n             if path_to_local_id(unwrap_arm.body, binding_hir_id);"}, {"sha": "6d5ce3373f79d523060a219922875acf3a3cec7c", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -625,7 +625,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             if let PatKind::TupleStruct(\n                 QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n             if args.len() == 1;\n-            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(args[0]).kind;\n+            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n             let body = remove_blocks(arms[0].body);\n             if path_to_local_id(body, arg);\n "}, {"sha": "b2be35bdddb38fbb18625b0c305c092ca9ace406", "filename": "src/tools/clippy/clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -132,7 +132,7 @@ fn detect_option_if_let_else<'tcx>(\n         if !is_else_clause(cx.tcx, expr);\n         if arms.len() == 2;\n         if !is_result_ok(cx, cond_expr); // Don't lint on Result::ok because a different lint does it already\n-        if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n+        if let PatKind::TupleStruct(struct_qpath, [inner_pat], _) = &arms[0].pat.kind;\n         if is_lang_ctor(cx, struct_qpath, OptionSome);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n         if !contains_return_break_continue_macro(arms[0].body);"}, {"sha": "ea4065d371b81a1bb11b243fbd66179ff7265f5b", "filename": "src/tools/clippy/clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -258,7 +258,7 @@ fn get_variant<'a>(adt_def: &'a AdtDef, qpath: &QPath<'_>) -> Option<&'a Variant\n \n fn find_first_mismatch_in_tuple<'tcx, I>(\n     cx: &LateContext<'tcx>,\n-    pats: &[&Pat<'_>],\n+    pats: &[Pat<'_>],\n     ty_iter_src: I,\n ) -> Option<(Span, Mutability, Level)>\n where"}, {"sha": "4f0a9f442ed9f5b4893a67d135477aba49075c77", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=1537cd4fb1552ddeeee4f590a9cba59a3f99b2b9", "patch": "@@ -255,7 +255,7 @@ pub fn in_macro(span: Span) -> bool {\n }\n \n /// Checks if given pattern is a wildcard (`_`)\n-pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n+pub fn is_wild(pat: &Pat<'_>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n }\n \n@@ -1023,8 +1023,8 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         )\n     }\n \n-    fn are_refutable<'a, I: Iterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, mut i: I) -> bool {\n-        i.any(|pat| is_refutable(cx, pat))\n+    fn are_refutable<'a, I: IntoIterator<Item = &'a Pat<'a>>>(cx: &LateContext<'_>, i: I) -> bool {\n+        i.into_iter().any(|pat| is_refutable(cx, pat))\n     }\n \n     match pat.kind {\n@@ -1035,23 +1035,23 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n         PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n         PatKind::Or(pats) => {\n             // TODO: should be the honest check, that pats is exhaustive set\n-            are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            are_refutable(cx, pats)\n         },\n-        PatKind::Tuple(pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n+        PatKind::Tuple(pats, _) => are_refutable(cx, pats),\n         PatKind::Struct(ref qpath, fields, _) => {\n             is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, fields.iter().map(|field| &*field.pat))\n         },\n         PatKind::TupleStruct(ref qpath, pats, _) => {\n-            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats.iter().map(|pat| &**pat))\n+            is_enum_variant(cx, qpath, pat.hir_id) || are_refutable(cx, pats)\n         },\n-        PatKind::Slice(head, ref middle, tail) => {\n+        PatKind::Slice(head, middle, tail) => {\n             match &cx.typeck_results().node_type(pat.hir_id).kind() {\n                 rustc_ty::Slice(..) => {\n                     // [..] is the only irrefutable slice pattern.\n                     !head.is_empty() || middle.is_none() || !tail.is_empty()\n                 },\n                 rustc_ty::Array(..) => {\n-                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()).map(|pat| &**pat))\n+                    are_refutable(cx, head.iter().chain(middle).chain(tail.iter()))\n                 },\n                 _ => {\n                     // unreachable!()\n@@ -1066,7 +1066,7 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().copied().for_each(f);\n+        pats.iter().for_each(f);\n     } else {\n         f(pat);\n     }"}]}