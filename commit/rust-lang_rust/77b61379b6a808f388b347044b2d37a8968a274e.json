{"sha": "77b61379b6a808f388b347044b2d37a8968a274e", "node_id": "C_kwDOAAsO6NoAKDc3YjYxMzc5YjZhODA4ZjM4OGIzNDcwNDRiMmQzN2E4OTY4YTI3NGU", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-12-13T09:51:13Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-09T08:41:21Z"}, "message": "Change based on comments\n\nInstead of just switching to a probe, check for different matches, and see how many there are.\nIf one, unify it, otherwise return true and let it be unified later.", "tree": {"sha": "dc2abaddd9dd5c4403b5deea18f5002dc16267fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2abaddd9dd5c4403b5deea18f5002dc16267fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b61379b6a808f388b347044b2d37a8968a274e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b61379b6a808f388b347044b2d37a8968a274e", "html_url": "https://github.com/rust-lang/rust/commit/77b61379b6a808f388b347044b2d37a8968a274e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b61379b6a808f388b347044b2d37a8968a274e/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abe040d876f697ef86b1ad395caf68c03ecbf046", "url": "https://api.github.com/repos/rust-lang/rust/commits/abe040d876f697ef86b1ad395caf68c03ecbf046", "html_url": "https://github.com/rust-lang/rust/commit/abe040d876f697ef86b1ad395caf68c03ecbf046"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "4f0b5f59402462fc5022ba93fe416a93445f3115", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/77b61379b6a808f388b347044b2d37a8968a274e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b61379b6a808f388b347044b2d37a8968a274e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=77b61379b6a808f388b347044b2d37a8968a274e", "patch": "@@ -168,7 +168,9 @@ fn satisfied_from_param_env<'tcx>(\n         param_env: ty::ParamEnv<'tcx>,\n \n         infcx: &'a InferCtxt<'tcx>,\n+        single_match: Option<Result<ty::Const<'tcx>, ()>>,\n     }\n+\n     impl<'a, 'tcx> TypeVisitor<'tcx> for Visitor<'a, 'tcx> {\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -179,7 +181,9 @@ fn satisfied_from_param_env<'tcx>(\n                     && ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct).is_ok()\n                     && ocx.select_all_or_error().is_empty()\n             }) {\n-                ControlFlow::BREAK\n+                self.single_match =\n+                    if self.single_match.is_none() { Some(Ok(c)) } else { Some(Err(())) };\n+                ControlFlow::CONTINUE\n             } else if let ty::ConstKind::Expr(e) = c.kind() {\n                 e.visit_with(self)\n             } else {\n@@ -195,22 +199,37 @@ fn satisfied_from_param_env<'tcx>(\n         }\n     }\n \n+    let mut single_match: Option<Result<ty::Const<'tcx>, ()>> = None;\n+\n     for pred in param_env.caller_bounds() {\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(ce) => {\n                 let b_ct = tcx.expand_abstract_consts(ce);\n-                let mut v = Visitor { ct, infcx, param_env };\n-                let result = b_ct.visit_with(&mut v);\n-\n-                if let ControlFlow::Break(()) = result {\n-                    debug!(\"is_const_evaluatable: yes\");\n-                    return true;\n+                let mut v = Visitor { ct, infcx, param_env, single_match: None };\n+                let _ = b_ct.visit_with(&mut v);\n+                if let Some(inner) = v.single_match {\n+                    single_match = if single_match.is_none() { Some(inner) } else { Some(Err(())) };\n                 }\n             }\n             _ => {} // don't care\n         }\n     }\n \n+    if let Some(c) = single_match {\n+        if let Ok(c) = c {\n+            let is_ok = infcx\n+                .commit_if_ok(|_| {\n+                    let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+                    assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n+                    assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n+                    if ocx.select_all_or_error().is_empty() { Ok(()) } else { Err(()) }\n+                })\n+                .is_ok();\n+            assert!(is_ok);\n+        }\n+        return true;\n+    }\n+\n     debug!(\"is_const_evaluatable: no\");\n     false\n }"}, {"sha": "d64468767eb459c5c3b7b24ffda168e04ccf667c", "filename": "src/test/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77b61379b6a808f388b347044b2d37a8968a274e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b61379b6a808f388b347044b2d37a8968a274e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.rs?ref=77b61379b6a808f388b347044b2d37a8968a274e", "patch": "@@ -16,6 +16,7 @@ where\n {\n     foo::<_, L>([(); L + 1 + L]);\n     //~^ ERROR: unconstrained generic constant\n+    //~| ERROR: mismatched types\n }\n \n fn main() {}"}, {"sha": "da5194696e657bb032741d6d31fd29cf02847321", "filename": "src/test/ui/const-generics/generic_const_exprs/const_kind_expr/wf_obligation.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77b61379b6a808f388b347044b2d37a8968a274e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77b61379b6a808f388b347044b2d37a8968a274e/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_kind_expr%2Fwf_obligation.stderr?ref=77b61379b6a808f388b347044b2d37a8968a274e", "patch": "@@ -1,3 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/wf_obligation.rs:17:17\n+   |\n+LL |     foo::<_, L>([(); L + 1 + L]);\n+   |                 ^^^^^^^^^^^^^^^ expected `N + 1 + M`, found `L + 1 + L`\n+   |\n+   = note: expected constant `N + 1 + M`\n+              found constant `L + 1 + L`\n+\n error: unconstrained generic constant\n   --> $DIR/wf_obligation.rs:17:22\n    |\n@@ -6,5 +15,6 @@ LL |     foo::<_, L>([(); L + 1 + L]);\n    |\n    = help: try adding a `where` bound using this expression: `where [(); L + 1 + L]:`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}