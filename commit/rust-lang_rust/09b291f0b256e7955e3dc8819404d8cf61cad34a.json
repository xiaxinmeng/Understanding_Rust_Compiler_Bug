{"sha": "09b291f0b256e7955e3dc8819404d8cf61cad34a", "node_id": "C_kwDOAAsO6NoAKDA5YjI5MWYwYjI1NmU3OTU1ZTNkYzg4MTk0MDRkOGNmNjFjYWQzNGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-03T12:02:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-05T13:18:22Z"}, "message": "mir-interpret now treats unions as non-immediate, even if they have scalar layout, allowing partially initializing them", "tree": {"sha": "6b330b9a043efcd74d734e5f6ef83e73eb2d2c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b330b9a043efcd74d734e5f6ef83e73eb2d2c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b291f0b256e7955e3dc8819404d8cf61cad34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b291f0b256e7955e3dc8819404d8cf61cad34a", "html_url": "https://github.com/rust-lang/rust/commit/09b291f0b256e7955e3dc8819404d8cf61cad34a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b291f0b256e7955e3dc8819404d8cf61cad34a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d32ce37a171663048a4c4a536803434e40f52bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32ce37a171663048a4c4a536803434e40f52bd6", "html_url": "https://github.com/rust-lang/rust/commit/d32ce37a171663048a4c4a536803434e40f52bd6"}], "stats": {"total": 162, "additions": 115, "deletions": 47}, "files": [{"sha": "ed23df8289d3878d06b309aa00533cb19744804e", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n-use rustc_target::abi::Abi;\n+use rustc_target::abi::{self, Abi};\n use std::borrow::Cow;\n use std::convert::TryInto;\n \n@@ -119,7 +119,7 @@ pub(super) fn op_to_const<'tcx>(\n     // the usual cases of extracting e.g. a `usize`, without there being a real use case for the\n     // `Undef` situation.\n     let try_as_immediate = match op.layout.abi {\n-        Abi::Scalar(..) => true,\n+        Abi::Scalar(abi::Scalar::Initialized { .. }) => true,\n         Abi::ScalarPair(..) => match op.layout.ty.kind() {\n             ty::Ref(_, inner, _) => match *inner.kind() {\n                 ty::Slice(elem) => elem == ecx.tcx.types.u8,"}, {"sha": "1bfd10408bffef37989eae391e0a985624e64455", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n use rustc_middle::{mir, ty};\n-use rustc_target::abi::{Abi, HasDataLayout, Size, TagEncoding};\n+use rustc_target::abi::{self, Abi, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n \n use super::{\n@@ -268,14 +268,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // It may seem like all types with `Scalar` or `ScalarPair` ABI are fair game at this point.\n         // However, `MaybeUninit<u64>` is considered a `Scalar` as far as its layout is concerned --\n         // and yet cannot be represented by an interpreter `Scalar`, since we have to handle the\n-        // case where some of the bytes are initialized and others are not. So, we only permit\n-        // reads from `Scalar`s and `ScalarPair`s that cannot be uninitialized.\n+        // case where some of the bytes are initialized and others are not. So, we need an extra\n+        // check that walks over the type of `mplace` to make sure it is truly correct to treat this\n+        // like a `Scalar` (or `ScalarPair`).\n         match mplace.layout.abi {\n-            Abi::Scalar(..) => {\n+            Abi::Scalar(abi::Scalar::Initialized { .. }) => {\n                 let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;\n                 Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))\n             }\n-            Abi::ScalarPair(a, b) => {\n+            Abi::ScalarPair(\n+                abi::Scalar::Initialized { value: a, .. },\n+                abi::Scalar::Initialized { value: b, .. },\n+            ) => {\n                 // We checked `ptr_align` above, so all fields will have the alignment they need.\n                 // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,\n                 // which `ptr.offset(b_offset)` cannot possibly fail to satisfy."}, {"sha": "cf6d8a52a766897258d39abe33a75cfc2f65275f", "filename": "src/test/mir-opt/const_prop/invalid_constant.main.ConstProp.diff", "status": "modified", "additions": 51, "deletions": 37, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.main.ConstProp.diff?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -3,56 +3,70 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/invalid_constant.rs:15:11: 15:11\n-      let _1: main::InvalidChar;           // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n-      let mut _3: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:46\n-      let mut _5: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:56\n+      let _1: char;                        // in scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n+      let mut _2: main::InvalidChar;       // in scope 0 at $DIR/invalid_constant.rs:21:34: 21:63\n+      let mut _4: E;                       // in scope 0 at $DIR/invalid_constant.rs:28:25: 28:59\n+      let mut _5: main::InvalidTag;        // in scope 0 at $DIR/invalid_constant.rs:28:34: 28:55\n+      let mut _7: Empty;                   // in scope 0 at $DIR/invalid_constant.rs:35:35: 35:73\n+      let mut _8: main::NoVariants;        // in scope 0 at $DIR/invalid_constant.rs:35:44: 35:65\n       scope 1 {\n           debug _invalid_char => _1;       // in scope 1 at $DIR/invalid_constant.rs:21:9: 21:22\n-          let _2: [main::InvalidTag; 1];   // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n-          scope 2 {\n-              debug _invalid_tag => _2;    // in scope 2 at $DIR/invalid_constant.rs:28:9: 28:21\n-              let _4: [main::NoVariants; 1]; // in scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n-              scope 3 {\n-                  debug _enum_without_variants => _4; // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n-                  let _6: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n-                  scope 4 {\n-                      debug _non_utf8_str => _6; // in scope 4 at $DIR/invalid_constant.rs:39:9: 39:22\n+          let _3: [E; 1];                  // in scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          scope 3 {\n+              debug _invalid_tag => _3;    // in scope 3 at $DIR/invalid_constant.rs:28:9: 28:21\n+              let _6: [Empty; 1];          // in scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+              scope 5 {\n+                  debug _enum_without_variants => _6; // in scope 5 at $DIR/invalid_constant.rs:35:9: 35:31\n+                  let _9: main::Str<\"\ufffd\ufffd\ufffd\">; // in scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n+                  scope 7 {\n+                      debug _non_utf8_str => _9; // in scope 7 at $DIR/invalid_constant.rs:39:9: 39:22\n                   }\n               }\n+              scope 6 {\n+              }\n+          }\n+          scope 4 {\n           }\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/invalid_constant.rs:21:9: 21:22\n--         _1 = const { InvalidChar { int: 0x110001 } }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n-+         _1 = const InvalidChar { int: 1114113_u32, chr: {transmute(0x00110001): char} }; // scope 0 at $DIR/invalid_constant.rs:21:25: 21:64\n-                                           // mir::Constant\n-                                           // + span: $DIR/invalid_constant.rs:21:25: 21:64\n--                                          // + literal: Const { ty: InvalidChar, val: Unevaluated(main::{constant#0}, [main::InvalidChar], None) }\n-+                                          // + literal: Const { ty: InvalidChar, val: Value(Scalar(0x00110001)) }\n-          StorageLive(_2);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n-          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n-          (_3.0: u32) = const 4_u32;       // scope 1 at $DIR/invalid_constant.rs:28:25: 28:46\n--         _2 = [move _3];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n-+         _2 = [const InvalidTag { int: 4_u32, e: Scalar(0x00000004): E }]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:47\n+          StorageLive(_2);                 // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+          (_2.0: u32) = const 1114113_u32; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:63\n+-         _1 = (_2.1: char);               // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n++         _1 = const {transmute(0x00110001): char}; // scope 2 at $DIR/invalid_constant.rs:21:34: 21:67\n+          StorageDead(_2);                 // scope 0 at $DIR/invalid_constant.rs:21:69: 21:70\n+          StorageLive(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:9: 28:21\n+          StorageLive(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:25: 28:59\n+          StorageLive(_5);                 // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+          (_5.0: u32) = const 4_u32;       // scope 4 at $DIR/invalid_constant.rs:28:34: 28:55\n+-         _4 = (_5.1: E);                  // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n+-         _3 = [move _4];                  // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n++         _4 = const Scalar(0x00000004): E; // scope 4 at $DIR/invalid_constant.rs:28:34: 28:57\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:28:24: 28:47\n-+                                          // + literal: Const { ty: InvalidTag, val: Value(Scalar(0x00000004)) }\n-          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:28:46: 28:47\n-          StorageLive(_4);                 // scope 2 at $DIR/invalid_constant.rs:35:9: 35:31\n-          StorageLive(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n-          (_5.0: u32) = const 0_u32;       // scope 2 at $DIR/invalid_constant.rs:35:35: 35:56\n--         _4 = [move _5];                  // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n-+         _4 = [const NoVariants { int: 0_u32, empty: Scalar(<ZST>): Empty }]; // scope 2 at $DIR/invalid_constant.rs:35:34: 35:57\n++                                          // + span: $DIR/invalid_constant.rs:28:34: 28:57\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n++         _3 = [const Scalar(0x00000004): E]; // scope 1 at $DIR/invalid_constant.rs:28:24: 28:60\n +                                          // mir::Constant\n-+                                          // + span: $DIR/invalid_constant.rs:35:34: 35:57\n-+                                          // + literal: Const { ty: NoVariants, val: Value(Scalar(0x00000000)) }\n-          StorageDead(_5);                 // scope 2 at $DIR/invalid_constant.rs:35:56: 35:57\n-          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:39:9: 39:22\n++                                          // + span: $DIR/invalid_constant.rs:28:24: 28:60\n++                                          // + literal: Const { ty: E, val: Value(Scalar(0x00000004)) }\n+          StorageDead(_4);                 // scope 1 at $DIR/invalid_constant.rs:28:59: 28:60\n+          StorageDead(_5);                 // scope 1 at $DIR/invalid_constant.rs:28:60: 28:61\n+          StorageLive(_6);                 // scope 3 at $DIR/invalid_constant.rs:35:9: 35:31\n+          StorageLive(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:35: 35:73\n+          StorageLive(_8);                 // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          (_8.0: u32) = const 0_u32;       // scope 6 at $DIR/invalid_constant.rs:35:44: 35:65\n+          nop;                             // scope 6 at $DIR/invalid_constant.rs:35:44: 35:71\n+          nop;                             // scope 3 at $DIR/invalid_constant.rs:35:34: 35:74\n+          StorageDead(_7);                 // scope 3 at $DIR/invalid_constant.rs:35:73: 35:74\n+          StorageDead(_8);                 // scope 3 at $DIR/invalid_constant.rs:35:74: 35:75\n+          StorageLive(_9);                 // scope 5 at $DIR/invalid_constant.rs:39:9: 39:22\n           nop;                             // scope 0 at $DIR/invalid_constant.rs:15:11: 42:2\n+          StorageDead(_9);                 // scope 5 at $DIR/invalid_constant.rs:42:1: 42:2\n           StorageDead(_6);                 // scope 3 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_4);                 // scope 2 at $DIR/invalid_constant.rs:42:1: 42:2\n-          StorageDead(_2);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n+          StorageDead(_3);                 // scope 1 at $DIR/invalid_constant.rs:42:1: 42:2\n           StorageDead(_1);                 // scope 0 at $DIR/invalid_constant.rs:42:1: 42:2\n           return;                          // scope 0 at $DIR/invalid_constant.rs:42:2: 42:2\n       }"}, {"sha": "0337a7ca851183658374fbc4af09191ba23ea6eb", "filename": "src/test/mir-opt/const_prop/invalid_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Finvalid_constant.rs?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -18,21 +18,21 @@ fn main() {\n         int: u32,\n         chr: char,\n     }\n-    let _invalid_char = const { InvalidChar { int: 0x110001 } };\n+    let _invalid_char = unsafe { InvalidChar { int: 0x110001 }.chr };\n \n     // An enum with an invalid tag. Regression test for #93688.\n     union InvalidTag {\n         int: u32,\n         e: E,\n     }\n-    let _invalid_tag = [InvalidTag { int: 4 }];\n+    let _invalid_tag = [unsafe { InvalidTag { int: 4 }.e }];\n \n     // An enum without variants. Regression test for #94073.\n     union NoVariants {\n         int: u32,\n         empty: Empty,\n     }\n-    let _enum_without_variants = [NoVariants { int: 0 }];\n+    let _enum_without_variants = [unsafe { NoVariants { int: 0 }.empty }];\n \n     // A non-UTF-8 string slice. Regression test for #75763 and #78520.\n     struct Str<const S: &'static str>;"}, {"sha": "46546eada7aacc613d7617d826928468ab1fe99a", "filename": "src/test/ui/consts/issue-69488.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69488.rs?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(const_ptr_write)]\n+#![feature(const_mut_refs)]\n+\n+// Or, equivalently: `MaybeUninit`.\n+pub union BagOfBits<T: Copy> {\n+    uninit: (),\n+    _storage: T,\n+}\n+\n+pub const fn make_1u8_bag<T: Copy>() -> BagOfBits<T> {\n+    assert!(core::mem::size_of::<T>() >= 1);\n+    let mut bag = BagOfBits { uninit: () };\n+    unsafe { (&mut bag as *mut _ as *mut u8).write(1); };\n+    bag\n+}\n+\n+pub fn check_bag<T: Copy>(bag: &BagOfBits<T>) {\n+    let val = unsafe { (bag as *const _ as *const u8).read() };\n+    assert_eq!(val, 1);\n+}\n+\n+fn main() {\n+    check_bag(&make_1u8_bag::<[usize; 1]>()); // Fine\n+    check_bag(&make_1u8_bag::<usize>()); // Fine\n+\n+    const CONST_ARRAY_BAG: BagOfBits<[usize; 1]> = make_1u8_bag();\n+    check_bag(&CONST_ARRAY_BAG); // Fine.\n+    const CONST_USIZE_BAG: BagOfBits<usize> = make_1u8_bag();\n+\n+    // Used to panic since CTFE would make the entire `BagOfBits<usize>` uninit\n+    check_bag(&CONST_USIZE_BAG);\n+}"}, {"sha": "de9ff730b66f386aa5bdd5a9f328d32d99941ac2", "filename": "src/test/ui/consts/issue-94371.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b291f0b256e7955e3dc8819404d8cf61cad34a/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94371.rs?ref=09b291f0b256e7955e3dc8819404d8cf61cad34a", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(const_swap)]\n+#![feature(const_mut_refs)]\n+\n+#[repr(C)]\n+struct Demo(u64, bool, u64, u32, u64, u64, u64);\n+\n+const C: (Demo, Demo) = {\n+    let mut x = Demo(1, true, 3, 4, 5, 6, 7);\n+    let mut y = Demo(10, false, 12, 13, 14, 15, 16);\n+    std::mem::swap(&mut x, &mut y);\n+    (x, y)\n+};\n+\n+fn main() {}"}]}