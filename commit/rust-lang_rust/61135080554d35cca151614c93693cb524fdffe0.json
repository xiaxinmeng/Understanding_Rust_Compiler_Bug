{"sha": "61135080554d35cca151614c93693cb524fdffe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTM1MDgwNTU0ZDM1Y2NhMTUxNjE0YzkzNjkzY2I1MjRmZGZmZTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-06T01:36:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:13Z"}, "message": "libstd: Remove two uses of `Cell`.", "tree": {"sha": "f8ef546d0748fc1fcff45f62284effa6e179bfc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8ef546d0748fc1fcff45f62284effa6e179bfc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61135080554d35cca151614c93693cb524fdffe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61135080554d35cca151614c93693cb524fdffe0", "html_url": "https://github.com/rust-lang/rust/commit/61135080554d35cca151614c93693cb524fdffe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61135080554d35cca151614c93693cb524fdffe0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e1db3d6ce37946afd7115dfcce510261537a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e1db3d6ce37946afd7115dfcce510261537a85", "html_url": "https://github.com/rust-lang/rust/commit/89e1db3d6ce37946afd7115dfcce510261537a85"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "44672984b64baf5bb00e96fc7d4df418c857e0b7", "filename": "src/libstd/rt/deque.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61135080554d35cca151614c93693cb524fdffe0/src%2Flibstd%2Frt%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61135080554d35cca151614c93693cb524fdffe0/src%2Flibstd%2Frt%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fdeque.rs?ref=61135080554d35cca151614c93693cb524fdffe0", "patch": "@@ -163,10 +163,9 @@ impl<T: Send> BufferPool<T> {\n \n     fn free(&mut self, buf: ~Buffer<T>) {\n         unsafe {\n-            use cell::Cell;\n-            let buf = Cell::new(buf);\n+            let mut buf = Some(buf);\n             self.pool.with(|pool| {\n-                let buf = buf.take();\n+                let buf = buf.take_unwrap();\n                 match pool.iter().position(|v| v.size() > buf.size()) {\n                     Some(i) => pool.insert(i, buf),\n                     None => pool.push(buf),"}, {"sha": "86cc895eb27dbd1a16b023ececd93af3eb5edd0d", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61135080554d35cca151614c93693cb524fdffe0/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61135080554d35cca151614c93693cb524fdffe0/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=61135080554d35cca151614c93693cb524fdffe0", "patch": "@@ -19,7 +19,6 @@ use prelude::*;\n \n use borrow;\n use cast::transmute;\n-use cell::Cell;\n use cleanup;\n use libc::{c_void, uintptr_t, c_char, size_t};\n use local_data;\n@@ -427,7 +426,6 @@ impl Coroutine {\n     }\n \n     fn build_start_wrapper(start: proc()) -> proc() {\n-        let start_cell = Cell::new(start);\n         let wrapper: proc() = proc() {\n             // First code after swap to this new context. Run our\n             // cleanup job.\n@@ -446,6 +444,7 @@ impl Coroutine {\n                 // need to unsafe_borrow.\n                 let task: *mut Task = Local::unsafe_borrow();\n \n+                let mut start_cell = Some(start);\n                 (*task).run(|| {\n                     // N.B. Removing `start` from the start wrapper\n                     // closure by emptying a cell is critical for\n@@ -457,7 +456,7 @@ impl Coroutine {\n                     // be in task context. By moving `start` out of\n                     // the closure, all the user code goes our of\n                     // scope while the task is still running.\n-                    let start = start_cell.take();\n+                    let start = start_cell.take_unwrap();\n                     start();\n                 });\n             }"}]}