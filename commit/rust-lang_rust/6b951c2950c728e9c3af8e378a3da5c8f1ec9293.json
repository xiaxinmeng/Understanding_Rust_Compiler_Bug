{"sha": "6b951c2950c728e9c3af8e378a3da5c8f1ec9293", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOTUxYzI5NTBjNzI4ZTljM2FmOGUzNzhhM2RhNWM4ZjFlYzkyOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T10:14:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T10:14:14Z"}, "message": "Rollup merge of #62663 - llogiq:more-questionmark-docs, r=GuillaumeGomez\n\nMore questionmarks in doctests\n\nThis removes the other `unwrap`s in the macro doctests, replacing them with `?`. For now, we need to specify the main function including the return type, we can get rid of that once the return type suggestion for `fn main() { .. }` works correctly.\n\nr? @QuietMisdreavus", "tree": {"sha": "292c336d62675529aa21e5eac26ed17d060eb29f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/292c336d62675529aa21e5eac26ed17d060eb29f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b951c2950c728e9c3af8e378a3da5c8f1ec9293", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRAz2CRBK7hj4Ov3rIwAAdHIIALGXJjYHvm6vYTrSwMA0V6kb\nVEWH4Bo/viTz8hwwadaxrqFA7P0UI4XEFN1Xolb2b+8t8A+3A083LFgna8o3lGdm\nycis3pfsnfE8DFT0skd/34/0gpKzMSj9dWmKlBtnzBLtZwYelTJLtRAkQbIf8UYO\nqipSYjUCc2a4NaLUi4dmGkkU2qYL22Vw6Mjh+OXKWdX/mAZgua+jJ/luGge3SDli\n6mxgpG4Qmq2a5JFHZX5C2ljYQU9b0igQi/yCmZ+PPKgqD2EOZt41+fg/zDfLjDcJ\nNV0pOfDGb+YYNmhoaUJy3OP/2YzVJ3BZPpSNxfLBw2r08ivo3+hN7cQB+AG1BwE=\n=K2Kw\n-----END PGP SIGNATURE-----\n", "payload": "tree 292c336d62675529aa21e5eac26ed17d060eb29f\nparent 435236b8877cdb98c82eaebfb7887782277265c5\nparent cbac7815fe49c8ed9c6ff2564670b186d5b3d9db\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564740854 +0200\ncommitter GitHub <noreply@github.com> 1564740854 +0200\n\nRollup merge of #62663 - llogiq:more-questionmark-docs, r=GuillaumeGomez\n\nMore questionmarks in doctests\n\nThis removes the other `unwrap`s in the macro doctests, replacing them with `?`. For now, we need to specify the main function including the return type, we can get rid of that once the return type suggestion for `fn main() { .. }` works correctly.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b951c2950c728e9c3af8e378a3da5c8f1ec9293", "html_url": "https://github.com/rust-lang/rust/commit/6b951c2950c728e9c3af8e378a3da5c8f1ec9293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b951c2950c728e9c3af8e378a3da5c8f1ec9293/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435236b8877cdb98c82eaebfb7887782277265c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/435236b8877cdb98c82eaebfb7887782277265c5", "html_url": "https://github.com/rust-lang/rust/commit/435236b8877cdb98c82eaebfb7887782277265c5"}, {"sha": "cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db", "html_url": "https://github.com/rust-lang/rust/commit/cbac7815fe49c8ed9c6ff2564670b186d5b3d9db"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "37cc71bff62b4e9fa42d4793f3229f7bab0aa718", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6b951c2950c728e9c3af8e378a3da5c8f1ec9293/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b951c2950c728e9c3af8e378a3da5c8f1ec9293/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=6b951c2950c728e9c3af8e378a3da5c8f1ec9293", "patch": "@@ -353,11 +353,15 @@ macro_rules! r#try {\n /// use std::fmt::Write as FmtWrite;\n /// use std::io::Write as IoWrite;\n ///\n-/// let mut s = String::new();\n-/// let mut v = Vec::new();\n-/// write!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n-/// write!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n-/// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n+/// fn main() -> Result<(), Box<dyn std::error::Error>> {\n+///     let mut s = String::new();\n+///     let mut v = Vec::new();\n+///\n+///     write!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n+///     write!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n+///     assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// Note: This macro can be used in `no_std` setups as well.\n@@ -399,14 +403,17 @@ macro_rules! write {\n /// # Examples\n ///\n /// ```\n-/// use std::io::Write;\n+/// use std::io::{Write, Result};\n ///\n-/// let mut w = Vec::new();\n-/// writeln!(&mut w).unwrap();\n-/// writeln!(&mut w, \"test\").unwrap();\n-/// writeln!(&mut w, \"formatted {}\", \"arguments\").unwrap();\n+/// fn main() -> Result<()> {\n+///     let mut w = Vec::new();\n+///     writeln!(&mut w)?;\n+///     writeln!(&mut w, \"test\")?;\n+///     writeln!(&mut w, \"formatted {}\", \"arguments\")?;\n ///\n-/// assert_eq!(&w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n+///     assert_eq!(&w[..], \"\\ntest\\nformatted arguments\\n\".as_bytes());\n+///     Ok(())\n+/// }\n /// ```\n ///\n /// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n@@ -417,11 +424,15 @@ macro_rules! write {\n /// use std::fmt::Write as FmtWrite;\n /// use std::io::Write as IoWrite;\n ///\n-/// let mut s = String::new();\n-/// let mut v = Vec::new();\n-/// writeln!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n-/// writeln!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n-/// assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n+/// fn main() -> Result<(), Box<dyn std::error::Error>> {\n+///     let mut s = String::new();\n+///     let mut v = Vec::new();\n+///\n+///     writeln!(&mut s, \"{} {}\", \"abc\", 123)?; // uses fmt::Write::write_fmt\n+///     writeln!(&mut v, \"s = {:?}\", s)?; // uses io::Write::write_fmt\n+///     assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n+///     Ok(())\n+/// }\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}