{"sha": "cf71538094b03c9c7116eceabc4985ab3b5e558a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzE1MzgwOTRiMDNjOWM3MTE2ZWNlYWJjNDk4NWFiM2I1ZTU1OGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T16:16:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-02T18:56:34Z"}, "message": "syntax: Optimize conversion `AttrItem` -> `MetaItem` by avoiding `outer_tokens`.", "tree": {"sha": "aad0d7de53443bcc26f5c3c9cc20ca5ef8418c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aad0d7de53443bcc26f5c3c9cc20ca5ef8418c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf71538094b03c9c7116eceabc4985ab3b5e558a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf71538094b03c9c7116eceabc4985ab3b5e558a", "html_url": "https://github.com/rust-lang/rust/commit/cf71538094b03c9c7116eceabc4985ab3b5e558a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf71538094b03c9c7116eceabc4985ab3b5e558a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537895535deaa766d59e44e1c9b941a8ad4adb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/537895535deaa766d59e44e1c9b941a8ad4adb10", "html_url": "https://github.com/rust-lang/rust/commit/537895535deaa766d59e44e1c9b941a8ad4adb10"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "079a0f6fafa2cba57e357162d9e0216cd0f026df", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cf71538094b03c9c7116eceabc4985ab3b5e558a/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf71538094b03c9c7116eceabc4985ab3b5e558a/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=cf71538094b03c9c7116eceabc4985ab3b5e558a", "patch": "@@ -278,17 +278,9 @@ impl MetaItem {\n \n impl AttrItem {\n     pub fn meta(&self, span: Span) -> Option<MetaItem> {\n-        let mut tokens = self.args.outer_tokens().trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n-            kind: if let Some(kind) = MetaItemKind::from_tokens(&mut tokens) {\n-                if tokens.peek().is_some() {\n-                    return None;\n-                }\n-                kind\n-            } else {\n-                return None;\n-            },\n+            kind: MetaItemKind::from_mac_args(&self.args)?,\n             span,\n         })\n     }\n@@ -567,26 +559,8 @@ impl MetaItemKind {\n         }\n     }\n \n-    fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItemKind>\n-        where I: Iterator<Item = TokenTree>,\n-    {\n-        let delimited = match tokens.peek().cloned() {\n-            Some(TokenTree::Token(token)) if token == token::Eq => {\n-                tokens.next();\n-                return if let Some(TokenTree::Token(token)) = tokens.next() {\n-                    Lit::from_token(&token).ok().map(MetaItemKind::NameValue)\n-                } else {\n-                    None\n-                };\n-            }\n-            Some(TokenTree::Delimited(_, delim, ref tts)) if delim == token::Paren => {\n-                tokens.next();\n-                tts.clone()\n-            }\n-            _ => return Some(MetaItemKind::Word),\n-        };\n-\n-        let mut tokens = delimited.into_trees().peekable();\n+    fn list_from_tokens(tokens: TokenStream) -> Option<MetaItemKind> {\n+        let mut tokens = tokens.into_trees().peekable();\n         let mut result = Vec::new();\n         while let Some(..) = tokens.peek() {\n             let item = NestedMetaItem::from_tokens(&mut tokens)?;\n@@ -598,6 +572,47 @@ impl MetaItemKind {\n         }\n         Some(MetaItemKind::List(result))\n     }\n+\n+    fn name_value_from_tokens(\n+        tokens: &mut impl Iterator<Item = TokenTree>,\n+    ) -> Option<MetaItemKind> {\n+        match tokens.next() {\n+            Some(TokenTree::Token(token)) =>\n+                Lit::from_token(&token).ok().map(MetaItemKind::NameValue),\n+            _ => None,\n+        }\n+    }\n+\n+    fn from_mac_args(args: &MacArgs) -> Option<MetaItemKind> {\n+        match args {\n+            MacArgs::Delimited(_, MacDelimiter::Parenthesis, tokens) =>\n+                MetaItemKind::list_from_tokens(tokens.clone()),\n+            MacArgs::Delimited(..) => None,\n+            MacArgs::Eq(_, tokens) => {\n+                assert!(tokens.len() == 1);\n+                MetaItemKind::name_value_from_tokens(&mut tokens.trees())\n+            }\n+            MacArgs::Empty => Some(MetaItemKind::Word),\n+        }\n+    }\n+\n+    fn from_tokens(\n+        tokens: &mut iter::Peekable<impl Iterator<Item = TokenTree>>,\n+    ) -> Option<MetaItemKind> {\n+        match tokens.peek() {\n+            Some(TokenTree::Delimited(_, token::Paren, inner_tokens)) => {\n+                let inner_tokens = inner_tokens.clone();\n+                tokens.next();\n+                MetaItemKind::list_from_tokens(inner_tokens)\n+            }\n+            Some(TokenTree::Delimited(..)) => None,\n+            Some(TokenTree::Token(Token { kind: token::Eq, .. })) => {\n+                tokens.next();\n+                MetaItemKind::name_value_from_tokens(tokens)\n+            }\n+            _ => Some(MetaItemKind::Word),\n+        }\n+    }\n }\n \n impl NestedMetaItem {"}]}