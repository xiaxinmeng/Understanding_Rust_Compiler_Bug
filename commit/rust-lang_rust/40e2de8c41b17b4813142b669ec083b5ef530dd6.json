{"sha": "40e2de8c41b17b4813142b669ec083b5ef530dd6", "node_id": "C_kwDOAAsO6NoAKDQwZTJkZThjNDFiMTdiNDgxMzE0MmI2NjllYzA4M2I1ZWY1MzBkZDY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-27T11:58:34Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-16T11:36:39Z"}, "message": "Revert \"Revert \"Rollup merge of #98582 - oli-obk:unconstrained_opaque_type, r=estebank\"\"\n\nThis reverts commit 4a742a691e7dd2522bad68b86fe2fd5a199d5561.", "tree": {"sha": "533d272bf34ca0959617dc06121dd957260a3053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/533d272bf34ca0959617dc06121dd957260a3053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40e2de8c41b17b4813142b669ec083b5ef530dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40e2de8c41b17b4813142b669ec083b5ef530dd6", "html_url": "https://github.com/rust-lang/rust/commit/40e2de8c41b17b4813142b669ec083b5ef530dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40e2de8c41b17b4813142b669ec083b5ef530dd6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d664f7a8f42c49b07d9dc1fda2a033e7068ef24", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24", "html_url": "https://github.com/rust-lang/rust/commit/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24"}], "stats": {"total": 287, "additions": 250, "deletions": 37}, "files": [{"sha": "c921d4d4ff91c9307ac21eb4ad3a5760b8a1f265", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -2146,7 +2146,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                             StorageDeadOrDrop::Destructor(_) => kind,\n                         },\n-                        ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n+                        ProjectionElem::OpaqueCast { .. }\n+                        | ProjectionElem::Field(..)\n+                        | ProjectionElem::Downcast(..) => {\n                             match place_ty.ty.kind() {\n                                 ty::Adt(def, _) if def.has_dtor(tcx) => {\n                                     // Report the outermost adt with a destructor"}, {"sha": "baabeea58232bcc760ad65b5314e17634995e400", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -237,6 +237,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n                 ProjectionElem::Downcast(..) if opt.including_downcast => return None,\n                 ProjectionElem::Downcast(..) => (),\n+                ProjectionElem::OpaqueCast(..) => (),\n                 ProjectionElem::Field(field, _ty) => {\n                     // FIXME(project-rfc_2229#36): print capture precisely here.\n                     if let Some(field) = self.is_upvar_field_projection(PlaceRef {\n@@ -317,6 +318,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     PlaceRef { local, projection: proj_base }.ty(self.body, self.infcx.tcx)\n                 }\n                 ProjectionElem::Downcast(..) => place.ty(self.body, self.infcx.tcx),\n+                ProjectionElem::OpaqueCast(ty) => PlaceTy::from_ty(*ty),\n                 ProjectionElem::Field(_, field_type) => PlaceTy::from_ty(*field_type),\n             },\n         };"}, {"sha": "202729b4744d624b62423b8dd1d3845eec1e3431", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -169,6 +169,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         ..,\n                         ProjectionElem::Index(_)\n                         | ProjectionElem::ConstantIndex { .. }\n+                        | ProjectionElem::OpaqueCast { .. }\n                         | ProjectionElem::Subslice { .. }\n                         | ProjectionElem::Downcast(..),\n                     ],"}, {"sha": "59a1506c28abd57e39b75cdaa7a67a6a0263259e", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -1781,6 +1781,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         for (place_base, elem) in place.iter_projections().rev() {\n             match elem {\n                 ProjectionElem::Index(_/*operand*/) |\n+                ProjectionElem::OpaqueCast(_) |\n                 ProjectionElem::ConstantIndex { .. } |\n                 // assigning to P[i] requires P to be valid.\n                 ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>\n@@ -2172,6 +2173,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     | ProjectionElem::Index(..)\n                     | ProjectionElem::ConstantIndex { .. }\n                     | ProjectionElem::Subslice { .. }\n+                    | ProjectionElem::OpaqueCast { .. }\n                     | ProjectionElem::Downcast(..) => {\n                         let upvar_field_projection = self.is_upvar_field_projection(place);\n                         if let Some(field) = upvar_field_projection {"}, {"sha": "0e71efd6f8d3e2ffc79b59bb06610ace769fa066", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -250,6 +250,7 @@ fn place_components_conflict<'tcx>(\n                 | (ProjectionElem::Index { .. }, _, _)\n                 | (ProjectionElem::ConstantIndex { .. }, _, _)\n                 | (ProjectionElem::Subslice { .. }, _, _)\n+                | (ProjectionElem::OpaqueCast { .. }, _, _)\n                 | (ProjectionElem::Downcast { .. }, _, _) => {\n                     // Recursive case. This can still be disjoint on a\n                     // further iteration if this a shallow access and\n@@ -317,6 +318,17 @@ fn place_projection_conflict<'tcx>(\n             debug!(\"place_element_conflict: DISJOINT-OR-EQ-DEREF\");\n             Overlap::EqualOrDisjoint\n         }\n+        (ProjectionElem::OpaqueCast(v1), ProjectionElem::OpaqueCast(v2)) => {\n+            if v1 == v2 {\n+                // same type - recur.\n+                debug!(\"place_element_conflict: DISJOINT-OR-EQ-OPAQUE\");\n+                Overlap::EqualOrDisjoint\n+            } else {\n+                // Different types. Disjoint!\n+                debug!(\"place_element_conflict: DISJOINT-OPAQUE\");\n+                Overlap::Disjoint\n+            }\n+        }\n         (ProjectionElem::Field(f1, _), ProjectionElem::Field(f2, _)) => {\n             if f1 == f2 {\n                 // same field (e.g., `a.y` vs. `a.y`) - recur.\n@@ -520,6 +532,7 @@ fn place_projection_conflict<'tcx>(\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(..)\n             | ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::OpaqueCast { .. }\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Downcast(..),\n             _,"}, {"sha": "2b50cbac9a02da128786fa86e3ed5d80dcfa8b44", "filename": "compiler/rustc_borrowck/src/prefixes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -81,6 +81,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                         }\n                         ProjectionElem::Downcast(..)\n                         | ProjectionElem::Subslice { .. }\n+                        | ProjectionElem::OpaqueCast { .. }\n                         | ProjectionElem::ConstantIndex { .. }\n                         | ProjectionElem::Index(_) => {\n                             cursor = cursor_base;"}, {"sha": "c2d6b5c8ebf11039e03e54e7524b573d5f10c460", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -760,6 +760,19 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 }\n                 PlaceTy::from_ty(fty)\n             }\n+            ProjectionElem::OpaqueCast(ty) => {\n+                let ty = self.sanitize_type(place, ty);\n+                let ty = self.cx.normalize(ty, location);\n+                self.cx\n+                    .eq_types(\n+                        base.ty,\n+                        ty,\n+                        location.to_locations(),\n+                        ConstraintCategory::TypeAnnotation,\n+                    )\n+                    .unwrap();\n+                PlaceTy::from_ty(ty)\n+            }\n         }\n     }\n \n@@ -1166,10 +1179,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 tcx,\n                 self.param_env,\n                 proj,\n-                |this, field, ()| {\n+                |this, field, _| {\n                     let ty = this.field_ty(tcx, field);\n                     self.normalize(ty, locations)\n                 },\n+                |_, _| unreachable!(),\n             );\n             curr_projected_ty = projected_ty;\n         }\n@@ -2501,6 +2515,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n                 ProjectionElem::Field(..)\n                 | ProjectionElem::Downcast(..)\n+                | ProjectionElem::OpaqueCast(..)\n                 | ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {"}, {"sha": "11540d8008160324d74ad358c875fac72cfb1aea", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -850,6 +850,7 @@ pub(crate) fn codegen_place<'tcx>(\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }\n+            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }"}, {"sha": "3fa3e3657cb63ce13dc09f0edec5aed3e08e69ae", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -621,6 +621,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn place_opaque_cast(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n+    }\n+\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}, {"sha": "9c18df5643f1c51dc1889a5cec2a2b18b13e968c", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -400,6 +400,21 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         downcast\n     }\n \n+    pub fn project_type<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n+        &self,\n+        bx: &mut Bx,\n+        ty: Ty<'tcx>,\n+    ) -> Self {\n+        let mut downcast = *self;\n+        downcast.layout = bx.cx().layout_of(ty);\n+\n+        // Cast to the appropriate type.\n+        let variant_ty = bx.cx().backend_type(downcast.layout);\n+        downcast.llval = bx.pointercast(downcast.llval, bx.cx().type_ptr_to(variant_ty));\n+\n+        downcast\n+    }\n+\n     pub fn storage_live<Bx: BuilderMethods<'a, 'tcx, Value = V>>(&self, bx: &mut Bx) {\n         bx.lifetime_start(self.llval, self.layout.size);\n     }\n@@ -442,6 +457,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::ProjectionElem::Field(ref field, _) => {\n                     cg_base.project_field(bx, field.index())\n                 }\n+                mir::ProjectionElem::OpaqueCast(ty) => cg_base.project_type(bx, ty),\n                 mir::ProjectionElem::Index(index) => {\n                     let index = &mir::Operand::Copy(mir::Place::from(index));\n                     let index = self.codegen_operand(bx, index);"}, {"sha": "6b2e2bb8aca8c604ce9fde02652de85675af3b09", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -350,6 +350,11 @@ where\n     ) -> InterpResult<'tcx, PlaceTy<'tcx, M::Provenance>> {\n         use rustc_middle::mir::ProjectionElem::*;\n         Ok(match proj_elem {\n+            OpaqueCast(ty) => {\n+                let mut place = base.clone();\n+                place.layout = self.layout_of(ty)?;\n+                place\n+            }\n             Field(field, _) => self.place_field(base, field.index())?,\n             Downcast(_, variant) => self.place_downcast(base, variant)?,\n             Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),\n@@ -374,6 +379,11 @@ where\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         use rustc_middle::mir::ProjectionElem::*;\n         Ok(match proj_elem {\n+            OpaqueCast(ty) => {\n+                let mut op = base.clone();\n+                op.layout = self.layout_of(ty)?;\n+                op\n+            }\n             Field(field, _) => self.operand_field(base, field.index())?,\n             Downcast(_, variant) => self.operand_downcast(base, variant)?,\n             Deref => self.deref_operand(base)?.into(),"}, {"sha": "a8f6507d5949ddfabb994577c54fb8f94ce507f3", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -656,6 +656,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n             ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Downcast(..)\n+            | ProjectionElem::OpaqueCast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {}"}, {"sha": "0a95159a0d9e7c2a766425b9c2a7335853f67285", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -308,6 +308,7 @@ where\n \n             ProjectionElem::Deref\n             | ProjectionElem::Field(_, _)\n+            | ProjectionElem::OpaqueCast(_)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Downcast(_, _)"}, {"sha": "31a73576729fa7e45373f5bf840b742691d39e2b", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                             return Err(Unpromotable);\n                         }\n                     }\n-                    ProjectionElem::Downcast(..) => {\n+                    ProjectionElem::OpaqueCast(..) | ProjectionElem::Downcast(..) => {\n                         return Err(Unpromotable);\n                     }\n "}, {"sha": "89567d2181d332dae82770ee54b9d38fced7f43b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -1380,6 +1380,7 @@ impl<V, T> ProjectionElem<V, T> {\n \n             Self::Field(_, _)\n             | Self::Index(_)\n+            | Self::OpaqueCast(_)\n             | Self::ConstantIndex { .. }\n             | Self::Subslice { .. }\n             | Self::Downcast(_, _) => false,\n@@ -1574,7 +1575,9 @@ impl Debug for Place<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         for elem in self.projection.iter().rev() {\n             match elem {\n-                ProjectionElem::Downcast(_, _) | ProjectionElem::Field(_, _) => {\n+                ProjectionElem::OpaqueCast(_)\n+                | ProjectionElem::Downcast(_, _)\n+                | ProjectionElem::Field(_, _) => {\n                     write!(fmt, \"(\").unwrap();\n                 }\n                 ProjectionElem::Deref => {\n@@ -1590,6 +1593,9 @@ impl Debug for Place<'_> {\n \n         for elem in self.projection.iter() {\n             match elem {\n+                ProjectionElem::OpaqueCast(ty) => {\n+                    write!(fmt, \" as {})\", ty)?;\n+                }\n                 ProjectionElem::Downcast(Some(name), _index) => {\n                     write!(fmt, \" as {})\", name)?;\n                 }"}, {"sha": "d461b4e434fd7caef95d79d0e43f0009276b42fc", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -829,6 +829,9 @@ pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n ///    generator has more than one variant, the parent place's variant index must be set, indicating\n ///    which variant is being used. If it has just one variant, the variant index may or may not be\n ///    included - the single possible variant is inferred if it is not included.\n+///  - [`OpaqueCast`](ProjectionElem::OpaqueCast): This projection changes the place's type to the\n+///    given one, and makes no other changes. A `OpaqueCast` projection on any type other than an\n+///    opaque type from the current crate is not well-formed.\n ///  - [`ConstantIndex`](ProjectionElem::ConstantIndex): Computes an offset in units of `T` into the\n ///    place as described in the documentation for the `ProjectionElem`. The resulting address is\n ///    the parent's address plus that offset, and the type is `T`. This is only legal if the parent\n@@ -928,6 +931,10 @@ pub enum ProjectionElem<V, T> {\n     ///\n     /// The included Symbol is the name of the variant, used for printing MIR.\n     Downcast(Option<Symbol>, VariantIdx),\n+\n+    /// Like an explicit cast from an opaque type to a concrete type, but without\n+    /// requiring an intermediate variable.\n+    OpaqueCast(T),\n }\n \n /// Alias for projections as they appear in places, where the base is a place"}, {"sha": "ef05bd8de6357dc7d218fa6f1a74a7ba8a49b5b8", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> PlaceTy<'tcx> {\n     /// `PlaceElem`, where we can just use the `Ty` that is already\n     /// stored inline on field projection elems.\n     pub fn projection_ty(self, tcx: TyCtxt<'tcx>, elem: PlaceElem<'tcx>) -> PlaceTy<'tcx> {\n-        self.projection_ty_core(tcx, ty::ParamEnv::empty(), &elem, |_, _, ty| ty)\n+        self.projection_ty_core(tcx, ty::ParamEnv::empty(), &elem, |_, _, ty| ty, |_, ty| ty)\n     }\n \n     /// `place_ty.projection_ty_core(tcx, elem, |...| { ... })`\n@@ -71,6 +71,7 @@ impl<'tcx> PlaceTy<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         elem: &ProjectionElem<V, T>,\n         mut handle_field: impl FnMut(&Self, Field, T) -> Ty<'tcx>,\n+        mut handle_opaque_cast: impl FnMut(&Self, T) -> Ty<'tcx>,\n     ) -> PlaceTy<'tcx>\n     where\n         V: ::std::fmt::Debug,\n@@ -109,6 +110,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                 PlaceTy { ty: self.ty, variant_index: Some(index) }\n             }\n             ProjectionElem::Field(f, fty) => PlaceTy::from_ty(handle_field(&self, f, fty)),\n+            ProjectionElem::OpaqueCast(ty) => PlaceTy::from_ty(handle_opaque_cast(&self, ty)),\n         };\n         debug!(\"projection_ty self: {:?} elem: {:?} yields: {:?}\", self, elem, answer);\n         answer"}, {"sha": "5efb39c99969ec9cba7fae540b8a16faf8c2c570", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -1094,6 +1094,11 @@ macro_rules! visit_place_fns {\n                     self.visit_ty(&mut new_ty, TyContext::Location(location));\n                     if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n                 }\n+                PlaceElem::OpaqueCast(ty) => {\n+                    let mut new_ty = ty;\n+                    self.visit_ty(&mut new_ty, TyContext::Location(location));\n+                    if ty != new_ty { Some(PlaceElem::OpaqueCast(new_ty)) } else { None }\n+                }\n                 PlaceElem::Deref\n                 | PlaceElem::ConstantIndex { .. }\n                 | PlaceElem::Subslice { .. }\n@@ -1163,7 +1168,7 @@ macro_rules! visit_place_fns {\n             location: Location,\n         ) {\n             match elem {\n-                ProjectionElem::Field(_field, ty) => {\n+                ProjectionElem::OpaqueCast(ty) | ProjectionElem::Field(_, ty) => {\n                     self.visit_ty(ty, TyContext::Location(location));\n                 }\n                 ProjectionElem::Index(local) => {"}, {"sha": "e2b41516bf6437bfda0cafe60b379a91e0fb0ef5", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -102,6 +102,8 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n                 variant = Some(*idx);\n                 continue;\n             }\n+            // These do not affect anything, they just make sure we know the right type.\n+            ProjectionElem::OpaqueCast(_) => continue,\n             ProjectionElem::Index(..)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. } => {\n@@ -168,7 +170,7 @@ fn find_capture_matching_projections<'a, 'tcx>(\n /// `PlaceBuilder` now starts from `PlaceBase::Local`.\n ///\n /// Returns a Result with the error being the PlaceBuilder (`from_builder`) that was not found.\n-#[instrument(level = \"trace\", skip(cx))]\n+#[instrument(level = \"trace\", skip(cx), ret)]\n fn to_upvars_resolved_place_builder<'tcx>(\n     from_builder: PlaceBuilder<'tcx>,\n     cx: &Builder<'_, 'tcx>,\n@@ -213,7 +215,6 @@ fn to_upvars_resolved_place_builder<'tcx>(\n                 &capture.captured_place.place.projections,\n             );\n             upvar_resolved_place_builder.projection.extend(remaining_projections);\n-            trace!(?upvar_resolved_place_builder);\n \n             Ok(upvar_resolved_place_builder)\n         }\n@@ -232,16 +233,21 @@ fn strip_prefix<'tcx>(\n     prefix_projections: &[HirProjection<'tcx>],\n ) -> impl Iterator<Item = PlaceElem<'tcx>> {\n     let mut iter = projections.into_iter();\n+    let mut next = || match iter.next()? {\n+        // Filter out opaque casts, they are unnecessary in the prefix.\n+        ProjectionElem::OpaqueCast(..) => iter.next(),\n+        other => Some(other),\n+    };\n     for projection in prefix_projections {\n         match projection.kind {\n             HirProjectionKind::Deref => {\n-                assert!(matches!(iter.next(), Some(ProjectionElem::Deref)));\n+                assert!(matches!(next(), Some(ProjectionElem::Deref)));\n             }\n             HirProjectionKind::Field(..) => {\n                 if base_ty.is_enum() {\n-                    assert!(matches!(iter.next(), Some(ProjectionElem::Downcast(..))));\n+                    assert!(matches!(next(), Some(ProjectionElem::Downcast(..))));\n                 }\n-                assert!(matches!(iter.next(), Some(ProjectionElem::Field(..))));\n+                assert!(matches!(next(), Some(ProjectionElem::Field(..))));\n             }\n             HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                 bug!(\"unexpected projection kind: {:?}\", projection);\n@@ -711,6 +717,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     ProjectionElem::Field(..)\n                     | ProjectionElem::Downcast(..)\n+                    | ProjectionElem::OpaqueCast(..)\n                     | ProjectionElem::ConstantIndex { .. }\n                     | ProjectionElem::Subslice { .. } => (),\n                 }"}, {"sha": "0b20300293b4d7334dfed873d385884da1001e05", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -95,9 +95,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n     pub(in crate::build) fn new(\n-        place: PlaceBuilder<'tcx>,\n+        mut place: PlaceBuilder<'tcx>,\n         pattern: &'pat Pat<'tcx>,\n     ) -> MatchPair<'pat, 'tcx> {\n+        // Force the place type to the pattern's type.\n+        // FIXME(oli-obk): can we use this to simplify slice/array pattern hacks?\n+        // FIXME(oli-obk): only add this projection if `place` actually had an opaque\n+        // type before the projection.\n+        place = place.project(ProjectionElem::OpaqueCast(pattern.ty));\n         MatchPair { place, pattern }\n     }\n }"}, {"sha": "02e047afaf31f4255e45d2364f2790dfdca63268", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -842,7 +842,15 @@ fn is_useful<'p, 'tcx>(\n             }\n         }\n     } else {\n-        let ty = v.head().ty();\n+        let mut ty = v.head().ty();\n+\n+        // Opaque types can't get destructured/split, but the patterns can\n+        // actually hint at hidden types, so we use the patterns' types instead.\n+        if let ty::Opaque(..) = ty.kind() {\n+            if let Some(row) = rows.first() {\n+                ty = row.head().ty();\n+            }\n+        }\n         let is_non_exhaustive = cx.is_foreign_non_exhaustive_enum(ty);\n         debug!(\"v.head: {:?}, v.span: {:?}\", v.head(), v.head().span());\n         let pcx = &PatCtxt { cx, ty, span: v.head().span(), is_top_level, is_non_exhaustive };"}, {"sha": "7806e8f45d3ade55a4f6c907a90e0d515273e88a", "filename": "compiler/rustc_mir_dataflow/src/move_paths/abs_domain.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -48,6 +48,7 @@ impl<'tcx> Lift for PlaceElem<'tcx> {\n         match *self {\n             ProjectionElem::Deref => ProjectionElem::Deref,\n             ProjectionElem::Field(f, ty) => ProjectionElem::Field(f, ty.lift()),\n+            ProjectionElem::OpaqueCast(ty) => ProjectionElem::OpaqueCast(ty.lift()),\n             ProjectionElem::Index(ref i) => ProjectionElem::Index(i.lift()),\n             ProjectionElem::Subslice { from, to, from_end } => {\n                 ProjectionElem::Subslice { from, to, from_end }"}, {"sha": "9a50c0f988a568ac431906331fd54f9c624b2b32", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -1,8 +1,9 @@\n // compile-flags: --edition=2021\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n fn main() {\n-    type T = impl Copy; //~ ERROR unconstrained opaque type\n+    type T = impl Copy;\n     let foo: T = (1u32, 2u32);\n     let (a, b): (u32, u32) = foo;\n }"}, {"sha": "03b172e6de5706f8dcf6e1c38e289bed1df6f022", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr?ref=5d664f7a8f42c49b07d9dc1fda2a033e7068ef24", "patch": "@@ -1,10 +0,0 @@\n-error: unconstrained opaque type\n-  --> $DIR/cross_inference_pattern_bug.rs:5:14\n-   |\n-LL |     type T = impl Copy;\n-   |              ^^^^^^^^^\n-   |\n-   = note: `T` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to previous error\n-"}, {"sha": "b929122a6c23fccee8f2d15ea70ee4459b7885bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -1,13 +1,13 @@\n-// known-bug: #96572\n // compile-flags: --edition=2021 --crate-type=lib\n // rustc-env:RUST_BACKTRACE=0\n+// check-pass\n \n // tracked in https://github.com/rust-lang/rust/issues/96572\n \n #![feature(type_alias_impl_trait)]\n \n fn main() {\n-    type T = impl Copy;  // error: unconstrained opaque type\n+    type T = impl Copy;\n     let foo: T = (1u32, 2u32);\n-    let (a, b) = foo; // removing this line makes the code compile\n+    let (a, b) = foo; // this line used to make the code fail\n }"}, {"sha": "8aa1f495639951ff05e51d906d728a69dd8fd9bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d664f7a8f42c49b07d9dc1fda2a033e7068ef24/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr?ref=5d664f7a8f42c49b07d9dc1fda2a033e7068ef24", "patch": "@@ -1,10 +0,0 @@\n-error: unconstrained opaque type\n-  --> $DIR/cross_inference_pattern_bug_no_type.rs:10:14\n-   |\n-LL |     type T = impl Copy;  // error: unconstrained opaque type\n-   |              ^^^^^^^^^\n-   |\n-   = note: `T` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to previous error\n-"}, {"sha": "825710851b01f0dcab6c8bdb7cdd1f6fd9f916da", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-mismatch.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    match foo {\n+        None => (),\n+        Some((a, b, c)) => (), //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "728244a1844dbe8eccb6b8143e1966218814d372", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-96572-unconstrained-mismatch.rs:8:14\n+   |\n+LL |     match foo {\n+   |           --- this expression has type `T`\n+LL |         None => (),\n+LL |         Some((a, b, c)) => (),\n+   |              ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |\n+   = note: expected tuple `(u32, u32)`\n+              found tuple `(_, _, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2c740ccc1aed42f748de72e9bce57eb50b02ab3a", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -0,0 +1,92 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    match foo {\n+        None => (),\n+        Some((a, b)) => (),\n+    }\n+}\n+\n+fn upvar() {\n+    #[derive(Copy, Clone)]\n+    struct Foo((u32, u32));\n+\n+    type T = impl Copy;\n+    let foo: T = Foo((1u32, 2u32));\n+    let x = move || {\n+        let Foo((a, b)) = foo;\n+    };\n+}\n+\n+fn enum_upvar() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    let x = move || {\n+        match foo {\n+            None => (),\n+            Some((a, b)) => (),\n+        }\n+    };\n+}\n+\n+fn r#struct() {\n+    #[derive(Copy, Clone)]\n+    struct Foo((u32, u32));\n+\n+    type U = impl Copy;\n+    let foo: U = Foo((1u32, 2u32));\n+    let Foo((a, b)) = foo;\n+}\n+\n+mod only_pattern {\n+    type T = impl Copy;\n+\n+    fn foo(foo: T) {\n+        let (mut x, mut y) = foo;\n+        x = 42;\n+        y = \"foo\";\n+    }\n+\n+    type U = impl Copy;\n+\n+    fn bar(bar: Option<U>) {\n+        match bar {\n+            Some((mut x, mut y)) => {\n+                x = 42;\n+                y = \"foo\";\n+            }\n+            None => {}\n+        }\n+    }\n+}\n+\n+mod only_pattern_rpit {\n+    #[allow(unconditional_recursion)]\n+    fn foo(b: bool) -> impl Copy {\n+        let (mut x, mut y) = foo(false);\n+        x = 42;\n+        y = \"foo\";\n+        if b {\n+            panic!()\n+        } else {\n+            foo(true)\n+        }\n+    }\n+\n+    fn bar(b: bool) -> Option<impl Copy> {\n+        if b {\n+            return None;\n+        }\n+        match bar(!b) {\n+            Some((mut x, mut y)) => {\n+                x = 42;\n+                y = \"foo\";\n+            }\n+            None => {}\n+        }\n+        None\n+    }\n+}"}, {"sha": "405f022868395dacf3f148419e46557d3baa4b74", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40e2de8c41b17b4813142b669ec083b5ef530dd6/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=40e2de8c41b17b4813142b669ec083b5ef530dd6", "patch": "@@ -260,6 +260,7 @@ fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &B\n                 }\n             },\n             ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::OpaqueCast(..)\n             | ProjectionElem::Downcast(..)\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref"}]}