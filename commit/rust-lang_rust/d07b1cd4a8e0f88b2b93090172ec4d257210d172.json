{"sha": "d07b1cd4a8e0f88b2b93090172ec4d257210d172", "node_id": "C_kwDOAAsO6NoAKGQwN2IxY2Q0YThlMGY4OGIyYjkzMDkwMTcyZWM0ZDI1NzIxMGQxNzI", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-10T15:08:35Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-10T15:08:35Z"}, "message": "Call `into_diagnostic_arg` on Binder's contained value directly.", "tree": {"sha": "dff47894d6cfb686c63abb04dc2b190af735a82b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff47894d6cfb686c63abb04dc2b190af735a82b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d07b1cd4a8e0f88b2b93090172ec4d257210d172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d07b1cd4a8e0f88b2b93090172ec4d257210d172", "html_url": "https://github.com/rust-lang/rust/commit/d07b1cd4a8e0f88b2b93090172ec4d257210d172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d07b1cd4a8e0f88b2b93090172ec4d257210d172/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f", "html_url": "https://github.com/rust-lang/rust/commit/3fb6d6b2f422943cea592f64e4ae8984d6b86f1f"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "7b84c4e41d67ced841f4c4d79d4b31af62f423a0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d07b1cd4a8e0f88b2b93090172ec4d257210d172/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07b1cd4a8e0f88b2b93090172ec4d257210d172/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d07b1cd4a8e0f88b2b93090172ec4d257210d172", "patch": "@@ -27,7 +27,7 @@ use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n-use std::fmt::{self, Display};\n+use std::fmt;\n use std::marker::PhantomData;\n use std::ops::{ControlFlow, Deref, Range};\n use ty::util::IntTypeExt;\n@@ -878,6 +878,12 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> IntoDiagnosticArg for TraitRef<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n /// An existential reference to a trait, where `Self` is erased.\n /// For example, the trait object `Trait<'a, 'b, X, Y>` is:\n /// ```ignore (illustrative)\n@@ -918,6 +924,12 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> IntoDiagnosticArg for ExistentialTraitRef<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;\n \n impl<'tcx> PolyExistentialTraitRef<'tcx> {\n@@ -1150,10 +1162,10 @@ impl<'tcx, T: IntoIterator> Binder<'tcx, T> {\n \n impl<'tcx, T> IntoDiagnosticArg for Binder<'tcx, T>\n where\n-    Binder<'tcx, T>: Display,\n+    T: IntoDiagnosticArg,\n {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n-        self.to_string().into_diagnostic_arg()\n+        self.0.into_diagnostic_arg()\n     }\n }\n \n@@ -1373,6 +1385,12 @@ impl<'tcx> FnSig<'tcx> {\n     }\n }\n \n+impl<'tcx> IntoDiagnosticArg for FnSig<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;\n \n impl<'tcx> PolyFnSig<'tcx> {"}]}