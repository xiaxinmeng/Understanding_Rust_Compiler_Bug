{"sha": "7512808ac94cffd385a83d0bc6fc76d37a411879", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MTI4MDhhYzk0Y2ZmZDM4NWE4M2QwYmM2ZmM3NmQzN2E0MTE4Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T04:29:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-06T04:29:11Z"}, "message": "Auto merge of #29491 - alexcrichton:avoid-stdio-tls, r=brson\n\nCurrently if a print happens while a thread is being torn down it may cause a\npanic if the LOCAL_STDOUT TLS slot has been destroyed by that point. This adds a\nguard to check and prints to the process stdout if that's the case (as we do for\nif the slot is already borrowed).\n\nCloses #29488", "tree": {"sha": "5bfa3e1cbc9721746e9923a6f21b7b10df33fce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bfa3e1cbc9721746e9923a6f21b7b10df33fce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7512808ac94cffd385a83d0bc6fc76d37a411879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7512808ac94cffd385a83d0bc6fc76d37a411879", "html_url": "https://github.com/rust-lang/rust/commit/7512808ac94cffd385a83d0bc6fc76d37a411879", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7512808ac94cffd385a83d0bc6fc76d37a411879/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53496bda9ed1a5a8e736279527eb9e0bd23ac12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53496bda9ed1a5a8e736279527eb9e0bd23ac12", "html_url": "https://github.com/rust-lang/rust/commit/d53496bda9ed1a5a8e736279527eb9e0bd23ac12"}, {"sha": "858865478358c627f0485f3aef17ffb8bcfee612", "url": "https://api.github.com/repos/rust-lang/rust/commits/858865478358c627f0485f3aef17ffb8bcfee612", "html_url": "https://github.com/rust-lang/rust/commit/858865478358c627f0485f3aef17ffb8bcfee612"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "d6a9778ced291916882fecf3634868a2bb3f320a", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7512808ac94cffd385a83d0bc6fc76d37a411879/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7512808ac94cffd385a83d0bc6fc76d37a411879/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=7512808ac94cffd385a83d0bc6fc76d37a411879", "patch": "@@ -16,11 +16,12 @@ use cmp;\n use fmt;\n use io::lazy::Lazy;\n use io::{self, BufReader, LineWriter};\n+use libc;\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::io::{read_to_end_uninitialized};\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use libc;\n+use thread::LocalKeyState;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -576,14 +577,31 @@ pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn _print(args: fmt::Arguments) {\n-    let result = LOCAL_STDOUT.with(|s| {\n-        if s.borrow_state() == BorrowState::Unused {\n-            if let Some(w) = s.borrow_mut().as_mut() {\n-                return w.write_fmt(args);\n-            }\n+    // As an implementation of the `println!` macro, we want to try our best to\n+    // not panic wherever possible and get the output somewhere. There are\n+    // currently two possible vectors for panics we take care of here:\n+    //\n+    // 1. If the TLS key for the local stdout has been destroyed, accessing it\n+    //    would cause a panic. Note that we just lump in the uninitialized case\n+    //    here for convenience, we're not trying to avoid a panic.\n+    // 2. If the local stdout is currently in use (e.g. we're in the middle of\n+    //    already printing) then accessing again would cause a panic.\n+    //\n+    // If, however, the actual I/O causes an error, we do indeed panic.\n+    let result = match LOCAL_STDOUT.state() {\n+        LocalKeyState::Uninitialized |\n+        LocalKeyState::Destroyed => stdout().write_fmt(args),\n+        LocalKeyState::Valid => {\n+            LOCAL_STDOUT.with(|s| {\n+                if s.borrow_state() == BorrowState::Unused {\n+                    if let Some(w) = s.borrow_mut().as_mut() {\n+                        return w.write_fmt(args);\n+                    }\n+                }\n+                stdout().write_fmt(args)\n+            })\n         }\n-        stdout().write_fmt(args)\n-    });\n+    };\n     if let Err(e) = result {\n         panic!(\"failed printing to stdout: {}\", e);\n     }"}, {"sha": "eee0f663df24cff775714da4f0e4160d0492da2d", "filename": "src/test/run-pass/issue-29488.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7512808ac94cffd385a83d0bc6fc76d37a411879/src%2Ftest%2Frun-pass%2Fissue-29488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7512808ac94cffd385a83d0bc6fc76d37a411879/src%2Ftest%2Frun-pass%2Fissue-29488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29488.rs?ref=7512808ac94cffd385a83d0bc6fc76d37a411879", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"test2\");\n+    }\n+}\n+\n+thread_local!(static FOO: Foo = Foo);\n+\n+fn main() {\n+    // Off the main thread due to #28129, be sure to initialize FOO first before\n+    // calling `println!`\n+    thread::spawn(|| {\n+        FOO.with(|_| {});\n+        println!(\"test1\");\n+    }).join().unwrap();\n+}"}]}