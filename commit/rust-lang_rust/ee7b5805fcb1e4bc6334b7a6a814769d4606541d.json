{"sha": "ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlN2I1ODA1ZmNiMWU0YmM2MzM0YjdhNmE4MTQ3NjlkNDYwNjU0MWQ=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2016-05-09T18:07:59Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2016-05-09T18:07:59Z"}, "message": "Format try shorthand", "tree": {"sha": "0c6feed1912064ac191b652504e874434a5e98ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6feed1912064ac191b652504e874434a5e98ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "html_url": "https://github.com/rust-lang/rust/commit/ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2549b5769d044bf6b16b1ca833785969dc318b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2549b5769d044bf6b16b1ca833785969dc318b", "html_url": "https://github.com/rust-lang/rust/commit/fc2549b5769d044bf6b16b1ca833785969dc318b"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "da2a7629bad2614732776a7eda9939fda386fc46", "filename": "src/chains.rs", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /// Formatting of chained expressions, i.e. expressions which are chained by\n-/// dots: struct and enum field access and method calls.\n+/// dots: struct and enum field access, method calls, and try shorthand (?).\n ///\n /// Instead of walking these subexpressions one-by-one, as is our usual strategy\n /// for expression formatting, we collect maximal sequences of these expressions\n@@ -81,7 +81,6 @@\n /// true, then we allow the last method call to spill over multiple lines without\n /// forcing the rest of the chain to be split.\n \n-\n use Indent;\n use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, first_line_width};\n@@ -109,8 +108,16 @@ pub fn rewrite_chain(expr: &ast::Expr,\n     // put the first non-parent item on the same line as the parent.\n     let (indent, extend) = if !parent_rewrite.contains('\\n') && is_continuable(parent) ||\n                               parent_rewrite.len() <= context.config.tab_spaces {\n-        // Try and put at least the first two items on the same line.\n-        (chain_indent(context, offset + Indent::new(0, parent_rewrite.len())), true)\n+// <<<<<<< HEAD\n+//         // Try and put at least the first two items on the same line.\n+//         (chain_indent(context, offset + Indent::new(0, parent_rewrite.len())), true)\n+// =======\n+        let indent = if let ast::ExprKind::Try(..) = subexpr_list.last().unwrap().node {\n+            parent_block_indent.block_indent(context.config)\n+        } else {\n+            offset + Indent::new(0, parent_rewrite.len())\n+        };\n+        (indent, true)\n     } else if is_block_expr(parent, &parent_rewrite) {\n         // The parent is a block, so align the rest of the chain with the closing\n         // brace.\n@@ -184,12 +191,27 @@ pub fn rewrite_chain(expr: &ast::Expr,\n     wrap_str(format!(\"{}{}{}\",\n                      parent_rewrite,\n                      first_connector,\n-                     rewrites.join(&connector)),\n+                     join_rewrites(&rewrites, &subexpr_list, &connector)),\n              context.config.max_width,\n              width,\n              offset)\n }\n \n+fn join_rewrites(rewrites: &[String], subexps: &[&ast::Expr], connector: &str) -> String {\n+    let mut rewrite_iter = rewrites.iter();\n+    let mut result = rewrite_iter.next().unwrap().clone();\n+\n+    for (rewrite, expr) in rewrite_iter.zip(subexps.iter()) {\n+        match expr.node {\n+            ast::ExprKind::Try(_) => (),\n+            _ => result.push_str(connector),\n+        };\n+        result.push_str(&rewrite[..]);\n+    }\n+\n+    result\n+}\n+\n // States whether an expression's last line exclusively consists of closing\n // parens, braces, and brackets in its idiomatic formatting.\n fn is_block_expr(expr: &ast::Expr, repr: &str) -> bool {\n@@ -293,6 +315,16 @@ fn rewrite_method_call_with_overflow(expr_kind: &ast::ExprKind,\n     }\n }\n \n+fn pop_expr_chain(expr: &ast::Expr) -> Option<&ast::Expr> {\n+    match expr.node {\n+        ast::ExprKind::MethodCall(_, _, ref expressions) => Some(&expressions[0]),\n+        ast::ExprKind::TupField(ref subexpr, _) |\n+        ast::ExprKind::Field(ref subexpr, _) |\n+        ast::ExprKind::Try(ref subexpr) => Some(subexpr),\n+        _ => None,\n+    }\n+}\n+\n // Rewrite the last element in the chain `expr`. E.g., given `a.b.c` we rewrite\n // `.c`.\n fn rewrite_chain_subexpr(expr: &ast::Expr,\n@@ -328,6 +360,13 @@ fn rewrite_chain_subexpr(expr: &ast::Expr,\n                 None\n             }\n         }\n+        ast::ExprKind::Try(_) => {\n+            if width >= 1 {\n+                Some(\"?\".into())\n+            } else {\n+                None\n+            }\n+        }\n         _ => unreachable!(),\n     }\n }"}, {"sha": "ba2ed7aec095254593d41ae0db849a405ed10a56", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "patch": "@@ -148,6 +148,7 @@ impl Rewrite for ast::Expr {\n             ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n                 rewrite_closure(capture, fn_decl, body, self.span, context, width, offset)\n             }\n+            // ast::ExprKind::Try(..) |\n             ast::ExprKind::Field(..) |\n             ast::ExprKind::TupField(..) |\n             ast::ExprKind::MethodCall(..) => rewrite_chain(self, context, width, offset),\n@@ -199,21 +200,20 @@ impl Rewrite for ast::Expr {\n                         rewrite_unary_prefix(context, delim, &**rhs, width, offset)\n                     }\n                     (Some(ref lhs), None) => {\n-                        Some(format!(\"{}{}\",\n-                                     try_opt!(lhs.rewrite(context,\n-                                                          try_opt!(width.checked_sub(delim.len())),\n-                                                          offset)),\n-                                     delim))\n+                        rewrite_unary_suffix(context, delim, &**lhs, width, offset)\n                     }\n                     (None, None) => wrap_str(delim.into(), context.config.max_width, width, offset),\n                 }\n             }\n+            ast::ExprKind::Try(ref expr) => {\n+                rewrite_unary_suffix(context, \"?\", &**expr, width, offset)\n+            }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n             ast::ExprKind::InPlace(..) |\n             ast::ExprKind::InlineAsm(..) |\n-            // TODO(#867): Handle try shorthand\n-            ast::ExprKind::Try(_) => {\n+            // TODO(#848): Handle type ascription\n+            ast::ExprKind::Type(_, _) => {\n                 wrap_str(context.snippet(self.span),\n                          context.config.max_width,\n                          width,\n@@ -1762,6 +1762,21 @@ pub fn rewrite_unary_prefix<R: Rewrite>(context: &RewriteContext,\n         .map(|r| format!(\"{}{}\", prefix, r))\n }\n \n+// FIXME: this is probably not correct for multi-line Rewrites. we should\n+// subtract suffix.len() from the last line budget, not the first!\n+pub fn rewrite_unary_suffix<R: Rewrite>(context: &RewriteContext,\n+                                        suffix: &str,\n+                                        rewrite: &R,\n+                                        width: usize,\n+                                        offset: Indent)\n+                                        -> Option<String> {\n+    rewrite.rewrite(context, try_opt!(width.checked_sub(suffix.len())), offset)\n+           .map(|mut r| {\n+               r.push_str(suffix);\n+               r\n+           })\n+}\n+\n fn rewrite_unary_op(context: &RewriteContext,\n                     op: &ast::UnOp,\n                     expr: &ast::Expr,"}, {"sha": "8ec5cd191c5e8c7c827cf33918a666f12f8ca642", "filename": "tests/source/chains.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "patch": "@@ -112,3 +112,12 @@ fn issue587() {\n \n     std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n }\n+\n+fn try_shorthand() {\n+    let x = expr?;\n+    let y = expr.kaas()?.test();\n+    let loooooooooooooooooooooooooooooooooooooooooong = does_this?.look?.good?.should_we_break?.after_the_first_question_mark?;\n+    let yyyy = expr?.another?.another?.another?.another?.another?.another?.another?.another?.test();\n+    let zzzz = expr?.another?.another?.another?.another?;\n+    let aaa =  x ????????????  ?????????????? ???? ?????  ?????????????? ?????????  ?????????????? ??;\n+}"}, {"sha": "4c38ab7eb5282c6dc3ff63629efe5eb67dcbbb47", "filename": "tests/target/chains.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7b5805fcb1e4bc6334b7a6a814769d4606541d/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=ee7b5805fcb1e4bc6334b7a6a814769d4606541d", "patch": "@@ -133,3 +133,16 @@ fn issue587() {\n \n     std::mem::transmute(dl.symbol::<()>(\"init\").unwrap())\n }\n+\n+fn try_shorthand() {\n+    let x = expr?;\n+    let y = expr.kaas()?.test();\n+    let loooooooooooooooooooooooooooooooooooooooooong = does_this?\n+                                                            .look?\n+                                                            .good?\n+                                                            .should_we_break?\n+                                                            .after_the_first_question_mark?;\n+    let yyyy = expr?.another?.another?.another?.another?.another?.another?.another?.another?.test();\n+    let zzzz = expr?.another?.another?.another?.another?;\n+    let aaa = x??????????????????????????????????????????????????????????????????????????;\n+}"}]}