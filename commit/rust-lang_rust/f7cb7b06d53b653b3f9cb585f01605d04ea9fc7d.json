{"sha": "f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2I3YjA2ZDUzYjY1M2IzZjljYjU4NWYwMTYwNWQwNGVhOWZjN2Q=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-25T17:22:32Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-25T18:35:42Z"}, "message": "typeck: Minor cleanup", "tree": {"sha": "c4c95a89db7bc5525d0b44e6f6252dd149985f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c95a89db7bc5525d0b44e6f6252dd149985f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d", "html_url": "https://github.com/rust-lang/rust/commit/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c2e9813816f00d6802fb9a25fe8b0f53491eba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2e9813816f00d6802fb9a25fe8b0f53491eba2", "html_url": "https://github.com/rust-lang/rust/commit/7c2e9813816f00d6802fb9a25fe8b0f53491eba2"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "b01c162c59ab4f257abbadeb182cda0f1bc73ba8", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=f7cb7b06d53b653b3f9cb585f01605d04ea9fc7d", "patch": "@@ -128,37 +128,37 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         fcx.write_ty(pat.id, expected);\n       }\n       ast::pat_lit(lt) {\n-        check_expr_with(pcx.fcx, lt, expected);\n+        check_expr_with(fcx, lt, expected);\n         fcx.write_ty(pat.id, fcx.expr_ty(lt));\n       }\n       ast::pat_range(begin, end) {\n-        check_expr_with(pcx.fcx, begin, expected);\n-        check_expr_with(pcx.fcx, end, expected);\n-        let b_ty = resolve_type_vars_if_possible(pcx.fcx,\n+        check_expr_with(fcx, begin, expected);\n+        check_expr_with(fcx, end, expected);\n+        let b_ty = resolve_type_vars_if_possible(fcx,\n                                                  fcx.expr_ty(begin));\n         if !require_same_types(\n             tcx, pat.span, b_ty,\n             resolve_type_vars_if_possible(\n-                pcx.fcx, fcx.expr_ty(end)),\n+                fcx, fcx.expr_ty(end)),\n             {|| \"mismatched types in range\" }) {\n             // no-op\n         } else if !ty::type_is_numeric(b_ty) {\n             tcx.sess.span_err(pat.span, \"non-numeric type used in range\");\n-        } else if !valid_range_bounds(pcx.fcx.ccx, begin, end) {\n+        } else if !valid_range_bounds(fcx.ccx, begin, end) {\n             tcx.sess.span_err(begin.span, \"lower range bound must be less \\\n                                            than upper\");\n         }\n         fcx.write_ty(pat.id, b_ty);\n       }\n       ast::pat_ident(name, sub) if !pat_is_variant(tcx.def_map, pat) {\n-        let vid = lookup_local(pcx.fcx, pat.span, pat.id);\n+        let vid = lookup_local(fcx, pat.span, pat.id);\n         let mut typ = ty::mk_var(tcx, vid);\n-        demand::suptype(pcx.fcx, pat.span, expected, typ);\n+        demand::suptype(fcx, pat.span, expected, typ);\n         let canon_id = pcx.map.get(ast_util::path_to_ident(name));\n         if canon_id != pat.id {\n-            let tv_id = lookup_local(pcx.fcx, pat.span, canon_id);\n+            let tv_id = lookup_local(fcx, pat.span, canon_id);\n             let ct = ty::mk_var(tcx, tv_id);\n-            demand::suptype(pcx.fcx, pat.span, ct, typ);\n+            demand::suptype(fcx, pat.span, ct, typ);\n         }\n         fcx.write_ty(pat.id, typ);\n         alt sub {\n@@ -173,7 +173,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         check_pat_variant(pcx, pat, path, subpats, expected);\n       }\n       ast::pat_rec(fields, etc) {\n-        let ex_fields = alt structure_of(pcx.fcx, pat.span, expected) {\n+        let ex_fields = alt structure_of(fcx, pat.span, expected) {\n           ty::ty_rec(fields) { fields }\n           _ {\n             tcx.sess.span_fatal\n@@ -210,7 +210,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         fcx.write_ty(pat.id, expected);\n       }\n       ast::pat_tup(elts) {\n-        let ex_elts = alt structure_of(pcx.fcx, pat.span, expected) {\n+        let ex_elts = alt structure_of(fcx, pat.span, expected) {\n           ty::ty_tup(elts) { elts }\n           _ {\n             tcx.sess.span_fatal\n@@ -235,7 +235,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         fcx.write_ty(pat.id, expected);\n       }\n       ast::pat_box(inner) {\n-        alt structure_of(pcx.fcx, pat.span, expected) {\n+        alt structure_of(fcx, pat.span, expected) {\n           ty::ty_box(e_inner) {\n             check_pat(pcx, inner, e_inner.ty);\n             fcx.write_ty(pat.id, expected);\n@@ -244,13 +244,13 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             tcx.sess.span_fatal(\n                 pat.span,\n                 \"mismatched types: expected `\" +\n-                pcx.fcx.ty_to_str(expected) +\n+                fcx.ty_to_str(expected) +\n                 \"` found box\");\n           }\n         }\n       }\n       ast::pat_uniq(inner) {\n-        alt structure_of(pcx.fcx, pat.span, expected) {\n+        alt structure_of(fcx, pat.span, expected) {\n           ty::ty_uniq(e_inner) {\n             check_pat(pcx, inner, e_inner.ty);\n             fcx.write_ty(pat.id, expected);\n@@ -259,7 +259,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             tcx.sess.span_fatal(\n                 pat.span,\n                 \"mismatched types: expected `\" +\n-                pcx.fcx.ty_to_str(expected) +\n+                fcx.ty_to_str(expected) +\n                 \"` found uniq\");\n           }\n         }"}]}