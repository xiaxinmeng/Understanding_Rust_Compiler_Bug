{"sha": "7514d760b8fabd46e4874520b653ab8803c3517e", "node_id": "C_kwDOAAsO6NoAKDc1MTRkNzYwYjhmYWJkNDZlNDg3NDUyMGI2NTNhYjg4MDNjMzUxN2U", "commit": {"author": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-26T21:03:40Z"}, "committer": {"name": "Aria Beingessner", "email": "a.beingessner@gmail.com", "date": "2022-03-30T00:18:27Z"}, "message": "cleanup some of the less terrifying library code", "tree": {"sha": "ad06f9326522bc789d650376a836f1d49fbfeb83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad06f9326522bc789d650376a836f1d49fbfeb83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7514d760b8fabd46e4874520b653ab8803c3517e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7514d760b8fabd46e4874520b653ab8803c3517e", "html_url": "https://github.com/rust-lang/rust/commit/7514d760b8fabd46e4874520b653ab8803c3517e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7514d760b8fabd46e4874520b653ab8803c3517e/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e1cde4b5bd70dfe892f5e7bc449ad3a6e1d773", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e1cde4b5bd70dfe892f5e7bc449ad3a6e1d773", "html_url": "https://github.com/rust-lang/rust/commit/31e1cde4b5bd70dfe892f5e7bc449ad3a6e1d773"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "31365562ddb50bbb8a1af3831ac534c120ced0d3", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=7514d760b8fabd46e4874520b653ab8803c3517e", "patch": "@@ -1043,9 +1043,9 @@ where\n \n     impl<T> Drop for MergeHole<T> {\n         fn drop(&mut self) {\n-            // `T` is not a zero-sized type, so it's okay to divide by its size.\n-            let len = (self.end.addr() - self.start.addr()) / mem::size_of::<T>();\n+            // `T` is not a zero-sized type, and these are pointers into a slice's elements.\n             unsafe {\n+                let len = self.end.offset_from(self.start) as usize;\n                 ptr::copy_nonoverlapping(self.start, self.dest, len);\n             }\n         }"}, {"sha": "6c9107401fda659c556d8d7d9d00ebe7f8b0bd4a", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=7514d760b8fabd46e4874520b653ab8803c3517e", "patch": "@@ -294,17 +294,17 @@ fn is_ascii(s: &[u8]) -> bool {\n     // Paranoia check about alignment, since we're about to do a bunch of\n     // unaligned loads. In practice this should be impossible barring a bug in\n     // `align_offset` though.\n-    debug_assert_eq!((word_ptr.addr()) % mem::align_of::<usize>(), 0);\n+    debug_assert_eq!(word_ptr.addr() % mem::align_of::<usize>(), 0);\n \n     // Read subsequent words until the last aligned word, excluding the last\n     // aligned word by itself to be done in tail check later, to ensure that\n     // tail is always one `usize` at most to extra branch `byte_pos == len`.\n     while byte_pos < len - USIZE_SIZE {\n         debug_assert!(\n             // Sanity check that the read is in bounds\n-            (word_ptr.addr() + USIZE_SIZE) <= (start.wrapping_add(len).addr()) &&\n+            (word_ptr.addr() + USIZE_SIZE) <= start.addr().wrapping_add(len) &&\n             // And that our assumptions about `byte_pos` hold.\n-            (word_ptr.addr()) - (start.addr()) == byte_pos\n+            (word_ptr.addr() - start.addr()) == byte_pos\n         );\n \n         // SAFETY: We know `word_ptr` is properly aligned (because of"}, {"sha": "b74ab28fc092a9599e276016d4af985f3e184f2d", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=7514d760b8fabd46e4874520b653ab8803c3517e", "patch": "@@ -20,7 +20,7 @@ macro_rules! len {\n         if size == 0 {\n             // This _cannot_ use `unchecked_sub` because we depend on wrapping\n             // to represent the length of long ZST slice iterators.\n-            ($self.end.addr()).wrapping_sub(start.as_ptr().addr())\n+            $self.end.addr().wrapping_sub(start.as_ptr().addr())\n         } else {\n             // We know that `start <= end`, so can do better than `offset_from`,\n             // which needs to deal in signed.  By setting appropriate flags here"}, {"sha": "e80068b46abb9f360f34957c5b3f1ea01c0ca641", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7514d760b8fabd46e4874520b653ab8803c3517e/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=7514d760b8fabd46e4874520b653ab8803c3517e", "patch": "@@ -136,7 +136,7 @@ impl Repr {\n         let p = Box::into_raw(b).cast::<u8>();\n         // Should only be possible if an allocator handed out a pointer with\n         // wrong alignment.\n-        debug_assert_eq!((p.addr() & TAG_MASK), 0);\n+        debug_assert_eq!(p.addr() & TAG_MASK, 0);\n         // Note: We know `TAG_CUSTOM <= size_of::<Custom>()` (static_assert at\n         // end of file), and both the start and end of the expression must be\n         // valid without address space wraparound due to `Box`'s semantics."}]}