{"sha": "0fe43a124bb2b135cfd1268fda2941c3ac170c96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZTQzYTEyNGJiMmIxMzVjZmQxMjY4ZmRhMjk0MWMzYWMxNzBjOTY=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-03T14:35:26Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-05T12:00:31Z"}, "message": "Add capabilities tests.", "tree": {"sha": "a3c8732ac4acd0645f11cdaafc2ade2119c07686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c8732ac4acd0645f11cdaafc2ade2119c07686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fe43a124bb2b135cfd1268fda2941c3ac170c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe43a124bb2b135cfd1268fda2941c3ac170c96", "html_url": "https://github.com/rust-lang/rust/commit/0fe43a124bb2b135cfd1268fda2941c3ac170c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fe43a124bb2b135cfd1268fda2941c3ac170c96/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35418ceb9b07bd596cc09144f4f4df13432a712", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35418ceb9b07bd596cc09144f4f4df13432a712", "html_url": "https://github.com/rust-lang/rust/commit/e35418ceb9b07bd596cc09144f4f4df13432a712"}], "stats": {"total": 191, "additions": 184, "deletions": 7}, "files": [{"sha": "1371f6cb4a416d334fd72ea310de0f412d7875d3", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=0fe43a124bb2b135cfd1268fda2941c3ac170c96", "patch": "@@ -273,8 +273,8 @@ impl Request for HoverRequest {\n pub struct Hover {\n     #[serde(flatten)]\n     pub hover: lsp_types::Hover,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    pub actions: Option<Vec<CommandLinkGroup>>,\n+    #[serde(skip_serializing_if = \"Vec::is_empty\")]\n+    pub actions: Vec<CommandLinkGroup>,\n }\n \n #[derive(Debug, PartialEq, Clone, Default, Deserialize, Serialize)]"}, {"sha": "3ff7797024cf5fab380870df1d21a2ca50375e7d", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=0fe43a124bb2b135cfd1268fda2941c3ac170c96", "patch": "@@ -555,7 +555,7 @@ pub fn handle_hover(\n             }),\n             range: Some(range),\n         },\n-        actions: Some(prepare_hover_actions(&snap, info.info.actions())),\n+        actions: prepare_hover_actions(&snap, info.info.actions()),\n     };\n \n     Ok(Some(hover))\n@@ -1170,10 +1170,7 @@ fn show_references_command(\n }\n \n fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n-    lsp_ext::CommandLink {\n-        tooltip: Some(tooltip),\n-        command,\n-    }\n+    lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n \n fn show_impl_command_link("}, {"sha": "78c6195d7710915644d19ec024019ee04d45821d", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fe43a124bb2b135cfd1268fda2941c3ac170c96/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=0fe43a124bb2b135cfd1268fda2941c3ac170c96", "patch": "@@ -715,3 +715,183 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n     assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n }\n+\n+#[test]\n+fn test_client_support_hover_actions() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+struct Foo(u32);\n+\n+struct NoImpl(u32);\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Self(1)\n+    }\n+}\n+\"#,\n+    )\n+    .with_config(|config| {\n+        config.client_caps.hover_actions = true;\n+    })\n+    .server();\n+\n+    server.wait_until_workspace_is_loaded();\n+\n+    // has 1 implementation\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(0, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!({\n+            \"actions\": [{\n+                \"commands\": [{\n+                    \"arguments\": [\n+                      \"file:///[..]src/lib.rs\",\n+                      {\n+                        \"character\": 7,\n+                        \"line\": 0\n+                      },\n+                      [{\n+                          \"range\": { \"end\": { \"character\": 1, \"line\": 8 }, \"start\": { \"character\": 0, \"line\": 4 } },\n+                          \"uri\": \"file:///[..]src/lib.rs\"\n+                      }]\n+                    ],\n+                    \"command\": \"rust-analyzer.showReferences\",\n+                    \"title\": \"1 implementation\",\n+                    \"tooltip\": \"Go to implementations\"\n+                }]\n+            }],\n+            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct Foo\\n```\" },\n+            \"range\": { \"end\": { \"character\": 10, \"line\": 0 }, \"start\": { \"character\": 7, \"line\": 0 } }\n+        })\n+    );\n+\n+    // no hover\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(1, 0),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!(null),\n+    );\n+\n+    // no implementations\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(2, 12),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!({\n+            \"actions\": [{\n+                \"commands\": [{\n+                    \"arguments\": [\n+                      \"file:///[..]src/lib.rs\",\n+                      { \"character\": 7, \"line\": 2 },\n+                      []\n+                    ],\n+                    \"command\": \"rust-analyzer.showReferences\",\n+                    \"title\": \"0 implementations\",\n+                    \"tooltip\": \"Go to implementations\"\n+                }]\n+            }],\n+            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct NoImpl\\n```\" },\n+            \"range\": { \"end\": { \"character\": 13, \"line\": 2 }, \"start\": { \"character\": 7, \"line\": 2 } }\n+        })\n+    );\n+}\n+\n+#[test]\n+fn test_client_does_not_support_hover_actions() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let server = Project::with_fixture(\n+        r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+struct Foo(u32);\n+\n+struct NoImpl(u32);\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Self(1)\n+    }\n+}\n+\"#,\n+    )\n+    .with_config(|config| {\n+        config.client_caps.hover_actions = false;\n+    })\n+    .server();\n+\n+    server.wait_until_workspace_is_loaded();\n+\n+    // has 1 implementation\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(0, 9),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!({\n+            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct Foo\\n```\" },\n+            \"range\": { \"end\": { \"character\": 10, \"line\": 0 }, \"start\": { \"character\": 7, \"line\": 0 } }\n+        })\n+    );\n+\n+    // no hover\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(1, 0),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!(null),\n+    );\n+\n+    // no implementations\n+    server.request::<HoverRequest>(\n+        HoverParams {\n+            text_document_position_params: TextDocumentPositionParams::new(\n+                server.doc_id(\"src/lib.rs\"),\n+                Position::new(2, 12),\n+            ),\n+            work_done_progress_params: Default::default(),\n+        },\n+        json!({\n+            \"contents\": { \"kind\": \"markdown\", \"value\": \"```rust\\nfoo\\n```\\n\\n```rust\\nstruct NoImpl\\n```\" },\n+            \"range\": { \"end\": { \"character\": 13, \"line\": 2 }, \"start\": { \"character\": 7, \"line\": 2 } }\n+        })\n+    );\n+}"}]}