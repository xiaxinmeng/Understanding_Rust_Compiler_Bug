{"sha": "3adc0812542e6c9b13c78b85407dcc9d54885e0e", "node_id": "C_kwDOAAsO6NoAKDNhZGMwODEyNTQyZTZjOWIxM2M3OGI4NTQwN2RjYzlkNTQ4ODVlMGU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-08T17:16:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-18T17:28:17Z"}, "message": "Fix bad handling of primitive types", "tree": {"sha": "3b1d2a5ab2909092a68fb1ace11e4adcb1afac97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b1d2a5ab2909092a68fb1ace11e4adcb1afac97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3adc0812542e6c9b13c78b85407dcc9d54885e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3adc0812542e6c9b13c78b85407dcc9d54885e0e", "html_url": "https://github.com/rust-lang/rust/commit/3adc0812542e6c9b13c78b85407dcc9d54885e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3adc0812542e6c9b13c78b85407dcc9d54885e0e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d47d7cbaa9e8d163818fbd006ffa5382e3e66c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d47d7cbaa9e8d163818fbd006ffa5382e3e66c4", "html_url": "https://github.com/rust-lang/rust/commit/7d47d7cbaa9e8d163818fbd006ffa5382e3e66c4"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "89e61404ed0a0ab3eebc74af17603e1092507eea", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3adc0812542e6c9b13c78b85407dcc9d54885e0e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adc0812542e6c9b13c78b85407dcc9d54885e0e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=3adc0812542e6c9b13c78b85407dcc9d54885e0e", "patch": "@@ -38,7 +38,7 @@ impl JsonRenderer<'_> {\n                     Some(UrlFragment::UserWritten(_)) | None => *page_id,\n                 };\n \n-                (link.clone(), id_from_item_inner(id.into(), self.tcx, None))\n+                (link.clone(), id_from_item_inner(id.into(), self.tcx, None, None))\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n@@ -108,7 +108,7 @@ impl JsonRenderer<'_> {\n             Some(ty::Visibility::Public) => Visibility::Public,\n             Some(ty::Visibility::Restricted(did)) if did.is_crate_root() => Visibility::Crate,\n             Some(ty::Visibility::Restricted(did)) => Visibility::Restricted {\n-                parent: id_from_item_inner(did.into(), self.tcx, None),\n+                parent: id_from_item_inner(did.into(), self.tcx, None, None),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -208,12 +208,17 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n /// It generates an ID as follows:\n ///\n /// `CRATE_ID:ITEM_ID[:NAME_ID]` (if there is no name, NAME_ID is not generated).\n-pub(crate) fn id_from_item_inner(item_id: ItemId, tcx: TyCtxt<'_>, extra: Option<&Id>) -> Id {\n-    struct DisplayDefId<'a, 'b>(DefId, TyCtxt<'a>, Option<&'b Id>);\n+pub(crate) fn id_from_item_inner(\n+    item_id: ItemId,\n+    tcx: TyCtxt<'_>,\n+    extra: Option<&Id>,\n+    name: Option<Symbol>,\n+) -> Id {\n+    struct DisplayDefId<'a, 'b>(DefId, TyCtxt<'a>, Option<&'b Id>, Option<Symbol>);\n \n     impl<'a, 'b> fmt::Display for DisplayDefId<'a, 'b> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let DisplayDefId(def_id, tcx, extra) = self;\n+            let DisplayDefId(def_id, tcx, extra, name) = self;\n             // We need this workaround because primitive types' DefId actually refers to\n             // their parent module, which isn't present in the output JSON items. So\n             // instead, we directly get the primitive symbol and convert it to u32 to\n@@ -225,41 +230,54 @@ pub(crate) fn id_from_item_inner(item_id: ItemId, tcx: TyCtxt<'_>, extra: Option\n             } else {\n                 \"\"\n             };\n-            let name = if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n-                let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n-                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n-                    .filter(|attr| attr.has_name(sym::primitive))\n-                    .find_map(|attr| attr.value_str()) {\n-                format!(\":{}\", prim.as_u32())\n-            } else {\n-                tcx\n-                  .opt_item_name(*def_id)\n-                  .map(|n| format!(\":{}\", n.as_u32()))\n-                  .unwrap_or_default()\n+            let name = match name {\n+                Some(name) => format!(\":{}\", name.as_u32()),\n+                None => {\n+                    // We need this workaround because primitive types' DefId actually refers to\n+                    // their parent module, which isn't present in the output JSON items. So\n+                    // instead, we directly get the primitive symbol and convert it to u32 to\n+                    // generate the ID.\n+                    if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n+                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n+                            .filter(|attr| attr.has_name(sym::primitive))\n+                            .find_map(|attr| attr.value_str()) {\n+                        format!(\":{}\", prim.as_u32())\n+                    } else {\n+                        tcx\n+                        .opt_item_name(*def_id)\n+                        .map(|n| format!(\":{}\", n.as_u32()))\n+                        .unwrap_or_default()\n+                    }\n+                }\n             };\n-            write!(f, \"{}:{}{name}{extra}\", self.0.krate.as_u32(), u32::from(self.0.index))\n+            write!(f, \"{}:{}{name}{extra}\", def_id.krate.as_u32(), u32::from(def_id.index))\n         }\n     }\n \n     match item_id {\n-        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, extra))),\n-        ItemId::Blanket { for_, impl_id } => {\n-            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id, tcx, None), DisplayDefId(for_, tcx, extra)))\n-        }\n-        ItemId::Auto { for_, trait_ } => {\n-            Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, extra)))\n-        }\n+        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, extra, name))),\n+        ItemId::Blanket { for_, impl_id } => Id(format!(\n+            \"b:{}-{}\",\n+            DisplayDefId(impl_id, tcx, None, None),\n+            DisplayDefId(for_, tcx, extra, name)\n+        )),\n+        ItemId::Auto { for_, trait_ } => Id(format!(\n+            \"a:{}-{}\",\n+            DisplayDefId(trait_, tcx, None, None),\n+            DisplayDefId(for_, tcx, extra, name)\n+        )),\n     }\n }\n \n pub(crate) fn id_from_item(item: &clean::Item, tcx: TyCtxt<'_>) -> Id {\n     match *item.kind {\n         clean::ItemKind::ImportItem(ref import) => {\n             let extra =\n-                import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None));\n-            id_from_item_inner(item.item_id, tcx, extra.as_ref())\n+                import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None, None));\n+            id_from_item_inner(item.item_id, tcx, extra.as_ref(), item.name)\n         }\n-        _ => id_from_item_inner(item.item_id, tcx, None),\n+        _ => id_from_item_inner(item.item_id, tcx, None, item.name),\n     }\n }\n \n@@ -533,7 +551,7 @@ impl FromWithTcx<clean::Path> for Path {\n     fn from_tcx(path: clean::Path, tcx: TyCtxt<'_>) -> Path {\n         Path {\n             name: path.whole_name(),\n-            id: id_from_item_inner(path.def_id().into(), tcx, None),\n+            id: id_from_item_inner(path.def_id().into(), tcx, None, None),\n             args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n         }\n     }\n@@ -710,7 +728,7 @@ impl FromWithTcx<clean::Import> for Import {\n         Import {\n             source: import.source.path.whole_name(),\n             name,\n-            id: import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None)),\n+            id: import.source.did.map(ItemId::from).map(|i| id_from_item_inner(i, tcx, None, None)),\n             glob,\n         }\n     }"}, {"sha": "a0785f32cf203ddba1076ad2766b1cf6a2a3b787", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3adc0812542e6c9b13c78b85407dcc9d54885e0e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3adc0812542e6c9b13c78b85407dcc9d54885e0e/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=3adc0812542e6c9b13c78b85407dcc9d54885e0e", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(&self.cache.external_paths)\n                 .map(|(&k, &(ref path, kind))| {\n                     (\n-                        id_from_item_inner(k.into(), self.tcx, None),\n+                        id_from_item_inner(k.into(), self.tcx, None, None),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path: path.iter().map(|s| s.to_string()).collect(),"}]}