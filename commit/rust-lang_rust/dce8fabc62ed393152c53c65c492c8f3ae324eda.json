{"sha": "dce8fabc62ed393152c53c65c492c8f3ae324eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZThmYWJjNjJlZDM5MzE1MmM1M2M2NWM0OTJjOGYzYWUzMjRlZGE=", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2019-10-22T19:40:22Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2019-10-25T15:22:53Z"}, "message": "Use ManuallyDrop in examples for {Vec,String}::from_raw_parts", "tree": {"sha": "213b7603a91b180da60b90055a792bde8bb2b382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213b7603a91b180da60b90055a792bde8bb2b382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce8fabc62ed393152c53c65c492c8f3ae324eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce8fabc62ed393152c53c65c492c8f3ae324eda", "html_url": "https://github.com/rust-lang/rust/commit/dce8fabc62ed393152c53c65c492c8f3ae324eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce8fabc62ed393152c53c65c492c8f3ae324eda/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d21d257c9691983fd51e7d5d9ace4de8933114c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d21d257c9691983fd51e7d5d9ace4de8933114c", "html_url": "https://github.com/rust-lang/rust/commit/0d21d257c9691983fd51e7d5d9ace4de8933114c"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "1d0faeccecf1d9150c74aaf183f4e37b52d626f0", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dce8fabc62ed393152c53c65c492c8f3ae324eda/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce8fabc62ed393152c53c65c492c8f3ae324eda/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=dce8fabc62ed393152c53c65c492c8f3ae324eda", "patch": "@@ -194,7 +194,10 @@ use crate::vec::Vec;\n /// ```\n /// use std::mem;\n ///\n-/// let mut story = String::from(\"Once upon a time...\");\n+/// let story = String::from(\"Once upon a time...\");\n+///\n+/// // Prevent automatically dropping the String's data\n+/// let mut story = mem::ManuallyDrop::new(story);\n ///\n /// let ptr = story.as_mut_ptr();\n /// let len = story.len();\n@@ -203,9 +206,6 @@ use crate::vec::Vec;\n /// // story has nineteen bytes\n /// assert_eq!(19, len);\n ///\n-/// // Now that we have our parts, we throw the story away.\n-/// mem::forget(story);\n-///\n /// // We can re-build a String out of ptr, len, and capacity. This is all\n /// // unsafe because we are responsible for making sure the components are\n /// // valid:\n@@ -676,13 +676,15 @@ impl String {\n     /// use std::mem;\n     ///\n     /// unsafe {\n-    ///     let mut s = String::from(\"hello\");\n+    ///     let s = String::from(\"hello\");\n+    ///\n+    ///     // Prevent automatically dropping the String's data\n+    ///     let mut s = mem::ManuallyDrop::new(s);\n+    ///\n     ///     let ptr = s.as_mut_ptr();\n     ///     let len = s.len();\n     ///     let capacity = s.capacity();\n     ///\n-    ///     mem::forget(s);\n-    ///\n     ///     let s = String::from_raw_parts(ptr, len, capacity);\n     ///\n     ///     assert_eq!(String::from(\"hello\"), s);"}, {"sha": "c8fb897123475c82ee4467a0176f825630121856", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dce8fabc62ed393152c53c65c492c8f3ae324eda/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce8fabc62ed393152c53c65c492c8f3ae324eda/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=dce8fabc62ed393152c53c65c492c8f3ae324eda", "patch": "@@ -389,18 +389,18 @@ impl<T> Vec<T> {\n     /// use std::ptr;\n     /// use std::mem;\n     ///\n-    /// let mut v = vec![1, 2, 3];\n+    /// let v = vec![1, 2, 3];\n+    ///\n+    /// // Prevent running `v`'s destructor so we are in complete control\n+    /// // of the allocation.\n+    /// let mut v = mem::ManuallyDrop::new(v);\n     ///\n     /// // Pull out the various important pieces of information about `v`\n     /// let p = v.as_mut_ptr();\n     /// let len = v.len();\n     /// let cap = v.capacity();\n     ///\n     /// unsafe {\n-    ///     // Cast `v` into the void: no destructor run, so we are in\n-    ///     // complete control of the allocation to which `p` points.\n-    ///     mem::forget(v);\n-    ///\n     ///     // Overwrite memory with 4, 5, 6\n     ///     for i in 0..len as isize {\n     ///         ptr::write(p.offset(i), 4 + i);"}]}