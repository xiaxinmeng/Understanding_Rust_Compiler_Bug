{"sha": "65d683df367ac1d2b8c421c61b76c9e2c26b8704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDY4M2RmMzY3YWMxZDJiOGM0MjFjNjFiNzZjOWUyYzI2Yjg3MDQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T19:57:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T19:57:01Z"}, "message": "Collapse documentation and markdown config settings into an enum", "tree": {"sha": "efa86f0065174077b7d3fa1a2c95c50963c2643b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efa86f0065174077b7d3fa1a2c95c50963c2643b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d683df367ac1d2b8c421c61b76c9e2c26b8704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d683df367ac1d2b8c421c61b76c9e2c26b8704", "html_url": "https://github.com/rust-lang/rust/commit/65d683df367ac1d2b8c421c61b76c9e2c26b8704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d683df367ac1d2b8c421c61b76c9e2c26b8704/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c95b8fa15f2d9239625c19463f552c84ad99a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c95b8fa15f2d9239625c19463f552c84ad99a2", "html_url": "https://github.com/rust-lang/rust/commit/99c95b8fa15f2d9239625c19463f552c84ad99a2"}], "stats": {"total": 109, "additions": 70, "deletions": 39}, "files": [{"sha": "c6d6bb74a829d314182ff279bdb2acdf142e682b", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=65d683df367ac1d2b8c421c61b76c9e2c26b8704", "patch": "@@ -31,8 +31,19 @@ use crate::{\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n     pub links_in_hover: bool,\n-    pub markdown: bool,\n-    pub documentation: bool,\n+    pub documentation: Option<HoverDocFormat>,\n+}\n+\n+impl HoverConfig {\n+    fn markdown(&self) -> bool {\n+        matches!(self.documentation, Some(HoverDocFormat::Markdown))\n+    }\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum HoverDocFormat {\n+    Markdown,\n+    PlainText,\n }\n \n #[derive(Debug, Clone)]\n@@ -125,13 +136,7 @@ pub(crate) fn hover(\n             _ => None,\n         };\n         if let Some(markup) = hover_for_definition(db, definition, famous_defs.as_ref(), config) {\n-            res.markup = process_markup(\n-                sema.db,\n-                definition,\n-                &markup,\n-                config.links_in_hover,\n-                config.markdown,\n-            );\n+            res.markup = process_markup(sema.db, definition, &markup, config);\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n             }\n@@ -172,7 +177,7 @@ pub(crate) fn hover(\n         }\n     };\n \n-    res.markup = if config.markdown {\n+    res.markup = if config.markdown() {\n         Markup::fenced_block(&ty.display(db))\n     } else {\n         ty.display(db).to_string().into()\n@@ -346,13 +351,12 @@ fn process_markup(\n     db: &RootDatabase,\n     def: Definition,\n     markup: &Markup,\n-    links_in_hover: bool,\n-    markdown: bool,\n+    config: &HoverConfig,\n ) -> Markup {\n     let markup = markup.as_str();\n-    let markup = if !markdown {\n+    let markup = if !config.markdown() {\n         remove_markdown(markup)\n-    } else if links_in_hover {\n+    } else if config.links_in_hover {\n         rewrite_links(db, markup, &def)\n     } else {\n         remove_links(markup)\n@@ -437,7 +441,11 @@ fn hover_for_definition(\n         Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n     };\n \n-    return hover_markup(docs.filter(|_| config.documentation).map(Into::into), label, mod_path);\n+    return hover_markup(\n+        docs.filter(|_| config.documentation.is_some()).map(Into::into),\n+        label,\n+        mod_path,\n+    );\n \n     fn label_and_docs<D>(db: &RootDatabase, def: D) -> (String, Option<hir::Documentation>)\n     where\n@@ -477,7 +485,7 @@ fn hover_for_keyword(\n     config: &HoverConfig,\n     token: &SyntaxToken,\n ) -> Option<RangeInfo<HoverResult>> {\n-    if !token.kind().is_keyword() || !config.documentation {\n+    if !token.kind().is_keyword() || !config.documentation.is_some() {\n         return None;\n     }\n     let famous_defs = FamousDefs(sema, sema.scope(&token.parent()?).krate());\n@@ -489,8 +497,7 @@ fn hover_for_keyword(\n         sema.db,\n         Definition::ModuleDef(doc_owner.into()),\n         &hover_markup(Some(docs.into()), token.text().into(), None)?,\n-        config.links_in_hover,\n-        config.markdown,\n+        config,\n     );\n     Some(RangeInfo::new(token.text_range(), HoverResult { markup, actions: Default::default() }))\n }\n@@ -530,14 +537,17 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use ide_db::base_db::FileLoader;\n \n-    use crate::{fixture, HoverConfig};\n+    use crate::{fixture, hover::HoverDocFormat, HoverConfig};\n \n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n         assert!(analysis\n             .hover(\n                 position,\n-                &HoverConfig { links_in_hover: true, markdown: true, documentation: true }\n+                &HoverConfig {\n+                    links_in_hover: true,\n+                    documentation: Some(HoverDocFormat::Markdown)\n+                }\n             )\n             .unwrap()\n             .is_none());\n@@ -548,7 +558,10 @@ mod tests {\n         let hover = analysis\n             .hover(\n                 position,\n-                &HoverConfig { links_in_hover: true, markdown: true, documentation: true },\n+                &HoverConfig {\n+                    links_in_hover: true,\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n             )\n             .unwrap()\n             .unwrap();\n@@ -565,7 +578,10 @@ mod tests {\n         let hover = analysis\n             .hover(\n                 position,\n-                &HoverConfig { links_in_hover: false, markdown: true, documentation: true },\n+                &HoverConfig {\n+                    links_in_hover: false,\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n             )\n             .unwrap()\n             .unwrap();\n@@ -582,7 +598,10 @@ mod tests {\n         let hover = analysis\n             .hover(\n                 position,\n-                &HoverConfig { links_in_hover: true, markdown: false, documentation: true },\n+                &HoverConfig {\n+                    links_in_hover: true,\n+                    documentation: Some(HoverDocFormat::PlainText),\n+                },\n             )\n             .unwrap()\n             .unwrap();\n@@ -599,7 +618,10 @@ mod tests {\n         let hover = analysis\n             .hover(\n                 position,\n-                &HoverConfig { links_in_hover: true, markdown: true, documentation: true },\n+                &HoverConfig {\n+                    links_in_hover: true,\n+                    documentation: Some(HoverDocFormat::Markdown),\n+                },\n             )\n             .unwrap()\n             .unwrap();"}, {"sha": "b978e36af2e5b3a76197b4ef51033751cf6af742", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=65d683df367ac1d2b8c421c61b76c9e2c26b8704", "patch": "@@ -75,7 +75,7 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},\n     folding_ranges::{Fold, FoldKind},\n-    hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n+    hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n     move_item::Direction,"}, {"sha": "b9aa6f0aada0fb8efe25facccc981bbf56abdfe4", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d683df367ac1d2b8c421c61b76c9e2c26b8704/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=65d683df367ac1d2b8c421c61b76c9e2c26b8704", "patch": "@@ -10,7 +10,10 @@\n use std::{ffi::OsString, iter, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n-use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n+use ide::{\n+    AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, HoverDocFormat,\n+    InlayHintsConfig,\n+};\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n     SnippetCap,\n@@ -777,19 +780,25 @@ impl Config {\n     pub fn hover(&self) -> HoverConfig {\n         HoverConfig {\n             links_in_hover: self.data.hover_linksInHover,\n-            markdown: try_or!(\n-                self.caps\n-                    .text_document\n-                    .as_ref()?\n-                    .hover\n-                    .as_ref()?\n-                    .content_format\n-                    .as_ref()?\n-                    .as_slice(),\n-                &[]\n-            )\n-            .contains(&MarkupKind::Markdown),\n-            documentation: self.data.hover_documentation,\n+            documentation: self.data.hover_documentation.then(|| {\n+                let is_markdown = try_or!(\n+                    self.caps\n+                        .text_document\n+                        .as_ref()?\n+                        .hover\n+                        .as_ref()?\n+                        .content_format\n+                        .as_ref()?\n+                        .as_slice(),\n+                    &[]\n+                )\n+                .contains(&MarkupKind::Markdown);\n+                if is_markdown {\n+                    HoverDocFormat::Markdown\n+                } else {\n+                    HoverDocFormat::PlainText\n+                }\n+            }),\n         }\n     }\n "}]}