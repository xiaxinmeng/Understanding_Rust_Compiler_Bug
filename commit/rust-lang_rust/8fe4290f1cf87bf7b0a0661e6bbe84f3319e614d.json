{"sha": "8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTQyOTBmMWNmODdiZjdiMGEwNjYxZTZiYmU4NGYzMzE5ZTYxNGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-06T08:19:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-04-06T08:19:10Z"}, "message": "Move span into `StructField`", "tree": {"sha": "13260050b5b5463c491ae61c941f60477421fdc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13260050b5b5463c491ae61c941f60477421fdc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "html_url": "https://github.com/rust-lang/rust/commit/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3744f07f0d32f9673af1563d70b22985b1c2cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3744f07f0d32f9673af1563d70b22985b1c2cf", "html_url": "https://github.com/rust-lang/rust/commit/7f3744f07f0d32f9673af1563d70b22985b1c2cf"}], "stats": {"total": 99, "additions": 50, "deletions": 49}, "files": [{"sha": "46ac38467068537b5f0410418c4f12c0fb10943d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     }\n \n     fn visit_struct_field(&mut self, s: &ast::StructField) {\n-        self.with_lint_attrs(&s.node.attrs, |cx| {\n+        self.with_lint_attrs(&s.attrs, |cx| {\n             run_lints!(cx, check_struct_field, early_passes, s);\n             ast_visit::walk_struct_field(cx, s);\n         })"}, {"sha": "738a04dea585de7a7498e8eee67fc6ad68329f0d", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -621,11 +621,11 @@ pub fn lower_struct_field(lctx: &LoweringContext,\n                           -> hir::StructField {\n     hir::StructField {\n         span: f.span,\n-        id: f.node.id,\n-        name: f.node.ident.map(|ident| ident.name).unwrap_or(token::intern(&index.to_string())),\n-        vis: lower_visibility(lctx, f.node.vis),\n-        ty: lower_ty(lctx, &f.node.ty),\n-        attrs: lower_attrs(lctx, &f.node.attrs),\n+        id: f.id,\n+        name: f.ident.map(|ident| ident.name).unwrap_or(token::intern(&index.to_string())),\n+        vis: lower_visibility(lctx, &f.vis),\n+        ty: lower_ty(lctx, &f.ty),\n+        attrs: lower_attrs(lctx, &f.attrs),\n     }\n }\n "}, {"sha": "e9cfd24d41047f536439d50a0003bc974fce74b5", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -563,7 +563,7 @@ where D: Dump\n         // fields\n         for field in def.fields() {\n             self.process_struct_field_def(field, item.id);\n-            self.visit_ty(&field.node.ty);\n+            self.visit_ty(&field.ty);\n         }\n \n         self.process_generic_params(ty_params, item.span, &qualname, item.id);\n@@ -624,7 +624,7 @@ where D: Dump\n \n             for field in variant.node.data.fields() {\n                 self.process_struct_field_def(field, variant.node.data.id());\n-                self.visit_ty(&field.node.ty);\n+                self.visit_ty(&field.ty);\n             }\n         }\n         self.process_generic_params(ty_params, item.span, &enum_data.qualname, enum_data.id);"}, {"sha": "95339c7937161fd73417afaefb5ee3c277c3f201", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -246,13 +246,13 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n     pub fn get_field_data(&self, field: &ast::StructField,\n                           scope: NodeId) -> Option<VariableData> {\n-        if let Some(ident) = field.node.ident {\n+        if let Some(ident) = field.ident {\n             let qualname = format!(\"::{}::{}\", self.tcx.map.path_to_string(scope), ident);\n-            let typ = self.tcx.node_types().get(&field.node.id).unwrap().to_string();\n+            let typ = self.tcx.node_types().get(&field.id).unwrap().to_string();\n             let sub_span = self.span_utils.sub_span_before_token(field.span, token::Colon);\n             filter!(self.span_utils, sub_span, field.span, None);\n             Some(VariableData {\n-                id: field.node.id,\n+                id: field.id,\n                 name: ident.to_string(),\n                 qualname: qualname,\n                 span: sub_span.unwrap(),"}, {"sha": "dbe7b078498ea3ec96ddb020fe4c687e8ad2592c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -1876,16 +1876,15 @@ pub enum Visibility {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct StructField_ {\n+pub struct StructField {\n+    pub span: Span,\n     pub ident: Option<Ident>,\n     pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: Vec<Attribute>,\n }\n \n-pub type StructField = Spanned<StructField_>;\n-\n /// Fields and Ids of enum variants and structs\n ///\n /// For enum variants: `NodeId` represents both an Id of the variant itself (relevant for all"}, {"sha": "ffba9e824d4ad2779ffad7b46dc77f2271015a6d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n     }\n \n     fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.node.id);\n+        self.operation.visit_id(struct_field.id);\n         visit::walk_struct_field(self, struct_field)\n     }\n "}, {"sha": "4554a280e5f198c1ddf11fc0e7dbf7750e40603e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -180,12 +180,12 @@ fn fold_struct<F>(cx: &mut Context<F>, vdata: ast::VariantData) -> ast::VariantD\n     match vdata {\n         ast::VariantData::Struct(fields, id) => {\n             ast::VariantData::Struct(fields.into_iter().filter(|m| {\n-                (cx.in_cfg)(&m.node.attrs)\n+                (cx.in_cfg)(&m.attrs)\n             }).collect(), id)\n         }\n         ast::VariantData::Tuple(fields, id) => {\n             ast::VariantData::Tuple(fields.into_iter().filter(|m| {\n-                (cx.in_cfg)(&m.node.attrs)\n+                (cx.in_cfg)(&m.attrs)\n             }).collect(), id)\n         }\n         ast::VariantData::Unit(id) => ast::VariantData::Unit(id)\n@@ -434,7 +434,7 @@ impl<'v, 'a, 'b> visit::Visitor<'v> for StmtExprAttrFeatureVisitor<'a, 'b> {\n     }\n \n     fn visit_struct_field(&mut self, s: &'v ast::StructField) {\n-        if node_survives_cfg(&s.node.attrs, self.config) {\n+        if node_survives_cfg(&s.attrs, self.config) {\n             visit::walk_struct_field(self, s);\n         }\n     }"}, {"sha": "a4e5b68277d698799d8be41122f0ac335947854a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -1007,13 +1007,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n-            Spanned { span: ty.span, node: ast::StructField_ {\n+            ast::StructField {\n+                span: ty.span,\n                 ty: ty,\n                 ident: None,\n                 vis: ast::Visibility::Inherited,\n                 attrs: Vec::new(),\n                 id: ast::DUMMY_NODE_ID,\n-            }}\n+            }\n         }).collect();\n \n         let vdata = if fields.is_empty() {"}, {"sha": "46191b95f81f65e246f5375e50ca68fe03b1b694", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -847,15 +847,13 @@ pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> Poly\n }\n \n pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField {\n-    Spanned {\n-        node: StructField_ {\n-            id: fld.new_id(f.node.id),\n-            ident: f.node.ident.map(|ident| fld.fold_ident(ident)),\n-            vis: f.node.vis,\n-            ty: fld.fold_ty(f.node.ty),\n-            attrs: fold_attrs(f.node.attrs, fld),\n-        },\n-        span: fld.new_span(f.span)\n+    StructField {\n+        span: fld.new_span(f.span),\n+        id: fld.new_id(f.id),\n+        ident: f.ident.map(|ident| fld.fold_ident(ident)),\n+        vis: f.vis,\n+        ty: fld.fold_ty(f.ty),\n+        attrs: fold_attrs(f.attrs, fld),\n     }\n }\n "}, {"sha": "28e4682f66b7e87636470c5bfe8bb1637e488000", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -3845,13 +3845,14 @@ impl<'a> Parser<'a> {\n         let name = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty_sum()?;\n-        Ok(spanned(lo, self.last_span.hi, ast::StructField_ {\n+        Ok(StructField {\n+            span: mk_sp(lo, self.last_span.hi),\n             ident: Some(name),\n             vis: pr,\n             id: ast::DUMMY_NODE_ID,\n             ty: ty,\n             attrs: attrs,\n-        }))\n+        })\n     }\n \n     /// Emit an expected item after attributes error.\n@@ -5245,14 +5246,16 @@ impl<'a> Parser<'a> {\n             |p| {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n-                let struct_field_ = ast::StructField_ {\n-                    vis: p.parse_visibility()?,\n+                let vis = p.parse_visibility()?;\n+                let ty = p.parse_ty_sum()?;\n+                Ok(StructField {\n+                    span: mk_sp(lo, p.span.hi),\n+                    vis: vis,\n                     ident: None,\n                     id: ast::DUMMY_NODE_ID,\n-                    ty: p.parse_ty_sum()?,\n+                    ty: ty,\n                     attrs: attrs,\n-                };\n-                Ok(spanned(lo, p.span.hi, struct_field_))\n+                })\n             })?;\n \n         Ok(fields)"}, {"sha": "e2b1d2f5e7abeb85f9b3c7536e746a3ef1ad11e3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -1407,9 +1407,9 @@ impl<'a> State<'a> {\n                 self.commasep(\n                     Inconsistent, struct_def.fields(),\n                     |s, field| {\n-                        s.print_visibility(field.node.vis)?;\n+                        s.print_visibility(&field.vis)?;\n                         s.maybe_print_comment(field.span.lo)?;\n-                        s.print_type(&field.node.ty)\n+                        s.print_type(&field.ty)\n                     }\n                 )?;\n                 self.pclose()?;\n@@ -1429,11 +1429,11 @@ impl<'a> State<'a> {\n             for field in struct_def.fields() {\n                 self.hardbreak_if_not_bol()?;\n                 self.maybe_print_comment(field.span.lo)?;\n-                self.print_outer_attributes(&field.node.attrs)?;\n-                self.print_visibility(field.node.vis)?;\n-                self.print_ident(field.node.ident.unwrap())?;\n+                self.print_outer_attributes(&field.attrs)?;\n+                self.print_visibility(&field.vis)?;\n+                self.print_ident(field.ident.unwrap())?;\n                 self.word_nbsp(\":\")?;\n-                self.print_type(&field.node.ty)?;\n+                self.print_type(&field.ty)?;\n                 word(&mut self.s, \",\")?;\n             }\n "}, {"sha": "839bbf4805df20c27cacbebbcc209375d70e0e8f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -619,9 +619,9 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              struct_field: &'v StructField) {\n-    walk_opt_ident(visitor, struct_field.span, struct_field.node.ident);\n-    visitor.visit_ty(&struct_field.node.ty);\n-    walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n+    walk_opt_ident(visitor, struct_field.span, struct_field.ident);\n+    visitor.visit_ty(&struct_field.ty);\n+    walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {"}, {"sha": "a389165f71534f66930687aab4ee94e341846c65", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=8fe4290f1cf87bf7b0a0661e6bbe84f3319e614d", "patch": "@@ -653,7 +653,7 @@ impl<'a> TraitDef<'a> {\n                          type_ident: Ident,\n                          generics: &Generics) -> P<ast::Item> {\n         let field_tys: Vec<P<ast::Ty>> = struct_def.fields().iter()\n-            .map(|field| field.node.ty.clone())\n+            .map(|field| field.ty.clone())\n             .collect();\n \n         let methods = self.methods.iter().map(|method_def| {\n@@ -701,7 +701,7 @@ impl<'a> TraitDef<'a> {\n \n         for variant in &enum_def.variants {\n             field_tys.extend(variant.node.data.fields().iter()\n-                .map(|field| field.node.ty.clone()));\n+                .map(|field| field.ty.clone()));\n         }\n \n         let methods = self.methods.iter().map(|method_def| {\n@@ -1435,7 +1435,7 @@ impl<'a> TraitDef<'a> {\n         let mut just_spans = Vec::new();\n         for field in struct_def.fields(){\n             let sp = self.set_expn_info(cx, field.span);\n-            match field.node.ident {\n+            match field.ident {\n                 Some(ident) => named_idents.push((ident, sp)),\n                 _ => just_spans.push(sp),\n             }\n@@ -1481,7 +1481,7 @@ impl<'a> TraitDef<'a> {\n             paths.push(codemap::Spanned{span: sp, node: ident});\n             let val = cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp,ident)));\n             let val = cx.expr(sp, ast::ExprKind::Paren(val));\n-            ident_exprs.push((sp, struct_field.node.ident, val, &struct_field.node.attrs[..]));\n+            ident_exprs.push((sp, struct_field.ident, val, &struct_field.attrs[..]));\n         }\n \n         let subpats = self.create_subpatterns(cx, paths, mutbl);"}]}