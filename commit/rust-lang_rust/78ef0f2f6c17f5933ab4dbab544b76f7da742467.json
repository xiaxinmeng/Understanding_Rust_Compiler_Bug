{"sha": "78ef0f2f6c17f5933ab4dbab544b76f7da742467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWYwZjJmNmMxN2Y1OTMzYWI0ZGJhYjU0NGI3NmY3ZGE3NDI0Njc=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-03T18:45:58Z"}, "committer": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-03T20:54:38Z"}, "message": "Add additional test cases and improve span lint", "tree": {"sha": "95040c159be049ec6633137a905633994fa631a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95040c159be049ec6633137a905633994fa631a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ef0f2f6c17f5933ab4dbab544b76f7da742467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ef0f2f6c17f5933ab4dbab544b76f7da742467", "html_url": "https://github.com/rust-lang/rust/commit/78ef0f2f6c17f5933ab4dbab544b76f7da742467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ef0f2f6c17f5933ab4dbab544b76f7da742467/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3", "html_url": "https://github.com/rust-lang/rust/commit/0f5e71f8f2d42e3eac3e855a83d53899d4da6eb3"}], "stats": {"total": 157, "additions": 108, "deletions": 49}, "files": [{"sha": "817230a29c639e1a3d118b6ef57303e77b3cd81b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/78ef0f2f6c17f5933ab4dbab544b76f7da742467/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ef0f2f6c17f5933ab4dbab544b76f7da742467/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=78ef0f2f6c17f5933ab4dbab544b76f7da742467", "patch": "@@ -2034,42 +2034,27 @@ fn check_manual_flatten<'tcx>(\n \n                 // Prepare the help message\n                 let mut applicability = Applicability::MaybeIncorrect;\n-                let arg_snippet = snippet_with_applicability(\n-                    cx,\n-                    arg.span,\n-                    \"..\",\n-                    &mut applicability,\n-                );\n-                // Determine if `arg` is by reference, an `Iterator`, or implicitly adjusted with `into_iter`\n-                let arg_ty = cx.typeck_results().expr_ty(arg);\n-                let hint = if arg_ty.is_ref() {\n-                    if has_iter_method(cx, arg_ty).is_none() {\n-                        return;\n-                    } else if let ExprKind::AddrOf(_, _, arg_expr) = arg.kind {\n-                        format!(\"{}.iter().flatten()\", snippet(cx, arg_expr.span, \"..\"))\n-                    } else {\n-                        return;\n-                    }\n-                } else if let Some(id) = get_trait_def_id(cx, &paths::ITERATOR) {\n-                    let is_iterator = implements_trait(cx, arg_ty, id, &[]);\n-                    if is_iterator {\n-                        format!(\"{}.flatten()\", arg_snippet)\n-                    } else {\n-                        format!(\"{}.into_iter().flatten()\", arg_snippet)\n-                    }\n-                } else {\n-                    return\n-                };\n+                let arg_snippet = make_iterator_snippet(cx, arg, &mut applicability);\n \n-                span_lint_and_sugg(\n+                span_lint_and_then(\n                     cx,\n                     MANUAL_FLATTEN,\n                     span,\n                     &msg,\n-                    \"try\",\n-                    hint,\n-                    applicability,\n-                )\n+                    |diag| {\n+                        let sugg = format!(\"{}.flatten()\", arg_snippet);\n+                        diag.span_suggestion(\n+                            arg.span,\n+                            \"try\",\n+                            sugg,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        diag.span_help(\n+                            inner_expr.span,\n+                            \"also remove the `if let` statement in the for loop\",\n+                        );\n+                    }\n+                );\n             }\n         }\n     }"}, {"sha": "ea3440f6da2146a31d0260e78c8b12e44b6c3b5c", "filename": "tests/ui/manual_flatten.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78ef0f2f6c17f5933ab4dbab544b76f7da742467/tests%2Fui%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ef0f2f6c17f5933ab4dbab544b76f7da742467/tests%2Fui%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.rs?ref=78ef0f2f6c17f5933ab4dbab544b76f7da742467", "patch": "@@ -4,8 +4,8 @@ fn main() {\n     // Test for loop over implicitly adjusted `Iterator` with `if let` expression\n     let x = vec![Some(1), Some(2), Some(3)];\n     for n in x {\n-        if let Some(n) = n {\n-            println!(\"{}\", n);\n+        if let Some(y) = n {\n+            println!(\"{}\", y);\n         }\n     }\n \n@@ -24,12 +24,22 @@ fn main() {\n         }\n     }\n \n+    // Test for loop over an implicit reference\n+    // Note: If `clippy::manual_flatten` is made autofixable, this case will\n+    // lead to a follow-up lint `clippy::into_iter_on_ref`\n+    let z = &y;\n+    for n in z {\n+        if let Ok(n) = n {\n+            println!(\"{}\", n);\n+        }\n+    }\n+\n     // Test for loop over `Iterator` with `if let` expression\n     let z = vec![Some(1), Some(2), Some(3)];\n     let z = z.iter();\n     for n in z {\n-        if let Some(n) = n {\n-            println!(\"{}\", n);\n+        if let Some(m) = n {\n+            println!(\"{}\", m);\n         }\n     }\n "}, {"sha": "49b8ed0564aee742b0d24857b2e3dcf2535e5951", "filename": "tests/ui/manual_flatten.stderr", "status": "modified", "additions": 78, "deletions": 14, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/78ef0f2f6c17f5933ab4dbab544b76f7da742467/tests%2Fui%2Fmanual_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78ef0f2f6c17f5933ab4dbab544b76f7da742467/tests%2Fui%2Fmanual_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.stderr?ref=78ef0f2f6c17f5933ab4dbab544b76f7da742467", "patch": "@@ -1,44 +1,108 @@\n error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n   --> $DIR/manual_flatten.rs:6:5\n    |\n-LL | /     for n in x {\n-LL | |         if let Some(n) = n {\n-LL | |             println!(\"{}\", n);\n+LL |       for n in x {\n+   |       ^        - help: try: `x.into_iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Some(y) = n {\n+LL | |             println!(\"{}\", y);\n LL | |         }\n LL | |     }\n-   | |_____^ help: try: `x.into_iter().flatten()`\n+   | |_____^\n    |\n    = note: `-D clippy::manual-flatten` implied by `-D warnings`\n+help: also remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:7:9\n+   |\n+LL | /         if let Some(y) = n {\n+LL | |             println!(\"{}\", y);\n+LL | |         }\n+   | |_________^\n \n error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n   --> $DIR/manual_flatten.rs:14:5\n    |\n-LL | /     for n in y.clone() {\n+LL |       for n in y.clone() {\n+   |       ^        --------- help: try: `y.clone().into_iter().flatten()`\n+   |  _____|\n+   | |\n LL | |         if let Ok(n) = n {\n LL | |             println!(\"{}\", n);\n LL | |         };\n LL | |     }\n-   | |_____^ help: try: `y.clone().into_iter().flatten()`\n+   | |_____^\n+   |\n+help: also remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:15:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         };\n+   | |_________^\n \n error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n   --> $DIR/manual_flatten.rs:21:5\n    |\n-LL | /     for n in &y {\n+LL |       for n in &y {\n+   |       ^        -- help: try: `y.iter().flatten()`\n+   |  _____|\n+   | |\n LL | |         if let Ok(n) = n {\n LL | |             println!(\"{}\", n);\n LL | |         }\n LL | |     }\n-   | |_____^ help: try: `y.iter().flatten()`\n+   | |_____^\n+   |\n+help: also remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:22:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+   | |_________^\n \n-error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n-  --> $DIR/manual_flatten.rs:30:5\n+error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:31:5\n    |\n-LL | /     for n in z {\n-LL | |         if let Some(n) = n {\n+LL |       for n in z {\n+   |       ^        - help: try: `z.into_iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Ok(n) = n {\n LL | |             println!(\"{}\", n);\n LL | |         }\n LL | |     }\n-   | |_____^ help: try: `z.flatten()`\n+   | |_____^\n+   |\n+help: also remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:32:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+   | |_________^\n+\n+error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:40:5\n+   |\n+LL |       for n in z {\n+   |       ^        - help: try: `z.flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Some(m) = n {\n+LL | |             println!(\"{}\", m);\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+help: also remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:41:9\n+   |\n+LL | /         if let Some(m) = n {\n+LL | |             println!(\"{}\", m);\n+LL | |         }\n+   | |_________^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}