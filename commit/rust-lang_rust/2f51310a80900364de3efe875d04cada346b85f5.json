{"sha": "2f51310a80900364de3efe875d04cada346b85f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNTEzMTBhODA5MDAzNjRkZTNlZmU4NzVkMDRjYWRhMzQ2Yjg1ZjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-20T08:58:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-12T07:41:22Z"}, "message": "clamp down on hacks in compiletest", "tree": {"sha": "f3ab822d23af35323cd6d508ef37ec886f882ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ab822d23af35323cd6d508ef37ec886f882ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f51310a80900364de3efe875d04cada346b85f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYdzMiAAoJEFbW7qD8Z6xG3LYQAIaz+6rEVeVD+z+G5kHSpaMb\nq8b7HFzFtuAb1FdGfTRpSAMh4blPvLNXFmbLwZo/Svtz6yzZUWDD8zPv/uxRak+P\n09GXeHupOGiMIlo73wRIwRGjwdcMwWUU+Jv05XbMoghqpKeG0f2Z9u/rzdgh9LcD\nA42erYtXTt6ArGgrMkpaL4aDyBpwLUC28X7k+SlWmhUuwi5D6usvy0zZZqErr6sp\nrOxpQDEJKsxe558O/tN18EdAjskbrpo8yujD5pgnI9RVf+dZlDF6fKpSKuqlXDyA\nIdkCpq+3T1FKgYxyk5pyMjcNWC/hEYXX6V4OEKxvy/Wmp6eO3R/rOdJ9EnYrM9Iq\nGOMMzZYbcPNDh8WsrIRuMUKCylzmHpm//UFnAXtrmNGWUSQr+0pSEr7ChAeHSfOR\ncjABvyZX7XX1JsxLFUXpeuin86oHDGJw3Uvu+hgY6tO8zlKvvHAmWYOv+YjT8if5\ns1Y+7yEsHIvffncF3iLnVOLSMtNGinh1wvnRumy8yPH7ek6nwh5zsM3A7aAhpLu3\nJbq1/ylWEtw5rQ8IEZaO28STiDH5tY1kjC2DjqDIL8LrX57wFThMuJb0AdqNwwr2\nO3GsmV6ZnMxPpxP7yRiHjnHUe0BTh6HerdtlXsKhVxQ6oW4jiPlS3d8d4MuT09lz\nBjdndP6VRPy2FxWBDDbt\n=IwR9\n-----END PGP SIGNATURE-----", "payload": "tree f3ab822d23af35323cd6d508ef37ec886f882ba8\nparent 1f40819315fa8df4d609a619e428f1ef75eb46c2\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1482224321 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1484206882 +0100\n\nclamp down on hacks in compiletest"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f51310a80900364de3efe875d04cada346b85f5", "html_url": "https://github.com/rust-lang/rust/commit/2f51310a80900364de3efe875d04cada346b85f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f51310a80900364de3efe875d04cada346b85f5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f40819315fa8df4d609a619e428f1ef75eb46c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f40819315fa8df4d609a619e428f1ef75eb46c2", "html_url": "https://github.com/rust-lang/rust/commit/1f40819315fa8df4d609a619e428f1ef75eb46c2"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "ae55c1adb5c5b6584bbbcd9c1268aa8131d27c50", "filename": "tests/compiletest.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2f51310a80900364de3efe875d04cada346b85f5/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f51310a80900364de3efe875d04cada346b85f5/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=2f51310a80900364de3efe875d04cada346b85f5", "patch": "@@ -3,9 +3,9 @@ extern crate compiletest_rs as compiletest;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n-fn compile_fail(sysroot: &str) {\n-    let flags = format!(\"--sysroot {} -Dwarnings\", sysroot);\n-    for_all_targets(sysroot, |target| {\n+fn compile_fail(sysroot: &Path) {\n+    let flags = format!(\"--sysroot {} -Dwarnings\", sysroot.to_str().expect(\"non utf8 path\"));\n+    for_all_targets(&sysroot, |target| {\n         let mut config = compiletest::default_config();\n         config.host_rustcflags = Some(flags.clone());\n         config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n@@ -49,8 +49,10 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n     path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n }\n \n-fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n-    for entry in std::fs::read_dir(format!(\"{}/lib/rustlib/\", sysroot)).unwrap() {\n+fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n+    let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n+    println!(\"target dir: {}\", target_dir.to_str().unwrap());\n+    for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n         let entry = entry.unwrap();\n         if !is_target_dir(entry.path()) { continue; }\n         let target = entry.file_name().into_string().unwrap();\n@@ -62,24 +64,23 @@ fn for_all_targets<F: FnMut(String)>(sysroot: &str, mut f: F) {\n \n #[test]\n fn compile_test() {\n-    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    let sysroot = match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n-            .to_owned(),\n-    };\n+    let sysroot = std::process::Command::new(\"rustc\")\n+        .arg(\"--print\")\n+        .arg(\"sysroot\")\n+        .output()\n+        .expect(\"rustc not found\")\n+        .stdout;\n+    let sysroot = std::str::from_utf8(&sysroot).expect(\"sysroot is not utf8\").trim();\n+    let sysroot = &Path::new(&sysroot);\n+    let host = std::process::Command::new(\"rustc\")\n+        .arg(\"-vV\")\n+        .output()\n+        .expect(\"rustc not found for -vV\")\n+        .stdout;\n+    let host = std::str::from_utf8(&host).expect(\"sysroot is not utf8\");\n+    let host = host.split(\"\\nhost: \").skip(1).next().expect(\"no host: part in rustc -vV\");\n+    let host = host.split(\"\\n\").next().expect(\"no \\n after host\");\n     run_pass();\n-    let host = Path::new(&sysroot).file_name()\n-                                  .expect(\"sysroot has no last par\")\n-                                  .to_str()\n-                                  .expect(\"sysroot contains non utf8\")\n-                                  .splitn(2, '-')\n-                                  .skip(1)\n-                                  .next()\n-                                  .expect(\"target dir not prefixed\");\n     for_all_targets(&sysroot, |target| {\n         miri_pass(\"tests/run-pass\", &target, host);\n         if let Ok(path) = std::env::var(\"MIRI_RUSTC_TEST\") {"}]}