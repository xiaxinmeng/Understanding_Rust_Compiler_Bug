{"sha": "cb26df950699586b314731fb70786e0db8eaa049", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjZkZjk1MDY5OTU4NmIzMTQ3MzFmYjcwNzg2ZTBkYjhlYWEwNDk=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-15T15:30:21Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-15T15:30:21Z"}, "message": "Merge branch 'master' of https://github.com/rust-analyzer/rust-analyzer into feature/themes", "tree": {"sha": "29a1fd853757824572bfebc956d20458d827926f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a1fd853757824572bfebc956d20458d827926f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb26df950699586b314731fb70786e0db8eaa049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb26df950699586b314731fb70786e0db8eaa049", "html_url": "https://github.com/rust-lang/rust/commit/cb26df950699586b314731fb70786e0db8eaa049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb26df950699586b314731fb70786e0db8eaa049/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c622413bc72ea56d5f62a16788d897cb61eca948", "url": "https://api.github.com/repos/rust-lang/rust/commits/c622413bc72ea56d5f62a16788d897cb61eca948", "html_url": "https://github.com/rust-lang/rust/commit/c622413bc72ea56d5f62a16788d897cb61eca948"}, {"sha": "c6f05abfbbfa2fd1ff06e1adeea7885151aaa768", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f05abfbbfa2fd1ff06e1adeea7885151aaa768", "html_url": "https://github.com/rust-lang/rust/commit/c6f05abfbbfa2fd1ff06e1adeea7885151aaa768"}], "stats": {"total": 4756, "additions": 2620, "deletions": 2136}, "files": [{"sha": "e749e1dc984c49dc1009469a384a49910b04796e", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1,2 +1,2 @@\n+* text=auto eol=lf\n crates/ra_syntax/test_data/** -text eof=LF\n-crates/ra_ide_api/src/snapshots/** -text eof=LF"}, {"sha": "d7ec266c0b3c6b622fe84e318a371086586dea52", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1135,7 +1135,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"ra_tt 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -1603,6 +1603,11 @@ dependencies = [\n  \"maybe-uninit 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"smallvec\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"smol_str\"\n version = \"0.1.15\"\n@@ -2007,6 +2012,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_yaml 0.8.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"691b17f19fc1ec9d94ec0b5864859290dff279dbd7b03f017afda54eb36c3c35\"\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \"checksum smallvec 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7b0758c52e15a8b5e3691eae6cc559f08eee9406e548a4477ba4e67770a82b6\"\n+\"checksum smallvec 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n \"checksum smol_str 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34836c9a295c62c2ce3514471117c5cb269891e8421b2aafdd910050576c4d8b\"\n \"checksum stacker 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d96fc4f13a0ac088e9a3cd9af1cc8c5cc1ab5deb2145cef661267dfc9c542f8a\"\n \"checksum superslice 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab16ced94dbd8a46c82fd81e3ed9a8727dac2977ea869d217bcc4ea1f122e81f\""}, {"sha": "a8839cfba3d2aa80a33b54c87259f5edabf2650f", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "added", "additions": 379, "deletions": 0, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -0,0 +1,379 @@\n+use format_buf::format;\n+use hir::{db::HirDatabase, FromSource};\n+use join_to_string::join;\n+use ra_syntax::{\n+    ast::{\n+        self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n+    },\n+    TextUnit, T,\n+};\n+use std::fmt::Write;\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+// Assist: add_new\n+//\n+// Adds a new inherent impl for a type.\n+//\n+// ```\n+// struct Ctx<T: Clone> {\n+//      data: T,<|>\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Ctx<T: Clone> {\n+//      data: T,\n+// }\n+//\n+// impl<T: Clone> Ctx<T> {\n+//     fn new(data: T) -> Self { Self { data } }\n+// }\n+//\n+// ```\n+pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n+\n+    // We want to only apply this to non-union structs with named fields\n+    let field_list = match (strukt.kind(), strukt.is_union()) {\n+        (StructKind::Named(named), false) => named,\n+        _ => return None,\n+    };\n+\n+    // Return early if we've found an existing new fn\n+    let impl_block = find_struct_impl(&ctx, &strukt)?;\n+\n+    ctx.add_assist(AssistId(\"add_new\"), \"add new fn\", |edit| {\n+        edit.target(strukt.syntax().text_range());\n+\n+        let mut buf = String::with_capacity(512);\n+\n+        if impl_block.is_some() {\n+            buf.push('\\n');\n+        }\n+\n+        let vis = strukt.visibility().map(|v| format!(\"{} \", v.syntax()));\n+        let vis = vis.as_ref().map(String::as_str).unwrap_or(\"\");\n+        write!(&mut buf, \"    {}fn new(\", vis).unwrap();\n+\n+        join(field_list.fields().map(|f| {\n+            format!(\n+                \"{}: {}\",\n+                f.name().unwrap().syntax().text(),\n+                f.ascribed_type().unwrap().syntax().text()\n+            )\n+        }))\n+        .separator(\", \")\n+        .to_buf(&mut buf);\n+\n+        buf.push_str(\") -> Self { Self {\");\n+\n+        join(field_list.fields().map(|f| f.name().unwrap().syntax().text()))\n+            .separator(\", \")\n+            .surround_with(\" \", \" \")\n+            .to_buf(&mut buf);\n+\n+        buf.push_str(\"} }\");\n+\n+        let (start_offset, end_offset) = if let Some(impl_block) = impl_block {\n+            buf.push('\\n');\n+            let start = impl_block\n+                .syntax()\n+                .descendants_with_tokens()\n+                .find(|t| t.kind() == T!['{'])\n+                .unwrap()\n+                .text_range()\n+                .end();\n+\n+            (start, TextUnit::from_usize(1))\n+        } else {\n+            buf = generate_impl_text(&strukt, &buf);\n+            let start = strukt.syntax().text_range().end();\n+\n+            (start, TextUnit::from_usize(3))\n+        };\n+\n+        edit.set_cursor(start_offset + TextUnit::of_str(&buf) - end_offset);\n+        edit.insert(start_offset, buf);\n+    })\n+}\n+\n+// Generates the surrounding `impl Type { <code> }` including type and lifetime\n+// parameters\n+fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n+    let type_params = strukt.type_param_list();\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\nimpl\");\n+    if let Some(type_params) = &type_params {\n+        format!(buf, \"{}\", type_params.syntax());\n+    }\n+    buf.push_str(\" \");\n+    buf.push_str(strukt.name().unwrap().text().as_str());\n+    if let Some(type_params) = type_params {\n+        let lifetime_params = type_params\n+            .lifetime_params()\n+            .filter_map(|it| it.lifetime_token())\n+            .map(|it| it.text().clone());\n+        let type_params =\n+            type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n+        join(lifetime_params.chain(type_params)).surround_with(\"<\", \">\").to_buf(&mut buf);\n+    }\n+\n+    format!(&mut buf, \" {{\\n{}\\n}}\\n\", code);\n+\n+    buf\n+}\n+\n+// Uses a syntax-driven approach to find any impl blocks for the struct that\n+// exist within the module/file\n+//\n+// Returns `None` if we've found an existing `new` fn\n+//\n+// FIXME: change the new fn checking to a more semantic approach when that's more\n+// viable (e.g. we process proc macros, etc)\n+fn find_struct_impl(\n+    ctx: &AssistCtx<impl HirDatabase>,\n+    strukt: &ast::StructDef,\n+) -> Option<Option<ast::ImplBlock>> {\n+    let db = ctx.db;\n+    let module = strukt.syntax().ancestors().find(|node| {\n+        ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n+    })?;\n+\n+    let struct_ty = {\n+        let src = hir::Source { file_id: ctx.frange.file_id.into(), ast: strukt.clone() };\n+        hir::Struct::from_source(db, src).unwrap().ty(db)\n+    };\n+\n+    let mut found_new_fn = false;\n+\n+    let block = module.descendants().filter_map(ast::ImplBlock::cast).find(|impl_blk| {\n+        if found_new_fn {\n+            return false;\n+        }\n+\n+        let src = hir::Source { file_id: ctx.frange.file_id.into(), ast: impl_blk.clone() };\n+        let blk = hir::ImplBlock::from_source(db, src).unwrap();\n+\n+        let same_ty = blk.target_ty(db) == struct_ty;\n+        let not_trait_impl = blk.target_trait(db).is_none();\n+\n+        found_new_fn = has_new_fn(impl_blk);\n+\n+        same_ty && not_trait_impl\n+    });\n+\n+    if found_new_fn {\n+        None\n+    } else {\n+        Some(block)\n+    }\n+}\n+\n+fn has_new_fn(imp: &ast::ImplBlock) -> bool {\n+    if let Some(il) = imp.item_list() {\n+        for item in il.impl_items() {\n+            if let ast::ImplItem::FnDef(f) = item {\n+                if f.name().unwrap().text().eq_ignore_ascii_case(\"new\") {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_add_new() {\n+        // Check output of generation\n+        check_assist(\n+            add_new,\n+\"struct Foo {<|>}\",\n+\"struct Foo {}\n+\n+impl Foo {\n+    fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"struct Foo<T: Clone> {<|>}\",\n+\"struct Foo<T: Clone> {}\n+\n+impl<T: Clone> Foo<T> {\n+    fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"struct Foo<'a, T: Foo<'a>> {<|>}\",\n+\"struct Foo<'a, T: Foo<'a>> {}\n+\n+impl<'a, T: Foo<'a>> Foo<'a, T> {\n+    fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"struct Foo { baz: String <|>}\",\n+\"struct Foo { baz: String }\n+\n+impl Foo {\n+    fn new(baz: String) -> Self { Self { baz } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"struct Foo { baz: String, qux: Vec<i32> <|>}\",\n+\"struct Foo { baz: String, qux: Vec<i32> }\n+\n+impl Foo {\n+    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+}\n+\",\n+        );\n+\n+        // Check that visibility modifiers don't get brought in for fields\n+        check_assist(\n+            add_new,\n+\"struct Foo { pub baz: String, pub qux: Vec<i32> <|>}\",\n+\"struct Foo { pub baz: String, pub qux: Vec<i32> }\n+\n+impl Foo {\n+    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+}\n+\",\n+        );\n+\n+        // Check that it reuses existing impls\n+        check_assist(\n+            add_new,\n+\"struct Foo {<|>}\n+\n+impl Foo {}\n+\",\n+\"struct Foo {}\n+\n+impl Foo {\n+    fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"struct Foo {<|>}\n+\n+impl Foo {\n+    fn qux(&self) {}\n+}\n+\",\n+\"struct Foo {}\n+\n+impl Foo {\n+    fn new() -> Self { Self {  } }<|>\n+\n+    fn qux(&self) {}\n+}\n+\",\n+        );\n+\n+        check_assist(\n+            add_new,\n+\"struct Foo {<|>}\n+\n+impl Foo {\n+    fn qux(&self) {}\n+    fn baz() -> i32 {\n+        5\n+    }\n+}\n+\",\n+\"struct Foo {}\n+\n+impl Foo {\n+    fn new() -> Self { Self {  } }<|>\n+\n+    fn qux(&self) {}\n+    fn baz() -> i32 {\n+        5\n+    }\n+}\n+\",\n+        );\n+\n+        // Check visibility of new fn based on struct\n+        check_assist(\n+            add_new,\n+\"pub struct Foo {<|>}\",\n+\"pub struct Foo {}\n+\n+impl Foo {\n+    pub fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+        check_assist(\n+            add_new,\n+\"pub(crate) struct Foo {<|>}\",\n+\"pub(crate) struct Foo {}\n+\n+impl Foo {\n+    pub(crate) fn new() -> Self { Self {  } }<|>\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_new_not_applicable_if_fn_exists() {\n+        check_assist_not_applicable(\n+            add_new,\n+            \"\n+struct Foo {<|>}\n+\n+impl Foo {\n+    fn new() -> Self {\n+        Self\n+    }    \n+}\",\n+        );\n+\n+        check_assist_not_applicable(\n+            add_new,\n+            \"\n+struct Foo {<|>}\n+\n+impl Foo {\n+    fn New() -> Self {\n+        Self\n+    }    \n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_new_target() {\n+        check_assist_target(\n+            add_new,\n+            \"\n+struct SomeThingIrrelevant;\n+/// Has a lifetime parameter\n+struct Foo<'a, T: Foo<'a>> {<|>}\n+struct EvenMoreIrrelevant;\n+\",\n+            \"/// Has a lifetime parameter\n+struct Foo<'a, T: Foo<'a>> {}\",\n+        );\n+    }\n+}"}, {"sha": "176761efb954401484207ef1754e08f89e71ae81", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -156,6 +156,28 @@ fn process(map: HashMap<String, String>) {}\n     )\n }\n \n+#[test]\n+fn doctest_add_new() {\n+    check(\n+        \"add_new\",\n+        r#####\"\n+struct Ctx<T: Clone> {\n+     data: T,<|>\n+}\n+\"#####,\n+        r#####\"\n+struct Ctx<T: Clone> {\n+     data: T,\n+}\n+\n+impl<T: Clone> Ctx<T> {\n+    fn new(data: T) -> Self { Self { data } }\n+}\n+\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_apply_demorgan() {\n     check("}, {"sha": "f2f0dacbf7d997d27003b113eb75eada55931af9", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -95,6 +95,7 @@ mod assists {\n     mod add_derive;\n     mod add_explicit_type;\n     mod add_impl;\n+    mod add_new;\n     mod apply_demorgan;\n     mod flip_comma;\n     mod flip_binexpr;\n@@ -119,6 +120,7 @@ mod assists {\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n             add_impl::add_impl,\n+            add_new::add_new,\n             apply_demorgan::apply_demorgan,\n             change_visibility::change_visibility,\n             fill_match_arms::fill_match_arms,"}, {"sha": "ade187629bd05a41af046269cd7dbbe67105087d", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -8,8 +8,8 @@ use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n-    CrateGraph, Edition, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt, SourceRoot,\n-    SourceRootId,\n+    CrateGraph, CrateId, Edition, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt,\n+    SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -33,6 +33,14 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         let pos = with_files(&mut db, fixture);\n         (db, pos.unwrap())\n     }\n+\n+    fn test_crate(&self) -> CrateId {\n+        let crate_graph = self.crate_graph();\n+        let mut it = crate_graph.iter();\n+        let res = it.next().unwrap();\n+        assert!(it.next().is_none());\n+        res\n+    }\n }\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}"}, {"sha": "078bd86090e87547587d93bebc748206c7c27447", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -23,7 +23,7 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    expr::{validation::ExprValidator, BindingAnnotation, Body, BodySourceMap, Pat, PatId},\n+    expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     generics::{GenericDef, HasGenericParams},\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n@@ -157,7 +157,7 @@ impl Module {\n     }\n \n     /// Finds a child module with the specified name.\n-    pub fn child(self, db: &impl HirDatabase, name: &Name) -> Option<Module> {\n+    pub fn child(self, db: &impl DefDatabase, name: &Name) -> Option<Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n         let child_id = def_map[self.id.module_id].children.get(name)?;\n         Some(self.with_module_id(*child_id))"}, {"sha": "e3733779e9c106a1a375b50071e3257d11895516", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 109, "deletions": 172, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1,12 +1,19 @@\n //! FIXME: write short doc here\n \n-pub(crate) mod validation;\n-\n use std::sync::Arc;\n \n+use hir_def::path::known;\n+use hir_expand::diagnostics::DiagnosticSink;\n+use ra_syntax::ast;\n use ra_syntax::AstPtr;\n+use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, DefWithBody, HasBody, Resolver};\n+use crate::{\n+    db::HirDatabase,\n+    diagnostics::{MissingFields, MissingOkInTailExpr},\n+    ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n+    Adt, DefWithBody, Function, HasBody, Name, Path, Resolver,\n+};\n \n pub use hir_def::{\n     body::{\n@@ -38,196 +45,126 @@ pub(crate) fn resolver_for_scope(\n     let scopes = owner.expr_scopes(db);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n-        r = r.push_expr_scope(Arc::clone(&scopes), scope);\n+        r = r.push_expr_scope(owner, Arc::clone(&scopes), scope);\n     }\n     r\n }\n \n-#[cfg(test)]\n-mod tests {\n-    use hir_expand::Source;\n-    use ra_db::{fixture::WithFixture, SourceDatabase};\n-    use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n-    use test_utils::{assert_eq_text, extract_offset};\n-\n-    use crate::{source_binder::SourceAnalyzer, test_db::TestDB};\n-\n-    fn do_check(code: &str, expected: &[&str]) {\n-        let (off, code) = extract_offset(code);\n-        let code = {\n-            let mut buf = String::new();\n-            let off = u32::from(off) as usize;\n-            buf.push_str(&code[..off]);\n-            buf.push_str(\"marker\");\n-            buf.push_str(&code[off..]);\n-            buf\n-        };\n+pub(crate) struct ExprValidator<'a, 'b: 'a> {\n+    func: Function,\n+    infer: Arc<InferenceResult>,\n+    sink: &'a mut DiagnosticSink<'b>,\n+}\n \n-        let (db, file_id) = TestDB::with_single_file(&code);\n-\n-        let file = db.parse(file_id).ok().unwrap();\n-        let marker: ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n-        let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n-\n-        let scopes = analyzer.scopes();\n-        let expr_id = analyzer\n-            .body_source_map()\n-            .node_expr(Source { file_id: file_id.into(), ast: &marker.into() })\n-            .unwrap();\n-        let scope = scopes.scope_for(expr_id);\n-\n-        let actual = scopes\n-            .scope_chain(scope)\n-            .flat_map(|scope| scopes.entries(scope))\n-            .map(|it| it.name().to_string())\n-            .collect::<Vec<_>>()\n-            .join(\"\\n\");\n-        let expected = expected.join(\"\\n\");\n-        assert_eq_text!(&expected, &actual);\n+impl<'a, 'b> ExprValidator<'a, 'b> {\n+    pub(crate) fn new(\n+        func: Function,\n+        infer: Arc<InferenceResult>,\n+        sink: &'a mut DiagnosticSink<'b>,\n+    ) -> ExprValidator<'a, 'b> {\n+        ExprValidator { func, infer, sink }\n     }\n \n-    #[test]\n-    fn test_lambda_scope() {\n-        do_check(\n-            r\"\n-            fn quux(foo: i32) {\n-                let f = |bar, baz: i32| {\n-                    <|>\n-                };\n-            }\",\n-            &[\"bar\", \"baz\", \"foo\"],\n-        );\n-    }\n+    pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n+        let body = self.func.body(db);\n \n-    #[test]\n-    fn test_call_scope() {\n-        do_check(\n-            r\"\n-            fn quux() {\n-                f(|x| <|> );\n-            }\",\n-            &[\"x\"],\n-        );\n-    }\n+        for e in body.exprs() {\n+            if let (id, Expr::RecordLit { path, fields, spread }) = e {\n+                self.validate_record_literal(id, path, fields, *spread, db);\n+            }\n+        }\n \n-    #[test]\n-    fn test_method_call_scope() {\n-        do_check(\n-            r\"\n-            fn quux() {\n-                z.f(|x| <|> );\n-            }\",\n-            &[\"x\"],\n-        );\n+        let body_expr = &body[body.body_expr()];\n+        if let Expr::Block { statements: _, tail: Some(t) } = body_expr {\n+            self.validate_results_in_tail_expr(body.body_expr(), *t, db);\n+        }\n     }\n \n-    #[test]\n-    fn test_loop_scope() {\n-        do_check(\n-            r\"\n-            fn quux() {\n-                loop {\n-                    let x = ();\n-                    <|>\n-                };\n-            }\",\n-            &[\"x\"],\n-        );\n-    }\n+    fn validate_record_literal(\n+        &mut self,\n+        id: ExprId,\n+        _path: &Option<Path>,\n+        fields: &[RecordLitField],\n+        spread: Option<ExprId>,\n+        db: &impl HirDatabase,\n+    ) {\n+        if spread.is_some() {\n+            return;\n+        }\n+\n+        let struct_def = match self.infer[id].as_adt() {\n+            Some((Adt::Struct(s), _)) => s,\n+            _ => return,\n+        };\n \n-    #[test]\n-    fn test_match() {\n-        do_check(\n-            r\"\n-            fn quux() {\n-                match () {\n-                    Some(x) => {\n-                        <|>\n+        let lit_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n+        let missed_fields: Vec<Name> = struct_def\n+            .fields(db)\n+            .iter()\n+            .filter_map(|f| {\n+                let name = f.name(db);\n+                if lit_fields.contains(&name) {\n+                    None\n+                } else {\n+                    Some(name)\n+                }\n+            })\n+            .collect();\n+        if missed_fields.is_empty() {\n+            return;\n+        }\n+        let source_map = self.func.body_source_map(db);\n+\n+        if let Some(source_ptr) = source_map.expr_syntax(id) {\n+            if let Some(expr) = source_ptr.ast.a() {\n+                let root = source_ptr.file_syntax(db);\n+                if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n+                    if let Some(field_list) = record_lit.record_field_list() {\n+                        self.sink.push(MissingFields {\n+                            file: source_ptr.file_id,\n+                            field_list: AstPtr::new(&field_list),\n+                            missed_fields,\n+                        })\n                     }\n-                };\n-            }\",\n-            &[\"x\"],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_shadow_variable() {\n-        do_check(\n-            r\"\n-            fn foo(x: String) {\n-                let x : &str = &x<|>;\n-            }\",\n-            &[\"x\"],\n-        );\n+                }\n+            }\n+        }\n     }\n \n-    fn do_check_local_name(code: &str, expected_offset: u32) {\n-        let (off, code) = extract_offset(code);\n-\n-        let (db, file_id) = TestDB::with_single_file(&code);\n-        let file = db.parse(file_id).ok().unwrap();\n-        let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n-            .expect(\"failed to find a name at the target offset\");\n-        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n-        let analyzer = SourceAnalyzer::new(&db, file_id, name_ref.syntax(), None);\n+    fn validate_results_in_tail_expr(\n+        &mut self,\n+        body_id: ExprId,\n+        id: ExprId,\n+        db: &impl HirDatabase,\n+    ) {\n+        // the mismatch will be on the whole block currently\n+        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n+            Some(m) => m,\n+            None => return,\n+        };\n \n-        let local_name_entry = analyzer.resolve_local_name(&name_ref).unwrap();\n-        let local_name =\n-            local_name_entry.ptr().either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n-        assert_eq!(local_name.range(), expected_name.syntax().text_range());\n-    }\n+        let std_result_path = known::std_result_result();\n \n-    #[test]\n-    fn test_resolve_local_name() {\n-        do_check_local_name(\n-            r#\"\n-            fn foo(x: i32, y: u32) {\n-                {\n-                    let z = x * 2;\n-                }\n-                {\n-                    let t = x<|> * 3;\n-                }\n-            }\"#,\n-            21,\n-        );\n-    }\n+        let resolver = self.func.resolver(db);\n+        let std_result_enum = match resolver.resolve_known_enum(db, &std_result_path) {\n+            Some(it) => it,\n+            _ => return,\n+        };\n \n-    #[test]\n-    fn test_resolve_local_name_declaration() {\n-        do_check_local_name(\n-            r#\"\n-            fn foo(x: String) {\n-                let x : &str = &x<|>;\n-            }\"#,\n-            21,\n-        );\n-    }\n+        let std_result_ctor = TypeCtor::Adt(Adt::Enum(std_result_enum));\n+        let params = match &mismatch.expected {\n+            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &std_result_ctor => parameters,\n+            _ => return,\n+        };\n \n-    #[test]\n-    fn test_resolve_local_name_shadow() {\n-        do_check_local_name(\n-            r\"\n-            fn foo(x: String) {\n-                let x : &str = &x;\n-                x<|>\n-            }\n-            \",\n-            53,\n-        );\n-    }\n+        if params.len() == 2 && &params[0] == &mismatch.actual {\n+            let source_map = self.func.body_source_map(db);\n \n-    #[test]\n-    fn ref_patterns_contribute_bindings() {\n-        do_check_local_name(\n-            r\"\n-            fn foo() {\n-                if let Some(&from) = bar() {\n-                    from<|>;\n+            if let Some(source_ptr) = source_map.expr_syntax(id) {\n+                if let Some(expr) = source_ptr.ast.a() {\n+                    self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n                 }\n             }\n-            \",\n-            53,\n-        );\n+        }\n     }\n }"}, {"sha": "3054f1dcedf405270db5e98109734d55d5666e31", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/c622413bc72ea56d5f62a16788d897cb61eca948/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c622413bc72ea56d5f62a16788d897cb61eca948/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=c622413bc72ea56d5f62a16788d897cb61eca948", "patch": "@@ -1,137 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use std::sync::Arc;\n-\n-use hir_def::path::known;\n-use hir_expand::diagnostics::DiagnosticSink;\n-use ra_syntax::ast;\n-use rustc_hash::FxHashSet;\n-\n-use crate::{\n-    db::HirDatabase,\n-    diagnostics::{MissingFields, MissingOkInTailExpr},\n-    expr::AstPtr,\n-    ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Adt, Function, Name, Path,\n-};\n-\n-use super::{Expr, ExprId, RecordLitField};\n-\n-pub(crate) struct ExprValidator<'a, 'b: 'a> {\n-    func: Function,\n-    infer: Arc<InferenceResult>,\n-    sink: &'a mut DiagnosticSink<'b>,\n-}\n-\n-impl<'a, 'b> ExprValidator<'a, 'b> {\n-    pub(crate) fn new(\n-        func: Function,\n-        infer: Arc<InferenceResult>,\n-        sink: &'a mut DiagnosticSink<'b>,\n-    ) -> ExprValidator<'a, 'b> {\n-        ExprValidator { func, infer, sink }\n-    }\n-\n-    pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n-        let body = self.func.body(db);\n-\n-        for e in body.exprs() {\n-            if let (id, Expr::RecordLit { path, fields, spread }) = e {\n-                self.validate_record_literal(id, path, fields, *spread, db);\n-            }\n-        }\n-\n-        let body_expr = &body[body.body_expr()];\n-        if let Expr::Block { statements: _, tail: Some(t) } = body_expr {\n-            self.validate_results_in_tail_expr(body.body_expr(), *t, db);\n-        }\n-    }\n-\n-    fn validate_record_literal(\n-        &mut self,\n-        id: ExprId,\n-        _path: &Option<Path>,\n-        fields: &[RecordLitField],\n-        spread: Option<ExprId>,\n-        db: &impl HirDatabase,\n-    ) {\n-        if spread.is_some() {\n-            return;\n-        }\n-\n-        let struct_def = match self.infer[id].as_adt() {\n-            Some((Adt::Struct(s), _)) => s,\n-            _ => return,\n-        };\n-\n-        let lit_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n-        let missed_fields: Vec<Name> = struct_def\n-            .fields(db)\n-            .iter()\n-            .filter_map(|f| {\n-                let name = f.name(db);\n-                if lit_fields.contains(&name) {\n-                    None\n-                } else {\n-                    Some(name)\n-                }\n-            })\n-            .collect();\n-        if missed_fields.is_empty() {\n-            return;\n-        }\n-        let source_map = self.func.body_source_map(db);\n-\n-        if let Some(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.ast.a() {\n-                let root = source_ptr.file_syntax(db);\n-                if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n-                    if let Some(field_list) = record_lit.record_field_list() {\n-                        self.sink.push(MissingFields {\n-                            file: source_ptr.file_id,\n-                            field_list: AstPtr::new(&field_list),\n-                            missed_fields,\n-                        })\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    fn validate_results_in_tail_expr(\n-        &mut self,\n-        body_id: ExprId,\n-        id: ExprId,\n-        db: &impl HirDatabase,\n-    ) {\n-        // the mismatch will be on the whole block currently\n-        let mismatch = match self.infer.type_mismatch_for_expr(body_id) {\n-            Some(m) => m,\n-            None => return,\n-        };\n-\n-        let std_result_path = known::std_result_result();\n-\n-        let resolver = self.func.resolver(db);\n-        let std_result_enum = match resolver.resolve_known_enum(db, &std_result_path) {\n-            Some(it) => it,\n-            _ => return,\n-        };\n-\n-        let std_result_ctor = TypeCtor::Adt(Adt::Enum(std_result_enum));\n-        let params = match &mismatch.expected {\n-            Ty::Apply(ApplicationTy { ctor, parameters }) if ctor == &std_result_ctor => parameters,\n-            _ => return,\n-        };\n-\n-        if params.len() == 2 && &params[0] == &mismatch.actual {\n-            let source_map = self.func.body_source_map(db);\n-\n-            if let Some(source_ptr) = source_map.expr_syntax(id) {\n-                if let Some(expr) = source_ptr.ast.a() {\n-                    self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "7e5523c54a3bd73a8d0b6ccef385a52bd4094124", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir_def::{StructId, StructOrUnionId, UnionId};\n+use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n use hir_expand::name::AsName;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n@@ -10,9 +10,9 @@ use ra_syntax::{\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::{AstItemDef, LocationCtx},\n-    AstId, Const, Crate, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n-    ImplBlock, Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias,\n-    Union, VariantDef,\n+    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource, ImplBlock,\n+    Local, Module, ModuleSource, Source, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -152,44 +152,48 @@ impl Local {\n }\n \n impl Module {\n-    pub fn from_declaration(db: &impl HirDatabase, src: Source<ast::Module>) -> Option<Self> {\n-        let src_parent = Source {\n-            file_id: src.file_id,\n-            ast: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n-        };\n-        let parent_module = Module::from_definition(db, src_parent)?;\n+    pub fn from_declaration(db: &impl DefDatabase, src: Source<ast::Module>) -> Option<Self> {\n+        let parent_declaration = src.ast.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n+\n+        let parent_module = match parent_declaration {\n+            Some(parent_declaration) => {\n+                let src_parent = Source { file_id: src.file_id, ast: parent_declaration };\n+                Module::from_declaration(db, src_parent)\n+            }\n+            _ => {\n+                let src_parent = Source {\n+                    file_id: src.file_id,\n+                    ast: ModuleSource::new(db, Some(src.file_id.original_file(db)), None),\n+                };\n+                Module::from_definition(db, src_parent)\n+            }\n+        }?;\n+\n         let child_name = src.ast.name()?;\n         parent_module.child(db, &child_name.as_name())\n     }\n \n-    pub fn from_definition(\n-        db: &(impl DefDatabase + AstDatabase),\n-        src: Source<ModuleSource>,\n-    ) -> Option<Self> {\n-        let decl_id = match src.ast {\n+    pub fn from_definition(db: &impl DefDatabase, src: Source<ModuleSource>) -> Option<Self> {\n+        match src.ast {\n             ModuleSource::Module(ref module) => {\n                 assert!(!module.has_semi());\n-                let ast_id_map = db.ast_id_map(src.file_id);\n-                let item_id = AstId::new(src.file_id, ast_id_map.ast_id(module));\n-                Some(item_id)\n+                return Module::from_declaration(\n+                    db,\n+                    Source { file_id: src.file_id, ast: module.clone() },\n+                );\n             }\n-            ModuleSource::SourceFile(_) => None,\n+            ModuleSource::SourceFile(_) => (),\n         };\n \n-        db.relevant_crates(src.file_id.original_file(db)).iter().find_map(|&crate_id| {\n-            let def_map = db.crate_def_map(crate_id);\n-\n-            let (module_id, _module_data) =\n-                def_map.modules.iter().find(|(_module_id, module_data)| {\n-                    if decl_id.is_some() {\n-                        module_data.declaration == decl_id\n-                    } else {\n-                        module_data.definition.map(|it| it.into()) == Some(src.file_id)\n-                    }\n-                })?;\n+        let original_file = src.file_id.original_file(db);\n \n-            Some(Module::new(Crate { crate_id }, module_id))\n-        })\n+        let (krate, module_id) =\n+            db.relevant_crates(original_file).iter().find_map(|&crate_id| {\n+                let crate_def_map = db.crate_def_map(crate_id);\n+                let local_module_id = crate_def_map.modules_for_file(original_file).next()?;\n+                Some((crate_id, local_module_id))\n+            })?;\n+        Some(Module { id: ModuleId { krate, module_id } })\n     }\n }\n "}, {"sha": "2fb913108780542214b82bc69eea309875f046c5", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -16,8 +16,8 @@ use crate::{\n     expr::{ExprScopes, PatId, ScopeId},\n     generics::GenericParams,\n     impl_block::ImplBlock,\n-    Adt, Const, Enum, EnumVariant, Function, MacroDef, ModuleDef, PerNs, Static, Struct, Trait,\n-    TypeAlias,\n+    Adt, Const, DefWithBody, Enum, EnumVariant, Function, Local, MacroDef, ModuleDef, PerNs,\n+    Static, Struct, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -34,6 +34,7 @@ pub(crate) struct ModuleItemMap {\n \n #[derive(Debug, Clone)]\n pub(crate) struct ExprScope {\n+    owner: DefWithBody,\n     expr_scopes: Arc<ExprScopes>,\n     scope_id: ScopeId,\n }\n@@ -53,7 +54,7 @@ pub(crate) enum Scope {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum TypeNs {\n+pub(crate) enum TypeNs {\n     SelfType(ImplBlock),\n     GenericParam(u32),\n     Adt(Adt),\n@@ -68,13 +69,13 @@ pub enum TypeNs {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ResolveValueResult {\n+pub(crate) enum ResolveValueResult {\n     ValueNs(ValueNs),\n     Partial(TypeNs, usize),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum ValueNs {\n+pub(crate) enum ValueNs {\n     LocalBinding(PatId),\n     Function(Function),\n     Const(Const),\n@@ -399,10 +400,11 @@ impl Resolver {\n \n     pub(crate) fn push_expr_scope(\n         self,\n+        owner: DefWithBody,\n         expr_scopes: Arc<ExprScopes>,\n         scope_id: ScopeId,\n     ) -> Resolver {\n-        self.push_scope(Scope::ExprScope(ExprScope { expr_scopes, scope_id }))\n+        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n     }\n }\n \n@@ -413,7 +415,7 @@ pub enum ScopeDef {\n     GenericParam(u32),\n     ImplSelfType(ImplBlock),\n     AdtSelfType(Adt),\n-    LocalBinding(PatId),\n+    Local(Local),\n     Unknown,\n }\n \n@@ -467,9 +469,10 @@ impl Scope {\n             Scope::AdtScope(i) => {\n                 f(name::SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n-            Scope::ExprScope(e) => {\n-                e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {\n-                    f(e.name().clone(), ScopeDef::LocalBinding(e.pat()));\n+            Scope::ExprScope(scope) => {\n+                scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n+                    let local = Local { parent: scope.owner, pat_id: e.pat() };\n+                    f(e.name().clone(), ScopeDef::Local(local));\n                 });\n             }\n         }"}, {"sha": "662d3f8808cb005169234e5d4f971fb9c16e8efa", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -19,7 +19,6 @@ use ra_syntax::{\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, TextRange, TextUnit,\n };\n-use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n@@ -195,14 +194,6 @@ impl SourceAnalyzer {\n         Some(self.infer.as_ref()?[pat_id].clone())\n     }\n \n-    pub fn type_of_pat_by_id(\n-        &self,\n-        _db: &impl HirDatabase,\n-        pat_id: expr::PatId,\n-    ) -> Option<crate::Ty> {\n-        Some(self.infer.as_ref()?[pat_id].clone())\n-    }\n-\n     pub fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {\n         let expr_id = self.expr_id(&call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)\n@@ -293,33 +284,25 @@ impl SourceAnalyzer {\n         self.resolve_hir_path(db, &hir_path)\n     }\n \n-    pub fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n-        let mut shadowed = FxHashSet::default();\n+    fn resolve_local_name(&self, name_ref: &ast::NameRef) -> Option<ScopeEntryWithSyntax> {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax());\n-        let ret = scopes\n-            .scope_chain(scope)\n-            .flat_map(|scope| scopes.entries(scope).iter())\n-            .filter(|entry| shadowed.insert(entry.name()))\n-            .filter(|entry| entry.name() == &name)\n-            .nth(0);\n-        ret.and_then(|entry| {\n-            Some(ScopeEntryWithSyntax {\n-                name: entry.name().clone(),\n-                ptr: source_map.pat_syntax(entry.pat())?.ast,\n-            })\n+        let scope = scope_for(scopes, source_map, self.file_id.into(), name_ref.syntax())?;\n+        let entry = scopes.resolve_name_in_scope(scope, &name)?;\n+        Some(ScopeEntryWithSyntax {\n+            name: entry.name().clone(),\n+            ptr: source_map.pat_syntax(entry.pat())?.ast,\n         })\n     }\n \n     pub fn process_all_names(&self, db: &impl HirDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n         self.resolver.process_all_names(db, f)\n     }\n \n+    // FIXME: we only use this in `inline_local_variable` assist, ideally, we\n+    // should switch to general reference search infra there.\n     pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n-        // FIXME: at least, this should work with any DefWithBody, but ideally\n-        // this should be hir-based altogether\n         let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n         let ptr = Either::A(AstPtr::new(&ast::Pat::from(pat.clone())));\n         fn_def\n@@ -421,11 +404,6 @@ impl SourceAnalyzer {\n     pub(crate) fn inference_result(&self) -> Arc<crate::ty::InferenceResult> {\n         self.infer.clone().unwrap()\n     }\n-\n-    #[cfg(test)]\n-    pub(crate) fn scopes(&self) -> Arc<ExprScopes> {\n-        self.scopes.clone().unwrap()\n-    }\n }\n \n fn scope_for("}, {"sha": "1caa2e8759dc8cb94dad9a6426459aefb08ca0e6", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -81,7 +81,7 @@ impl TestDB {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter().next() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for (module_id, _) in crate_def_map.modules.iter() {\n+            for module_id in crate_def_map.modules() {\n                 let module_id = ModuleId { krate, module_id };\n                 let module = crate::Module::from(module_id);\n                 module.diagnostics("}, {"sha": "fe9346c78327d1dd44299d963a8c4e6eb8d4db6d", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 49, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -254,7 +254,6 @@ fn test(a: u32, b: isize, c: !, d: &str) {\n     1.0f32;\n }\"#),\n         @r###\"\n-\n     [9; 10) 'a': u32\n     [17; 18) 'b': isize\n     [27; 28) 'c': !\n@@ -317,7 +316,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [15; 20) '{ 1 }': u32\n     [17; 18) '1': u32\n     [48; 53) '{ 1 }': u32\n@@ -354,7 +352,7 @@ fn test() {\n     [66; 74) 'S::foo()': i32\n     [80; 88) '<S>::foo': fn foo() -> i32\n     [80; 90) '<S>::foo()': i32\n-\"###\n+    \"###\n     );\n }\n \n@@ -409,7 +407,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [72; 154) '{     ...a.c; }': ()\n     [82; 83) 'c': C\n     [86; 87) 'C': C(usize) -> C\n@@ -443,7 +440,6 @@ fn test() {\n   E::V2;\n }\"#),\n         @r###\"\n-\n     [48; 82) '{   E:...:V2; }': ()\n     [52; 70) 'E::V1 ...d: 1 }': E\n     [67; 68) '1': u32\n@@ -471,7 +467,6 @@ fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n }\n \"#),\n         @r###\"\n-\n     [9; 10) 'a': &u32\n     [18; 19) 'b': &mut u32\n     [31; 32) 'c': *const u32\n@@ -524,7 +519,6 @@ fn test() {\n }\n \"##),\n         @r###\"\n-\n     [11; 221) '{     ...o\"#; }': ()\n     [17; 21) '5i32': i32\n     [27; 31) '5f32': f32\n@@ -568,7 +562,6 @@ fn test(x: SomeType) {\n }\n \"#),\n         @r###\"\n-\n     [27; 28) 'x': SomeType\n     [40; 272) '{     ...lo\"; }': ()\n     [50; 51) 'b': bool\n@@ -632,7 +625,6 @@ fn test() -> &mut &f64 {\n }\n \"#),\n         @r###\"\n-\n     [14; 15) 'x': u32\n     [22; 24) '{}': ()\n     [78; 231) '{     ...t &c }': &mut &f64\n@@ -679,7 +671,6 @@ impl S {\n }\n \"#),\n         @r###\"\n-\n     [34; 38) 'self': &S\n     [40; 61) '{     ...     }': ()\n     [50; 54) 'self': &S\n@@ -719,7 +710,6 @@ fn test() -> bool {\n }\n \"#),\n         @r###\"\n-\n     [6; 7) 'x': bool\n     [22; 34) '{     0i32 }': i32\n     [28; 32) '0i32': i32\n@@ -802,7 +792,6 @@ fn test2(a1: *const A, a2: *mut A) {\n }\n \"#),\n         @r###\"\n-\n     [44; 45) 'a': A\n     [50; 213) '{     ...5.b; }': ()\n     [60; 62) 'a1': A\n@@ -970,7 +959,7 @@ fn test(a: A<i32>) {\n     [374; 375) 'B': B<A<i32>>(T) -> B<T>\n     [374; 378) 'B(a)': B<A<i32>>\n     [376; 377) 'a': A<i32>\n-\"###\n+    \"###\n     );\n }\n \n@@ -983,7 +972,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [11; 37) '{    l... {}; }': ()\n     [20; 21) 'x': ()\n     [24; 34) 'if true {}': ()\n@@ -1105,7 +1093,6 @@ fn test(a: A) {\n }\n \"#),\n         @r###\"\n-\n     [32; 36) 'self': A\n     [38; 39) 'x': u32\n     [53; 55) '{}': ()\n@@ -1142,7 +1129,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [40; 44) 'self': &str\n     [53; 55) '{}': ()\n     [69; 89) '{     ...o(); }': ()\n@@ -1166,7 +1152,6 @@ fn test(x: &str, y: isize) {\n }\n \"#),\n         @r###\"\n-\n     [9; 10) 'x': &str\n     [18; 19) 'y': isize\n     [28; 170) '{     ...d\"); }': ()\n@@ -1367,7 +1352,6 @@ fn test() {\n }\n \"#),\n     @r###\"\n-\n     [28; 79) '{     ...(1); }': ()\n     [38; 42) 'A(n)': A<i32>\n     [40; 41) 'n': &i32\n@@ -1396,7 +1380,6 @@ fn test() {\n }\n \"#),\n     @r###\"\n-\n     [11; 57) '{     ...= v; }': ()\n     [21; 22) 'v': &(i32, &i32)\n     [25; 33) '&(1, &2)': &(i32, &i32)\n@@ -1441,7 +1424,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [68; 289) '{     ...  d; }': ()\n     [78; 79) 'e': E\n     [82; 95) 'E::A { x: 3 }': E\n@@ -1488,7 +1470,6 @@ fn test(a1: A<u32>, i: i32) {\n }\n \"#),\n         @r###\"\n-\n     [36; 38) 'a1': A<u32>\n     [48; 49) 'i': i32\n     [56; 147) '{     ...3.x; }': ()\n@@ -1569,7 +1550,6 @@ fn test(a1: A<u32>, o: Option<u64>) {\n }\n \"#),\n         @r###\"\n-\n     [79; 81) 'a1': A<u32>\n     [91; 92) 'o': Option<u64>\n     [107; 244) '{     ...  }; }': ()\n@@ -1604,7 +1584,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [10; 11) 't': T\n     [21; 26) '{ t }': T\n     [23; 24) 't': T\n@@ -1652,7 +1631,6 @@ fn test() -> i128 {\n }\n \"#),\n         @r###\"\n-\n     [74; 78) 'self': A<X, Y>\n     [85; 107) '{     ...     }': X\n     [95; 99) 'self': A<X, Y>\n@@ -1706,7 +1684,6 @@ fn test(o: Option<u32>) {\n }\n \"#),\n         @r###\"\n-\n     [78; 82) 'self': &Option<T>\n     [98; 100) '{}': ()\n     [111; 112) 'o': Option<u32>\n@@ -1744,7 +1721,6 @@ fn test() -> i128 {\n }\n \"#),\n         @r###\"\n-\n     [53; 57) 'self': A<T2>\n     [65; 87) '{     ...     }': T2\n     [75; 79) 'self': A<T2>\n@@ -1921,7 +1897,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [56; 64) '{ A {} }': A\n     [58; 62) 'A {}': A\n     [126; 132) '{ 99 }': u32\n@@ -1961,7 +1936,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [64; 67) 'val': T\n     [82; 109) '{     ...     }': Gen<T>\n     [92; 103) 'Gen { val }': Gen<T>\n@@ -2129,7 +2103,6 @@ fn test(x: X) {\n }\n \"#),\n         @r###\"\n-\n     [20; 21) 'x': X\n     [26; 47) '{     ...eld; }': ()\n     [32; 33) 'x': X\n@@ -2151,7 +2124,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [11; 89) '{     ...   } }': ()\n     [17; 21) 'X {}': {unknown}\n     [27; 87) 'match ...     }': ()\n@@ -2174,7 +2146,6 @@ fn quux() {\n }\n \"#),\n         @r###\"\n-\n     [11; 41) '{     ...+ y; }': ()\n     [21; 22) 'y': i32\n     [25; 27) '92': i32\n@@ -2300,7 +2271,6 @@ fn write() {\n }\n \"#),\n         @r###\"\n-\n     [54; 139) '{     ...   } }': ()\n     [60; 137) 'match ...     }': ()\n     [66; 83) 'someth...nknown': Maybe<{unknown}>\n@@ -2322,7 +2292,6 @@ fn test_line_buffer() {\n }\n \"#),\n         @r###\"\n-\n     [23; 53) '{     ...n']; }': ()\n     [29; 50) '&[0, b...b'\\n']': &[u8;_]\n     [30; 50) '[0, b'...b'\\n']': [u8;_]\n@@ -2446,7 +2415,6 @@ fn test<R>(query_response: Canonical<QueryResponse<R>>) {\n }\n \"#),\n         @r###\"\n-\n     [92; 106) 'query_response': Canonical<QueryResponse<R>>\n     [137; 167) '{     ...lue; }': ()\n     [143; 164) '&query....value': &QueryResponse<R>\n@@ -2472,7 +2440,6 @@ pub fn main_loop() {\n }\n \"#),\n     @r###\"\n-\n     [144; 146) '{}': ()\n     [169; 198) '{     ...t(); }': ()\n     [175; 193) 'FxHash...efault': fn default<{unknown}, FxHasher>() -> HashSet<T, H>\n@@ -2518,7 +2485,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [49; 50) '0': u32\n     [80; 83) '101': u32\n     [95; 213) '{     ...NST; }': ()\n@@ -2549,7 +2515,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [29; 32) '101': u32\n     [70; 73) '101': u32\n     [85; 280) '{     ...MUT; }': ()\n@@ -2588,7 +2553,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [31; 35) 'self': &Self\n     [110; 114) 'self': &Self\n     [170; 228) '{     ...i128 }': ()\n@@ -2636,7 +2600,6 @@ mod bar_test {\n }\n \"#),\n         @r###\"\n-\n     [63; 67) 'self': &Self\n     [169; 173) 'self': &Self\n     [300; 337) '{     ...     }': ()\n@@ -2664,7 +2627,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [33; 37) 'self': &Self\n     [92; 111) '{     ...d(); }': ()\n     [98; 99) 'S': S\n@@ -2694,7 +2656,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [43; 47) 'self': &Self\n     [82; 86) 'self': &Self\n     [210; 361) '{     ..., i8 }': ()\n@@ -2725,7 +2686,6 @@ fn test() {\n }\n \"#),\n         @r###\"\n-\n     [33; 37) 'self': &Self\n     [102; 127) '{     ...d(); }': ()\n     [108; 109) 'S': S<u32>(T) -> S<T>\n@@ -3130,7 +3090,6 @@ fn test<T: Iterable<Item=u32>>() {\n }\n \"#),\n         @r###\"\n-\n     [67; 100) '{     ...own; }': ()\n     [77; 78) 'y': {unknown}\n     [90; 97) 'unknown': {unknown}\n@@ -3146,7 +3105,6 @@ const A: u32 = 1 + 1;\n static B: u64 = { let x = 1; x };\n \"#),\n         @r###\"\n-\n     [16; 17) '1': u32\n     [16; 21) '1 + 1': u32\n     [20; 21) '1': u32\n@@ -3170,7 +3128,6 @@ fn test() -> u64 {\n }\n \"#),\n         @r###\"\n-\n     [38; 87) '{     ... a.1 }': u64\n     [48; 49) 'a': S\n     [52; 53) 'S': S(i32, u64) -> S\n@@ -3225,7 +3182,6 @@ fn indexing_arrays() {\n     assert_snapshot!(\n         infer(\"fn main() { &mut [9][2]; }\"),\n         @r###\"\n-\n     [10; 26) '{ &mut...[2]; }': ()\n     [12; 23) '&mut [9][2]': &mut {unknown}\n     [17; 20) '[9]': [i32;_]\n@@ -4822,9 +4778,9 @@ fn main() {\n }\n \"#),\n         @r###\"\n-        ![0; 1) '6': i32\n-        [64; 88) '{     ...!(); }': ()\n-        [74; 75) 'x': i32\n+    ![0; 1) '6': i32\n+    [64; 88) '{     ...!(); }': ()\n+    [74; 75) 'x': i32\n     \"###\n     );\n }"}, {"sha": "10cb87d37bdf1b9d73b63ab6b2bb74aa22c6dfa3", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -67,6 +67,11 @@ impl ExprScopes {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n \n+    pub fn resolve_name_in_scope(&self, scope: ScopeId, name: &Name) -> Option<&ScopeEntry> {\n+        self.scope_chain(Some(scope))\n+            .find_map(|scope| self.entries(scope).iter().find(|it| it.name == *name))\n+    }\n+\n     pub fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n         self.scope_by_expr.get(&expr).copied()\n     }\n@@ -163,3 +168,217 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n         e => e.walk_child_exprs(|e| compute_expr_scopes(e, body, scopes, scope)),\n     };\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use hir_expand::{name::AsName, Source};\n+    use ra_db::{fixture::WithFixture, FileId, SourceDatabase};\n+    use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n+    use test_utils::{assert_eq_text, extract_offset};\n+\n+    use crate::{db::DefDatabase2, test_db::TestDB, FunctionId, ModuleDefId};\n+\n+    fn find_function(db: &TestDB, file_id: FileId) -> FunctionId {\n+        let krate = db.test_crate();\n+        let crate_def_map = db.crate_def_map(krate);\n+\n+        let module = crate_def_map.modules_for_file(file_id).next().unwrap();\n+        let (_, res) = crate_def_map[module].scope.entries().next().unwrap();\n+        match res.def.take_values().unwrap() {\n+            ModuleDefId::FunctionId(it) => it,\n+            _ => panic!(),\n+        }\n+    }\n+\n+    fn do_check(code: &str, expected: &[&str]) {\n+        let (off, code) = extract_offset(code);\n+        let code = {\n+            let mut buf = String::new();\n+            let off = u32::from(off) as usize;\n+            buf.push_str(&code[..off]);\n+            buf.push_str(\"marker\");\n+            buf.push_str(&code[off..]);\n+            buf\n+        };\n+\n+        let (db, file_id) = TestDB::with_single_file(&code);\n+\n+        let file_syntax = db.parse(file_id).syntax_node();\n+        let marker: ast::PathExpr = find_node_at_offset(&file_syntax, off).unwrap();\n+        let function = find_function(&db, file_id);\n+\n+        let scopes = db.expr_scopes(function.into());\n+        let (_body, source_map) = db.body_with_source_map(function.into());\n+\n+        let expr_id =\n+            source_map.node_expr(Source { file_id: file_id.into(), ast: &marker.into() }).unwrap();\n+        let scope = scopes.scope_for(expr_id);\n+\n+        let actual = scopes\n+            .scope_chain(scope)\n+            .flat_map(|scope| scopes.entries(scope))\n+            .map(|it| it.name().to_string())\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\");\n+        let expected = expected.join(\"\\n\");\n+        assert_eq_text!(&expected, &actual);\n+    }\n+\n+    #[test]\n+    fn test_lambda_scope() {\n+        do_check(\n+            r\"\n+            fn quux(foo: i32) {\n+                let f = |bar, baz: i32| {\n+                    <|>\n+                };\n+            }\",\n+            &[\"bar\", \"baz\", \"foo\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_call_scope() {\n+        do_check(\n+            r\"\n+            fn quux() {\n+                f(|x| <|> );\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_method_call_scope() {\n+        do_check(\n+            r\"\n+            fn quux() {\n+                z.f(|x| <|> );\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_loop_scope() {\n+        do_check(\n+            r\"\n+            fn quux() {\n+                loop {\n+                    let x = ();\n+                    <|>\n+                };\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_match() {\n+        do_check(\n+            r\"\n+            fn quux() {\n+                match () {\n+                    Some(x) => {\n+                        <|>\n+                    }\n+                };\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_shadow_variable() {\n+        do_check(\n+            r\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\",\n+            &[\"x\"],\n+        );\n+    }\n+\n+    fn do_check_local_name(code: &str, expected_offset: u32) {\n+        let (off, code) = extract_offset(code);\n+\n+        let (db, file_id) = TestDB::with_single_file(&code);\n+\n+        let file = db.parse(file_id).ok().unwrap();\n+        let expected_name = find_node_at_offset::<ast::Name>(file.syntax(), expected_offset.into())\n+            .expect(\"failed to find a name at the target offset\");\n+        let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n+\n+        let function = find_function(&db, file_id);\n+\n+        let scopes = db.expr_scopes(function.into());\n+        let (_body, source_map) = db.body_with_source_map(function.into());\n+\n+        let expr_scope = {\n+            let expr_ast = name_ref.syntax().ancestors().find_map(ast::Expr::cast).unwrap();\n+            let expr_id =\n+                source_map.node_expr(Source { file_id: file_id.into(), ast: &expr_ast }).unwrap();\n+            scopes.scope_for(expr_id).unwrap()\n+        };\n+\n+        let resolved = scopes.resolve_name_in_scope(expr_scope, &name_ref.as_name()).unwrap();\n+        let pat_src = source_map.pat_syntax(resolved.pat()).unwrap();\n+\n+        let local_name = pat_src.ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n+        assert_eq!(local_name.range(), expected_name.syntax().text_range());\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name() {\n+        do_check_local_name(\n+            r#\"\n+            fn foo(x: i32, y: u32) {\n+                {\n+                    let z = x * 2;\n+                }\n+                {\n+                    let t = x<|> * 3;\n+                }\n+            }\"#,\n+            21,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_declaration() {\n+        do_check_local_name(\n+            r#\"\n+            fn foo(x: String) {\n+                let x : &str = &x<|>;\n+            }\"#,\n+            21,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_resolve_local_name_shadow() {\n+        do_check_local_name(\n+            r\"\n+            fn foo(x: String) {\n+                let x : &str = &x;\n+                x<|>\n+            }\n+            \",\n+            53,\n+        );\n+    }\n+\n+    #[test]\n+    fn ref_patterns_contribute_bindings() {\n+        do_check_local_name(\n+            r\"\n+            fn foo() {\n+                if let Some(&from) = bar() {\n+                    from<|>;\n+                }\n+            }\n+            \",\n+            53,\n+        );\n+    }\n+}"}, {"sha": "21d5f62e042f9ec16fe1971037b50ac7e4f81046", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -58,7 +58,7 @@ mod tests;\n \n use std::sync::Arc;\n \n-use hir_expand::{diagnostics::DiagnosticSink, name::Name, MacroDefId};\n+use hir_expand::{ast_id_map::FileAstId, diagnostics::DiagnosticSink, name::Name, MacroDefId};\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n use ra_db::{CrateId, Edition, FileId};\n@@ -73,7 +73,7 @@ use crate::{\n         diagnostics::DefDiagnostic, path_resolution::ResolveMode, per_ns::PerNs, raw::ImportId,\n     },\n     path::Path,\n-    AstId, CrateModuleId, ModuleDefId, ModuleId, TraitId,\n+    AstId, CrateModuleId, FunctionId, ModuleDefId, ModuleId, TraitId,\n };\n \n /// Contains all top-level defs from a macro-expanded crate\n@@ -87,7 +87,7 @@ pub struct CrateDefMap {\n     prelude: Option<ModuleId>,\n     extern_prelude: FxHashMap<Name, ModuleDefId>,\n     root: CrateModuleId,\n-    pub modules: Arena<CrateModuleId, ModuleData>,\n+    modules: Arena<CrateModuleId, ModuleData>,\n \n     /// Some macros are not well-behavior, which leads to infinite loop\n     /// e.g. macro_rules! foo { ($ty:ty) => { foo!($ty); } }\n@@ -124,6 +124,11 @@ pub struct ModuleData {\n     pub definition: Option<FileId>,\n }\n \n+#[derive(Default, Debug, PartialEq, Eq, Clone)]\n+pub(crate) struct Declarations {\n+    fns: FxHashMap<FileAstId<ast::FnDef>, FunctionId>,\n+}\n+\n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n pub struct ModuleScope {\n     pub items: FxHashMap<Name, Resolution>,\n@@ -258,6 +263,17 @@ impl CrateDefMap {\n         let res = self.resolve_path_fp_with_macro(db, ResolveMode::Other, original_module, path);\n         (res.resolved_def, res.segment_index)\n     }\n+\n+    pub fn modules(&self) -> impl Iterator<Item = CrateModuleId> + '_ {\n+        self.modules.iter().map(|(id, _data)| id)\n+    }\n+\n+    pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = CrateModuleId> + '_ {\n+        self.modules\n+            .iter()\n+            .filter(move |(_id, data)| data.definition == Some(file_id))\n+            .map(|(id, _data)| id)\n+    }\n }\n \n mod diagnostics {"}, {"sha": "5c899aff35c78010eeb3d156393888d5e5bc6bf0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -664,7 +664,8 @@ where\n         let name = def.name.clone();\n         let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => {\n-                PerNs::values(FunctionId::from_ast_id(ctx, ast_id).into())\n+                let f = FunctionId::from_ast_id(ctx, ast_id);\n+                PerNs::values(f.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n                 let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n@@ -798,7 +799,7 @@ mod tests {\n \n     fn do_limited_resolve(code: &str, limit: u32, poison_limit: u32) -> CrateDefMap {\n         let (db, _file_id) = TestDB::with_single_file(&code);\n-        let krate = db.crate_graph().iter().next().unwrap();\n+        let krate = db.test_crate();\n \n         let def_map = {\n             let edition = db.crate_graph().edition(krate);"}, {"sha": "903a2277193874c6bf7f28d77666dd2e4f540d91", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1,12 +1,12 @@\n use std::sync::Arc;\n \n-use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_db::SourceDatabaseExt;\n \n use super::*;\n \n fn check_def_map_is_not_recomputed(initial: &str, file_change: &str) {\n     let (mut db, pos) = TestDB::with_position(initial);\n-    let krate = db.crate_graph().iter().next().unwrap();\n+    let krate = db.test_crate();\n     {\n         let events = db.log_executed(|| {\n             db.crate_def_map(krate);\n@@ -111,7 +111,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         m!(X);\n         \",\n     );\n-    let krate = db.crate_graph().iter().next().unwrap();\n+    let krate = db.test_crate();\n     {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);"}, {"sha": "eb7b85c07c0275db363159358db212b405034904", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -656,7 +656,7 @@ fn unresolved_module_diagnostics() {\n         //- /foo.rs\n         \",\n     );\n-    let krate = db.crate_graph().iter().next().unwrap();\n+    let krate = db.test_crate();\n \n     let crate_def_map = db.crate_def_map(krate);\n "}, {"sha": "35133d216493bce076ecb371994bbdaa3ba0a726", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -241,10 +241,8 @@ mod tests {\n         // }\n         let struct_name = mk_ident(\"Foo\");\n         let fields = [mk_ident(\"name\"), mk_ident(\"id\")];\n-        let fields = fields\n-            .into_iter()\n-            .map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone())\n-            .flatten();\n+        let fields =\n+            fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone()).flatten();\n \n         let list = tt::Subtree { delimiter: tt::Delimiter::Brace, token_trees: fields.collect() };\n "}, {"sha": "4e2c497e1db85e2ef84b92a40d5916cbf0f28cf8", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -88,16 +88,16 @@ mod tests {\n                 \",\n         ),\n             @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"the_field\",\n-       \u22ee        source_range: [94; 94),\n-       \u22ee        delete: [94; 94),\n-       \u22ee        insert: \"the_field\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [94; 94),\n+                delete: [94; 94),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -349,24 +349,24 @@ mod tests {\n             \",\n         ),\n         @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"0\",\n-       \u22ee        source_range: [75; 75),\n-       \u22ee        delete: [75; 75),\n-       \u22ee        insert: \"0\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"i32\",\n-       \u22ee    },\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"1\",\n-       \u22ee        source_range: [75; 75),\n-       \u22ee        delete: [75; 75),\n-       \u22ee        insert: \"1\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"f64\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"0\",\n+                source_range: [75; 75),\n+                delete: [75; 75),\n+                insert: \"0\",\n+                kind: Field,\n+                detail: \"i32\",\n+            },\n+            CompletionItem {\n+                label: \"1\",\n+                source_range: [75; 75),\n+                delete: [75; 75),\n+                insert: \"1\",\n+                kind: Field,\n+                detail: \"f64\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -419,16 +419,16 @@ mod tests {\n             \",\n         ),\n         @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"the_field\",\n-       \u22ee        source_range: [106; 106),\n-       \u22ee        delete: [106; 106),\n-       \u22ee        insert: \"the_field\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [106; 106),\n+                delete: [106; 106),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -452,15 +452,15 @@ mod tests {\n             }\n             \"###, CompletionKind::Keyword),\n         @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"await\",\n-       \u22ee        source_range: [74; 74),\n-       \u22ee        delete: [74; 74),\n-       \u22ee        insert: \"await\",\n-       \u22ee        detail: \"expr.await\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"await\",\n+                source_range: [74; 74),\n+                delete: [74; 74),\n+                insert: \"await\",\n+                detail: \"expr.await\",\n+            },\n+        ]\n         \"###\n         )\n     }"}, {"sha": "50245870658563bcda0caf8154d77e21dc7dda67", "filename": "crates/ra_ide_api/src/completion/complete_fn_param.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -70,15 +70,15 @@ mod tests {\n                 \",\n         ),\n             @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"file_id: FileId\",\n-       \u22ee        source_range: [110; 114),\n-       \u22ee        delete: [110; 114),\n-       \u22ee        insert: \"file_id: FileId\",\n-       \u22ee        lookup: \"file_id\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"file_id: FileId\",\n+                source_range: [110; 114),\n+                delete: [110; 114),\n+                insert: \"file_id: FileId\",\n+                lookup: \"file_id\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -94,15 +94,15 @@ mod tests {\n                 \",\n         ),\n             @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"file_id: FileId\",\n-       \u22ee        source_range: [110; 114),\n-       \u22ee        delete: [110; 114),\n-       \u22ee        insert: \"file_id: FileId\",\n-       \u22ee        lookup: \"file_id\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"file_id: FileId\",\n+                source_range: [110; 114),\n+                delete: [110; 114),\n+                insert: \"file_id: FileId\",\n+                lookup: \"file_id\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -121,15 +121,15 @@ mod tests {\n                 \",\n         ),\n             @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"file_id: FileId\",\n-       \u22ee        source_range: [289; 293),\n-       \u22ee        delete: [289; 293),\n-       \u22ee        insert: \"file_id: FileId\",\n-       \u22ee        lookup: \"file_id\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"file_id: FileId\",\n+                source_range: [289; 293),\n+                delete: [289; 293),\n+                insert: \"file_id: FileId\",\n+                lookup: \"file_id\",\n+            },\n+        ]\n         \"###\n         );\n     }"}, {"sha": "eb7cd9ac209a1e45c45194356457f618fcf583b4", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 493, "deletions": 467, "changes": 960, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -131,29 +131,31 @@ mod tests {\n                 use <|>\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"crate\",\n-        source_range: [21; 21),\n-        delete: [21; 21),\n-        insert: \"crate::\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"self\",\n-        source_range: [21; 21),\n-        delete: [21; 21),\n-        insert: \"self\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"super\",\n-        source_range: [21; 21),\n-        delete: [21; 21),\n-        insert: \"super::\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"crate\",\n+                source_range: [21; 21),\n+                delete: [21; 21),\n+                insert: \"crate::\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"self\",\n+                source_range: [21; 21),\n+                delete: [21; 21),\n+                insert: \"self\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"super\",\n+                source_range: [21; 21),\n+                delete: [21; 21),\n+                insert: \"super::\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n \n         assert_debug_snapshot!(\n@@ -162,22 +164,24 @@ mod tests {\n                 use a::<|>\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"self\",\n-        source_range: [24; 24),\n-        delete: [24; 24),\n-        insert: \"self\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"super\",\n-        source_range: [24; 24),\n-        delete: [24; 24),\n-        insert: \"super::\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"self\",\n+                source_range: [24; 24),\n+                delete: [24; 24),\n+                insert: \"self\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"super\",\n+                source_range: [24; 24),\n+                delete: [24; 24),\n+                insert: \"super::\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n \n         assert_debug_snapshot!(\n@@ -186,22 +190,24 @@ mod tests {\n                 use a::{b, <|>}\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"self\",\n-        source_range: [28; 28),\n-        delete: [28; 28),\n-        insert: \"self\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"super\",\n-        source_range: [28; 28),\n-        delete: [28; 28),\n-        insert: \"super::\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"self\",\n+                source_range: [28; 28),\n+                delete: [28; 28),\n+                insert: \"self\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"super\",\n+                source_range: [28; 28),\n+                delete: [28; 28),\n+                insert: \"super::\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -215,43 +221,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"return;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"return;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -267,57 +275,59 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"else\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"else {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"else if\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"else if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"return;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [108; 108),\n-        delete: [108; 108),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"else\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"else {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"else if\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"else if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"return;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [108; 108),\n+                delete: [108; 108),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -332,43 +342,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [56; 56),\n-        delete: [56; 56),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [56; 56),\n-        delete: [56; 56),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [56; 56),\n-        delete: [56; 56),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [56; 56),\n-        delete: [56; 56),\n-        insert: \"return $0;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [56; 56),\n-        delete: [56; 56),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [56; 56),\n+                delete: [56; 56),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [56; 56),\n+                delete: [56; 56),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [56; 56),\n+                delete: [56; 56),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [56; 56),\n+                delete: [56; 56),\n+                insert: \"return $0;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [56; 56),\n+                delete: [56; 56),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n         assert_debug_snapshot!(\n             do_keyword_completion(\n@@ -379,43 +391,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"return;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [49; 49),\n-        delete: [49; 49),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"return;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [49; 49),\n+                delete: [49; 49),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -431,43 +445,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [97; 97),\n-        delete: [97; 97),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [97; 97),\n-        delete: [97; 97),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [97; 97),\n-        delete: [97; 97),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [97; 97),\n-        delete: [97; 97),\n-        insert: \"return $0\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [97; 97),\n-        delete: [97; 97),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [97; 97),\n+                delete: [97; 97),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [97; 97),\n+                delete: [97; 97),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [97; 97),\n+                delete: [97; 97),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [97; 97),\n+                delete: [97; 97),\n+                insert: \"return $0\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [97; 97),\n+                delete: [97; 97),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -483,43 +499,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"return $0;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"return $0;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n         assert_debug_snapshot!(\n             do_keyword_completion(\n@@ -533,43 +551,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"return $0;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [95; 95),\n-        delete: [95; 95),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"return $0;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [95; 95),\n+                delete: [95; 95),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -583,57 +603,59 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"break\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"break;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"continue\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"continue;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"return $0;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [63; 63),\n-        delete: [63; 63),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"break\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"break;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"continue\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"continue;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"return $0;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [63; 63),\n+                delete: [63; 63),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n \n         // No completion: lambda isolates control flow\n@@ -645,43 +667,45 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [68; 68),\n-        delete: [68; 68),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [68; 68),\n-        delete: [68; 68),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [68; 68),\n-        delete: [68; 68),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [68; 68),\n-        delete: [68; 68),\n-        insert: \"return $0;\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [68; 68),\n-        delete: [68; 68),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [68; 68),\n+                delete: [68; 68),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [68; 68),\n+                delete: [68; 68),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [68; 68),\n+                delete: [68; 68),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [68; 68),\n+                delete: [68; 68),\n+                insert: \"return $0;\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [68; 68),\n+                delete: [68; 68),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -699,57 +723,59 @@ mod tests {\n                 }\n                 \",\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"break\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"break\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"continue\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"continue\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"if $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"loop\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"loop {$0}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"match $0 {}\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"return\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"return\",\n-        kind: Keyword,\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [122; 124),\n-        delete: [122; 124),\n-        insert: \"while $0 {}\",\n-        kind: Keyword,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"break\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"break\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"continue\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"continue\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"if $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"loop\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"loop {$0}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"match $0 {}\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"return\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"return\",\n+                kind: Keyword,\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [122; 124),\n+                delete: [122; 124),\n+                insert: \"while $0 {}\",\n+                kind: Keyword,\n+            },\n+        ]\n+        \"###\n         )\n     }\n }"}, {"sha": "faadd1e3f4e4d0e52ea6811e1498cb6a64b2fe64", "filename": "crates/ra_ide_api/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -37,16 +37,18 @@ mod tests {\n                 <|>\n                 \"\n             ),\n-            @r##\"[\n-    CompletionItem {\n-        label: \"foo!\",\n-        source_range: [46; 46),\n-        delete: [46; 46),\n-        insert: \"foo!($0)\",\n-        kind: Macro,\n-        detail: \"macro_rules! foo\",\n-    },\n-]\"##\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"foo!\",\n+                source_range: [46; 46),\n+                delete: [46; 46),\n+                insert: \"foo!($0)\",\n+                kind: Macro,\n+                detail: \"macro_rules! foo\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -75,19 +77,21 @@ mod tests {\n                 <|>\n                 \"\n             ),\n-            @r##\"[\n-    CompletionItem {\n-        label: \"vec!\",\n-        source_range: [280; 280),\n-        delete: [280; 280),\n-        insert: \"vec![$0]\",\n-        kind: Macro,\n-        detail: \"macro_rules! vec\",\n-        documentation: Documentation(\n-            \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n-        ),\n-    },\n-]\"##\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"vec!\",\n+                source_range: [280; 280),\n+                delete: [280; 280),\n+                insert: \"vec![$0]\",\n+                kind: Macro,\n+                detail: \"macro_rules! vec\",\n+                documentation: Documentation(\n+                    \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -110,28 +114,29 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"foo!\",\n-        source_range: [163; 163),\n-        delete: [163; 163),\n-        insert: \"foo! {$0}\",\n-        kind: Macro,\n-        detail: \"macro_rules! foo\",\n-        documentation: Documentation(\n-            \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n-        ),\n-    },\n-    CompletionItem {\n-        label: \"main()\",\n-        source_range: [163; 163),\n-        delete: [163; 163),\n-        insert: \"main()$0\",\n-        kind: Function,\n-        lookup: \"main\",\n-        detail: \"fn main()\",\n-    },\n-]\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"foo!\",\n+                source_range: [163; 163),\n+                delete: [163; 163),\n+                insert: \"foo! {$0}\",\n+                kind: Macro,\n+                detail: \"macro_rules! foo\",\n+                documentation: Documentation(\n+                    \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n+                ),\n+            },\n+            CompletionItem {\n+                label: \"main()\",\n+                source_range: [163; 163),\n+                delete: [163; 163),\n+                insert: \"main()$0\",\n+                kind: Function,\n+                lookup: \"main\",\n+                detail: \"fn main()\",\n+            },\n+        ]\n         \"###\n         );\n     }"}, {"sha": "5d974cf6d56d60979c2d8137faa362407a7704a9", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 176, "deletions": 156, "changes": 332, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -152,18 +152,20 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"my\",\n-        source_range: [27; 29),\n-        delete: [27; 29),\n-        insert: \"my\",\n-        kind: Module,\n-        documentation: Documentation(\n-            \"Some simple\\ndocs describing `mod my`.\",\n-        ),\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"my\",\n+                source_range: [27; 29),\n+                delete: [27; 29),\n+                insert: \"my\",\n+                kind: Module,\n+                documentation: Documentation(\n+                    \"Some simple\\ndocs describing `mod my`.\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -179,15 +181,17 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Bar\",\n-        source_range: [30; 30),\n-        delete: [30; 30),\n-        insert: \"Bar\",\n-        kind: Struct,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Bar\",\n+                source_range: [30; 30),\n+                delete: [30; 30),\n+                insert: \"Bar\",\n+                kind: Struct,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -203,22 +207,24 @@ mod tests {\n                 use crate::Sp<|>\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Spam\",\n-        source_range: [11; 13),\n-        delete: [11; 13),\n-        insert: \"Spam\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"foo\",\n-        source_range: [11; 13),\n-        delete: [11; 13),\n-        insert: \"foo\",\n-        kind: Module,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Spam\",\n+                source_range: [11; 13),\n+                delete: [11; 13),\n+                insert: \"Spam\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [11; 13),\n+                delete: [11; 13),\n+                insert: \"foo\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -234,22 +240,24 @@ mod tests {\n                 use crate::{Sp<|>};\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Spam\",\n-        source_range: [12; 14),\n-        delete: [12; 14),\n-        insert: \"Spam\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"foo\",\n-        source_range: [12; 14),\n-        delete: [12; 14),\n-        insert: \"foo\",\n-        kind: Module,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Spam\",\n+                source_range: [12; 14),\n+                delete: [12; 14),\n+                insert: \"Spam\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [12; 14),\n+                delete: [12; 14),\n+                insert: \"foo\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -269,15 +277,17 @@ mod tests {\n                 use crate::{bar::{baz::Sp<|>}};\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Spam\",\n-        source_range: [23; 25),\n-        delete: [23; 25),\n-        insert: \"Spam\",\n-        kind: Struct,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Spam\",\n+                source_range: [23; 25),\n+                delete: [23; 25),\n+                insert: \"Spam\",\n+                kind: Struct,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -297,30 +307,32 @@ mod tests {\n                 fn foo() { let _ = E::<|> }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Bar\",\n-        source_range: [116; 116),\n-        delete: [116; 116),\n-        insert: \"Bar\",\n-        kind: EnumVariant,\n-        detail: \"(i32)\",\n-        documentation: Documentation(\n-            \"Bar Variant with i32\",\n-        ),\n-    },\n-    CompletionItem {\n-        label: \"Foo\",\n-        source_range: [116; 116),\n-        delete: [116; 116),\n-        insert: \"Foo\",\n-        kind: EnumVariant,\n-        detail: \"()\",\n-        documentation: Documentation(\n-            \"Foo Variant\",\n-        ),\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Bar\",\n+                source_range: [116; 116),\n+                delete: [116; 116),\n+                insert: \"Bar\",\n+                kind: EnumVariant,\n+                detail: \"(i32)\",\n+                documentation: Documentation(\n+                    \"Bar Variant with i32\",\n+                ),\n+            },\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [116; 116),\n+                delete: [116; 116),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+                documentation: Documentation(\n+                    \"Foo Variant\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -343,41 +355,43 @@ mod tests {\n                 fn foo() { let _ = E::<|> }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Bar\",\n-        source_range: [180; 180),\n-        delete: [180; 180),\n-        insert: \"Bar\",\n-        kind: EnumVariant,\n-        detail: \"(i32, u32)\",\n-        documentation: Documentation(\n-            \"Bar Variant with i32 and u32\",\n-        ),\n-    },\n-    CompletionItem {\n-        label: \"Foo\",\n-        source_range: [180; 180),\n-        delete: [180; 180),\n-        insert: \"Foo\",\n-        kind: EnumVariant,\n-        detail: \"()\",\n-        documentation: Documentation(\n-            \"Foo Variant (empty)\",\n-        ),\n-    },\n-    CompletionItem {\n-        label: \"S\",\n-        source_range: [180; 180),\n-        delete: [180; 180),\n-        insert: \"S\",\n-        kind: EnumVariant,\n-        detail: \"(S)\",\n-        documentation: Documentation(\n-            \"\",\n-        ),\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Bar\",\n+                source_range: [180; 180),\n+                delete: [180; 180),\n+                insert: \"Bar\",\n+                kind: EnumVariant,\n+                detail: \"(i32, u32)\",\n+                documentation: Documentation(\n+                    \"Bar Variant with i32 and u32\",\n+                ),\n+            },\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [180; 180),\n+                delete: [180; 180),\n+                insert: \"Foo\",\n+                kind: EnumVariant,\n+                detail: \"()\",\n+                documentation: Documentation(\n+                    \"Foo Variant (empty)\",\n+                ),\n+            },\n+            CompletionItem {\n+                label: \"S\",\n+                source_range: [180; 180),\n+                delete: [180; 180),\n+                insert: \"S\",\n+                kind: EnumVariant,\n+                detail: \"(S)\",\n+                documentation: Documentation(\n+                    \"\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -434,19 +448,21 @@ mod tests {\n                 fn foo() { let _ = S::<|> }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"C\",\n-        source_range: [107; 107),\n-        delete: [107; 107),\n-        insert: \"C\",\n-        kind: Const,\n-        detail: \"const C: i32 = 42;\",\n-        documentation: Documentation(\n-            \"An associated const\",\n-        ),\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"C\",\n+                source_range: [107; 107),\n+                delete: [107; 107),\n+                insert: \"C\",\n+                kind: Const,\n+                detail: \"const C: i32 = 42;\",\n+                documentation: Documentation(\n+                    \"An associated const\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -467,19 +483,21 @@ mod tests {\n                 fn foo() { let _ = S::<|> }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"T\",\n-        source_range: [101; 101),\n-        delete: [101; 101),\n-        insert: \"T\",\n-        kind: TypeAlias,\n-        detail: \"type T = i32;\",\n-        documentation: Documentation(\n-            \"An associated type\",\n-        ),\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"T\",\n+                source_range: [101; 101),\n+                delete: [101; 101),\n+                insert: \"T\",\n+                kind: TypeAlias,\n+                detail: \"type T = i32;\",\n+                documentation: Documentation(\n+                    \"An associated type\",\n+                ),\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -569,15 +587,17 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"bar\",\n-        source_range: [9; 9),\n-        delete: [9; 9),\n-        insert: \"bar\",\n-        kind: Module,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"bar\",\n+                source_range: [9; 9),\n+                delete: [9; 9),\n+                insert: \"bar\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}, {"sha": "fd03b1c40586ad07fa4f83d00accddbbdd79b724", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -54,36 +54,36 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"E\",\n-       \u22ee        source_range: [246; 246),\n-       \u22ee        delete: [246; 246),\n-       \u22ee        insert: \"E\",\n-       \u22ee        kind: Enum,\n-       \u22ee    },\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"X\",\n-       \u22ee        source_range: [246; 246),\n-       \u22ee        delete: [246; 246),\n-       \u22ee        insert: \"X\",\n-       \u22ee        kind: EnumVariant,\n-       \u22ee    },\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"Z\",\n-       \u22ee        source_range: [246; 246),\n-       \u22ee        delete: [246; 246),\n-       \u22ee        insert: \"Z\",\n-       \u22ee        kind: Const,\n-       \u22ee    },\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"m\",\n-       \u22ee        source_range: [246; 246),\n-       \u22ee        delete: [246; 246),\n-       \u22ee        insert: \"m\",\n-       \u22ee        kind: Module,\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"E\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"E\",\n+                kind: Enum,\n+            },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"X\",\n+                kind: EnumVariant,\n+            },\n+            CompletionItem {\n+                label: \"Z\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"Z\",\n+                kind: Const,\n+            },\n+            CompletionItem {\n+                label: \"m\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"m\",\n+                kind: Module,\n+            },\n+        ]\n         \"###);\n     }\n }"}, {"sha": "17b75cf7eb6c2f268eb8dd43ce493dd8eb088972", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 152, "deletions": 146, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -104,64 +104,66 @@ mod tests {\n                 }\n                 \"#,\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"box\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"Box::new(bar)\",\n-        detail: \"Box::new(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"dbg\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"dbg!(bar)\",\n-        detail: \"dbg!(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"if\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"if bar {$0}\",\n-        detail: \"if expr {}\",\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n-        detail: \"match expr {}\",\n-    },\n-    CompletionItem {\n-        label: \"not\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"!bar\",\n-        detail: \"!expr\",\n-    },\n-    CompletionItem {\n-        label: \"ref\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"&bar\",\n-        detail: \"&expr\",\n-    },\n-    CompletionItem {\n-        label: \"refm\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"&mut bar\",\n-        detail: \"&mut expr\",\n-    },\n-    CompletionItem {\n-        label: \"while\",\n-        source_range: [89; 89),\n-        delete: [85; 89),\n-        insert: \"while bar {\\n$0\\n}\",\n-        detail: \"while expr {}\",\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"if\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"if bar {$0}\",\n+                detail: \"if expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+            CompletionItem {\n+                label: \"while\",\n+                source_range: [89; 89),\n+                delete: [85; 89),\n+                insert: \"while bar {\\n$0\\n}\",\n+                detail: \"while expr {}\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -176,50 +178,52 @@ mod tests {\n                 }\n                 \"#,\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"box\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"Box::new(bar)\",\n-        detail: \"Box::new(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"dbg\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"dbg!(bar)\",\n-        detail: \"dbg!(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n-        detail: \"match expr {}\",\n-    },\n-    CompletionItem {\n-        label: \"not\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"!bar\",\n-        detail: \"!expr\",\n-    },\n-    CompletionItem {\n-        label: \"ref\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"&bar\",\n-        detail: \"&expr\",\n-    },\n-    CompletionItem {\n-        label: \"refm\",\n-        source_range: [91; 91),\n-        delete: [87; 91),\n-        insert: \"&mut bar\",\n-        detail: \"&mut expr\",\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"Box::new(bar)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"dbg!(bar)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"match bar {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"!bar\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"&bar\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: [91; 91),\n+                delete: [87; 91),\n+                insert: \"&mut bar\",\n+                detail: \"&mut expr\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -233,50 +237,52 @@ mod tests {\n                 }\n                 \"#,\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"box\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"Box::new(42)\",\n-        detail: \"Box::new(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"dbg\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"dbg!(42)\",\n-        detail: \"dbg!(expr)\",\n-    },\n-    CompletionItem {\n-        label: \"match\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"match 42 {\\n    ${1:_} => {$0\\\\},\\n}\",\n-        detail: \"match expr {}\",\n-    },\n-    CompletionItem {\n-        label: \"not\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"!42\",\n-        detail: \"!expr\",\n-    },\n-    CompletionItem {\n-        label: \"ref\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"&42\",\n-        detail: \"&expr\",\n-    },\n-    CompletionItem {\n-        label: \"refm\",\n-        source_range: [52; 52),\n-        delete: [49; 52),\n-        insert: \"&mut 42\",\n-        detail: \"&mut expr\",\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"box\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"Box::new(42)\",\n+                detail: \"Box::new(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"dbg\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"dbg!(42)\",\n+                detail: \"dbg!(expr)\",\n+            },\n+            CompletionItem {\n+                label: \"match\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"match 42 {\\n    ${1:_} => {$0\\\\},\\n}\",\n+                detail: \"match expr {}\",\n+            },\n+            CompletionItem {\n+                label: \"not\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"!42\",\n+                detail: \"!expr\",\n+            },\n+            CompletionItem {\n+                label: \"ref\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"&42\",\n+                detail: \"&expr\",\n+            },\n+            CompletionItem {\n+                label: \"refm\",\n+                source_range: [52; 52),\n+                delete: [49; 52),\n+                insert: \"&mut 42\",\n+                detail: \"&mut expr\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n }"}, {"sha": "45a4a9738289a5324503cadaf99c7bafccca59a2", "filename": "crates/ra_ide_api/src/completion/complete_record_literal.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -45,17 +45,17 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"the_field\",\n-       \u22ee        source_range: [142; 145),\n-       \u22ee        delete: [142; 145),\n-       \u22ee        insert: \"the_field\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee        deprecated: true,\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [142; 145),\n+                delete: [142; 145),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+                deprecated: true,\n+            },\n+        ]\n         \"###);\n     }\n \n@@ -70,16 +70,16 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"the_field\",\n-       \u22ee        source_range: [83; 86),\n-       \u22ee        delete: [83; 86),\n-       \u22ee        insert: \"the_field\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"the_field\",\n+                source_range: [83; 86),\n+                delete: [83; 86),\n+                insert: \"the_field\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n \n@@ -96,16 +96,16 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"a\",\n-       \u22ee        source_range: [119; 119),\n-       \u22ee        delete: [119; 119),\n-       \u22ee        insert: \"a\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"a\",\n+                source_range: [119; 119),\n+                delete: [119; 119),\n+                insert: \"a\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n \n@@ -122,16 +122,16 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"b\",\n-       \u22ee        source_range: [119; 119),\n-       \u22ee        delete: [119; 119),\n-       \u22ee        insert: \"b\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"b\",\n+                source_range: [119; 119),\n+                delete: [119; 119),\n+                insert: \"b\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n \n@@ -147,16 +147,16 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"a\",\n-       \u22ee        source_range: [93; 93),\n-       \u22ee        delete: [93; 93),\n-       \u22ee        insert: \"a\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"a\",\n+                source_range: [93; 93),\n+                delete: [93; 93),\n+                insert: \"a\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n }"}, {"sha": "aa0fd6d24f9abb0bb868dcfdb91b0afe214bbffa", "filename": "crates/ra_ide_api/src/completion/complete_record_pattern.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -44,16 +44,16 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"foo\",\n-       \u22ee        source_range: [117; 118),\n-       \u22ee        delete: [117; 118),\n-       \u22ee        insert: \"foo\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [117; 118),\n+                delete: [117; 118),\n+                insert: \"foo\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n \n@@ -73,24 +73,24 @@ mod tests {\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n-       \u22ee[\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"bar\",\n-       \u22ee        source_range: [161; 161),\n-       \u22ee        delete: [161; 161),\n-       \u22ee        insert: \"bar\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"()\",\n-       \u22ee    },\n-       \u22ee    CompletionItem {\n-       \u22ee        label: \"foo\",\n-       \u22ee        source_range: [161; 161),\n-       \u22ee        delete: [161; 161),\n-       \u22ee        insert: \"foo\",\n-       \u22ee        kind: Field,\n-       \u22ee        detail: \"u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            CompletionItem {\n+                label: \"bar\",\n+                source_range: [161; 161),\n+                delete: [161; 161),\n+                insert: \"bar\",\n+                kind: Field,\n+                detail: \"()\",\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [161; 161),\n+                delete: [161; 161),\n+                insert: \"foo\",\n+                kind: Field,\n+                detail: \"u32\",\n+            },\n+        ]\n         \"###);\n     }\n }"}, {"sha": "8c57c907d9bd8a0a8380e18f704577e61b89bb3f", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -409,15 +409,17 @@ mod tests {\n                 // nothing here\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"other_crate\",\n-        source_range: [4; 4),\n-        delete: [4; 4),\n-        insert: \"other_crate\",\n-        kind: Module,\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"other_crate\",\n+                source_range: [4; 4),\n+                delete: [4; 4),\n+                insert: \"other_crate\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -530,23 +532,25 @@ mod tests {\n     fn completes_self_in_methods() {\n         assert_debug_snapshot!(\n             do_reference_completion(r\"impl S { fn foo(&self) { <|> } }\"),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"Self\",\n-        source_range: [25; 25),\n-        delete: [25; 25),\n-        insert: \"Self\",\n-        kind: TypeParam,\n-    },\n-    CompletionItem {\n-        label: \"self\",\n-        source_range: [25; 25),\n-        delete: [25; 25),\n-        insert: \"self\",\n-        kind: Binding,\n-        detail: \"&{unknown}\",\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Self\",\n+                source_range: [25; 25),\n+                delete: [25; 25),\n+                insert: \"Self\",\n+                kind: TypeParam,\n+            },\n+            CompletionItem {\n+                label: \"self\",\n+                source_range: [25; 25),\n+                delete: [25; 25),\n+                insert: \"self\",\n+                kind: Binding,\n+                detail: \"&{unknown}\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}, {"sha": "1f2988b36bfce62290beedc4e3851941d28040f7", "filename": "crates/ra_ide_api/src/completion/complete_snippet.rs", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -52,34 +52,36 @@ mod tests {\n     fn completes_snippets_in_expressions() {\n         assert_debug_snapshot!(\n                     do_snippet_completion(r\"fn foo(x: i32) { <|> }\"),\n-        @r#\"[\n-    CompletionItem {\n-        label: \"pd\",\n-        source_range: [17; 17),\n-        delete: [17; 17),\n-        insert: \"eprintln!(\\\"$0 = {:?}\\\", $0);\",\n-        kind: Snippet,\n-    },\n-    CompletionItem {\n-        label: \"ppd\",\n-        source_range: [17; 17),\n-        delete: [17; 17),\n-        insert: \"eprintln!(\\\"$0 = {:#?}\\\", $0);\",\n-        kind: Snippet,\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            CompletionItem {\n+                label: \"pd\",\n+                source_range: [17; 17),\n+                delete: [17; 17),\n+                insert: \"eprintln!(\\\"$0 = {:?}\\\", $0);\",\n+                kind: Snippet,\n+            },\n+            CompletionItem {\n+                label: \"ppd\",\n+                source_range: [17; 17),\n+                delete: [17; 17),\n+                insert: \"eprintln!(\\\"$0 = {:#?}\\\", $0);\",\n+                kind: Snippet,\n+            },\n+        ]\n+        \"###\n                 );\n     }\n \n     #[test]\n     fn should_not_complete_snippets_in_path() {\n         assert_debug_snapshot!(\n                     do_snippet_completion(r\"fn foo(x: i32) { ::foo<|> }\"),\n-        @r#\"[]\"#\n+        @\"[]\"\n                 );\n         assert_debug_snapshot!(\n                     do_snippet_completion(r\"fn foo(x: i32) { ::<|> }\"),\n-        @r#\"[]\"#\n+        @\"[]\"\n                 );\n     }\n \n@@ -94,23 +96,25 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Test function\",\n-        source_range: [78; 78),\n-        delete: [78; 78),\n-        insert: \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\",\n-        kind: Snippet,\n-        lookup: \"tfn\",\n-    },\n-    CompletionItem {\n-        label: \"pub(crate)\",\n-        source_range: [78; 78),\n-        delete: [78; 78),\n-        insert: \"pub(crate) $0\",\n-        kind: Snippet,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Test function\",\n+                source_range: [78; 78),\n+                delete: [78; 78),\n+                insert: \"#[test]\\nfn ${1:feature}() {\\n    $0\\n}\",\n+                kind: Snippet,\n+                lookup: \"tfn\",\n+            },\n+            CompletionItem {\n+                label: \"pub(crate)\",\n+                source_range: [78; 78),\n+                delete: [78; 78),\n+                insert: \"pub(crate) $0\",\n+                kind: Snippet,\n+            },\n+        ]\n+        \"###\n         );\n     }\n }"}, {"sha": "501b7da4e720a73492d492a28bafb0d9ac9c72d5", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 82, "deletions": 78, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -68,7 +68,7 @@ impl Completions {\n             ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::TypeAlias,\n             ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n             ScopeDef::GenericParam(..) => CompletionItemKind::TypeParam,\n-            ScopeDef::LocalBinding(..) => CompletionItemKind::Binding,\n+            ScopeDef::Local(..) => CompletionItemKind::Binding,\n             // (does this need its own kind?)\n             ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n             ScopeDef::MacroDef(mac) => {\n@@ -96,13 +96,11 @@ impl Completions {\n \n         let mut completion_item =\n             CompletionItem::new(completion_kind, ctx.source_range(), local_name.clone());\n-        if let ScopeDef::LocalBinding(pat_id) = resolution {\n-            let ty = ctx\n-                .analyzer\n-                .type_of_pat_by_id(ctx.db, pat_id.clone())\n-                .filter(|t| t != &Ty::Unknown)\n-                .map(|t| t.display(ctx.db).to_string());\n-            completion_item = completion_item.set_detail(ty);\n+        if let ScopeDef::Local(local) = resolution {\n+            let ty = local.ty(ctx.db);\n+            if ty != Ty::Unknown {\n+                completion_item = completion_item.detail(ty.display(ctx.db).to_string());\n+            }\n         };\n \n         // If not an import, add parenthesis automatically.\n@@ -325,38 +323,38 @@ mod tests {\n                 \"#,\n             ),\n             @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"main()\",\n-                    source_range: [203; 206),\n-                    delete: [203; 206),\n-                    insert: \"main()$0\",\n-                    kind: Function,\n-                    lookup: \"main\",\n-                    detail: \"fn main()\",\n-                },\n-                CompletionItem {\n-                    label: \"something_deprecated()\",\n-                    source_range: [203; 206),\n-                    delete: [203; 206),\n-                    insert: \"something_deprecated()$0\",\n-                    kind: Function,\n-                    lookup: \"something_deprecated\",\n-                    detail: \"fn something_deprecated()\",\n-                    deprecated: true,\n-                },\n-                CompletionItem {\n-                    label: \"something_else_deprecated()\",\n-                    source_range: [203; 206),\n-                    delete: [203; 206),\n-                    insert: \"something_else_deprecated()$0\",\n-                    kind: Function,\n-                    lookup: \"something_else_deprecated\",\n-                    detail: \"fn something_else_deprecated()\",\n-                    deprecated: true,\n-                },\n-            ]\n-            \"###\n+        [\n+            CompletionItem {\n+                label: \"main()\",\n+                source_range: [203; 206),\n+                delete: [203; 206),\n+                insert: \"main()$0\",\n+                kind: Function,\n+                lookup: \"main\",\n+                detail: \"fn main()\",\n+            },\n+            CompletionItem {\n+                label: \"something_deprecated()\",\n+                source_range: [203; 206),\n+                delete: [203; 206),\n+                insert: \"something_deprecated()$0\",\n+                kind: Function,\n+                lookup: \"something_deprecated\",\n+                detail: \"fn something_deprecated()\",\n+                deprecated: true,\n+            },\n+            CompletionItem {\n+                label: \"something_else_deprecated()\",\n+                source_range: [203; 206),\n+                delete: [203; 206),\n+                insert: \"something_else_deprecated()$0\",\n+                kind: Function,\n+                lookup: \"something_else_deprecated\",\n+                detail: \"fn something_else_deprecated()\",\n+                deprecated: true,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -461,16 +459,18 @@ mod tests {\n                 use crate::m::f<|>;\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"foo\",\n-        source_range: [40; 41),\n-        delete: [40; 41),\n-        insert: \"foo\",\n-        kind: Function,\n-        detail: \"pub fn foo()\",\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [40; 41),\n+                delete: [40; 41),\n+                insert: \"foo\",\n+                kind: Function,\n+                detail: \"pub fn foo()\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -486,24 +486,26 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"frobnicate\",\n-        source_range: [35; 39),\n-        delete: [35; 39),\n-        insert: \"frobnicate\",\n-        kind: Function,\n-        detail: \"fn frobnicate()\",\n-    },\n-    CompletionItem {\n-        label: \"main\",\n-        source_range: [35; 39),\n-        delete: [35; 39),\n-        insert: \"main\",\n-        kind: Function,\n-        detail: \"fn main()\",\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"frobnicate\",\n+                source_range: [35; 39),\n+                delete: [35; 39),\n+                insert: \"frobnicate\",\n+                kind: Function,\n+                detail: \"fn frobnicate()\",\n+            },\n+            CompletionItem {\n+                label: \"main\",\n+                source_range: [35; 39),\n+                delete: [35; 39),\n+                insert: \"main\",\n+                kind: Function,\n+                detail: \"fn main()\",\n+            },\n+        ]\n+        \"###\n         );\n         assert_debug_snapshot!(\n             do_reference_completion(\n@@ -516,16 +518,18 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"new\",\n-        source_range: [67; 69),\n-        delete: [67; 69),\n-        insert: \"new\",\n-        kind: Function,\n-        detail: \"fn new() -> Foo\",\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"new\",\n+                source_range: [67; 69),\n+                delete: [67; 69),\n+                insert: \"new\",\n+                kind: Function,\n+                detail: \"fn new() -> Foo\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}, {"sha": "e52ffefb36c9ff7c3359083cb39e63af9e7e578f", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -526,28 +526,28 @@ mod tests {\n         let (analysis, file_id) = single_file(\"mod foo;\");\n         let diagnostics = analysis.diagnostics(file_id).unwrap();\n         assert_debug_snapshot!(diagnostics, @r###\"\n-       \u22ee[\n-       \u22ee    Diagnostic {\n-       \u22ee        message: \"unresolved module\",\n-       \u22ee        range: [0; 8),\n-       \u22ee        fix: Some(\n-       \u22ee            SourceChange {\n-       \u22ee                label: \"create module\",\n-       \u22ee                source_file_edits: [],\n-       \u22ee                file_system_edits: [\n-       \u22ee                    CreateFile {\n-       \u22ee                        source_root: SourceRootId(\n-       \u22ee                            0,\n-       \u22ee                        ),\n-       \u22ee                        path: \"foo.rs\",\n-       \u22ee                    },\n-       \u22ee                ],\n-       \u22ee                cursor_position: None,\n-       \u22ee            },\n-       \u22ee        ),\n-       \u22ee        severity: Error,\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            Diagnostic {\n+                message: \"unresolved module\",\n+                range: [0; 8),\n+                fix: Some(\n+                    SourceChange {\n+                        label: \"create module\",\n+                        source_file_edits: [],\n+                        file_system_edits: [\n+                            CreateFile {\n+                                source_root: SourceRootId(\n+                                    0,\n+                                ),\n+                                path: \"foo.rs\",\n+                            },\n+                        ],\n+                        cursor_position: None,\n+                    },\n+                ),\n+                severity: Error,\n+            },\n+        ]\n         \"###);\n     }\n "}, {"sha": "a80d65ac714f180b518e86ba1459d7e91d6bca98", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 187, "deletions": 185, "changes": 372, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -209,191 +209,193 @@ fn very_obsolete() {}\n         .unwrap();\n         let structure = file_structure(&file);\n         assert_debug_snapshot!(structure,\n-        @r#\"[\n-    StructureNode {\n-        parent: None,\n-        label: \"Foo\",\n-        navigation_range: [8; 11),\n-        node_range: [1; 26),\n-        kind: STRUCT_DEF,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            0,\n-        ),\n-        label: \"x\",\n-        navigation_range: [18; 19),\n-        node_range: [18; 24),\n-        kind: RECORD_FIELD_DEF,\n-        detail: Some(\n-            \"i32\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"m\",\n-        navigation_range: [32; 33),\n-        node_range: [28; 158),\n-        kind: MODULE,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            2,\n-        ),\n-        label: \"bar1\",\n-        navigation_range: [43; 47),\n-        node_range: [40; 52),\n-        kind: FN_DEF,\n-        detail: Some(\n-            \"fn()\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            2,\n-        ),\n-        label: \"bar2\",\n-        navigation_range: [60; 64),\n-        node_range: [57; 81),\n-        kind: FN_DEF,\n-        detail: Some(\n-            \"fn<T>(t: T) -> T\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            2,\n-        ),\n-        label: \"bar3\",\n-        navigation_range: [89; 93),\n-        node_range: [86; 156),\n-        kind: FN_DEF,\n-        detail: Some(\n-            \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"E\",\n-        navigation_range: [165; 166),\n-        node_range: [160; 180),\n-        kind: ENUM_DEF,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            6,\n-        ),\n-        label: \"X\",\n-        navigation_range: [169; 170),\n-        node_range: [169; 170),\n-        kind: ENUM_VARIANT,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: Some(\n-            6,\n-        ),\n-        label: \"Y\",\n-        navigation_range: [172; 173),\n-        node_range: [172; 178),\n-        kind: ENUM_VARIANT,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"T\",\n-        navigation_range: [186; 187),\n-        node_range: [181; 193),\n-        kind: TYPE_ALIAS_DEF,\n-        detail: Some(\n-            \"()\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"S\",\n-        navigation_range: [201; 202),\n-        node_range: [194; 213),\n-        kind: STATIC_DEF,\n-        detail: Some(\n-            \"i32\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"C\",\n-        navigation_range: [220; 221),\n-        node_range: [214; 232),\n-        kind: CONST_DEF,\n-        detail: Some(\n-            \"i32\",\n-        ),\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"impl E\",\n-        navigation_range: [239; 240),\n-        node_range: [234; 243),\n-        kind: IMPL_BLOCK,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"impl fmt::Debug for E\",\n-        navigation_range: [265; 266),\n-        node_range: [245; 269),\n-        kind: IMPL_BLOCK,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"mc\",\n-        navigation_range: [284; 286),\n-        node_range: [271; 303),\n-        kind: MACRO_CALL,\n-        detail: None,\n-        deprecated: false,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"obsolete\",\n-        navigation_range: [322; 330),\n-        node_range: [305; 335),\n-        kind: FN_DEF,\n-        detail: Some(\n-            \"fn()\",\n-        ),\n-        deprecated: true,\n-    },\n-    StructureNode {\n-        parent: None,\n-        label: \"very_obsolete\",\n-        navigation_range: [375; 388),\n-        node_range: [337; 393),\n-        kind: FN_DEF,\n-        detail: Some(\n-            \"fn()\",\n-        ),\n-        deprecated: true,\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            StructureNode {\n+                parent: None,\n+                label: \"Foo\",\n+                navigation_range: [8; 11),\n+                node_range: [1; 26),\n+                kind: STRUCT_DEF,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    0,\n+                ),\n+                label: \"x\",\n+                navigation_range: [18; 19),\n+                node_range: [18; 24),\n+                kind: RECORD_FIELD_DEF,\n+                detail: Some(\n+                    \"i32\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"m\",\n+                navigation_range: [32; 33),\n+                node_range: [28; 158),\n+                kind: MODULE,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    2,\n+                ),\n+                label: \"bar1\",\n+                navigation_range: [43; 47),\n+                node_range: [40; 52),\n+                kind: FN_DEF,\n+                detail: Some(\n+                    \"fn()\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    2,\n+                ),\n+                label: \"bar2\",\n+                navigation_range: [60; 64),\n+                node_range: [57; 81),\n+                kind: FN_DEF,\n+                detail: Some(\n+                    \"fn<T>(t: T) -> T\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    2,\n+                ),\n+                label: \"bar3\",\n+                navigation_range: [89; 93),\n+                node_range: [86; 156),\n+                kind: FN_DEF,\n+                detail: Some(\n+                    \"fn<A, B>(a: A, b: B) -> Vec< u32 >\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"E\",\n+                navigation_range: [165; 166),\n+                node_range: [160; 180),\n+                kind: ENUM_DEF,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    6,\n+                ),\n+                label: \"X\",\n+                navigation_range: [169; 170),\n+                node_range: [169; 170),\n+                kind: ENUM_VARIANT,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: Some(\n+                    6,\n+                ),\n+                label: \"Y\",\n+                navigation_range: [172; 173),\n+                node_range: [172; 178),\n+                kind: ENUM_VARIANT,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"T\",\n+                navigation_range: [186; 187),\n+                node_range: [181; 193),\n+                kind: TYPE_ALIAS_DEF,\n+                detail: Some(\n+                    \"()\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"S\",\n+                navigation_range: [201; 202),\n+                node_range: [194; 213),\n+                kind: STATIC_DEF,\n+                detail: Some(\n+                    \"i32\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"C\",\n+                navigation_range: [220; 221),\n+                node_range: [214; 232),\n+                kind: CONST_DEF,\n+                detail: Some(\n+                    \"i32\",\n+                ),\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"impl E\",\n+                navigation_range: [239; 240),\n+                node_range: [234; 243),\n+                kind: IMPL_BLOCK,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"impl fmt::Debug for E\",\n+                navigation_range: [265; 266),\n+                node_range: [245; 269),\n+                kind: IMPL_BLOCK,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"mc\",\n+                navigation_range: [284; 286),\n+                node_range: [271; 303),\n+                kind: MACRO_CALL,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"obsolete\",\n+                navigation_range: [322; 330),\n+                node_range: [305; 335),\n+                kind: FN_DEF,\n+                detail: Some(\n+                    \"fn()\",\n+                ),\n+                deprecated: true,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"very_obsolete\",\n+                navigation_range: [375; 388),\n+                node_range: [337; 393),\n+                kind: FN_DEF,\n+                detail: Some(\n+                    \"fn()\",\n+                ),\n+                deprecated: true,\n+            },\n+        ]\n+        \"###\n                 );\n     }\n }"}, {"sha": "07d511fb316c94d889325147ed1fb7e3590db32f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 93, "deletions": 111, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -5,7 +5,7 @@ use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n     ast::{self, DocCommentsOwner},\n-    match_ast, AstNode,\n+    AstNode,\n };\n \n use crate::{\n@@ -14,7 +14,7 @@ use crate::{\n         description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n         rust_code_markup_with_doc, ShortLabel,\n     },\n-    references::{classify_name_ref, NameKind::*},\n+    references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n \n@@ -92,65 +92,88 @@ fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n     }\n }\n \n+fn hover_text_from_name_kind(\n+    db: &RootDatabase,\n+    name_kind: NameKind,\n+    no_fallback: &mut bool,\n+) -> Option<String> {\n+    return match name_kind {\n+        Macro(it) => {\n+            let src = it.source(db);\n+            hover_text(src.ast.doc_comment_text(), Some(macro_label(&src.ast)))\n+        }\n+        Field(it) => {\n+            let src = it.source(db);\n+            match src.ast {\n+                hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n+                _ => None,\n+            }\n+        }\n+        AssocItem(it) => match it {\n+            hir::AssocItem::Function(it) => from_def_source(db, it),\n+            hir::AssocItem::Const(it) => from_def_source(db, it),\n+            hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n+        },\n+        Def(it) => match it {\n+            hir::ModuleDef::Module(it) => match it.definition_source(db).ast {\n+                hir::ModuleSource::Module(it) => {\n+                    hover_text(it.doc_comment_text(), it.short_label())\n+                }\n+                _ => None,\n+            },\n+            hir::ModuleDef::Function(it) => from_def_source(db, it),\n+            hir::ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it),\n+            hir::ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it),\n+            hir::ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it),\n+            hir::ModuleDef::EnumVariant(it) => from_def_source(db, it),\n+            hir::ModuleDef::Const(it) => from_def_source(db, it),\n+            hir::ModuleDef::Static(it) => from_def_source(db, it),\n+            hir::ModuleDef::Trait(it) => from_def_source(db, it),\n+            hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n+            hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n+        },\n+        SelfType(ty) => match ty.as_adt() {\n+            Some((adt_def, _)) => match adt_def {\n+                hir::Adt::Struct(it) => from_def_source(db, it),\n+                hir::Adt::Union(it) => from_def_source(db, it),\n+                hir::Adt::Enum(it) => from_def_source(db, it),\n+            },\n+            _ => None,\n+        },\n+        Local(_) => {\n+            // Hover for these shows type names\n+            *no_fallback = true;\n+            None\n+        }\n+        GenericParam(_) => {\n+            // FIXME: Hover for generic param\n+            None\n+        }\n+    };\n+\n+    fn from_def_source<A, D>(db: &RootDatabase, def: D) -> Option<String>\n+    where\n+        D: HasSource<Ast = A>,\n+        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n+    {\n+        let src = def.source(db);\n+        hover_text(src.ast.doc_comment_text(), src.ast.short_label())\n+    }\n+}\n+\n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let parse = db.parse(position.file_id);\n     let file = parse.tree();\n+\n     let mut res = HoverResult::new();\n \n-    let mut range = None;\n-    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n+    let mut range = if let Some(name_ref) =\n+        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n+    {\n         let mut no_fallback = false;\n-        let name_kind = classify_name_ref(db, position.file_id, &name_ref).map(|d| d.kind);\n-        match name_kind {\n-            Some(Macro(it)) => {\n-                let src = it.source(db);\n-                res.extend(hover_text(src.ast.doc_comment_text(), Some(macro_label(&src.ast))));\n-            }\n-            Some(Field(it)) => {\n-                let src = it.source(db);\n-                if let hir::FieldSource::Named(it) = src.ast {\n-                    res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n-                }\n-            }\n-            Some(AssocItem(it)) => res.extend(match it {\n-                hir::AssocItem::Function(it) => from_def_source(db, it),\n-                hir::AssocItem::Const(it) => from_def_source(db, it),\n-                hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n-            }),\n-            Some(Def(it)) => match it {\n-                hir::ModuleDef::Module(it) => {\n-                    if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                    }\n-                }\n-                hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::BuiltinType(it) => res.extend(Some(it.to_string())),\n-            },\n-            Some(SelfType(ty)) => {\n-                if let Some((adt_def, _)) = ty.as_adt() {\n-                    res.extend(match adt_def {\n-                        hir::Adt::Struct(it) => from_def_source(db, it),\n-                        hir::Adt::Union(it) => from_def_source(db, it),\n-                        hir::Adt::Enum(it) => from_def_source(db, it),\n-                    })\n-                }\n-            }\n-            Some(Local(_)) => {\n-                // Hover for these shows type names\n-                no_fallback = true;\n-            }\n-            Some(GenericParam(_)) => {\n-                // FIXME: Hover for generic param\n-            }\n-            None => {}\n+        if let Some(name_kind) = classify_name_ref(db, position.file_id, &name_ref).map(|d| d.kind)\n+        {\n+            res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n         }\n \n         if res.is_empty() && !no_fallback {\n@@ -164,55 +187,24 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n \n         if !res.is_empty() {\n-            range = Some(name_ref.syntax().text_range())\n+            Some(name_ref.syntax().text_range())\n+        } else {\n+            None\n         }\n     } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if let Some(parent) = name.syntax().parent() {\n-            let text = match_ast! {\n-                match parent {\n-                    ast::StructDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::EnumDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::EnumVariant(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::FnDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::TypeAliasDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::ConstDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::StaticDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::TraitDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::RecordFieldDef(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::Module(it) => {\n-                        hover_text(it.doc_comment_text(), it.short_label())\n-                    },\n-                    ast::MacroCall(it) => {\n-                        hover_text(it.doc_comment_text(), None)\n-                    },\n-                    _ => None,\n-                }\n-            };\n-            res.extend(text);\n+        if let Some(name_kind) = classify_name(db, position.file_id, &name).map(|d| d.kind) {\n+            let mut _b: bool = true;\n+            res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n         }\n \n-        if !res.is_empty() && range.is_none() {\n-            range = Some(name.syntax().text_range());\n+        if !res.is_empty() {\n+            Some(name.syntax().text_range())\n+        } else {\n+            None\n         }\n-    }\n+    } else {\n+        None\n+    };\n \n     if range.is_none() {\n         let node = ancestors_at_offset(file.syntax(), position.offset).find(|n| {\n@@ -221,23 +213,13 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n         res.extend(type_of(db, frange).map(rust_code_markup));\n         range = Some(node.text_range());\n-    }\n+    };\n \n     let range = range?;\n     if res.is_empty() {\n         return None;\n     }\n-    let res = RangeInfo::new(range, res);\n-    return Some(res);\n-\n-    fn from_def_source<A, D>(db: &RootDatabase, def: D) -> Option<String>\n-    where\n-        D: HasSource<Ast = A>,\n-        A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n-    {\n-        let src = def.source(db);\n-        hover_text(src.ast.doc_comment_text(), src.ast.short_label())\n-    }\n+    Some(RangeInfo::new(range, res))\n }\n \n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {"}, {"sha": "2ff10b89a850937e47b4702a925ec05aafce8641", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 162, "deletions": 152, "changes": 314, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -214,58 +214,60 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n-    InlayHint {\n-        range: [193; 197),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [236; 244),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [275; 279),\n-        kind: TypeHint,\n-        label: \"&str\",\n-    },\n-    InlayHint {\n-        range: [539; 543),\n-        kind: TypeHint,\n-        label: \"(i32, char)\",\n-    },\n-    InlayHint {\n-        range: [566; 567),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [570; 571),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [573; 574),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [584; 585),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [577; 578),\n-        kind: TypeHint,\n-        label: \"f64\",\n-    },\n-    InlayHint {\n-        range: [580; 581),\n-        kind: TypeHint,\n-        label: \"f64\",\n-    },\n-]\"#\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [193; 197),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [236; 244),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [275; 279),\n+                kind: TypeHint,\n+                label: \"&str\",\n+            },\n+            InlayHint {\n+                range: [539; 543),\n+                kind: TypeHint,\n+                label: \"(i32, char)\",\n+            },\n+            InlayHint {\n+                range: [566; 567),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [570; 571),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [573; 574),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [584; 585),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [577; 578),\n+                kind: TypeHint,\n+                label: \"f64\",\n+            },\n+            InlayHint {\n+                range: [580; 581),\n+                kind: TypeHint,\n+                label: \"f64\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -281,18 +283,20 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n-    InlayHint {\n-        range: [21; 30),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [57; 66),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-]\"#\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [21; 30),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [57; 66),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -308,18 +312,20 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n-    InlayHint {\n-        range: [21; 30),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-    InlayHint {\n-        range: [44; 53),\n-        kind: TypeHint,\n-        label: \"i32\",\n-    },\n-]\"#\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [21; 30),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [44; 53),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -354,33 +360,35 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n-    InlayHint {\n-        range: [166; 170),\n-        kind: TypeHint,\n-        label: \"CustomOption<Test>\",\n-    },\n-    InlayHint {\n-        range: [334; 338),\n-        kind: TypeHint,\n-        label: \"&Test\",\n-    },\n-    InlayHint {\n-        range: [389; 390),\n-        kind: TypeHint,\n-        label: \"&CustomOption<u32>\",\n-    },\n-    InlayHint {\n-        range: [392; 393),\n-        kind: TypeHint,\n-        label: \"&u8\",\n-    },\n-    InlayHint {\n-        range: [531; 532),\n-        kind: TypeHint,\n-        label: \"&u32\",\n-    },\n-]\"#\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [166; 170),\n+                kind: TypeHint,\n+                label: \"CustomOption<Test>\",\n+            },\n+            InlayHint {\n+                range: [334; 338),\n+                kind: TypeHint,\n+                label: \"&Test\",\n+            },\n+            InlayHint {\n+                range: [389; 390),\n+                kind: TypeHint,\n+                label: \"&CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [392; 393),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [531; 532),\n+                kind: TypeHint,\n+                label: \"&u32\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -416,33 +424,33 @@ fn main() {\n         );\n \n         assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n-       \u22ee[\n-       \u22ee    InlayHint {\n-       \u22ee        range: [166; 170),\n-       \u22ee        kind: TypeHint,\n-       \u22ee        label: \"CustomOption<Test>\",\n-       \u22ee    },\n-       \u22ee    InlayHint {\n-       \u22ee        range: [343; 347),\n-       \u22ee        kind: TypeHint,\n-       \u22ee        label: \"&Test\",\n-       \u22ee    },\n-       \u22ee    InlayHint {\n-       \u22ee        range: [401; 402),\n-       \u22ee        kind: TypeHint,\n-       \u22ee        label: \"&CustomOption<u32>\",\n-       \u22ee    },\n-       \u22ee    InlayHint {\n-       \u22ee        range: [404; 405),\n-       \u22ee        kind: TypeHint,\n-       \u22ee        label: \"&u8\",\n-       \u22ee    },\n-       \u22ee    InlayHint {\n-       \u22ee        range: [549; 550),\n-       \u22ee        kind: TypeHint,\n-       \u22ee        label: \"&u32\",\n-       \u22ee    },\n-       \u22ee]\n+        [\n+            InlayHint {\n+                range: [166; 170),\n+                kind: TypeHint,\n+                label: \"CustomOption<Test>\",\n+            },\n+            InlayHint {\n+                range: [343; 347),\n+                kind: TypeHint,\n+                label: \"&Test\",\n+            },\n+            InlayHint {\n+                range: [401; 402),\n+                kind: TypeHint,\n+                label: \"&CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [404; 405),\n+                kind: TypeHint,\n+                label: \"&u8\",\n+            },\n+            InlayHint {\n+                range: [549; 550),\n+                kind: TypeHint,\n+                label: \"&u32\",\n+            },\n+        ]\n         \"###\n         );\n     }\n@@ -478,28 +486,30 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n-    InlayHint {\n-        range: [311; 315),\n-        kind: TypeHint,\n-        label: \"Test\",\n-    },\n-    InlayHint {\n-        range: [358; 359),\n-        kind: TypeHint,\n-        label: \"CustomOption<u32>\",\n-    },\n-    InlayHint {\n-        range: [361; 362),\n-        kind: TypeHint,\n-        label: \"u8\",\n-    },\n-    InlayHint {\n-        range: [484; 485),\n-        kind: TypeHint,\n-        label: \"u32\",\n-    },\n-]\"#\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [311; 315),\n+                kind: TypeHint,\n+                label: \"Test\",\n+            },\n+            InlayHint {\n+                range: [358; 359),\n+                kind: TypeHint,\n+                label: \"CustomOption<u32>\",\n+            },\n+            InlayHint {\n+                range: [361; 362),\n+                kind: TypeHint,\n+                label: \"u8\",\n+            },\n+            InlayHint {\n+                range: [484; 485),\n+                kind: TypeHint,\n+                label: \"u32\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n }"}, {"sha": "366ac8048606025c2abccc84eed7775cb385fa33", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 68, "deletions": 60, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -97,24 +97,26 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot!(&runnables,\n-        @r#\"[\n-    Runnable {\n-        range: [1; 21),\n-        kind: Bin,\n-    },\n-    Runnable {\n-        range: [22; 46),\n-        kind: Test {\n-            name: \"test_foo\",\n-        },\n-    },\n-    Runnable {\n-        range: [47; 81),\n-        kind: Test {\n-            name: \"test_foo\",\n-        },\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            Runnable {\n+                range: [1; 21),\n+                kind: Bin,\n+            },\n+            Runnable {\n+                range: [22; 46),\n+                kind: Test {\n+                    name: \"test_foo\",\n+                },\n+            },\n+            Runnable {\n+                range: [47; 81),\n+                kind: Test {\n+                    name: \"test_foo\",\n+                },\n+            },\n+        ]\n+        \"###\n                 );\n     }\n \n@@ -132,20 +134,22 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot!(&runnables,\n-        @r#\"[\n-    Runnable {\n-        range: [1; 59),\n-        kind: TestMod {\n-            path: \"test_mod\",\n-        },\n-    },\n-    Runnable {\n-        range: [28; 57),\n-        kind: Test {\n-            name: \"test_foo1\",\n-        },\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            Runnable {\n+                range: [1; 59),\n+                kind: TestMod {\n+                    path: \"test_mod\",\n+                },\n+            },\n+            Runnable {\n+                range: [28; 57),\n+                kind: Test {\n+                    name: \"test_foo1\",\n+                },\n+            },\n+        ]\n+        \"###\n                 );\n     }\n \n@@ -165,20 +169,22 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot!(&runnables,\n-        @r#\"[\n-    Runnable {\n-        range: [23; 85),\n-        kind: TestMod {\n-            path: \"foo::test_mod\",\n-        },\n-    },\n-    Runnable {\n-        range: [46; 79),\n-        kind: Test {\n-            name: \"test_foo1\",\n-        },\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            Runnable {\n+                range: [23; 85),\n+                kind: TestMod {\n+                    path: \"foo::test_mod\",\n+                },\n+            },\n+            Runnable {\n+                range: [46; 79),\n+                kind: Test {\n+                    name: \"test_foo1\",\n+                },\n+            },\n+        ]\n+        \"###\n                 );\n     }\n \n@@ -200,20 +206,22 @@ mod tests {\n         );\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert_debug_snapshot!(&runnables,\n-        @r#\"[\n-    Runnable {\n-        range: [41; 115),\n-        kind: TestMod {\n-            path: \"foo::bar::test_mod\",\n-        },\n-    },\n-    Runnable {\n-        range: [68; 105),\n-        kind: Test {\n-            name: \"test_foo1\",\n-        },\n-    },\n-]\"#\n+        @r###\"\n+        [\n+            Runnable {\n+                range: [41; 115),\n+                kind: TestMod {\n+                    path: \"foo::bar::test_mod\",\n+                },\n+            },\n+            Runnable {\n+                range: [68; 105),\n+                kind: Test {\n+                    name: \"test_foo1\",\n+                },\n+            },\n+        ]\n+        \"###\n                 );\n     }\n "}, {"sha": "b02e45ee39d1b60b84c9d2f187b3d09c06b78889", "filename": "crates/ra_mbe/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_mbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_mbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2FCargo.toml?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -9,7 +9,7 @@ ra_syntax = { path = \"../ra_syntax\" }\n ra_parser = { path = \"../ra_parser\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n rustc-hash = \"1.0.0\"\n-smallvec = \"0.6.9\"\n+smallvec = \"1.0.0\"\n log = \"0.4.5\"\n \n [dev-dependencies]"}, {"sha": "751bcdeb8a0a64959aa450b22eaa2d64ead68f0a", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -1,19 +1,19 @@\n-[package]\r\n-edition = \"2018\"\r\n-name = \"ra_prof\"\r\n-version = \"0.1.0\"\r\n-authors = [\"rust-analyzer developers\"]\r\n-publish = false\r\n-\r\n-[dependencies]\r\n-once_cell = \"1.0.1\"\r\n-itertools = \"0.8.0\"\r\n-backtrace = \"0.3.28\"\r\n-\r\n-[target.'cfg(not(target_env = \"msvc\"))'.dependencies]\r\n-jemallocator = { version = \"0.3.2\", optional = true }\r\n-jemalloc-ctl = { version = \"0.3.2\", optional = true }\r\n-\r\n-[features]\r\n-jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]\r\n-cpu_profiler = []\r\n+[package]\n+edition = \"2018\"\n+name = \"ra_prof\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+publish = false\n+\n+[dependencies]\n+once_cell = \"1.0.1\"\n+itertools = \"0.8.0\"\n+backtrace = \"0.3.28\"\n+\n+[target.'cfg(not(target_env = \"msvc\"))'.dependencies]\n+jemallocator = { version = \"0.3.2\", optional = true }\n+jemalloc-ctl = { version = \"0.3.2\", optional = true }\n+\n+[features]\n+jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]\n+cpu_profiler = []"}, {"sha": "8da7578e2f2b9712a1f6e5b683d48900f7469750", "filename": "docs/user/assists.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb26df950699586b314731fb70786e0db8eaa049/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb26df950699586b314731fb70786e0db8eaa049/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=cb26df950699586b314731fb70786e0db8eaa049", "patch": "@@ -150,6 +150,27 @@ use std::collections::HashMap;\n fn process(map: HashMap<String, String>) {}\n ```\n \n+## `add_new`\n+\n+Adds a new inherent impl for a type.\n+\n+```rust\n+// BEFORE\n+struct Ctx<T: Clone> {\n+     data: T,\u2503\n+}\n+\n+// AFTER\n+struct Ctx<T: Clone> {\n+     data: T,\n+}\n+\n+impl<T: Clone> Ctx<T> {\n+    fn new(data: T) -> Self { Self { data } }\n+}\n+\n+```\n+\n ## `apply_demorgan`\n \n Apply [De Morgan's law](https://en.wikipedia.org/wiki/De_Morgan%27s_laws)."}]}