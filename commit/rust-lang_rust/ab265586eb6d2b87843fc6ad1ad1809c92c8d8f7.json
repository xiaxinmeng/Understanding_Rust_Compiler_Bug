{"sha": "ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMjY1NTg2ZWI2ZDJiODc4NDNmYzZhZDFhZDE4MDljOTJjOGQ4Zjc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-11-08T22:36:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-09T03:01:47Z"}, "message": "Re-add libuv as a submodule.", "tree": {"sha": "50b481d7781f4438b16e575dfa71d75e049df870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50b481d7781f4438b16e575dfa71d75e049df870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "html_url": "https://github.com/rust-lang/rust/commit/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c87b9708c89c95e26e6fc7e676422bc329d165b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c87b9708c89c95e26e6fc7e676422bc329d165b", "html_url": "https://github.com/rust-lang/rust/commit/1c87b9708c89c95e26e6fc7e676422bc329d165b"}], "stats": {"total": 6137, "additions": 4336, "deletions": 1801}, "files": [{"sha": "bd5c14b7f469c393e931be5a88b83e7f33aa8388", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -1,3 +1,6 @@\n [submodule \"src/llvm\"]\n \tpath = src/llvm\n \turl = git://github.com/brson/llvm.git\n+[submodule \"src/libuv\"]\n+\tpath = src/libuv\n+\turl = git://github.com/joyent/libuv"}, {"sha": "229daf85410ef746f0772a5df4b30f4b5a3de992", "filename": "Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -48,12 +48,12 @@\n \n include config.mk\n OUR_MKFILES := Makefile config.mk $(wildcard $(CFG_SRC_DIR)/mk/*.mk)\n-3RDPARTY_MKFILES := $(CFG_SRC_DIR)/src/rt/libuv/Makefile \\\n-                    $(wildcard $(CFG_SRC_DIR)/src/rt/libuv/*.mk)\n+3RDPARTY_MKFILES := $(CFG_SRC_DIR)/src/libuv/Makefile \\\n+                    $(wildcard $(CFG_SRC_DIR)/src/libuv/*.mk)\n GEN_MKFILES := $(wildcard $(CFG_SRC_DIR)/mk/libuv/*/*/*) \\\n-               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*) \\\n-               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*) \\\n-               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*)\n+               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/libuv/*) \\\n+               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/libuv/*) \\\n+               $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/libuv/*)\n \n MKFILES := $(OUR_MKFILES) $(3RDPARTY_MKFILES) $(GEN_MKFILES)\n "}, {"sha": "695d9f75dc4686066a76e2ef917418dca2386dbe", "filename": "mk/clean.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -28,9 +28,9 @@ clean-misc:\n \t$(Q)rm -f $(GENERATED)\n \t$(Q)rm -f rustllvm/$(CFG_RUSTLLVM) rustllvm/rustllvmbits.a\n \t$(Q)rm -f rt/$(CFG_RUNTIME)\n-\t$(Q)rm -f rt/libuv/uv.a\n-\t$(Q)rm -Rf $(wildcard rt/libuv/src/*/*)\n-\t$(Q)rm -f $(wildcard rt/libuv/src/*.o)\n+\t$(Q)rm -f libuv/uv.a\n+\t$(Q)rm -Rf $(wildcard libuv/src/*/*)\n+\t$(Q)rm -f $(wildcard libuv/src/*.o)\n \t$(Q)rm -f test/run_pass_stage2.rc test/run_pass_stage2_driver.rs\n \t$(Q)rm -Rf $(PKG_NAME)-*.tar.gz dist\n \t$(Q)rm -f $(foreach ext,o a d bc s exe,$(wildcard stage*/*.$(ext)))\n@@ -44,7 +44,7 @@ clean-misc:\n                  aux cp fn ky log pdf html pg toc tp vr cps, \\\n                  $(wildcard doc/*.$(ext)))\n \t$(Q)rm -Rf doc/version.texi\n-\t$(Q)rm -rf rt/libuv\n+\t$(Q)rm -rf libuv\n \n define CLEAN_STAGE_N\n \n@@ -87,4 +87,4 @@ endif\n endef\n \n $(foreach target, $(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_CLEAN_LLVM_TARGET,$(target))))\n\\ No newline at end of file\n+ $(eval $(call DEF_CLEAN_LLVM_TARGET,$(target))))"}, {"sha": "230d325c843f3f375248b4154ec6ebcd49afd522", "filename": "mk/dist.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -20,12 +20,12 @@ PKG_3RDPARTY := rt/valgrind.h rt/memcheck.h \\\n                 rt/bigint/bigint_ext.cpp rt/bigint/low_primes.h\n \n PKG_UV := \\\n-                $(wildcard $(S)src/rt/libuv/*) \\\n-                $(wildcard $(S)src/rt/libuv/include/*) \\\n-                $(wildcard $(S)src/rt/libuv/include/*/*) \\\n-                $(wildcard $(S)src/rt/libuv/src/*) \\\n-                $(wildcard $(S)src/rt/libuv/src/*/*) \\\n-                $(wildcard $(S)src/rt/libuv/src/*/*/*)\n+                $(wildcard $(S)src/libuv/*) \\\n+                $(wildcard $(S)src/libuv/include/*) \\\n+                $(wildcard $(S)src/libuv/include/*/*) \\\n+                $(wildcard $(S)src/libuv/src/*) \\\n+                $(wildcard $(S)src/libuv/src/*/*) \\\n+                $(wildcard $(S)src/libuv/src/*/*/*)\n \n PKG_PP_EXAMPLES = $(wildcard $(S)src/test/pretty/*.pp)\n "}, {"sha": "22b574234f99911dcadce533591cb56443158641", "filename": "mk/libuv/ia32/mac/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -329,23 +329,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "6aca32e6e327c2dd036a7e2855ada04ae340b32c", "filename": "mk/libuv/ia32/mac/Makefile-e", "status": "added", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,375 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crs\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crs\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_objc = CXX($(TOOLSET)) $@\n+cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n+cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# Commands for precompiled header files.\n+quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n+cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n+cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n+cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n+cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# gyp-mac-tool is written next to the root Makefile by gyp.\n+# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n+# already.\n+quiet_cmd_mac_tool = MACTOOL $(4) $<\n+cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n+\n+quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n+cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = LIBTOOL-STATIC $@\n+cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n+\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): Find out and document the difference between shared_library and\n+# loadable_module on mac.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n+# -bundle -single_module here (for osmesa.so).\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=mac\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "7eb894b23ef66b97de39288e0fa4d5794b5e2a97", "filename": "mk/libuv/ia32/mac/gyp-mac-tool", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fgyp-mac-tool?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -74,14 +74,12 @@ class MacTool(object):\n     if not plist:\n       return\n \n-    # Only create PkgInfo for executable types.\n-    package_type = plist['CFBundlePackageType']\n-    if package_type != 'APPL':\n-      return\n-\n     # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If that is missing, four\n+    # and bundle signature, each four characters. If either is missing, four\n     # '?' characters are used instead.\n+    package_type = plist['CFBundlePackageType']\n+    if len(package_type) != 4:\n+      package_type = '?' * 4\n     signature_code = plist['CFBundleSignature']\n     if len(signature_code) != 4:\n       signature_code = '?' * 4"}, {"sha": "64d150f24fc1344ac0cfd3bca8ff2647279f749f", "filename": "mk/libuv/ia32/mac/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -26,23 +26,23 @@ CFLAGS_OBJC_Default :=\n # Flags passed to only ObjC++ files.\n CFLAGS_OBJCC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)", "previous_filename": "mk/libuv/ia32/mac/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "5a5730b0f65845c7386d0f6c1565aa70b7bf4dfd", "filename": "mk/libuv/ia32/mac/src/libuv/run-tests.target.mk", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,131 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "cef4568a6d0ba07e113ffc4bf6c6c81055759da9", "filename": "mk/libuv/ia32/mac/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/ia32/mac/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "28f911f4dc70f8d331cc4f1e60024ddf57ee915e", "filename": "mk/libuv/ia32/mac/src/libuv/uv.target.mk", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,145 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -lm\n+\n+$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/libuv.a: LIBS := $(LIBS)\n+$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n+$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(builddir)/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(builddir)/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "6c607bb378687a81db548c36ec798e36c92367e0", "filename": "mk/libuv/ia32/mac/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,131 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch i386\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "e1ee2faf422e85868d6d8a9f267858b2d2fec4db", "filename": "mk/libuv/ia32/mac/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/mac/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "5fe962a4c1c51c4869b1b223c0b38859665c92fa", "filename": "mk/libuv/ia32/mac/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,145 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch i386\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_darwin\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/darwin.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n-\t-L$(builddir)\n-\n-LIBS := -lm\n-\n-$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/libuv.a: LIBS := $(LIBS)\n-$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n-$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(builddir)/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(builddir)/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "66a9e7d2058215c3eef4ee7178c7fbbed87dd9a2", "filename": "mk/libuv/ia32/unix/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -307,23 +307,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "ffbb106422138b1974a265eda4ee6a62030cb5d8", "filename": "mk/libuv/ia32/unix/Makefile-e", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=linux\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "b5680d2c557c7ffc7ea924bb22fc0ea05d30fba4", "filename": "mk/libuv/ia32/unix/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -16,29 +16,29 @@ CFLAGS_C_Default :=\n # Flags passed to only C++ files.\n CFLAGS_CC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)\n \n # Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n \n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n@@ -67,9 +67,9 @@ LIBS := -lrt\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n $(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n \t$(call do_cmd,link)\n \n all_deps += $(builddir)/run-benchmarks", "previous_filename": "mk/libuv/ia32/unix/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "34bc8551b44da5d28326438c2f3e677563f6e3a0", "filename": "mk/libuv/ia32/unix/src/libuv/run-tests.target.mk", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,117 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lrt\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "95dc4e61f9b121c73ee195aa694a127569433eca", "filename": "mk/libuv/ia32/unix/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/ia32/unix/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "65c2cf17b839d0747c4347fdce19b8fc3b5eb4c5", "filename": "mk/libuv/ia32/unix/src/libuv/uv.target.mk", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,137 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_linux\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lm\n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "4fc85cca20ce6cdf7df3a64d36b979149cd71e20", "filename": "mk/libuv/ia32/unix/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,117 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := -lrt\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "6b2f5eab0d6a3d01637624464276d9ea28028e74", "filename": "mk/libuv/ia32/unix/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/unix/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "fa9767329bd0599086f4c694f5c799573f434295", "filename": "mk/libuv/ia32/unix/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,137 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_linux\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/linux.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := -lm\n-\n-$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/rt/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/rt/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "d24668d336d69fe039c13c7e2004069f07b1d516", "filename": "mk/libuv/ia32/win/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -307,23 +307,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "4c05b46dcbfea12f962a5ecaf09c44ec060c3ba9", "filename": "mk/libuv/ia32/win/Makefile-e", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/ia32/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=ia32\" \"-DOS=win\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "68dc04f210593f7d201169aa0c53cda362827df8", "filename": "mk/libuv/ia32/win/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -13,29 +13,29 @@ CFLAGS_C_Default :=\n # Flags passed to only C++ files.\n CFLAGS_CC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)\n \n # Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n \n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n@@ -65,9 +65,9 @@ LIBS := ws2_32.lib \\\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n $(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n \t$(call do_cmd,link)\n \n all_deps += $(builddir)/run-benchmarks", "previous_filename": "mk/libuv/x86_64/win/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "9b09db73373df4434cfb0e2454f7ec7ce3fbaf6d", "filename": "mk/libuv/ia32/win/src/libuv/run-tests.target.mk", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,115 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := \n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := ws2_32.lib \\\n+\t-lws2_32.lib\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "65df03050e5ce4c49deeea5be32fbeb52521410f", "filename": "mk/libuv/ia32/win/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/ia32/win/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "86ed7071555c7b121cef6ef21faeb3305b0c02f3", "filename": "mk/libuv/ia32/win/src/libuv/uv.target.mk", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,137 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0502' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_win32\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getenv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_platform.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/threads.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/winapi.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/winsock.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := \n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "85403f2be5065e1a96f3fa5212c857aec38d6f99", "filename": "mk/libuv/ia32/win/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,115 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := \n-\n-# Flags passed to all source files.\n-CFLAGS_Default := \n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "e1c7ed09137bf91d52d64126909be67f21f1e76d", "filename": "mk/libuv/ia32/win/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/ia32/win/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "1291a82204322e17ba0bb34378e6149408d5e506", "filename": "mk/libuv/ia32/win/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fia32%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,137 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0502' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := \n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_win32\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getenv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_platform.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/handle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/loop-watcher.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/req.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threads.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/util.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winapi.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winsock.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := \n-\n-$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/rt/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/rt/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "781fa41bea9249798c6a57e34117f1b4655b9460", "filename": "mk/libuv/x86_64/mac/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -329,23 +329,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "44d99bab1d0714cd73f8f21bab6987e6701398fd", "filename": "mk/libuv/x86_64/mac/Makefile-e", "status": "added", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,375 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= ./gyp-mac-tool flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crs\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crs\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_objc = CXX($(TOOLSET)) $@\n+cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+quiet_cmd_objcxx = CXX($(TOOLSET)) $@\n+cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# Commands for precompiled header files.\n+quiet_cmd_pch_c = CXX($(TOOLSET)) $@\n+cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\n+cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CCFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+quiet_cmd_pch_m = CXX($(TOOLSET)) $@\n+cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\n+quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\n+cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n+\n+# gyp-mac-tool is written next to the root Makefile by gyp.\n+# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n+# already.\n+quiet_cmd_mac_tool = MACTOOL $(4) $<\n+cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\n+\n+quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\n+cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = LIBTOOL-STATIC $@\n+cmd_alink = rm -f $@ && libtool -static -o $@ $(filter %.o,$^)\n+\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): Find out and document the difference between shared_library and\n+# loadable_module on mac.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\n+\n+# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n+# -bundle -single_module here (for osmesa.so).\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 2,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.m FORCE_DO_CMD\n+\t@$(call do_cmd,objc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.mm FORCE_DO_CMD\n+\t@$(call do_cmd,objcxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/mac\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=mac\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "7eb894b23ef66b97de39288e0fa4d5794b5e2a97", "filename": "mk/libuv/x86_64/mac/gyp-mac-tool", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fgyp-mac-tool?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -74,14 +74,12 @@ class MacTool(object):\n     if not plist:\n       return\n \n-    # Only create PkgInfo for executable types.\n-    package_type = plist['CFBundlePackageType']\n-    if package_type != 'APPL':\n-      return\n-\n     # The format of PkgInfo is eight characters, representing the bundle type\n-    # and bundle signature, each four characters. If that is missing, four\n+    # and bundle signature, each four characters. If either is missing, four\n     # '?' characters are used instead.\n+    package_type = plist['CFBundlePackageType']\n+    if len(package_type) != 4:\n+      package_type = '?' * 4\n     signature_code = plist['CFBundleSignature']\n     if len(signature_code) != 4:\n       signature_code = '?' * 4"}, {"sha": "1dfb1515524343b9feeb9fb05d91598ad58b4fe1", "filename": "mk/libuv/x86_64/mac/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -26,23 +26,23 @@ CFLAGS_OBJC_Default :=\n # Flags passed to only ObjC++ files.\n CFLAGS_OBJCC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)", "previous_filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "64d150f24fc1344ac0cfd3bca8ff2647279f749f", "filename": "mk/libuv/x86_64/mac/src/libuv/run-benchmarks.target.mk-e", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,97 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "498e3b562e7a4d32b0e92e2feee3eb9ef176141f", "filename": "mk/libuv/x86_64/mac/src/libuv/run-tests.target.mk", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,131 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch x86_64\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch x86_64 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "5a5730b0f65845c7386d0f6c1565aa70b7bf4dfd", "filename": "mk/libuv/x86_64/mac/src/libuv/run-tests.target.mk-e", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Frun-tests.target.mk-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,131 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(builddir)/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -framework Carbon \\\n+\t-framework CoreServices\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "48cdc76e175246be67d9d6ec786d0cb779cafb3d", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/mac/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "8761d16342accf5c0c1b1f582abb23cefaaa40ef", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.target.mk", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,145 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch x86_64\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch x86_64 \\\n+\t-L$(builddir)\n+\n+LIBS := -lm\n+\n+$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/libuv.a: LIBS := $(LIBS)\n+$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n+$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(builddir)/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(builddir)/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "28f911f4dc70f8d331cc4f1e60024ddf57ee915e", "filename": "mk/libuv/x86_64/mac/src/libuv/uv.target.mk-e", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Flibuv%2Fuv.target.mk-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,145 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -fasm-blocks \\\n+\t-mpascal-strings \\\n+\t-Os \\\n+\t-gdwarf-2 \\\n+\t-arch i386\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+# Flags passed to only ObjC files.\n+CFLAGS_OBJC_Default := \n+\n+# Flags passed to only ObjC++ files.\n+CFLAGS_OBJCC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_darwin\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/darwin.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/kqueue.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n+$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := -arch i386 \\\n+\t-L$(builddir)\n+\n+LIBS := -lm\n+\n+$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/libuv.a: LIBS := $(LIBS)\n+$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n+$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(builddir)/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(builddir)/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "ab3921dd98b3aa2e89952a93bcf2c99ee43ce88d", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,131 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch x86_64\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(builddir)/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch x86_64 \\\n-\t-L$(builddir)\n-\n-LIBS := -framework Carbon \\\n-\t-framework CoreServices\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(builddir)/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(builddir)/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "c146ac9b8ce76d3be255eafa41ece6a55ae3bc05", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/mac/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "a751e1d37e8062e5c69c1fed9b0d6400f1662d3a", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,145 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_darwin.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_darwin.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -fasm-blocks \\\n-\t-mpascal-strings \\\n-\t-Os \\\n-\t-gdwarf-2 \\\n-\t-arch x86_64\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-# Flags passed to only ObjC files.\n-CFLAGS_OBJC_Default := \n-\n-# Flags passed to only ObjC++ files.\n-CFLAGS_OBJCC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_darwin\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/darwin.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/kqueue.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(CFLAGS_OBJC_$(BUILDTYPE))\n-$(OBJS): GYP_OBJCXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(CFLAGS_OBJCC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := -arch x86_64 \\\n-\t-L$(builddir)\n-\n-LIBS := -lm\n-\n-$(builddir)/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/libuv.a: LIBS := $(LIBS)\n-$(builddir)/libuv.a: TOOLSET := $(TOOLSET)\n-$(builddir)/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(builddir)/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(builddir)/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "e7b86e6cfc6673f0497afefcedb0b9c9c8d1652f", "filename": "mk/libuv/x86_64/unix/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -307,23 +307,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "8197dff75755033cb504f687246742337da2b6f9", "filename": "mk/libuv/x86_64/unix/Makefile-e", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/unix\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=linux\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "b5680d2c557c7ffc7ea924bb22fc0ea05d30fba4", "filename": "mk/libuv/x86_64/unix/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -16,29 +16,29 @@ CFLAGS_C_Default :=\n # Flags passed to only C++ files.\n CFLAGS_CC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)\n \n # Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n \n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n@@ -67,9 +67,9 @@ LIBS := -lrt\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n $(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n \t$(call do_cmd,link)\n \n all_deps += $(builddir)/run-benchmarks", "previous_filename": "mk/libuv/x86_64/unix/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "34bc8551b44da5d28326438c2f3e677563f6e3a0", "filename": "mk/libuv/x86_64/unix/src/libuv/run-tests.target.mk", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,117 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lrt\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "3842bae54b951d4e4d977d3f6f984e92be64f166", "filename": "mk/libuv/x86_64/unix/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/unix/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "65c2cf17b839d0747c4347fdce19b8fc3b5eb4c5", "filename": "mk/libuv/x86_64/unix/src/libuv/uv.target.mk", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,137 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := -pthread \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_linux\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := -lm\n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "4fc85cca20ce6cdf7df3a64d36b979149cd71e20", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,117 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-unix.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := -lrt\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "b635300e7f58bc751f2d962d3644e3783ae5ea13", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/unix/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "fa9767329bd0599086f4c694f5c799573f434295", "filename": "mk/libuv/x86_64/unix/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Funix%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,137 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-D_LARGEFILE_SOURCE' \\\n-\t'-D_FILE_OFFSET_BITS=64' \\\n-\t'-D_GNU_SOURCE' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-DHAVE_CONFIG_H' \\\n-\t'-DEV_CONFIG_H=\"config_linux.h\"' \\\n-\t'-DEIO_CONFIG_H=\"config_linux.h\"'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := -pthread \\\n-\t-g \\\n-\t--std=gnu89 \\\n-\t-pedantic \\\n-\t-Wall \\\n-\t-Wextra \\\n-\t-Wno-unused-parameter\n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/unix/ev \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_linux\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/uv-eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/eio/eio.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/ev/ev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/unix/linux.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := -lm\n-\n-$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/rt/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/rt/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "9597ce768ca358c12c3e2c102ed1e8e35dba7a5e", "filename": "mk/libuv/x86_64/win/Makefile", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -307,23 +307,23 @@ $(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n \n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-benchmarks.target.mk)))),)\n-  include src/rt/libuv/run-benchmarks.target.mk\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/run-tests.target.mk)))),)\n-  include src/rt/libuv/run-tests.target.mk\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n endif\n ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n     $(findstring $(join ^,$(prefix)),\\\n-                 $(join ^,src/rt/libuv/uv.target.mk)))),)\n-  include src/rt/libuv/uv.target.mk\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n endif\n \n quiet_cmd_regen_makefile = ACTION Regenerating $@\n-cmd_regen_makefile = ./src/rt/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/rt/libuv/uv.gyp\n-#Makefile: $(srcdir)/src/rt/libuv/uv.gyp\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n #\t$(call do_cmd,regen_makefile)\n \n # \"all\" is a concatenation of the \"all\" targets from all the included"}, {"sha": "d7c20772b7a10f14c2813caa0d178e1165df929f", "filename": "mk/libuv/x86_64/win/Makefile-e", "status": "added", "additions": 353, "deletions": 0, "changes": 353, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2FMakefile-e?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,353 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../..\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Default\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS) \n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crsT\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare \"all\" target first so it is the default, even though we don't have the\n+# deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+quiet_cmd_regen_makefile = ACTION Regenerating $@\n+cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" \"--depth=.\" \"--generator-output=mk/libuv/x86_64/win\" \"-Dlibrary=static_library\" \"-Dtarget_arch=x86_64\" \"-DOS=win\" src/libuv/uv.gyp\n+Makefile: $(srcdir)/src/libuv/uv.gyp\n+\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "68dc04f210593f7d201169aa0c53cda362827df8", "filename": "mk/libuv/x86_64/win/src/libuv/run-benchmarks.target.mk", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -13,29 +13,29 @@ CFLAGS_C_Default :=\n # Flags passed to only C++ files.\n CFLAGS_CC_Default := \n \n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-ping-pongs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pound.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-pump.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-sizes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-tcp-write-batch.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/benchmark-udp-packet-storm.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/dns-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-benchmarks.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n \n # Add to the list of files we specially track dependencies for.\n all_deps += $(OBJS)\n \n # Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n \n # CFLAGS et al overrides must be target-local.\n # See \"Target-specific Variable Values\" in the GNU Make manual.\n@@ -65,9 +65,9 @@ LIBS := ws2_32.lib \\\n \n $(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n $(builddir)/run-benchmarks: LIBS := $(LIBS)\n-$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n $(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n-$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n \t$(call do_cmd,link)\n \n all_deps += $(builddir)/run-benchmarks", "previous_filename": "mk/libuv/ia32/win/src/rt/libuv/run-benchmarks.target.mk"}, {"sha": "9b09db73373df4434cfb0e2454f7ec7ce3fbaf6d", "filename": "mk/libuv/x86_64/win/src/libuv/run-tests.target.mk", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,115 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Default := \n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-win.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := ws2_32.lib \\\n+\t-lws2_32.lib\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "5c4f359e86ad2726b5ddb775242b5385f1ef013f", "filename": "mk/libuv/x86_64/win/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.Makefile?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/x86_64/win/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "86ed7071555c7b121cef6ef21faeb3305b0c02f3", "filename": "mk/libuv/x86_64/win/src/libuv/uv.target.mk", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Flibuv%2Fuv.target.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1,137 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Default := '-DHAVE_CONFIG_H' \\\n+\t'-D_WIN32_WINNT=0x0502' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-D_GNU_SOURCE'\n+\n+# Flags passed to all source files.\n+CFLAGS_Default := \n+\n+# Flags passed to only C files.\n+CFLAGS_C_Default := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Default := \n+\n+INCS_Default := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_win32\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getenv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_platform.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/handle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/loop-watcher.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/req.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/threads.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/util.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/winapi.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/win/winsock.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+LDFLAGS_Default := \n+\n+LIBS := \n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "85403f2be5065e1a96f3fa5212c857aec38d6f99", "filename": "mk/libuv/x86_64/win/src/rt/libuv/run-tests.target.mk", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,115 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := run-tests\n-DEFS_Default := \n-\n-# Flags passed to all source files.\n-CFLAGS_Default := \n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/test/blackhole-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/echo-server.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/run-tests.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-loadavg.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-callback-stack.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-connection-fail.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-delayed-accept.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fail-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-currentexe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-get-memory.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-getsockname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-hrtime.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-idle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ipc.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-loop-handles.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-multiple-listen.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pass-always.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ping-pong.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-pipe-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-ref.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-shutdown-eof.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-spawn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-stdio-over-pipes.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-bind6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-close.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-flags.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-connect6-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-write-to-half-open-connection.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tcp-writealot.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer-again.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-dgram-too-big.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-ipv6.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-send-and-recv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/test-udp-multicast-join.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/test/runner-win.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# Make sure our dependencies are built before any of us.\n-$(OBJS): | $(obj).target/src/rt/libuv/libuv.a\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := ws2_32.lib \\\n-\t-lws2_32.lib\n-\n-$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(builddir)/run-tests: LIBS := $(LIBS)\n-$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/rt/libuv/libuv.a\n-$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n-$(builddir)/run-tests: $(OBJS) $(obj).target/src/rt/libuv/libuv.a FORCE_DO_CMD\n-\t$(call do_cmd,link)\n-\n-all_deps += $(builddir)/run-tests\n-# Add target alias\n-.PHONY: run-tests\n-run-tests: $(builddir)/run-tests\n-\n-# Add executable to \"all\" target.\n-.PHONY: all\n-all: $(builddir)/run-tests\n-"}, {"sha": "8bfd8a0ebffcc56449526c3e32a1897221f8667e", "filename": "mk/libuv/x86_64/win/src/rt/libuv/uv.Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.Makefile?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,6 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-export builddir_name ?= mk/libuv/x86_64/win/./src/rt/libuv/out\n-.PHONY: all\n-all:\n-\t$(MAKE) -C ../../.. uv run-tests run-benchmarks"}, {"sha": "1291a82204322e17ba0bb34378e6149408d5e506", "filename": "mk/libuv/x86_64/win/src/rt/libuv/uv.target.mk", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c87b9708c89c95e26e6fc7e676422bc329d165b/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fwin%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=1c87b9708c89c95e26e6fc7e676422bc329d165b", "patch": "@@ -1,137 +0,0 @@\n-# This file is generated by gyp; do not edit.\n-\n-TOOLSET := target\n-TARGET := uv\n-DEFS_Default := '-DHAVE_CONFIG_H' \\\n-\t'-D_WIN32_WINNT=0x0502' \\\n-\t'-DEIO_STACKSIZE=262144' \\\n-\t'-D_GNU_SOURCE'\n-\n-# Flags passed to all source files.\n-CFLAGS_Default := \n-\n-# Flags passed to only C files.\n-CFLAGS_C_Default := \n-\n-# Flags passed to only C++ files.\n-CFLAGS_CC_Default := \n-\n-INCS_Default := -I$(srcdir)/src/rt/libuv/include \\\n-\t-I$(srcdir)/src/rt/libuv/include/uv-private \\\n-\t-I$(srcdir)/src/rt/libuv/src \\\n-\t-I$(srcdir)/src/rt/libuv/src/ares/config_win32\n-\n-OBJS := $(obj).target/$(TARGET)/src/rt/libuv/src/uv-common.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_cancel.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__close_sockets.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_data.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_destroy.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_name.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_expand_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_fds.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_free_string.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyaddr.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_gethostbyname.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__get_hostent.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getnameinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getopt.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getsock.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_library_init.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_llist.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_mkquery.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_nowarn.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_options.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_aaaa_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_a_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_mx_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ns_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_ptr_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_srv_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_parse_txt_reply.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_query.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__read_line.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_search.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_send.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strcasecmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strdup.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_strerror.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_timeout.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares__timeval.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_version.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_writev.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/bitncmp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_net_pton.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/inet_ntop.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/windows_port.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_getenv.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/ares/ares_platform.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/async.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/cares.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/core.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/dl.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/error.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/fs-event.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/getaddrinfo.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/handle.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/loop-watcher.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/pipe.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/process.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/req.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/stream.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tcp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/tty.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threadpool.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/threads.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/timer.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/udp.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/util.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winapi.o \\\n-\t$(obj).target/$(TARGET)/src/rt/libuv/src/win/winsock.o\n-\n-# Add to the list of files we specially track dependencies for.\n-all_deps += $(OBJS)\n-\n-# CFLAGS et al overrides must be target-local.\n-# See \"Target-specific Variable Values\" in the GNU Make manual.\n-$(OBJS): TOOLSET := $(TOOLSET)\n-$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n-$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n-\n-# Suffix rules, putting all outputs into $(obj).\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# Try building from generated source, too.\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n-\t@$(call do_cmd,cc,1)\n-\n-# End of this set of suffix rules\n-### Rules for final target.\n-LDFLAGS_Default := \n-\n-LIBS := \n-\n-$(obj).target/src/rt/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n-$(obj).target/src/rt/libuv/libuv.a: LIBS := $(LIBS)\n-$(obj).target/src/rt/libuv/libuv.a: TOOLSET := $(TOOLSET)\n-$(obj).target/src/rt/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n-\t$(call do_cmd,alink)\n-\n-all_deps += $(obj).target/src/rt/libuv/libuv.a\n-# Add target alias\n-.PHONY: uv\n-uv: $(obj).target/src/rt/libuv/libuv.a\n-\n-# Add target alias to \"all\" target.\n-.PHONY: all\n-all: uv\n-"}, {"sha": "57f6812144d830e50dced8c7977797cec689e0ee", "filename": "mk/rt.mk", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -116,19 +116,19 @@ endif\n \n ifeq ($$(CFG_WINDOWSY), 1)\n   LIBUV_OSTYPE_$(1) := win\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/rt/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE_$(1) := mac\n   LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/libuv.a\n else\n   LIBUV_OSTYPE_$(1) := unix\n-  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/rt/libuv/libuv.a\n+  LIBUV_LIB_$(1) := rt/$(1)/libuv/Default/obj.target/src/libuv/libuv.a\n endif\n \n RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n RUNTIME_INCS_$(1) := -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n                 -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n-\t\t\t\t-I $$(S)src/rt/libuv/include\n+\t\t\t\t-I $$(S)src/libuv/include\n RUNTIME_OBJS_$(1) := $$(RUNTIME_CS_$(1):rt/%.cpp=rt/$(1)/%.o) \\\n                      $$(RUNTIME_S_$(1):rt/%.S=rt/$(1)/%.o)\n RUNTIME_LIBS_$(1) := $$(LIBUV_LIB_$(1))\n@@ -154,10 +154,10 @@ rt/$(1)/$(CFG_RUNTIME): $$(RUNTIME_OBJS_$(1)) $$(MKFILES) \\\n # of CC on the mingw I'm using, so we are explicitly using gcc. Also, we\n # have to list environment variables first on windows... mysterious\n $$(LIBUV_LIB_$(1)): $$(wildcard \\\n-                     $$(S)src/rt/libuv/* \\\n-                     $$(S)src/rt/libuv/*/* \\\n-                     $$(S)src/rt/libuv/*/*/* \\\n-                     $$(S)src/rt/libuv/*/*/*/*)\n+                     $$(S)src/libuv/* \\\n+                     $$(S)src/libuv/*/* \\\n+                     $$(S)src/libuv/*/*/* \\\n+                     $$(S)src/libuv/*/*/*/*)\n \t$$(Q)$$(MAKE) -C $$(S)mk/libuv/$$(LIBUV_ARCH_$(1))/$$(LIBUV_OSTYPE_$(1)) \\\n \t\tCFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n         LDFLAGS=\"$$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\"}, {"sha": "3e91401d189911339e79aef82bc68f11da85bacd", "filename": "src/etc/gyp-uv", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/src%2Fetc%2Fgyp-uv", "raw_url": "https://github.com/rust-lang/rust/raw/ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7/src%2Fetc%2Fgyp-uv", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgyp-uv?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -23,17 +23,17 @@ for ARCH in ia32 x86_64\n do\n     args=\"--depth . -Dlibrary=static_library -Dtarget_arch=$ARCH\"\n     \n-    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n         -f make-mac \\\n         --generator-output mk/libuv/$ARCH/mac \\\n         -DOS=mac\n \n-    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n         -f make-linux \\\n         --generator-output mk/libuv/$ARCH/unix \\\n         -DOS=linux\n \n-    ./src/rt/libuv/build/gyp/gyp src/rt/libuv/uv.gyp $args \\\n+    ./src/libuv/build/gyp/gyp src/libuv/uv.gyp $args \\\n         -f make-linux \\\n         --generator-output mk/libuv/$ARCH/win \\\n         -DOS=win\n@@ -53,4 +53,4 @@ done\n # On Mac, GYP hardcodes a -arch i386 into the output. Fix that.\n sed -i \\\n     -e 's/-arch i386/-arch x86_64/' \\\n-    mk/libuv/x86_64/mac/src/rt/libuv/*.mk\n+    mk/libuv/x86_64/mac/src/libuv/*.mk"}, {"sha": "f1859eb841be2fe48512bc10e64556383f408b01", "filename": "src/libuv", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=ab265586eb6d2b87843fc6ad1ad1809c92c8d8f7", "patch": "@@ -0,0 +1 @@\n+Subproject commit f1859eb841be2fe48512bc10e64556383f408b01"}]}