{"sha": "6e7ba26bbd432b5d64a5c1200645786e286e5966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlN2JhMjZiYmQ0MzJiNWQ2NGE1YzEyMDA2NDU3ODZlMjg2ZTU5NjY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-21T05:55:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-22T12:47:05Z"}, "message": "Use macros for option tests.", "tree": {"sha": "32c71b69809d3bcf1c06e18d5bbbff363b9b7ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32c71b69809d3bcf1c06e18d5bbbff363b9b7ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7ba26bbd432b5d64a5c1200645786e286e5966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7ba26bbd432b5d64a5c1200645786e286e5966", "html_url": "https://github.com/rust-lang/rust/commit/6e7ba26bbd432b5d64a5c1200645786e286e5966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7ba26bbd432b5d64a5c1200645786e286e5966/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ea491744b2f957b10bc604d0de4d0dc2df70b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea491744b2f957b10bc604d0de4d0dc2df70b2", "html_url": "https://github.com/rust-lang/rust/commit/14ea491744b2f957b10bc604d0de4d0dc2df70b2"}], "stats": {"total": 697, "additions": 177, "deletions": 520}, "files": [{"sha": "211850486c02477eec90715ae0186f0477edf146", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 177, "deletions": 520, "changes": 697, "blob_url": "https://github.com/rust-lang/rust/blob/6e7ba26bbd432b5d64a5c1200645786e286e5966/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e7ba26bbd432b5d64a5c1200645786e286e5966/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=6e7ba26bbd432b5d64a5c1200645786e286e5966", "patch": "@@ -375,545 +375,202 @@ fn test_codegen_options_tracking_hash() {\n     let reference = Options::default();\n     let mut opts = Options::default();\n \n+    macro_rules! untracked {\n+        ($name: ident, $non_default_value: expr) => {\n+            opts.cg.$name = $non_default_value;\n+            assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+        };\n+    }\n+\n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n     // This list is in alphabetical order.\n-\n-    opts.cg.ar = String::from(\"abc\");\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.codegen_units = Some(42);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.default_linker_libraries = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.extra_filename = String::from(\"extra-filename\");\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.incremental = Some(String::from(\"abc\"));\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n+    untracked!(ar, String::from(\"abc\"));\n+    untracked!(codegen_units, Some(42));\n+    untracked!(default_linker_libraries, true);\n+    untracked!(extra_filename, String::from(\"extra-filename\"));\n+    untracked!(incremental, Some(String::from(\"abc\")));\n     // `link_arg` is omitted because it just forwards to `link_args`.\n-\n-    opts.cg.link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.link_dead_code = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.linker = Some(PathBuf::from(\"linker\"));\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.linker_flavor = Some(LinkerFlavor::Gcc);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.no_stack_check = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.remark = Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.rpath = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.cg.save_temps = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+    untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n+    untracked!(link_dead_code, true);\n+    untracked!(linker, Some(PathBuf::from(\"linker\")));\n+    untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n+    untracked!(no_stack_check, true);\n+    untracked!(remark, Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]));\n+    untracked!(rpath, true);\n+    untracked!(save_temps, true);\n+\n+    macro_rules! tracked {\n+        ($name: ident, $non_default_value: expr) => {\n+            opts = reference.clone();\n+            opts.cg.$name = $non_default_value;\n+            assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+        };\n+    }\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n-\n-    opts = reference.clone();\n-    opts.cg.bitcode_in_rlib = false;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.code_model = Some(String::from(\"code model\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.debug_assertions = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.debuginfo = 0xdeadbeef;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.force_frame_pointers = Some(false);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.inline_threshold = Some(0xf007ba11);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.llvm_args = vec![String::from(\"1\"), String::from(\"2\")];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.lto = LtoCli::Fat;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.no_prepopulate_passes = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.no_redzone = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.no_vectorize_loops = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.no_vectorize_slp = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.opt_level = \"3\".to_string();\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.overflow_checks = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.panic = Some(PanicStrategy::Abort);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.passes = vec![String::from(\"1\"), String::from(\"2\")];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.prefer_dynamic = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.profile_generate = SwitchWithOptPath::Enabled(None);\n-    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.profile_use = Some(PathBuf::from(\"abc\"));\n-    assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.relocation_model = Some(String::from(\"relocation model\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.soft_float = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.target_cpu = Some(String::from(\"abc\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.cg.target_feature = String::from(\"all the features, all of them\");\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+    tracked!(bitcode_in_rlib, false);\n+    tracked!(code_model, Some(String::from(\"code model\")));\n+    tracked!(debug_assertions, Some(true));\n+    tracked!(debuginfo, 0xdeadbeef);\n+    tracked!(force_frame_pointers, Some(false));\n+    tracked!(inline_threshold, Some(0xf007ba11));\n+    tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n+    tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);\n+    tracked!(lto, LtoCli::Fat);\n+    tracked!(metadata, vec![String::from(\"A\"), String::from(\"B\")]);\n+    tracked!(no_prepopulate_passes, true);\n+    tracked!(no_redzone, Some(true));\n+    tracked!(no_vectorize_loops, true);\n+    tracked!(no_vectorize_slp, true);\n+    tracked!(opt_level, \"3\".to_string());\n+    tracked!(overflow_checks, Some(true));\n+    tracked!(panic, Some(PanicStrategy::Abort));\n+    tracked!(passes, vec![String::from(\"1\"), String::from(\"2\")]);\n+    tracked!(prefer_dynamic, true);\n+    tracked!(profile_generate, SwitchWithOptPath::Enabled(None));\n+    tracked!(profile_use, Some(PathBuf::from(\"abc\")));\n+    tracked!(relocation_model, Some(String::from(\"relocation model\")));\n+    tracked!(soft_float, true);\n+    tracked!(target_cpu, Some(String::from(\"abc\")));\n+    tracked!(target_feature, String::from(\"all the features, all of them\"));\n }\n \n #[test]\n fn test_debugging_options_tracking_hash() {\n     let reference = Options::default();\n     let mut opts = Options::default();\n \n+    macro_rules! untracked {\n+        ($name: ident, $non_default_value: expr) => {\n+            opts.debugging_opts.$name = $non_default_value;\n+            assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+        };\n+    }\n+\n     // Make sure that changing an [UNTRACKED] option leaves the hash unchanged.\n     // This list is in alphabetical order.\n-\n-    opts.debugging_opts.ast_json = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.ast_json_noexpand = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.borrowck = String::from(\"other\");\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.borrowck_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.control_flow_guard = CFGuard::Checks;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.deduplicate_diagnostics = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dep_tasks = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dont_buffer_diagnostics = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_dep_graph = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_mir = Some(String::from(\"abc\"));\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_mir_dataflow = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_mir_dir = String::from(\"abc\");\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_mir_exclude_pass_number = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.dump_mir_graphviz = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.emit_stack_sizes = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.hir_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.identify_regions = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.incremental_ignore_spans = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.incremental_info = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.incremental_verify_ich = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.input_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.keep_hygiene_data = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.link_native_libraries = false;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.llvm_time_trace = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.ls = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.macro_backtrace = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.meta_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.nll_facts = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.no_analysis = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.no_interleave_lints = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.no_leak_check = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.no_parallel_llvm = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.parse_only = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.perf_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.polonius = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n+    untracked!(ast_json, true);\n+    untracked!(ast_json_noexpand, true);\n+    untracked!(borrowck, String::from(\"other\"));\n+    untracked!(borrowck_stats, true);\n+    untracked!(control_flow_guard, CFGuard::Checks);\n+    untracked!(deduplicate_diagnostics, true);\n+    untracked!(dep_tasks, true);\n+    untracked!(dont_buffer_diagnostics, true);\n+    untracked!(dump_dep_graph, true);\n+    untracked!(dump_mir, Some(String::from(\"abc\")));\n+    untracked!(dump_mir_dataflow, true);\n+    untracked!(dump_mir_dir, String::from(\"abc\"));\n+    untracked!(dump_mir_exclude_pass_number, true);\n+    untracked!(dump_mir_graphviz, true);\n+    untracked!(emit_stack_sizes, true);\n+    untracked!(hir_stats, true);\n+    untracked!(identify_regions, true);\n+    untracked!(incremental_ignore_spans, true);\n+    untracked!(incremental_info, true);\n+    untracked!(incremental_verify_ich, true);\n+    untracked!(input_stats, true);\n+    untracked!(keep_hygiene_data, true);\n+    untracked!(link_native_libraries, false);\n+    untracked!(llvm_time_trace, true);\n+    untracked!(ls, true);\n+    untracked!(macro_backtrace, true);\n+    untracked!(meta_stats, true);\n+    untracked!(nll_facts, true);\n+    untracked!(no_analysis, true);\n+    untracked!(no_interleave_lints, true);\n+    untracked!(no_leak_check, true);\n+    untracked!(no_parallel_llvm, true);\n+    untracked!(parse_only, true);\n+    untracked!(perf_stats, true);\n+    untracked!(polonius, true);\n     // `pre_link_arg` is omitted because it just forwards to `pre_link_args`.\n-\n-    opts.debugging_opts.pre_link_args = vec![String::from(\"abc\"), String::from(\"def\")];\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.print_link_args = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.print_llvm_passes = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.print_mono_items = Some(String::from(\"abc\"));\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.print_region_graph = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.print_type_sizes = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.query_dep_graph = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.query_stats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.save_analysis = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.self_profile = SwitchWithOptPath::Enabled(None);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.self_profile_events = Some(vec![String::new()]);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.span_free_formats = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.terminal_width = Some(80);\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.threads = 99;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.time = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.time_llvm_passes = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.time_passes = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.trace_macros = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.ui_testing = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.unpretty = Some(\"expanded\".to_string());\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.unstable_options = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-    opts.debugging_opts.verbose = true;\n-    assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+    untracked!(pre_link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n+    untracked!(print_link_args, true);\n+    untracked!(print_llvm_passes, true);\n+    untracked!(print_mono_items, Some(String::from(\"abc\")));\n+    untracked!(print_region_graph, true);\n+    untracked!(print_type_sizes, true);\n+    untracked!(query_dep_graph, true);\n+    untracked!(query_stats, true);\n+    untracked!(save_analysis, true);\n+    untracked!(self_profile, SwitchWithOptPath::Enabled(None));\n+    untracked!(self_profile_events, Some(vec![String::new()]));\n+    untracked!(span_free_formats, true);\n+    untracked!(terminal_width, Some(80));\n+    untracked!(threads, 99);\n+    untracked!(time, true);\n+    untracked!(time_llvm_passes, true);\n+    untracked!(time_passes, true);\n+    untracked!(trace_macros, true);\n+    untracked!(ui_testing, true);\n+    untracked!(unpretty, Some(\"expanded\".to_string()));\n+    untracked!(unstable_options, true);\n+    untracked!(verbose, true);\n+\n+    macro_rules! tracked {\n+        ($name: ident, $non_default_value: expr) => {\n+            opts = reference.clone();\n+            opts.debugging_opts.$name = $non_default_value;\n+            assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+        };\n+    }\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.allow_features = Some(vec![String::from(\"lang_items\")]);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.always_encode_mir = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.asm_comments = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.binary_dep_depinfo = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.codegen_backend = Some(\"abc\".to_string());\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.crate_attr = vec![\"abc\".to_string()];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.debug_macros = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.dep_info_omit_d_target = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.dual_proc_macros = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.embed_bitcode = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.fewer_names = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.force_overflow_checks = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.force_unstable_if_unmarked = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.fuel = Some((\"abc\".to_string(), 99));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.human_readable_cgu_names = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.inline_in_all_cgus = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.insert_sideeffect = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.instrument_mcount = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.link_only = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.mir_emit_retag = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.mir_opt_level = 3;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.mutable_noalias = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.new_llvm_pass_manager = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.no_codegen = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.no_generate_arange_section = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.no_landing_pads = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.no_link = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.no_profiler_runtime = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.osx_rpath_install_name = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.panic_abort_tests = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.plt = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.print_fuel = Some(\"abc\".to_string());\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.profile = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.report_delayed_bugs = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.run_dsymutil = false;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.sanitizer = Some(Sanitizer::Address);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.sanitizer_memory_track_origins = 2;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.sanitizer_recover = vec![Sanitizer::Address];\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.saturating_float_casts = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.share_generics = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.show_span = Some(String::from(\"abc\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.src_hash_algorithm = Some(SourceFileHashAlgorithm::Sha1);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.strip_debuginfo_if_disabled = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.teach = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.thinlto = Some(true);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.treat_err_as_bug = Some(1);\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.unleash_the_miri_inside_of_you = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n-    opts = reference.clone();\n-    opts.debugging_opts.verify_llvm_ir = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+    tracked!(allow_features, Some(vec![String::from(\"lang_items\")]));\n+    tracked!(always_encode_mir, true);\n+    tracked!(asm_comments, true);\n+    tracked!(binary_dep_depinfo, true);\n+    tracked!(codegen_backend, Some(\"abc\".to_string()));\n+    tracked!(crate_attr, vec![\"abc\".to_string()]);\n+    tracked!(debug_macros, true);\n+    tracked!(dep_info_omit_d_target, true);\n+    tracked!(dual_proc_macros, true);\n+    tracked!(embed_bitcode, true);\n+    tracked!(fewer_names, true);\n+    tracked!(force_overflow_checks, Some(true));\n+    tracked!(force_unstable_if_unmarked, true);\n+    tracked!(fuel, Some((\"abc\".to_string(), 99)));\n+    tracked!(human_readable_cgu_names, true);\n+    tracked!(inline_in_all_cgus, Some(true));\n+    tracked!(insert_sideeffect, true);\n+    tracked!(instrument_mcount, true);\n+    tracked!(link_only, true);\n+    tracked!(merge_functions, Some(MergeFunctions::Disabled));\n+    tracked!(mir_emit_retag, true);\n+    tracked!(mir_opt_level, 3);\n+    tracked!(mutable_noalias, true);\n+    tracked!(new_llvm_pass_manager, true);\n+    tracked!(no_codegen, true);\n+    tracked!(no_generate_arange_section, true);\n+    tracked!(no_landing_pads, true);\n+    tracked!(no_link, true);\n+    tracked!(no_profiler_runtime, true);\n+    tracked!(osx_rpath_install_name, true);\n+    tracked!(panic_abort_tests, true);\n+    tracked!(plt, Some(true));\n+    tracked!(print_fuel, Some(\"abc\".to_string()));\n+    tracked!(profile, true);\n+    tracked!(relro_level, Some(RelroLevel::Full));\n+    tracked!(report_delayed_bugs, true);\n+    tracked!(run_dsymutil, false);\n+    tracked!(sanitizer, Some(Sanitizer::Address));\n+    tracked!(sanitizer_memory_track_origins, 2);\n+    tracked!(sanitizer_recover, vec![Sanitizer::Address]);\n+    tracked!(saturating_float_casts, true);\n+    tracked!(share_generics, Some(true));\n+    tracked!(show_span, Some(String::from(\"abc\")));\n+    tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n+    tracked!(strip_debuginfo_if_disabled, true);\n+    tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n+    tracked!(teach, true);\n+    tracked!(thinlto, Some(true));\n+    tracked!(tls_model, Some(String::from(\"tls model\")));\n+    tracked!(treat_err_as_bug, Some(1));\n+    tracked!(unleash_the_miri_inside_of_you, true);\n+    tracked!(verify_llvm_ir, true);\n }\n \n #[test]"}]}