{"sha": "a44774c3a9739b2eea8923e09d67b14312c78ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDc3NGMzYTk3MzliMmVlYTg5MjNlMDlkNjdiMTQzMTJjNzhlZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-25T19:37:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-25T19:37:54Z"}, "message": "Auto merge of #66739 - pietroalbini:rollup-2t2pd4a, r=pietroalbini\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #65613 (Preserve whitespace inside one-backtick codeblocks)\n - #66512 (Add unix::process::CommandExt::arg0)\n - #66569 (GitHub Actions: preparations, part 1)\n - #66678 (Remove useless line for error index generation)\n - #66684 (Drive-by cleanup in region naming)\n - #66694 (Add some comments to panic runtime)\n - #66698 (tidy: Remove unused import)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9754b9b40a14e0835f1cd6ddd5b9cb40dca29eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9754b9b40a14e0835f1cd6ddd5b9cb40dca29eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a44774c3a9739b2eea8923e09d67b14312c78ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a44774c3a9739b2eea8923e09d67b14312c78ef3", "html_url": "https://github.com/rust-lang/rust/commit/a44774c3a9739b2eea8923e09d67b14312c78ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a44774c3a9739b2eea8923e09d67b14312c78ef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69", "html_url": "https://github.com/rust-lang/rust/commit/91642e3ac0120c8e9cdd5f3c85ad03f3bf1b8b69"}, {"sha": "43d773244954a66f4c6d0110254d84f6cfb37856", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d773244954a66f4c6d0110254d84f6cfb37856", "html_url": "https://github.com/rust-lang/rust/commit/43d773244954a66f4c6d0110254d84f6cfb37856"}], "stats": {"total": 540, "additions": 251, "deletions": 289}, "files": [{"sha": "6f8a630874570324e26b750ec700d05122fca01b", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -262,13 +262,17 @@ pub enum CiEnv {\n     None,\n     /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n     AzurePipelines,\n+    /// The GitHub Actions environment, for Linux (including Docker), Windows and macOS builds.\n+    GitHubActions,\n }\n \n impl CiEnv {\n     /// Obtains the current CI environment.\n     pub fn current() -> CiEnv {\n         if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AzurePipelines\n+        } else if env::var(\"GITHUB_ACTIONS\").ok().map_or(false, |e| &*e == \"true\") {\n+            CiEnv::GitHubActions\n         } else {\n             CiEnv::None\n         }"}, {"sha": "bfe5174bf1e5734410950ca6e085e3a97e881b78", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 35, "deletions": 133, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -19,136 +19,46 @@ jobs:\n   strategy:\n     matrix:\n       x86_64-gnu-llvm-6.0:\n-        IMAGE: x86_64-gnu-llvm-6.0\n         RUST_BACKTRACE: 1\n-\n-      dist-x86_64-linux:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY: 1\n-\n-      # \"alternate\" deployments, these are \"nightlies\" but have LLVM assertions\n-      # turned on, they're deployed to a different location primarily for\n-      # additional testing.\n+      dist-x86_64-linux: {}\n       dist-x86_64-linux-alt:\n         IMAGE: dist-x86_64-linux\n-        DEPLOY_ALT: 1\n-\n-      # Linux builders, remaining docker images\n-      arm-android:\n-        IMAGE: arm-android\n-\n-      armhf-gnu:\n-        IMAGE: armhf-gnu\n-\n-      dist-various-1:\n-        IMAGE: dist-various-1\n-        DEPLOY: 1\n-\n-      dist-various-2:\n-        IMAGE: dist-various-2\n-        DEPLOY: 1\n-\n-      dist-aarch64-linux:\n-        IMAGE: dist-aarch64-linux\n-        DEPLOY: 1\n-\n-      dist-android:\n-        IMAGE: dist-android\n-        DEPLOY: 1\n-\n-      dist-arm-linux:\n-        IMAGE: dist-arm-linux\n-        DEPLOY: 1\n-\n-      dist-armhf-linux:\n-        IMAGE: dist-armhf-linux\n-        DEPLOY: 1\n-\n-      dist-armv7-linux:\n-        IMAGE: dist-armv7-linux\n-        DEPLOY: 1\n-\n-      dist-i586-gnu-i586-i686-musl:\n-        IMAGE: dist-i586-gnu-i586-i686-musl\n-        DEPLOY: 1\n-\n-      dist-i686-freebsd:\n-        IMAGE: dist-i686-freebsd\n-        DEPLOY: 1\n-\n-      dist-i686-linux:\n-        IMAGE: dist-i686-linux\n-        DEPLOY: 1\n-\n-      dist-mips-linux:\n-        IMAGE: dist-mips-linux\n-        DEPLOY: 1\n-\n-      dist-mips64-linux:\n-        IMAGE: dist-mips64-linux\n-        DEPLOY: 1\n-\n-      dist-mips64el-linux:\n-        IMAGE: dist-mips64el-linux\n-        DEPLOY: 1\n-\n-      dist-mipsel-linux:\n-        IMAGE: dist-mipsel-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc-linux:\n-        IMAGE: dist-powerpc-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc64-linux:\n-        IMAGE: dist-powerpc64-linux\n-        DEPLOY: 1\n-\n-      dist-powerpc64le-linux:\n-        IMAGE: dist-powerpc64le-linux\n-        DEPLOY: 1\n-\n-      dist-s390x-linux:\n-        IMAGE: dist-s390x-linux\n-        DEPLOY: 1\n-\n-      dist-x86_64-freebsd:\n-        IMAGE: dist-x86_64-freebsd\n-        DEPLOY: 1\n-\n-      dist-x86_64-musl:\n-        IMAGE: dist-x86_64-musl\n-        DEPLOY: 1\n-\n-      dist-x86_64-netbsd:\n-        IMAGE: dist-x86_64-netbsd\n-        DEPLOY: 1\n-\n-      i686-gnu:\n-        IMAGE: i686-gnu\n-      i686-gnu-nopt:\n-        IMAGE: i686-gnu-nopt\n-      test-various:\n-        IMAGE: test-various\n-      wasm32:\n-        IMAGE: wasm32\n-      x86_64-gnu:\n-        IMAGE: x86_64-gnu\n-      x86_64-gnu-full-bootstrap:\n-        IMAGE: x86_64-gnu-full-bootstrap\n-      x86_64-gnu-aux:\n-        IMAGE: x86_64-gnu-aux\n+      arm-android: {}\n+      armhf-gnu: {}\n+      dist-various-1: {}\n+      dist-various-2: {}\n+      dist-aarch64-linux: {}\n+      dist-android: {}\n+      dist-arm-linux: {}\n+      dist-armhf-linux: {}\n+      dist-armv7-linux: {}\n+      dist-i586-gnu-i586-i686-musl: {}\n+      dist-i686-freebsd: {}\n+      dist-i686-linux: {}\n+      dist-mips-linux: {}\n+      dist-mips64-linux: {}\n+      dist-mips64el-linux: {}\n+      dist-mipsel-linux: {}\n+      dist-powerpc-linux: {}\n+      dist-powerpc64-linux: {}\n+      dist-powerpc64le-linux: {}\n+      dist-s390x-linux: {}\n+      dist-x86_64-freebsd: {}\n+      dist-x86_64-musl: {}\n+      dist-x86_64-netbsd: {}\n+      i686-gnu: {}\n+      i686-gnu-nopt: {}\n+      test-various: {}\n+      wasm32: {}\n+      x86_64-gnu: {}\n+      x86_64-gnu-full-bootstrap: {}\n+      x86_64-gnu-aux: {}\n       x86_64-gnu-tools:\n-        IMAGE: x86_64-gnu-tools\n         DEPLOY_TOOLSTATES_JSON: toolstates-linux.json\n-      x86_64-gnu-debug:\n-        IMAGE: x86_64-gnu-debug\n-      x86_64-gnu-nopt:\n-        IMAGE: x86_64-gnu-nopt\n-      x86_64-gnu-distcheck:\n-        IMAGE: x86_64-gnu-distcheck\n-      mingw-check:\n-        IMAGE: mingw-check\n+      x86_64-gnu-debug: {}\n+      x86_64-gnu-nopt: {}\n+      x86_64-gnu-distcheck: {}\n+      mingw-check: {}\n \n - job: macOS\n   timeoutInMinutes: 600\n@@ -176,7 +86,6 @@ jobs:\n       dist-x86_64-apple:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n-        DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -186,7 +95,6 @@ jobs:\n       dist-x86_64-apple-alt:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n-        DEPLOY_ALT: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -204,7 +112,6 @@ jobs:\n       dist-i686-apple:\n         SCRIPT: ./x.py dist\n         RUST_CONFIGURE_ARGS: --build=i686-apple-darwin --enable-full-tools --enable-profiler --set rust.jemalloc\n-        DEPLOY: 1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n         MACOSX_DEPLOYMENT_TARGET: 10.7\n         NO_LLVM_ASSERTIONS: 1\n@@ -304,7 +211,6 @@ jobs:\n           --enable-profiler\n         SCRIPT: python x.py dist\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-i686-msvc:\n         RUST_CONFIGURE_ARGS: >-\n           --build=i686-pc-windows-msvc\n@@ -313,22 +219,18 @@ jobs:\n           --enable-profiler\n         SCRIPT: python x.py dist\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-i686-mingw:\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n         SCRIPT: python x.py dist\n         CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n       dist-x86_64-mingw:\n         SCRIPT: python x.py dist\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n         CUSTOM_MINGW: 1\n         DIST_REQUIRE_ALL_TOOLS: 1\n-        DEPLOY: 1\n \n       # \"alternate\" deployment, see .travis.yml for more info\n       dist-x86_64-msvc-alt:\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n         SCRIPT: python x.py dist\n-        DEPLOY_ALT: 1"}, {"sha": "aee4d8d5136aa81c1332f6152ea2f6f78af955dd", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -18,10 +18,7 @@ jobs:\n     - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0:\n-        IMAGE: x86_64-gnu-llvm-6.0\n-      mingw-check:\n-        IMAGE: mingw-check\n+      x86_64-gnu-llvm-6.0: {}\n+      mingw-check: {}\n       x86_64-gnu-tools:\n-        IMAGE: x86_64-gnu-tools\n         CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "f536388b25b966286b216ade8ee12cfbac2bc7ef", "filename": "src/ci/azure-pipelines/steps/run.yml", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Frun.yml?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -28,6 +28,9 @@ steps:\n - checkout: self\n   fetchDepth: 2\n \n+- bash: src/ci/scripts/setup-environment.sh\n+  displayName: Setup environment\n+\n - bash: src/ci/scripts/should-skip-this.sh\n   displayName: Decide whether to run this job\n \n@@ -38,38 +41,26 @@ steps:\n   displayName: Show the current environment\n \n - bash: src/ci/scripts/install-sccache.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install sccache\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-clang.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install clang\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/switch-xcode.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Switch to Xcode 9.3\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-wix.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install wix\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-innosetup.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install InnoSetup\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/windows-symlink-build-dir.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Ensure the build happens on C:\\ instead of D:\\\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -78,35 +69,22 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-msys2-packages.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install msys2 packages\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-mingw.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n-    SYSTEM_WORKFOLDER: $(System.Workfolder)\n   displayName: Install MinGW\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/install-ninja.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Install ninja\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/enable-docker-ipv6.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Enable IPv6 on Docker\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n@@ -120,22 +98,16 @@ steps:\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/checkout-submodules.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Checkout submodules\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n - bash: src/ci/scripts/verify-line-endings.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   displayName: Verify line endings\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n \n # Ensure the `aws` CLI is installed so we can deploy later on, cache docker\n # images, etc.\n - bash: src/ci/scripts/install-awscli.sh\n-  env:\n-    AGENT_OS: $(Agent.OS)\n   condition: and(succeeded(), not(variables.SKIP_JOB))\n   displayName: Install awscli\n "}, {"sha": "3732ab5458f9b061b13333c5d857ec250cd953dd", "filename": "src/ci/azure-pipelines/try.yml", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Ftry.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fazure-pipelines%2Ftry.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Ftry.yml?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -6,72 +6,19 @@ variables:\n - group: prod-credentials\n \n jobs:\n-- job: Linux\n+- job: Windows\n   timeoutInMinutes: 600\n   pool:\n-    vmImage: ubuntu-16.04\n+    vmImage: 'vs2017-win2016'\n   steps:\n   - template: steps/run.yml\n   strategy:\n     matrix:\n-      dist-x86_64-linux:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY: 1\n-\n-      dist-x86_64-linux-alt:\n-        IMAGE: dist-x86_64-linux\n-        DEPLOY_ALT: 1\n-\n-# The macOS and Windows builds here are currently disabled due to them not being\n-# overly necessary on `try` builds. We also don't actually have anything that\n-# consumes the artifacts currently. Perhaps one day we can reenable, but for now\n-# it helps free up capacity on Azure.\n-# - job: macOS\n-#   timeoutInMinutes: 600\n-#   pool:\n-#     vmImage: macos-10.13\n-#   steps:\n-#   - template: steps/run.yml\n-#   strategy:\n-#     matrix:\n-#       dist-x86_64-apple:\n-#         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n-#         DEPLOY: 1\n-#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-#         MACOSX_DEPLOYMENT_TARGET: 10.7\n-#         NO_LLVM_ASSERTIONS: 1\n-#         NO_DEBUG_ASSERTIONS: 1\n-#         DIST_REQUIRE_ALL_TOOLS: 1\n-#\n-#       dist-x86_64-apple-alt:\n-#         SCRIPT: ./x.py dist\n-#         RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n-#         DEPLOY_ALT: 1\n-#         RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n-#         MACOSX_DEPLOYMENT_TARGET: 10.7\n-#         NO_LLVM_ASSERTIONS: 1\n-#         NO_DEBUG_ASSERTIONS: 1\n-#\n-# - job: Windows\n-#   timeoutInMinutes: 600\n-#   pool:\n-#     vmImage: 'vs2017-win2016'\n-#   steps:\n-#   - template: steps/run.yml\n-#   strategy:\n-#     matrix:\n-#       dist-x86_64-msvc:\n-#         RUST_CONFIGURE_ARGS: >\n-#           --build=x86_64-pc-windows-msvc\n-#           --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n-#           --enable-full-tools\n-#           --enable-profiler\n-#         SCRIPT: python x.py dist\n-#         DIST_REQUIRE_ALL_TOOLS: 1\n-#         DEPLOY: 1\n-#\n-#       dist-x86_64-msvc-alt:\n-#         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n-#         SCRIPT: python x.py dist\n-#         DEPLOY_ALT: 1\n+      dist-x86_64-msvc:\n+        RUST_CONFIGURE_ARGS: >-\n+          --build=x86_64-pc-windows-msvc\n+          --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+          --enable-full-tools\n+          --enable-profiler\n+        SCRIPT: python x.py dist\n+        DIST_REQUIRE_ALL_TOOLS: 1"}, {"sha": "f29f9f3bf1c453dcb098ca16f65b37d640b474cc", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -172,6 +172,8 @@ docker \\\n   --env CI \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n+  --env GITHUB_ACTIONS \\\n+  --env GITHUB_REF \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --env TOOLSTATE_REPO \\\n   --env TOOLSTATE_PUBLISH \\"}, {"sha": "ae5b22493ab07efd593aa3eb1bfc15d489c8f935", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -23,9 +23,7 @@ fi\n ci_dir=`cd $(dirname $0) && pwd`\n source \"$ci_dir/shared.sh\"\n \n-branch_name=$(getCIBranch)\n-\n-if [ ! isCI ] || [ \"$branch_name\" = \"auto\" ] || [ \"$branch_name\" = \"try\" ]; then\n+if [ ! isCI ] || isCiBranch auto || isCiBranch beta; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}, {"sha": "98373df7fce50d92a0249cd506e795a02523416b", "filename": "src/ci/scripts/install-mingw.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -52,7 +52,7 @@ if isWindows; then\n     if [[ \"${CUSTOM_MINGW-0}\" -ne 1 ]]; then\n         pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n             mingw-w64-$arch-gcc mingw-w64-$arch-python2\n-        ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/mingw${bits}/bin\"\n+        ciCommandAddPath \"$(ciCheckoutPath)/msys2/mingw${bits}/bin\"\n     else\n         mingw_dir=\"mingw${bits}\"\n "}, {"sha": "c9fafc7fe6b41b5bc624a4b2818878753b100930", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -12,8 +12,8 @@ IFS=$'\\n\\t'\n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n if isWindows; then\n-    choco install msys2 --params=\"/InstallDir:${SYSTEM_WORKFOLDER}/msys2 /NoPath\" -y --no-progress\n-    mkdir -p \"${SYSTEM_WORKFOLDER}/msys2/home/${USERNAME}\"\n+    choco install msys2 --params=\"/InstallDir:$(ciCheckoutPath)/msys2 /NoPath\" -y --no-progress\n+    mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\"\n \n-    ciCommandAddPath \"${SYSTEM_WORKFOLDER}/msys2/usr/bin\"\n+    ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\"\n fi"}, {"sha": "e126a06edab7373a12df556e6f81f2f82d409239", "filename": "src/ci/scripts/setup-environment.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Fsetup-environment.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fscripts%2Fsetup-environment.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fsetup-environment.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+# This script guesses some environment variables based on the builder name and\n+# the current platform, to reduce the amount of variables defined in the CI\n+# configuration.\n+\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n+\n+# Builders starting with `dist-` are dist builders, but if they also end with\n+# `-alt` they are alternate dist builders.\n+if [[ \"${CI_JOB_NAME}\" = dist-* ]]; then\n+    if [[ \"${CI_JOB_NAME}\" = *-alt ]]; then\n+        echo \"alternate dist builder detected, setting DEPLOY_ALT=1\"\n+        ciCommandSetEnv DEPLOY_ALT 1\n+    else\n+        echo \"normal dist builder detected, setting DEPLOY=1\"\n+        ciCommandSetEnv DEPLOY 1\n+    fi\n+fi\n+\n+# All the Linux builds happen inside Docker.\n+if isLinux; then\n+    if [[ -z \"${IMAGE+x}\" ]]; then\n+        echo \"linux builder detected, using docker to run the build\"\n+        ciCommandSetEnv IMAGE \"${CI_JOB_NAME}\"\n+    else\n+        echo \"a custom docker image is already set\"\n+    fi\n+fi"}, {"sha": "98120f5dff95dafb63b62f2a8ac64221b88b73bb", "filename": "src/ci/shared.sh", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -27,27 +27,66 @@ function retry {\n }\n \n function isCI {\n-  [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+    [[ \"${CI-false}\" = \"true\" ]] || isAzurePipelines || isGitHubActions\n+}\n+\n+function isAzurePipelines {\n+    [[ \"${TF_BUILD-False}\" = \"True\" ]]\n+}\n+\n+function isGitHubActions {\n+    [[ \"${GITHUB_ACTIONS-false}\" = \"true\" ]]\n }\n \n function isMacOS {\n-  [ \"$AGENT_OS\" = \"Darwin\" ]\n+    [[ \"${OSTYPE}\" = \"darwin\"* ]]\n }\n \n function isWindows {\n-  [ \"$AGENT_OS\" = \"Windows_NT\" ]\n+    [[ \"${OSTYPE}\" = \"cygwin\" ]] || [[ \"${OSTYPE}\" = \"msys\" ]]\n }\n \n function isLinux {\n-  [ \"$AGENT_OS\" = \"Linux\" ]\n+    [[ \"${OSTYPE}\" = \"linux-gnu\" ]]\n }\n \n-function getCIBranch {\n-  echo \"$BUILD_SOURCEBRANCHNAME\"\n+function isCiBranch {\n+    if [[ $# -ne 1 ]]; then\n+        echo \"usage: $0 <branch-name>\"\n+        exit 1\n+    fi\n+    name=\"$1\"\n+\n+    if isAzurePipelines; then\n+        [[ \"${BUILD_SOURCEBRANCHNAME}\" = \"${name}\" ]]\n+    elif isGitHubActions; then\n+        [[ \"${GITHUB_REF}\" = \"refs/heads/${name}\" ]]\n+    else\n+        echo \"isCiBranch only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommit {\n-  echo \"${BUILD_SOURCEVERSION}\"\n+    if isAzurePipelines; then\n+        echo \"${BUILD_SOURCEVERSION}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_SHA}\"\n+    else\n+        echo \"ciCommit only works inside CI!\"\n+        exit 1\n+    fi\n+}\n+\n+function ciCheckoutPath {\n+    if isAzurePipelines; then\n+        echo \"${SYSTEM_WORKFOLDER}\"\n+    elif isGitHubActions; then\n+        echo \"${GITHUB_WORKSPACE}\"\n+    else\n+        echo \"ciCheckoutPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandAddPath {\n@@ -57,7 +96,14 @@ function ciCommandAddPath {\n     fi\n     path=\"$1\"\n \n-    echo \"##vso[task.prependpath]${path}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.prependpath]${path}\"\n+    elif isGitHubActions; then\n+        echo \"::add-path::${value}\"\n+    else\n+        echo \"ciCommandAddPath only works inside CI!\"\n+        exit 1\n+    fi\n }\n \n function ciCommandSetEnv {\n@@ -68,5 +114,12 @@ function ciCommandSetEnv {\n     name=\"$1\"\n     value=\"$2\"\n \n-    echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    if isAzurePipelines; then\n+        echo \"##vso[task.setvariable variable=${name}]${value}\"\n+    elif isGitHubActions; then\n+        echo \"::set-env name=${name}::${value}\"\n+    else\n+        echo \"ciCommandSetEnv only works inside CI!\"\n+        exit 1\n+    fi\n }"}, {"sha": "4833194be37acf825252cc2219af847adc49c59e", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -6,8 +6,7 @@\n //! interface for panicking is:\n //!\n //! ```\n-//! # use std::fmt;\n-//! fn panic_impl(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> !\n+//! fn panic_impl(pi: &core::panic::PanicInfo<'_>) -> !\n //! # { loop {} }\n //! ```\n //!\n@@ -35,7 +34,7 @@ use crate::panic::{Location, PanicInfo};\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n-#[lang = \"panic\"]\n+#[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub fn panic(expr: &str, location: &Location<'_>) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }\n@@ -52,7 +51,7 @@ pub fn panic(expr: &str, location: &Location<'_>) -> ! {\n \n #[cold]\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]\n-#[lang = \"panic_bounds_check\"]\n+#[lang = \"panic_bounds_check\"] // needed by codegen for panic on OOB array/slice access\n fn panic_bounds_check(location: &Location<'_>, index: usize, len: usize) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         unsafe { super::intrinsics::abort() }"}, {"sha": "a8cc0cc044a01ce437bbae0e91ef3ca9f962c544", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -77,17 +77,30 @@ impl RegionErrorNamingCtx {\n         }\n     }\n \n+    /// Get the name of `region` if it has previously been named.\n     crate fn get(&self, region: &RegionVid) -> Option<&RegionName> {\n         self.renctx.get(region)\n     }\n \n+    /// Give `region` the name `name`.\n     crate fn insert(&mut self, region: RegionVid, name: RegionName) {\n         self.renctx.insert(region, name);\n     }\n+\n+    /// Creates a synthetic region named `'N`, where `N` is the next value of the counter. Then,\n+    /// increment the counter.\n+    ///\n+    /// The name is not memoized. A separate call to `insert` should be made later. (Currently,\n+    /// this happens at the end of `give_region_a_name`).\n+    crate fn synthesize_region_name(&mut self) -> Symbol {\n+        let c = self.counter;\n+        self.counter += 1;\n+\n+        Symbol::intern(&format!(\"'{:?}\", c))\n+    }\n }\n \n impl RegionName {\n-    #[allow(dead_code)]\n     crate fn was_named(&self) -> bool {\n         match self.source {\n             RegionNameSource::NamedEarlyBoundRegion(..) |\n@@ -103,12 +116,6 @@ impl RegionName {\n         }\n     }\n \n-    #[allow(dead_code)]\n-    crate fn was_synthesized(&self) -> bool {\n-        !self.was_named()\n-    }\n-\n-    #[allow(dead_code)]\n     crate fn name(&self) -> Symbol {\n         self.name\n     }\n@@ -298,7 +305,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         } else {\n                             bug!(\"Closure is not defined by a closure expr\");\n                         };\n-                        let region_name = self.synthesize_region_name(renctx);\n+                        let region_name = renctx.synthesize_region_name();\n \n                         let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n@@ -478,7 +485,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // This counter value will already have been used, so this function will increment\n                 // it so the next value will be used next and return the region name that would\n                 // have been used.\n-                name: self.synthesize_region_name(renctx),\n+                name: renctx.synthesize_region_name(),\n                 source: RegionNameSource::CannotMatchHirTy(span, type_name),\n             })\n         } else {\n@@ -533,7 +540,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n                 ) => {\n                     if region.to_region_vid() == needle_fr {\n-                        let region_name = self.synthesize_region_name(renctx);\n+                        let region_name = renctx.synthesize_region_name();\n \n                         // Just grab the first character, the `&`.\n                         let source_map = tcx.sess.source_map();\n@@ -621,7 +628,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | hir::LifetimeName::Error\n             | hir::LifetimeName::Static\n             | hir::LifetimeName::Underscore => {\n-                let region_name = self.synthesize_region_name(renctx);\n+                let region_name = renctx.synthesize_region_name();\n                 let ampersand_span = lifetime.span;\n                 Some(RegionName {\n                     name: region_name,\n@@ -713,7 +720,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let upvar_index = self.get_upvar_index_for_region(tcx, fr)?;\n         let (upvar_name, upvar_span) =\n             self.get_upvar_name_and_span_for_region(tcx, upvars, upvar_index);\n-        let region_name = self.synthesize_region_name(renctx);\n+        let region_name = renctx.synthesize_region_name();\n \n         Some(RegionName {\n             name: region_name,\n@@ -776,7 +783,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // This counter value will already have been used, so this function will increment it\n             // so the next value will be used next and return the region name that would have been\n             // used.\n-            name: self.synthesize_region_name(renctx),\n+            name: renctx.synthesize_region_name(),\n             source: RegionNameSource::AnonRegionFromOutput(\n                 return_span,\n                 mir_description.to_string(),\n@@ -831,16 +838,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         Some(RegionName {\n-            name: self.synthesize_region_name(renctx),\n+            name: renctx.synthesize_region_name(),\n             source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n         })\n     }\n-\n-    /// Creates a synthetic region named `'1`, incrementing the counter.\n-    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> Symbol {\n-        let c = renctx.counter;\n-        renctx.counter += 1;\n-\n-        Symbol::intern(&format!(\"'{:?}\", c))\n-    }\n }"}, {"sha": "62fe23029d92f6f5575ab174c26e55be8a7e134f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -376,7 +376,7 @@ nav.sub {\n \ttext-overflow: ellipsis;\n \tmargin: 0;\n }\n-.docblock-short code {\n+.docblock code, .docblock-short code {\n \twhite-space: pre-wrap;\n }\n "}, {"sha": "6819a4a04d73770ebb30d18c101b8098902a7b8d", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -44,6 +44,8 @@ extern {\n                                 data: *mut u8,\n                                 data_ptr: *mut usize,\n                                 vtable_ptr: *mut usize) -> u32;\n+\n+    /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n     #[unwind(allowed)]\n     fn __rust_start_panic(payload: usize) -> u32;\n }\n@@ -294,7 +296,7 @@ pub fn panicking() -> bool {\n     update_panic_count(0) != 0\n }\n \n-/// Entry point of panic from the libcore crate.\n+/// Entry point of panic from the libcore crate (`panic_impl` lang item).\n #[cfg(not(test))]\n #[panic_handler]\n #[unwind(allowed)]\n@@ -380,7 +382,7 @@ fn continue_panic_fmt(info: &PanicInfo<'_>) -> ! {\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n-#[cfg_attr(not(test), lang = \"begin_panic\")]\n+#[cfg_attr(not(test), lang = \"begin_panic\")] // lang item for CTFE panic support\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible\n #[cfg_attr(not(feature=\"panic_immediate_abort\"),inline(never))]"}, {"sha": "0e95f97486b2433b9c23de8dcc639684e3e6a4ba", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -2,6 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::ffi::OsStr;\n use crate::io;\n use crate::os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n use crate::process;\n@@ -103,6 +104,14 @@ pub trait CommandExt {\n     /// cross-platform `spawn` instead.\n     #[stable(feature = \"process_exec2\", since = \"1.9.0\")]\n     fn exec(&mut self) -> io::Error;\n+\n+    /// Set executable argument\n+    ///\n+    /// Set the first process argument, `argv[0]`, to something other than the\n+    /// default executable path.\n+    #[unstable(feature = \"process_set_argv0\", issue = \"66510\")]\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+        where S: AsRef<OsStr>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -127,6 +136,13 @@ impl CommandExt for process::Command {\n     fn exec(&mut self) -> io::Error {\n         self.as_inner_mut().exec(sys::process::Stdio::Inherit)\n     }\n+\n+    fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n+        where S: AsRef<OsStr>\n+    {\n+        self.as_inner_mut().set_arg_0(arg.as_ref());\n+        self\n+    }\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`]."}, {"sha": "0e6f96bb228926a848b19cfa1b06898dad5235c2", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -1,6 +1,6 @@\n use crate::os::unix::prelude::*;\n \n-use crate::ffi::{OsString, OsStr, CString};\n+use crate::ffi::{OsString, OsStr, CString, CStr};\n use crate::fmt;\n use crate::io;\n use crate::ptr;\n@@ -11,10 +11,7 @@ use crate::sys_common::process::CommandEnv;\n use crate::collections::BTreeMap;\n \n #[cfg(not(target_os = \"fuchsia\"))]\n-use {\n-    crate::ffi::CStr,\n-    crate::sys::fs::OpenOptions,\n-};\n+use crate::sys::fs::OpenOptions;\n \n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n@@ -135,8 +132,8 @@ impl Command {\n         let program = os2c(program, &mut saw_nul);\n         Command {\n             argv: Argv(vec![program.as_ptr(), ptr::null()]),\n+            args: vec![program.clone()],\n             program,\n-            args: Vec::new(),\n             env: Default::default(),\n             cwd: None,\n             uid: None,\n@@ -149,11 +146,19 @@ impl Command {\n         }\n     }\n \n+    pub fn set_arg_0(&mut self, arg: &OsStr) {\n+        // Set a new arg0\n+        let arg = os2c(arg, &mut self.saw_nul);\n+        debug_assert!(self.argv.0.len() > 1);\n+        self.argv.0[0] = arg.as_ptr();\n+        self.args[0] = arg;\n+    }\n+\n     pub fn arg(&mut self, arg: &OsStr) {\n         // Overwrite the trailing NULL pointer in `argv` and then add a new null\n         // pointer.\n         let arg = os2c(arg, &mut self.saw_nul);\n-        self.argv.0[self.args.len() + 1] = arg.as_ptr();\n+        self.argv.0[self.args.len()] = arg.as_ptr();\n         self.argv.0.push(ptr::null());\n \n         // Also make sure we keep track of the owned value to schedule a\n@@ -178,6 +183,10 @@ impl Command {\n         &self.argv.0\n     }\n \n+    pub fn get_program(&self) -> &CStr {\n+        &*self.program\n+    }\n+\n     #[allow(dead_code)]\n     pub fn get_cwd(&self) -> &Option<CString> {\n         &self.cwd"}, {"sha": "486c12f9bf88ab0c9558cb62fe4251e52220328b", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -110,7 +110,7 @@ impl Command {\n             ZX_HANDLE_INVALID,\n             FDIO_SPAWN_CLONE_JOB | FDIO_SPAWN_CLONE_LDSVC | FDIO_SPAWN_CLONE_NAMESPACE\n             | FDIO_SPAWN_CLONE_ENVIRON,  // this is ignored when envp is non-null\n-            self.get_argv()[0], self.get_argv().as_ptr(), envp,\n+            self.get_program().as_ptr(), self.get_argv().as_ptr(), envp,\n             actions.len() as size_t, actions.as_ptr(),\n             &mut process_handle,\n             ptr::null_mut(),"}, {"sha": "45e4d195f17d2ad18cc2cc9956b819e6725210d5", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -248,7 +248,7 @@ impl Command {\n             *sys::os::environ() = envp.as_ptr();\n         }\n \n-        libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n+        libc::execvp(self.get_program().as_ptr(), self.get_argv().as_ptr());\n         Err(io::Error::last_os_error())\n     }\n \n@@ -373,7 +373,7 @@ impl Command {\n                 .unwrap_or_else(|| *sys::os::environ() as *const _);\n             let ret = libc::posix_spawnp(\n                 &mut p.pid,\n-                self.get_argv()[0],\n+                self.get_program().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,"}, {"sha": "56a9fb4d39125d9855543368fb11f603fe18e2a4", "filename": "src/test/ui/command-argv0.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftest%2Fui%2Fcommand-argv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftest%2Fui%2Fcommand-argv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-argv0.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -0,0 +1,33 @@\n+// run-pass\n+\n+// ignore-windows - this is a unix-specific test\n+// ignore-cloudabi no processes\n+// ignore-emscripten no processes\n+// ignore-sgx no processes\n+#![feature(process_set_argv0)]\n+\n+use std::env;\n+use std::os::unix::process::CommandExt;\n+use std::process::Command;\n+\n+fn main() {\n+    let args: Vec<_> = env::args().collect();\n+\n+    if args.len() > 1 {\n+        assert_eq!(args[1], \"doing-test\");\n+        assert_eq!(args[0], \"i have a silly name\");\n+\n+        println!(\"passed\");\n+        return;\n+    }\n+\n+    let output =\n+        Command::new(&args[0]).arg(\"doing-test\").arg0(\"i have a silly name\").output().unwrap();\n+    assert!(\n+        output.stderr.is_empty(),\n+        \"Non-empty stderr: {}\",\n+        String::from_utf8_lossy(&output.stderr)\n+    );\n+    assert!(output.status.success());\n+    assert_eq!(output.stdout, b\"passed\\n\");\n+}"}, {"sha": "b6e7ede17e74e59b52dde345c86545c987cf169a", "filename": "src/tools/error_index_generator/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -13,7 +13,6 @@ fn main() {\n \n     println!(\"cargo:rerun-if-changed={}\", error_codes_path);\n     let file = fs::read_to_string(error_codes_path).unwrap()\n-                  .replace(\"crate::register_diagnostics!\", \"register_diagnostics!\")\n                   .replace(\": include_str!(\\\"./error_codes/\", \": include_str!(\\\"./\");\n     let contents = format!(\"(|| {{\\n{}\\n}})()\", file);\n     fs::write(&out_dir.join(\"all_error_codes.rs\"), &contents).unwrap();"}, {"sha": "41c4b618e60951bfa0cd8e03ec38953fffaf6fdf", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44774c3a9739b2eea8923e09d67b14312c78ef3/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=a44774c3a9739b2eea8923e09d67b14312c78ef3", "patch": "@@ -4,7 +4,6 @@\n use std::collections::HashMap;\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n-use std::io::Read;\n use std::path::Path;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!"}]}