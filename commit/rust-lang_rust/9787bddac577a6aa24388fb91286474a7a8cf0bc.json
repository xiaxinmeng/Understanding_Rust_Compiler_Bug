{"sha": "9787bddac577a6aa24388fb91286474a7a8cf0bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODdiZGRhYzU3N2E2YWEyNDM4OGZiOTEyODY0NzRhN2E4Y2YwYmM=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-03-25T19:03:20Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-03-25T19:03:20Z"}, "message": "Use arrayvec 0.6", "tree": {"sha": "2549ec113b23c88ac95fe4eee2e59f8e95297465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2549ec113b23c88ac95fe4eee2e59f8e95297465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9787bddac577a6aa24388fb91286474a7a8cf0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9787bddac577a6aa24388fb91286474a7a8cf0bc", "html_url": "https://github.com/rust-lang/rust/commit/9787bddac577a6aa24388fb91286474a7a8cf0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9787bddac577a6aa24388fb91286474a7a8cf0bc/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59fdd7c84c5fdc16573f3cca4081d6735eaa9208", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fdd7c84c5fdc16573f3cca4081d6735eaa9208", "html_url": "https://github.com/rust-lang/rust/commit/59fdd7c84c5fdc16573f3cca4081d6735eaa9208"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b36bca0aba3213f4659fc2fa3fb32c95d59a45fb", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -1,5 +1,7 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+version = 3\n+\n [[package]]\n name = \"addr2line\"\n version = \"0.14.1\"\n@@ -47,9 +49,9 @@ checksum = \"33954243bd79057c2de7338850b85983a44588021f8a5fee574a8888c6de4344\"\n \n [[package]]\n name = \"arrayvec\"\n-version = \"0.5.2\"\n+version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n+checksum = \"682f88bd1270f264991da8922b89ee1fb520b0da73f97c9f73cda54980123017\"\n \n [[package]]\n name = \"atty\""}, {"sha": "2ef5bcbc9579692f0973944f15a08cc529730f19", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -13,7 +13,7 @@ doctest = false\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n either = \"1.5.3\"\n-arrayvec = \"0.5.1\"\n+arrayvec = \"0.6\"\n itertools = \"0.10.0\"\n smallvec = \"1.4.0\"\n "}, {"sha": "05a60e15867d7980daf1f869774cf878ae6693f5", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -2238,7 +2238,7 @@ pub enum ScopeDef {\n }\n \n impl ScopeDef {\n-    pub fn all_items(def: PerNs) -> ArrayVec<[Self; 3]> {\n+    pub fn all_items(def: PerNs) -> ArrayVec<Self, 3> {\n         let mut items = ArrayVec::new();\n \n         match (def.take_types(), def.take_values()) {"}, {"sha": "030b7eebed0af274dc26dd59423f1f61422dbc24", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -12,7 +12,7 @@ doctest = false\n [dependencies]\n cov-mark = { version = \"1.1\", features = [\"thread-local\"] }\n itertools = \"0.10.0\"\n-arrayvec = \"0.5.1\"\n+arrayvec = \"0.6\"\n smallvec = \"1.2.0\"\n ena = \"0.14.0\"\n log = \"0.4.8\""}, {"sha": "51480304b422b3a361a2fcc02f2d57b1fc12efa4", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -1,8 +1,7 @@\n //! FIXME: write short doc here\n \n-use std::fmt;\n+use std::{array, fmt};\n \n-use arrayvec::ArrayVec;\n use chalk_ir::Mutability;\n use hir_def::{\n     db::DefDatabase,\n@@ -669,8 +668,7 @@ fn fn_traits(db: &dyn DefDatabase, trait_: TraitId) -> impl Iterator<Item = Trai\n         db.lang_item(krate, \"fn_mut\".into()),\n         db.lang_item(krate, \"fn_once\".into()),\n     ];\n-    // FIXME: Replace ArrayVec when into_iter is a thing on arrays\n-    ArrayVec::from(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n+    array::IntoIter::new(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n }\n \n pub fn write_bounds_like_dyn_trait_with_prefix("}, {"sha": "bf7d5eded218f219417748e10ddf4e815382c1da", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -228,12 +228,12 @@ impl Ty {\n         &self,\n         db: &dyn HirDatabase,\n         cur_crate: CrateId,\n-    ) -> Option<ArrayVec<[CrateId; 2]>> {\n+    ) -> Option<ArrayVec<CrateId, 2>> {\n         // Types like slice can have inherent impls in several crates, (core and alloc).\n         // The corresponding impls are marked with lang items, so we can use them to find the required crates.\n         macro_rules! lang_item_crate {\n             ($($name:expr),+ $(,)?) => {{\n-                let mut v = ArrayVec::<[LangItemTarget; 2]>::new();\n+                let mut v = ArrayVec::<LangItemTarget, 2>::new();\n                 $(\n                     v.extend(db.lang_item(cur_crate, $name.into()));\n                 )+"}, {"sha": "9f01acc264b2bfec50385430f06a8ce54b4eff79", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -16,7 +16,7 @@ itertools = \"0.10.0\"\n rowan = \"0.13.0-pre.3\"\n rustc_lexer = { version = \"710.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n-arrayvec = \"0.5.1\"\n+arrayvec = \"0.6\"\n once_cell = \"1.3.1\"\n indexmap = \"1.4.0\"\n smol_str = { version = \"0.1.15\", features = [\"serde\"] }"}, {"sha": "2d1d08fba27be90dd24cd2a41ed1bae2aa9d0a67", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9787bddac577a6aa24388fb91286474a7a8cf0bc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=9787bddac577a6aa24388fb91286474a7a8cf0bc", "patch": "@@ -32,7 +32,7 @@ impl ast::BinExpr {\n impl ast::Fn {\n     #[must_use]\n     pub fn with_body(&self, body: ast::BlockExpr) -> ast::Fn {\n-        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 2> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()\n         } else if let Some(semi) = self.semicolon_token() {\n@@ -55,7 +55,7 @@ impl ast::Fn {\n \n         let anchor = self.name().expect(\"The function must have a name\").syntax().clone();\n \n-        let mut to_insert: ArrayVec<[SyntaxElement; 1]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 1> = ArrayVec::new();\n         to_insert.push(generic_args.syntax().clone().into());\n         self.insert_children(InsertPosition::After(anchor.into()), to_insert)\n     }\n@@ -96,7 +96,7 @@ where\n impl ast::Impl {\n     #[must_use]\n     pub fn with_assoc_item_list(&self, items: ast::AssocItemList) -> ast::Impl {\n-        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 2> = ArrayVec::new();\n         if let Some(old_items) = self.assoc_item_list() {\n             let to_replace: SyntaxElement = old_items.syntax().clone().into();\n             to_insert.push(items.syntax().clone().into());\n@@ -141,7 +141,7 @@ impl ast::AssocItemList {\n             },\n         };\n         let ws = tokens::WsBuilder::new(&format!(\"{}{}\", whitespace, indent));\n-        let to_insert: ArrayVec<[SyntaxElement; 2]> =\n+        let to_insert: ArrayVec<SyntaxElement, 2> =\n             [ws.ws().into(), item.syntax().clone().into()].into();\n         self.insert_children(position, to_insert)\n     }\n@@ -192,7 +192,7 @@ impl ast::RecordExprFieldList {\n             tokens::single_space()\n         };\n \n-        let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 4> = ArrayVec::new();\n         to_insert.push(space.into());\n         to_insert.push(field.syntax().clone().into());\n         to_insert.push(make::token(T![,]).into());\n@@ -305,7 +305,7 @@ impl ast::PathSegment {\n                 iter::once(type_args.syntax().clone().into()),\n             );\n         }\n-        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 2> = ArrayVec::new();\n         if turbo {\n             to_insert.push(make::token(T![::]).into());\n         }\n@@ -444,7 +444,7 @@ impl ast::MatchArmList {\n         let arm_ws = tokens::WsBuilder::new(\"    \");\n         let match_indent = &leading_indent(self.syntax()).unwrap_or_default();\n         let match_ws = tokens::WsBuilder::new(&format!(\"\\n{}\", match_indent));\n-        let to_insert: ArrayVec<[SyntaxElement; 3]> =\n+        let to_insert: ArrayVec<SyntaxElement, 3> =\n             [arm_ws.ws().into(), item.syntax().clone().into(), match_ws.ws().into()].into();\n         self.insert_children(position, to_insert)\n     }\n@@ -465,7 +465,7 @@ impl ast::GenericParamList {\n     pub fn append_param(&self, item: ast::GenericParam) -> ast::GenericParamList {\n         let space = tokens::single_space();\n \n-        let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n+        let mut to_insert: ArrayVec<SyntaxElement, 4> = ArrayVec::new();\n         if self.generic_params().next().is_some() {\n             to_insert.push(space.into());\n         }"}]}