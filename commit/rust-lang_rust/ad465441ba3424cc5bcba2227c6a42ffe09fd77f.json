{"sha": "ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDY1NDQxYmEzNDI0Y2M1YmNiYTIyMjdjNmE0MmZmZTA5ZmQ3N2Y=", "commit": {"author": {"name": "reedlepee", "email": "reedlepee123@gmail.com", "date": "2013-10-20T03:26:42Z"}, "committer": {"name": "reedlepee", "email": "reedlepee123@gmail.com", "date": "2013-10-22T19:40:50Z"}, "message": "Removed Unnecessary comments and white spaces  #4386", "tree": {"sha": "6ee335e4b7e144450fdc2e1d729602cc5a70148e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ee335e4b7e144450fdc2e1d729602cc5a70148e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "html_url": "https://github.com/rust-lang/rust/commit/ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/comments", "author": {"login": "reedlepee123", "id": 5721031, "node_id": "MDQ6VXNlcjU3MjEwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5721031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedlepee123", "html_url": "https://github.com/reedlepee123", "followers_url": "https://api.github.com/users/reedlepee123/followers", "following_url": "https://api.github.com/users/reedlepee123/following{/other_user}", "gists_url": "https://api.github.com/users/reedlepee123/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedlepee123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedlepee123/subscriptions", "organizations_url": "https://api.github.com/users/reedlepee123/orgs", "repos_url": "https://api.github.com/users/reedlepee123/repos", "events_url": "https://api.github.com/users/reedlepee123/events{/privacy}", "received_events_url": "https://api.github.com/users/reedlepee123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reedlepee123", "id": 5721031, "node_id": "MDQ6VXNlcjU3MjEwMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5721031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reedlepee123", "html_url": "https://github.com/reedlepee123", "followers_url": "https://api.github.com/users/reedlepee123/followers", "following_url": "https://api.github.com/users/reedlepee123/following{/other_user}", "gists_url": "https://api.github.com/users/reedlepee123/gists{/gist_id}", "starred_url": "https://api.github.com/users/reedlepee123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reedlepee123/subscriptions", "organizations_url": "https://api.github.com/users/reedlepee123/orgs", "repos_url": "https://api.github.com/users/reedlepee123/repos", "events_url": "https://api.github.com/users/reedlepee123/events{/privacy}", "received_events_url": "https://api.github.com/users/reedlepee123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ada7c7ffe453b9df849996f8dca0b8d0f2d9e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ada7c7ffe453b9df849996f8dca0b8d0f2d9e62", "html_url": "https://github.com/rust-lang/rust/commit/0ada7c7ffe453b9df849996f8dca0b8d0f2d9e62"}], "stats": {"total": 765, "additions": 226, "deletions": 539}, "files": [{"sha": "2e394014c33b7a4c30df0525d1d981c19044d490", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -50,7 +50,6 @@ use std::borrow;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'self> {\n-    // all were already priv\n     priv is_mutex: bool,\n     priv failed: &'self mut bool,\n     priv cond: &'self sync::Condvar<'self>\n@@ -109,7 +108,6 @@ impl<'self> Condvar<'self> {\n  ****************************************************************************/\n \n /// An atomically reference counted wrapper for shared immutable state.\n-// all were already priv\n pub struct Arc<T> { priv x: UnsafeArc<T> }\n \n \n@@ -164,7 +162,6 @@ struct MutexArcInner<T> { priv lock: Mutex, priv failed: bool, priv data: T }\n \n /// An Arc with mutable data protected by a blocking mutex.\n #[no_freeze]\n-//All were already priv\n pub struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n \n \n@@ -347,7 +344,6 @@ struct RWArcInner<T> { priv lock: RWLock, priv failed: bool, priv data: T }\n  */\n #[no_freeze]\n pub struct RWArc<T> {\n-    // all were already priv\n     priv x: UnsafeArc<RWArcInner<T>>,\n }\n \n@@ -526,15 +522,13 @@ fn borrow_rwlock<T:Freeze + Send>(state: *mut RWArcInner<T>) -> *RWLock {\n /// The \"write permission\" token used for RWArc.write_downgrade().\n pub struct RWWriteMode<'self, T> {\n \n-/// reedlepee added priv in all the feilds below\n     priv data: &'self mut T,\n     priv token: sync::RWLockWriteMode<'self>,\n     priv poison: PoisonOnFail,\n }\n \n /// The \"read permission\" token used for RWArc.write_downgrade().\n pub struct RWReadMode<'self, T> {\n-/// reedlepee added priv in all the feilds below\n     priv data: &'self T,\n     priv token: sync::RWLockReadMode<'self>,\n }"}, {"sha": "b684e0d429e316b94ecd92f14ec04441eb93de1d", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -62,7 +62,6 @@ pub struct Arena {\n     // The head is separated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n-/// no change  by reedlepee all were already priv\n     priv head: Chunk,\n     priv pod_head: Chunk,\n     priv chunks: @mut MutList<Chunk>,"}, {"sha": "15b932677535086b352dd1a22685ec4f630eb918", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -21,7 +21,6 @@ pub enum CharacterSet {\n \n /// Contains configuration parameters for `to_base64`.\n pub struct Config {\n-    /// all were made priv by reedlepee\n     /// Character set to use\n     priv char_set: CharacterSet,\n     /// True to pad output with `=` characters"}, {"sha": "96123ad75b250603a7dfa877773f33c25c833741", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -225,7 +225,6 @@ enum Op {Union, Intersect, Assign, Difference}\n /// The bitvector type\n #[deriving(Clone)]\n pub struct Bitv {\n-    /// all were made priv by reedlepee\n     /// Internal representation of the bit vector (small or large)\n     priv rep: BitvVariant,\n     /// The number of valid bits in the internal representation\n@@ -574,7 +573,6 @@ fn iterate_bits(base: uint, bits: uint, f: &fn(uint) -> bool) -> bool {\n \n /// An iterator for `Bitv`.\n pub struct BitvIterator<'self> {\n-    /// all were already priv\n     priv bitv: &'self Bitv,\n     priv next_idx: uint,\n     priv end_idx: uint,\n@@ -636,7 +634,6 @@ impl<'self> RandomAccessIterator<bool> for BitvIterator<'self> {\n /// as a `uint`.\n #[deriving(Clone)]\n pub struct BitvSet {\n-    // all were already priv!!\n     priv size: uint,\n \n     // In theory this is a `Bitv` instead of always a `BigBitv`, but knowing that\n@@ -903,7 +900,6 @@ impl BitvSet {\n }\n \n pub struct BitvSetIterator<'self> {\n-    // all were already priv\n     priv set: &'self BitvSet,\n     priv next_idx: uint\n }"}, {"sha": "bd3ce20742ed19e26382382585b7ebec9862afff", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -44,7 +44,6 @@ use std::util;\n  * The type representing a foreign chunk of memory\n  */\n pub struct CVec<T> {\n-    /// No change all were allready priv!!\n     priv base: *mut T,\n     priv len: uint,\n     priv rsrc: @DtorRes,"}, {"sha": "a31f27a288589d827cfc78f7752c632286429f8d", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -23,7 +23,6 @@ use std::comm;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T, U> {\n-// all were already priv\n     priv chan: Chan<T>,\n     priv port: Port<U>,\n }\n@@ -95,7 +94,6 @@ pub fn DuplexStream<T:Send,U:Send>()\n // all were already priv\n pub struct SyncChan<T> { priv duplex_stream: DuplexStream<T, ()> }\n /// An extension of `pipes::stream` that acknowledges each message received.\n-// all were already priv\n pub struct SyncPort<T> { priv duplex_stream: DuplexStream<(), T> }\n \n impl<T: Send> GenericChan<T> for SyncChan<T> {"}, {"sha": "97b82383d8432d2a9c420713f1f371a045a927e3", "filename": "src/libextra/crypto/cryptoutil.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fcryptoutil.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -284,7 +284,6 @@ macro_rules! impl_fixed_buffer( ($name:ident, $size:expr) => (\n \n /// A fixed size buffer of 64 bytes useful for cryptographic operations.\n pub struct FixedBuffer64 {\n-    // already priv\n     priv buffer: [u8, ..64],\n     priv buffer_idx: uint,\n }\n@@ -303,7 +302,6 @@ impl_fixed_buffer!(FixedBuffer64, 64)\n \n /// A fixed size buffer of 128 bytes useful for cryptographic operations.\n pub struct FixedBuffer128 {\n-    // already priv\n     priv buffer: [u8, ..128],\n     priv buffer_idx: uint,\n }"}, {"sha": "864fc64f82bec9af50535848e15389f0d777f387", "filename": "src/libextra/crypto/md5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fmd5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fmd5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fmd5.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -159,7 +159,6 @@ static C4: [u32, ..16] = [\n \n /// The MD5 Digest algorithm\n pub struct Md5 {\n-    // already priv\n     priv length_bytes: u64,\n     priv buffer: FixedBuffer64,\n     priv state: Md5State,"}, {"sha": "4d4d47feee817c0bb07f4136215d88c327ad027f", "filename": "src/libextra/crypto/sha1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha1.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -43,7 +43,6 @@ static K3: u32 = 0xCA62C1D6u32;\n \n /// Structure representing the state of a Sha1 computation\n pub struct Sha1 {\n-    // already priv\n     priv h: [u32, ..DIGEST_BUF_LEN],\n     priv length_bits: u64,\n     priv buffer: FixedBuffer64,"}, {"sha": "fb9a6df50e48c21df37b6f4e3b46ba8c2184e52c", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -234,7 +234,6 @@ impl Engine512 {\n \n /// The SHA-512 hash algorithm\n pub struct Sha512 {\n-    // already priv\n     priv engine: Engine512\n }\n \n@@ -288,7 +287,6 @@ static H512: [u64, ..8] = [\n \n /// The SHA-384 hash algorithm\n pub struct Sha384 {\n-    // already priv\n     priv engine: Engine512\n }\n \n@@ -340,7 +338,6 @@ static H384: [u64, ..8] = [\n \n /// The SHA-512 hash algorithm with digest truncated to 256 bits\n pub struct Sha512Trunc256 {\n-    // already priv\n     priv engine: Engine512\n }\n \n@@ -390,7 +387,6 @@ static H512_TRUNC_256: [u64, ..8] = [\n \n /// The SHA-512 hash algorithm with digest truncated to 224 bits\n pub struct Sha512Trunc224 {\n-    // already priv\n     priv engine: Engine512\n }\n \n@@ -647,7 +643,6 @@ impl Engine256 {\n \n /// The SHA-256 hash algorithm\n pub struct Sha256 {\n-    // already priv\n     priv engine: Engine256\n }\n \n@@ -701,7 +696,6 @@ static H256: [u32, ..8] = [\n \n /// The SHA-224 hash algorithm\n pub struct Sha224 {\n-    // already priv\n     priv engine: Engine256\n }\n "}, {"sha": "f29cbd6ee5294cdb70f6662ca05d8249af914a24", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -32,7 +32,6 @@ use container::Deque;\n \n /// A doubly-linked list.\n pub struct DList<T> {\n-    // all were already priv\n     priv length: uint,\n     priv list_head: Link<T>,\n     priv list_tail: Rawlink<Node<T>>,\n@@ -50,15 +49,13 @@ struct Node<T> {\n /// Double-ended DList iterator\n #[deriving(Clone)]\n pub struct DListIterator<'self, T> {\n-    // all were already priv\n     priv head: &'self Link<T>,\n     priv tail: Rawlink<Node<T>>,\n     priv nelem: uint,\n }\n \n /// Double-ended mutable DList iterator\n pub struct MutDListIterator<'self, T> {\n-    // all were already priv\n     priv list: &'self mut DList<T>,\n     priv head: Rawlink<Node<T>>,\n     priv tail: Rawlink<Node<T>>,\n@@ -68,7 +65,6 @@ pub struct MutDListIterator<'self, T> {\n /// DList consuming iterator\n #[deriving(Clone)]\n pub struct MoveIterator<T> {\n-    // all were already priv\n     priv list: DList<T>\n }\n "}, {"sha": "3612b256f1b377b69f4d02492eb7073665f601ef", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -30,7 +30,6 @@ struct EbmlState {\n \n #[deriving(Clone)]\n pub struct Doc {\n-    // all these should be public\n     data: @~[u8],\n     start: uint,\n     end: uint,\n@@ -51,9 +50,7 @@ impl Doc {\n }\n \n pub struct TaggedDoc {\n-    // was made privv by reedlepee\n     priv tag: uint,\n-    // should be public\n     doc: Doc,\n }\n \n@@ -287,7 +284,6 @@ pub mod reader {\n     pub fn doc_as_i64(d: Doc) -> i64 { doc_as_u64(d) as i64 }\n \n     pub struct Decoder {\n-        // all were already  priv\n         priv parent: Doc,\n         priv pos: uint,\n     }\n@@ -622,9 +618,7 @@ pub mod writer {\n \n     // ebml writing\n     pub struct Encoder {\n-    /// should be public!!\n     writer: @io::Writer,\n-    /// this was already privv!!\n     priv size_positions: ~[uint],\n     }\n "}, {"sha": "da9e0a225ba1b47f9b35410912274b9db328e474", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -18,7 +18,6 @@\n pub struct EnumSet<E> {\n     // We must maintain the invariant that no bits are set\n     // for which no variant exists\n-    // all were already priv\n     priv bits: uint\n }\n \n@@ -101,7 +100,6 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n \n /// An iterator over an EnumSet\n pub struct EnumSetIterator<E> {\n-    // all were already priv\n     priv index: uint,\n     priv bits: uint,\n }"}, {"sha": "112babf271bc848bebb998b183e760e371d0b6b3", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -109,7 +109,6 @@ file is `stdin`.\n */\n #[deriving(Clone)]\n pub struct FileInputState {\n-    // all were priv made by reedlepee\n     priv current_path: Option<Path>,\n     priv line_num: uint,\n     priv line_num_file: uint\n@@ -156,7 +155,6 @@ struct FileInput_ {\n // \"self.fi\" -> \"self.\" and renaming FileInput_. Documentation above\n // will likely have to be updated to use `let mut in = ...`.\n pub struct FileInput  {\n-/// all were made priv by reedlepee\n     priv fi: @mut FileInput_\n }\n "}, {"sha": "fdb296e5f403b3d84693bd59158047257d146270", "filename": "src/libextra/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -32,7 +32,6 @@ use std::util::replace;\n \n /// A type encapsulating the result of a computation which may not be complete\n pub struct Future<A> {\n-    // all were already privv!!\n     priv state: FutureState<A>,\n }\n "}, {"sha": "3663b5c8d0842cc3c1f9e02f4df79175684f585e", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -112,8 +112,6 @@ pub enum Occur {\n /// A description of a possible option.\n #[deriving(Clone, Eq)]\n pub struct Opt {\n-\n-    /// reedlepee added priv infront of them!!\n     /// Name of the option\n     name: Name,\n     /// Wheter it has an argument...  should be public!!\n@@ -136,7 +134,6 @@ enum Optval {\n #[deriving(Clone, Eq)]\n pub struct Matches {\n \n-/// reedlepee added priv infront of all\n     /// Options that matched\n     priv opts: ~[Opt],\n     /// Values of the Options that matched"}, {"sha": "5297b48b0e156719c83ccb3a127128cf66b5b1b2", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -33,7 +33,6 @@ use sort;\n  * pattern - see the `glob` function for more details.\n  */\n pub struct GlobIterator {\n-    /// no change by reedlepee all were priv already!!\n     priv root: Path,\n     priv dir_patterns: ~[Pattern],\n     priv options: MatchOptions,\n@@ -157,7 +156,6 @@ fn list_dir_sorted(path: &Path) -> ~[Path] {\n  */\n #[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Default)]\n pub struct Pattern {\n-    // already priv\n     priv tokens: ~[PatternToken]\n }\n \n@@ -476,7 +474,6 @@ fn chars_eq(a: char, b: char, case_sensitive: bool) -> bool {\n  */\n #[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Default)]\n pub struct MatchOptions {\n-/// all were made priv  by reedlepee\n \n     /**\n      * Whether or not patterns should be matched in a case-sensitive manner. This"}, {"sha": "27a09be3a625b81fd1122fcc236317daeca59652", "filename": "src/libextra/io_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fio_util.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -16,7 +16,6 @@ use std::cast;\n \n /// An implementation of the io::Reader interface which reads a buffer of bytes\n pub struct BufReader {\n-    // all were made priv by reedlepee\n     /// The buffer of bytes to read\n     priv buf: ~[u8],\n     /// The current position in the buffer of bytes"}, {"sha": "90260282e4b5b87beedda504f0add0c56ea214e8", "filename": "src/libextra/json.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -48,7 +48,6 @@ pub type Object = TreeMap<~str, Json>;\n /// If an error occurs while parsing some JSON, this is the structure which is\n /// returned\n pub struct Error {\n-    // all were made privv by reedlepee\n     /// The line number at which the error occurred\n     priv line: uint,\n     /// The column number at which the error occurred\n@@ -87,7 +86,6 @@ fn spaces(n: uint) -> ~str {\n \n /// A structure for implementing serialization to JSON.\n pub struct Encoder {\n-    // all were already priv\n     priv wr: @io::Writer,\n }\n \n@@ -245,7 +243,6 @@ impl serialize::Encoder for Encoder {\n /// Another encoder for JSON, but prints out human-readable JSON instead of\n /// compact data\n pub struct PrettyEncoder {\n-    // all were already priv\n     priv wr: @io::Writer,\n     priv indent: uint,\n }\n@@ -482,7 +479,6 @@ impl Json{\n }\n \n pub struct Parser<T> {\n-    // all were already priv\n     priv rdr: ~T,\n     priv ch: char,\n     priv line: uint,\n@@ -872,7 +868,6 @@ pub fn from_str(s: &str) -> Result<Json, Error> {\n \n /// A structure to decode JSON to values in rust.\n pub struct Decoder {\n-    // all were already priv\n     priv stack: ~[Json],\n }\n "}, {"sha": "cd5ccc14cafb1a52169503c54ae633779d4aafd2", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -86,7 +86,6 @@ A `BigUint`-typed value `BigUint { data: @[a, b, c] }` represents a number\n */\n #[deriving(Clone)]\n pub struct BigUint {\n-    // already priv\n     priv data: ~[BigDigit]\n }\n \n@@ -894,7 +893,6 @@ impl Neg<Sign> for Sign {\n /// A big signed integer type.\n #[deriving(Clone)]\n pub struct BigInt {\n-    // already priv\n     priv sign: Sign,\n     priv data: BigUint\n }"}, {"sha": "021a069fbbe730139a5f435255ffd6ea7a62d0fb", "filename": "src/libextra/num/complex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fcomplex.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -24,7 +24,6 @@ use std::num::{Zero,One,ToStrRadix};\n /// A complex number in Cartesian form.\n #[deriving(Eq,Clone)]\n pub struct Cmplx<T> {\n-    // all made real by reedlepee\n     /// Real portion of the complex number\n     priv re: T,\n     /// Imaginary portion of the complex number"}, {"sha": "bdec950c87bca5a176f048520ad1bd31987c1c37", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -20,7 +20,6 @@ use super::bigint::BigInt;\n #[deriving(Clone)]\n #[allow(missing_doc)]\n pub struct Ratio<T> {\n-    // made priv by reedlepee\n     priv numer: T,\n     priv denom: T\n }"}, {"sha": "587f83720877d23ab1184d4c447c21a7321d643e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -20,7 +20,6 @@ use std::vec;\n /// A priority queue implemented with a binary heap\n #[deriving(Clone)]\n pub struct PriorityQueue<T> {\n-    // all were already priv\n     priv data: ~[T],\n }\n \n@@ -179,7 +178,6 @@ impl<T:Ord> PriorityQueue<T> {\n \n /// PriorityQueue iterator\n pub struct PriorityQueueIterator <'self, T> {\n-    // all were already priv\n     priv iter: vec::VecIterator<'self, T>,\n }\n "}, {"sha": "e7032db5a9195d05ef79664598da7571fcaa48a0", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -25,7 +25,6 @@ static MINIMUM_CAPACITY: uint = 2u;\n /// RingBuf is a circular buffer that implements Deque.\n #[deriving(Clone)]\n pub struct RingBuf<T> {\n-    // all were already priv\n     priv nelts: uint,\n     priv lo: uint,\n     priv elts: ~[Option<T>]\n@@ -249,7 +248,6 @@ macro_rules! iterator_rev {\n \n /// RingBuf iterator\n pub struct RingBufIterator<'self, T> {\n-    // all were already priv\n     priv lo: uint,\n     priv index: uint,\n     priv rindex: uint,\n@@ -277,7 +275,6 @@ impl<'self, T> RandomAccessIterator<&'self T> for RingBufIterator<'self, T> {\n \n /// RingBuf mutable iterator\n pub struct RingBufMutIterator<'self, T> {\n-    // all were already priv\n     priv lo: uint,\n     priv index: uint,\n     priv rindex: uint,"}, {"sha": "02c35000ce3a4320bf280376492d7e8fe6290d0e", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -70,7 +70,6 @@ impl ToStr for Identifier {\n /// Represents a version number conforming to the semantic versioning scheme.\n #[deriving(Clone, Eq)]\n pub struct Version {\n-    /// reedlepee added priv in all\n     /// The major version, to be incremented on incompatible changes.\n     priv major: uint,\n     /// The minor version, to be incremented when functionality is added in a"}, {"sha": "0ca0ff66039d859fbc1763d316c56f17b32fd3d5", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -22,7 +22,6 @@ use std::vec;\n \n #[allow(missing_doc)]\n pub struct SmallIntMap<T> {\n-    /// all were already priv!!\n     priv v: ~[Option<T>],\n }\n \n@@ -234,7 +233,6 @@ macro_rules! double_ended_iterator {\n }\n \n pub struct SmallIntMapIterator<'self, T> {\n-    /// all were already priv!!\n     priv front: uint,\n     priv back: uint,\n     priv iter: VecIterator<'self, Option<T>>\n@@ -245,7 +243,6 @@ double_ended_iterator!(impl SmallIntMapIterator -> (uint, &'self T), get_ref)\n pub type SmallIntMapRevIterator<'self, T> = Invert<SmallIntMapIterator<'self, T>>;\n \n pub struct SmallIntMapMutIterator<'self, T> {\n-    /// all were already priv!!\n     priv front: uint,\n     priv back: uint,\n     priv iter: VecMutIterator<'self, Option<T>>"}, {"sha": "40f99716ca796832054a69181e0df72f333a1980", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -105,7 +105,6 @@ pub trait Stats {\n #[deriving(Clone, Eq)]\n #[allow(missing_doc)]\n pub struct Summary {\n-  /// all were made privv by reedlepee\n     priv sum: f64,\n     // public\n     min: f64,"}, {"sha": "9a53fd639c51353dffa85a15057abe39cb8d2879", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -168,7 +168,6 @@ enum ReacquireOrderLock<'self> {\n /// A mechanism for atomic-unlock-and-deschedule blocking and signalling.\n pub struct Condvar<'self> {\n \n-    // reedlepee didnot change anything they were already priv!!!\n \n     // The 'Sem' object associated with this condvar. This is the one that's\n     // atomically-unlocked-and-descheduled upon and reacquired during wakeup.\n@@ -380,7 +379,6 @@ impl Semaphore {\n  * unwinds.\n  */\n \n-// reedlepee did not change !!\n pub struct Mutex { priv sem: Sem<~[WaitQueue]> }\n impl Clone for Mutex {\n     /// Create a new handle to the mutex.\n@@ -448,7 +446,6 @@ struct RWLockInner {\n  * unwinds.\n  */\n pub struct RWLock {\n-    // reedlepee did not change they were already priv!!\n     priv order_lock:  Semaphore,\n     priv access_lock: Sem<~[WaitQueue]>,\n     priv state:       UnsafeArc<RWLockInner>,\n@@ -669,11 +666,9 @@ impl RWLock {\n \n /// The \"write permission\" token used for rwlock.write_downgrade().\n \n-// already priv\n pub struct RWLockWriteMode<'self> { priv lock: &'self RWLock, priv token: NonCopyable }\n \n /// The \"read permission\" token used for rwlock.write_downgrade().\n-// already priv\n pub struct RWLockReadMode<'self> { priv lock: &'self RWLock,\n                                    priv token: NonCopyable }\n "}, {"sha": "f7db66dc4e0c491253d5342b7b304c6b00a08024", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -28,7 +28,6 @@ enum Msg<T> {\n }\n \n pub struct TaskPool<T> {\n-    /// all were made priv by reedlepee\n     priv channels: ~[Chan<Msg<T>>],\n     priv next_index: uint,\n }"}, {"sha": "d8fa130916a46a437d4c3f613583bb790569afed", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -18,7 +18,6 @@ use std::rand;\n /// A wrapper for a path to temporary directory implementing automatic\n /// scope-pased deletion.\n pub struct TempDir {\n-    // all were already priv!!\n     priv path: Option<Path>\n }\n "}, {"sha": "6bef136f41498583ca9a9f98df472ca7cb6a29aa", "filename": "src/libextra/term.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -96,18 +96,14 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n #[cfg(not(target_os = \"win32\"))]\n pub struct Terminal {\n \n-// this was made priv by reedlepee\n     priv num_colors: u16,\n-    // These were already priv\n     priv out: @io::Writer,\n     priv ti: ~TermInfo\n }\n \n #[cfg(target_os = \"win32\")]\n pub struct Terminal {\n-    // this was made priv by reedlepee\n     priv num_colors: u16,\n-   // These were already priv\n     priv out: @io::Writer,\n }\n "}, {"sha": "c0a5d9d53aa9eb915d8818ad1c6b077d4e72daa3", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -47,7 +47,6 @@ pub enum Param {\n \n /// Container for static and dynamic variable arrays\n pub struct Variables {\n-    // made priv by redlpee\n     /// Static variables A-Z\n     priv sta: [Param, ..26],\n     /// Dynamic variables a-z"}, {"sha": "06bf6e47c329107bd7651e0c215805e467bce4eb", "filename": "src/libextra/terminfo/terminfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fterminfo%2Fterminfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fterminfo.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -14,7 +14,6 @@ use std::hashmap::HashMap;\n \n /// A parsed terminfo entry.\n pub struct TermInfo {\n-    // made priv by redlpee\n     /// Names for the terminal\n     priv names: ~[~str],\n     /// Map of capability name to boolean value"}, {"sha": "f95c7aa22b7f0407f8c511d2e66dc1be38e70edc", "filename": "src/libextra/test.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -102,39 +102,33 @@ impl TestFn {\n \n // Structure passed to BenchFns\n pub struct BenchHarness {\n-    // all changed to priv by reedlepee\n     priv iterations: u64,\n     priv ns_start: u64,\n     priv ns_end: u64,\n-    // should be public\n     bytes: u64\n }\n \n // The definition of a single test. A test runner will run a list of\n // these.\n #[deriving(Clone)]\n pub struct TestDesc {\n-    // all changed to priv by reedlepee\n     name: TestName,\n     ignore: bool,\n     should_fail: bool\n }\n \n pub struct TestDescAndFn {\n-    // all changed to priv by reedlepee\n     desc: TestDesc,\n     testfn: TestFn,\n }\n \n #[deriving(Clone, Encodable, Decodable, Eq)]\n pub struct Metric {\n-    // all changed to priv by reedlepee\n     priv value: f64,\n     priv noise: f64\n }\n \n #[deriving(Eq)]\n-/// not adding priv infront of this struct b/c its a tuple struct!! - reedlepee\n pub struct MetricMap(TreeMap<~str,Metric>);\n \n impl Clone for MetricMap {\n@@ -192,7 +186,6 @@ pub fn test_main_static(args: &[~str], tests: &[TestDescAndFn]) {\n }\n \n pub struct TestOpts {\n-    /// priv added in all by reedlepee!!\n     filter: Option<~str>,\n     run_ignored: bool,\n     run_tests: bool,\n@@ -329,7 +322,6 @@ pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n \n #[deriving(Clone, Eq)]\n pub struct BenchSamples {\n-    /// priv added in all by reedlepee\n     priv ns_iter_summ: stats::Summary,\n     priv mb_s: uint\n }"}, {"sha": "71569be3a8192e622540ffa89ffcdbc307066274", "filename": "src/libextra/time.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -32,7 +32,6 @@ pub mod rustrt {\n \n /// A record specifying a time value in seconds and nanoseconds.\n \n-/// all were made priv reedlepee\n \n #[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n pub struct Timespec { priv sec: i64, priv nsec: i32 }\n@@ -107,7 +106,6 @@ pub fn tzset() {\n \n #[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n pub struct Tm {\n-    /// all were made priv by reedlepee\n     priv tm_sec: i32, // seconds after the minute ~[0-60]\n     priv tm_min: i32, // minutes after the hour ~[0-59]\n     priv tm_hour: i32, // hours after midnight ~[0-23]"}, {"sha": "ad196b32fb2cafc84b3cf3631bda1ddf80a3504e", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -36,7 +36,6 @@ use std::cmp::Ordering;\n #[allow(missing_doc)]\n #[deriving(Clone)]\n pub struct TreeMap<K, V> {\n-    /// all were already priv!!\n     priv root: Option<~TreeNode<K, V>>,\n     priv length: uint\n }\n@@ -230,7 +229,6 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n \n /// Lazy forward iterator over a map\n pub struct TreeMapIterator<'self, K, V> {\n-    // all were already priv\n     priv stack: ~[&'self ~TreeNode<K, V>],\n     priv node: &'self Option<~TreeNode<K, V>>,\n     priv remaining_min: uint,\n@@ -277,7 +275,6 @@ impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V\n \n /// Lazy backward iterator over a map\n pub struct TreeMapRevIterator<'self, K, V> {\n-    // all were  already priv\n     priv iter: TreeMapIterator<'self, K, V>,\n }\n \n@@ -336,7 +333,6 @@ fn iter_traverse_complete<'a, K, V>(it: &mut TreeMapIterator<'a, K, V>) {\n \n /// Lazy forward iterator over a map that consumes the map while iterating\n pub struct TreeMapMoveIterator<K, V> {\n-    // all were laready priv!!\n     priv stack: ~[TreeNode<K, V>],\n     priv remaining: uint\n }\n@@ -405,7 +401,6 @@ impl<'self, T> Iterator<&'self T> for TreeSetRevIterator<'self, T> {\n /// only requirement is that the type of the elements contained ascribes to the\n /// `TotalOrd` trait.\n pub struct TreeSet<T> {\n-    //all were already priv\n     priv map: TreeMap<T, ()>\n }\n \n@@ -558,40 +553,34 @@ impl<T: TotalOrd> TreeSet<T> {\n \n /// Lazy forward iterator over a set\n pub struct TreeSetIterator<'self, T> {\n-    // all were already priv\n     priv iter: TreeMapIterator<'self, T, ()>\n }\n \n /// Lazy backward iterator over a set\n pub struct TreeSetRevIterator<'self, T> {\n-    // all were already priv\n     priv iter: TreeMapRevIterator<'self, T, ()>\n }\n \n /// Lazy iterator producing elements in the set difference (in-order)\n pub struct Difference<'self, T> {\n-    // all were already priv\n     priv a: Peekable<&'self T, TreeSetIterator<'self, T>>,\n     priv b: Peekable<&'self T, TreeSetIterator<'self, T>>,\n }\n \n /// Lazy iterator producing elements in the set symmetric difference (in-order)\n pub struct SymDifference<'self, T> {\n-    // all were already priv\n     priv a: Peekable<&'self T, TreeSetIterator<'self, T>>,\n     priv b: Peekable<&'self T, TreeSetIterator<'self, T>>,\n }\n \n /// Lazy iterator producing elements in the set intersection (in-order)\n pub struct Intersection<'self, T> {\n-    // all were already priv\n     priv a: Peekable<&'self T, TreeSetIterator<'self, T>>,\n     priv b: Peekable<&'self T, TreeSetIterator<'self, T>>,\n }\n \n /// Lazy iterator producing elements in the set intersection (in-order)\n pub struct Union<'self, T> {\n-    // all were already priv\n     priv a: Peekable<&'self T, TreeSetIterator<'self, T>>,\n     priv b: Peekable<&'self T, TreeSetIterator<'self, T>>,\n }"}, {"sha": "e836d3b52709cf8aa8547e0e240ddd0c75bcce77", "filename": "src/libextra/url.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Furl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Furl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Furl.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -22,21 +22,19 @@ use std::uint;\n \n #[deriving(Clone, Eq)]\n pub struct Url {\n-    // all were made privv bt reedlepee\n-    priv scheme: ~str,\n-    priv user: Option<UserInfo>,\n-    priv host: ~str,\n-    priv port: Option<~str>,\n-    priv path: ~str,\n-    priv query: Query,\n-    priv fragment: Option<~str>\n+    scheme: ~str,\n+    user: Option<UserInfo>,\n+    host: ~str,\n+    port: Option<~str>,\n+    path: ~str,\n+    query: Query,\n+    fragment: Option<~str>\n }\n \n #[deriving(Clone, Eq)]\n pub struct UserInfo {\n-    // all were made privv bt reedlepee\n-    priv user: ~str,\n-    priv pass: Option<~str>\n+    user: ~str,\n+    pass: Option<~str>\n }\n \n pub type Query = ~[(~str, ~str)];"}, {"sha": "345cf64f1281aa856d707b9f0a6f560029c27c63", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -102,7 +102,6 @@ pub enum UuidVariant {\n /// A Universally Unique Identifier (UUID)\n pub struct Uuid {\n     /// The 128-bit number stored in 16 bytes\n-    /// should be public\n     bytes: UuidBytes\n }\n "}, {"sha": "4d79b2059db5cd94b14d3d94418050563337d700", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -128,7 +128,6 @@ impl WorkMap {\n }\n \n pub struct Database {\n-    /// all were made by reedlepee\n     priv db_filename: Path,\n     priv db_cache: TreeMap<~str, ~str>,\n     db_dirty: bool\n@@ -210,7 +209,6 @@ impl Drop for Database {\n \n pub struct Logger {\n     // FIXME #4432: Fill in\n-    /// alll were made priv reeldepee\n     priv a: ()\n }\n \n@@ -229,7 +227,6 @@ pub type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n \n #[deriving(Clone)]\n pub struct Context {\n-//// all were made priv by reedlepee\n     db: RWArc<Database>,\n     priv logger: RWArc<Logger>,\n     priv cfg: Arc<json::Object>,\n@@ -243,14 +240,12 @@ pub struct Context {\n }\n \n pub struct Prep<'self> {\n-//// all were made priv by reedlepee\n     priv ctxt: &'self Context,\n     priv fn_name: &'self str,\n     priv declared_inputs: WorkMap,\n }\n \n pub struct Exec {\n-//// all were made priv by reedlepee\n     priv discovered_inputs: WorkMap,\n     priv discovered_outputs: WorkMap\n }"}, {"sha": "acfa02a4defd5f2782068673b135c83d927e15ce", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -92,7 +92,6 @@ condition! {\n /// This structure wraps a `*libc::c_char`, and will automatically free the\n /// memory it is pointing to when it goes out of scope.\n pub struct CString {\n-    // already priv\n     priv buf: *libc::c_char,\n     priv owns_buffer_: bool,\n }\n@@ -333,7 +332,6 @@ fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n ///\n /// Use with the `std::iterator` module.\n pub struct CStringIterator<'self> {\n-    // already priv\n     priv ptr: *libc::c_char,\n     priv lifetime: &'self libc::c_char, // FIXME: #5922\n }"}, {"sha": "a1459b780dfb3cd204d4d47bc8f1d04eb2da374e", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -26,7 +26,6 @@ Similar to a mutable option type, but friendlier.\n #[deriving(Clone, DeepClone, Eq)]\n #[allow(missing_doc)]\n pub struct Cell<T> {\n-    // already priv\n     priv value: Option<T>\n }\n "}, {"sha": "cb9552b189ce5b7fa99184bb694473501f5e8461", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -72,7 +72,6 @@ use unstable::raw::Closure;\n \n #[doc(hidden)]\n pub struct Handler<T, U> {\n-    //already priv\n     priv handle: Closure,\n     priv prev: Option<@Handler<T, U>>,\n }\n@@ -84,7 +83,6 @@ pub struct Handler<T, U> {\n /// This struct should never be created directly, but rather only through the\n /// `condition!` macro provided to all libraries using libstd.\n pub struct Condition<T, U> {\n-    // all made priv by reedlepee\n     /// Name of the condition handler\n     name: &'static str,\n     /// TLS key used to insert/remove values in TLS."}, {"sha": "e5188d737bdfed178ce4f2b249dda479a9f48d96", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -477,7 +477,6 @@ pub mod rt;\n /// should be formatted. A mutable version of this is passed to all formatting\n /// traits.\n pub struct Formatter<'self> {\n-    // made by reedlepee\n     /// Flags for formatting (packed version of rt::Flag)\n      flags: uint,\n     /// Character used as 'fill' whenever there is alignment\n@@ -502,7 +501,6 @@ pub struct Formatter<'self> {\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n pub struct Argument<'self> {\n-    // already priv\n     priv formatter: extern \"Rust\" fn(&util::Void, &mut Formatter),\n     priv value: &'self util::Void,\n }\n@@ -529,7 +527,6 @@ impl<'self> Arguments<'self> {\n /// string at compile-time so usage of the `write` and `format` functions can\n /// be safely performed.\n pub struct Arguments<'self> {\n-    // already priv\n     priv fmt: &'self [rt::Piece<'self>],\n     priv args: &'self [Argument<'self>],\n }"}, {"sha": "504050f9a771a73026cea8aa88c03ae6dd838504", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -38,20 +38,17 @@ pub enum Piece<'self> {\n /// Representation of an argument specification.\n #[deriving(Eq)]\n pub struct Argument<'self> {\n-    // made by reedlepee\n     /// Where to find this argument\n     position: Position<'self>,\n-    ///  How to format the argument\n+    /// How to format the argument\n     format: FormatSpec<'self>,\n     /// If not `None`, what method to invoke on the argument\n-    // should be public\n     method: Option<~Method<'self>>\n }\n \n /// Specification for the formatting of an argument in the format string.\n #[deriving(Eq)]\n pub struct FormatSpec<'self> {\n-    // made by reedlepee\n     /// Optionally specified character to fill alignment with\n     fill: Option<char>,\n     /// Optionally specified alignment\n@@ -128,7 +125,6 @@ pub enum Method<'self> {\n /// Structure representing one \"arm\" of the `plural` function.\n #[deriving(Eq)]\n pub struct PluralArm<'self> {\n-    // made by reedlepee\n     /// A selector can either be specified by a keyword or with an integer\n     /// literal.\n     selector: Either<PluralKeyword, uint>,\n@@ -149,7 +145,6 @@ pub enum PluralKeyword {\n /// Structure representing one \"arm\" of the `select` function.\n #[deriving(Eq)]\n pub struct SelectArm<'self> {\n-    // made by reedlepee\n     /// String selector which guards this arm\n     selector: &'self str,\n     /// Array of pieces which are the format of this arm\n@@ -163,7 +158,6 @@ pub struct SelectArm<'self> {\n /// This is a recursive-descent parser for the sake of simplicity, and if\n /// necessary there's probably lots of room for improvement performance-wise.\n pub struct Parser<'self> {\n-    // already priv\n     priv input: &'self str,\n     priv cur: str::CharOffsetIterator<'self>,\n     priv depth: uint,"}, {"sha": "d9a7557e55312f0fbcbb669cf7e5928a9ea0c5aa", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -29,14 +29,12 @@ pub enum Piece<'self> {\n }\n \n pub struct Argument<'self> {\n-    /// should be public\n     position: Position,\n     format: FormatSpec,\n     method: Option<&'self Method<'self>>\n }\n \n pub struct FormatSpec {\n-    /// made by redlepee\n     fill: char,\n     align: parse::Alignment,\n     flags: uint,\n@@ -58,13 +56,11 @@ pub enum Method<'self> {\n }\n \n pub struct PluralArm<'self> {\n-    /// made by redlepee\n     selector: Either<parse::PluralKeyword, uint>,\n     result: &'self [Piece<'self>],\n }\n \n pub struct SelectArm<'self> {\n-    /// made by redlepee\n     selector: &'self str,\n     result: &'self [Piece<'self>],\n }"}, {"sha": "edefd39ebb4d1c62f7be6b50d99dffcaa468e333", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -48,7 +48,6 @@ struct Bucket<K,V> {\n /// `IterBytes` traits as `Hash` is automatically implemented for types that\n /// implement `IterBytes`.\n pub struct HashMap<K,V> {\n-    // already priv\n     priv k0: u64,\n     priv k1: u64,\n     priv resize_at: uint,\n@@ -518,32 +517,27 @@ impl<K:Hash + Eq + Clone,V:Clone> Clone for HashMap<K,V> {\n /// HashMap iterator\n #[deriving(Clone)]\n pub struct HashMapIterator<'self, K, V> {\n-    // already priv\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, V>>>,\n }\n \n /// HashMap mutable values iterator\n pub struct HashMapMutIterator<'self, K, V> {\n-    // already priv\n     priv iter: vec::VecMutIterator<'self, Option<Bucket<K, V>>>,\n }\n \n /// HashMap move iterator\n pub struct HashMapMoveIterator<K, V> {\n-    // already priv\n     priv iter: vec::MoveRevIterator<Option<Bucket<K, V>>>,\n }\n \n /// HashSet iterator\n #[deriving(Clone)]\n pub struct HashSetIterator<'self, K> {\n-    // already priv\n     priv iter: vec::VecIterator<'self, Option<Bucket<K, ()>>>,\n }\n \n /// HashSet move iterator\n pub struct HashSetMoveIterator<K> {\n-    // already priv\n     priv iter: vec::MoveRevIterator<Option<Bucket<K, ()>>>,\n }\n \n@@ -637,7 +631,6 @@ impl<K: Eq + Hash, V> Default for HashMap<K, V> {\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n /// requires that the elements implement the `Eq` and `Hash` traits.\n pub struct HashSet<T> {\n-    // already priv\n     priv map: HashMap<T, ()>\n }\n "}, {"sha": "922150cb279f57c3a50cf8c67780a8a0746c9005", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -1009,7 +1009,6 @@ impl<R:Reader,C> Reader for Wrapper<R, C> {\n }\n \n pub struct FILERes {\n-    // all by reedlepee\n     priv f: *libc::FILE,\n }\n \n@@ -1081,7 +1080,6 @@ pub fn file_reader(path: &Path) -> Result<@Reader, ~str> {\n \n // Byte readers\n pub struct BytesReader {\n-    // all by reedlepee\n     // FIXME(#5723) see other FIXME below\n     // FIXME(#7268) this should also be parameterized over <'self>\n     bytes: &'static [u8],\n@@ -1284,7 +1282,6 @@ impl Writer for fd_t {\n }\n \n pub struct FdRes {\n-    // all by reedlepee\n     priv fd: fd_t,\n }\n \n@@ -1677,7 +1674,6 @@ pub fn println(s: &str) {\n }\n \n pub struct BytesWriter {\n-    // all by reedlepee\n     bytes: @mut ~[u8],\n     pos: @mut uint,\n }\n@@ -1796,7 +1792,6 @@ pub mod fsync {\n \n     // Artifacts that need to fsync on destruction\n     pub struct Res<t> {\n-        // all by reedlepee\n         priv arg: Arg<t>,\n     }\n \n@@ -1820,7 +1815,6 @@ pub mod fsync {\n     }\n \n     pub struct Arg<t> {\n-       // all by reedlepee\n        priv val: t,\n        priv opt_level: Option<Level>,\n        priv fsync_fn: extern \"Rust\" fn(f: &t, Level) -> int,"}, {"sha": "e854d338f547b142b857e1f1e6a2f6b240908c47", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -765,8 +765,6 @@ impl<A, B, T: ExactSize<A>, U: ExactSize<B>> ExactSize<(A, B)> for Zip<T, U> {}\n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n pub struct Invert<T> {\n-    // already priv\n-    // already priv\n     priv iter: T\n }\n "}, {"sha": "d4df0e826f604b8bc9c5099c068afd371312bb0d", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 179, "deletions": 197, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -226,16 +226,15 @@ pub mod types {\n                 use libc::types::common::c95::{c_void};\n                 use libc::types::os::arch::c95::{c_char, size_t};\n                 pub struct glob_t {\n-                    // all made by reedlepee\n-                    priv gl_pathc: size_t,\n-                    priv gl_pathv: **c_char,\n-                    priv gl_offs:  size_t,\n-\n-                    priv __unused1: *c_void,\n-                    priv __unused2: *c_void,\n-                    priv __unused3: *c_void,\n-                     __unused4: *c_void,\n-                     __unused5: *c_void,\n+                    gl_pathc: size_t,\n+                    gl_pathv: **c_char,\n+                    gl_offs:  size_t,\n+\n+                    __unused1: *c_void,\n+                    __unused2: *c_void,\n+                    __unused3: *c_void,\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n                 }\n             }\n         }\n@@ -305,16 +304,15 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    // all made by reedlepee\n                     st_dev: dev_t,\n-                     __pad1: c_short,\n+                    __pad1: c_short,\n                     st_ino: ino_t,\n                     st_mode: mode_t,\n                     st_nlink: nlink_t,\n-                     st_uid: uid_t,\n+                    st_uid: uid_t,\n                     st_gid: gid_t,\n-                     st_rdev: dev_t,\n-                     __pad2: c_short,\n+                    st_rdev: dev_t,\n+                    __pad2: c_short,\n                     st_size: off_t,\n                     st_blksize: blksize_t,\n                     st_blocks: blkcnt_t,\n@@ -325,7 +323,7 @@ pub mod types {\n                     st_ctime: time_t,\n                     st_ctime_nsec: c_long,\n                     __unused4: c_long,\n-                     __unused5: c_long,\n+                    __unused5: c_long,\n                 }\n             }\n             #[cfg(target_arch = \"arm\")]\n@@ -339,25 +337,24 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 pub struct stat {\n-                    // all made priv by reedlepee\n                     st_dev: c_ulonglong,\n-                    priv __pad0: [c_uchar, ..4],\n-                    priv __st_ino: ino_t,\n+                    __pad0: [c_uchar, ..4],\n+                    __st_ino: ino_t,\n                     st_mode: c_uint,\n                     st_nlink: c_uint,\n-                     st_uid: uid_t,\n-                     st_gid: gid_t,\n-                     st_rdev: c_ulonglong,\n-                    priv __pad3: [c_uchar, ..4],\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: c_ulonglong,\n+                    __pad3: [c_uchar, ..4],\n                     st_size: c_longlong,\n                     st_blksize: blksize_t,\n                     st_blocks: c_ulonglong,\n                     st_atime: time_t,\n                     st_atime_nsec: c_ulong,\n                     st_mtime: time_t,\n                     st_mtime_nsec: c_ulong,\n-                     st_ctime: time_t,\n-                     st_ctime_nsec: c_ulong,\n+                    st_ctime: time_t,\n+                    st_ctime_nsec: c_ulong,\n                     st_ino: c_ulonglong\n                 }\n             }\n@@ -373,18 +370,17 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    /// all made priv by reedlepee\n                     st_dev: c_ulong,\n-                    priv st_pad1: [c_long, ..3],\n+                    st_pad1: [c_long, ..3],\n                     st_ino: ino_t,\n                     st_mode: mode_t,\n                     st_nlink: nlink_t,\n                     st_uid: uid_t,\n                     st_gid: gid_t,\n                     st_rdev: c_ulong,\n-                    priv st_pad2: [c_long, ..2],\n+                    st_pad2: [c_long, ..2],\n                     st_size: off_t,\n-                    priv st_pad3: c_long,\n+                    st_pad3: c_long,\n                     st_atime: time_t,\n                     st_atime_nsec: c_long,\n                     st_mtime: time_t,\n@@ -393,7 +389,7 @@ pub mod types {\n                     st_ctime_nsec: c_long,\n                     st_blksize: blksize_t,\n                     st_blocks: blkcnt_t,\n-                    priv st_pad5: [c_long, ..14],\n+                    st_pad5: [c_long, ..14],\n                 }\n             }\n             pub mod posix08 {}\n@@ -448,25 +444,24 @@ pub mod types {\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n                 pub struct stat {\n-                    // all made by reedlepee\n                     st_dev: dev_t,\n                     st_ino: ino_t,\n                     st_nlink: nlink_t,\n                     st_mode: mode_t,\n                     st_uid: uid_t,\n                     st_gid: gid_t,\n-                    priv __pad0: c_int,\n-                     st_rdev: dev_t,\n+                    __pad0: c_int,\n+                    st_rdev: dev_t,\n                     st_size: off_t,\n                     st_blksize: blksize_t,\n                     st_blocks: blkcnt_t,\n-                     st_atime: time_t,\n+                    st_atime: time_t,\n                     st_atime_nsec: c_long,\n                     st_mtime: time_t,\n                     st_mtime_nsec: c_long,\n                     st_ctime: time_t,\n                     st_ctime_nsec: c_long,\n-                    priv __unused: [c_long, ..3],\n+                    __unused: [c_long, ..3],\n                 }\n             }\n             pub mod posix08 {\n@@ -485,20 +480,19 @@ pub mod types {\n                 use libc::types::common::c95::{c_void};\n                 use libc::types::os::arch::c95::{c_char, c_int, size_t};\n                 pub struct glob_t {\n-                    // all made priv by reedlepee\n-                    priv gl_pathc:  size_t,\n-                    priv __unused1: size_t,\n-                    priv gl_offs:   size_t,\n-                    priv __unused2: c_int,\n-                    priv gl_pathv:  **c_char,\n-\n-                    priv __unused3: *c_void,\n-\n-                     __unused4: *c_void,\n-                     __unused5: *c_void,\n-                    priv __unused6: *c_void,\n-                    priv __unused7: *c_void,\n-                    priv __unused8: *c_void,\n+                    gl_pathc:  size_t,\n+                    __unused1: size_t,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n                 }\n             }\n         }\n@@ -552,14 +546,13 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 pub struct stat {\n-                    // all made by reedlepee\n                     st_dev: dev_t,\n                     st_ino: ino_t,\n                     st_mode: mode_t,\n                     st_nlink: nlink_t,\n-                     st_uid: uid_t,\n-                     st_gid: gid_t,\n-                     st_rdev: dev_t,\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: dev_t,\n                     st_atime: time_t,\n                     st_atime_nsec: c_long,\n                     st_mtime: time_t,\n@@ -569,12 +562,12 @@ pub mod types {\n                     st_size: off_t,\n                     st_blocks: blkcnt_t,\n                     st_blksize: blksize_t,\n-                    priv st_flags: fflags_t,\n-                    priv st_gen: uint32_t,\n-                    priv st_lspare: int32_t,\n-                    priv st_birthtime: time_t,\n-                    priv st_birthtime_nsec: c_long,\n-                    priv __unused: [uint8_t, ..2],\n+                    st_flags: fflags_t,\n+                    st_gen: uint32_t,\n+                    st_lspare: int32_t,\n+                    st_birthtime: time_t,\n+                    st_birthtime_nsec: c_long,\n+                    __unused: [uint8_t, ..2],\n                 }\n             }\n             pub mod posix08 {\n@@ -598,14 +591,13 @@ pub mod types {\n                 // Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n                 pub struct stat {\n-                    // all made privv by reedlepee\n                     st_dev: dev_t,\n                     st_ino: ino_t,\n                     st_mode: mode_t,\n                     st_nlink: c_short,\n-                     st_uid: c_short,\n+                    st_uid: c_short,\n                     st_gid: c_short,\n-                     st_rdev: dev_t,\n+                    st_rdev: dev_t,\n                     st_size: int64,\n                     st_atime: time64_t,\n                     st_mtime: time64_t,\n@@ -705,49 +697,47 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 pub struct STARTUPINFO {\n-                    // all made by reedlepee\n-                    priv cb: DWORD,\n-                    priv lpReserved: LPTSTR,\n-                    priv lpDesktop: LPTSTR,\n-                    priv lpTitle: LPTSTR,\n-                    priv dwX: DWORD,\n-                    priv dwY: DWORD,\n-                    priv dwXSize: DWORD,\n-                    priv dwYSize: DWORD,\n-                    priv dwXCountChars: DWORD,\n-                    priv dwYCountCharts: DWORD,\n-                    priv dwFillAttribute: DWORD,\n-                    priv dwFlags: DWORD,\n-                    priv wShowWindow: WORD,\n-                    priv cbReserved2: WORD,\n-                    priv lpReserved2: LPBYTE,\n-                    priv hStdInput: HANDLE,\n-                    priv hStdOutput: HANDLE,\n-                    priv hStdError: HANDLE\n+                    cb: DWORD,\n+                    lpReserved: LPTSTR,\n+                    lpDesktop: LPTSTR,\n+                    lpTitle: LPTSTR,\n+                    dwX: DWORD,\n+                    dwY: DWORD,\n+                    dwXSize: DWORD,\n+                    dwYSize: DWORD,\n+                    dwXCountChars: DWORD,\n+                    dwYCountCharts: DWORD,\n+                    dwFillAttribute: DWORD,\n+                    dwFlags: DWORD,\n+                    wShowWindow: WORD,\n+                    cbReserved2: WORD,\n+                    lpReserved2: LPBYTE,\n+                    hStdInput: HANDLE,\n+                    hStdOutput: HANDLE,\n+                    hStdError: HANDLE\n                 }\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n+\n                 pub struct PROCESS_INFORMATION {\n-                    // all made by reedlepee\n-                    priv hProcess: HANDLE,\n-                    priv hThread: HANDLE,\n-                    priv dwProcessId: DWORD,\n-                    priv dwThreadId: DWORD\n+                    hProcess: HANDLE,\n+                    hThread: HANDLE,\n+                    dwProcessId: DWORD,\n+                    dwThreadId: DWORD\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 pub struct SYSTEM_INFO {\n-                    // all made by reedlepee\n-                    priv wProcessorArchitecture: WORD,\n-                    priv wReserved: WORD,\n-                    priv dwPageSize: DWORD,\n-                    priv lpMinimumApplicationAddress: LPVOID,\n-                    priv lpMaximumApplicationAddress: LPVOID,\n-                    priv dwActiveProcessorMask: DWORD,\n-                    priv dwNumberOfProcessors: DWORD,\n-                    priv dwProcessorType: DWORD,\n-                    priv dwAllocationGranularity: DWORD,\n-                    priv wProcessorLevel: WORD,\n-                    priv wProcessorRevision: WORD\n+                    wProcessorArchitecture: WORD,\n+                    wReserved: WORD,\n+                    dwPageSize: DWORD,\n+                    lpMinimumApplicationAddress: LPVOID,\n+                    lpMaximumApplicationAddress: LPVOID,\n+                    dwActiveProcessorMask: DWORD,\n+                    dwNumberOfProcessors: DWORD,\n+                    dwProcessorType: DWORD,\n+                    dwAllocationGranularity: DWORD,\n+                    wProcessorLevel: WORD,\n+                    wProcessorRevision: WORD\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n@@ -770,14 +760,13 @@ pub mod types {\n                 }\n \n                 pub struct MEMORY_BASIC_INFORMATION {\n-                    // all made by reedlepee\n-                    priv BaseAddress: LPVOID,\n-                    priv AllocationBase: LPVOID,\n-                    priv AllocationProtect: DWORD,\n-                    priv RegionSize: SIZE_T,\n-                    priv State: DWORD,\n-                    priv Protect: DWORD,\n-                    priv Type: DWORD\n+                    BaseAddress: LPVOID,\n+                    AllocationBase: LPVOID,\n+                    AllocationProtect: DWORD,\n+                    RegionSize: SIZE_T,\n+                    State: DWORD,\n+                    Protect: DWORD,\n+                    Type: DWORD\n                 }\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n             }\n@@ -874,50 +863,47 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 pub struct STARTUPINFO {\n-                     // all made by reedlepee\n-                     priv cb: DWORD,\n-                     priv lpReserved: LPTSTR,\n-                     priv lpDesktop: LPTSTR,\n-                     priv lpTitle: LPTSTR,\n-                     priv dwX: DWORD,\n-                     priv dwY: DWORD,\n-                     priv dwXSize: DWORD,\n-                     priv dwYSize: DWORD,\n-                     priv dwXCountChars: DWORD,\n-                     priv dwYCountCharts: DWORD,\n-                     priv dwFillAttribute: DWORD,\n-                     priv dwFlags: DWORD,\n-                     priv wShowWindow: WORD,\n-                     priv cbReserved2: WORD,\n-                     priv lpReserved2: LPBYTE,\n-                     priv hStdInput: HANDLE,\n-                     priv hStdOutput: HANDLE,\n-                     priv hStdError: HANDLE\n+                    cb: DWORD,\n+                    lpReserved: LPTSTR,\n+                    lpDesktop: LPTSTR,\n+                    lpTitle: LPTSTR,\n+                    dwX: DWORD,\n+                    dwY: DWORD,\n+                    dwXSize: DWORD,\n+                    dwYSize: DWORD,\n+                    dwXCountChars: DWORD,\n+                    dwYCountCharts: DWORD,\n+                    dwFillAttribute: DWORD,\n+                    dwFlags: DWORD,\n+                    wShowWindow: WORD,\n+                    cbReserved2: WORD,\n+                    lpReserved2: LPBYTE,\n+                    hStdInput: HANDLE,\n+                    hStdOutput: HANDLE,\n+                    hStdError: HANDLE\n                 }\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 pub struct PROCESS_INFORMATION {\n-                    // all made by reedlepee\n-                    priv hProcess: HANDLE,\n-                    priv hThread: HANDLE,\n-                    priv dwProcessId: DWORD,\n-                    priv dwThreadId: DWORD\n+                    hProcess: HANDLE,\n+                    hThread: HANDLE,\n+                    dwProcessId: DWORD,\n+                    dwThreadId: DWORD\n                 }\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 pub struct SYSTEM_INFO {\n-                     // all made by reedlepee\n-                     priv wProcessorArchitecture: WORD,\n-                     priv wReserved: WORD,\n-                     priv dwPageSize: DWORD,\n-                     priv lpMinimumApplicationAddress: LPVOID,\n-                     priv lpMaximumApplicationAddress: LPVOID,\n-                     priv dwActiveProcessorMask: DWORD,\n-                     priv dwNumberOfProcessors: DWORD,\n-                     priv dwProcessorType: DWORD,\n-                     priv dwAllocationGranularity: DWORD,\n-                     priv wProcessorLevel: WORD,\n-                     priv wProcessorRevision: WORD\n+                    wProcessorArchitecture: WORD,\n+                    wReserved: WORD,\n+                    dwPageSize: DWORD,\n+                    lpMinimumApplicationAddress: LPVOID,\n+                    lpMaximumApplicationAddress: LPVOID,\n+                    dwActiveProcessorMask: DWORD,\n+                    dwNumberOfProcessors: DWORD,\n+                    dwProcessorType: DWORD,\n+                    dwAllocationGranularity: DWORD,\n+                    wProcessorLevel: WORD,\n+                    wProcessorRevision: WORD\n                 }\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n@@ -940,14 +926,13 @@ pub mod types {\n                 }\n \n                 pub struct MEMORY_BASIC_INFORMATION {\n-                     // all made by reedlepee\n-                     priv BaseAddress: LPVOID,\n-                     priv AllocationBase: LPVOID,\n-                     priv AllocationProtect: DWORD,\n-                     priv RegionSize: SIZE_T,\n-                     priv State: DWORD,\n-                     priv Protect: DWORD,\n-                     priv Type: DWORD\n+                    BaseAddress: LPVOID,\n+                    AllocationBase: LPVOID,\n+                    AllocationProtect: DWORD,\n+                    RegionSize: SIZE_T,\n+                    State: DWORD,\n+                    Protect: DWORD,\n+                    Type: DWORD\n                 }\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n             }\n@@ -961,20 +946,19 @@ pub mod types {\n                 use libc::types::common::c95::{c_void};\n                 use libc::types::os::arch::c95::{c_char, c_int, size_t};\n                 pub struct glob_t {\n-                    // all made by reedlepee\n-                    priv gl_pathc:  size_t,\n-                    priv __unused1: c_int,\n-                    priv gl_offs:   size_t,\n-                    priv __unused2: c_int,\n-                    priv gl_pathv:  **c_char,\n-\n-                    priv __unused3: *c_void,\n-\n-                     __unused4: *c_void,\n-                     __unused5: *c_void,\n-                    priv __unused6: *c_void,\n-                    priv __unused7: *c_void,\n-                    priv __unused8: *c_void,\n+                    gl_pathc:  size_t,\n+                    __unused1: c_int,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n                 }\n             }\n         }\n@@ -1027,29 +1011,28 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                    // all made by reedlepee\n                     st_dev: dev_t,\n                     st_mode: mode_t,\n                     st_nlink: nlink_t,\n                     st_ino: ino_t,\n-                     st_uid: uid_t,\n-                     st_gid: gid_t,\n-                     st_rdev: dev_t,\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: dev_t,\n                     st_atime: time_t,\n                     st_atime_nsec: c_long,\n                     st_mtime: time_t,\n                     st_mtime_nsec: c_long,\n                     st_ctime: time_t,\n                     st_ctime_nsec: c_long,\n-                    priv st_birthtime: time_t,\n-                    priv st_birthtime_nsec: c_long,\n+                    st_birthtime: time_t,\n+                    st_birthtime_nsec: c_long,\n                     st_size: off_t,\n                     st_blocks: blkcnt_t,\n                     st_blksize: blksize_t,\n-                    priv st_flags: uint32_t,\n-                    priv st_gen: uint32_t,\n-                    priv st_lspare: int32_t,\n-                    priv st_qspare: [int64_t, ..2],\n+                    st_flags: uint32_t,\n+                    st_gen: uint32_t,\n+                    st_lspare: int32_t,\n+                    st_qspare: [int64_t, ..2],\n                 }\n             }\n             pub mod posix08 {\n@@ -1109,29 +1092,28 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 pub struct stat {\n-                     // all made by reedlepee\n-                     st_dev: dev_t,\n-                     st_mode: mode_t,\n-                     st_nlink: nlink_t,\n-                     st_ino: ino_t,\n-                     st_uid: uid_t,\n-                     st_gid: gid_t,\n-                     st_rdev: dev_t,\n-                     st_atime: time_t,\n-                     st_atime_nsec: c_long,\n-                     st_mtime: time_t,\n-                     st_mtime_nsec: c_long,\n-                     st_ctime: time_t,\n-                     st_ctime_nsec: c_long,\n-                     priv st_birthtime: time_t,\n-                     priv st_birthtime_nsec: c_long,\n-                     st_size: off_t,\n-                     st_blocks: blkcnt_t,\n-                     st_blksize: blksize_t,\n-                     priv st_flags: uint32_t,\n-                     priv st_gen: uint32_t,\n-                     priv st_lspare: int32_t,\n-                     priv st_qspare: [int64_t, ..2],\n+                    st_dev: dev_t,\n+                    st_mode: mode_t,\n+                    st_nlink: nlink_t,\n+                    st_ino: ino_t,\n+                    st_uid: uid_t,\n+                    st_gid: gid_t,\n+                    st_rdev: dev_t,\n+                    st_atime: time_t,\n+                    st_atime_nsec: c_long,\n+                    st_mtime: time_t,\n+                    st_mtime_nsec: c_long,\n+                    st_ctime: time_t,\n+                    st_ctime_nsec: c_long,\n+                    st_birthtime: time_t,\n+                    st_birthtime_nsec: c_long,\n+                    st_size: off_t,\n+                    st_blocks: blkcnt_t,\n+                    st_blksize: blksize_t,\n+                    st_flags: uint32_t,\n+                    st_gen: uint32_t,\n+                    st_lspare: int32_t,\n+                    st_qspare: [int64_t, ..2],\n                 }\n             }\n             pub mod posix08 {"}, {"sha": "732dbe64d015fb35db16acb6237f95cd3a947974", "filename": "src/libstd/option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -454,7 +454,6 @@ impl<T: Zero> Option<T> {\n /// An iterator that yields either one or zero elements\n #[deriving(Clone, DeepClone)]\n pub struct OptionIterator<A> {\n-    // already priv\n     priv opt: Option<A>\n }\n "}, {"sha": "ba2b42c9b9c8b227d50c263ee1f88cf62ffdea79", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -412,7 +412,6 @@ pub fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n }\n \n pub struct Pipe {\n-    // made priv by reedlepee\n     input: c_int,\n     out: c_int\n }\n@@ -1381,7 +1380,6 @@ pub fn page_size() -> uint {\n }\n \n pub struct MemoryMap {\n-    // made priv by reedlepee\n     data: *mut u8,\n     len: size_t,\n     kind: MemoryMapKind"}, {"sha": "f71f67a30db84467c966c04e4d7de83b5e316157", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -524,7 +524,6 @@ pub trait GenericPathUnsafe {\n \n /// Helper struct for printing paths with format!()\n pub struct Display<'self, P> {\n-    /// already priv\n     priv path: &'self P,\n     priv filename: bool\n }"}, {"sha": "87821105d37e16769d13720bf131e077abccdcf7", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -42,7 +42,6 @@ pub type RevStrComponentIter<'self> = Map<'self, &'self [u8], Option<&'self str>\n /// Represents a POSIX file path\n #[deriving(Clone, DeepClone)]\n pub struct Path {\n-    /// already priv\n     priv repr: ~[u8], // assumed to never be empty or contain NULs\n     priv sepidx: Option<uint> // index of the final separator in repr\n }"}, {"sha": "0de2bd4c742b990a010a8f33164b6bef69070514", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -82,7 +82,6 @@ pub type RevComponentIter<'self> = Map<'self, Option<&'self str>, &'self [u8],\n // preserved by the data structure; let the Windows API error out on them.\n #[deriving(Clone, DeepClone)]\n pub struct Path {\n-    /// already priv\n     priv repr: ~str, // assumed to never be empty\n     priv prefix: Option<PathPrefix>,\n     priv sepidx: Option<uint> // index of the final separator in the non-prefix portion of repr"}, {"sha": "0068b60cfa51b12a53148408d8f4774e18321b73", "filename": "src/libstd/rand/isaac.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fisaac.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -23,7 +23,6 @@ static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n ///\n /// The ISAAC algorithm is suitable for cryptographic purposes.\n pub struct IsaacRng {\n-    /// already priv\n     priv cnt: u32,\n     priv rsl: [u32, .. RAND_SIZE],\n     priv mem: [u32, .. RAND_SIZE],\n@@ -219,7 +218,6 @@ static RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n ///\n /// The ISAAC algorithm is suitable for cryptographic purposes.\n pub struct Isaac64Rng {\n-    /// already priv\n     priv cnt: uint,\n     priv rsl: [u64, .. RAND_SIZE_64],\n     priv mem: [u64, .. RAND_SIZE_64],"}, {"sha": "f5c60417bacb5c9344f64b745687f7d2ec060297", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -82,11 +82,10 @@ pub trait Rand {\n \n /// A value with a particular weight compared to other values\n pub struct Weighted<T> {\n-    /// made priv by reedlepee\n     /// The numerical weight of this item\n-    priv weight: uint,\n+    weight: uint,\n     /// The actual item which is being weighted\n-    priv item: T,\n+    item: T,\n }\n \n /// A random number generator\n@@ -538,13 +537,11 @@ pub fn rng() -> StdRng {\n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(not(target_word_size=\"64\"))]\n-// already priv\n pub struct StdRng { priv rng: IsaacRng }\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(target_word_size=\"64\")]\n-// already priv\n pub struct StdRng { priv rng: Isaac64Rng }\n \n impl StdRng {\n@@ -606,7 +603,6 @@ pub fn weak_rng() -> XorShiftRng {\n /// but is very fast. If you do not know for sure that it fits your\n /// requirements, use a more secure one such as `IsaacRng`.\n pub struct XorShiftRng {\n-    // already priv\n     priv x: u32,\n     priv y: u32,\n     priv z: u32,"}, {"sha": "4c8cf06c55e87052f089d93f35439795aa87caa5", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -36,7 +36,6 @@ type HCRYPTPROV = c_long;\n /// This does not block.\n #[cfg(unix)]\n pub struct OSRng {\n-    // already priv\n     priv inner: ReaderRng<file::FileStream>\n }\n /// A random number generator that retrieves randomness straight from\n@@ -46,7 +45,6 @@ pub struct OSRng {\n /// This does not block.\n #[cfg(windows)]\n pub struct OSRng {\n-    // already priv\n     priv hcryptprov: HCRYPTPROV\n }\n "}, {"sha": "f1e67da815e1700fb8cdbf3c6d16e6e9957bb149", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -33,7 +33,6 @@ use rand::Rng;\n /// }\n /// ```\n pub struct ReaderRng<R> {\n-    // already priv\n     priv reader: R\n }\n "}, {"sha": "3b4919392fc2995bab8f010a5f244b1acf4385fb", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -21,13 +21,11 @@ static DEFAULT_GENERATION_THRESHOLD: uint = 32 * 1024;\n /// A wrapper around any RNG which reseeds the underlying RNG after it\n /// has generated a certain number of random bytes.\n pub struct ReseedingRng<R, Rsdr> {\n-    // already priv\n     priv rng: R,\n     priv generation_threshold: uint,\n     priv bytes_generated: uint,\n     /// Controls the behaviour when reseeding the RNG.\n-    // made by reedlepee\n-    priv reseeder: Rsdr\n+    reseeder: Rsdr\n }\n \n impl<R: Rng, Rsdr: Reseeder<R>> ReseedingRng<R, Rsdr> {"}, {"sha": "41e834cf37c39154743f6cd950db3307df37eb9c", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -35,7 +35,6 @@ struct RcBox<T> {\n #[unsafe_no_drop_flag]\n #[no_send]\n pub struct Rc<T> {\n-    // already priv\n     priv ptr: *mut RcBox<T>\n }\n \n@@ -168,7 +167,6 @@ struct RcMutBox<T> {\n #[no_freeze]\n #[unsafe_no_drop_flag]\n pub struct RcMut<T> {\n-    // already priv\n     priv ptr: *mut RcMutBox<T>,\n }\n "}, {"sha": "d63b14f982d403a6dd845a2afc0555a6fcd84a85", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -41,7 +41,6 @@ pub fn align(size: uint, align: uint) -> uint {\n \n /// Adaptor to wrap around visitors implementing MovePtr.\n pub struct MovePtrAdaptor<V> {\n-    // all by reedlepee\n     priv inner: V\n }\n pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {"}, {"sha": "d03621eb60d2f216aee918d48808512fe2d63edf", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -98,7 +98,6 @@ enum VariantState {\n }\n \n pub struct ReprVisitor<'self> {\n-    // made priv by reedlpee\n     priv ptr: *c_void,\n     priv ptr_stk: ~[*c_void],\n     priv var_stk: ~[VariantState],"}, {"sha": "4426a3eafe1e864b11157bd23b6e886ee51d6a9a", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -29,7 +29,6 @@ static ALL_BITS: uint = FROZEN_BIT | MUT_BIT;\n \n #[deriving(Eq)]\n pub struct BorrowRecord {\n-    // all made byt reedlepee\n     priv box: *mut raw::Box<()>,\n     file: *c_char,\n     priv line: size_t"}, {"sha": "0d4271a33c22e404e4e44cc44d6c344be50a1365", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -48,14 +48,12 @@ struct Packet<T> {\n \n // A one-shot channel.\n pub struct ChanOne<T> {\n-    //  all made priv by reeldepee\n     priv void_packet: *mut Void,\n     priv suppress_finalize: bool\n }\n \n /// A one-shot port.\n pub struct PortOne<T> {\n-    //  all made priv by reeldepee\n     priv void_packet: *mut Void,\n     priv suppress_finalize: bool\n }\n@@ -445,14 +443,12 @@ type StreamPortOne<T> = PortOne<StreamPayload<T>>;\n \n /// A channel with unbounded size.\n pub struct Chan<T> {\n-    //  all made priv by reeldepee\n     // FIXME #5372. Using Cell because we don't take &mut self\n     next: Cell<StreamChanOne<T>>\n }\n \n /// An port with unbounded size.\n pub struct Port<T> {\n-    //  all made priv by reeldepee\n     // FIXME #5372. Using Cell because we don't take &mut self\n     next: Cell<StreamPortOne<T>>\n }\n@@ -581,7 +577,6 @@ impl<'self, T> SelectPortInner<T> for &'self Port<T> {\n impl<'self, T> SelectPort<T> for &'self Port<T> { }\n \n pub struct SharedChan<T> {\n-    // already priv\n     // Just like Chan, but a shared AtomicOption instead of Cell\n     priv next: UnsafeArc<AtomicOption<StreamChanOne<T>>>\n }\n@@ -635,7 +630,6 @@ impl<T> Clone for SharedChan<T> {\n }\n \n pub struct SharedPort<T> {\n-    // already priv\n     // The next port on which we will receive the next port on which we will receive T\n     priv next_link: UnsafeArc<AtomicOption<PortOne<StreamPortOne<T>>>>\n }"}, {"sha": "dd71426938dc45e1444f9a022fdf80c368f6e6c4", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -21,13 +21,11 @@ use vec::ImmutableVector;\n extern {}\n \n pub struct ModEntry<'self> {\n-    // made priv by reedlepee\n     name: &'self str,\n     log_level: *mut u32\n }\n \n pub struct CrateMap<'self> {\n-    // made priv by reedlepee\n      priv version: i32,\n      priv entries: &'self [ModEntry<'self>],\n      priv children: &'self [&'self CrateMap<'self>]"}, {"sha": "9dcb35c806f7cb8512df97b2c467596e0666131d", "filename": "src/libstd/rt/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fbuffered.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -64,7 +64,6 @@ static DEFAULT_CAPACITY: uint = 64 * 1024;\n \n /// Wraps a Reader and buffers input from it\n pub struct BufferedReader<R> {\n-    // all already priv\n     priv inner: R,\n     priv buf: ~[u8],\n     priv pos: uint,\n@@ -176,7 +175,6 @@ impl<R: Reader> Decorator<R> for BufferedReader<R> {\n ///\n /// Note that `BufferedWriter` will NOT flush its buffer when dropped.\n pub struct BufferedWriter<W> {\n-    // all already priv\n     priv inner: W,\n     priv buf: ~[u8],\n     priv pos: uint\n@@ -252,7 +250,6 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n ///\n /// Note that `BufferedStream` will NOT flush its output buffer when dropped.\n pub struct BufferedStream<S> {\n-    // all already priv\n     priv inner: BufferedReader<InternalBufferedWriter<S>>\n }\n "}, {"sha": "99634b532b082c6962d27f05cc09cf3dfa237ddd", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -368,7 +368,6 @@ impl<T: Reader> ReaderUtil for T {\n /// each call to its `.next()` method.\n /// Yields `None` if the condition is handled.\n pub struct ByteIterator<T> {\n-    // all already priv\n     priv reader: T,\n }\n "}, {"sha": "3869f99adeaed0bee96017049b93c059a39359b9", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -298,7 +298,6 @@ pub fn readdir<P: PathLike>(path: &P) -> Option<~[Path]> {\n /// Constrained version of `FileStream` that only exposes read-specific operations.\n ///\n /// Can be retreived via `FileInfo.open_reader()`.\n-/// all already priv\n pub struct FileReader { priv stream: FileStream }\n \n /// a `std::rt::io::Reader` trait impl for file I/O.\n@@ -326,7 +325,6 @@ impl Seek for FileReader {\n /// Constrained version of `FileStream` that only exposes write-specific operations.\n ///\n /// Can be retreived via `FileInfo.open_writer()`.\n-// already priv\n pub struct FileWriter { priv stream: FileStream }\n \n /// a `std::rt::io::Writer` trait impl for file I/O.\n@@ -364,7 +362,6 @@ impl Seek for FileWriter {\n /// For this reason, it is best to use the access-constrained wrappers that are\n /// exposed via `FileInfo.open_reader()` and `FileInfo.open_writer()`.\n pub struct FileStream {\n-    // all made by reedlepee\n     priv fd: ~RtioFileStream,\n     priv last_nread: int,\n }"}, {"sha": "8a5aa171eb805d55c7dcb00f284580acf242313e", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -17,7 +17,6 @@ use super::*;\n \n /// A Writer decorator that compresses using the 'deflate' scheme\n pub struct DeflateWriter<W> {\n-    // all made by reedlepee\n     priv inner_writer: W\n }\n \n@@ -57,7 +56,6 @@ impl<W: Writer> Decorator<W> for DeflateWriter<W> {\n \n /// A Reader decorator that decompresses using the 'deflate' scheme\n pub struct InflateReader<R> {\n-    // all made by reedlepee\n     priv inner_reader: R\n }\n "}, {"sha": "5f6b4398c22f72be83aac931ab8fba5191b05e64", "filename": "src/libstd/rt/io/mem.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmem.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -22,7 +22,6 @@ use vec;\n \n /// Writes to an owned, growable byte vector\n pub struct MemWriter {\n-    // already priv\n     priv buf: ~[u8]\n }\n \n@@ -67,7 +66,6 @@ impl Decorator<~[u8]> for MemWriter {\n \n /// Reads from an owned byte vector\n pub struct MemReader {\n-    // already priv\n     priv buf: ~[u8],\n     priv pos: uint\n }\n@@ -131,7 +129,6 @@ impl Decorator<~[u8]> for MemReader {\n \n /// Writes to a fixed-size byte slice\n pub struct BufWriter<'self> {\n-    // already priv\n     priv buf: &'self mut [u8],\n     priv pos: uint\n }\n@@ -160,7 +157,6 @@ impl<'self> Seek for BufWriter<'self> {\n \n /// Reads from a fixed-size byte slice\n pub struct BufReader<'self> {\n-    // already priv\n     priv buf: &'self [u8],\n     priv pos: uint\n }"}, {"sha": "44709c7b7b686321e21716bf99cb2a2452c6de7b", "filename": "src/libstd/rt/io/mock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmock.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -12,7 +12,6 @@ use option::{Option, None};\n use rt::io::{Reader, Writer};\n \n pub struct MockReader {\n-    // all made by reedlepee\n     read: ~fn(buf: &mut [u8]) -> Option<uint>,\n     priv eof: ~fn() -> bool\n }"}, {"sha": "c0971b5d3cd5d3f7d50c09782a19835a16fd40dc", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -341,7 +341,6 @@ pub static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n ///\n /// Is something like this sufficient? It's kind of archaic\n pub struct IoError {\n-    // all made by reedlepee\n     kind: IoErrorKind,\n     desc: &'static str,\n     detail: Option<~str>\n@@ -649,7 +648,6 @@ pub enum FileAccess {\n }\n \n pub struct FileStat {\n-    // all made by reedlepee\n     /// A `Path` object containing information about the `PathInfo`'s location\n     path: Path,\n     /// `true` if the file pointed at by the `PathInfo` is a regular file"}, {"sha": "d682098118172fa2f09ca4368f38138519fe0f4b", "filename": "src/libstd/rt/io/native/file.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Ffile.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -61,7 +61,6 @@ fn keep_going(data: &[u8], f: &fn(*u8, uint) -> i64) -> i64 {\n pub type fd_t = libc::c_int;\n \n pub struct FileDesc {\n-    // aleady priv\n     priv fd: fd_t,\n }\n \n@@ -127,7 +126,6 @@ impl Drop for FileDesc {\n }\n \n pub struct CFile {\n-    // aleady priv\n     priv file: *libc::FILE\n }\n "}, {"sha": "91fff6d92630b802a26d0c5f1d1ec88eb7324810", "filename": "src/libstd/rt/io/native/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -25,7 +25,6 @@ use super::file;\n  * for the process to terminate.\n  */\n pub struct Process {\n-    // aleady priv\n     /// The unique id of the process (this should never be negative).\n     priv pid: pid_t,\n "}, {"sha": "5661725d77baa40f6d8247a2c015a3d9c800d500", "filename": "src/libstd/rt/io/native/stdio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Fstdio.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -31,7 +31,6 @@ pub fn println(s: &str) {\n }\n \n pub struct StdIn {\n-    // aleady priv\n     priv fd: file::FileDesc\n }\n \n@@ -50,7 +49,6 @@ impl Reader for StdIn {\n }\n \n pub struct StdOut {\n-    // aleady priv\n     priv fd: file::FileDesc\n }\n "}, {"sha": "f72d2e1f19bdb7304859cbe0b21bd56f69e02a65", "filename": "src/libstd/rt/io/net/ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fip.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -48,7 +48,6 @@ impl ToStr for IpAddr {\n \n #[deriving(Eq, TotalEq, Clone)]\n pub struct SocketAddr {\n-    // all made by reedlpee\n     ip: IpAddr,\n     port: Port,\n }"}, {"sha": "f29e17cfc2f3d127152f16b9d66be1874e690fd0", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -21,7 +21,6 @@ use rt::rtio::{IoFactory, IoFactoryObject,\n use rt::local::Local;\n \n pub struct TcpStream {\n-    // aleady priv\n     priv obj: ~RtioTcpStreamObject\n }\n \n@@ -100,7 +99,6 @@ impl Writer for TcpStream {\n }\n \n pub struct TcpListener {\n-    // aleady priv\n     priv obj: ~RtioTcpListenerObject\n }\n \n@@ -144,7 +142,6 @@ impl Listener<TcpStream, TcpAcceptor> for TcpListener {\n }\n \n pub struct TcpAcceptor {\n-    // aleady priv\n     priv obj: ~RtioTcpAcceptorObject\n }\n "}, {"sha": "27faae0838b15d2383e8564bb3b3c6d04c6c9a02", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -17,7 +17,6 @@ use rt::rtio::{RtioSocket, RtioUdpSocketObject, RtioUdpSocket, IoFactory, IoFact\n use rt::local::Local;\n \n pub struct UdpSocket {\n-    // aleady priv\n     priv obj: ~RtioUdpSocketObject\n }\n \n@@ -73,7 +72,6 @@ impl UdpSocket {\n }\n \n pub struct UdpStream {\n-    // aleady priv\n     priv socket: UdpSocket,\n     priv connectedTo: SocketAddr\n }"}, {"sha": "d2cd531ed266fd99c631e6e216844f958c016b4e", "filename": "src/libstd/rt/io/pipe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fpipe.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -21,7 +21,6 @@ use rt::rtio::{RtioPipe, RtioPipeObject, IoFactoryObject, IoFactory};\n use rt::rtio::RtioUnboundPipeObject;\n \n pub struct PipeStream {\n-    // already priv\n     priv obj: RtioPipeObject\n }\n "}, {"sha": "5f2453852ee7fe9a82704d64ecde3ae9efbf1274", "filename": "src/libstd/rt/io/process.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fprocess.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -26,16 +26,13 @@ use rt::rtio::{RtioProcess, RtioProcessObject, IoFactoryObject, IoFactory};\n #[cfg(not(windows))] pub static MustDieSignal: int = libc::SIGKILL as int;\n \n pub struct Process {\n-    // already priv\n     priv handle: ~RtioProcessObject,\n-    // made by reedlepee\n     io: ~[Option<io::PipeStream>],\n }\n \n /// This configuration describes how a new process should be spawned. This is\n /// translated to libuv's own configuration\n pub struct ProcessConfig<'self> {\n-    // all made by reedlepee\n     /// Path to the program to run\n     program: &'self str,\n "}, {"sha": "e6dd9a480998ebf39391187ae6bd62ae64268404", "filename": "src/libstd/rt/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fstdio.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -87,7 +87,6 @@ pub fn println_args(fmt: &fmt::Arguments) {\n \n /// Representation of a reader of a standard input stream\n pub struct StdReader {\n-    // aleady priv\n     priv inner: ~RtioFileStream\n }\n \n@@ -107,7 +106,6 @@ impl Reader for StdReader {\n \n /// Representation of a writer to a standard output stream\n pub struct StdWriter {\n-    // aleady priv\n     priv inner: ~RtioFileStream\n }\n "}, {"sha": "b41d7541a60746f7735727dad77ee384e6022298", "filename": "src/libstd/rt/io/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ftimer.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -16,7 +16,6 @@ use rt::rtio::{IoFactory, IoFactoryObject,\n use rt::local::Local;\n \n pub struct Timer {\n-    // aleady priv\n     priv obj: ~RtioTimerObject\n }\n "}, {"sha": "19f17ca966d2d551fd088e45683429e058df7926", "filename": "src/libstd/rt/kill.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fkill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fkill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fkill.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -215,22 +215,21 @@ pub struct KillHandle(UnsafeArc<KillHandleInner>);\n \n /// Per-task state related to task death, killing, failure, etc.\n pub struct Death {\n-    // all made priv by reedlepee\n     // Shared among this task, its watched children, and any linked tasks who\n     // might kill it. This is optional so we can take it by-value at exit time.\n-     kill_handle:     Option<KillHandle>,\n+    kill_handle:     Option<KillHandle>,\n     // Handle to a watching parent, if we have one, for exit code propagation.\n-     priv watching_parent: Option<KillHandle>,\n+    priv watching_parent: Option<KillHandle>,\n     // Action to be done with the exit code. If set, also makes the task wait\n     // until all its watched children exit before collecting the status.\n-     on_exit:         Option<~fn(bool)>,\n+    on_exit:         Option<~fn(bool)>,\n     // nesting level counter for task::unkillable calls (0 == killable).\n-     priv unkillable:      int,\n+    priv unkillable:      int,\n     // nesting level counter for unstable::atomically calls (0 == can deschedule).\n-     priv wont_sleep:      int,\n+    priv wont_sleep:      int,\n     // A \"spare\" handle to the kill flag inside the kill handle. Used during\n     // blocking/waking as an optimization to avoid two xadds on the refcount.\n-     priv spare_kill_flag: Option<KillFlagHandle>,\n+    priv spare_kill_flag: Option<KillFlagHandle>,\n }\n \n impl Drop for KillFlag {"}, {"sha": "14df292343e9f496ca5cdbe2d94f3576a947252c", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -32,7 +32,6 @@ pub type OpaqueBox = c_void;\n pub type TypeDesc = c_void;\n \n pub struct LocalHeap {\n-    // all made by reedlepee\n     priv memory_region: *MemoryRegion,\n     priv boxed_region: *BoxedRegion\n }"}, {"sha": "99b5156b319553b1ece12c24ccfa8a8a1e91ecd8", "filename": "src/libstd/rt/message_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmessage_queue.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -20,7 +20,6 @@ use unstable::sync::{UnsafeArc, LittleLock};\n use clone::Clone;\n \n pub struct MessageQueue<T> {\n-    // already priv\n     priv state: UnsafeArc<State<T>>\n }\n "}, {"sha": "2699dab6d38a871586762b7f331092b32fbc2d6b", "filename": "src/libstd/rt/rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frc.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -24,7 +24,6 @@ use libc::c_void;\n use cast;\n \n pub struct RC<T> {\n-    // all made priv by reedlepe\n     priv p: *c_void // ~(uint, T)\n }\n "}, {"sha": "501def8b0607903f82f7fc33d1346e224a9dad00", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -61,7 +61,6 @@ pub trait RemoteCallback {\n /// Using unix flag conventions for now, which happens to also be what's supported\n /// libuv (it does translation to windows under the hood).\n pub struct FileOpenConfig {\n-    // all made by reedlepe\n     /// Path to file to be opened\n     path: Path,\n     /// Flags for file access mode (as per open(2))"}, {"sha": "d157301533c42c8d5b4984db96f3088d9f8f92ff", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -40,15 +40,13 @@ use vec::{OwnedVector};\n /// in too much allocation and too many events.\n pub struct Scheduler {\n     /// There are N work queues, one per scheduler.\n-    // already priv\n     work_queue: WorkQueue<~Task>,\n     /// Work queues for the other schedulers. These are created by\n     /// cloning the core work queues.\n     work_queues: ~[WorkQueue<~Task>],\n     /// The queue of incoming messages from other schedulers.\n     /// These are enqueued by SchedHandles after which a remote callback\n     /// is triggered to handle the message.\n-    // already priv\n     priv message_queue: MessageQueue<SchedMessage>,\n     /// A shared list of sleeping schedulers. We'll use this to wake\n     /// up schedulers when pushing work onto the work queue.\n@@ -59,7 +57,6 @@ pub struct Scheduler {\n     /// not active since there are multiple event sources that may\n     /// wake the scheduler. It just prevents the scheduler from pushing\n     /// multiple handles onto the sleeper list.\n-    // already priv\n     priv sleepy: bool,\n     /// A flag to indicate we've received the shutdown message and should\n     /// no longer try to go to sleep, but exit instead.\n@@ -796,10 +793,8 @@ pub enum SchedMessage {\n }\n \n pub struct SchedHandle {\n-    //already priv\n     priv remote: ~RemoteCallbackObject,\n     priv queue: MessageQueue<SchedMessage>,\n-    // made by reedlepee\n     sched_id: uint\n }\n "}, {"sha": "f4fdf15cda62e2f11ea71eabf16401e127e99530", "filename": "src/libstd/rt/sleeper_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fsleeper_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fsleeper_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsleeper_list.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -20,7 +20,6 @@ use rt::sched::SchedHandle;\n use clone::Clone;\n \n pub struct SleeperList {\n-    // already priv\n     priv state: UnsafeArc<State>\n }\n "}, {"sha": "55bd4b0732a6f3d16cbed7d898dcb061b6296851", "filename": "src/libstd/rt/stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fstack.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -15,7 +15,6 @@ use ops::Drop;\n use libc::{c_uint, uintptr_t};\n \n pub struct StackSegment {\n-    // all made by reedlepee\n     priv buf: ~[u8],\n     priv valgrind_id: c_uint\n }"}, {"sha": "ca96ee032e263d28dbce0e1c578b3fa26bb10bcd", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -43,7 +43,6 @@ use send_str::SendStr;\n // the type-specific state.\n \n pub struct Task {\n-     //all priv made br reedlepe\n      heap: LocalHeap,\n      priv gc: GarbageCollector,\n      storage: LocalStorage,\n@@ -57,7 +56,6 @@ pub struct Task {\n      sched: Option<~Scheduler>,\n      task_type: TaskType,\n     // Dynamic borrowck debugging info\n-     // should be public\n      borrow_list: Option<~[BorrowRecord]>\n }\n \n@@ -71,7 +69,6 @@ pub struct Coroutine {\n     /// The segment of stack on which the task is currently running or\n     /// if the task is blocked, on which the task will resume\n     /// execution.\n-    //all priv made br reedlepe\n     priv current_stack_segment: StackSegment,\n     /// Always valid if the task is alive and not running.\n     saved_context: Context\n@@ -87,7 +84,6 @@ pub struct GarbageCollector;\n pub struct LocalStorage(Option<local_data::Map>);\n \n pub struct Unwinder {\n-    //all priv made br reedlepe\n     unwinding: bool,\n }\n "}, {"sha": "16fd3fa38eae9454ba69c47333e23ce519988456", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -28,7 +28,6 @@ struct TubeState<T> {\n }\n \n pub struct Tube<T> {\n-    //all priv made br reedlepe\n     priv p: RC<TubeState<T>>\n }\n "}, {"sha": "f2abcd3aca7e35a5be7bd2059d76a47c705674fc", "filename": "src/libstd/rt/uv/addrinfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Faddrinfo.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -25,7 +25,6 @@ type GetAddrInfoCallback = ~fn(GetAddrInfoRequest, &UvAddrInfo, Option<UvError>)\n pub struct GetAddrInfoRequest(*uvll::uv_getaddrinfo_t);\n \n pub struct RequestData {\n-    // all made by reedlepee\n     priv getaddrinfo_cb: Option<GetAddrInfoCallback>,\n }\n "}, {"sha": "5d64ca4d755ce5ede9682590d31a994e401d8fa0", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -25,7 +25,6 @@ pub struct FsRequest(*uvll::uv_fs_t);\n impl Request for FsRequest {}\n \n pub struct RequestData {\n-    // all made by reedlepee\n     priv complete_cb: Option<FsCallback>\n }\n "}, {"sha": "3a6a3acbc5342bb50830155a86611c12d5f33f1b", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -80,7 +80,6 @@ pub mod pipe;\n /// with dtors may not be destructured, but tuple structs can,\n /// but the results are not correct.\n pub struct Loop {\n-    // all made by reedlepee\n     priv handle: *uvll::uv_loop_t\n }\n "}, {"sha": "13c3a30eed37875ce319abf30f65490677a0c52b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -180,7 +180,6 @@ fn socket_name<T, U: Watcher + NativeHandle<*T>>(sk: SocketNameKind,\n \n // Obviously an Event Loop is always home.\n pub struct UvEventLoop {\n-    // all made by reedlepee\n     priv uvio: UvIoFactory\n }\n \n@@ -241,7 +240,6 @@ impl EventLoop for UvEventLoop {\n }\n \n pub struct UvPausibleIdleCallback {\n-    // all made by reedlepee\n     priv watcher: IdleWatcher,\n     priv idle_flag: bool,\n     priv closed: bool\n@@ -295,7 +293,6 @@ fn test_callback_run_once() {\n \n // The entire point of async is to call into a loop from other threads so it does not need to home.\n pub struct UvRemoteCallback {\n-    // all made by reedlepee\n     // The uv async handle for triggering the callback\n     priv async: AsyncWatcher,\n     // A flag to tell the callback to exit, set from the dtor. This is\n@@ -804,7 +801,6 @@ impl IoFactory for UvIoFactory {\n }\n \n pub struct UvTcpListener {\n-    // all made by reedlepee\n     priv watcher : TcpWatcher,\n     priv home: SchedHandle,\n }\n@@ -867,7 +863,6 @@ impl RtioTcpListener for UvTcpListener {\n }\n \n pub struct UvTcpAcceptor {\n-    // all made by reedlepee\n     priv listener: UvTcpListener,\n     priv incoming: Tube<Result<~RtioTcpStreamObject, IoError>>,\n }\n@@ -992,7 +987,6 @@ fn write_stream(mut watcher: StreamWatcher,\n }\n \n pub struct UvUnboundPipe {\n-    // all made by reedlepee\n     pipe: Pipe,\n     priv home: SchedHandle,\n }\n@@ -1023,7 +1017,6 @@ impl UvUnboundPipe {\n }\n \n pub struct UvPipeStream {\n-    // already\n     priv inner: ~UvUnboundPipe,\n }\n \n@@ -1047,7 +1040,6 @@ impl RtioPipe for UvPipeStream {\n }\n \n pub struct UvTcpStream {\n-    // all made by reedlepee\n     priv watcher: TcpWatcher,\n     priv home: SchedHandle,\n }\n@@ -1148,7 +1140,6 @@ impl RtioTcpStream for UvTcpStream {\n }\n \n pub struct UvUdpSocket {\n-    // all made by reedelpee\n     priv watcher: UdpWatcher,\n     priv home: SchedHandle,\n }\n@@ -1359,7 +1350,6 @@ impl RtioUdpSocket for UvUdpSocket {\n }\n \n pub struct UvTimer {\n-    // all made by reedelpee\n     priv watcher: timer::TimerWatcher,\n     priv home: SchedHandle,\n }\n@@ -1407,7 +1397,6 @@ impl RtioTimer for UvTimer {\n }\n \n pub struct UvFileStream {\n-    // all made by reedelpee\n     priv loop_: Loop,\n     priv fd: c_int,\n     priv close_on_drop: bool,\n@@ -1541,15 +1530,13 @@ impl RtioFileStream for UvFileStream {\n }\n \n pub struct UvProcess {\n-    // two made by reedelpee\n     priv process: process::Process,\n \n     // Sadly, this structure must be created before we return it, so in that\n     // brief interim the `home` is None.\n     priv home: Option<SchedHandle>,\n \n     // All None until the process exits (exit_error may stay None)\n-   // Rest were already priv\n     priv exit_status: Option<int>,\n     priv term_signal: Option<int>,\n     priv exit_error: Option<UvError>,"}, {"sha": "341c5b8c6e163c6ff73d1c91288986848b718a88", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -84,37 +84,33 @@ pub static STDIO_WRITABLE_PIPE: c_int = 0x20;\n // see libuv/include/uv-unix.h\n #[cfg(unix)]\n pub struct uv_buf_t {\n-    // all made by reedelpee\n     base: *u8,\n     len: libc::size_t,\n }\n \n // see libuv/include/uv-win.h\n #[cfg(windows)]\n pub struct uv_buf_t {\n-    // all made by reedelpee\n     len: u32,\n     base: *u8,\n }\n \n pub struct uv_process_options_t {\n-     // all made by reedelpee\n-     exit_cb: uv_exit_cb,\n-     file: *libc::c_char,\n-     args: **libc::c_char,\n-     env: **libc::c_char,\n-     cwd: *libc::c_char,\n-     flags: libc::c_uint,\n-     stdio_count: libc::c_int,\n-     stdio: *uv_stdio_container_t,\n-     uid: uv_uid_t,\n-     gid: uv_gid_t,\n+    exit_cb: uv_exit_cb,\n+    file: *libc::c_char,\n+    args: **libc::c_char,\n+    env: **libc::c_char,\n+    cwd: *libc::c_char,\n+    flags: libc::c_uint,\n+    stdio_count: libc::c_int,\n+    stdio: *uv_stdio_container_t,\n+    uid: uv_uid_t,\n+    gid: uv_gid_t,\n }\n \n // These fields are private because they must be interfaced with through the\n // functions below.\n pub struct uv_stdio_container_t {\n-    // already priv\n     priv flags: libc::c_int,\n     priv stream: *uv_stream_t,\n }\n@@ -137,13 +133,11 @@ pub type uv_process_t = c_void;\n pub type uv_pipe_t = c_void;\n \n pub struct uv_timespec_t {\n-    // all made by reedelpee\n     tv_sec: libc::c_long,\n     priv tv_nsec: libc::c_long\n }\n \n pub struct uv_stat_t {\n-    // all made by reedelpee\n     priv st_dev: libc::uint64_t,\n     st_mode: libc::uint64_t,\n     priv st_nlink: libc::uint64_t,\n@@ -237,21 +231,19 @@ pub type socklen_t = c_int;\n #[cfg(target_os = \"android\")]\n #[cfg(target_os = \"linux\")]\n pub struct addrinfo {\n-     // all made by reedelpee\n-     priv ai_flags: c_int,\n-     priv ai_family: c_int,\n-     priv ai_socktype: c_int,\n-     priv ai_protocol: c_int,\n-     priv ai_addrlen: socklen_t,\n-     ai_addr: *sockaddr,\n-     priv ai_canonname: *char,\n-     ai_next: *addrinfo\n+    priv ai_flags: c_int,\n+    priv ai_family: c_int,\n+    priv ai_socktype: c_int,\n+    priv ai_protocol: c_int,\n+    priv ai_addrlen: socklen_t,\n+    ai_addr: *sockaddr,\n+    priv ai_canonname: *char,\n+    ai_next: *addrinfo\n }\n \n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n pub struct addrinfo {\n-     // all made by reedelpee\n     priv ai_flags: c_int,\n     priv ai_family: c_int,\n     priv ai_socktype: c_int,\n@@ -264,15 +256,14 @@ pub struct addrinfo {\n \n #[cfg(windows)]\n pub struct addrinfo {\n-     // all made by reedelpee\n     priv ai_flags: c_int,\n     priv ai_family: c_int,\n     priv ai_socktype: c_int,\n     priv ai_protocol: c_int,\n     priv ai_addrlen: size_t,\n     priv ai_canonname: *char,\n     ai_addr: *sockaddr,\n-    priv vai_next: *addrinfo\n+    priv ai_next: *addrinfo\n }\n \n #[cfg(unix)] pub type uv_uid_t = libc::types::os::arch::posix88::uid_t;\n@@ -969,7 +960,6 @@ pub unsafe fn freeaddrinfo(ai: *addrinfo) {\n }\n \n pub struct uv_err_data {\n-     // all made by reedelpee\n     priv err_name: ~str,\n     priv err_msg: ~str,\n }"}, {"sha": "24792f3904e51645f2e23cea49bea8a3a7d9bfa5", "filename": "src/libstd/rt/work_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fwork_queue.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -17,7 +17,6 @@ use kinds::Send;\n use clone::Clone;\n \n pub struct WorkQueue<T> {\n-    // already priv\n     // XXX: Another mystery bug fixed by boxing this lock\n     priv queue: ~Exclusive<~[T]>\n }"}, {"sha": "483bb18137309cd72c29d46f8dab57696a329400", "filename": "src/libstd/run.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -29,13 +29,11 @@ use task;\n  * for the process to terminate.\n  */\n pub struct Process {\n-    // already priv\n     priv inner: process::Process,\n }\n \n /// Options that can be given when starting a Process.\n pub struct ProcessOptions<'self> {\n-    // All were made priv by reedlepee\n     /**\n      * If this is None then the new process will have the same initial\n      * environment as the parent process.\n@@ -100,7 +98,6 @@ impl <'self> ProcessOptions<'self> {\n \n /// The output of a finished process.\n pub struct ProcessOutput {\n-    /// made priv by reedlepee\n     /// The status (exit code) of the process.\n     status: int,\n "}, {"sha": "66b1999f23719605efc0f8b21905e3ac74f7c162", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -355,7 +355,6 @@ Section: Iterators\n /// Use with the `std::iterator` module.\n #[deriving(Clone)]\n pub struct CharIterator<'self> {\n-    // already priv\n     /// The slice remaining to be iterated\n     priv string: &'self str,\n }\n@@ -401,7 +400,6 @@ impl<'self> DoubleEndedIterator<char> for CharIterator<'self> {\n /// Use with the `std::iterator` module.\n #[deriving(Clone)]\n pub struct CharOffsetIterator<'self> {\n-    // already priv\n     /// The original string to be iterated\n     priv string: &'self str,\n     priv iter: CharIterator<'self>,\n@@ -460,7 +458,6 @@ pub type ByteRevIterator<'self> = Invert<ByteIterator<'self>>;\n /// An iterator over the substrings of a string, separated by `sep`.\n #[deriving(Clone)]\n pub struct CharSplitIterator<'self, Sep> {\n-    // already priv\n     /// The slice remaining to be iterated\n     priv string: &'self str,\n     priv sep: Sep,\n@@ -478,7 +475,6 @@ pub type CharRSplitIterator<'self, Sep> = Invert<CharSplitIterator<'self, Sep>>;\n /// splitting at most `count` times.\n #[deriving(Clone)]\n pub struct CharSplitNIterator<'self, Sep> {\n-    // already priv\n     priv iter: CharSplitIterator<'self, Sep>,\n     /// The number of splits remaining\n     priv count: uint,\n@@ -595,7 +591,6 @@ impl<'self, Sep: CharEq> Iterator<&'self str> for CharSplitNIterator<'self, Sep>\n /// substring within a larger string\n #[deriving(Clone)]\n pub struct MatchesIndexIterator<'self> {\n-    // already priv\n     priv haystack: &'self str,\n     priv needle: &'self str,\n     priv position: uint,\n@@ -605,7 +600,6 @@ pub struct MatchesIndexIterator<'self> {\n /// search string\n #[deriving(Clone)]\n pub struct StrSplitIterator<'self> {\n-    // already priv\n     priv it: MatchesIndexIterator<'self>,\n     priv last_end: uint,\n     priv finished: bool\n@@ -1005,7 +999,6 @@ pub struct CharRange {\n     /// Current `char`\n     /// This field should be public making it private causes error while compiling!!\n     ch: char,\n-    // made by reedlepee\n     /// Index of the first byte of the next `char`\n     next: uint\n }"}, {"sha": "ec2d7566177564e86894e67988693767ea242626", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -23,7 +23,6 @@ use option::{Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq, Ord, TotalOrd, TotalEq)]\n-//already priv\n pub struct Ascii { priv chr: u8 }\n \n impl Ascii {"}, {"sha": "30c99c628853fed6114c2cd3d3dd37889069f784", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -108,7 +108,6 @@ pub enum SchedMode {\n  *\n  */\n pub struct SchedOpts {\n-     // all made by reedelpee\n     priv mode: SchedMode,\n }\n \n@@ -145,15 +144,14 @@ pub struct SchedOpts {\n  *           scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n pub struct TaskOpts {\n-     // all made by reedelpee\n-     priv linked: bool,\n-     priv supervised: bool,\n-     priv watched: bool,\n-     priv indestructible: bool,\n-     priv notify_chan: Option<Chan<TaskResult>>,\n-     name: Option<SendStr>,\n-     sched: SchedOpts,\n-     stack_size: Option<uint>\n+    priv linked: bool,\n+    priv supervised: bool,\n+    priv watched: bool,\n+    priv indestructible: bool,\n+    priv notify_chan: Option<Chan<TaskResult>>,\n+    name: Option<SendStr>,\n+    sched: SchedOpts,\n+    stack_size: Option<uint>\n }\n \n /**\n@@ -171,7 +169,6 @@ pub struct TaskOpts {\n \n // FIXME (#3724): Replace the 'consumed' bit with move mode on self\n pub struct TaskBuilder {\n-    //all made priv by reedlepee\n     opts: TaskOpts,\n     priv gen_body: Option<~fn(v: ~fn()) -> ~fn()>,\n     priv can_not_copy: Option<util::NonCopyable>,"}, {"sha": "dec13eded3983873a8d4511224a707873b18684e", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -307,7 +307,6 @@ fn each_ancestor(list:        &mut AncestorList,\n \n // One of these per task.\n pub struct Taskgroup {\n-     // all made by reedlepee\n     // List of tasks with whose fates this one's is intertwined.\n     priv tasks:      TaskGroupArc, // 'none' means the group has failed.\n     // Lists of tasks who will kill us if they fail, but whom we won't kill."}, {"sha": "c561fb6cc8a457d1759982e02a6076f56087b8a2", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -28,7 +28,6 @@ enum Child<T> {\n \n #[allow(missing_doc)]\n pub struct TrieMap<T> {\n-    // already priv\n     priv root: TrieNode<T>,\n     priv length: uint\n }\n@@ -223,7 +222,6 @@ impl<T> Extendable<(uint, T)> for TrieMap<T> {\n \n #[allow(missing_doc)]\n pub struct TrieSet {\n-    // already priv\n     priv map: TrieMap<()>\n }\n \n@@ -445,7 +443,6 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n \n /// Forward iterator over a map\n pub struct TrieMapIterator<'self, T> {\n-    // already priv\n     priv stack: ~[vec::VecIterator<'self, Child<T>>],\n     priv remaining_min: uint,\n     priv remaining_max: uint\n@@ -486,7 +483,6 @@ impl<'self, T> Iterator<(uint, &'self T)> for TrieMapIterator<'self, T> {\n \n /// Forward iterator over a set\n pub struct TrieSetIterator<'self> {\n-    // already priv\n     priv iter: TrieMapIterator<'self, ()>\n }\n "}, {"sha": "e8835462a80e28afd804c9612c355f9d1ac6fce7", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -28,39 +28,34 @@ use ops::Drop;\n  * A simple atomic flag, that can be set and cleared. The most basic atomic type.\n  */\n pub struct AtomicFlag {\n-     // already\n     priv v: int\n }\n \n /**\n  * An atomic boolean type.\n  */\n pub struct AtomicBool {\n-     // already\n     priv v: uint\n }\n \n /**\n  * A signed atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicInt {\n-     // already\n     priv v: int\n }\n \n /**\n  * An unsigned atomic integer type, supporting basic atomic arithmetic operations\n  */\n pub struct AtomicUint {\n-     // already\n     priv v: uint\n }\n \n /**\n  * An unsafe atomic pointer. Only supports basic atomic operations\n  */\n pub struct AtomicPtr<T> {\n-     // already\n     priv p: *mut T\n }\n \n@@ -69,7 +64,6 @@ pub struct AtomicPtr<T> {\n  */\n #[unsafe_no_drop_flag]\n pub struct AtomicOption<T> {\n-     // already\n     priv p: *mut c_void\n }\n "}, {"sha": "d3d768bc0c6fba6ecb070fdee0a64580fe83f9bb", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -23,7 +23,6 @@ use ops::*;\n use option::*;\n use result::*;\n \n-// already\n pub struct DynamicLibrary { priv handle: *libc::c_void }\n \n impl Drop for DynamicLibrary {"}, {"sha": "0131f2c603cdac5c72392bb50e0a5010a5ecfab3", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -149,7 +149,6 @@ pub mod ct {\n     // A formatted conversion from an expression to a string\n     #[deriving(Eq)]\n     pub struct Conv {\n-        // all ade by reedlepee\n         param: Option<uint>,\n         flags: ~[Flag],\n         width: Count,\n@@ -500,7 +499,6 @@ pub mod rt {\n     pub enum Ty { TyDefault, TyBits, TyHexUpper, TyHexLower, TyOctal, }\n \n     pub struct Conv {\n-        // all ade by reedlepee\n         flags: u32,\n         width: Count,\n         precision: Count,"}, {"sha": "ee44bf4d9964a396a0f20adfcc259d5812bca230", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -42,9 +42,8 @@ pub type GlueFn = extern \"Rust\" fn(*i8);\n #[lang=\"ty_desc\"]\n #[cfg(not(test))]\n pub struct TyDesc {\n-    // all ade by reedlepee\n     // sizeof(T)\n-     size: uint,\n+    size: uint,\n \n     // alignof(T)\n     align: uint,"}, {"sha": "b5d7cc47fdc55a1d16a721cbe48f4c14389f4a71", "filename": "src/libstd/unstable/raw.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fraw.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -13,7 +13,6 @@ use unstable::intrinsics::TyDesc;\n \n /// The representation of a Rust managed box\n pub struct Box<T> {\n-    // all ade by reedlepee\n     ref_count: uint,\n     type_desc: *TyDesc,\n     priv prev: *Box<T>,\n@@ -23,7 +22,6 @@ pub struct Box<T> {\n \n /// The representation of a Rust vector\n pub struct Vec<T> {\n-    // all ade by reedlepee\n     fill: uint,\n     alloc: uint,\n     data: T\n@@ -34,14 +32,12 @@ pub type String = Vec<u8>;\n \n /// The representation of a Rust slice\n pub struct Slice<T> {\n-    // all ade by reedlepee\n     data: *T,\n     len: uint\n }\n \n /// The representation of a Rust closure\n pub struct Closure {\n-    // all ade by reedlepee\n     code: *(),\n     env: *(),\n }"}, {"sha": "9d15dd031e0dce2b51573cd5a0aabe78c3b9e5cf", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -28,7 +28,6 @@ use vec;\n /// Enforces no shared-memory safety.\n //#[unsafe_no_drop_flag] FIXME: #9758\n pub struct UnsafeArc<T> {\n-    // all ade by reedlepee\n     data: *mut ArcData<T>,\n }\n \n@@ -305,7 +304,6 @@ pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n type rust_little_lock = *libc::c_void;\n \n pub struct LittleLock {\n-    // all ade by reedlepee\n     priv l: rust_little_lock,\n }\n \n@@ -355,7 +353,6 @@ struct ExData<T> {\n  * need to block or deschedule while accessing shared state, use extra::sync::RWArc.\n  */\n pub struct Exclusive<T> {\n-    // all ade by reedlepee\n     priv x: UnsafeArc<ExData<T>>\n }\n "}, {"sha": "b10d0ded5b47757345b2b3b6bca964dd0cb27aa9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad465441ba3424cc5bcba2227c6a42ffe09fd77f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=ad465441ba3424cc5bcba2227c6a42ffe09fd77f", "patch": "@@ -216,7 +216,6 @@ pub fn build<A>(size: Option<uint>, builder: &fn(push: &fn(v: A))) -> ~[A] {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function.\n pub struct SplitIterator<'self, T> {\n-    // already priv\n     priv v: &'self [T],\n     priv n: uint,\n     priv pred: &'self fn(t: &T) -> bool,\n@@ -266,7 +265,6 @@ impl<'self, T> Iterator<&'self [T]> for SplitIterator<'self, T> {\n /// An iterator over the slices of a vector separated by elements that\n /// match a predicate function, from back to front.\n pub struct RSplitIterator<'self, T> {\n-    // already priv\n     priv v: &'self [T],\n     priv n: uint,\n     priv pred: &'self fn(t: &T) -> bool,\n@@ -405,7 +403,6 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (~[T], ~[U]) {\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n pub struct ElementSwaps {\n-    // already priv\n     priv sdir: ~[SizeDirection],\n     /// If true, emit the last swap that returns the sequence to initial state\n     priv emit_reset: bool,\n@@ -481,7 +478,6 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n ///\n /// Generates even and odd permutations alternatingly.\n pub struct Permutations<T> {\n-    // already priv\n     priv swaps: ElementSwaps,\n     priv v: ~[T],\n }\n@@ -504,7 +500,6 @@ impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n /// a vector.\n #[deriving(Clone)]\n pub struct WindowIter<'self, T> {\n-    // already priv\n     priv v: &'self [T],\n     priv size: uint\n }\n@@ -539,7 +534,6 @@ impl<'self, T> Iterator<&'self [T]> for WindowIter<'self, T> {\n /// the last slice of the iteration will be the remainder.\n #[deriving(Clone)]\n pub struct ChunkIter<'self, T> {\n-    // already priv\n     priv v: &'self [T],\n     priv size: uint\n }\n@@ -2399,7 +2393,6 @@ impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n //iterator!{struct VecIterator -> *T, &'self T}\n /// An iterator for iterating over a vector.\n pub struct VecIterator<'self, T> {\n-    // already priv\n     priv ptr: *T,\n     priv end: *T,\n     priv lifetime: Option<&'self ()> // FIXME: #5922\n@@ -2418,7 +2411,6 @@ impl<'self, T> Clone for VecIterator<'self, T> {\n //iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n /// An iterator for mutating the elements of a vector.\n pub struct VecMutIterator<'self, T> {\n-    // already priv\n     priv ptr: *mut T,\n     priv end: *mut T,\n     priv lifetime: Option<&'self mut ()> // FIXME: #5922\n@@ -2430,7 +2422,6 @@ pub type MutRevIterator<'self, T> = Invert<VecMutIterator<'self, T>>;\n /// An iterator that moves out of a vector.\n #[deriving(Clone)]\n pub struct MoveIterator<T> {\n-    // already priv\n     priv v: ~[T],\n     priv idx: uint,\n }\n@@ -2465,7 +2456,6 @@ impl<T> Iterator<T> for MoveIterator<T> {\n /// An iterator that moves out of a vector in reverse order.\n #[deriving(Clone)]\n pub struct MoveRevIterator<T> {\n-    // already priv\n     priv v: ~[T]\n }\n "}]}