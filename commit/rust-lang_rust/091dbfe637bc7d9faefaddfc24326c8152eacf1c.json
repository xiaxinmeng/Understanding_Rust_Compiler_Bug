{"sha": "091dbfe637bc7d9faefaddfc24326c8152eacf1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MWRiZmU2MzdiYzdkOWZhZWZhZGRmYzI0MzI2YzgxNTJlYWNmMWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-12T13:23:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T13:23:26Z"}, "message": "Merge #9535\n\n9535: internal: remove proc macro management thread r=jonas-schievink a=jonas-schievink\n\nCommunication with the proc macro server process has always happened one request at a time, so the additional thread isn't really needed (it just forwarded each request, and sent back the response). This removes some indirection that was a bit hard to understand (a channel was allocated and sent over another channel to return the response).\r\n\r\nHope I'm not missing anything here\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "3c6855c8a482c98f3c24ff5e20f275b8a19e6541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6855c8a482c98f3c24ff5e20f275b8a19e6541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091dbfe637bc7d9faefaddfc24326c8152eacf1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7EJOCRBK7hj4Ov3rIwAAXR0IAF7ykTeQYtnkL5mYZfQN3bqX\njfrAoEOrSe6SRFfCSPXevFZIKQ5mVT2UQCYhgY6Kz9r+NmZyO540AUhCSZeid12N\nxN1HPEq3u8DgO9SYC2XJPYifd1/iE6SwBCQ/ftjC50lSem1UZrRp818y+zpRorh9\nrNWAa7NVJHtAWBtZaOs05rlKnpg2yZstTNX3kI6e9fRi5oxoQFFrFide67gvvTcK\nO+F2bWaVHztsMPnNP/Fn4/RH3sM84PK3h/X54bcr5KK2z43+krRlxBhw32LDRuym\n8Mt/RQxqJLswdW6JoKp9ediJsj5skWtu549WWSCaTAfl2YfXfeYhueBohESQjR0=\n=Sj//\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c6855c8a482c98f3c24ff5e20f275b8a19e6541\nparent fe00358888a24c64878abc15f09b0e60e16db9d6\nparent 29db33ce76414913eba6d4851f990caf3df14465\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626096206 +0000\ncommitter GitHub <noreply@github.com> 1626096206 +0000\n\nMerge #9535\n\n9535: internal: remove proc macro management thread r=jonas-schievink a=jonas-schievink\n\nCommunication with the proc macro server process has always happened one request at a time, so the additional thread isn't really needed (it just forwarded each request, and sent back the response). This removes some indirection that was a bit hard to understand (a channel was allocated and sent over another channel to return the response).\r\n\r\nHope I'm not missing anything here\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091dbfe637bc7d9faefaddfc24326c8152eacf1c", "html_url": "https://github.com/rust-lang/rust/commit/091dbfe637bc7d9faefaddfc24326c8152eacf1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091dbfe637bc7d9faefaddfc24326c8152eacf1c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe00358888a24c64878abc15f09b0e60e16db9d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe00358888a24c64878abc15f09b0e60e16db9d6", "html_url": "https://github.com/rust-lang/rust/commit/fe00358888a24c64878abc15f09b0e60e16db9d6"}, {"sha": "29db33ce76414913eba6d4851f990caf3df14465", "url": "https://api.github.com/repos/rust-lang/rust/commits/29db33ce76414913eba6d4851f990caf3df14465", "html_url": "https://github.com/rust-lang/rust/commit/29db33ce76414913eba6d4851f990caf3df14465"}], "stats": {"total": 135, "additions": 55, "deletions": 80}, "files": [{"sha": "244f65579ed8578c5dbe614b505c9de5818c6eba", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=091dbfe637bc7d9faefaddfc24326c8152eacf1c", "patch": "@@ -15,19 +15,19 @@ use std::{\n     ffi::OsStr,\n     io,\n     path::{Path, PathBuf},\n-    sync::Arc,\n+    sync::{Arc, Mutex},\n };\n \n use tt::{SmolStr, Subtree};\n \n-use crate::process::{ProcMacroProcessSrv, ProcMacroProcessThread};\n+use crate::process::ProcMacroProcessSrv;\n \n pub use rpc::{ExpansionResult, ExpansionTask, ListMacrosResult, ListMacrosTask, ProcMacroKind};\n pub use version::{read_dylib_info, RustCInfo};\n \n #[derive(Debug, Clone)]\n struct ProcMacroProcessExpander {\n-    process: Arc<ProcMacroProcessSrv>,\n+    process: Arc<Mutex<ProcMacroProcessSrv>>,\n     dylib_path: PathBuf,\n     name: SmolStr,\n }\n@@ -56,24 +56,34 @@ impl base_db::ProcMacroExpander for ProcMacroProcessExpander {\n             env: env.iter().map(|(k, v)| (k.to_string(), v.to_string())).collect(),\n         };\n \n-        let result: ExpansionResult = self.process.send_task(msg::Request::ExpansionMacro(task))?;\n+        let result: ExpansionResult = self\n+            .process\n+            .lock()\n+            .unwrap_or_else(|e| e.into_inner())\n+            .send_task(msg::Request::ExpansionMacro(task))?;\n         Ok(result.expansion)\n     }\n }\n \n #[derive(Debug)]\n pub struct ProcMacroClient {\n-    process: Arc<ProcMacroProcessSrv>,\n-    thread: ProcMacroProcessThread,\n+    /// Currently, the proc macro process expands all procedural macros sequentially.\n+    ///\n+    /// That means that concurrent salsa requests may block each other when expanding proc macros,\n+    /// which is unfortunate, but simple and good enough for the time being.\n+    ///\n+    /// Therefore, we just wrap the `ProcMacroProcessSrv` in a mutex here.\n+    process: Arc<Mutex<ProcMacroProcessSrv>>,\n }\n \n impl ProcMacroClient {\n+    /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn extern_process(\n         process_path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n     ) -> io::Result<ProcMacroClient> {\n-        let (thread, process) = ProcMacroProcessSrv::run(process_path, args)?;\n-        Ok(ProcMacroClient { process: Arc::new(process), thread })\n+        let process = ProcMacroProcessSrv::run(process_path, args)?;\n+        Ok(ProcMacroClient { process: Arc::new(Mutex::new(process)) })\n     }\n \n     pub fn by_dylib_path(&self, dylib_path: &Path) -> Vec<ProcMacro> {\n@@ -93,7 +103,12 @@ impl ProcMacroClient {\n             }\n         }\n \n-        let macros = match self.process.find_proc_macros(dylib_path) {\n+        let macros = match self\n+            .process\n+            .lock()\n+            .unwrap_or_else(|e| e.into_inner())\n+            .find_proc_macros(dylib_path)\n+        {\n             Err(err) => {\n                 eprintln!(\"Failed to find proc macros. Error: {:#?}\", err);\n                 return vec![];"}, {"sha": "6222dd649afe49dfabebbf5902cacb763a38b56e", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 30, "deletions": 71, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=091dbfe637bc7d9faefaddfc24326c8152eacf1c", "patch": "@@ -5,54 +5,38 @@ use std::{\n     ffi::{OsStr, OsString},\n     io::{self, BufRead, BufReader, Write},\n     path::{Path, PathBuf},\n-    process::{Child, Command, Stdio},\n-    sync::{Arc, Weak},\n+    process::{Child, ChildStdin, ChildStdout, Command, Stdio},\n };\n \n-use crossbeam_channel::{bounded, Receiver, Sender};\n use stdx::JodChild;\n \n use crate::{\n     msg::{ErrorCode, Message, Request, Response, ResponseError},\n     rpc::{ListMacrosResult, ListMacrosTask, ProcMacroKind},\n };\n \n-#[derive(Debug, Default)]\n-pub(crate) struct ProcMacroProcessSrv {\n-    inner: Weak<Sender<Task>>,\n-}\n-\n #[derive(Debug)]\n-pub(crate) struct ProcMacroProcessThread {\n-    // XXX: drop order is significant\n-    sender: Arc<Sender<Task>>,\n-    handle: jod_thread::JoinHandle<()>,\n+pub(crate) struct ProcMacroProcessSrv {\n+    process: Process,\n+    stdin: ChildStdin,\n+    stdout: BufReader<ChildStdout>,\n }\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n         process_path: PathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n-    ) -> io::Result<(ProcMacroProcessThread, ProcMacroProcessSrv)> {\n-        let process = Process::run(process_path, args)?;\n-\n-        let (task_tx, task_rx) = bounded(0);\n-        let handle = jod_thread::Builder::new()\n-            .name(\"ProcMacroClient\".to_owned())\n-            .spawn(move || {\n-                client_loop(task_rx, process);\n-            })\n-            .expect(\"failed to spawn thread\");\n-\n-        let task_tx = Arc::new(task_tx);\n-        let srv = ProcMacroProcessSrv { inner: Arc::downgrade(&task_tx) };\n-        let thread = ProcMacroProcessThread { handle, sender: task_tx };\n-\n-        Ok((thread, srv))\n+    ) -> io::Result<ProcMacroProcessSrv> {\n+        let mut process = Process::run(process_path, args)?;\n+        let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+\n+        let srv = ProcMacroProcessSrv { process, stdin, stdout };\n+\n+        Ok(srv)\n     }\n \n     pub(crate) fn find_proc_macros(\n-        &self,\n+        &mut self,\n         dylib_path: &Path,\n     ) -> Result<Vec<(String, ProcMacroKind)>, tt::ExpansionError> {\n         let task = ListMacrosTask { lib: dylib_path.to_path_buf() };\n@@ -61,64 +45,39 @@ impl ProcMacroProcessSrv {\n         Ok(result.macros)\n     }\n \n-    pub(crate) fn send_task<R>(&self, req: Request) -> Result<R, tt::ExpansionError>\n+    pub(crate) fn send_task<R>(&mut self, req: Request) -> Result<R, tt::ExpansionError>\n     where\n         R: TryFrom<Response, Error = &'static str>,\n     {\n-        let (result_tx, result_rx) = bounded(0);\n-        let sender = match self.inner.upgrade() {\n-            None => return Err(tt::ExpansionError::Unknown(\"proc macro process is closed\".into())),\n-            Some(it) => it,\n-        };\n-        sender\n-            .send(Task { req, result_tx })\n-            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n-\n-        let res = result_rx\n-            .recv()\n-            .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n-\n-        match res {\n-            Some(Response::Error(err)) => Err(tt::ExpansionError::ExpansionError(err.message)),\n-            Some(res) => Ok(res.try_into().map_err(|err| {\n-                tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n-            })?),\n-            None => Err(tt::ExpansionError::Unknown(\"Empty result\".into())),\n-        }\n-    }\n-}\n-\n-fn client_loop(task_rx: Receiver<Task>, mut process: Process) {\n-    let (mut stdin, mut stdout) = process.stdio().expect(\"couldn't access child stdio\");\n-\n-    let mut buf = String::new();\n-\n-    for Task { req, result_tx } in task_rx {\n-        match send_request(&mut stdin, &mut stdout, req, &mut buf) {\n-            Ok(res) => result_tx.send(res).unwrap(),\n+        let mut buf = String::new();\n+        let res = match send_request(&mut self.stdin, &mut self.stdout, req, &mut buf) {\n+            Ok(res) => res,\n             Err(err) => {\n+                let result = self.process.child.try_wait();\n                 log::error!(\n                     \"proc macro server crashed, server process state: {:?}, server request error: {:?}\",\n-                    process.child.try_wait(),\n+                    result,\n                     err\n                 );\n                 let res = Response::Error(ResponseError {\n                     code: ErrorCode::ServerErrorEnd,\n                     message: \"proc macro server crashed\".into(),\n                 });\n-                result_tx.send(res.into()).unwrap();\n-                // Exit the thread.\n-                break;\n+                Some(res)\n             }\n+        };\n+\n+        match res {\n+            Some(Response::Error(err)) => Err(tt::ExpansionError::ExpansionError(err.message)),\n+            Some(res) => Ok(res.try_into().map_err(|err| {\n+                tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n+            })?),\n+            None => Err(tt::ExpansionError::Unknown(\"Empty result\".into())),\n         }\n     }\n }\n \n-struct Task {\n-    req: Request,\n-    result_tx: Sender<Option<Response>>,\n-}\n-\n+#[derive(Debug)]\n struct Process {\n     child: JodChild,\n }\n@@ -133,7 +92,7 @@ impl Process {\n         Ok(Process { child })\n     }\n \n-    fn stdio(&mut self) -> Option<(impl Write, impl BufRead)> {\n+    fn stdio(&mut self) -> Option<(ChildStdin, BufReader<ChildStdout>)> {\n         let stdin = self.child.stdin.take()?;\n         let stdout = self.child.stdout.take()?;\n         let read = BufReader::new(stdout);"}, {"sha": "e83d5db437d1d218d5fe3c3696e23790366b9de1", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091dbfe637bc7d9faefaddfc24326c8152eacf1c/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=091dbfe637bc7d9faefaddfc24326c8152eacf1c", "patch": "@@ -111,6 +111,7 @@ pub fn defer<F: FnOnce()>(f: F) -> impl Drop {\n }\n \n #[cfg_attr(not(target_arch = \"wasm32\"), repr(transparent))]\n+#[derive(Debug)]\n pub struct JodChild(pub std::process::Child);\n \n impl ops::Deref for JodChild {"}]}