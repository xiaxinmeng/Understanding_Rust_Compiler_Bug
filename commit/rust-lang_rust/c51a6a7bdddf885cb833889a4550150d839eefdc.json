{"sha": "c51a6a7bdddf885cb833889a4550150d839eefdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MWE2YTdiZGRkZjg4NWNiODMzODg5YTQ1NTAxNTBkODM5ZWVmZGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-16T15:06:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-17T09:53:22Z"}, "message": "fix error on wrong path", "tree": {"sha": "514f9daf80d58325a93fee6194377bd36e5170de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514f9daf80d58325a93fee6194377bd36e5170de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51a6a7bdddf885cb833889a4550150d839eefdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51a6a7bdddf885cb833889a4550150d839eefdc", "html_url": "https://github.com/rust-lang/rust/commit/c51a6a7bdddf885cb833889a4550150d839eefdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51a6a7bdddf885cb833889a4550150d839eefdc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d6b8baa896f337dde27d569c09ebaab029e6daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6b8baa896f337dde27d569c09ebaab029e6daa", "html_url": "https://github.com/rust-lang/rust/commit/0d6b8baa896f337dde27d569c09ebaab029e6daa"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "bbf57004d5b57d5204399546325bf6d23ff47b32", "filename": "crates/ra_hir/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmarks.rs?ref=c51a6a7bdddf885cb833889a4550150d839eefdc", "patch": "@@ -1,4 +1,5 @@\n test_utils::marks!(\n+    bogus_paths\n     name_res_works_for_broken_modules\n     can_import_enum_variant\n     type_var_cycles_resolve_completely"}, {"sha": "e7afc34c96eaaeed7886c3eabf175cfa53e59916", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=c51a6a7bdddf885cb833889a4550150d839eefdc", "patch": "@@ -213,18 +213,22 @@ where\n                 }\n             }\n         } else {\n-            let last_segment = import.path.segments.last().unwrap();\n-            let name = import.alias.clone().unwrap_or_else(|| last_segment.name.clone());\n-            log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n-\n-            // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n-            if import.is_extern_crate && module_id == self.def_map.root {\n-                if let Some(def) = def.take_types() {\n-                    self.def_map.extern_prelude.insert(name.clone(), def);\n+            match import.path.segments.last() {\n+                Some(last_segment) => {\n+                    let name = import.alias.clone().unwrap_or_else(|| last_segment.name.clone());\n+                    log::debug!(\"resolved import {:?} ({:?}) to {:?}\", name, import, def);\n+\n+                    // extern crates in the crate root are special-cased to insert entries into the extern prelude: rust-lang/rust#54658\n+                    if import.is_extern_crate && module_id == self.def_map.root {\n+                        if let Some(def) = def.take_types() {\n+                            self.def_map.extern_prelude.insert(name.clone(), def);\n+                        }\n+                    }\n+                    let resolution = Resolution { def, import: Some(import_id) };\n+                    self.update(module_id, Some(import_id), &[(name, resolution)]);\n                 }\n+                None => tested_by!(bogus_paths),\n             }\n-            let resolution = Resolution { def, import: Some(import_id) };\n-            self.update(module_id, Some(import_id), &[(name, resolution)]);\n         }\n     }\n "}, {"sha": "f73f9d8a68018f62e7a442b4fa947c99985b5090", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=c51a6a7bdddf885cb833889a4550150d839eefdc", "patch": "@@ -96,6 +96,32 @@ E: t\n     )\n }\n \n+#[test]\n+fn bogus_paths() {\n+    covers!(bogus_paths);\n+    let map = def_map(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        struct S;\n+        use self;\n+\n+        //- /foo/mod.rs\n+        use super;\n+        use crate;\n+\n+        \",\n+    );\n+    assert_snapshot_matches!(map, @r###\"\n+crate\n+foo: t\n+S: t v\n+\n+crate::foo\n+\"###\n+    )\n+}\n+\n #[test]\n fn use_as() {\n     let map = def_map("}, {"sha": "1c268b49cd75b6f22bd6fd02efdc4512ceca6ba8", "filename": "crates/test_utils/src/marks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51a6a7bdddf885cb833889a4550150d839eefdc/crates%2Ftest_utils%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fmarks.rs?ref=c51a6a7bdddf885cb833889a4550150d839eefdc", "patch": "@@ -30,13 +30,13 @@ use std::sync::atomic::{AtomicUsize, Ordering};\n \n #[macro_export]\n macro_rules! tested_by {\n-    ($ident:ident) => {\n+    ($ident:ident) => {{\n         #[cfg(test)]\n         {\n             // sic! use call-site crate\n             crate::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n         }\n-    };\n+    }};\n }\n \n #[macro_export]"}]}