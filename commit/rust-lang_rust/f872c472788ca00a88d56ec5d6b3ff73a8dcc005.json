{"sha": "f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzJjNDcyNzg4Y2EwMGE4OGQ1NmVjNWQ2YjNmZjczYThkY2MwMDU=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-12-28T17:16:48Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luis@debethencourt.com", "date": "2013-12-29T20:25:32Z"}, "message": "Rename PkgId to CrateId", "tree": {"sha": "f123e7cd655e31c8c3ea271e3530cde42cb59d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f123e7cd655e31c8c3ea271e3530cde42cb59d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "html_url": "https://github.com/rust-lang/rust/commit/f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a", "html_url": "https://github.com/rust-lang/rust/commit/4bc09713dfea7e53095c9a64a9e4ff90868b5b2a"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "786c05de20465258a4d5f0b608c09854578032d4", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -41,7 +41,7 @@ use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::pkgid::PkgId;\n+use syntax::crateid::CrateId;\n \n #[deriving(Clone, Eq)]\n pub enum output_type {\n@@ -444,13 +444,13 @@ pub mod write {\n  *\n  * So here is what we do:\n  *\n- *  - Consider the package id; every crate has one (specified with pkgid\n+ *  - Consider the package id; every crate has one (specified with crate_id\n  *    attribute).  If a package id isn't provided explicitly, we infer a\n  *    versionless one from the output name. The version will end up being 0.0\n  *    in this case. CNAME and CVERS are taken from this package id. For\n  *    example, github.com/mozilla/CNAME#CVERS.\n  *\n- *  - Define CMH as SHA256(pkgid).\n+ *  - Define CMH as SHA256(crateid).\n  *\n  *  - Define CMH8 as the first 8 characters of CMH.\n  *\n@@ -469,9 +469,9 @@ pub fn build_link_meta(sess: Session,\n                        symbol_hasher: &mut Sha256)\n                        -> LinkMeta {\n     // This calculates CMH as defined above\n-    fn crate_hash(symbol_hasher: &mut Sha256, pkgid: &PkgId) -> @str {\n+    fn crate_hash(symbol_hasher: &mut Sha256, crateid: &CrateId) -> @str {\n         symbol_hasher.reset();\n-        symbol_hasher.input_str(pkgid.to_str());\n+        symbol_hasher.input_str(crateid.to_str());\n         truncated_hash_result(symbol_hasher).to_managed()\n     }\n \n@@ -487,10 +487,10 @@ pub fn build_link_meta(sess: Session,\n         Some(s) => s,\n     };\n \n-    let hash = crate_hash(symbol_hasher, &pkgid);\n+    let hash = crate_hash(symbol_hasher, &crateid);\n \n     LinkMeta {\n-        pkgid: pkgid,\n+        crateid: crateid,\n         crate_hash: hash,\n     }\n }\n@@ -509,7 +509,7 @@ pub fn symbol_hash(tcx: ty::ctxt,\n     // to be independent of one another in the crate.\n \n     symbol_hasher.reset();\n-    symbol_hasher.input_str(link_meta.pkgid.name);\n+    symbol_hasher.input_str(link_meta.crateid.name);\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(link_meta.crate_hash);\n     symbol_hasher.input_str(\"-\");\n@@ -669,7 +669,7 @@ pub fn mangle_exported_name(ccx: &CrateContext,\n     let hash = get_symbol_hash(ccx, t);\n     return exported_name(ccx.sess, path,\n                          hash,\n-                         ccx.link_meta.pkgid.version_or_default());\n+                         ccx.link_meta.crateid.version_or_default());\n }\n \n pub fn mangle_internal_name_by_type_only(ccx: &CrateContext,\n@@ -710,9 +710,9 @@ pub fn mangle_internal_name_by_path(ccx: &CrateContext, path: path) -> ~str {\n \n pub fn output_lib_filename(lm: &LinkMeta) -> ~str {\n     format!(\"{}-{}-{}\",\n-            lm.pkgid.name,\n+            lm.crateid.name,\n             lm.crate_hash.slice_chars(0, 8),\n-            lm.pkgid.version_or_default())\n+            lm.crateid.version_or_default())\n }\n \n pub fn get_cc_prog(sess: Session) -> ~str {"}, {"sha": "8b3d5062e15190c980f6d9d68f54b3f4f2b8f5db", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cast;\n-use syntax::pkgid::PkgId;\n+use syntax::crateid::CrateId;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n \n@@ -206,6 +206,6 @@ pub static tag_native_libraries_kind: uint = 0x106;\n \n #[deriving(Clone)]\n pub struct LinkMeta {\n-    pkgid: PkgId,\n+    crateid: CrateId,\n     crate_hash: @str,\n }"}, {"sha": "8fa1e5563947f3693a7702731604eca5246c9be0", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -25,7 +25,7 @@ use syntax::codemap::{Span, dummy_sp};\n use syntax::diagnostic::span_handler;\n use syntax::parse::token;\n use syntax::parse::token::ident_interner;\n-use syntax::pkgid::PkgId;\n+use syntax::crateid::CrateId;\n use syntax::visit;\n \n // Traverses an AST, reading all the information about use'd crates and extern\n@@ -73,7 +73,7 @@ struct cache_entry {\n     cnum: ast::CrateNum,\n     span: Span,\n     hash: @str,\n-    pkgid: PkgId,\n+    crateid: CrateId,\n }\n \n fn dump_crates(crate_cache: &[cache_entry]) {\n@@ -89,10 +89,10 @@ fn warn_if_multiple_versions(e: &mut Env,\n                              diag: @mut span_handler,\n                              crate_cache: &[cache_entry]) {\n     if crate_cache.len() != 0u {\n-        let name = crate_cache[crate_cache.len() - 1].pkgid.name.clone();\n+        let name = crate_cache[crate_cache.len() - 1].crateid.name.clone();\n \n         let (matches, non_matches) = crate_cache.partitioned(|entry|\n-            name == entry.pkgid.name);\n+            name == entry.crateid.name);\n \n         assert!(!matches.is_empty());\n \n@@ -101,7 +101,7 @@ fn warn_if_multiple_versions(e: &mut Env,\n                 format!(\"using multiple versions of crate `{}`\", name));\n             for match_ in matches.iter() {\n                 diag.span_note(match_.span, \"used here\");\n-                loader::note_pkgid_attr(diag, &match_.pkgid);\n+                loader::note_crateid_attr(diag, &match_.crateid);\n             }\n         }\n \n@@ -138,7 +138,7 @@ fn visit_view_item(e: &mut Env, i: &ast::view_item) {\n                  ident, path_opt);\n           let (name, version) = match path_opt {\n               Some((path_str, _)) => {\n-                  let crateid: Option<PkgId> = from_str(path_str);\n+                  let crateid: Option<CrateId> = from_str(path_str);\n                   match crateid {\n                       None => (@\"\", @\"\"),\n                       Some(crateid) => {\n@@ -245,12 +245,12 @@ fn visit_item(e: &Env, i: @ast::item) {\n fn existing_match(e: &Env, name: @str, version: @str, hash: &str) -> Option<ast::CrateNum> {\n     let crate_cache = e.crate_cache.borrow();\n     for c in crate_cache.get().iter() {\n-        let pkgid_version = match c.pkgid.version {\n+        let crateid_version = match c.crateid.version {\n             None => @\"0.0\",\n             Some(ref ver) => ver.to_managed(),\n         };\n-        if (name.is_empty() || c.pkgid.name.to_managed() == name) &&\n-            (version.is_empty() || pkgid_version == version) &&\n+        if (name.is_empty() || c.crateid.name.to_managed() == name) &&\n+            (version.is_empty() || crateid_version == version) &&\n             (hash.is_empty() || c.hash.as_slice() == hash) {\n             return Some(c.cnum);\n         }\n@@ -293,7 +293,7 @@ fn resolve_crate(e: &mut Env,\n                 cnum: cnum,\n                 span: span,\n                 hash: hash,\n-                pkgid: pkgid,\n+                crateid: crateid,\n             });\n         }\n         e.next_crate_num += 1;"}, {"sha": "b4c19c771dc0aacb2c8e112a37e794f0b1ee9ffd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -1175,7 +1175,7 @@ pub fn get_crate_vers(data: &[u8]) -> @str {\n     let attrs = decoder::get_crate_attributes(data);\n     match attr::find_crateid(attrs) {\n         None => @\"0.0\",\n-        Some(pkgid) => pkgid.version_or_default().to_managed(),\n+        Some(crateid) => crateid.version_or_default().to_managed(),\n     }\n }\n "}, {"sha": "73b0ac46cbda96cffe978eea5f3bfd468c02ff15", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -1559,19 +1559,19 @@ fn encode_attributes(ebml_w: &mut writer::Encoder, attrs: &[Attribute]) {\n     ebml_w.end_tag();\n }\n \n-// So there's a special crate attribute called 'pkgid' which defines the\n+// So there's a special crate attribute called 'crate_id' which defines the\n // metadata that Rust cares about for linking crates. If the user didn't\n // provide it we will throw it in anyway with a default value.\n fn synthesize_crate_attrs(ecx: &EncodeContext,\n                           crate: &Crate) -> ~[Attribute] {\n \n-    fn synthesize_pkgid_attr(ecx: &EncodeContext) -> Attribute {\n-        assert!(!ecx.link_meta.pkgid.name.is_empty());\n+    fn synthesize_crateid_attr(ecx: &EncodeContext) -> Attribute {\n+        assert!(!ecx.link_meta.crateid.name.is_empty());\n \n         attr::mk_attr(\n             attr::mk_name_value_item_str(\n                 @\"crate_id\",\n-                ecx.link_meta.pkgid.to_str().to_managed()))\n+                ecx.link_meta.crateid.to_str().to_managed()))\n     }\n \n     let mut attrs = ~[];\n@@ -1580,7 +1580,7 @@ fn synthesize_crate_attrs(ecx: &EncodeContext,\n             attrs.push(*attr);\n         }\n     }\n-    attrs.push(synthesize_pkgid_attr(ecx));\n+    attrs.push(synthesize_crateid_attr(ecx));\n \n     attrs\n }"}, {"sha": "481a43d1cedd2581b063b72c602dceaf941c5cd9", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -21,7 +21,7 @@ use metadata::filesearch;\n use syntax::codemap::Span;\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::ident_interner;\n-use syntax::pkgid::PkgId;\n+use syntax::crateid::CrateId;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n \n@@ -112,7 +112,7 @@ impl Context {\n                             Some(cvec) =>\n                                 if crate_matches(cvec.as_slice(), self.name,\n                                                  self.version, self.hash) {\n-                                    debug!(\"found {} with matching pkgid\",\n+                                    debug!(\"found {} with matching crate_id\",\n                                            path.display());\n                                     let (rlib, dylib) = if file.ends_with(\".rlib\") {\n                                         (Some(path.clone()), None)\n@@ -126,7 +126,7 @@ impl Context {\n                                     });\n                                     FileMatches\n                                 } else {\n-                                    debug!(\"skipping {}, pkgid doesn't match\",\n+                                    debug!(\"skipping {}, crate_id doesn't match\",\n                                            path.display());\n                                     FileDoesntMatch\n                                 },\n@@ -167,8 +167,8 @@ impl Context {\n                     let attrs = decoder::get_crate_attributes(data);\n                     match attr::find_crateid(attrs) {\n                         None => {}\n-                        Some(pkgid) => {\n-                            note_pkgid_attr(self.sess.diagnostic(), &pkgid);\n+                        Some(crateid) => {\n+                            note_crateid_attr(self.sess.diagnostic(), &crateid);\n                         }\n                     }\n                 }\n@@ -231,9 +231,9 @@ impl Context {\n     }\n }\n \n-pub fn note_pkgid_attr(diag: @mut span_handler,\n-                       pkgid: &PkgId) {\n-    diag.handler().note(format!(\"pkgid: {}\", pkgid.to_str()));\n+pub fn note_crateid_attr(diag: @mut span_handler,\n+                       crateid: &CrateId) {\n+    diag.handler().note(format!(\"crate_id: {}\", crateid.to_str()));\n }\n \n fn crate_matches(crate_data: &[u8],\n@@ -243,13 +243,13 @@ fn crate_matches(crate_data: &[u8],\n     let attrs = decoder::get_crate_attributes(crate_data);\n     match attr::find_crateid(attrs) {\n         None => false,\n-        Some(pkgid) => {\n+        Some(crateid) => {\n             if !hash.is_empty() {\n                 let chash = decoder::get_crate_hash(crate_data);\n                 if chash != hash { return false; }\n             }\n-            name == pkgid.name.to_managed() &&\n-                (version.is_empty() || version == pkgid.version_or_default().to_managed())\n+            name == crateid.name.to_managed() &&\n+                (version.is_empty() || version == crateid.version_or_default().to_managed())\n         }\n     }\n }"}, {"sha": "ce953ab3ab70f7d26ad4e2a3f5f83d189e1ea5fd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -3048,8 +3048,8 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let sym_name = if is_top {\n         ~\"_rust_crate_map_toplevel\"\n     } else {\n-        symname(sess, \"_rust_crate_map_\" + mapmeta.pkgid.name, mapmeta.crate_hash,\n-                mapmeta.pkgid.version_or_default())\n+        symname(sess, \"_rust_crate_map_\" + mapmeta.crateid.name, mapmeta.crate_hash,\n+                mapmeta.crateid.version_or_default())\n     };\n \n     let slicetype = Type::struct_([int_type, int_type], false);\n@@ -3168,8 +3168,8 @@ pub fn write_metadata(cx: &CrateContext, crate: &ast::Crate) -> ~[u8] {\n                         flate::deflate_bytes(metadata);\n     let llmeta = C_bytes(compressed);\n     let llconst = C_struct([llmeta], false);\n-    let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.pkgid.name,\n-                       cx.link_meta.pkgid.version_or_default(), cx.link_meta.crate_hash);\n+    let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.crateid.name,\n+                       cx.link_meta.crateid.version_or_default(), cx.link_meta.crate_hash);\n     let llglobal = name.with_c_str(|buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(cx.metadata_llmod, val_ty(llconst).to_ref(), buf)\n@@ -3205,7 +3205,7 @@ pub fn trans_crate(sess: session::Session,\n     // crashes if the module identifer is same as other symbols\n     // such as a function name in the module.\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n-    let llmod_id = link_meta.pkgid.name.clone() + \".rc\";\n+    let llmod_id = link_meta.crateid.name.clone() + \".rc\";\n \n     let ccx = @CrateContext::new(sess,\n                                      llmod_id,"}, {"sha": "3e9aae4730e34cb6008f1c3fff0d93cd8df0d9e5", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -2827,7 +2827,7 @@ fn namespace_for_item(cx: &CrateContext,\n \n         if def_id.crate == ast::LOCAL_CRATE {\n             // prepend crate name if not already present\n-            let crate_namespace_ident = token::str_to_ident(cx.link_meta.pkgid.name);\n+            let crate_namespace_ident = token::str_to_ident(cx.link_meta.crateid.name);\n             item_path.insert(0, ast_map::path_mod(crate_namespace_ident));\n         }\n "}, {"sha": "9fcd0f458b3b5ae62afe65e81635df2b47b53147", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -1855,7 +1855,7 @@ pub fn trans_log_level(bcx: @Block) -> DatumBlock {\n                 Some(&src) => {\n                     ccx.sess.cstore.get_crate_data(src.crate).name\n                 }\n-                None => ccx.link_meta.pkgid.name.to_managed(),\n+                None => ccx.link_meta.crateid.name.to_managed(),\n             };\n         };\n         let mut modpath = ~[path_mod(ccx.sess.ident_of(srccrate))];"}, {"sha": "f2526c29b9a802b7adf47cf93470670f5d8cabec", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -16,7 +16,7 @@ use codemap::{Span, Spanned, spanned, dummy_spanned};\n use codemap::BytePos;\n use diagnostic::span_handler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use pkgid::PkgId;\n+use crateid::CrateId;\n \n use std::hashmap::HashSet;\n "}, {"sha": "0bb1eec512bf7b1b82027ea09be4635dd013c240", "filename": "src/libsyntax/crateid.rs", "status": "renamed", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// PkgIds identify crates and include the crate name and optionall a path and\n-/// version. In the full form, they look like relative URLs. Example:\n+/// CrateIds identify crates and include the crate name and optionally a path\n+/// and version. In the full form, they look like relative URLs. Example:\n /// `github.com/mozilla/rust#std:1.0` would be a package ID with a path of\n /// `gitub.com/mozilla/rust` and a crate name of `std` with a version of\n /// `1.0`. If no crate name is given after the hash, the name is inferred to\n /// be the last component of the path. If no version is given, it is inferred\n /// to be `0.0`.\n #[deriving(Clone, Eq)]\n-pub struct PkgId {\n+pub struct CrateId {\n     /// A path which represents the codes origin. By convention this is the\n     /// URL, without `http://` or `https://` prefix, to the crate's repository\n     path: ~str,\n@@ -26,7 +26,7 @@ pub struct PkgId {\n     version: Option<~str>,\n }\n \n-impl ToStr for PkgId {\n+impl ToStr for CrateId {\n     fn to_str(&self) -> ~str {\n         let version = match self.version {\n             None => \"0.0\",\n@@ -40,8 +40,8 @@ impl ToStr for PkgId {\n     }\n }\n \n-impl FromStr for PkgId {\n-    fn from_str(s: &str) -> Option<PkgId> {\n+impl FromStr for CrateId {\n+    fn from_str(s: &str) -> Option<CrateId> {\n         let pieces: ~[&str] = s.splitn('#', 1).collect();\n         let path = pieces[0].to_owned();\n \n@@ -78,15 +78,15 @@ impl FromStr for PkgId {\n             (name, version)\n         };\n \n-        Some(PkgId {\n+        Some(CrateId {\n             path: path,\n             name: name,\n             version: version,\n         })\n     }\n }\n \n-impl PkgId {\n+impl CrateId {\n     pub fn version_or_default<'a>(&'a self) -> &'a str {\n         match self.version {\n             None => \"0.0\",\n@@ -97,90 +97,90 @@ impl PkgId {\n \n #[test]\n fn bare_name() {\n-    let pkgid: PkgId = from_str(\"foo\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"foo\");\n-    assert_eq!(pkgid.version, None);\n-    assert_eq!(pkgid.path, ~\"foo\");\n+    let crateid: CrateId = from_str(\"foo\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"foo\");\n+    assert_eq!(crateid.version, None);\n+    assert_eq!(crateid.path, ~\"foo\");\n }\n \n #[test]\n fn bare_name_single_char() {\n-    let pkgid: PkgId = from_str(\"f\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"f\");\n-    assert_eq!(pkgid.version, None);\n-    assert_eq!(pkgid.path, ~\"f\");\n+    let crateid: CrateId = from_str(\"f\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"f\");\n+    assert_eq!(crateid.version, None);\n+    assert_eq!(crateid.path, ~\"f\");\n }\n \n #[test]\n-fn empty_pkgid() {\n-    let pkgid: Option<PkgId> = from_str(\"\");\n-    assert!(pkgid.is_none());\n+fn empty_crateid() {\n+    let crateid: Option<CrateId> = from_str(\"\");\n+    assert!(crateid.is_none());\n }\n \n #[test]\n fn simple_path() {\n-    let pkgid: PkgId = from_str(\"example.com/foo/bar\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"bar\");\n-    assert_eq!(pkgid.version, None);\n-    assert_eq!(pkgid.path, ~\"example.com/foo/bar\");\n+    let crateid: CrateId = from_str(\"example.com/foo/bar\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"bar\");\n+    assert_eq!(crateid.version, None);\n+    assert_eq!(crateid.path, ~\"example.com/foo/bar\");\n }\n \n #[test]\n fn simple_version() {\n-    let pkgid: PkgId = from_str(\"foo#1.0\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"foo\");\n-    assert_eq!(pkgid.version, Some(~\"1.0\"));\n-    assert_eq!(pkgid.path, ~\"foo\");\n+    let crateid: CrateId = from_str(\"foo#1.0\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"foo\");\n+    assert_eq!(crateid.version, Some(~\"1.0\"));\n+    assert_eq!(crateid.path, ~\"foo\");\n }\n \n #[test]\n fn absolute_path() {\n-    let pkgid: Option<PkgId> = from_str(\"/foo/bar\");\n-    assert!(pkgid.is_none());\n+    let crateid: Option<CrateId> = from_str(\"/foo/bar\");\n+    assert!(crateid.is_none());\n }\n \n #[test]\n fn path_ends_with_slash() {\n-    let pkgid: Option<PkgId> = from_str(\"foo/bar/\");\n-    assert!(pkgid.is_none());\n+    let crateid: Option<CrateId> = from_str(\"foo/bar/\");\n+    assert!(crateid.is_none());\n }\n \n #[test]\n fn path_and_version() {\n-    let pkgid: PkgId = from_str(\"example.com/foo/bar#1.0\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"bar\");\n-    assert_eq!(pkgid.version, Some(~\"1.0\"));\n-    assert_eq!(pkgid.path, ~\"example.com/foo/bar\");\n+    let crateid: CrateId = from_str(\"example.com/foo/bar#1.0\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"bar\");\n+    assert_eq!(crateid.version, Some(~\"1.0\"));\n+    assert_eq!(crateid.path, ~\"example.com/foo/bar\");\n }\n \n #[test]\n fn single_chars() {\n-    let pkgid: PkgId = from_str(\"a/b#1\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"b\");\n-    assert_eq!(pkgid.version, Some(~\"1\"));\n-    assert_eq!(pkgid.path, ~\"a/b\");\n+    let crateid: CrateId = from_str(\"a/b#1\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"b\");\n+    assert_eq!(crateid.version, Some(~\"1\"));\n+    assert_eq!(crateid.path, ~\"a/b\");\n }\n \n #[test]\n fn missing_version() {\n-    let pkgid: PkgId = from_str(\"foo#\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"foo\");\n-    assert_eq!(pkgid.version, None);\n-    assert_eq!(pkgid.path, ~\"foo\");\n+    let crateid: CrateId = from_str(\"foo#\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"foo\");\n+    assert_eq!(crateid.version, None);\n+    assert_eq!(crateid.path, ~\"foo\");\n }\n \n #[test]\n fn path_and_name() {\n-    let pkgid: PkgId = from_str(\"foo/rust-bar#bar:1.0\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"bar\");\n-    assert_eq!(pkgid.version, Some(~\"1.0\"));\n-    assert_eq!(pkgid.path, ~\"foo/rust-bar\");\n+    let crateid: CrateId = from_str(\"foo/rust-bar#bar:1.0\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"bar\");\n+    assert_eq!(crateid.version, Some(~\"1.0\"));\n+    assert_eq!(crateid.path, ~\"foo/rust-bar\");\n }\n \n #[test]\n fn empty_name() {\n-    let pkgid: PkgId = from_str(\"foo/bar#:1.0\").expect(\"valid pkgid\");\n-    assert_eq!(pkgid.name, ~\"bar\");\n-    assert_eq!(pkgid.version, Some(~\"1.0\"));\n-    assert_eq!(pkgid.path, ~\"foo/bar\");\n+    let crateid: CrateId = from_str(\"foo/bar#:1.0\").expect(\"valid crateid\");\n+    assert_eq!(crateid.name, ~\"bar\");\n+    assert_eq!(crateid.version, Some(~\"1.0\"));\n+    assert_eq!(crateid.path, ~\"foo/bar\");\n }", "previous_filename": "src/libsyntax/pkgid.rs"}, {"sha": "9631849235e8628d3253f078084acc6b5e730db5", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f872c472788ca00a88d56ec5d6b3ff73a8dcc005/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=f872c472788ca00a88d56ec5d6b3ff73a8dcc005", "patch": "@@ -47,7 +47,7 @@ pub mod fold;\n \n \n pub mod parse;\n-pub mod pkgid;\n+pub mod crateid;\n \n pub mod print {\n     pub mod pp;"}]}