{"sha": "74e8b111946d21c331e6d3581c2486c6780fc0cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZThiMTExOTQ2ZDIxYzMzMWU2ZDM1ODFjMjQ4NmM2NzgwZmMwY2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T04:55:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T05:04:53Z"}, "message": "rustdoc: Write markdown for enums", "tree": {"sha": "26110079f3c8a858464d6809461b06f360faa991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26110079f3c8a858464d6809461b06f360faa991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74e8b111946d21c331e6d3581c2486c6780fc0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74e8b111946d21c331e6d3581c2486c6780fc0cd", "html_url": "https://github.com/rust-lang/rust/commit/74e8b111946d21c331e6d3581c2486c6780fc0cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74e8b111946d21c331e6d3581c2486c6780fc0cd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ce20973a8c467c234d877aa4cbde5f73be20f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ce20973a8c467c234d877aa4cbde5f73be20f0", "html_url": "https://github.com/rust-lang/rust/commit/d6ce20973a8c467c234d877aa4cbde5f73be20f0"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "a513e6a2e581a000c8c82296695f9e3991aafc66", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/74e8b111946d21c331e6d3581c2486c6780fc0cd/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e8b111946d21c331e6d3581c2486c6780fc0cd/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=74e8b111946d21c331e6d3581c2486c6780fc0cd", "patch": "@@ -85,6 +85,10 @@ fn write_mod_contents(\n         write_const(ctxt, constdoc);\n     }\n \n+    for enumdoc in *doc.enums {\n+        write_enum(ctxt, enumdoc);\n+    }\n+\n     for fndoc in *doc.fns {\n         write_fn(ctxt, fndoc);\n     }\n@@ -348,6 +352,91 @@ fn should_write_const_description() {\n     assert str::contains(markdown, \"\\n\\na\\n\\nb\\n\\n\");\n }\n \n+fn write_enum(\n+    ctxt: ctxt,\n+    doc: doc::enumdoc\n+) {\n+    write_header(ctxt, h3, #fmt(\"Enum `%s`\", doc.name));\n+    write_brief(ctxt, doc.brief);\n+    write_desc(ctxt, doc.desc);\n+    write_variants(ctxt, doc.variants);\n+}\n+\n+#[test]\n+fn should_write_enum_header() {\n+    let markdown = test::render(\"enum a { b }\");\n+    assert str::contains(markdown, \"### Enum `a`\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_enum_description() {\n+    let markdown = test::render(\n+        \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")] enum a { b }\");\n+    assert str::contains(markdown, \"\\n\\na\\n\\nb\\n\\n\");\n+}\n+\n+fn write_variants(\n+    ctxt: ctxt,\n+    docs: [doc::variantdoc]\n+) {\n+    if vec::is_empty(docs) {\n+        ret;\n+    }\n+\n+    ctxt.w.write_line(\"Variants:\");\n+    ctxt.w.write_line(\"\");\n+\n+    vec::iter(docs, {|variant| write_variant(ctxt, variant) });\n+\n+    ctxt.w.write_line(\"\");\n+}\n+\n+fn write_variant(ctxt: ctxt, doc: doc::variantdoc) {\n+    assert option::is_some(doc.sig);\n+    let sig = option::get(doc.sig);\n+    alt doc.desc {\n+      some(desc) {\n+        ctxt.w.write_line(#fmt(\"* `%s` - %s\", sig, desc));\n+      }\n+      none {\n+        ctxt.w.write_line(#fmt(\"* `%s`\", sig));\n+      }\n+    }\n+}\n+\n+#[test]\n+fn should_write_variant_list() {\n+    let markdown = test::render(\n+        \"enum a { \\\n+         #[doc = \\\"test\\\"] b, \\\n+         #[doc = \\\"test\\\"] c }\");\n+    assert str::contains(\n+        markdown,\n+        \"\\n\\nVariants:\\n\\\n+         \\n* `b` - test\\\n+         \\n* `c` - test\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_variant_list_without_descs() {\n+    let markdown = test::render(\"enum a { b, c }\");\n+    assert str::contains(\n+        markdown,\n+        \"\\n\\nVariants:\\n\\\n+         \\n* `b`\\\n+         \\n* `c`\\n\\n\");\n+}\n+\n+#[test]\n+fn should_write_variant_list_with_signatures() {\n+    let markdown = test::render(\"enum a { b(int), #[doc = \\\"a\\\"] c(int) }\");\n+    assert str::contains(\n+        markdown,\n+        \"\\n\\nVariants:\\n\\\n+         \\n* `b(int)`\\\n+         \\n* `c(int)` - a\\n\\n\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {"}, {"sha": "4574dd8429c91e936a63c7d3bc05f7b2cea0c388", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74e8b111946d21c331e6d3581c2486c6780fc0cd/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74e8b111946d21c331e6d3581c2486c6780fc0cd/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=74e8b111946d21c331e6d3581c2486c6780fc0cd", "patch": "@@ -27,7 +27,11 @@ fn run_passes(\n          original through each pass\"\n     )];\n \n+    let passno = 0;\n     vec::foldl(doc, passes) {|doc, pass|\n+        log(debug, #fmt(\"pass #%d\", passno));\n+        passno += 1;\n+        log(debug, doc);\n         pass(srv, doc)\n     }\n }"}]}