{"sha": "995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "node_id": "C_kwDOAAsO6NoAKDk5NWFhY2ZjZThiMTY0NzJhYTIxY2YwYTAzMGFlYmVkZmU3ZWQyYmM", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-04T01:58:59Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2023-03-07T00:24:25Z"}, "message": "show diagnostic for } token followed by else in let else statement", "tree": {"sha": "dff838eff728438e3d303c741921415c414e7578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff838eff728438e3d303c741921415c414e7578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "html_url": "https://github.com/rust-lang/rust/commit/995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c12ec282de5e2d4e835f320f8858277b3ba133", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c12ec282de5e2d4e835f320f8858277b3ba133", "html_url": "https://github.com/rust-lang/rust/commit/31c12ec282de5e2d4e835f320f8858277b3ba133"}], "stats": {"total": 109, "additions": 101, "deletions": 8}, "files": [{"sha": "c13a1943792c1e9a44064df3dabaa365fc3d0f33", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "patch": "@@ -43,7 +43,7 @@ pub(super) fn meta(p: &mut Parser<'_>) {\n     match p.current() {\n         T![=] => {\n             p.bump(T![=]);\n-            if !expressions::expr(p) {\n+            if expressions::expr(p).is_none() {\n                 p.error(\"expected expression\");\n             }\n         }"}, {"sha": "7232cdfef069d5c0497b6d69b86517df96b95fd4", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "patch": "@@ -16,9 +16,9 @@ pub(super) enum Semicolon {\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n-pub(super) fn expr(p: &mut Parser<'_>) -> bool {\n+pub(super) fn expr(p: &mut Parser<'_>) -> Option<CompletedMarker> {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n-    expr_bp(p, None, r, 1).is_some()\n+    expr_bp(p, None, r, 1).map(|(m, _)| m)\n }\n \n pub(super) fn expr_stmt(\n@@ -120,16 +120,32 @@ pub(super) fn stmt(p: &mut Parser<'_>, semicolon: Semicolon) {\n             // fn f() { let x: i32; }\n             types::ascription(p);\n         }\n+\n+        let mut is_block_like_expr_after_eq = false;\n         if p.eat(T![=]) {\n             // test let_stmt_init\n             // fn f() { let x = 92; }\n-            expressions::expr(p);\n+            let expr = expressions::expr(p);\n+\n+            if let Some(expr) = expr {\n+                is_block_like_expr_after_eq = match expr.kind() {\n+                    IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => true,\n+                    _ => false,\n+                };\n+            }\n         }\n \n         if p.at(T![else]) {\n+            // test_err let_else_right_curly_brace\n+            // fn func() { let Some(_) = {Some(1)} else { panic!(\"h\") };}\n+            if is_block_like_expr_after_eq {\n+                p.error(\n+                    \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n+                )\n+            }\n+\n             // test let_else\n             // fn f() { let Some(x) = opt else { return }; }\n-\n             let m = p.start();\n             p.bump(T![else]);\n             block_expr(p);\n@@ -578,7 +594,14 @@ fn arg_list(p: &mut Parser<'_>) {\n     // fn main() {\n     //     foo(#[attr] 92)\n     // }\n-    delimited(p, T!['('], T![')'], T![,], EXPR_FIRST.union(ATTRIBUTE_FIRST), expr);\n+    delimited(\n+        p,\n+        T!['('],\n+        T![')'],\n+        T![,],\n+        EXPR_FIRST.union(ATTRIBUTE_FIRST),\n+        |p: &mut Parser<'_>| expr(p).is_some(),\n+    );\n     m.complete(p, ARG_LIST);\n }\n "}, {"sha": "a33a1d2543e803ac804fd6fcf946dfd046191607", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "patch": "@@ -188,7 +188,7 @@ fn tuple_expr(p: &mut Parser<'_>) -> CompletedMarker {\n \n         // test tuple_attrs\n         // const A: (i64, i64) = (1, #[cfg(test)] 2);\n-        if !expr(p) {\n+        if expr(p).is_none() {\n             break;\n         }\n \n@@ -221,7 +221,7 @@ fn array_expr(p: &mut Parser<'_>) -> CompletedMarker {\n \n         // test array_attrs\n         // const A: &[i64] = &[1, #[cfg(test)] 2];\n-        if !expr(p) {\n+        if expr(p).is_none() {\n             break;\n         }\n "}, {"sha": "6ec580212b4f5e6033434e7589875261f44457ae", "filename": "crates/parser/test_data/parser/inline/err/0017_let_else_right_curly_brace.rast", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast", "raw_url": "https://github.com/rust-lang/rust/raw/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast?ref=995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "patch": "@@ -0,0 +1,69 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"func\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          TUPLE_STRUCT_PAT\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"Some\"\n+            L_PAREN \"(\"\n+            WILDCARD_PAT\n+              UNDERSCORE \"_\"\n+            R_PAREN \")\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          BLOCK_EXPR\n+            STMT_LIST\n+              L_CURLY \"{\"\n+              CALL_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  LITERAL\n+                    INT_NUMBER \"1\"\n+                  R_PAREN \")\"\n+              R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                MACRO_EXPR\n+                  MACRO_CALL\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"panic\"\n+                    BANG \"!\"\n+                    TOKEN_TREE\n+                      L_PAREN \"(\"\n+                      STRING \"\\\"h\\\"\"\n+                      R_PAREN \")\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+error 35: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "30d52fea3b28385a780245ebe52b750d875463ca", "filename": "crates/parser/test_data/parser/inline/err/0017_let_else_right_curly_brace.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995aacfce8b16472aa21cf0a030aebedfe7ed2bc/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs?ref=995aacfce8b16472aa21cf0a030aebedfe7ed2bc", "patch": "@@ -0,0 +1 @@\n+fn func() { let Some(_) = {Some(1)} else { panic!(\"h\") };}"}]}