{"sha": "27af78c6dddc95c7c82dc21926d6ea81562e1211", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWY3OGM2ZGRkYzk1YzdjODJkYzIxOTI2ZDZlYTgxNTYyZTEyMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T02:33:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T02:33:27Z"}, "message": "Auto merge of #23819 - pnkfelix:kill-unsafe-dtor, r=pnkfelix\n\nPort of pcwalton removal of `#[unsafe_destructor]` check.\r\n\r\nEarlier commits impose rules on lifetimes that make generic destructors safe; thus we no longer need the `#[unsafe_destructor]` attribute nor its associated check.\r\n\r\n----\r\n\r\nSo remove the check for the unsafe_destructor attribute.\r\n\r\nAnd remove outdated compile-fail tests from when lifetime-parameteric dtors were disallowed/unsafe.\r\n\r\nIn addition, when one uses the attribute without the associated feature, report that the attribute is deprecated.\r\n\r\nHowever, I do not think this is a breaking-change, because the attribute and feature are still currently accepted by the compiler. (After the next snapshot that has this commit, we can remove the feature itself and the attribute as well.)\r\n\r\n----\r\n\r\nI consider this to:\r\n\r\nFix #22196\r\n\r\n(technically there is still the post snapshot work of removing the last remnants of the feature and the attribute, but the ticket can still be closed in my opinion).", "tree": {"sha": "901da12839e0fc5951f7bb00a821b4c69f4de00b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/901da12839e0fc5951f7bb00a821b4c69f4de00b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27af78c6dddc95c7c82dc21926d6ea81562e1211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27af78c6dddc95c7c82dc21926d6ea81562e1211", "html_url": "https://github.com/rust-lang/rust/commit/27af78c6dddc95c7c82dc21926d6ea81562e1211", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27af78c6dddc95c7c82dc21926d6ea81562e1211/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "html_url": "https://github.com/rust-lang/rust/commit/c89de2c56baeb61e7cc434924dcc8bedd32b26b8"}, {"sha": "64c48f390ccd6410c02e96968a2cff187eeaf442", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c48f390ccd6410c02e96968a2cff187eeaf442", "html_url": "https://github.com/rust-lang/rust/commit/64c48f390ccd6410c02e96968a2cff187eeaf442"}], "stats": {"total": 197, "additions": 12, "deletions": 185}, "files": [{"sha": "23e31df5395268971b0c821f8ffd96a08da76d0d", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=27af78c6dddc95c7c82dc21926d6ea81562e1211", "patch": "@@ -23,7 +23,6 @@ use util::ppaux::{Repr, UserString};\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::ast_util::local_def;\n-use syntax::attr;\n use syntax::codemap::Span;\n use syntax::parse::token::{self, special_idents};\n use syntax::visit;\n@@ -250,22 +249,6 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                         &fcx.inh.param_env.free_substs,\n                                                         &trait_ref);\n \n-            // There are special rules that apply to drop.\n-            if\n-                fcx.tcx().lang_items.drop_trait() == Some(trait_ref.def_id) &&\n-                !attr::contains_name(&item.attrs, \"unsafe_destructor\")\n-            {\n-                match self_ty.sty {\n-                    ty::ty_struct(def_id, _) |\n-                    ty::ty_enum(def_id, _) => {\n-                        check_struct_safe_for_destructor(fcx, item.span, def_id);\n-                    }\n-                    _ => {\n-                        // Coherence already reports an error in this case.\n-                    }\n-                }\n-            }\n-\n             if fcx.tcx().lang_items.copy_trait() == Some(trait_ref.def_id) {\n                 // This is checked in coherence.\n                 return\n@@ -761,22 +744,3 @@ fn filter_to_trait_obligations<'tcx>(bounds: ty::InstantiatedPredicates<'tcx>)\n     }\n     result\n }\n-\n-///////////////////////////////////////////////////////////////////////////\n-// Special drop trait checking\n-\n-fn check_struct_safe_for_destructor<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n-                                              span: Span,\n-                                              struct_did: ast::DefId) {\n-    let struct_tpt = ty::lookup_item_type(fcx.tcx(), struct_did);\n-    if struct_tpt.generics.has_type_params(subst::TypeSpace)\n-        || struct_tpt.generics.has_region_params(subst::TypeSpace)\n-    {\n-        span_err!(fcx.tcx().sess, span, E0141,\n-                  \"cannot implement a destructor on a structure \\\n-                   with type parameters\");\n-        span_note!(fcx.tcx().sess, span,\n-                   \"use \\\"#[unsafe_destructor]\\\" on the implementation \\\n-                    to force the compiler to allow this\");\n-    }\n-}"}, {"sha": "1b03a18072011a2c1f5acf0bbcf306369af6fe28", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=27af78c6dddc95c7c82dc21926d6ea81562e1211", "patch": "@@ -58,7 +58,6 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"log_syntax\", \"1.0.0\", Active),\n     (\"trace_macros\", \"1.0.0\", Active),\n     (\"concat_idents\", \"1.0.0\", Active),\n-    (\"unsafe_destructor\", \"1.0.0\", Active),\n     (\"intrinsics\", \"1.0.0\", Active),\n     (\"lang_items\", \"1.0.0\", Active),\n \n@@ -92,6 +91,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"start\", \"1.0.0\", Active),\n     (\"main\", \"1.0.0\", Active),\n \n+    // Deprecate after snapshot\n+    // SNAP a923278\n+    (\"unsafe_destructor\", \"1.0.0\", Active),\n+\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", \"1.0.0\", Accepted),\n@@ -193,7 +196,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"repr\", Normal),\n     (\"path\", Normal),\n     (\"abi\", Normal),\n-    (\"unsafe_destructor\", Normal),\n     (\"automatically_derived\", Normal),\n     (\"no_mangle\", Normal),\n     (\"no_link\", Normal),\n@@ -205,7 +207,8 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"link_args\", Normal),\n     (\"macro_escape\", Normal),\n \n-\n+    (\"unsafe_destructor\", Gated(\"unsafe_destructor\",\n+                                \"`#[unsafe_destructor]` does nothing anymore\")),\n     (\"staged_api\", Gated(\"staged_api\",\n                          \"staged_api is for use by rustc only\")),\n     (\"plugin\", Gated(\"plugin\",\n@@ -571,15 +574,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                     _ => {}\n                 }\n \n-                if attr::contains_name(&i.attrs,\n-                                       \"unsafe_destructor\") {\n-                    self.gate_feature(\"unsafe_destructor\",\n-                                      i.span,\n-                                      \"`#[unsafe_destructor]` allows too \\\n-                                       many unsafe patterns and may be \\\n-                                       removed in the future\");\n-                }\n-\n                 if attr::contains_name(&i.attrs[..],\n                                        \"old_orphan_check\") {\n                     self.gate_feature("}, {"sha": "2aebbf3d54b9cd08d6151d071685887cde875098", "filename": "src/test/compile-fail/gated-unsafe-destructor.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27af78c6dddc95c7c82dc21926d6ea81562e1211/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-unsafe-destructor.rs?ref=27af78c6dddc95c7c82dc21926d6ea81562e1211", "patch": "@@ -10,14 +10,18 @@\n \n // Test that `#[unsafe_destructor]` attribute is gated by `unsafe_destructor`\n // feature gate.\n+//\n+// (This test can be removed entirely when we remove the\n+// `unsafe_destructor` feature itself.)\n \n struct D<'a>(&'a u32);\n \n #[unsafe_destructor]\n+//~^ ERROR `#[unsafe_destructor]` does nothing anymore\n+//~| HELP: add #![feature(unsafe_destructor)] to the crate attributes to enable\n+// (but of couse there is no point in doing so)\n impl<'a> Drop for D<'a> {\n-    //~^ ERROR `#[unsafe_destructor]` allows too many unsafe patterns\n     fn drop(&mut self) { }\n }\n-//~^ HELP: add #![feature(unsafe_destructor)] to the crate attributes to enable\n \n pub fn main() { }"}, {"sha": "7ca158c3e32045c31cbe5cb70ebaf94e1709845d", "filename": "src/test/compile-fail/issue-13853-3.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-3.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_type = \"lib\"]\n-\n-use std::marker::PhantomData;\n-\n-enum NodeContents<'a> {\n-    Children(Vec<Node<'a>>),\n-}\n-\n-impl<'a> Drop for NodeContents<'a> {\n-    //~^ ERROR cannot implement a destructor on a structure with type parameters\n-    fn drop( &mut self ) {\n-    }\n-}\n-\n-struct Node<'a> {\n-    contents: NodeContents<'a>,\n-    marker: PhantomData<&'a ()>,\n-}\n-\n-impl<'a> Node<'a> {\n-    fn noName(contents: NodeContents<'a>) -> Node<'a> {\n-        Node { contents: contents, marker: PhantomData }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "b0db9e58dba31b8c8236039209a34f3910ae2f6c", "filename": "src/test/compile-fail/issue-13853-4.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-4.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct AutoBuilder<'a> {\n-    context: &'a isize\n-}\n-\n-impl<'a> Drop for AutoBuilder<'a> {\n-    //~^ ERROR cannot implement a destructor on a structure with type parameters\n-    fn drop(&mut self) {\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "825b40cb322df7529c29175c0646e5b3333c7d8c", "filename": "src/test/compile-fail/issue-16465.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16465.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Used to cause an ICE\n-\n-struct Foo<T>{\n-    x : T\n-}\n-\n-type FooInt = Foo<isize>;\n-\n-impl Drop for FooInt {\n-//~^ ERROR cannot implement a destructor on a structure with type parameters\n-    fn drop(&mut self){}\n-}\n-\n-fn main() {}"}, {"sha": "7f3704144bef6c24105e43bd6caca4345a2e402c", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-struct Bar<'a> {\n-    f: &'a isize,\n-}\n-\n-impl<'a> Drop for Bar<'a> {\n-//~^ ERROR E0141\n-    fn drop(&mut self) {\n-    }\n-}\n-\n-struct Baz {\n-    f: &'static isize,\n-}\n-\n-impl Drop for Baz {\n-    fn drop(&mut self) {\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "af675587728be9301dd3705e4cc9cede78bd3822", "filename": "src/test/compile-fail/unsafe-destructor-check-crash.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Funsafe-destructor-check-crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Ftest%2Fcompile-fail%2Funsafe-destructor-check-crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-destructor-check-crash.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-\n-// Regression test for issue #15557\n-\n-#![allow(dead_code)]\n-struct AReg1<'a>(&'a u32);\n-\n-impl<'a> Drop for AReg1<'a> {\n-//~^ ERROR: cannot implement a destructor on a structure with type parameters\n-  fn drop(&mut self) {}\n-}\n-\n-fn main() {}"}]}