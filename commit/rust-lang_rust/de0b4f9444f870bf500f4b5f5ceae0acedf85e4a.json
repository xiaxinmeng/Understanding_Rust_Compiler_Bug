{"sha": "de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "node_id": "C_kwDOAAsO6NoAKGRlMGI0Zjk0NDRmODcwYmY1MDBmNGI1ZjVjZWFlMGFjZWRmODVlNGE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-10-07T14:24:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-07T14:24:52Z"}, "message": "Rollup merge of #89585 - nbdd0121:issue-89574, r=estebank\n\nEmit item no type error even if type inference fails\n\nFix #89574\n\nThe stashed error should be emitted regardless whether ty references error or not.", "tree": {"sha": "873fc33530b8fb530d81170ef480663a3efb8a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/873fc33530b8fb530d81170ef480663a3efb8a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXwM0CRBK7hj4Ov3rIwAAdLgIAF+4jKfPJ2vJZROdBYVMbmWp\nZyFGwNxv/r4E8Mxo8PAQJDF8QF2Pg4EF1hflRLrSV00AzKqzVXNWnmzwaXVO8hbs\n+vBIyCq+amskuqAtZ3fyW0JIGZa2TKgro6mJ3XUFS/Q+h4uC7kw8X1QXfJRUGzqS\nXWYN5Z2fFtMEmUkXJhkSE7OhUn9QbpoSZynV6CaeUljT/DU+nuA2MC9SN/7TZkcM\nTAfQYBp5/h4prNFTw8AIEFv1WAgSTFOpV6P+MNcp1MWQF5hAbjYUdcFRihfC3VyR\n1aEO32z9suc5+zMCG26HssZaUWfLYmow3O6OZIbknGIzm6MZhVTZX2KN388Gj/E=\n=H/8U\n-----END PGP SIGNATURE-----\n", "payload": "tree 873fc33530b8fb530d81170ef480663a3efb8a24\nparent 110d289846c80393383f5e85bca5da5685d84561\nparent b4c62d5f2c0cec1b5332dbbf843b4134ad8123ae\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1633616692 +0200\ncommitter GitHub <noreply@github.com> 1633616692 +0200\n\nRollup merge of #89585 - nbdd0121:issue-89574, r=estebank\n\nEmit item no type error even if type inference fails\n\nFix #89574\n\nThe stashed error should be emitted regardless whether ty references error or not.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "html_url": "https://github.com/rust-lang/rust/commit/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110d289846c80393383f5e85bca5da5685d84561", "url": "https://api.github.com/repos/rust-lang/rust/commits/110d289846c80393383f5e85bca5da5685d84561", "html_url": "https://github.com/rust-lang/rust/commit/110d289846c80393383f5e85bca5da5685d84561"}, {"sha": "b4c62d5f2c0cec1b5332dbbf843b4134ad8123ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c62d5f2c0cec1b5332dbbf843b4134ad8123ae", "html_url": "https://github.com/rust-lang/rust/commit/b4c62d5f2c0cec1b5332dbbf843b4134ad8123ae"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "cee3679d0a052207e79ba3f14e72c81dd190771a", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -752,29 +752,31 @@ fn infer_placeholder_type<'a>(\n     // us to improve in typeck so we do that now.\n     match tcx.sess.diagnostic().steal_diagnostic(span, StashKey::ItemNoType) {\n         Some(mut err) => {\n-            // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n-            // We are typeck and have the real type, so remove that and suggest the actual type.\n-            err.suggestions.clear();\n-\n-            // Suggesting unnameable types won't help.\n-            let mut mk_nameable = MakeNameable::new(tcx);\n-            let ty = mk_nameable.fold_ty(ty);\n-            let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n-            if let Some(sugg_ty) = sugg_ty {\n-                err.span_suggestion(\n-                    span,\n-                    &format!(\"provide a type for the {item}\", item = kind),\n-                    format!(\"{}: {}\", item_ident, sugg_ty),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n-                err.span_note(\n-                    tcx.hir().body(body_id).value.span,\n-                    &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n-                );\n+            if !ty.references_error() {\n+                // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n+                // We are typeck and have the real type, so remove that and suggest the actual type.\n+                err.suggestions.clear();\n+\n+                // Suggesting unnameable types won't help.\n+                let mut mk_nameable = MakeNameable::new(tcx);\n+                let ty = mk_nameable.fold_ty(ty);\n+                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n+                if let Some(sugg_ty) = sugg_ty {\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"provide a type for the {item}\", item = kind),\n+                        format!(\"{}: {}\", item_ident, sugg_ty),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.span_note(\n+                        tcx.hir().body(body_id).value.span,\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                    );\n+                }\n             }\n \n-            err.emit_unless(ty.references_error());\n+            err.emit();\n         }\n         None => {\n             let mut diag = bad_placeholder_type(tcx, vec![span], kind);"}, {"sha": "0a477f1aa5fb69ebdd52d9393f7fb118ed2b8a6a", "filename": "src/test/ui/parser/issue-89574.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89574.rs?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    const EMPTY_ARRAY = [];\n+    //~^ missing type for `const` item\n+}"}, {"sha": "cbee3d35155c7925e3228986dbc54ac77f180978", "filename": "src/test/ui/parser/issue-89574.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89574.stderr?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -0,0 +1,8 @@\n+error: missing type for `const` item\n+  --> $DIR/issue-89574.rs:2:11\n+   |\n+LL |     const EMPTY_ARRAY = [];\n+   |           ^^^^^^^^^^^ help: provide a type for the item: `EMPTY_ARRAY: <type>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "613b3c9856171a28f10cfdd856d7aaf8f15ba693", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.rs?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -4,3 +4,4 @@ fn main() {}\n \n const A: u8; //~ ERROR free constant item without body\n const B; //~ ERROR free constant item without body\n+//~^ ERROR missing type for `const` item"}, {"sha": "c340e958ee58556d5972b0de59857bbfadbe3963", "filename": "src/test/ui/parser/item-free-const-no-body-semantic-fail.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-const-no-body-semantic-fail.stderr?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -14,5 +14,11 @@ LL | const B;\n    |        |\n    |        help: provide a definition for the constant: `= <expr>;`\n \n-error: aborting due to 2 previous errors\n+error: missing type for `const` item\n+  --> $DIR/item-free-const-no-body-semantic-fail.rs:6:7\n+   |\n+LL | const B;\n+   |       ^ help: provide a type for the item: `B: <type>`\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "780479e3d26ac6eb4a76cb6e45155ce05fadf066", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.rs?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -4,6 +4,8 @@ fn main() {}\n \n static A: u8; //~ ERROR free static item without body\n static B; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static` item\n \n static mut C: u8; //~ ERROR free static item without body\n static mut D; //~ ERROR free static item without body\n+//~^ ERROR missing type for `static mut` item"}, {"sha": "4d542b79861fd468b883381e72f2b97e3e1640bc", "filename": "src/test/ui/parser/item-free-static-no-body-semantic-fail.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fitem-free-static-no-body-semantic-fail.stderr?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -15,20 +15,32 @@ LL | static B;\n    |         help: provide a definition for the static: `= <expr>;`\n \n error: free static item without body\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:8:1\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:9:1\n    |\n LL | static mut C: u8;\n    | ^^^^^^^^^^^^^^^^-\n    |                 |\n    |                 help: provide a definition for the static: `= <expr>;`\n \n error: free static item without body\n-  --> $DIR/item-free-static-no-body-semantic-fail.rs:9:1\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:1\n    |\n LL | static mut D;\n    | ^^^^^^^^^^^^-\n    |             |\n    |             help: provide a definition for the static: `= <expr>;`\n \n-error: aborting due to 4 previous errors\n+error: missing type for `static` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:6:8\n+   |\n+LL | static B;\n+   |        ^ help: provide a type for the item: `B: <type>`\n+\n+error: missing type for `static mut` item\n+  --> $DIR/item-free-static-no-body-semantic-fail.rs:10:12\n+   |\n+LL | static mut D;\n+   |            ^ help: provide a type for the item: `D: <type>`\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "941612542207c2424d6a563ae70ff6eec5e8185c", "filename": "src/test/ui/typeck/issue-79040.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.rs?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     const FOO = \"hello\" + 1; //~ ERROR cannot add `{integer}` to `&str`\n-    //~^ ERROR cannot add `{integer}` to `&str`\n+    //~^ missing type for `const` item\n     println!(\"{}\", FOO);\n }"}, {"sha": "aec2e1ec9e4efe0f0296dc4c0b2c6d4841d9c2ce", "filename": "src/test/ui/typeck/issue-79040.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de0b4f9444f870bf500f4b5f5ceae0acedf85e4a/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-79040.stderr?ref=de0b4f9444f870bf500f4b5f5ceae0acedf85e4a", "patch": "@@ -6,13 +6,11 @@ LL |     const FOO = \"hello\" + 1;\n    |                 |\n    |                 &str\n \n-error[E0369]: cannot add `{integer}` to `&str`\n-  --> $DIR/issue-79040.rs:2:25\n+error: missing type for `const` item\n+  --> $DIR/issue-79040.rs:2:11\n    |\n LL |     const FOO = \"hello\" + 1;\n-   |                 ------- ^ - {integer}\n-   |                 |\n-   |                 &str\n+   |           ^^^ help: provide a type for the item: `FOO: <type>`\n \n error: aborting due to 2 previous errors\n "}]}