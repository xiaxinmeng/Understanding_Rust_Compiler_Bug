{"sha": "33debc40654be9e9061c53784f6c762b2fd21eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZGViYzQwNjU0YmU5ZTkwNjFjNTM3ODRmNmM3NjJiMmZkMjFlYmE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-17T17:07:10Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-27T13:05:41Z"}, "message": "Update salsa", "tree": {"sha": "def63d3cc42fe48b1dfdf716c2e8e56de5324dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def63d3cc42fe48b1dfdf716c2e8e56de5324dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33debc40654be9e9061c53784f6c762b2fd21eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33debc40654be9e9061c53784f6c762b2fd21eba", "html_url": "https://github.com/rust-lang/rust/commit/33debc40654be9e9061c53784f6c762b2fd21eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33debc40654be9e9061c53784f6c762b2fd21eba/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a4ba294ccf0c925a5ff1115c19a60c6a24b734", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a4ba294ccf0c925a5ff1115c19a60c6a24b734", "html_url": "https://github.com/rust-lang/rust/commit/d0a4ba294ccf0c925a5ff1115c19a60c6a24b734"}], "stats": {"total": 283, "additions": 94, "deletions": 189}, "files": [{"sha": "2bc31889e63160db148060323a592c2dd93e09df", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -1387,8 +1387,6 @@ checksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n [[package]]\n name = \"salsa\"\n version = \"0.16.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4b84d9f96071f3f3be0dc818eae3327625d8ebc95b58da37d6850724f31d3403\"\n dependencies = [\n  \"crossbeam-utils\",\n  \"indexmap\",\n@@ -1404,8 +1402,6 @@ dependencies = [\n [[package]]\n name = \"salsa-macros\"\n version = \"0.16.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cd3904a4ba0a9d0211816177fd34b04c7095443f8cdacd11175064fe541c8fe2\"\n dependencies = [\n  \"heck\",\n  \"proc-macro2\","}, {"sha": "496264db8413d5c3cfc3806b6ccb53cea87f9385", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -38,4 +38,4 @@ incremental = false\n \n # ungrammar = { path = \"../ungrammar\" }\n \n-# salsa = { path = \"../salsa\" }\n+salsa = { path = \"../salsa\" }"}, {"sha": "7420a1976f49a465d7cf0a79e3dd6551d4c03dbb", "filename": "crates/base_db/src/cancellation.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d0a4ba294ccf0c925a5ff1115c19a60c6a24b734/crates%2Fbase_db%2Fsrc%2Fcancellation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a4ba294ccf0c925a5ff1115c19a60c6a24b734/crates%2Fbase_db%2Fsrc%2Fcancellation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Fcancellation.rs?ref=d0a4ba294ccf0c925a5ff1115c19a60c6a24b734", "patch": "@@ -1,48 +0,0 @@\n-//! Utility types to support cancellation.\n-//!\n-//! In a typical IDE use-case, requests and modification happen concurrently, as\n-//! in the following scenario:\n-//!\n-//!   * user types a character,\n-//!   * a syntax highlighting process is started\n-//!   * user types next character, while syntax highlighting *is still in\n-//!     progress*.\n-//!\n-//! In this situation, we want to react to modification as quickly as possible.\n-//! At the same time, in-progress results are not very interesting, because they\n-//! are invalidated by the edit anyway. So, we first cancel all in-flight\n-//! requests, and then apply modification knowing that it won't interfere with\n-//! any background processing (this bit is handled by salsa, see the\n-//! `BaseDatabase::check_canceled` method).\n-\n-/// An \"error\" signifying that the operation was canceled.\n-#[derive(Clone, PartialEq, Eq, Hash)]\n-pub struct Canceled {\n-    _private: (),\n-}\n-\n-impl Canceled {\n-    pub(crate) fn new() -> Canceled {\n-        Canceled { _private: () }\n-    }\n-\n-    pub fn throw() -> ! {\n-        // We use resume and not panic here to avoid running the panic\n-        // hook (that is, to avoid collecting and printing backtrace).\n-        std::panic::resume_unwind(Box::new(Canceled::new()))\n-    }\n-}\n-\n-impl std::fmt::Display for Canceled {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        fmt.write_str(\"canceled\")\n-    }\n-}\n-\n-impl std::fmt::Debug for Canceled {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        write!(fmt, \"Canceled\")\n-    }\n-}\n-\n-impl std::error::Error for Canceled {}"}, {"sha": "62bf2a4b2c1f84a45c6efbf2045f8ce925ce45a3", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -1,5 +1,4 @@\n //! base_db defines basic database traits. The concrete DB is defined by ide.\n-mod cancellation;\n mod input;\n mod change;\n pub mod fixture;\n@@ -10,14 +9,13 @@ use rustc_hash::FxHashSet;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n-    cancellation::Canceled,\n     change::Change,\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n         ProcMacro, ProcMacroExpander, ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n     },\n };\n-pub use salsa;\n+pub use salsa::{self, Cancelled};\n pub use vfs::{file_set::FileSet, AnchoredPath, AnchoredPathBuf, FileId, VfsPath};\n \n #[macro_export]\n@@ -38,45 +36,6 @@ pub trait Upcast<T: ?Sized> {\n     fn upcast(&self) -> &T;\n }\n \n-pub trait CheckCanceled {\n-    /// Aborts current query if there are pending changes.\n-    ///\n-    /// rust-analyzer needs to be able to answer semantic questions about the\n-    /// code while the code is being modified. A common problem is that a\n-    /// long-running query is being calculated when a new change arrives.\n-    ///\n-    /// We can't just apply the change immediately: this will cause the pending\n-    /// query to see inconsistent state (it will observe an absence of\n-    /// repeatable read). So what we do is we **cancel** all pending queries\n-    /// before applying the change.\n-    ///\n-    /// We implement cancellation by panicking with a special value and catching\n-    /// it on the API boundary. Salsa explicitly supports this use-case.\n-    fn check_canceled(&self);\n-\n-    fn catch_canceled<F, T>(&self, f: F) -> Result<T, Canceled>\n-    where\n-        Self: Sized + panic::RefUnwindSafe,\n-        F: FnOnce(&Self) -> T + panic::UnwindSafe,\n-    {\n-        // Uncomment to debug missing cancellations.\n-        // let _span = profile::heartbeat_span();\n-        panic::catch_unwind(|| f(self)).map_err(|err| match err.downcast::<Canceled>() {\n-            Ok(canceled) => *canceled,\n-            Err(payload) => panic::resume_unwind(payload),\n-        })\n-    }\n-}\n-\n-impl<T: salsa::Database> CheckCanceled for T {\n-    fn check_canceled(&self) {\n-        // profile::heartbeat();\n-        if self.salsa_runtime().is_current_revision_canceled() {\n-            Canceled::throw()\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy, Debug)]\n pub struct FilePosition {\n     pub file_id: FileId,\n@@ -101,7 +60,7 @@ pub trait FileLoader {\n /// Database which stores all significant input facts: source code and project\n /// model. Everything else in rust-analyzer is derived from these queries.\n #[salsa::query_group(SourceDatabaseStorage)]\n-pub trait SourceDatabase: CheckCanceled + FileLoader + std::fmt::Debug {\n+pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n     // Parses the file into the syntax tree.\n     #[salsa::invoke(parse_query)]\n     fn parse(&self, file_id: FileId) -> Parse<ast::SourceFile>;"}, {"sha": "c7f2c02e4c4a09a00423f4bed2bc0a6e4d58ec2a", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -361,7 +361,7 @@ impl<'db> SemanticsImpl<'db> {\n         let sa = self.analyze(&parent);\n \n         let token = successors(Some(InFile::new(sa.file_id, token)), |token| {\n-            self.db.check_canceled();\n+            self.db.unwind_if_cancelled();\n             let macro_call = token.value.ancestors().find_map(ast::MacroCall::cast)?;\n             let tt = macro_call.token_tree()?;\n             if !tt.syntax().text_range().contains_range(token.value.text_range()) {"}, {"sha": "716dcf1f7c1b49d5b4aa0acfcb59bc9c44406ca5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -351,7 +351,7 @@ impl DefCollector<'_> {\n         let mut i = 0;\n         'outer: loop {\n             loop {\n-                self.db.check_canceled();\n+                self.db.unwind_if_cancelled();\n                 loop {\n                     if self.resolve_imports() == ReachedFixedPoint::Yes {\n                         break;\n@@ -831,7 +831,7 @@ impl DefCollector<'_> {\n         vis: Visibility,\n         import_type: ImportType,\n     ) {\n-        self.db.check_canceled();\n+        self.db.unwind_if_cancelled();\n         self.update_recursive(module_id, resolutions, vis, import_type, 0)\n     }\n "}, {"sha": "41ef45326be96e5d133da9f3d0e01c93edba9b57", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -119,7 +119,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn infer_expr_inner(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n-        self.db.check_canceled();\n+        self.db.unwind_if_cancelled();\n \n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         let ty = match &body[tgt_expr] {"}, {"sha": "f589b314b834bf508b340ddaf6e60f37ecf8a760", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -112,7 +112,7 @@ fn solve(\n     let fuel = std::cell::Cell::new(CHALK_SOLVER_FUEL);\n \n     let should_continue = || {\n-        context.db.check_canceled();\n+        db.unwind_if_cancelled();\n         let remaining = fuel.get();\n         fuel.set(remaining - 1);\n         if remaining == 0 {"}, {"sha": "97c9e5d2b4a7b1b0f573fcefde031c47fd44daf7", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 70, "deletions": 58, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -58,7 +58,7 @@ use cfg::CfgOptions;\n \n use ide_db::base_db::{\n     salsa::{self, ParallelDatabase},\n-    CheckCanceled, Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n+    Env, FileLoader, FileSet, SourceDatabase, VfsPath,\n };\n use ide_db::{\n     symbol_index::{self, FileSymbol},\n@@ -98,7 +98,7 @@ pub use ide_completion::{\n };\n pub use ide_db::{\n     base_db::{\n-        Canceled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange,\n+        Cancelled, Change, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange,\n         SourceRoot, SourceRootId,\n     },\n     call_info::CallInfo,\n@@ -113,7 +113,7 @@ pub use ide_ssr::SsrError;\n pub use syntax::{TextRange, TextSize};\n pub use text_edit::{Indel, TextEdit};\n \n-pub type Cancelable<T> = Result<T, Canceled>;\n+pub type Cancellable<T> = Result<T, Cancelled>;\n \n /// Info associated with a text range.\n #[derive(Debug)]\n@@ -227,47 +227,47 @@ impl Analysis {\n     }\n \n     /// Debug info about the current state of the analysis.\n-    pub fn status(&self, file_id: Option<FileId>) -> Cancelable<String> {\n+    pub fn status(&self, file_id: Option<FileId>) -> Cancellable<String> {\n         self.with_db(|db| status::status(&*db, file_id))\n     }\n \n-    pub fn prime_caches<F>(&self, cb: F) -> Cancelable<()>\n+    pub fn prime_caches<F>(&self, cb: F) -> Cancellable<()>\n     where\n         F: Fn(PrimeCachesProgress) + Sync + std::panic::UnwindSafe,\n     {\n         self.with_db(move |db| prime_caches::prime_caches(db, &cb))\n     }\n \n     /// Gets the text of the source file.\n-    pub fn file_text(&self, file_id: FileId) -> Cancelable<Arc<String>> {\n+    pub fn file_text(&self, file_id: FileId) -> Cancellable<Arc<String>> {\n         self.with_db(|db| db.file_text(file_id))\n     }\n \n     /// Gets the syntax tree of the file.\n-    pub fn parse(&self, file_id: FileId) -> Cancelable<SourceFile> {\n+    pub fn parse(&self, file_id: FileId) -> Cancellable<SourceFile> {\n         self.with_db(|db| db.parse(file_id).tree())\n     }\n \n     /// Returns true if this file belongs to an immutable library.\n-    pub fn is_library_file(&self, file_id: FileId) -> Cancelable<bool> {\n+    pub fn is_library_file(&self, file_id: FileId) -> Cancellable<bool> {\n         use ide_db::base_db::SourceDatabaseExt;\n         self.with_db(|db| db.source_root(db.file_source_root(file_id)).is_library)\n     }\n \n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n     /// offsets and line/column representation.\n-    pub fn file_line_index(&self, file_id: FileId) -> Cancelable<Arc<LineIndex>> {\n+    pub fn file_line_index(&self, file_id: FileId) -> Cancellable<Arc<LineIndex>> {\n         self.with_db(|db| db.line_index(file_id))\n     }\n \n     /// Selects the next syntactic nodes encompassing the range.\n-    pub fn extend_selection(&self, frange: FileRange) -> Cancelable<TextRange> {\n+    pub fn extend_selection(&self, frange: FileRange) -> Cancellable<TextRange> {\n         self.with_db(|db| extend_selection::extend_selection(db, frange))\n     }\n \n     /// Returns position of the matching brace (all types of braces are\n     /// supported).\n-    pub fn matching_brace(&self, position: FilePosition) -> Cancelable<Option<TextSize>> {\n+    pub fn matching_brace(&self, position: FilePosition) -> Cancellable<Option<TextSize>> {\n         self.with_db(|db| {\n             let parse = db.parse(position.file_id);\n             let file = parse.tree();\n@@ -281,30 +281,30 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         text_range: Option<TextRange>,\n-    ) -> Cancelable<String> {\n+    ) -> Cancellable<String> {\n         self.with_db(|db| syntax_tree::syntax_tree(&db, file_id, text_range))\n     }\n \n-    pub fn view_hir(&self, position: FilePosition) -> Cancelable<String> {\n+    pub fn view_hir(&self, position: FilePosition) -> Cancellable<String> {\n         self.with_db(|db| view_hir::view_hir(&db, position))\n     }\n \n-    pub fn view_item_tree(&self, file_id: FileId) -> Cancelable<String> {\n+    pub fn view_item_tree(&self, file_id: FileId) -> Cancellable<String> {\n         self.with_db(|db| view_item_tree::view_item_tree(&db, file_id))\n     }\n \n     /// Renders the crate graph to GraphViz \"dot\" syntax.\n-    pub fn view_crate_graph(&self) -> Cancelable<Result<String, String>> {\n+    pub fn view_crate_graph(&self) -> Cancellable<Result<String, String>> {\n         self.with_db(|db| view_crate_graph::view_crate_graph(&db))\n     }\n \n-    pub fn expand_macro(&self, position: FilePosition) -> Cancelable<Option<ExpandedMacro>> {\n+    pub fn expand_macro(&self, position: FilePosition) -> Cancellable<Option<ExpandedMacro>> {\n         self.with_db(|db| expand_macro::expand_macro(db, position))\n     }\n \n     /// Returns an edit to remove all newlines in the range, cleaning up minor\n     /// stuff like trailing commas.\n-    pub fn join_lines(&self, frange: FileRange) -> Cancelable<TextEdit> {\n+    pub fn join_lines(&self, frange: FileRange) -> Cancellable<TextEdit> {\n         self.with_db(|db| {\n             let parse = db.parse(frange.file_id);\n             join_lines::join_lines(&parse.tree(), frange.range)\n@@ -314,7 +314,7 @@ impl Analysis {\n     /// Returns an edit which should be applied when opening a new line, fixing\n     /// up minor stuff like continuing the comment.\n     /// The edit will be a snippet (with `$0`).\n-    pub fn on_enter(&self, position: FilePosition) -> Cancelable<Option<TextEdit>> {\n+    pub fn on_enter(&self, position: FilePosition) -> Cancellable<Option<TextEdit>> {\n         self.with_db(|db| typing::on_enter(&db, position))\n     }\n \n@@ -326,7 +326,7 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         char_typed: char,\n-    ) -> Cancelable<Option<SourceChange>> {\n+    ) -> Cancellable<Option<SourceChange>> {\n         // Fast path to not even parse the file.\n         if !typing::TRIGGER_CHARS.contains(char_typed) {\n             return Ok(None);\n@@ -336,7 +336,7 @@ impl Analysis {\n \n     /// Returns a tree representation of symbols in the file. Useful to draw a\n     /// file outline.\n-    pub fn file_structure(&self, file_id: FileId) -> Cancelable<Vec<StructureNode>> {\n+    pub fn file_structure(&self, file_id: FileId) -> Cancellable<Vec<StructureNode>> {\n         self.with_db(|db| file_structure::file_structure(&db.parse(file_id).tree()))\n     }\n \n@@ -345,17 +345,17 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         config: &InlayHintsConfig,\n-    ) -> Cancelable<Vec<InlayHint>> {\n+    ) -> Cancellable<Vec<InlayHint>> {\n         self.with_db(|db| inlay_hints::inlay_hints(db, file_id, config))\n     }\n \n     /// Returns the set of folding ranges.\n-    pub fn folding_ranges(&self, file_id: FileId) -> Cancelable<Vec<Fold>> {\n+    pub fn folding_ranges(&self, file_id: FileId) -> Cancellable<Vec<Fold>> {\n         self.with_db(|db| folding_ranges::folding_ranges(&db.parse(file_id).tree()))\n     }\n \n     /// Fuzzy searches for a symbol.\n-    pub fn symbol_search(&self, query: Query) -> Cancelable<Vec<NavigationTarget>> {\n+    pub fn symbol_search(&self, query: Query) -> Cancellable<Vec<NavigationTarget>> {\n         self.with_db(|db| {\n             symbol_index::world_symbols(db, query)\n                 .into_iter()\n@@ -368,23 +368,23 @@ impl Analysis {\n     pub fn goto_definition(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+    ) -> Cancellable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n         self.with_db(|db| goto_definition::goto_definition(db, position))\n     }\n \n     /// Returns the impls from the symbol at `position`.\n     pub fn goto_implementation(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+    ) -> Cancellable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n         self.with_db(|db| goto_implementation::goto_implementation(db, position))\n     }\n \n     /// Returns the type definitions for the symbol at `position`.\n     pub fn goto_type_definition(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+    ) -> Cancellable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n         self.with_db(|db| goto_type_definition::goto_type_definition(db, position))\n     }\n \n@@ -393,12 +393,12 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n-    ) -> Cancelable<Option<ReferenceSearchResult>> {\n+    ) -> Cancellable<Option<ReferenceSearchResult>> {\n         self.with_db(|db| references::find_all_refs(&Semantics::new(db), position, search_scope))\n     }\n \n     /// Finds all methods and free functions for the file. Does not return tests!\n-    pub fn find_all_methods(&self, file_id: FileId) -> Cancelable<Vec<FileRange>> {\n+    pub fn find_all_methods(&self, file_id: FileId) -> Cancellable<Vec<FileRange>> {\n         self.with_db(|db| fn_references::find_all_methods(db, file_id))\n     }\n \n@@ -408,63 +408,63 @@ impl Analysis {\n         position: FilePosition,\n         links_in_hover: bool,\n         markdown: bool,\n-    ) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n+    ) -> Cancellable<Option<RangeInfo<HoverResult>>> {\n         self.with_db(|db| hover::hover(db, position, links_in_hover, markdown))\n     }\n \n     /// Return URL(s) for the documentation of the symbol under the cursor.\n     pub fn external_docs(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<doc_links::DocumentationLink>> {\n+    ) -> Cancellable<Option<doc_links::DocumentationLink>> {\n         self.with_db(|db| doc_links::external_docs(db, &position))\n     }\n \n     /// Computes parameter information for the given call expression.\n-    pub fn call_info(&self, position: FilePosition) -> Cancelable<Option<CallInfo>> {\n+    pub fn call_info(&self, position: FilePosition) -> Cancellable<Option<CallInfo>> {\n         self.with_db(|db| ide_db::call_info::call_info(db, position))\n     }\n \n     /// Computes call hierarchy candidates for the given file position.\n     pub fn call_hierarchy(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n+    ) -> Cancellable<Option<RangeInfo<Vec<NavigationTarget>>>> {\n         self.with_db(|db| call_hierarchy::call_hierarchy(db, position))\n     }\n \n     /// Computes incoming calls for the given file position.\n-    pub fn incoming_calls(&self, position: FilePosition) -> Cancelable<Option<Vec<CallItem>>> {\n+    pub fn incoming_calls(&self, position: FilePosition) -> Cancellable<Option<Vec<CallItem>>> {\n         self.with_db(|db| call_hierarchy::incoming_calls(db, position))\n     }\n \n     /// Computes incoming calls for the given file position.\n-    pub fn outgoing_calls(&self, position: FilePosition) -> Cancelable<Option<Vec<CallItem>>> {\n+    pub fn outgoing_calls(&self, position: FilePosition) -> Cancellable<Option<Vec<CallItem>>> {\n         self.with_db(|db| call_hierarchy::outgoing_calls(db, position))\n     }\n \n     /// Returns a `mod name;` declaration which created the current module.\n-    pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n+    pub fn parent_module(&self, position: FilePosition) -> Cancellable<Vec<NavigationTarget>> {\n         self.with_db(|db| parent_module::parent_module(db, position))\n     }\n \n     /// Returns crates this file belongs too.\n-    pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n+    pub fn crate_for(&self, file_id: FileId) -> Cancellable<Vec<CrateId>> {\n         self.with_db(|db| parent_module::crate_for(db, file_id))\n     }\n \n     /// Returns the edition of the given crate.\n-    pub fn crate_edition(&self, crate_id: CrateId) -> Cancelable<Edition> {\n+    pub fn crate_edition(&self, crate_id: CrateId) -> Cancellable<Edition> {\n         self.with_db(|db| db.crate_graph()[crate_id].edition)\n     }\n \n     /// Returns the root file of the given crate.\n-    pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n+    pub fn crate_root(&self, crate_id: CrateId) -> Cancellable<FileId> {\n         self.with_db(|db| db.crate_graph()[crate_id].root_file_id)\n     }\n \n     /// Returns the set of possible targets to run for the current file.\n-    pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n+    pub fn runnables(&self, file_id: FileId) -> Cancellable<Vec<Runnable>> {\n         self.with_db(|db| runnables::runnables(db, file_id))\n     }\n \n@@ -473,24 +473,24 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         search_scope: Option<SearchScope>,\n-    ) -> Cancelable<Vec<Runnable>> {\n+    ) -> Cancellable<Vec<Runnable>> {\n         self.with_db(|db| runnables::related_tests(db, position, search_scope))\n     }\n \n     /// Computes syntax highlighting for the given file\n-    pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HlRange>> {\n+    pub fn highlight(&self, file_id: FileId) -> Cancellable<Vec<HlRange>> {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n     }\n \n     /// Computes syntax highlighting for the given file range.\n-    pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HlRange>> {\n+    pub fn highlight_range(&self, frange: FileRange) -> Cancellable<Vec<HlRange>> {\n         self.with_db(|db| {\n             syntax_highlighting::highlight(db, frange.file_id, Some(frange.range), false)\n         })\n     }\n \n     /// Computes syntax highlighting for the given file.\n-    pub fn highlight_as_html(&self, file_id: FileId, rainbow: bool) -> Cancelable<String> {\n+    pub fn highlight_as_html(&self, file_id: FileId, rainbow: bool) -> Cancellable<String> {\n         self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, rainbow))\n     }\n \n@@ -499,7 +499,7 @@ impl Analysis {\n         &self,\n         config: &CompletionConfig,\n         position: FilePosition,\n-    ) -> Cancelable<Option<Vec<CompletionItem>>> {\n+    ) -> Cancellable<Option<Vec<CompletionItem>>> {\n         self.with_db(|db| ide_completion::completions(db, config, position).map(Into::into))\n     }\n \n@@ -510,7 +510,7 @@ impl Analysis {\n         position: FilePosition,\n         full_import_path: &str,\n         imported_name: String,\n-    ) -> Cancelable<Vec<TextEdit>> {\n+    ) -> Cancellable<Vec<TextEdit>> {\n         Ok(self\n             .with_db(|db| {\n                 ide_completion::resolve_completion_edits(\n@@ -533,7 +533,7 @@ impl Analysis {\n         config: &AssistConfig,\n         resolve: AssistResolveStrategy,\n         frange: FileRange,\n-    ) -> Cancelable<Vec<Assist>> {\n+    ) -> Cancellable<Vec<Assist>> {\n         self.with_db(|db| {\n             let ssr_assists = ssr::ssr_assists(db, &resolve, frange);\n             let mut acc = Assist::get(db, config, resolve, frange);\n@@ -548,7 +548,7 @@ impl Analysis {\n         config: &DiagnosticsConfig,\n         resolve: AssistResolveStrategy,\n         file_id: FileId,\n-    ) -> Cancelable<Vec<Diagnostic>> {\n+    ) -> Cancellable<Vec<Diagnostic>> {\n         self.with_db(|db| diagnostics::diagnostics(db, config, &resolve, file_id))\n     }\n \n@@ -559,7 +559,7 @@ impl Analysis {\n         diagnostics_config: &DiagnosticsConfig,\n         resolve: AssistResolveStrategy,\n         frange: FileRange,\n-    ) -> Cancelable<Vec<Assist>> {\n+    ) -> Cancellable<Vec<Assist>> {\n         let include_fixes = match &assist_config.allowed {\n             Some(it) => it.iter().any(|&it| it == AssistKind::None || it == AssistKind::QuickFix),\n             None => true,\n@@ -591,22 +591,22 @@ impl Analysis {\n         &self,\n         position: FilePosition,\n         new_name: &str,\n-    ) -> Cancelable<Result<SourceChange, RenameError>> {\n+    ) -> Cancellable<Result<SourceChange, RenameError>> {\n         self.with_db(|db| references::rename::rename(db, position, new_name))\n     }\n \n     pub fn prepare_rename(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Result<RangeInfo<()>, RenameError>> {\n+    ) -> Cancellable<Result<RangeInfo<()>, RenameError>> {\n         self.with_db(|db| references::rename::prepare_rename(db, position))\n     }\n \n     pub fn will_rename_file(\n         &self,\n         file_id: FileId,\n         new_name_stem: &str,\n-    ) -> Cancelable<Option<SourceChange>> {\n+    ) -> Cancellable<Option<SourceChange>> {\n         self.with_db(|db| references::rename::will_rename_file(db, file_id, new_name_stem))\n     }\n \n@@ -616,7 +616,7 @@ impl Analysis {\n         parse_only: bool,\n         resolve_context: FilePosition,\n         selections: Vec<FileRange>,\n-    ) -> Cancelable<Result<SourceChange, SsrError>> {\n+    ) -> Cancellable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n             let rule: ide_ssr::SsrRule = query.parse()?;\n             let mut match_finder =\n@@ -631,28 +631,40 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         config: AnnotationConfig,\n-    ) -> Cancelable<Vec<Annotation>> {\n+    ) -> Cancellable<Vec<Annotation>> {\n         self.with_db(|db| annotations::annotations(db, file_id, config))\n     }\n \n-    pub fn resolve_annotation(&self, annotation: Annotation) -> Cancelable<Annotation> {\n+    pub fn resolve_annotation(&self, annotation: Annotation) -> Cancellable<Annotation> {\n         self.with_db(|db| annotations::resolve_annotation(db, annotation))\n     }\n \n     pub fn move_item(\n         &self,\n         range: FileRange,\n         direction: Direction,\n-    ) -> Cancelable<Option<TextEdit>> {\n+    ) -> Cancellable<Option<TextEdit>> {\n         self.with_db(|db| move_item::move_item(db, range, direction))\n     }\n \n-    /// Performs an operation on that may be Canceled.\n-    fn with_db<F, T>(&self, f: F) -> Cancelable<T>\n+    /// Performs an operation on the database that may be canceled.\n+    ///\n+    /// rust-analyzer needs to be able to answer semantic questions about the\n+    /// code while the code is being modified. A common problem is that a\n+    /// long-running query is being calculated when a new change arrives.\n+    ///\n+    /// We can't just apply the change immediately: this will cause the pending\n+    /// query to see inconsistent state (it will observe an absence of\n+    /// repeatable read). So what we do is we **cancel** all pending queries\n+    /// before applying the change.\n+    ///\n+    /// Salsa implements cancelation by unwinding with a special value and\n+    /// catching it on the API boundary.\n+    fn with_db<F, T>(&self, f: F) -> Cancellable<T>\n     where\n         F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe,\n     {\n-        self.db.catch_canceled(f)\n+        Cancelled::catch(|| f(&self.db))\n     }\n }\n "}, {"sha": "1f900aef4baacef5aca8ee31a159ce0b7696ff27", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -19,8 +19,7 @@ use std::{fmt, sync::Arc};\n \n use base_db::{\n     salsa::{self, Durability},\n-    AnchoredPath, Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate,\n-    SourceDatabase, Upcast,\n+    AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n use hir::db::{AstDatabase, DefDatabase, HirDatabase};\n use rustc_hash::FxHashSet;\n@@ -80,20 +79,7 @@ impl FileLoader for RootDatabase {\n     }\n }\n \n-impl salsa::Database for RootDatabase {\n-    fn on_propagated_panic(&self) -> ! {\n-        Canceled::throw()\n-    }\n-    fn salsa_event(&self, event: salsa::Event) {\n-        match event.kind {\n-            salsa::EventKind::DidValidateMemoizedValue { .. }\n-            | salsa::EventKind::WillExecute { .. } => {\n-                self.check_canceled();\n-            }\n-            _ => (),\n-        }\n-    }\n-}\n+impl salsa::Database for RootDatabase {}\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n@@ -126,7 +112,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n }\n \n #[salsa::query_group(LineIndexDatabaseStorage)]\n-pub trait LineIndexDatabase: base_db::SourceDatabase + CheckCanceled {\n+pub trait LineIndexDatabase: base_db::SourceDatabase {\n     fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n }\n "}, {"sha": "5c372a7e5e371b517c18661cd4b3eaaca39d01c9", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -127,7 +127,7 @@ fn library_symbols(db: &dyn SymbolsDatabase) -> Arc<FxHashMap<SourceRootId, Symb\n }\n \n fn file_symbols(db: &dyn SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n-    db.check_canceled();\n+    db.unwind_if_cancelled();\n     let parse = db.parse(file_id);\n \n     let symbols = source_file_to_file_symbols(&parse.tree(), file_id);"}, {"sha": "2011a41322c630fda89a8b8e37f9fed7aea1ad04", "filename": "crates/rust-analyzer/src/dispatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdispatch.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -5,7 +5,7 @@ use serde::{de::DeserializeOwned, Serialize};\n \n use crate::{\n     global_state::{GlobalState, GlobalStateSnapshot},\n-    lsp_utils::is_canceled,\n+    lsp_utils::is_cancelled,\n     main_loop::Task,\n     LspError, Result,\n };\n@@ -132,7 +132,7 @@ where\n         Err(e) => match e.downcast::<LspError>() {\n             Ok(lsp_error) => lsp_server::Response::new_err(id, lsp_error.code, lsp_error.message),\n             Err(e) => {\n-                if is_canceled(&*e) {\n+                if is_cancelled(&*e) {\n                     lsp_server::Response::new_err(\n                         id,\n                         lsp_server::ErrorCode::ContentModified as i32,"}, {"sha": "ea9dbf7fcd50951ff17ad9fe33bcfa10a70d40ed", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Cancelable, Change, FileId};\n+use ide::{Analysis, AnalysisHost, Cancellable, Change, FileId};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -280,7 +280,7 @@ impl GlobalStateSnapshot {\n         file_id_to_url(&self.vfs.read().0, id)\n     }\n \n-    pub(crate) fn file_line_index(&self, file_id: FileId) -> Cancelable<LineIndex> {\n+    pub(crate) fn file_line_index(&self, file_id: FileId) -> Cancellable<LineIndex> {\n         let endings = self.vfs.read().1[&file_id];\n         let index = self.analysis.file_line_index(file_id)?;\n         let res = LineIndex { index, endings, encoding: self.config.offset_encoding() };"}, {"sha": "8000b5490f0e1718250fb42f9ebca5904f0f2027", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -1,7 +1,7 @@\n //! Utilities for LSP-related boilerplate code.\n use std::{error::Error, ops::Range, sync::Arc};\n \n-use ide_db::base_db::Canceled;\n+use ide_db::base_db::Cancelled;\n use lsp_server::Notification;\n \n use crate::{\n@@ -10,8 +10,8 @@ use crate::{\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n };\n \n-pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n-    e.downcast_ref::<Canceled>().is_some()\n+pub(crate) fn is_cancelled(e: &(dyn Error + 'static)) -> bool {\n+    e.downcast_ref::<Cancelled>().is_some()\n }\n \n pub(crate) fn notification_is<N: lsp_types::notification::Notification>("}, {"sha": "31d8ea9e7fed5a0b38f8b44986c885b536b6a75a", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, url_to_file_id, GlobalState},\n     handlers, lsp_ext,\n-    lsp_utils::{apply_document_changes, is_canceled, notification_is, Progress},\n+    lsp_utils::{apply_document_changes, is_cancelled, notification_is, Progress},\n     reload::{BuildDataProgress, ProjectWorkspaceProgress},\n     Result,\n };\n@@ -752,7 +752,7 @@ impl GlobalState {\n                     .filter_map(|file_id| {\n                         handlers::publish_diagnostics(&snapshot, file_id)\n                             .map_err(|err| {\n-                                if !is_canceled(&*err) {\n+                                if !is_cancelled(&*err) {\n                                     log::error!(\"failed to compute diagnostics: {:?}\", err);\n                                 }\n                                 ()"}, {"sha": "411f6baa97499c3b9fb49b9c328442f7621eff49", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33debc40654be9e9061c53784f6c762b2fd21eba/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=33debc40654be9e9061c53784f6c762b2fd21eba", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use ide::{\n-    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, Cancelable, CompletionItem,\n+    Annotation, AnnotationKind, Assist, AssistKind, CallInfo, Cancellable, CompletionItem,\n     CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n     Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n     InlayKind, InsertTextFormat, Markup, NavigationTarget, ReferenceAccess, RenameError, Runnable,\n@@ -726,7 +726,7 @@ pub(crate) fn snippet_text_document_edit(\n pub(crate) fn snippet_text_document_ops(\n     snap: &GlobalStateSnapshot,\n     file_system_edit: FileSystemEdit,\n-) -> Cancelable<Vec<lsp_ext::SnippetDocumentChangeOperation>> {\n+) -> Cancellable<Vec<lsp_ext::SnippetDocumentChangeOperation>> {\n     let mut ops = Vec::new();\n     match file_system_edit {\n         FileSystemEdit::CreateFile { dst, initial_contents } => {\n@@ -756,7 +756,7 @@ pub(crate) fn snippet_text_document_ops(\n             let new_uri = snap.anchored_path(&dst);\n             let mut rename_file =\n                 lsp_types::RenameFile { old_uri, new_uri, options: None, annotation_id: None };\n-            if snap.analysis.is_library_file(src) == Ok(true)\n+            if snap.analysis.is_library_file(src).ok() == Some(true)\n                 && snap.config.change_annotation_support()\n             {\n                 rename_file.annotation_id = Some(outside_workspace_annotation_id())"}]}