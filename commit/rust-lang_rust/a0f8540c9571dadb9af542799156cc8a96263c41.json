{"sha": "a0f8540c9571dadb9af542799156cc8a96263c41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjg1NDBjOTU3MWRhZGI5YWY1NDI3OTkxNTZjYzhhOTYyNjNjNDE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-19T22:21:52Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-24T00:06:32Z"}, "message": "Fix some impls such that all supertraits are actually implemented.", "tree": {"sha": "7a4cac0e0f300e5973de4865f31d7c30787c0e2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a4cac0e0f300e5973de4865f31d7c30787c0e2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f8540c9571dadb9af542799156cc8a96263c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f8540c9571dadb9af542799156cc8a96263c41", "html_url": "https://github.com/rust-lang/rust/commit/a0f8540c9571dadb9af542799156cc8a96263c41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f8540c9571dadb9af542799156cc8a96263c41/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e75ec8015701d4a43ec2644dbbc4a2e051c4f515", "url": "https://api.github.com/repos/rust-lang/rust/commits/e75ec8015701d4a43ec2644dbbc4a2e051c4f515", "html_url": "https://github.com/rust-lang/rust/commit/e75ec8015701d4a43ec2644dbbc4a2e051c4f515"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "46a744572749144de0fdc132721f453ea18cff2e", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=a0f8540c9571dadb9af542799156cc8a96263c41", "patch": "@@ -732,6 +732,11 @@ impl Ord for Sign {\n     }\n }\n \n+impl TotalEq for Sign {\n+    fn equals(&self, other: &Sign) -> bool {\n+        *self == *other\n+    }\n+}\n impl TotalOrd for Sign {\n \n     fn cmp(&self, other: &Sign) -> Ordering {"}, {"sha": "ff14009e5561a47fa2a4f3a7f8495b4298438f51", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=a0f8540c9571dadb9af542799156cc8a96263c41", "patch": "@@ -110,6 +110,25 @@ cmp_impl!(impl TotalEq, equals)\n cmp_impl!(impl Ord, lt, gt, le, ge)\n cmp_impl!(impl TotalOrd, cmp -> cmp::Ordering)\n \n+impl<T: Clone + Integer + Ord> Orderable for Ratio<T> {\n+    #[inline]\n+    fn min(&self, other: &Ratio<T>) -> Ratio<T> {\n+        if *self < *other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline]\n+    fn max(&self, other: &Ratio<T>) -> Ratio<T> {\n+        if *self > *other { self.clone() } else { other.clone() }\n+    }\n+\n+    #[inline]\n+    fn clamp(&self, mn: &Ratio<T>, mx: &Ratio<T>) -> Ratio<T> {\n+        if *self > *mx { mx.clone()} else\n+        if *self < *mn { mn.clone() } else { self.clone() }\n+    }\n+}\n+\n+\n /* Arithmetic */\n // a/b * c/d = (a*c)/(b*d)\n impl<T: Clone + Integer + Ord>"}, {"sha": "eee786524f579e18d12c2b9c2efa71d0da416e14", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=a0f8540c9571dadb9af542799156cc8a96263c41", "patch": "@@ -86,6 +86,12 @@ pub trait TotalOrd: TotalEq {\n     fn cmp(&self, other: &Self) -> Ordering;\n }\n \n+impl TotalEq for Ordering {\n+    #[inline]\n+    fn equals(&self, other: &Ordering) -> bool {\n+        *self == *other\n+    }\n+}\n impl TotalOrd for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {"}, {"sha": "d7edf746f90d22a2b299209f1aec99fccc97f8c5", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f8540c9571dadb9af542799156cc8a96263c41/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=a0f8540c9571dadb9af542799156cc8a96263c41", "patch": "@@ -86,7 +86,7 @@ impl<A, T: DoubleEndedIterator<A>> Iterator<A> for InvertIterator<A, T> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<A, T: Iterator<A>> DoubleEndedIterator<A> for InvertIterator<A, T> {\n+impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for InvertIterator<A, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.iter.next() }\n }"}]}