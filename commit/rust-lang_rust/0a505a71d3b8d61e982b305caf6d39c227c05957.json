{"sha": "0a505a71d3b8d61e982b305caf6d39c227c05957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTA1YTcxZDNiOGQ2MWU5ODJiMzA1Y2FmNmQzOWMyMjdjMDU5NTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-02T18:38:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-09T00:56:31Z"}, "message": "Parse lifetimes that start with a number and give specific error", "tree": {"sha": "ae9b56e65d089bcfdee6db0f5620213863f75d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9b56e65d089bcfdee6db0f5620213863f75d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a505a71d3b8d61e982b305caf6d39c227c05957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a505a71d3b8d61e982b305caf6d39c227c05957", "html_url": "https://github.com/rust-lang/rust/commit/0a505a71d3b8d61e982b305caf6d39c227c05957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a505a71d3b8d61e982b305caf6d39c227c05957/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a65cbeea78c2c79b1030a0012cdea475104a44f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a65cbeea78c2c79b1030a0012cdea475104a44f", "html_url": "https://github.com/rust-lang/rust/commit/2a65cbeea78c2c79b1030a0012cdea475104a44f"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "f45f5e65312c2050882bb04b46202972211670c0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0a505a71d3b8d61e982b305caf6d39c227c05957", "patch": "@@ -1423,15 +1423,17 @@ impl<'a> StringReader<'a> {\n \n                 // If the character is an ident start not followed by another single\n                 // quote, then this is a lifetime name:\n-                if ident_start(Some(c2)) && !self.ch_is('\\'') {\n+                if (ident_start(Some(c2)) || c2.is_numeric()) && !self.ch_is('\\'') {\n                     while ident_continue(self.ch) {\n                         self.bump();\n                     }\n                     // lifetimes shouldn't end with a single quote\n                     // if we find one, then this is an invalid character literal\n                     if self.ch_is('\\'') {\n-                        self.err_span_(start_with_quote, self.next_pos,\n-                                \"character literal may only contain one codepoint\");\n+                        self.err_span_(\n+                            start_with_quote,\n+                            self.next_pos,\n+                            \"character literal may only contain one codepoint\");\n                         self.bump();\n                         return Ok(token::Literal(token::Err(Symbol::intern(\"??\")), None))\n \n@@ -1444,6 +1446,16 @@ impl<'a> StringReader<'a> {\n                         self.mk_ident(&format!(\"'{}\", lifetime_name))\n                     });\n \n+                    if c2.is_numeric() {\n+                        // this is a recovered lifetime written `'1`, error but accept it\n+                        self.err_span_(\n+                            start_with_quote,\n+                            self.pos,\n+                            \"lifetimes can't start with a number\",\n+                        );\n+                    }\n+\n+\n                     return Ok(token::Lifetime(ident));\n                 }\n \n@@ -1873,13 +1885,14 @@ fn is_block_doc_comment(s: &str) -> bool {\n     res\n }\n \n+/// Determine whether `c` is a valid start for an ident.\n fn ident_start(c: Option<char>) -> bool {\n     let c = match c {\n         Some(c) => c,\n         None => return false,\n     };\n \n-    (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || (c > '\\x7f' && c.is_xid_start())\n+    (c.is_alphabetic() || c == '_' || (c > '\\x7f' && c.is_xid_start()))\n }\n \n fn ident_continue(c: Option<char>) -> bool {\n@@ -1888,8 +1901,7 @@ fn ident_continue(c: Option<char>) -> bool {\n         None => return false,\n     };\n \n-    (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_' ||\n-    (c > '\\x7f' && c.is_xid_continue())\n+    (c.is_alphabetic() || c.is_numeric() || c == '_' || (c > '\\x7f' && c.is_xid_continue()))\n }\n \n #[inline]"}, {"sha": "3483975a3cb8eaeb7f5aa46bd22478cb436ba751", "filename": "src/test/ui/parser/numeric-lifetime.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.rs?ref=0a505a71d3b8d61e982b305caf6d39c227c05957", "patch": "@@ -0,0 +1,8 @@\n+struct S<'1> { s: &'1 usize }\n+//~^ ERROR lifetimes can't start with a number\n+//~| ERROR lifetimes can't start with a number\n+fn main() {\n+    // verify that the parse error doesn't stop type checking\n+    let x: usize = \"\";\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "1bbc508d57d4b912e0046ab04f7b8aee29afe2e1", "filename": "src/test/ui/parser/numeric-lifetime.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a505a71d3b8d61e982b305caf6d39c227c05957/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnumeric-lifetime.stderr?ref=0a505a71d3b8d61e982b305caf6d39c227c05957", "patch": "@@ -0,0 +1,24 @@\n+error: lifetimes can't start with a number\n+  --> $DIR/numeric-lifetime.rs:1:10\n+   |\n+LL | struct S<'1> { s: &'1 usize }\n+   |          ^^\n+\n+error: lifetimes can't start with a number\n+  --> $DIR/numeric-lifetime.rs:1:20\n+   |\n+LL | struct S<'1> { s: &'1 usize }\n+   |                    ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-lifetime.rs:6:20\n+   |\n+LL |     let x: usize = \"\";\n+   |                    ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}