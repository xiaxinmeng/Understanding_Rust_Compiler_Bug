{"sha": "e9e3ab549d5a73f85e19eed5b915d78870f8892c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTNhYjU0OWQ1YTczZjg1ZTE5ZWVkNWI5MTVkNzg4NzBmODg5MmM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-12T16:26:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-12T16:26:08Z"}, "message": "Move FamousDefs fixture out into its own file", "tree": {"sha": "10f8792c8b532bdd4854220f3656130407c6ec67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f8792c8b532bdd4854220f3656130407c6ec67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e3ab549d5a73f85e19eed5b915d78870f8892c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3ab549d5a73f85e19eed5b915d78870f8892c", "html_url": "https://github.com/rust-lang/rust/commit/e9e3ab549d5a73f85e19eed5b915d78870f8892c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e3ab549d5a73f85e19eed5b915d78870f8892c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fa926f005890f07dffc789c84c2be57a6bdccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa926f005890f07dffc789c84c2be57a6bdccc", "html_url": "https://github.com/rust-lang/rust/commit/52fa926f005890f07dffc789c84c2be57a6bdccc"}], "stats": {"total": 208, "additions": 120, "deletions": 88}, "files": [{"sha": "c6763ae369e57e41957e1ef6a967f4f4be247d05", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3ab549d5a73f85e19eed5b915d78870f8892c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3ab549d5a73f85e19eed5b915d78870f8892c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=e9e3ab549d5a73f85e19eed5b915d78870f8892c", "patch": "@@ -38,94 +38,7 @@ pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Cr\n \n #[allow(non_snake_case)]\n impl FamousDefs<'_, '_> {\n-    pub const FIXTURE: &'static str = r#\"//- /libcore.rs crate:core\n-pub mod convert {\n-    pub trait From<T> {\n-        fn from(t: T) -> Self;\n-    }\n-}\n-\n-pub mod default {\n-    pub trait Default {\n-       fn default() -> Self;\n-    }\n-}\n-\n-pub mod iter {\n-    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n-    mod traits {\n-        pub(crate) mod iterator {\n-            use crate::option::Option;\n-            pub trait Iterator {\n-                type Item;\n-                fn next(&mut self) -> Option<Self::Item>;\n-                fn by_ref(&mut self) -> &mut Self {\n-                    self\n-                }\n-                fn take(self, n: usize) -> crate::iter::Take<Self> {\n-                    crate::iter::Take { inner: self }\n-                }\n-            }\n-\n-            impl<I: Iterator> Iterator for &mut I {\n-                type Item = I::Item;\n-                fn next(&mut self) -> Option<I::Item> {\n-                    (**self).next()\n-                }\n-            }\n-        }\n-        pub(crate) mod collect {\n-            pub trait IntoIterator {\n-                type Item;\n-            }\n-        }\n-    }\n-\n-    pub use self::sources::*;\n-    pub(crate) mod sources {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Repeat<A> {\n-            element: A,\n-        }\n-\n-        pub fn repeat<T>(elt: T) -> Repeat<T> {\n-            Repeat { element: elt }\n-        }\n-\n-        impl<A> Iterator for Repeat<A> {\n-            type Item = A;\n-\n-            fn next(&mut self) -> Option<A> {\n-                None\n-            }\n-        }\n-    }\n-\n-    pub use self::adapters::*;\n-    pub(crate) mod adapters {\n-        use super::Iterator;\n-        use crate::option::Option::{self, *};\n-        pub struct Take<I> { pub(crate) inner: I }\n-        impl<I> Iterator for Take<I> where I: Iterator {\n-            type Item = <I as Iterator>::Item;\n-            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n-                None\n-            }\n-        }\n-    }\n-}\n-\n-pub mod option {\n-    pub enum Option<T> { None, Some(T)}\n-}\n-\n-pub mod prelude {\n-    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n-}\n-#[prelude_import]\n-pub use prelude::*;\n-\"#;\n+    pub const FIXTURE: &'static str = include_str!(\"helpers/famous_defs_fixture.rs\");\n \n     pub fn core(&self) -> Option<Crate> {\n         self.find_crate(\"core\")"}, {"sha": "f3d355861ecc297688a13e4349f6183976b03b37", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/e9e3ab549d5a73f85e19eed5b915d78870f8892c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e3ab549d5a73f85e19eed5b915d78870f8892c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=e9e3ab549d5a73f85e19eed5b915d78870f8892c", "patch": "@@ -0,0 +1,119 @@\n+//- /libcore.rs crate:core\n+pub mod convert {\n+    pub trait From<T> {\n+        fn from(t: T) -> Self;\n+    }\n+}\n+\n+pub mod default {\n+    pub trait Default {\n+        fn default() -> Self;\n+    }\n+}\n+\n+pub mod iter {\n+    pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n+    mod traits {\n+        pub(crate) mod iterator {\n+            use crate::option::Option;\n+            pub trait Iterator {\n+                type Item;\n+                fn next(&mut self) -> Option<Self::Item>;\n+                fn by_ref(&mut self) -> &mut Self {\n+                    self\n+                }\n+                fn take(self, n: usize) -> crate::iter::Take<Self> {\n+                    crate::iter::Take { inner: self }\n+                }\n+            }\n+\n+            impl<I: Iterator> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n+            }\n+        }\n+        pub(crate) mod collect {\n+            pub trait IntoIterator {\n+                type Item;\n+            }\n+        }\n+    }\n+\n+    pub use self::sources::*;\n+    pub(crate) mod sources {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Repeat<A> {\n+            element: A,\n+        }\n+\n+        pub fn repeat<T>(elt: T) -> Repeat<T> {\n+            Repeat { element: elt }\n+        }\n+\n+        impl<A> Iterator for Repeat<A> {\n+            type Item = A;\n+\n+            fn next(&mut self) -> Option<A> {\n+                None\n+            }\n+        }\n+    }\n+\n+    pub use self::adapters::*;\n+    pub(crate) mod adapters {\n+        use super::Iterator;\n+        use crate::option::Option::{self, *};\n+        pub struct Take<I> {\n+            pub(crate) inner: I,\n+        }\n+        impl<I> Iterator for Take<I>\n+        where\n+            I: Iterator,\n+        {\n+            type Item = <I as Iterator>::Item;\n+            fn next(&mut self) -> Option<<I as Iterator>::Item> {\n+                None\n+            }\n+        }\n+    }\n+}\n+\n+pub mod ops {\n+    #[lang = \"fn\"]\n+    pub trait Fn<Args>: FnMut<Args> {\n+        extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+    }\n+\n+    #[lang = \"fn_mut\"]\n+    pub trait FnMut<Args>: FnOnce<Args> {\n+        extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n+    }\n+    #[lang = \"fn_once\"]\n+    pub trait FnOnce<Args> {\n+        #[lang = \"fn_once_output\"]\n+        type Output;\n+        extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+    }\n+}\n+\n+pub mod option {\n+    pub enum Option<T> {\n+        None,\n+        Some(T),\n+    }\n+}\n+\n+pub mod prelude {\n+    pub use crate::{\n+        convert::From,\n+        default::Default,\n+        iter::{IntoIterator, Iterator},\n+        ops::{Fn, FnMut, FnOnce},\n+        option::Option::{self, *},\n+    };\n+}\n+#[prelude_import]\n+pub use prelude::*;"}]}