{"sha": "9ad4bde042cfaf56f7579160c60ebd8550a720ab", "node_id": "C_kwDOAAsO6NoAKDlhZDRiZGUwNDJjZmFmNTZmNzU3OTE2MGM2MGViZDg1NTBhNzIwYWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T18:29:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T18:29:13Z"}, "message": "Auto merge of #95356 - coolreader18:exitstatus-exit-method, r=<try>\n\nExitCode::exit_process() method\n\ncc `@yaahc` / #93840\n\n(eeek, hit ctrl-enter before I meant to and right after realizing the branch name was wrong. oh, well)\n\nI feel like it makes sense to have the `exit(ExitCode)` function as a method or at least associated function on ExitCode, but maybe that would hurt discoverability? Probably not as much if it's at the top of the `process::exit()` documentation or something, but idk. Also very unsure about the name, I'd like something that communicates that you are exiting with *this* ExitCode, but with a method name being postfix it doesn't seem to flow. `code.exit_process_with()` ? `.exit_process_with_self()` ? Blech. Maybe it doesn't matter, since ideally just `code.exit()` or something would be clear simply by the name and single parameter but :shrug:\n\nAlso I'd like to touch up the `ExitCode` docs (which I did a bit here), but that would probably be good in a separate PR, right? Since I think the beta deadline is coming up.", "tree": {"sha": "c9d38555b21e450dabd3c23e12468185cffc533e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9d38555b21e450dabd3c23e12468185cffc533e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ad4bde042cfaf56f7579160c60ebd8550a720ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad4bde042cfaf56f7579160c60ebd8550a720ab", "html_url": "https://github.com/rust-lang/rust/commit/9ad4bde042cfaf56f7579160c60ebd8550a720ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ad4bde042cfaf56f7579160c60ebd8550a720ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d6408b05912396618dfdcc9cc713d3ace2aa9a", "html_url": "https://github.com/rust-lang/rust/commit/a7d6408b05912396618dfdcc9cc713d3ace2aa9a"}, {"sha": "a9e29d204e0d666b2a7724c15ffa24f988066eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9e29d204e0d666b2a7724c15ffa24f988066eeb", "html_url": "https://github.com/rust-lang/rust/commit/a9e29d204e0d666b2a7724c15ffa24f988066eeb"}], "stats": {"total": 84, "additions": 56, "deletions": 28}, "files": [{"sha": "6c5c08d0bea2cd4bff6ebe26fc2161276b7b540f", "filename": "library/std/src/process.rs", "status": "modified", "additions": 56, "deletions": 28, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/9ad4bde042cfaf56f7579160c60ebd8550a720ab/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad4bde042cfaf56f7579160c60ebd8550a720ab/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=9ad4bde042cfaf56f7579160c60ebd8550a720ab", "patch": "@@ -1725,6 +1725,49 @@ impl ExitCode {\n     /// return the same codes (but will also `eprintln!` the error).\n     #[stable(feature = \"process_exitcode\", since = \"1.61.0\")]\n     pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);\n+\n+    /// Exit the current process with the given `ExitCode`.\n+    ///\n+    /// Note that this has the same caveats as [`process::exit()`][exit], namely that this function\n+    /// terminates the process immediately, so no destructors on the current stack or any other\n+    /// thread's stack will be run. If a clean shutdown is needed, it is recommended to simply\n+    /// return this ExitCode from the `main` function, as demonstrated in the [type\n+    /// documentation](#examples).\n+    ///\n+    /// # Differences from `process::exit()`\n+    ///\n+    /// `process::exit()` accepts any `i32` value as the exit code for the process; however, there\n+    /// are platforms that only use a subset of that value (see [`process::exit` platform-specific\n+    /// behavior][exit#platform-specific-behavior]). `ExitCode` exists because of this; only\n+    /// `ExitCode`s that are supported by a majority of our platforms can be created, so those\n+    /// problems don't exist (as much) with this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(exitcode_exit_method)]\n+    /// # use std::process::ExitCode;\n+    /// # use std::fmt;\n+    /// # enum UhOhError { GenericProblem, Specific, WithCode { exit_code: ExitCode, _x: () } }\n+    /// # impl fmt::Display for UhOhError {\n+    /// #     fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result { unimplemented!() }\n+    /// # }\n+    /// // there's no way to gracefully recover from an UhOhError, so we just\n+    /// // print a message and exit\n+    /// fn handle_unrecoverable_error(err: UhOhError) -> ! {\n+    ///     eprintln!(\"UH OH! {err}\");\n+    ///     let code = match err {\n+    ///         UhOhError::GenericProblem => ExitCode::FAILURE,\n+    ///         UhOhError::Specific => ExitCode::from(3),\n+    ///         UhOhError::WithCode { exit_code, .. } => exit_code,\n+    ///     };\n+    ///     code.exit_process()\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"exitcode_exit_method\", issue = \"none\")]\n+    pub fn exit_process(self) -> ! {\n+        exit(self.to_i32())\n+    }\n }\n \n impl ExitCode {\n@@ -1944,47 +1987,32 @@ impl Child {\n /// process, no destructors on the current stack or any other thread's stack\n /// will be run. If a clean shutdown is needed it is recommended to only call\n /// this function at a known point where there are no more destructors left\n-/// to run.\n+/// to run; or, preferably, simply return a type implementing [`Termination`]\n+/// (such as [`ExitCode`] or `Result`) from the `main` function and avoid this\n+/// function altogether:\n+///\n+/// ```\n+/// # use std::io::Error as MyError;\n+/// fn main() -> Result<(), MyError> {\n+///     // ...\n+///     Ok(())\n+/// }\n+/// ```\n ///\n /// ## Platform-specific behavior\n ///\n /// **Unix**: On Unix-like platforms, it is unlikely that all 32 bits of `exit`\n /// will be visible to a parent process inspecting the exit code. On most\n /// Unix-like platforms, only the eight least-significant bits are considered.\n ///\n-/// # Examples\n-///\n-/// Due to this function\u2019s behavior regarding destructors, a conventional way\n-/// to use the function is to extract the actual computation to another\n-/// function and compute the exit code from its return value:\n-///\n-/// ```\n-/// fn run_app() -> Result<(), ()> {\n-///     // Application logic here\n-///     Ok(())\n-/// }\n-///\n-/// fn main() {\n-///     std::process::exit(match run_app() {\n-///         Ok(_) => 0,\n-///         Err(err) => {\n-///             eprintln!(\"error: {err:?}\");\n-///             1\n-///         }\n-///     });\n-/// }\n-/// ```\n-///\n-/// Due to [platform-specific behavior], the exit code for this example will be\n-/// `0` on Linux, but `256` on Windows:\n+/// For example, the exit code for this example will be `0` on Linux, but `256`\n+/// on Windows:\n ///\n /// ```no_run\n /// use std::process;\n ///\n /// process::exit(0x0100);\n /// ```\n-///\n-/// [platform-specific behavior]: #platform-specific-behavior\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn exit(code: i32) -> ! {\n     crate::rt::cleanup();"}]}