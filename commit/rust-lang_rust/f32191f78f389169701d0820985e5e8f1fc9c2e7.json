{"sha": "f32191f78f389169701d0820985e5e8f1fc9c2e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMjE5MWY3OGYzODkxNjk3MDFkMDgyMDk4NWU1ZThmMWZjOWMyZTc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-15T12:39:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T12:39:46Z"}, "message": "Rollup merge of #79005 - petrochenkov:noinjected, r=davidtwco\n\ncleanup: Remove `ParseSess::injected_crate_name`\n\nIts only remaining use is in pretty-printing where the necessary information can be easily re-computed.", "tree": {"sha": "dc90c5bded7e0ba0745055309d812ad6c272943a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc90c5bded7e0ba0745055309d812ad6c272943a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f32191f78f389169701d0820985e5e8f1fc9c2e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsSGTCRBK7hj4Ov3rIwAAdHIIAIp7Kgz0dQrPew5iN25Jf7/Z\nOb3igIdtjC5gL4q/MoL+Ch/GkSInt5NQr661IyVc3Shspi4jui+uEtQODHEI2Clz\nQ1LlStk37g8FfaaAN7zV++Lsy3lL/8lnOMvH1GWKDRmOqRNQuYo0ZGf5BwW7nPQO\nGaQV6wBATohwbc4C5MMU5ALxZFq8Kq3/+6TWILlmQzud4aACWcjTrEcS+sKRqsq0\nZ0YQQA73vrCOwgM5hgai0ClJ/L2W1qJAUsEbd3EIsBudaiMdF1JCwZsHZhULkWk1\nMbaSGvsjQcIYr+w1wE0f5DdDQk0LUJkWk/bjZvhDbChzOnU8l1yiGwB1kdSSl20=\n=Vx80\n-----END PGP SIGNATURE-----\n", "payload": "tree dc90c5bded7e0ba0745055309d812ad6c272943a\nparent e0c378a6730015367c5d560f43108d5fe401b398\nparent 8766c0452c9ae19a041a926820ae400864be6a9b\nauthor Jonas Schievink <jonasschievink@gmail.com> 1605443986 +0100\ncommitter GitHub <noreply@github.com> 1605443986 +0100\n\nRollup merge of #79005 - petrochenkov:noinjected, r=davidtwco\n\ncleanup: Remove `ParseSess::injected_crate_name`\n\nIts only remaining use is in pretty-printing where the necessary information can be easily re-computed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f32191f78f389169701d0820985e5e8f1fc9c2e7", "html_url": "https://github.com/rust-lang/rust/commit/f32191f78f389169701d0820985e5e8f1fc9c2e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f32191f78f389169701d0820985e5e8f1fc9c2e7/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c378a6730015367c5d560f43108d5fe401b398", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c378a6730015367c5d560f43108d5fe401b398", "html_url": "https://github.com/rust-lang/rust/commit/e0c378a6730015367c5d560f43108d5fe401b398"}, {"sha": "8766c0452c9ae19a041a926820ae400864be6a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8766c0452c9ae19a041a926820ae400864be6a9b", "html_url": "https://github.com/rust-lang/rust/commit/8766c0452c9ae19a041a926820ae400864be6a9b"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "398ced74b04f47af12b0691df6778e65e8db3194", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=f32191f78f389169701d0820985e5e8f1fc9c2e7", "patch": "@@ -109,7 +109,6 @@ pub fn print_crate<'a>(\n     ann: &'a dyn PpAnn,\n     is_expanded: bool,\n     edition: Edition,\n-    has_injected_crate: bool,\n ) -> String {\n     let mut s = State {\n         s: pp::mk_printer(),\n@@ -119,7 +118,7 @@ pub fn print_crate<'a>(\n         insert_extra_parens: true,\n     };\n \n-    if is_expanded && has_injected_crate {\n+    if is_expanded && !krate.attrs.iter().any(|attr| attr.has_name(sym::no_core)) {\n         // We need to print `#![no_std]` (and its feature gate) so that\n         // compiling pretty-printed source won't inject libstd again.\n         // However, we don't want these attributes in the AST because"}, {"sha": "91566ec1ef24540323c9769cbd2f88e3fad78fed", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=f32191f78f389169701d0820985e5e8f1fc9c2e7", "patch": "@@ -13,12 +13,12 @@ pub fn inject(\n     resolver: &mut dyn ResolverExpand,\n     sess: &Session,\n     alt_std_name: Option<Symbol>,\n-) -> (ast::Crate, Option<Symbol>) {\n+) -> ast::Crate {\n     let rust_2018 = sess.parse_sess.edition >= Edition::Edition2018;\n \n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[Symbol] = if sess.contains_name(&krate.attrs, sym::no_core) {\n-        return (krate, None);\n+        return krate;\n     } else if sess.contains_name(&krate.attrs, sym::no_std) {\n         if sess.contains_name(&krate.attrs, sym::compiler_builtins) {\n             &[sym::core]\n@@ -81,5 +81,5 @@ pub fn inject(\n \n     krate.module.items.insert(0, use_item);\n \n-    (krate, Some(name))\n+    krate\n }"}, {"sha": "305fa838afad2293a46b5c870de5aa9a89079be6", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=f32191f78f389169701d0820985e5e8f1fc9c2e7", "patch": "@@ -404,7 +404,6 @@ pub fn print_after_parsing(\n                 annotation.pp_ann(),\n                 false,\n                 parse.edition,\n-                parse.injected_crate_name.get().is_some(),\n             )\n         })\n     } else {\n@@ -446,7 +445,6 @@ pub fn print_after_hir_lowering<'tcx>(\n                     annotation.pp_ann(),\n                     true,\n                     parse.edition,\n-                    parse.injected_crate_name.get().is_some(),\n                 )\n             })\n         }"}, {"sha": "f6af4b7d8a44a14f899794e6926f89604902fe48", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f32191f78f389169701d0820985e5e8f1fc9c2e7", "patch": "@@ -239,16 +239,12 @@ fn configure_and_expand_inner<'a>(\n \n     krate = sess.time(\"crate_injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| Symbol::intern(s));\n-        let (krate, name) = rustc_builtin_macros::standard_library_imports::inject(\n+        rustc_builtin_macros::standard_library_imports::inject(\n             krate,\n             &mut resolver,\n             &sess,\n             alt_std_name,\n-        );\n-        if let Some(name) = name {\n-            sess.parse_sess.injected_crate_name.set(name).expect(\"not yet initialized\");\n-        }\n-        krate\n+        )\n     });\n \n     util::check_attr_crate_type(&sess, &krate.attrs, &mut resolver.lint_buffer());"}, {"sha": "66c3738fb5b5ae1716205deadbab597c9a8d6460", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32191f78f389169701d0820985e5e8f1fc9c2e7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=f32191f78f389169701d0820985e5e8f1fc9c2e7", "patch": "@@ -4,7 +4,7 @@\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::sync::{Lock, Lrc, OnceCell};\n+use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n@@ -129,7 +129,6 @@ pub struct ParseSess {\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n     pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n-    pub injected_crate_name: OnceCell<Symbol>,\n     pub gated_spans: GatedSpans,\n     pub symbol_gallery: SymbolGallery,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n@@ -158,7 +157,6 @@ impl ParseSess {\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n-            injected_crate_name: OnceCell::new(),\n             gated_spans: GatedSpans::default(),\n             symbol_gallery: SymbolGallery::default(),\n             reached_eof: Lock::new(false),"}]}