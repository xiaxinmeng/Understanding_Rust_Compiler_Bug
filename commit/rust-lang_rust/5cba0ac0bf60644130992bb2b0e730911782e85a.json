{"sha": "5cba0ac0bf60644130992bb2b0e730911782e85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYmEwYWMwYmY2MDY0NDEzMDk5MmJiMmIwZTczMDkxMTc4MmU4NWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T14:42:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: move make_async_expr -> expr.rs", "tree": {"sha": "4ab5b4bd00968642e786c183ce1885d0ebc10946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab5b4bd00968642e786c183ce1885d0ebc10946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cba0ac0bf60644130992bb2b0e730911782e85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cba0ac0bf60644130992bb2b0e730911782e85a", "html_url": "https://github.com/rust-lang/rust/commit/5cba0ac0bf60644130992bb2b0e730911782e85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cba0ac0bf60644130992bb2b0e730911782e85a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199d5859812e3b9d6f2171df8fe637fb9777868f", "url": "https://api.github.com/repos/rust-lang/rust/commits/199d5859812e3b9d6f2171df8fe637fb9777868f", "html_url": "https://github.com/rust-lang/rust/commit/199d5859812e3b9d6f2171df8fe637fb9777868f"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "12d3ebb3e0f1f2eb2e81cc95d13a2a1dc4c8d673", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5cba0ac0bf60644130992bb2b0e730911782e85a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cba0ac0bf60644130992bb2b0e730911782e85a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5cba0ac0bf60644130992bb2b0e730911782e85a", "patch": "@@ -1151,47 +1151,6 @@ impl<'a> LoweringContext<'a> {\n         result\n     }\n \n-    fn make_async_expr(\n-        &mut self,\n-        capture_clause: CaptureBy,\n-        closure_node_id: NodeId,\n-        ret_ty: Option<AstP<Ty>>,\n-        span: Span,\n-        body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n-    ) -> hir::ExprKind {\n-        let capture_clause = self.lower_capture_clause(capture_clause);\n-        let output = match ret_ty {\n-            Some(ty) => FunctionRetTy::Ty(ty),\n-            None => FunctionRetTy::Default(span),\n-        };\n-        let ast_decl = FnDecl {\n-            inputs: vec![],\n-            output,\n-            c_variadic: false\n-        };\n-        let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n-        let body_id = self.lower_fn_body(&ast_decl, |this| {\n-            this.generator_kind = Some(hir::GeneratorKind::Async);\n-            body(this)\n-        });\n-        let generator = hir::Expr {\n-            hir_id: self.lower_node_id(closure_node_id),\n-            node: hir::ExprKind::Closure(capture_clause, decl, body_id, span,\n-                Some(hir::GeneratorMovability::Static)),\n-            span,\n-            attrs: ThinVec::new(),\n-        };\n-\n-        let unstable_span = self.mark_span_with_reason(\n-            DesugaringKind::Async,\n-            span,\n-            self.allow_gen_future.clone(),\n-        );\n-        let gen_future = self.expr_std_path(\n-            unstable_span, &[sym::future, sym::from_generator], None, ThinVec::new());\n-        hir::ExprKind::Call(P(gen_future), hir_vec![generator])\n-    }\n-\n     fn lower_body(\n         &mut self,\n         f: impl FnOnce(&mut LoweringContext<'_>) -> (HirVec<hir::Arg>, hir::Expr),"}, {"sha": "2ff67ac877c936053b079f16b81f805ccc733b5e", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5cba0ac0bf60644130992bb2b0e730911782e85a/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cba0ac0bf60644130992bb2b0e730911782e85a/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=5cba0ac0bf60644130992bb2b0e730911782e85a", "patch": "@@ -416,6 +416,62 @@ impl LoweringContext<'_> {\n         P(self.expr_call(e.span, from_err, hir_vec![e]))\n     }\n \n+    pub(super) fn make_async_expr(\n+        &mut self,\n+        capture_clause: CaptureBy,\n+        closure_node_id: NodeId,\n+        ret_ty: Option<AstP<Ty>>,\n+        span: Span,\n+        body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n+    ) -> hir::ExprKind {\n+        let capture_clause = self.lower_capture_clause(capture_clause);\n+        let output = match ret_ty {\n+            Some(ty) => FunctionRetTy::Ty(ty),\n+            None => FunctionRetTy::Default(span),\n+        };\n+        let ast_decl = FnDecl {\n+            inputs: vec![],\n+            output,\n+            c_variadic: false\n+        };\n+        let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n+        let body_id = self.lower_fn_body(&ast_decl, |this| {\n+            this.generator_kind = Some(hir::GeneratorKind::Async);\n+            body(this)\n+        });\n+\n+        // `static || -> <ret_ty> { body }`:\n+        let generator_node = hir::ExprKind::Closure(\n+            capture_clause,\n+            decl,\n+            body_id,\n+            span,\n+            Some(hir::GeneratorMovability::Static)\n+        );\n+        let generator = hir::Expr {\n+            hir_id: self.lower_node_id(closure_node_id),\n+            node: generator_node,\n+            span,\n+            attrs: ThinVec::new(),\n+        };\n+\n+        // `future::from_generator`:\n+        let unstable_span = self.mark_span_with_reason(\n+            DesugaringKind::Async,\n+            span,\n+            self.allow_gen_future.clone(),\n+        );\n+        let gen_future = self.expr_std_path(\n+            unstable_span,\n+            &[sym::future, sym::from_generator],\n+            None,\n+            ThinVec::new()\n+        );\n+\n+        // `future::from_generator(generator)`:\n+        hir::ExprKind::Call(P(gen_future), hir_vec![generator])\n+    }\n+\n     /// Desugar `<expr>.await` into:\n     /// ```rust\n     /// {"}]}