{"sha": "7ef2ba8f7b2b3076d906567bb107b0437c45be48", "node_id": "C_kwDOAAsO6NoAKDdlZjJiYThmN2IyYjMwNzZkOTA2NTY3YmIxMDdiMDQzN2M0NWJlNDg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-25T11:35:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-25T12:47:49Z"}, "message": "Fix size_of_val and min_align_of_val for truly unsized types", "tree": {"sha": "6681d75d5d1bddcb4059fd703b3ca976016d3672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6681d75d5d1bddcb4059fd703b3ca976016d3672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef2ba8f7b2b3076d906567bb107b0437c45be48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef2ba8f7b2b3076d906567bb107b0437c45be48", "html_url": "https://github.com/rust-lang/rust/commit/7ef2ba8f7b2b3076d906567bb107b0437c45be48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef2ba8f7b2b3076d906567bb107b0437c45be48/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ee14d25346aa82e75e9818e92e3c43571c6757", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ee14d25346aa82e75e9818e92e3c43571c6757", "html_url": "https://github.com/rust-lang/rust/commit/39ee14d25346aa82e75e9818e92e3c43571c6757"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "aa1f239bae23ec55bce6c5872f7eac3d37ae8355", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ef2ba8f7b2b3076d906567bb107b0437c45be48/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef2ba8f7b2b3076d906567bb107b0437c45be48/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=7ef2ba8f7b2b3076d906567bb107b0437c45be48", "patch": "@@ -330,6 +330,17 @@ fn main() {\n     static REF1: &u8 = &42;\n     static REF2: &u8 = REF1;\n     assert_eq!(*REF1, *REF2);\n+\n+    extern \"C\" {\n+        type A;\n+    }\n+\n+    fn main() {\n+        let x: &A = unsafe { &*(1usize as *const A) };\n+\n+        assert_eq!(unsafe { intrinsics::size_of_val(x) }, 0);\n+        assert_eq!(unsafe { intrinsics::min_align_of_val(x) }, 1);\n+}\n }\n \n #[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]"}, {"sha": "0b5b6cd55d720d4750060ecb81f75b83f76f4cf6", "filename": "example/std_example.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ef2ba8f7b2b3076d906567bb107b0437c45be48/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef2ba8f7b2b3076d906567bb107b0437c45be48/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=7ef2ba8f7b2b3076d906567bb107b0437c45be48", "patch": "@@ -128,6 +128,25 @@ fn main() {\n         0 => loop {},\n         v => panic(v),\n     };\n+\n+    if black_box(false) {\n+        // Based on https://github.com/rust-lang/rust/blob/2f320a224e827b400be25966755a621779f797cc/src/test/ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs\n+        let _ = Foo::<dyn Send>::new();\n+\n+        #[allow(dead_code)]\n+        struct Foo<T: ?Sized> {\n+            base: Never,\n+            value: T,\n+        }\n+\n+        impl<T: ?Sized> Foo<T> {\n+            pub fn new() -> Box<Foo<T>> {\n+                todo!()\n+            }\n+        }\n+\n+        enum Never {}\n+    }\n }\n \n fn panic(_: u128) {"}, {"sha": "537aade8b86a489a98ebce09c7ddee6ca26a7d78", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef2ba8f7b2b3076d906567bb107b0437c45be48/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef2ba8f7b2b3076d906567bb107b0437c45be48/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=7ef2ba8f7b2b3076d906567bb107b0437c45be48", "patch": "@@ -404,7 +404,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         size_of_val, (c ptr) {\n             let layout = fx.layout_of(substs.type_at(0));\n-            let size = if layout.is_unsized() {\n+            // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n+            // branch\n+            let size = if let Abi::ScalarPair(_, _) = ptr.layout().abi {\n                 let (_ptr, info) = ptr.load_scalar_pair(fx);\n                 let (size, _align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 size\n@@ -418,7 +420,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n         min_align_of_val, (c ptr) {\n             let layout = fx.layout_of(substs.type_at(0));\n-            let align = if layout.is_unsized() {\n+            // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n+            // branch\n+            let align = if let Abi::ScalarPair(_, _) = ptr.layout().abi {\n                 let (_ptr, info) = ptr.load_scalar_pair(fx);\n                 let (_size, align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 align"}, {"sha": "052ca0a082b3c62261bea1e2d36a3a93936d84a4", "filename": "src/unsize.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ef2ba8f7b2b3076d906567bb107b0437c45be48/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef2ba8f7b2b3076d906567bb107b0437c45be48/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=7ef2ba8f7b2b3076d906567bb107b0437c45be48", "patch": "@@ -153,11 +153,7 @@ pub(crate) fn size_and_align_of_dst<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     info: Value,\n ) -> (Value, Value) {\n-    if !layout.is_unsized() {\n-        let size = fx.bcx.ins().iconst(fx.pointer_type, layout.size.bytes() as i64);\n-        let align = fx.bcx.ins().iconst(fx.pointer_type, layout.align.abi.bytes() as i64);\n-        return (size, align);\n-    }\n+    assert!(layout.is_unsized() || layout.abi == Abi::Uninhabited);\n     match layout.ty.kind() {\n         ty::Dynamic(..) => {\n             // load size/align from vtable"}]}