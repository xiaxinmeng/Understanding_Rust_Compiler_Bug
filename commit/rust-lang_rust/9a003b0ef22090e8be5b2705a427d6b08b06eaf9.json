{"sha": "9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMDAzYjBlZjIyMDkwZThiZTViMjcwNWE0MjdkNmIwOGIwNmVhZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T18:27:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-02T18:27:20Z"}, "message": "Auto merge of #32386 - brandonedens:llvm_min_size, r=alexcrichton\n\nAdd CodeGen options to optimize for size.\n\nAdd CodeGen options to annotate functions with the attributes OptimizeSize and/or MinSize used by LLVM to reduce .text size.\nCloses #32296", "tree": {"sha": "5360ac3259a1b9b30ed2d78ac560ee166b76092d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5360ac3259a1b9b30ed2d78ac560ee166b76092d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "html_url": "https://github.com/rust-lang/rust/commit/9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d80497e628945c3f11ff351030b4c62a8533e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d80497e628945c3f11ff351030b4c62a8533e01e", "html_url": "https://github.com/rust-lang/rust/commit/d80497e628945c3f11ff351030b4c62a8533e01e"}, {"sha": "16eaecbe43bc135b5b69cd114c25deb14a09c9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/16eaecbe43bc135b5b69cd114c25deb14a09c9e4", "html_url": "https://github.com/rust-lang/rust/commit/16eaecbe43bc135b5b69cd114c25deb14a09c9e4"}], "stats": {"total": 107, "additions": 86, "deletions": 21}, "files": [{"sha": "b8dd750d3f1c2fc3f450ec031e16a01449ef2db3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -48,7 +48,9 @@ pub enum OptLevel {\n     No, // -O0\n     Less, // -O1\n     Default, // -O2\n-    Aggressive // -O3\n+    Aggressive, // -O3\n+    Size, // -Os\n+    SizeMin, // -Oz\n }\n \n #[derive(Clone, Copy, PartialEq)]\n@@ -567,8 +569,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     debuginfo: Option<usize> = (None, parse_opt_uint,\n         \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n          2 = full debug info with variable and type information\"),\n-    opt_level: Option<usize> = (None, parse_opt_uint,\n-        \"optimize with possible levels 0-3\"),\n+    opt_level: Option<String> = (None, parse_opt_string,\n+        \"optimize with possible levels 0-3, s, or z\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint,\n@@ -1125,13 +1127,20 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n             OptLevel::Default\n         } else {\n-            match cg.opt_level {\n-                None => OptLevel::No,\n-                Some(0) => OptLevel::No,\n-                Some(1) => OptLevel::Less,\n-                Some(2) => OptLevel::Default,\n-                Some(3) => OptLevel::Aggressive,\n-                Some(arg) => {\n+            match (cg.opt_level.as_ref().map(String::as_ref),\n+                   nightly_options::is_nightly_build()) {\n+                (None, _) => OptLevel::No,\n+                (Some(\"0\"), _) => OptLevel::No,\n+                (Some(\"1\"), _) => OptLevel::Less,\n+                (Some(\"2\"), _) => OptLevel::Default,\n+                (Some(\"3\"), _) => OptLevel::Aggressive,\n+                (Some(\"s\"), true) => OptLevel::Size,\n+                (Some(\"z\"), true) => OptLevel::SizeMin,\n+                (Some(\"s\"), false) | (Some(\"z\"), false) => {\n+                    early_error(error_format, &format!(\"the optimizations s or z are only \\\n+                                                        accepted on the nightly compiler\"));\n+                },\n+                (Some(arg), _) => {\n                     early_error(error_format, &format!(\"optimization level needs to be \\\n                                                       between 0-3 (instead was `{}`)\",\n                                                      arg));\n@@ -1304,7 +1313,7 @@ pub mod nightly_options {\n         is_nightly_build() && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n     }\n \n-    fn is_nightly_build() -> bool {\n+    pub fn is_nightly_build() -> bool {\n         match get_unstable_features_setting() {\n             UnstableFeatures::Allow | UnstableFeatures::Cheat => true,\n             _ => false,"}, {"sha": "ea0d8eae75d750c39cc5ea4872147aad5780fcd5", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -44,6 +44,7 @@ pub use self::FileType::*;\n pub use self::MetadataType::*;\n pub use self::AsmDialect::*;\n pub use self::CodeGenOptLevel::*;\n+pub use self::CodeGenOptSize::*;\n pub use self::RelocMode::*;\n pub use self::CodeGenModel::*;\n pub use self::DiagnosticKind::*;\n@@ -375,6 +376,14 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n+#[derive(Copy, Clone, PartialEq)]\n+#[repr(C)]\n+pub enum CodeGenOptSize {\n+    CodeGenOptSizeNone = 0,\n+    CodeGenOptSizeDefault = 1,\n+    CodeGenOptSizeAggressive = 2,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {"}, {"sha": "777245c4e0caec8be98fa61f9055d614518a8506", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -140,6 +140,15 @@ fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n       config::OptLevel::Less => llvm::CodeGenLevelLess,\n       config::OptLevel::Default => llvm::CodeGenLevelDefault,\n       config::OptLevel::Aggressive => llvm::CodeGenLevelAggressive,\n+      _ => llvm::CodeGenLevelDefault,\n+    }\n+}\n+\n+fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n+    match optimize {\n+      config::OptLevel::Size => llvm::CodeGenOptSizeDefault,\n+      config::OptLevel::SizeMin => llvm::CodeGenOptSizeAggressive,\n+      _ => llvm::CodeGenOptSizeNone,\n     }\n }\n \n@@ -237,6 +246,9 @@ pub struct ModuleConfig {\n     /// absolutely no optimizations (used for the metadata module).\n     opt_level: Option<llvm::CodeGenOptLevel>,\n \n+    /// Some(level) to optimize binary size, or None to not affect program size.\n+    opt_size: Option<llvm::CodeGenOptSize>,\n+\n     // Flags indicating which outputs to produce.\n     emit_no_opt_bc: bool,\n     emit_bc: bool,\n@@ -268,6 +280,7 @@ impl ModuleConfig {\n             tm: tm,\n             passes: passes,\n             opt_level: None,\n+            opt_size: None,\n \n             emit_no_opt_bc: false,\n             emit_bc: false,\n@@ -637,6 +650,7 @@ pub fn run_passes(sess: &Session,\n     let mut metadata_config = ModuleConfig::new(tm, vec!());\n \n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n+    modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n \n     // Save all versions of the bytecode if we're saving our temporaries.\n     if sess.opts.cg.save_temps {\n@@ -991,36 +1005,48 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n-    let opt = config.opt_level.unwrap_or(llvm::CodeGenLevelNone);\n+    let opt_level = config.opt_level.unwrap_or(llvm::CodeGenLevelNone);\n+    let opt_size = config.opt_size.unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    llvm::LLVMRustConfigurePassManagerBuilder(builder, opt,\n+    llvm::LLVMRustConfigurePassManagerBuilder(builder, opt_level,\n                                               config.merge_functions,\n                                               config.vectorize_slp,\n                                               config.vectorize_loop);\n+    llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);\n+\n+    if opt_size != llvm::CodeGenOptSizeNone {\n+        llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(builder, 1);\n+    }\n \n     llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, config.no_builtins);\n \n     // Here we match what clang does (kinda). For O0 we only inline\n     // always-inline functions (but don't add lifetime intrinsics), at O1 we\n     // inline with lifetime intrinsics, and O2+ we add an inliner with a\n     // thresholds copied from clang.\n-    match (opt, inline_threshold) {\n-        (_, Some(t)) => {\n+    match (opt_level, opt_size, inline_threshold) {\n+        (_, _, Some(t)) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n         }\n-        (llvm::CodeGenLevelNone, _) => {\n+        (llvm::CodeGenLevelAggressive, _, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n+        }\n+        (_, llvm::CodeGenOptSizeDefault, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n+        }\n+        (_, llvm::CodeGenOptSizeAggressive, _) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n+        }\n+        (llvm::CodeGenLevelNone, _, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n         }\n-        (llvm::CodeGenLevelLess, _) => {\n+        (llvm::CodeGenLevelLess, _, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n         }\n-        (llvm::CodeGenLevelDefault, _) => {\n+        (llvm::CodeGenLevelDefault, _, _) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n-        (llvm::CodeGenLevelAggressive, _) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n-        }\n     }\n \n     f(builder);"}, {"sha": "9a4d20ca3010c2d42440cc9b338d083738c5130f", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -69,6 +69,17 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::SetFunctionAttribute(llfn, llvm::Attribute::NoRedZone)\n     }\n \n+    match ccx.tcx().sess.opts.cg.opt_level.as_ref().map(String::as_ref) {\n+        Some(\"s\") => {\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::OptimizeForSize);\n+        },\n+        Some(\"z\") => {\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::MinSize);\n+            llvm::SetFunctionAttribute(llfn, llvm::Attribute::OptimizeForSize);\n+        },\n+        _ => {},\n+    }\n+\n     llfn\n }\n "}, {"sha": "76ada90f1e25af3709d33aad5629702234a3b513", "filename": "src/test/run-make/debug-assertions/Makefile", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -11,6 +11,10 @@ all:\n \t$(call RUN,debug) good\n \t$(RUSTC) debug.rs -C opt-level=3\n \t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=s\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=z\n+\t$(call RUN,debug) good\n \t$(RUSTC) debug.rs -O\n \t$(call RUN,debug) good\n \t$(RUSTC) debug.rs"}, {"sha": "e0b57107e5b7b27b21af4ea78a6e6ef2f1c2c405", "filename": "src/test/run-make/emit/Makefile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Ftest%2Frun-make%2Femit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9a003b0ef22090e8be5b2705a427d6b08b06eaf9/src%2Ftest%2Frun-make%2Femit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit%2FMakefile?ref=9a003b0ef22090e8be5b2705a427d6b08b06eaf9", "patch": "@@ -5,6 +5,8 @@ all:\n \t$(RUSTC) -Copt-level=1 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n \t$(RUSTC) -Copt-level=2 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n \t$(RUSTC) -Copt-level=3 --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=s --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n+\t$(RUSTC) -Copt-level=z --emit=llvm-bc,llvm-ir,asm,obj,link test-24876.rs\n \t$(RUSTC) -Copt-level=0 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n \t$(call RUN,test-26235) || exit 1\n \t$(RUSTC) -Copt-level=1 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n@@ -13,3 +15,7 @@ all:\n \t$(call RUN,test-26235) || exit 1\n \t$(RUSTC) -Copt-level=3 --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n \t$(call RUN,test-26235) || exit 1\n+\t$(RUSTC) -Copt-level=s --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1\n+\t$(RUSTC) -Copt-level=z --emit=llvm-bc,llvm-ir,asm,obj,link test-26235.rs\n+\t$(call RUN,test-26235) || exit 1"}]}