{"sha": "1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmY1MWRhNjZmMTZhNDZlYjVmZDgwZGM2ZWEwYTJjMTc5ZDVmZjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-02T18:03:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-02T18:03:46Z"}, "message": "Simplify: remove couple of useless functions", "tree": {"sha": "27f3bad75ee1fcbad9ee6e1af8d9305b9c8efa62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f3bad75ee1fcbad9ee6e1af8d9305b9c8efa62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "html_url": "https://github.com/rust-lang/rust/commit/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2716a1fa3f8a7410248724a6ce5d4c28837db682", "url": "https://api.github.com/repos/rust-lang/rust/commits/2716a1fa3f8a7410248724a6ce5d4c28837db682", "html_url": "https://github.com/rust-lang/rust/commit/2716a1fa3f8a7410248724a6ce5d4c28837db682"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "571236fdcad4a6fdc531c51d8c38aa46ee32c1d0", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "patch": "@@ -7,8 +7,6 @@ use ra_prof::profile;\n use ra_syntax::{ast, AstNode};\n use test_utils::tested_by;\n \n-pub use ra_ide_db::defs::{from_module_def, from_struct_field};\n-\n pub enum NameRefClass {\n     NameDefinition(NameDefinition),\n     FieldShorthand { local: Local, field: NameDefinition },\n@@ -68,14 +66,14 @@ pub(crate) fn classify_name_ref(\n     let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = sema.resolve_path(&path)?;\n     let res = match resolved {\n-        PathResolution::Def(def) => from_module_def(def),\n+        PathResolution::Def(def) => NameDefinition::ModuleDef(def),\n         PathResolution::AssocItem(item) => {\n             let def = match item {\n                 hir::AssocItem::Function(it) => it.into(),\n                 hir::AssocItem::Const(it) => it.into(),\n                 hir::AssocItem::TypeAlias(it) => it.into(),\n             };\n-            from_module_def(def)\n+            NameDefinition::ModuleDef(def)\n         }\n         PathResolution::Local(local) => NameDefinition::Local(local),\n         PathResolution::TypeParam(par) => NameDefinition::TypeParam(par),"}, {"sha": "7b1030a14cc4cafa83d6a7c70b9d09f9a9572530", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=1a6f51da66f16a46eb5fd80dc6ea0a2c179d5ff2", "patch": "@@ -111,47 +111,47 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n             },\n             ast::RecordFieldDef(it) => {\n                 let field: hir::StructField = sema.to_def(&it)?;\n-                Some(from_struct_field(field))\n+                Some(NameDefinition::StructField(field))\n             },\n             ast::Module(it) => {\n                 let def = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::StructDef(it) => {\n                 let def: hir::Struct = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::UnionDef(it) => {\n                 let def: hir::Union = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::EnumDef(it) => {\n                 let def: hir::Enum = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::TraitDef(it) => {\n                 let def: hir::Trait = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::StaticDef(it) => {\n                 let def: hir::Static = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::EnumVariant(it) => {\n                 let def: hir::EnumVariant = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::FnDef(it) => {\n                 let def: hir::Function = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::ConstDef(it) => {\n                 let def: hir::Const = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::TypeAliasDef(it) => {\n                 let def: hir::TypeAlias = sema.to_def(&it)?;\n-                Some(from_module_def(def.into()))\n+                Some(NameDefinition::ModuleDef(def.into()))\n             },\n             ast::MacroCall(it) => {\n                 let def = sema.to_def(&it)?;\n@@ -165,11 +165,3 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n         }\n     }\n }\n-\n-pub fn from_struct_field(field: StructField) -> NameDefinition {\n-    NameDefinition::StructField(field)\n-}\n-\n-pub fn from_module_def(def: ModuleDef) -> NameDefinition {\n-    NameDefinition::ModuleDef(def)\n-}"}]}