{"sha": "2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOThmNGIxMmI4ZmQ1ZDkzZmZmZjNkN2I5ODkzMWIzZjFmMmIwN2E=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T15:31:53Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T15:38:26Z"}, "message": "Move PanicInfo and Location to libcore\n\nPer https://rust-lang.github.io/rfcs/2070-panic-implementation.html", "tree": {"sha": "a6aad25ef4ae1b91c9ff51df6033959f87426788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6aad25ef4ae1b91c9ff51df6033959f87426788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "html_url": "https://github.com/rust-lang/rust/commit/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a7ea9c4095e3218df39832dfc51a456534ecc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a7ea9c4095e3218df39832dfc51a456534ecc9", "html_url": "https://github.com/rust-lang/rust/commit/48a7ea9c4095e3218df39832dfc51a456534ecc9"}], "stats": {"total": 420, "additions": 230, "deletions": 190}, "files": [{"sha": "11476a05dd353ed8a05dbaac4987312ae49813dc", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "patch": "@@ -158,6 +158,7 @@ pub mod array;\n pub mod sync;\n pub mod cell;\n pub mod char;\n+pub mod panic;\n pub mod panicking;\n pub mod iter;\n pub mod option;"}, {"sha": "dbfe531063b7d4048b5749c8b79f4b3d8cab6fd4", "filename": "src/libcore/panic.rs", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "patch": "@@ -0,0 +1,213 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Panic support in the standard library.\n+\n+#![unstable(feature = \"core_panic_info\",\n+            reason = \"newly available in libcore\",\n+            issue = \"44489\")]\n+\n+use any::Any;\n+\n+/// A struct providing information about a panic.\n+///\n+/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook`]\n+/// function.\n+///\n+/// [`set_hook`]: ../../std/panic/fn.set_hook.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n+#[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+#[derive(Debug)]\n+pub struct PanicInfo<'a> {\n+    payload: &'a (Any + Send),\n+    location: Location<'a>,\n+}\n+\n+impl<'a> PanicInfo<'a> {\n+    #![unstable(feature = \"panic_internals\",\n+                reason = \"internal details of the implementation of the `panic!` \\\n+                          and related macros\",\n+                issue = \"0\")]\n+    #[doc(hidden)]\n+    pub fn internal_constructor(payload: &'a (Any + Send), location: Location<'a>,) -> Self {\n+        PanicInfo { payload, location }\n+    }\n+\n+    /// Returns the payload associated with the panic.\n+    ///\n+    /// This will commonly, but not always, be a `&'static str` or [`String`].\n+    ///\n+    /// [`String`]: ../../std/string/struct.String.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n+    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+    pub fn payload(&self) -> &(Any + Send) {\n+        self.payload\n+    }\n+\n+    /// Returns information about the location from which the panic originated,\n+    /// if available.\n+    ///\n+    /// This method will currently always return [`Some`], but this may change\n+    /// in future versions.\n+    ///\n+    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occurred in file '{}' at line {}\", location.file(),\n+    ///             location.line());\n+    ///     } else {\n+    ///         println!(\"panic occurred but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n+    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+    pub fn location(&self) -> Option<&Location> {\n+        // NOTE: If this is changed to sometimes return None,\n+        // deal with that case in std::panicking::default_hook.\n+        Some(&self.location)\n+    }\n+}\n+\n+/// A struct containing information about the location of a panic.\n+///\n+/// This structure is created by the [`location`] method of [`PanicInfo`].\n+///\n+/// [`location`]: ../../std/panic/struct.PanicInfo.html#method.location\n+/// [`PanicInfo`]: ../../std/panic/struct.PanicInfo.html\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// use std::panic;\n+///\n+/// panic::set_hook(Box::new(|panic_info| {\n+///     if let Some(location) = panic_info.location() {\n+///         println!(\"panic occurred in file '{}' at line {}\", location.file(), location.line());\n+///     } else {\n+///         println!(\"panic occurred but can't get location information...\");\n+///     }\n+/// }));\n+///\n+/// panic!(\"Normal panic\");\n+/// ```\n+#[derive(Debug)]\n+#[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+pub struct Location<'a> {\n+    file: &'a str,\n+    line: u32,\n+    col: u32,\n+}\n+\n+impl<'a> Location<'a> {\n+    #![unstable(feature = \"panic_internals\",\n+                reason = \"internal details of the implementation of the `panic!` \\\n+                          and related macros\",\n+                issue = \"0\")]\n+    #[doc(hidden)]\n+    pub fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n+        Location { file, line, col }\n+    }\n+\n+    /// Returns the name of the source file from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occurred in file '{}'\", location.file());\n+    ///     } else {\n+    ///         println!(\"panic occurred but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n+    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+    pub fn file(&self) -> &str {\n+        self.file\n+    }\n+\n+    /// Returns the line number from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occurred at line {}\", location.line());\n+    ///     } else {\n+    ///         println!(\"panic occurred but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n+    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+    pub fn line(&self) -> u32 {\n+        self.line\n+    }\n+\n+    /// Returns the column from which the panic originated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```should_panic\n+    /// use std::panic;\n+    ///\n+    /// panic::set_hook(Box::new(|panic_info| {\n+    ///     if let Some(location) = panic_info.location() {\n+    ///         println!(\"panic occurred at column {}\", location.column());\n+    ///     } else {\n+    ///         println!(\"panic occurred but can't get location information...\");\n+    ///     }\n+    /// }));\n+    ///\n+    /// panic!(\"Normal panic\");\n+    /// ```\n+    #[stable(feature = \"panic_col\", since = \"1.25\")]\n+    pub fn column(&self) -> u32 {\n+        self.col\n+    }\n+}"}, {"sha": "4b374dc14073081bcc74b5a47d254c7aa29327d5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "patch": "@@ -288,6 +288,7 @@\n #![feature(on_unimplemented)]\n #![feature(oom)]\n #![feature(optin_builtin_traits)]\n+#![feature(panic_internals)]\n #![feature(panic_unwind)]\n #![feature(peek)]\n #![feature(placement_in_syntax)]"}, {"sha": "566ef16f29534382bffb7364f72061cc4eb336be", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "patch": "@@ -23,7 +23,10 @@ use sync::{Arc, Mutex, RwLock, atomic};\n use thread::Result;\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub use panicking::{take_hook, set_hook, PanicInfo, Location};\n+pub use panicking::{take_hook, set_hook};\n+\n+#[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n+pub use core::panic::{PanicInfo, Location};\n \n /// A marker trait which represents \"panic safe\" types in Rust.\n ///"}, {"sha": "a748c89f9d4faf74931847d1ebad686a9066307f", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 11, "deletions": 189, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "patch": "@@ -21,6 +21,7 @@ use io::prelude::*;\n \n use any::Any;\n use cell::RefCell;\n+use core::panic::{PanicInfo, Location};\n use fmt;\n use intrinsics;\n use mem;\n@@ -158,182 +159,6 @@ pub fn take_hook() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n     }\n }\n \n-/// A struct providing information about a panic.\n-///\n-/// `PanicInfo` structure is passed to a panic hook set by the [`set_hook`]\n-/// function.\n-///\n-/// [`set_hook`]: ../../std/panic/fn.set_hook.html\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// use std::panic;\n-///\n-/// panic::set_hook(Box::new(|panic_info| {\n-///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n-/// }));\n-///\n-/// panic!(\"Normal panic\");\n-/// ```\n-#[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-#[derive(Debug)]\n-pub struct PanicInfo<'a> {\n-    payload: &'a (Any + Send),\n-    location: Location<'a>,\n-}\n-\n-impl<'a> PanicInfo<'a> {\n-    /// Returns the payload associated with the panic.\n-    ///\n-    /// This will commonly, but not always, be a `&'static str` or [`String`].\n-    ///\n-    /// [`String`]: ../../std/string/struct.String.html\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// use std::panic;\n-    ///\n-    /// panic::set_hook(Box::new(|panic_info| {\n-    ///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n-    /// }));\n-    ///\n-    /// panic!(\"Normal panic\");\n-    /// ```\n-    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn payload(&self) -> &(Any + Send) {\n-        self.payload\n-    }\n-\n-    /// Returns information about the location from which the panic originated,\n-    /// if available.\n-    ///\n-    /// This method will currently always return [`Some`], but this may change\n-    /// in future versions.\n-    ///\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// use std::panic;\n-    ///\n-    /// panic::set_hook(Box::new(|panic_info| {\n-    ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occurred in file '{}' at line {}\", location.file(),\n-    ///             location.line());\n-    ///     } else {\n-    ///         println!(\"panic occurred but can't get location information...\");\n-    ///     }\n-    /// }));\n-    ///\n-    /// panic!(\"Normal panic\");\n-    /// ```\n-    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn location(&self) -> Option<&Location> {\n-        Some(&self.location)\n-    }\n-}\n-\n-/// A struct containing information about the location of a panic.\n-///\n-/// This structure is created by the [`location`] method of [`PanicInfo`].\n-///\n-/// [`location`]: ../../std/panic/struct.PanicInfo.html#method.location\n-/// [`PanicInfo`]: ../../std/panic/struct.PanicInfo.html\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// use std::panic;\n-///\n-/// panic::set_hook(Box::new(|panic_info| {\n-///     if let Some(location) = panic_info.location() {\n-///         println!(\"panic occurred in file '{}' at line {}\", location.file(), location.line());\n-///     } else {\n-///         println!(\"panic occurred but can't get location information...\");\n-///     }\n-/// }));\n-///\n-/// panic!(\"Normal panic\");\n-/// ```\n-#[derive(Debug)]\n-#[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-pub struct Location<'a> {\n-    file: &'a str,\n-    line: u32,\n-    col: u32,\n-}\n-\n-impl<'a> Location<'a> {\n-    /// Returns the name of the source file from which the panic originated.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// use std::panic;\n-    ///\n-    /// panic::set_hook(Box::new(|panic_info| {\n-    ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occurred in file '{}'\", location.file());\n-    ///     } else {\n-    ///         println!(\"panic occurred but can't get location information...\");\n-    ///     }\n-    /// }));\n-    ///\n-    /// panic!(\"Normal panic\");\n-    /// ```\n-    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn file(&self) -> &str {\n-        self.file\n-    }\n-\n-    /// Returns the line number from which the panic originated.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// use std::panic;\n-    ///\n-    /// panic::set_hook(Box::new(|panic_info| {\n-    ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occurred at line {}\", location.line());\n-    ///     } else {\n-    ///         println!(\"panic occurred but can't get location information...\");\n-    ///     }\n-    /// }));\n-    ///\n-    /// panic!(\"Normal panic\");\n-    /// ```\n-    #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub fn line(&self) -> u32 {\n-        self.line\n-    }\n-\n-    /// Returns the column from which the panic originated.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```should_panic\n-    /// use std::panic;\n-    ///\n-    /// panic::set_hook(Box::new(|panic_info| {\n-    ///     if let Some(location) = panic_info.location() {\n-    ///         println!(\"panic occurred at column {}\", location.column());\n-    ///     } else {\n-    ///         println!(\"panic occurred but can't get location information...\");\n-    ///     }\n-    /// }));\n-    ///\n-    /// panic!(\"Normal panic\");\n-    /// ```\n-    #[stable(feature = \"panic_col\", since = \"1.25\")]\n-    pub fn column(&self) -> u32 {\n-        self.col\n-    }\n-}\n-\n fn default_hook(info: &PanicInfo) {\n     #[cfg(feature = \"backtrace\")]\n     use sys_common::backtrace;\n@@ -351,13 +176,14 @@ fn default_hook(info: &PanicInfo) {\n         }\n     };\n \n-    let file = info.location.file;\n-    let line = info.location.line;\n-    let col = info.location.col;\n+    let location = info.location().unwrap();  // The current implementation always returns Some\n+    let file = location.file();\n+    let line = location.line();\n+    let col = location.column();\n \n-    let msg = match info.payload.downcast_ref::<&'static str>() {\n+    let msg = match info.payload().downcast_ref::<&'static str>() {\n         Some(s) => *s,\n-        None => match info.payload.downcast_ref::<String>() {\n+        None => match info.payload().downcast_ref::<String>() {\n             Some(s) => &s[..],\n             None => \"Box<Any>\",\n         }\n@@ -563,14 +389,10 @@ fn rust_panic_with_hook(msg: Box<Any + Send>,\n     }\n \n     unsafe {\n-        let info = PanicInfo {\n-            payload: &*msg,\n-            location: Location {\n-                file,\n-                line,\n-                col,\n-            },\n-        };\n+        let info = PanicInfo::internal_constructor(\n+            &*msg,\n+            Location::internal_constructor(file, line, col),\n+        );\n         HOOK_LOCK.read();\n         match HOOK {\n             Hook::Default => default_hook(&info),"}]}