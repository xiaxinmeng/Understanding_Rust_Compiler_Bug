{"sha": "39146c44bde0950a782446c9e4d95f8071acef54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MTQ2YzQ0YmRlMDk1MGE3ODI0NDZjOWU0ZDk1ZjgwNzFhY2VmNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-31T11:00:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-31T11:00:08Z"}, "message": "Auto merge of #1130 - christianpoveda:ignore-close-read-only, r=RalfJung\n\nIgnore close errors in read-only files.\n\nthis fixes https://github.com/rust-lang/miri/issues/999\n\nr? @RalfJung", "tree": {"sha": "6de3edf697c211cfb6efacbbb4116c8aea1dcea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de3edf697c211cfb6efacbbb4116c8aea1dcea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39146c44bde0950a782446c9e4d95f8071acef54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39146c44bde0950a782446c9e4d95f8071acef54", "html_url": "https://github.com/rust-lang/rust/commit/39146c44bde0950a782446c9e4d95f8071acef54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39146c44bde0950a782446c9e4d95f8071acef54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f79aa9bb4ab911ae057addfafd0d34ce4b68479", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f79aa9bb4ab911ae057addfafd0d34ce4b68479", "html_url": "https://github.com/rust-lang/rust/commit/9f79aa9bb4ab911ae057addfafd0d34ce4b68479"}, {"sha": "a40a99d849b11f8580163d5d161221ae6f53f8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40a99d849b11f8580163d5d161221ae6f53f8d8", "html_url": "https://github.com/rust-lang/rust/commit/a40a99d849b11f8580163d5d161221ae6f53f8d8"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "96174010441c4cd161c0a9aeb85f6be69ca2482a", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39146c44bde0950a782446c9e4d95f8071acef54/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39146c44bde0950a782446c9e4d95f8071acef54/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=39146c44bde0950a782446c9e4d95f8071acef54", "patch": "@@ -18,14 +18,8 @@ pub struct EnvVars {\n impl EnvVars {\n     pub(crate) fn init<'mir, 'tcx>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-        mut excluded_env_vars: Vec<String>,\n+        excluded_env_vars: Vec<String>,\n     ) {\n-        // FIXME: this can be removed when we fix the behavior of the `close` shim for macos.\n-        if ecx.tcx.sess.target.target.target_os.to_lowercase() != \"linux\" {\n-            // Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n-            excluded_env_vars.push(\"TERM\".to_owned());\n-        }\n-\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {"}, {"sha": "8c8bd6f7bb97f651951cc354e73fe4f92c5ceab8", "filename": "src/shims/fs.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39146c44bde0950a782446c9e4d95f8071acef54/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39146c44bde0950a782446c9e4d95f8071acef54/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=39146c44bde0950a782446c9e4d95f8071acef54", "patch": "@@ -15,6 +15,7 @@ use shims::time::system_time_to_duration;\n #[derive(Debug)]\n pub struct FileHandle {\n     file: File,\n+    writable: bool,\n }\n \n pub struct FileHandler {\n@@ -56,10 +57,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if (o_rdonly | o_wronly | o_rdwr) & !0b11 != 0 {\n             throw_unsup_format!(\"Access mode flags on this platform are unsupported\");\n         }\n+        let mut writable = true;\n+\n         // Now we check the access mode\n         let access_mode = flag & 0b11;\n \n         if access_mode == o_rdonly {\n+            writable = false;\n             options.read(true);\n         } else if access_mode == o_wronly {\n             options.write(true);\n@@ -105,7 +109,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = options.open(&path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n-            fh.handles.insert(fh.low, FileHandle { file }).unwrap_none();\n+            fh.handles.insert(fh.low, FileHandle { file, writable }).unwrap_none();\n             fh.low\n         });\n \n@@ -148,13 +152,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n-            // `File::sync_all` does the checks that are done when closing a file. We do this to\n-            // to handle possible errors correctly.\n-            let result = this.try_unwrap_io_result(handle.file.sync_all().map(|_| 0i32));\n-            // Now we actually close the file.\n-            drop(handle);\n-            // And return the result.\n-            result\n+            // We sync the file if it was opened in a mode different than read-only.\n+            if handle.writable {\n+                // `File::sync_all` does the checks that are done when closing a file. We do this to\n+                // to handle possible errors correctly.\n+                let result = this.try_unwrap_io_result(handle.file.sync_all().map(|_| 0i32));\n+                // Now we actually close the file.\n+                drop(handle);\n+                // And return the result.\n+                result\n+            } else {\n+                // We drop the file, this closes it but ignores any errors produced when closing\n+                // it. This is done because `File::sync_call` cannot be done over files like\n+                // `/dev/urandom` which are read-only. Check\n+                // https://github.com/rust-lang/miri/issues/999#issuecomment-568920439 for a deeper\n+                // discussion.\n+                drop(handle);\n+                Ok(0)\n+            }\n         } else {\n             this.handle_not_found()\n         }"}]}