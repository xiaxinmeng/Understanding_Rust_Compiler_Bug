{"sha": "ee9094869c85d336f67de8f328e34944f06f1ebe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTA5NDg2OWM4NWQzMzZmNjdkZThmMzI4ZTM0OTQ0ZjA2ZjFlYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T23:49:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T23:49:37Z"}, "message": "Rollup merge of #69740 - mark-i-m:describe-it-3, r=eddyb\n\nReplace some desc logic in librustc_lint with article_and_desc\n\nr? @eddyb @Centril @matthewjasper\n\nFollowup to https://github.com/rust-lang/rust/pull/69674\n\nBlocked on #69498", "tree": {"sha": "ad2c6acb9322151152e322175acbffef9927458a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2c6acb9322151152e322175acbffef9927458a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9094869c85d336f67de8f328e34944f06f1ebe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeUsRCRBK7hj4Ov3rIwAAdHIIAB6r7eZR8hFx55vA50PaVjCo\nOIHfxjobVrlU6las9jSyn3/tHuWc2gH9KWomVNo6DXwFKapcGsW5rkLmhdlcPiLf\n9RsDuAtz2J62YtuK2frm9NZnuxycH0soWcrr7vKqc6KFgxmHezAaxvxaZrZ0T7pg\nMW/fGn+j+cAhA4HHEgxsPXhiWeRWAyP5Py3aSONZ+K8oaggx/f6h6taAt9MspdVi\nDqitqLJx03BvQVjp2pVRXCTro6o2OUKe9YosdapjPF0MDF9qDh9L+qKEJXvfY/Pn\nl4CsR7zO95xD+uX4XwhDzDlWmkzGMUJF0uKeSoKYSMxTyKlvC6WGTJDe0vtk090=\n=WCTD\n-----END PGP SIGNATURE-----\n", "payload": "tree ad2c6acb9322151152e322175acbffef9927458a\nparent 9da25d9faf12a58ba05e4d95bf656625071e9eca\nparent 5e8b795552fed746ec1bbd1d397d7fb11a0faacd\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585007377 +0100\ncommitter GitHub <noreply@github.com> 1585007377 +0100\n\nRollup merge of #69740 - mark-i-m:describe-it-3, r=eddyb\n\nReplace some desc logic in librustc_lint with article_and_desc\n\nr? @eddyb @Centril @matthewjasper\n\nFollowup to https://github.com/rust-lang/rust/pull/69674\n\nBlocked on #69498\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9094869c85d336f67de8f328e34944f06f1ebe", "html_url": "https://github.com/rust-lang/rust/commit/ee9094869c85d336f67de8f328e34944f06f1ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9094869c85d336f67de8f328e34944f06f1ebe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da25d9faf12a58ba05e4d95bf656625071e9eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da25d9faf12a58ba05e4d95bf656625071e9eca", "html_url": "https://github.com/rust-lang/rust/commit/9da25d9faf12a58ba05e4d95bf656625071e9eca"}, {"sha": "5e8b795552fed746ec1bbd1d397d7fb11a0faacd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8b795552fed746ec1bbd1d397d7fb11a0faacd", "html_url": "https://github.com/rust-lang/rust/commit/5e8b795552fed746ec1bbd1d397d7fb11a0faacd"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "66d9fe7e149882ba9cd86696ac9ee4ec4ea7ad6d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -349,6 +349,7 @@ impl MissingDoc {\n         id: Option<hir::HirId>,\n         attrs: &[ast::Attribute],\n         sp: Span,\n+        article: &'static str,\n         desc: &'static str,\n     ) {\n         // If we're building a test harness, then warning about\n@@ -374,7 +375,7 @@ impl MissingDoc {\n         let has_doc = attrs.iter().any(|a| has_doc(a));\n         if !has_doc {\n             cx.struct_span_lint(MISSING_DOCS, cx.tcx.sess.source_map().def_span(sp), |lint| {\n-                lint.build(&format!(\"missing documentation for {}\", desc)).emit()\n+                lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit()\n             });\n         }\n     }\n@@ -398,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"crate\");\n+        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(a));\n@@ -413,12 +414,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::Item<'_>) {\n-        let desc = match it.kind {\n-            hir::ItemKind::Fn(..) => \"a function\",\n-            hir::ItemKind::Mod(..) => \"a module\",\n-            hir::ItemKind::Enum(..) => \"an enum\",\n-            hir::ItemKind::Struct(..) => \"a struct\",\n-            hir::ItemKind::Union(..) => \"a union\",\n+        match it.kind {\n             hir::ItemKind::Trait(.., trait_item_refs) => {\n                 // Issue #11592: traits are always considered exported, even when private.\n                 if let hir::VisibilityKind::Inherited = it.vis.node {\n@@ -428,51 +424,55 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                     }\n                     return;\n                 }\n-                \"a trait\"\n             }\n-            hir::ItemKind::TyAlias(..) => \"a type alias\",\n             hir::ItemKind::Impl { of_trait: Some(ref trait_ref), items, .. } => {\n                 // If the trait is private, add the impl items to `private_traits` so they don't get\n                 // reported for missing docs.\n                 let real_trait = trait_ref.path.res.def_id();\n                 if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(real_trait) {\n-                    match cx.tcx.hir().find(hir_id) {\n-                        Some(Node::Item(item)) => {\n-                            if let hir::VisibilityKind::Inherited = item.vis.node {\n-                                for impl_item_ref in items {\n-                                    self.private_traits.insert(impl_item_ref.id.hir_id);\n-                                }\n+                    if let Some(Node::Item(item)) = cx.tcx.hir().find(hir_id) {\n+                        if let hir::VisibilityKind::Inherited = item.vis.node {\n+                            for impl_item_ref in items {\n+                                self.private_traits.insert(impl_item_ref.id.hir_id);\n                             }\n                         }\n-                        _ => {}\n                     }\n                 }\n                 return;\n             }\n-            hir::ItemKind::Const(..) => \"a constant\",\n-            hir::ItemKind::Static(..) => \"a static\",\n+\n+            hir::ItemKind::TyAlias(..)\n+            | hir::ItemKind::Fn(..)\n+            | hir::ItemKind::Mod(..)\n+            | hir::ItemKind::Enum(..)\n+            | hir::ItemKind::Struct(..)\n+            | hir::ItemKind::Union(..)\n+            | hir::ItemKind::Const(..)\n+            | hir::ItemKind::Static(..) => {}\n+\n             _ => return,\n         };\n \n-        self.check_missing_docs_attrs(cx, Some(it.hir_id), &it.attrs, it.span, desc);\n+        let def_id = cx.tcx.hir().local_def_id(it.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id);\n+\n+        self.check_missing_docs_attrs(cx, Some(it.hir_id), &it.attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem<'_>) {\n         if self.private_traits.contains(&trait_item.hir_id) {\n             return;\n         }\n \n-        let desc = match trait_item.kind {\n-            hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Fn(..) => \"a trait method\",\n-            hir::TraitItemKind::Type(..) => \"an associated type\",\n-        };\n+        let def_id = cx.tcx.hir().local_def_id(trait_item.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id);\n \n         self.check_missing_docs_attrs(\n             cx,\n             Some(trait_item.hir_id),\n             &trait_item.attrs,\n             trait_item.span,\n+            article,\n             desc,\n         );\n     }\n@@ -483,29 +483,33 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             return;\n         }\n \n-        let desc = match impl_item.kind {\n-            hir::ImplItemKind::Const(..) => \"an associated constant\",\n-            hir::ImplItemKind::Fn(..) => \"a method\",\n-            hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n-            hir::ImplItemKind::OpaqueTy(_) => \"an associated `impl Trait` type\",\n-        };\n+        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n+        let (article, desc) = cx.tcx.article_and_description(def_id);\n         self.check_missing_docs_attrs(\n             cx,\n             Some(impl_item.hir_id),\n             &impl_item.attrs,\n             impl_item.span,\n+            article,\n             desc,\n         );\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, sf: &hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(cx, Some(sf.hir_id), &sf.attrs, sf.span, \"a struct field\")\n+            self.check_missing_docs_attrs(\n+                cx,\n+                Some(sf.hir_id),\n+                &sf.attrs,\n+                sf.span,\n+                \"a\",\n+                \"struct field\",\n+            )\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, Some(v.id), &v.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, Some(v.id), &v.attrs, v.span, \"a\", \"variant\");\n     }\n }\n "}, {"sha": "821e6b99f7b8fe8f2b49b4da8662ccc63c28f506", "filename": "src/test/rustdoc-ui/deny-missing-docs-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -1,4 +1,4 @@\n-error: missing documentation for crate\n+error: missing documentation for the crate\n   --> $DIR/deny-missing-docs-crate.rs:1:1\n    |\n LL | / #![deny(missing_docs)]"}, {"sha": "250c4bc442f98b916adbe93e13f9e94330ad26f9", "filename": "src/test/ui/issues/issue-10656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fissues%2Fissue-10656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fissues%2Fissue-10656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10656.rs?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -1,3 +1,3 @@\n #![deny(missing_docs)]\n #![crate_type=\"lib\"]\n-//~^^ ERROR missing documentation for crate\n+//~^^ ERROR missing documentation for the crate"}, {"sha": "2e4365f1ed76b21c6ea64e8529a98c0873d76bd0", "filename": "src/test/ui/issues/issue-10656.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fissues%2Fissue-10656.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fissues%2Fissue-10656.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10656.stderr?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -1,4 +1,4 @@\n-error: missing documentation for crate\n+error: missing documentation for the crate\n   --> $DIR/issue-10656.rs:1:1\n    |\n LL | / #![deny(missing_docs)]"}, {"sha": "bab6f4e9e5e155835c5ed232f2ac4de8799cbab4", "filename": "src/test/ui/lint/lint-missing-doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.rs?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -50,8 +50,8 @@ trait B {\n }\n \n pub trait C { //~ ERROR: missing documentation for a trait\n-    fn foo(&self); //~ ERROR: missing documentation for a trait method\n-    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+    fn foo(&self); //~ ERROR: missing documentation for an associated function\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for an associated function\n }\n \n #[allow(missing_docs)]\n@@ -78,7 +78,7 @@ impl Foo {\n }\n \n impl PubFoo {\n-    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    pub fn foo() {} //~ ERROR: missing documentation for an associated function\n     /// dox\n     pub fn foo1() {}\n     fn foo2() {}"}, {"sha": "21da4fae4c161246f6a0ec7446eb27f84b8f43cc", "filename": "src/test/ui/lint/lint-missing-doc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-missing-doc.stderr?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -40,13 +40,13 @@ error: missing documentation for a trait\n LL | pub trait C {\n    | ^^^^^^^^^^^\n \n-error: missing documentation for a trait method\n+error: missing documentation for an associated function\n   --> $DIR/lint-missing-doc.rs:53:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n-error: missing documentation for a trait method\n+error: missing documentation for an associated function\n   --> $DIR/lint-missing-doc.rs:54:5\n    |\n LL |     fn foo_with_impl(&self) {}\n@@ -64,7 +64,7 @@ error: missing documentation for an associated type\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/lint-missing-doc.rs:81:5\n    |\n LL |     pub fn foo() {}"}, {"sha": "1e8b6788a60bb4663370cd5751c444e576f29b2a", "filename": "src/test/ui/lint/lints-in-foreign-macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.rs?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -1,7 +1,7 @@\n // aux-build:lints-in-foreign-macros.rs\n // check-pass\n \n-#![warn(unused_imports)] //~ missing documentation for crate [missing_docs]\n+#![warn(unused_imports)] //~ missing documentation for the crate [missing_docs]\n #![warn(missing_docs)]\n \n #[macro_use]"}, {"sha": "dcea5adb863f664c69ca25c1876619e6dd664b37", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -26,7 +26,7 @@ warning: unused import: `std::string::ToString`\n LL | mod d { baz2!(use std::string::ToString;); }\n    |                   ^^^^^^^^^^^^^^^^^^^^^\n \n-warning: missing documentation for crate\n+warning: missing documentation for the crate\n   --> $DIR/lints-in-foreign-macros.rs:4:1\n    |\n LL | / #![warn(unused_imports)]"}, {"sha": "b306849ac8e5eba746ce1b4cbb9d4402cde57b7d", "filename": "src/test/ui/privacy/private-in-public-non-principal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -10,7 +10,7 @@ pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loo\n #[deny(missing_docs)]\n fn container() {\n     impl dyn PubPrincipal {\n-        pub fn check_doc_lint() {} //~ ERROR missing documentation for a method\n+        pub fn check_doc_lint() {} //~ ERROR missing documentation for an associated function\n     }\n     impl dyn PubPrincipal + PrivNonPrincipal {\n         pub fn check_doc_lint() {} // OK, no missing doc lint"}, {"sha": "778c98671ad4d423e86926ef541fc2b8f8d6659a", "filename": "src/test/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9094869c85d336f67de8f328e34944f06f1ebe/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=ee9094869c85d336f67de8f328e34944f06f1ebe", "patch": "@@ -8,7 +8,7 @@ LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal>\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n \n-error: missing documentation for a method\n+error: missing documentation for an associated function\n   --> $DIR/private-in-public-non-principal.rs:13:9\n    |\n LL |         pub fn check_doc_lint() {}"}]}