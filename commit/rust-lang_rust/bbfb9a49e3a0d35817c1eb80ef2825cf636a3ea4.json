{"sha": "bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZmI5YTQ5ZTNhMGQzNTgxN2MxZWI4MGVmMjgyNWNmNjM2YTNlYTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-20T06:25:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-21T01:01:06Z"}, "message": "for_loop: Split test into fixable/unfixable, make needless_range_loop use updated range syntax", "tree": {"sha": "af75ea698d07523aed5d7919d40dd3873a736a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af75ea698d07523aed5d7919d40dd3873a736a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "html_url": "https://github.com/rust-lang/rust/commit/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a34b1bd7c59e6168fcba1b496a1477c70d6b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a34b1bd7c59e6168fcba1b496a1477c70d6b52", "html_url": "https://github.com/rust-lang/rust/commit/38a34b1bd7c59e6168fcba1b496a1477c70d6b52"}], "stats": {"total": 455, "additions": 379, "deletions": 76}, "files": [{"sha": "0032cfd1985bc945f5c39e99853a0023f8212e3e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -1272,7 +1272,7 @@ fn check_for_loop_reverse_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arg: &'tcx\n                     let start_snippet = snippet(cx, start.span, \"_\");\n                     let end_snippet = snippet(cx, end.span, \"_\");\n                     let dots = if limits == ast::RangeLimits::Closed {\n-                        \"...\"\n+                        \"..=\"\n                     } else {\n                         \"..\"\n                     };"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/for_loop.stdout", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/38a34b1bd7c59e6168fcba1b496a1477c70d6b52/tests%2Fui%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38a34b1bd7c59e6168fcba1b496a1477c70d6b52/tests%2Fui%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stdout?ref=38a34b1bd7c59e6168fcba1b496a1477c70d6b52"}, {"sha": "3075638ef94bfa0e828be1a3568761721180f320", "filename": "tests/ui/for_loop_fixable.fixed", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -0,0 +1,304 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused)]\n+\n+use std::collections::*;\n+\n+#[warn(clippy::all)]\n+struct Unrelated(Vec<u8>);\n+impl Unrelated {\n+    fn next(&self) -> std::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+\n+    fn iter(&self) -> std::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+}\n+\n+#[warn(\n+    clippy::needless_range_loop,\n+    clippy::explicit_iter_loop,\n+    clippy::explicit_into_iter_loop,\n+    clippy::iter_next_loop,\n+    clippy::reverse_range_loop,\n+    clippy::for_kv_map\n+)]\n+#[allow(\n+    clippy::linkedlist,\n+    clippy::shadow_unrelated,\n+    clippy::unnecessary_mut_passed,\n+    clippy::cognitive_complexity,\n+    clippy::similar_names\n+)]\n+#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+fn main() {\n+    const MAX_LEN: usize = 42;\n+    let mut vec = vec![1, 2, 3, 4];\n+\n+    for i in (0..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..=10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (0..MAX_LEN).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 5..=5 {\n+        // not an error, this is the range with only one element \u201c5\u201d\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in 0..10 {\n+        // not an error, the start index is less than the end index\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in -10..0 {\n+        // not an error\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (10..0).map(|x| x * 2) {\n+        // not an error, it can't be known what arbitrary methods do to a range\n+        println!(\"{}\", i);\n+    }\n+\n+    // testing that the empty range lint folds constants\n+    for i in (5 + 4..10).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in ((3 - 1)..(5 + 2)).rev() {\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in (2 * 2)..(2 * 3) {\n+        // no error, 4..6 is fine\n+        println!(\"{}\", i);\n+    }\n+\n+    let x = 42;\n+    for i in x..10 {\n+        // no error, not constant-foldable\n+        println!(\"{}\", i);\n+    }\n+\n+    // See #601\n+    for i in 0..10 {\n+        // no error, id_col does not exist outside the loop\n+        let mut id_col = vec![0f64; 10];\n+        id_col[i] = 1f64;\n+    }\n+\n+    for _v in &vec {}\n+\n+    for _v in &mut vec {}\n+\n+    let out_vec = vec![1, 2, 3];\n+    for _v in out_vec {}\n+\n+    let array = [1, 2, 3];\n+    for _v in &array {}\n+\n+    for _v in &vec {} // these are fine\n+    for _v in &mut vec {} // these are fine\n+\n+    for _v in &[1, 2, 3] {}\n+\n+    for _v in (&mut [1, 2, 3]).iter() {} // no error\n+\n+    for _v in &[0; 32] {}\n+\n+    for _v in [0; 33].iter() {} // no error\n+\n+    let ll: LinkedList<()> = LinkedList::new();\n+    for _v in &ll {}\n+\n+    let vd: VecDeque<()> = VecDeque::new();\n+    for _v in &vd {}\n+\n+    let bh: BinaryHeap<()> = BinaryHeap::new();\n+    for _v in &bh {}\n+\n+    let hm: HashMap<(), ()> = HashMap::new();\n+    for _v in &hm {}\n+\n+    let bt: BTreeMap<(), ()> = BTreeMap::new();\n+    for _v in &bt {}\n+\n+    let hs: HashSet<()> = HashSet::new();\n+    for _v in &hs {}\n+\n+    let bs: BTreeSet<()> = BTreeSet::new();\n+    for _v in &bs {}\n+\n+    let u = Unrelated(vec![]);\n+    for _v in u.next() {} // no error\n+    for _v in u.iter() {} // no error\n+\n+    let mut out = vec![];\n+    vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n+    let _y = vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>(); // this is fine\n+\n+    // Loop with explicit counter variable\n+\n+    // Potential false positives\n+    let mut _index = 0;\n+    _index = 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    _index += 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    if true {\n+        _index = 1\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    let mut _index = 1;\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index *= 2;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index = 1;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+\n+    for _v in &vec {\n+        let mut _index = 0;\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        _index += 1;\n+        _index = 0;\n+    }\n+\n+    let mut _index = 0;\n+    for _v in &vec {\n+        for _x in 0..1 {\n+            _index += 1;\n+        }\n+        _index += 1\n+    }\n+\n+    let mut _index = 0;\n+    for x in &vec {\n+        if *x == 1 {\n+            _index += 1\n+        }\n+    }\n+\n+    let mut _index = 0;\n+    if true {\n+        _index = 1\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut _index = 1;\n+    if false {\n+        _index = 0\n+    };\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut index = 0;\n+    {\n+        let mut _x = &mut index;\n+    }\n+    for _v in &vec {\n+        _index += 1\n+    }\n+\n+    let mut index = 0;\n+    for _v in &vec {\n+        index += 1\n+    }\n+    println!(\"index: {}\", index);\n+\n+    fn f<T>(_: &T, _: &T) -> bool {\n+        unimplemented!()\n+    }\n+    fn g<T>(_: &mut [T], _: usize, _: usize) {\n+        unimplemented!()\n+    }\n+    for i in 1..vec.len() {\n+        if f(&vec[i - 1], &vec[i]) {\n+            g(&mut vec, i - 1, i);\n+        }\n+    }\n+\n+    for mid in 1..vec.len() {\n+        let (_, _) = vec.split_at(mid);\n+    }\n+}\n+\n+fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n+    let pivot = v.len() - 1;\n+    let mut i = 0;\n+    for j in 0..pivot {\n+        if v[j] <= v[pivot] {\n+            v.swap(i, j);\n+            i += 1;\n+        }\n+    }\n+    v.swap(i, pivot);\n+    i\n+}\n+\n+#[warn(clippy::needless_range_loop)]\n+pub fn manual_copy_same_destination(dst: &mut [i32], d: usize, s: usize) {\n+    // Same source and destination - don't trigger lint\n+    for i in 0..dst.len() {\n+        dst[d + i] = dst[s + i];\n+    }\n+}\n+\n+mod issue_2496 {\n+    pub trait Handle {\n+        fn new_for_index(index: usize) -> Self;\n+        fn index(&self) -> usize;\n+    }\n+\n+    pub fn test<H: Handle>() -> H {\n+        for x in 0..5 {\n+            let next_handle = H::new_for_index(x);\n+            println!(\"{}\", next_handle.index());\n+        }\n+        unimplemented!()\n+    }\n+}"}, {"sha": "2201596fd6a674ed61644b2abeb1182da051ee9a", "filename": "tests/ui/for_loop_fixable.rs", "status": "renamed", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -1,8 +1,8 @@\n-use std::collections::*;\n-use std::rc::Rc;\n+// run-rustfix\n+\n+#![allow(dead_code, unused)]\n \n-static STATIC: [usize; 4] = [0, 1, 8, 16];\n-const CONST: [usize; 4] = [0, 1, 8, 16];\n+use std::collections::*;\n \n #[warn(clippy::all)]\n struct Unrelated(Vec<u8>);\n@@ -48,10 +48,6 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in 5..5 {\n-        println!(\"{}\", i);\n-    }\n-\n     for i in 5..=5 {\n         // not an error, this is the range with only one element \u201c5\u201d\n         println!(\"{}\", i);\n@@ -81,10 +77,6 @@ fn main() {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5 + 2)..(8 - 1) {\n-        println!(\"{}\", i);\n-    }\n-\n     for i in (2 * 2)..(2 * 3) {\n         // no error, 4..6 is fine\n         println!(\"{}\", i);\n@@ -145,8 +137,6 @@ fn main() {\n     let bs: BTreeSet<()> = BTreeSet::new();\n     for _v in bs.iter() {}\n \n-    for _v in vec.iter().next() {}\n-\n     let u = Unrelated(vec![]);\n     for _v in u.next() {} // no error\n     for _v in u.iter() {} // no error\n@@ -275,17 +265,8 @@ fn main() {\n     for mid in 1..vec.len() {\n         let (_, _) = vec.split_at(mid);\n     }\n-\n-    const ZERO: usize = 0;\n-\n-    for i in ZERO..vec.len() {\n-        if f(&vec[i], &vec[i]) {\n-            panic!(\"at the disco\");\n-        }\n-    }\n }\n \n-#[allow(dead_code)]\n fn partition<T: PartialOrd + Send>(v: &mut [T]) -> usize {\n     let pivot = v.len() - 1;\n     let mut i = 0;", "previous_filename": "tests/ui/for_loop.rs"}, {"sha": "6d6fa3ac7af956b553990de88639d47dcf828812", "filename": "tests/ui/for_loop_fixable.stderr", "status": "renamed", "additions": 20, "deletions": 52, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:39:14\n+  --> $DIR/for_loop_fixable.rs:39:14\n    |\n LL |     for i in 10..0 {\n    |              ^^^^^\n@@ -11,17 +11,17 @@ LL |     for i in (0..10).rev() {\n    |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:43:14\n+  --> $DIR/for_loop_fixable.rs:43:14\n    |\n LL |     for i in 10..=0 {\n    |              ^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n    |\n-LL |     for i in (0...10).rev() {\n+LL |     for i in (0..=10).rev() {\n    |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:47:14\n+  --> $DIR/for_loop_fixable.rs:47:14\n    |\n LL |     for i in MAX_LEN..0 {\n    |              ^^^^^^^^^^\n@@ -31,13 +31,7 @@ LL |     for i in (0..MAX_LEN).rev() {\n    |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:51:14\n-   |\n-LL |     for i in 5..5 {\n-   |              ^^^^\n-\n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:76:14\n+  --> $DIR/for_loop_fixable.rs:72:14\n    |\n LL |     for i in 10..5 + 4 {\n    |              ^^^^^^^^^\n@@ -47,7 +41,7 @@ LL |     for i in (5 + 4..10).rev() {\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:80:14\n+  --> $DIR/for_loop_fixable.rs:76:14\n    |\n LL |     for i in (5 + 2)..(3 - 1) {\n    |              ^^^^^^^^^^^^^^^^\n@@ -56,113 +50,87 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:84:14\n-   |\n-LL |     for i in (5 + 2)..(8 - 1) {\n-   |              ^^^^^^^^^^^^^^^^\n-\n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:106:15\n+  --> $DIR/for_loop_fixable.rs:98:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:108:15\n+  --> $DIR/for_loop_fixable.rs:100:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods`\n-  --> $DIR/for_loop.rs:111:15\n+  --> $DIR/for_loop_fixable.rs:103:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:114:15\n+  --> $DIR/for_loop_fixable.rs:106:15\n    |\n LL |     for _v in array.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:119:15\n+  --> $DIR/for_loop_fixable.rs:111:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:123:15\n+  --> $DIR/for_loop_fixable.rs:115:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:128:15\n+  --> $DIR/for_loop_fixable.rs:120:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:131:15\n+  --> $DIR/for_loop_fixable.rs:123:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:134:15\n+  --> $DIR/for_loop_fixable.rs:126:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:137:15\n+  --> $DIR/for_loop_fixable.rs:129:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:140:15\n+  --> $DIR/for_loop_fixable.rs:132:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:143:15\n+  --> $DIR/for_loop_fixable.rs:135:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:146:15\n+  --> $DIR/for_loop_fixable.rs:138:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:148:15\n-   |\n-LL |     for _v in vec.iter().next() {}\n-   |               ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n-\n-error: the loop variable `i` is only used to index `vec`.\n-  --> $DIR/for_loop.rs:281:14\n-   |\n-LL |     for i in ZERO..vec.len() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::needless-range-loop` implied by `-D warnings`\n-help: consider using an iterator\n-   |\n-LL |     for <item> in &vec {\n-   |         ^^^^^^    ^^^^\n-\n-error: aborting due to 22 previous errors\n+error: aborting due to 18 previous errors\n ", "previous_filename": "tests/ui/for_loop.stderr"}, {"sha": "5d94647e0dbfeb34808e3332356f517547c363e8", "filename": "tests/ui/for_loop_unfixable.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -0,0 +1,41 @@\n+// Tests from for_loop.rs that don't have suggestions\n+\n+#[warn(\n+    clippy::needless_range_loop,\n+    clippy::explicit_iter_loop,\n+    clippy::explicit_into_iter_loop,\n+    clippy::iter_next_loop,\n+    clippy::reverse_range_loop,\n+    clippy::for_kv_map\n+)]\n+#[allow(\n+    clippy::linkedlist,\n+    clippy::shadow_unrelated,\n+    clippy::unnecessary_mut_passed,\n+    clippy::cognitive_complexity,\n+    clippy::similar_names,\n+    unused,\n+    dead_code\n+)]\n+#[allow(clippy::many_single_char_names, unused_variables, clippy::into_iter_on_array)]\n+fn main() {\n+    for i in 5..5 {\n+        println!(\"{}\", i);\n+    }\n+\n+    let vec = vec![1, 2, 3, 4];\n+\n+    for _v in vec.iter().next() {}\n+\n+    for i in (5 + 2)..(8 - 1) {\n+        println!(\"{}\", i);\n+    }\n+\n+    const ZERO: usize = 0;\n+\n+    for i in ZERO..vec.len() {\n+        if f(&vec[i], &vec[i]) {\n+            panic!(\"at the disco\");\n+        }\n+    }\n+}"}, {"sha": "e88bfffaae6e608dfd8991c413f6b0051f829a33", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=bbfb9a49e3a0d35817c1eb80ef2825cf636a3ea4", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `f` in this scope\n+  --> $DIR/for_loop_unfixable.rs:37:12\n+   |\n+LL |         if f(&vec[i], &vec[i]) {\n+   |            ^ help: a local variable with a similar name exists: `i`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}