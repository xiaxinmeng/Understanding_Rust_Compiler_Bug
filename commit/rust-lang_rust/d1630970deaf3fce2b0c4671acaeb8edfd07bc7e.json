{"sha": "d1630970deaf3fce2b0c4671acaeb8edfd07bc7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjMwOTcwZGVhZjNmY2UyYjBjNDY3MWFjYWViOGVkZmQwN2JjN2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-11T11:54:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T18:02:37Z"}, "message": "Split the predicates listing out of `TraitDef` and `TypeScheme` and into a separate map, `tcx.predicates`, that is used for both traits and other kinds of items. Also use two newtypes to distinguish\ninstantiated predicates from the raw, unsubstituted predicates extracted from the map.", "tree": {"sha": "12b80d7415d9a8ed6355810917efc4aa1ad8f3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b80d7415d9a8ed6355810917efc4aa1ad8f3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e", "html_url": "https://github.com/rust-lang/rust/commit/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea8b81225372ebbcb42fc5a2b6f468b2df402ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea8b81225372ebbcb42fc5a2b6f468b2df402ba", "html_url": "https://github.com/rust-lang/rust/commit/bea8b81225372ebbcb42fc5a2b6f468b2df402ba"}], "stats": {"total": 75, "additions": 54, "deletions": 21}, "files": [{"sha": "af80ce65474f59599a9b560be912ef9e6829774f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1630970deaf3fce2b0c4671acaeb8edfd07bc7e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d1630970deaf3fce2b0c4671acaeb8edfd07bc7e", "patch": "@@ -192,7 +192,8 @@ impl ImplOrTraitItemId {\n #[derive(Clone, Debug)]\n pub struct Method<'tcx> {\n     pub name: ast::Name,\n-    pub generics: ty::Generics<'tcx>,\n+    pub generics: Generics<'tcx>,\n+    pub predicates: GenericPredicates<'tcx>,\n     pub fty: BareFnTy<'tcx>,\n     pub explicit_self: ExplicitSelfCategory,\n     pub vis: ast::Visibility,\n@@ -206,6 +207,7 @@ pub struct Method<'tcx> {\n impl<'tcx> Method<'tcx> {\n     pub fn new(name: ast::Name,\n                generics: ty::Generics<'tcx>,\n+               predicates: GenericPredicates<'tcx>,\n                fty: BareFnTy<'tcx>,\n                explicit_self: ExplicitSelfCategory,\n                vis: ast::Visibility,\n@@ -216,6 +218,7 @@ impl<'tcx> Method<'tcx> {\n        Method {\n             name: name,\n             generics: generics,\n+            predicates: predicates,\n             fty: fty,\n             explicit_self: explicit_self,\n             vis: vis,\n@@ -710,6 +713,10 @@ pub struct ctxt<'tcx> {\n     pub trait_refs: RefCell<NodeMap<Rc<TraitRef<'tcx>>>>,\n     pub trait_defs: RefCell<DefIdMap<Rc<TraitDef<'tcx>>>>,\n \n+    /// Maps from the def-id of an item (trait/struct/enum/fn) to its\n+    /// associated predicates.\n+    pub predicates: RefCell<DefIdMap<GenericPredicates<'tcx>>>,\n+\n     /// Maps from node-id of a trait object cast (like `foo as\n     /// Box<Trait>`) to the trait reference.\n     pub object_cast_map: ObjectCastMap<'tcx>,\n@@ -1782,33 +1789,45 @@ impl RegionParameterDef {\n pub struct Generics<'tcx> {\n     pub types: VecPerParamSpace<TypeParameterDef<'tcx>>,\n     pub regions: VecPerParamSpace<RegionParameterDef>,\n-    pub predicates: VecPerParamSpace<Predicate<'tcx>>,\n }\n \n impl<'tcx> Generics<'tcx> {\n     pub fn empty() -> Generics<'tcx> {\n         Generics {\n             types: VecPerParamSpace::empty(),\n             regions: VecPerParamSpace::empty(),\n-            predicates: VecPerParamSpace::empty(),\n         }\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.types.is_empty() && self.regions.is_empty()\n+    }\n+\n     pub fn has_type_params(&self, space: subst::ParamSpace) -> bool {\n         !self.types.is_empty_in(space)\n     }\n \n     pub fn has_region_params(&self, space: subst::ParamSpace) -> bool {\n         !self.regions.is_empty_in(space)\n     }\n+}\n \n-    pub fn is_empty(&self) -> bool {\n-        self.types.is_empty() && self.regions.is_empty()\n+/// Bounds on generics.\n+#[derive(Clone, Debug)]\n+pub struct GenericPredicates<'tcx> {\n+    pub predicates: VecPerParamSpace<Predicate<'tcx>>,\n+}\n+\n+impl<'tcx> GenericPredicates<'tcx> {\n+    pub fn empty() -> GenericPredicates<'tcx> {\n+        GenericPredicates {\n+            predicates: VecPerParamSpace::empty(),\n+        }\n     }\n \n-    pub fn to_bounds(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>)\n-                     -> GenericBounds<'tcx> {\n-        GenericBounds {\n+    pub fn instantiate(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>)\n+                       -> InstantiatedPredicates<'tcx> {\n+        InstantiatedPredicates {\n             predicates: self.predicates.subst(tcx, substs),\n         }\n     }\n@@ -2022,11 +2041,11 @@ impl<'tcx> Predicate<'tcx> {\n \n /// Represents the bounds declared on a particular set of type\n /// parameters.  Should eventually be generalized into a flag list of\n-/// where clauses.  You can obtain a `GenericBounds` list from a\n-/// `Generics` by using the `to_bounds` method. Note that this method\n-/// reflects an important semantic invariant of `GenericBounds`: while\n-/// the bounds in a `Generics` are expressed in terms of the bound type\n-/// parameters of the impl/trait/whatever, a `GenericBounds` instance\n+/// where clauses.  You can obtain a `InstantiatedPredicates` list from a\n+/// `GenericPredicates` by using the `instantiate` method. Note that this method\n+/// reflects an important semantic invariant of `InstantiatedPredicates`: while\n+/// the `GenericPredicates` are expressed in terms of the bound type\n+/// parameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\n /// represented a set of bounds for some particular instantiation,\n /// meaning that the generic parameters have been substituted with\n /// their values.\n@@ -2035,18 +2054,18 @@ impl<'tcx> Predicate<'tcx> {\n ///\n ///     struct Foo<T,U:Bar<T>> { ... }\n ///\n-/// Here, the `Generics` for `Foo` would contain a list of bounds like\n+/// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like\n /// `[[], [U:Bar<T>]]`.  Now if there were some particular reference\n-/// like `Foo<int,uint>`, then the `GenericBounds` would be `[[],\n+/// like `Foo<int,uint>`, then the `InstantiatedPredicates` would be `[[],\n /// [uint:Bar<int>]]`.\n #[derive(Clone, Debug)]\n-pub struct GenericBounds<'tcx> {\n+pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: VecPerParamSpace<Predicate<'tcx>>,\n }\n \n-impl<'tcx> GenericBounds<'tcx> {\n-    pub fn empty() -> GenericBounds<'tcx> {\n-        GenericBounds { predicates: VecPerParamSpace::empty() }\n+impl<'tcx> InstantiatedPredicates<'tcx> {\n+    pub fn empty() -> InstantiatedPredicates<'tcx> {\n+        InstantiatedPredicates { predicates: VecPerParamSpace::empty() }\n     }\n \n     pub fn has_escaping_regions(&self) -> bool {\n@@ -2248,10 +2267,13 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n /// stray references in a comment or something). We try to reserve the\n /// \"poly\" prefix to refer to higher-ranked things, as in\n /// `PolyTraitRef`.\n+///\n+/// Note that each item also comes with predicates, see\n+/// `lookup_predicates`.\n #[derive(Clone, Debug)]\n pub struct TypeScheme<'tcx> {\n     pub generics: Generics<'tcx>,\n-    pub ty: Ty<'tcx>\n+    pub ty: Ty<'tcx>,\n }\n \n /// As `TypeScheme` but for a trait ref.\n@@ -2393,6 +2415,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         item_substs: RefCell::new(NodeMap()),\n         trait_refs: RefCell::new(NodeMap()),\n         trait_defs: RefCell::new(DefIdMap()),\n+        predicates: RefCell::new(DefIdMap()),\n         object_cast_map: RefCell::new(NodeMap()),\n         map: map,\n         intrinsic_defs: RefCell::new(DefIdMap()),\n@@ -5378,13 +5401,23 @@ pub fn lookup_item_type<'tcx>(cx: &ctxt<'tcx>,\n \n /// Given the did of a trait, returns its canonical trait ref.\n pub fn lookup_trait_def<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)\n-                              -> Rc<ty::TraitDef<'tcx>> {\n+                              -> Rc<TraitDef<'tcx>> {\n     memoized(&cx.trait_defs, did, |did: DefId| {\n         assert!(did.krate != ast::LOCAL_CRATE);\n         Rc::new(csearch::get_trait_def(cx, did))\n     })\n }\n \n+/// Given the did of a trait, returns its full set of predicates.\n+pub fn lookup_predicates<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)\n+                                -> GenericPredicates<'tcx>\n+{\n+    memoized(&cx.predicates, did, |did: DefId| {\n+        assert!(did.krate != ast::LOCAL_CRATE);\n+        csearch::get_predicates(cx, did)\n+    })\n+}\n+\n /// Given a reference to a trait, returns the \"superbounds\" declared\n /// on the trait, with appropriate substitutions applied. Basically,\n /// this applies a filter to the where clauses on the trait, returning"}]}