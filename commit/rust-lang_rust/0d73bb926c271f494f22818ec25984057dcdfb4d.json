{"sha": "0d73bb926c271f494f22818ec25984057dcdfb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzNiYjkyNmMyNzFmNDk0ZjIyODE4ZWMyNTk4NDA1N2RjZGZiNGQ=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-02T12:45:40Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-02T12:45:40Z"}, "message": "Extend #69020 test to include reversed order.\n\nMake sure we check the case where the generic operand comes first, in\ncase any future changes make this ordering matter.", "tree": {"sha": "1845494dee803879b65bfe276e143b785d2e3f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1845494dee803879b65bfe276e143b785d2e3f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d73bb926c271f494f22818ec25984057dcdfb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d73bb926c271f494f22818ec25984057dcdfb4d", "html_url": "https://github.com/rust-lang/rust/commit/0d73bb926c271f494f22818ec25984057dcdfb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d73bb926c271f494f22818ec25984057dcdfb4d/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f72ce1b271b40a5652049362e6aab5914f7b1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f72ce1b271b40a5652049362e6aab5914f7b1d3", "html_url": "https://github.com/rust-lang/rust/commit/0f72ce1b271b40a5652049362e6aab5914f7b1d3"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "9a31c10a0c6403ab0c5ad57895389ea8898bee4e", "filename": "src/test/ui/consts/issue-69020.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0d73bb926c271f494f22818ec25984057dcdfb4d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d73bb926c271f494f22818ec25984057dcdfb4d/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-69020.rs?ref=0d73bb926c271f494f22818ec25984057dcdfb4d", "patch": "@@ -9,9 +9,16 @@ use std::i32;\n \n pub trait Foo {\n     const NEG: i32;\n+    const GEN: i32;\n+\n     const ADD: i32;\n+    const DDA: i32;\n+\n     const DIV: i32;\n+    const VID: i32;\n+\n     const OOB: i32;\n+    const BOO: i32;\n }\n \n // These constants cannot be evaluated already (they depend on `T::N`), so\n@@ -20,10 +27,21 @@ pub trait Foo {\n impl<T: Foo> Foo for Vec<T> {\n     const NEG: i32 = -i32::MIN + T::NEG;\n     //~^ ERROR arithmetic operation will overflow\n+    const GEN: i32 = T::NEG + (-i32::MIN);\n+    //~^ ERROR arithmetic operation will overflow\n+\n     const ADD: i32 = (i32::MAX+1) + T::ADD;\n     //~^ ERROR arithmetic operation will overflow\n+    const DDA: i32 =  T::ADD + (i32::MAX+1);\n+    //~^ ERROR arithmetic operation will overflow\n+\n     const DIV: i32 = (1/0) + T::DIV;\n     //~^ ERROR operation will panic\n+    const VID: i32 = T::DIV + (1/0);\n+    //~^ ERROR operation will panic\n+\n     const OOB: i32 = [1][1] + T::OOB;\n     //~^ ERROR operation will panic\n+    const BOO: i32 = T::OOB + [1][1];\n+    //~^ ERROR operation will panic\n }"}]}