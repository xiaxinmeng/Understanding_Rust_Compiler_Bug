{"sha": "3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjkyOWQzNjIzZGQ0YzRkNjAxYTMxZTU1ZTlkMzZkYmE3YWZlODg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T16:18:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T18:35:20Z"}, "message": "Merge the ExprFnBlock and ExprUnboxedClosure into one ExprClosure with an optional unboxed closure kind.", "tree": {"sha": "3e40448074b4d1de013c9d99826897066cb02871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e40448074b4d1de013c9d99826897066cb02871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "html_url": "https://github.com/rust-lang/rust/commit/3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e44688889b4532919ba5280b9c3fd15d2b49402", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e44688889b4532919ba5280b9c3fd15d2b49402", "html_url": "https://github.com/rust-lang/rust/commit/8e44688889b4532919ba5280b9c3fd15d2b49402"}], "stats": {"total": 313, "additions": 126, "deletions": 187}, "files": [{"sha": "d0118514d4310cf197dcc588c0ea0b8368610b4e", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -288,9 +288,12 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n     match tcx.map.get(closure_id) {\n         ast_map::NodeExpr(expr) => match expr.node {\n             ast::ExprProc(_, ref block) |\n-            ast::ExprFnBlock(_, _, ref block) |\n-            ast::ExprUnboxedFn(_, _, _, ref block) => { block.id }\n-            _ => panic!(\"encountered non-closure id: {}\", closure_id)\n+            ast::ExprClosure(_, _, _, ref block) => {\n+                block.id\n+            }\n+            _ => {\n+                panic!(\"encountered non-closure id: {}\", closure_id)\n+            }\n         },\n         _ => panic!(\"encountered non-expr id: {}\", closure_id)\n     }"}, {"sha": "04c8a4fe59412ad787db90bf7568f25f2d8065eb", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -496,9 +496,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             ast::ExprMac(..) |\n-            ast::ExprFnBlock(..) |\n+            ast::ExprClosure(..) |\n             ast::ExprProc(..) |\n-            ast::ExprUnboxedFn(..) |\n             ast::ExprLit(..) |\n             ast::ExprPath(..) => {\n                 self.straightline(expr, pred, None::<ast::Expr>.iter())"}, {"sha": "36742df98503190a0dd2e40570259ad0fe17f1d8", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -48,9 +48,8 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n                 self.visit_expr(&**e);\n                 self.with_context(Loop, |v| v.visit_block(&**b));\n             }\n-            ast::ExprFnBlock(_, _, ref b) |\n-            ast::ExprProc(_, ref b) |\n-            ast::ExprUnboxedFn(_, _, _, ref b) => {\n+            ast::ExprClosure(_, _, _, ref b) |\n+            ast::ExprProc(_, ref b) => {\n                 self.with_context(Closure, |v| v.visit_block(&**b));\n             }\n             ast::ExprBreak(_) => self.require_loop(\"break\", e.span),"}, {"sha": "08605f76e02495fcfe4b421e2e116dfbc1b11b7b", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -496,8 +496,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 self.consume_expr(&**count);\n             }\n \n-            ast::ExprFnBlock(..) |\n-            ast::ExprUnboxedFn(..) |\n+            ast::ExprClosure(..) |\n             ast::ExprProc(..) => {\n                 self.walk_captures(expr)\n             }"}, {"sha": "7d13d2e5f9431733f5be8e900a6c3d3e7229c8a2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -458,7 +458,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         }\n         visit::walk_expr(ir, expr);\n       }\n-      ast::ExprFnBlock(..) | ast::ExprProc(..) | ast::ExprUnboxedFn(..) => {\n+      ast::ExprClosure(..) | ast::ExprProc(..) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n@@ -975,10 +975,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n-          ast::ExprFnBlock(_, _, ref blk) |\n-          ast::ExprProc(_, ref blk) |\n-          ast::ExprUnboxedFn(_, _, _, ref blk) => {\n-              debug!(\"{} is an ExprFnBlock, ExprProc, or ExprUnboxedFn\",\n+          ast::ExprClosure(_, _, _, ref blk) |\n+          ast::ExprProc(_, ref blk) => {\n+              debug!(\"{} is an ExprClosure or ExprProc\",\n                      expr_to_string(expr));\n \n               /*\n@@ -1495,7 +1494,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ast::ExprBreak(..) | ast::ExprAgain(..) | ast::ExprLit(_) |\n       ast::ExprBlock(..) | ast::ExprMac(..) | ast::ExprAddrOf(..) |\n       ast::ExprStruct(..) | ast::ExprRepeat(..) | ast::ExprParen(..) |\n-      ast::ExprFnBlock(..) | ast::ExprProc(..) | ast::ExprUnboxedFn(..) |\n+      ast::ExprClosure(..) | ast::ExprProc(..) |\n       ast::ExprPath(..) | ast::ExprBox(..) | ast::ExprSlice(..) => {\n         visit::walk_expr(this, expr);\n       }"}, {"sha": "3166f6b1495eb54a82aad1342cea4d7e28827927", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -520,8 +520,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n           ast::ExprAddrOf(..) | ast::ExprCall(..) |\n           ast::ExprAssign(..) | ast::ExprAssignOp(..) |\n-          ast::ExprFnBlock(..) | ast::ExprProc(..) |\n-          ast::ExprUnboxedFn(..) | ast::ExprRet(..) |\n+          ast::ExprClosure(..) | ast::ExprProc(..) |\n+          ast::ExprRet(..) |\n           ast::ExprUnary(..) | ast::ExprSlice(..) |\n           ast::ExprMethodCall(..) | ast::ExprCast(..) |\n           ast::ExprVec(..) | ast::ExprTup(..) | ast::ExprIf(..) |\n@@ -693,9 +693,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                 };\n \n                 match fn_expr.node {\n-                    ast::ExprFnBlock(_, _, ref body) |\n                     ast::ExprProc(_, ref body) |\n-                    ast::ExprUnboxedFn(_, _, _, ref body) => body.id,\n+                    ast::ExprClosure(_, _, _, ref body) => body.id,\n                     _ => unreachable!()\n                 }\n             };"}, {"sha": "302dcf04e12b8fa67ce0484b84fdaa0fb50b83fb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -50,8 +50,8 @@ use util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n \n use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate, CrateNum};\n use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};\n-use syntax::ast::{ExprFnBlock, ExprForLoop, ExprLoop, ExprWhile, ExprMethodCall};\n-use syntax::ast::{ExprPath, ExprProc, ExprStruct, ExprUnboxedFn, FnDecl};\n+use syntax::ast::{ExprClosure, ExprForLoop, ExprLoop, ExprWhile, ExprMethodCall};\n+use syntax::ast::{ExprPath, ExprProc, ExprStruct, FnDecl};\n use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic, Generics};\n use syntax::ast::{Ident, ImplItem, Item, ItemEnum, ItemFn, ItemForeignMod};\n use syntax::ast::{ItemImpl, ItemMac, ItemMod, ItemStatic, ItemStruct};\n@@ -5903,24 +5903,19 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprFnBlock(capture_clause, ref fn_decl, ref block) => {\n+            ExprClosure(capture_clause, _, ref fn_decl, ref block) => {\n                 self.capture_mode_map.insert(expr.id, capture_clause);\n                 self.resolve_function(ClosureRibKind(expr.id, ast::DUMMY_NODE_ID),\n                                       Some(&**fn_decl), NoTypeParameters,\n                                       &**block);\n             }\n+\n             ExprProc(ref fn_decl, ref block) => {\n                 self.capture_mode_map.insert(expr.id, ast::CaptureByValue);\n                 self.resolve_function(ClosureRibKind(expr.id, block.id),\n                                       Some(&**fn_decl), NoTypeParameters,\n                                       &**block);\n             }\n-            ExprUnboxedFn(capture_clause, _, ref fn_decl, ref block) => {\n-                self.capture_mode_map.insert(expr.id, capture_clause);\n-                self.resolve_function(ClosureRibKind(expr.id, block.id),\n-                                      Some(&**fn_decl), NoTypeParameters,\n-                                      &**block);\n-            }\n \n             ExprStruct(ref path, _, _) => {\n                 // Resolve the path to the structure it goes to. We don't"}, {"sha": "d3b7e69b8544c95680c970f1a91a66bb39000cf4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -3922,9 +3922,8 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprTup(..) |\n         ast::ExprIf(..) |\n         ast::ExprMatch(..) |\n-        ast::ExprFnBlock(..) |\n+        ast::ExprClosure(..) |\n         ast::ExprProc(..) |\n-        ast::ExprUnboxedFn(..) |\n         ast::ExprBlock(..) |\n         ast::ExprRepeat(..) |\n         ast::ExprVec(..) => {"}, {"sha": "5fff355bafae37015434d95294d85ecd2bb79b6e", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -1047,7 +1047,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n             }\n             ast::TyInfer => {\n                 // TyInfer also appears as the type of arguments or return\n-                // values in a ExprFnBlock, ExprProc, or ExprUnboxedFn, or as\n+                // values in a ExprClosure or ExprProc, or as\n                 // the type of local variables. Both of these cases are\n                 // handled specially and will not descend into this routine.\n                 this.ty_infer(ast_ty.span)"}, {"sha": "220c2f70d17aae6dfc3066dad6b544036d6ce30a", "filename": "src/librustc/middle/typeck/check/closure.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -26,12 +26,38 @@ use syntax::ast;\n use syntax::ast_util;\n use util::ppaux::Repr;\n \n-pub fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                                      expr: &ast::Expr,\n-                                      kind: ast::UnboxedClosureKind,\n-                                      decl: &ast::FnDecl,\n-                                      body: &ast::Block,\n-                                      expected: Expectation<'tcx>) {\n+pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n+                                   expr: &ast::Expr,\n+                                   opt_kind: Option<ast::UnboxedClosureKind>,\n+                                   decl: &ast::FnDecl,\n+                                   body: &ast::Block,\n+                                   expected: Expectation<'tcx>) {\n+    match opt_kind {\n+        None => { // old-school boxed closure\n+            let region = astconv::opt_ast_region_to_region(fcx,\n+                                                           fcx.infcx(),\n+                                                           expr.span,\n+                                                           &None);\n+            check_boxed_closure(fcx,\n+                                expr,\n+                                ty::RegionTraitStore(region, ast::MutMutable),\n+                                decl,\n+                                body,\n+                                expected);\n+        }\n+\n+        Some(kind) => {\n+            check_unboxed_closure(fcx, expr, kind, decl, body, expected)\n+        }\n+    }\n+}\n+\n+fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n+                                  expr: &ast::Expr,\n+                                  kind: ast::UnboxedClosureKind,\n+                                  decl: &ast::FnDecl,\n+                                  body: &ast::Block,\n+                                  expected: Expectation<'tcx>) {\n     let expr_def_id = ast_util::local_def(expr.id);\n \n     let expected_sig_and_kind = match expected.resolve(fcx) {\n@@ -215,12 +241,12 @@ fn deduce_unboxed_closure_expectations_from_obligations<'a,'tcx>(\n }\n \n \n-pub fn check_expr_fn<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                              expr: &ast::Expr,\n-                              store: ty::TraitStore,\n-                              decl: &ast::FnDecl,\n-                              body: &ast::Block,\n-                              expected: Expectation<'tcx>) {\n+pub fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n+                                    expr: &ast::Expr,\n+                                    store: ty::TraitStore,\n+                                    decl: &ast::FnDecl,\n+                                    body: &ast::Block,\n+                                    expected: Expectation<'tcx>) {\n     let tcx = fcx.ccx.tcx;\n \n     // Find the expected input/output types (if any). Substitute"}, {"sha": "65424567be4e0be41ebb8de2d5554d02e4956c85", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -2823,9 +2823,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         };\n         for (i, arg) in args.iter().take(t).enumerate() {\n             let is_block = match arg.node {\n-                ast::ExprFnBlock(..) |\n-                ast::ExprProc(..) |\n-                ast::ExprUnboxedFn(..) => true,\n+                ast::ExprClosure(..) | ast::ExprProc(..) => true,\n                 _ => false\n             };\n \n@@ -4148,33 +4146,16 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       ast::ExprMatch(ref discrim, ref arms, _) => {\n         _match::check_match(fcx, expr, &**discrim, arms.as_slice());\n       }\n-      ast::ExprFnBlock(_, ref decl, ref body) => {\n-        let region = astconv::opt_ast_region_to_region(fcx,\n-                                                       fcx.infcx(),\n-                                                       expr.span,\n-                                                       &None);\n-        closure::check_expr_fn(fcx,\n-                               expr,\n-                               ty::RegionTraitStore(region, ast::MutMutable),\n-                               &**decl,\n-                               &**body,\n-                               expected);\n-      }\n-      ast::ExprUnboxedFn(_, kind, ref decl, ref body) => {\n-          closure::check_unboxed_closure(fcx,\n-                                         expr,\n-                                         kind,\n-                                         &**decl,\n-                                         &**body,\n-                                         expected);\n+      ast::ExprClosure(_, opt_kind, ref decl, ref body) => {\n+          closure::check_expr_closure(fcx, expr, opt_kind, &**decl, &**body, expected);\n       }\n       ast::ExprProc(ref decl, ref body) => {\n-          closure::check_expr_fn(fcx,\n-                                 expr,\n-                                 ty::UniqTraitStore,\n-                                 &**decl,\n-                                 &**body,\n-                                 expected);\n+          closure::check_boxed_closure(fcx,\n+                                       expr,\n+                                       ty::UniqTraitStore,\n+                                       &**decl,\n+                                       &**body,\n+                                       expected);\n       }\n       ast::ExprBlock(ref b) => {\n         check_block_with_expected(fcx, &**b, expected);"}, {"sha": "0a5af8baeaca99a88834e56c28ecd5acf9ca2167", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -742,9 +742,8 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprFnBlock(_, _, ref body) |\n         ast::ExprProc(_, ref body) |\n-        ast::ExprUnboxedFn(_, _, _, ref body) => {\n+        ast::ExprClosure(_, _, _, ref body) => {\n             check_expr_fn_block(rcx, expr, &**body);\n         }\n "}, {"sha": "23af30b44d9356cc5c4ebe51027d26a772510ad4", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -122,9 +122,8 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n                                     MethodCall::expr(e.id));\n \n         match e.node {\n-            ast::ExprFnBlock(_, ref decl, _) |\n-            ast::ExprProc(ref decl, _) |\n-            ast::ExprUnboxedFn(_, _, ref decl, _) => {\n+            ast::ExprClosure(_, _, ref decl, _) |\n+            ast::ExprProc(ref decl, _) => {\n                 for input in decl.inputs.iter() {\n                     let _ = self.visit_node_id(ResolvingExpr(e.span),\n                                                input.id);"}, {"sha": "4f3daa91bbcf20ccfd11ddb1686479e18da24a78", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -241,8 +241,7 @@ mod svh_visitor {\n         SawExprIf,\n         SawExprWhile,\n         SawExprMatch,\n-        SawExprFnBlock,\n-        SawExprUnboxedFn,\n+        SawExprClosure,\n         SawExprProc,\n         SawExprBlock,\n         SawExprAssign,\n@@ -274,8 +273,7 @@ mod svh_visitor {\n             ExprWhile(..)            => SawExprWhile,\n             ExprLoop(_, id)          => SawExprLoop(id.map(content)),\n             ExprMatch(..)            => SawExprMatch,\n-            ExprFnBlock(..)          => SawExprFnBlock,\n-            ExprUnboxedFn(..)        => SawExprUnboxedFn,\n+            ExprClosure(..)          => SawExprClosure,\n             ExprProc(..)             => SawExprProc,\n             ExprBlock(..)            => SawExprBlock,\n             ExprAssign(..)           => SawExprAssign,"}, {"sha": "67ed95f83fd37972acb4ef64cf8624da76d5317e", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -1345,7 +1345,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                             \"Expected struct type, but not ty_struct\"),\n                 }\n             },\n-            ast::ExprFnBlock(_, ref decl, ref body) => {\n+            ast::ExprClosure(_, _, ref decl, ref body) => {\n                 if generated_code(body.span) {\n                     return\n                 }"}, {"sha": "30cdda9366b62bb36808080ed7a538c7af0062f8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -1385,9 +1385,8 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n         }\n         Some(ast_map::NodeExpr(e)) => {\n             match e.node {\n-                ast::ExprFnBlock(_, _, ref blk) |\n-                ast::ExprProc(_, ref blk) |\n-                ast::ExprUnboxedFn(_, _, _, ref blk) => {\n+                ast::ExprClosure(_, _, _, ref blk) |\n+                ast::ExprProc(_, ref blk) => {\n                     let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                     let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                     visit::walk_expr(&mut explicit, e);"}, {"sha": "075b6b0dd6e04081c52c5b51233e9577c0daa74f", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -1232,9 +1232,8 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ast_map::NodeExpr(ref expr) => {\n             match expr.node {\n-                ast::ExprFnBlock(_, ref fn_decl, ref top_level_block) |\n                 ast::ExprProc(ref fn_decl, ref top_level_block) |\n-                ast::ExprUnboxedFn(_, _, ref fn_decl, ref top_level_block) => {\n+                ast::ExprClosure(_, _, ref fn_decl, ref top_level_block) => {\n                     let name = format!(\"fn{}\", token::gensym(\"fn\"));\n                     let name = token::str_to_ident(name.as_slice());\n                     (name, &**fn_decl,\n@@ -1310,7 +1309,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                       file_metadata,\n                                                       &mut function_name);\n \n-    // There is no ast_map::Path for ast::ExprFnBlock-type functions. For now,\n+    // There is no ast_map::Path for ast::ExprClosure-type functions. For now,\n     // just don't put them into a namespace. In the future this could be improved\n     // somehow (storing a path in the ast_map, or construct a path using the\n     // enclosing function).\n@@ -3578,9 +3577,8 @@ fn populate_scope_map(cx: &CrateContext,\n                 })\n             }\n \n-            ast::ExprFnBlock(_, ref decl, ref block) |\n             ast::ExprProc(ref decl, ref block) |\n-            ast::ExprUnboxedFn(_, _, ref decl, ref block) => {\n+            ast::ExprClosure(_, _, ref decl, ref block) => {\n                 with_new_scope(cx,\n                                block.span,\n                                scope_stack,"}, {"sha": "c095b0e8c8ede7ad9b24202b77ae576c3739163c", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -77,6 +77,7 @@ use trans::machine::{llsize_of, llsize_of_alloc};\n use trans::type_::Type;\n \n use syntax::ast;\n+use syntax::ast_util;\n use syntax::codemap;\n use syntax::print::pprust::{expr_to_string};\n use syntax::ptr::P;\n@@ -1059,16 +1060,23 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprVec(..) | ast::ExprRepeat(..) => {\n             tvec::trans_fixed_vstore(bcx, expr, dest)\n         }\n-        ast::ExprFnBlock(_, ref decl, ref body) |\n+        ast::ExprClosure(_, _, ref decl, ref body) |\n         ast::ExprProc(ref decl, ref body) => {\n-            let expr_ty = expr_ty(bcx, expr);\n-            let store = ty::ty_closure_store(expr_ty);\n-            debug!(\"translating block function {} with type {}\",\n-                   expr_to_string(expr), expr_ty.repr(tcx));\n-            closure::trans_expr_fn(bcx, store, &**decl, &**body, expr.id, dest)\n-        }\n-        ast::ExprUnboxedFn(_, _, ref decl, ref body) => {\n-            closure::trans_unboxed_closure(bcx, &**decl, &**body, expr.id, dest)\n+            // Check the side-table to see whether this is an unboxed\n+            // closure or an older, legacy style closure. Store this\n+            // into a variable to ensure the the RefCell-lock is\n+            // released before we recurse.\n+            let is_unboxed_closure =\n+                bcx.tcx().unboxed_closures.borrow().contains_key(&ast_util::local_def(expr.id));\n+            if is_unboxed_closure {\n+                closure::trans_unboxed_closure(bcx, &**decl, &**body, expr.id, dest)\n+            } else {\n+                let expr_ty = expr_ty(bcx, expr);\n+                let store = ty::ty_closure_store(expr_ty);\n+                debug!(\"translating block function {} with type {}\",\n+                       expr_to_string(expr), expr_ty.repr(tcx));\n+                closure::trans_expr_fn(bcx, store, &**decl, &**body, expr.id, dest)\n+            }\n         }\n         ast::ExprCall(ref f, ref args) => {\n             if bcx.tcx().is_method_call(expr.id) {"}, {"sha": "f6f117c9a970f2201a21e93a36844ca235b10cec", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -667,9 +667,8 @@ pub enum Expr_ {\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n-    ExprFnBlock(CaptureClause, P<FnDecl>, P<Block>),\n+    ExprClosure(CaptureClause, Option<UnboxedClosureKind>, P<FnDecl>, P<Block>),\n     ExprProc(P<FnDecl>, P<Block>),\n-    ExprUnboxedFn(CaptureClause, UnboxedClosureKind, P<FnDecl>, P<Block>),\n     ExprBlock(P<Block>),\n \n     ExprAssign(P<Expr>, P<Expr>),"}, {"sha": "8db12fbd8355ff8516d36a6bebeaa42a50e9b2af", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -37,7 +37,7 @@ use visit;\n ///\n /// More specifically, it is one of either:\n ///   - A function item,\n-///   - A closure expr (i.e. an ExprFnBlock or ExprProc), or\n+///   - A closure expr (i.e. an ExprClosure or ExprProc), or\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n@@ -71,7 +71,7 @@ impl MaybeFnLike for ast::TraitItem {\n impl MaybeFnLike for ast::Expr {\n     fn is_fn_like(&self) -> bool {\n         match self.node {\n-            ast::ExprFnBlock(..) | ast::ExprProc(..) => true,\n+            ast::ExprClosure(..) | ast::ExprProc(..) => true,\n             _ => false,\n         }\n     }\n@@ -215,7 +215,7 @@ impl<'a> FnLikeNode<'a> {\n                 }\n             }\n             ast_map::NodeExpr(e) => match e.node {\n-                ast::ExprFnBlock(_, ref decl, ref block) =>\n+                ast::ExprClosure(_, _, ref decl, ref block) =>\n                     closure(ClosureParts::new(&**decl, &**block, e.id, e.span)),\n                 ast::ExprProc(ref decl, ref block) =>\n                     closure(ClosureParts::new(&**decl, &**block, e.id, e.span)),"}, {"sha": "b18a0c8411cb8aabc5878bc42de5305b0a3c689d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -864,14 +864,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn lambda_fn_decl(&self, span: Span,\n                       fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprFnBlock(ast::CaptureByRef, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureByRef, None, fn_decl, blk))\n     }\n     fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n             self.ty_infer(span));\n \n-        self.expr(span, ast::ExprFnBlock(ast::CaptureByRef, fn_decl, blk))\n+        self.expr(span, ast::ExprClosure(ast::CaptureByRef, None, fn_decl, blk))\n     }\n     fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> {\n         self.lambda(span, Vec::new(), blk)"}, {"sha": "04132679a03700ee6bfce91703d0973fb5ddd77d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -207,10 +207,11 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fld.cx.expr(span, ast::ExprForLoop(pat, head, body, opt_ident))\n         }\n \n-        ast::ExprFnBlock(capture_clause, fn_decl, block) => {\n+        ast::ExprClosure(capture_clause, opt_kind, fn_decl, block) => {\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n-            let new_node = ast::ExprFnBlock(capture_clause,\n+            let new_node = ast::ExprClosure(capture_clause,\n+                                            opt_kind,\n                                             rewritten_fn_decl,\n                                             rewritten_block);\n             P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)})\n@@ -1555,7 +1556,7 @@ mod test {\n             0)\n     }\n \n-    // closure arg hygiene (ExprFnBlock)\n+    // closure arg hygiene (ExprClosure)\n     // expands to fn f(){(|x_1 : int| {(x_2 + x_1)})(3);}\n     #[test] fn closure_arg_hygiene(){\n         run_renaming_test("}, {"sha": "8a9b31032244f49bd22eb1e5b2cc68d7c00ae8ad", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprUnboxedFn(..) => {\n+            ast::ExprClosure(_, Some(_), _, _) => {\n                 self.gate_feature(\"unboxed_closures\",\n                                   e.span,\n                                   \"unboxed closures are a work-in-progress \\"}, {"sha": "7f8d33edc3c3fec89fd41fa33c1246e713086266", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -1316,18 +1316,13 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                         arms.move_map(|x| folder.fold_arm(x)),\n                         source)\n             }\n-            ExprFnBlock(capture_clause, decl, body) => {\n-                ExprFnBlock(capture_clause,\n-                            folder.fold_fn_decl(decl),\n-                            folder.fold_block(body))\n-            }\n             ExprProc(decl, body) => {\n                 ExprProc(folder.fold_fn_decl(decl),\n                          folder.fold_block(body))\n             }\n-            ExprUnboxedFn(capture_clause, kind, decl, body) => {\n-                ExprUnboxedFn(capture_clause,\n-                            kind,\n+            ExprClosure(capture_clause, opt_kind, decl, body) => {\n+                ExprClosure(capture_clause,\n+                            opt_kind,\n                             folder.fold_fn_decl(decl),\n                             folder.fold_block(body))\n             }"}, {"sha": "4557170d8b3c864366d1590da8acc29cd3a64396", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -25,10 +25,10 @@ use ast::{DeclLocal, DefaultBlock, UnDeref, BiDiv, EMPTY_CTXT, EnumDef, Explicit\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n-use ast::{ExprField, ExprTupField, ExprFnBlock, ExprIf, ExprIfLet, ExprIndex, ExprSlice};\n+use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex, ExprSlice};\n use ast::{ExprLit, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n-use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary, ExprUnboxedFn};\n+use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{Once, Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n@@ -2950,7 +2950,8 @@ impl<'a> Parser<'a> {\n \n     // `|args| expr`\n     pub fn parse_lambda_expr(&mut self, capture_clause: CaptureClause)\n-                             -> P<Expr> {\n+                             -> P<Expr>\n+    {\n         let lo = self.span.lo;\n         let (decl, optional_unboxed_closure_kind) =\n             self.parse_fn_block_decl();\n@@ -2964,21 +2965,10 @@ impl<'a> Parser<'a> {\n             rules: DefaultBlock,\n         });\n \n-        match optional_unboxed_closure_kind {\n-            Some(unboxed_closure_kind) => {\n-                self.mk_expr(lo,\n-                             fakeblock.span.hi,\n-                             ExprUnboxedFn(capture_clause,\n-                                           unboxed_closure_kind,\n-                                           decl,\n-                                           fakeblock))\n-            }\n-            None => {\n-                self.mk_expr(lo,\n-                             fakeblock.span.hi,\n-                             ExprFnBlock(capture_clause, decl, fakeblock))\n-            }\n-        }\n+        self.mk_expr(\n+            lo,\n+            fakeblock.span.hi,\n+            ExprClosure(capture_clause, optional_unboxed_closure_kind, decl, fakeblock))\n     }\n \n     pub fn parse_else_expr(&mut self) -> P<Expr> {"}, {"sha": "919edee13caf1236dd08e741244ddb95e183946c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -434,9 +434,8 @@ pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n fn needs_parentheses(expr: &ast::Expr) -> bool {\n     match expr.node {\n         ast::ExprAssign(..) | ast::ExprBinary(..) |\n-        ast::ExprFnBlock(..) | ast::ExprProc(..) |\n-        ast::ExprUnboxedFn(..) | ast::ExprAssignOp(..) |\n-        ast::ExprCast(..) => true,\n+        ast::ExprClosure(..) | ast::ExprProc(..) |\n+        ast::ExprAssignOp(..) | ast::ExprCast(..) => true,\n         _ => false,\n     }\n }\n@@ -1652,49 +1651,11 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose_(expr.span, indent_unit));\n             }\n-            ast::ExprFnBlock(capture_clause, ref decl, ref body) => {\n+            ast::ExprClosure(capture_clause, opt_kind, ref decl, ref body) => {\n                 try!(self.print_capture_clause(capture_clause));\n \n-                // in do/for blocks we don't want to show an empty\n-                // argument list, but at this point we don't know which\n-                // we are inside.\n-                //\n-                // if !decl.inputs.is_empty() {\n-                try!(self.print_fn_block_args(&**decl, None));\n+                try!(self.print_fn_block_args(&**decl, opt_kind));\n                 try!(space(&mut self.s));\n-                // }\n-\n-                if !body.stmts.is_empty() || !body.expr.is_some() {\n-                    try!(self.print_block_unclosed(&**body));\n-                } else {\n-                    // we extract the block, so as not to create another set of boxes\n-                    match body.expr.as_ref().unwrap().node {\n-                        ast::ExprBlock(ref blk) => {\n-                            try!(self.print_block_unclosed(&**blk));\n-                        }\n-                        _ => {\n-                            // this is a bare expression\n-                            try!(self.print_expr(&**body.expr.as_ref().unwrap()));\n-                            try!(self.end()); // need to close a box\n-                        }\n-                    }\n-                }\n-                // a box will be closed by print_expr, but we didn't want an overall\n-                // wrapper so we closed the corresponding opening. so create an\n-                // empty box to satisfy the close.\n-                try!(self.ibox(0));\n-            }\n-            ast::ExprUnboxedFn(capture_clause, kind, ref decl, ref body) => {\n-                try!(self.print_capture_clause(capture_clause));\n-\n-                // in do/for blocks we don't want to show an empty\n-                // argument list, but at this point we don't know which\n-                // we are inside.\n-                //\n-                // if !decl.inputs.is_empty() {\n-                try!(self.print_fn_block_args(&**decl, Some(kind)));\n-                try!(space(&mut self.s));\n-                // }\n \n                 if !body.stmts.is_empty() || !body.expr.is_some() {\n                     try!(self.print_block_unclosed(&**body));"}, {"sha": "1ce1cbf4e59c71a5308d113afab1abc302b58b48", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e2929d3623dd4c4d601a31e55e9d36dba7afe88/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "patch": "@@ -803,14 +803,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n                 visitor.visit_arm(arm)\n             }\n         }\n-        ExprFnBlock(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(FkFnBlock,\n-                             &**function_declaration,\n-                             &**body,\n-                             expression.span,\n-                             expression.id)\n-        }\n-        ExprUnboxedFn(_, _, ref function_declaration, ref body) => {\n+        ExprClosure(_, _, ref function_declaration, ref body) => {\n             visitor.visit_fn(FkFnBlock,\n                              &**function_declaration,\n                              &**body,"}]}