{"sha": "050499c407218fb6b0044bc4a16ffbfb906ec3a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDQ5OWM0MDcyMThmYjZiMDA0NGJjNGExNmZmYmZiOTA2ZWMzYTQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-24T22:41:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-24T22:41:29Z"}, "message": "Rollup merge of #37324 - GuillaumeGomez:trait_error_message, r=jonathandturner\n\nImprove E0277 help message\n\nFixes #37319.\n\nr? @jonathandturner", "tree": {"sha": "64d636d1593a2510e3ebc5b7cbe7dba07b4aa073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64d636d1593a2510e3ebc5b7cbe7dba07b4aa073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050499c407218fb6b0044bc4a16ffbfb906ec3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050499c407218fb6b0044bc4a16ffbfb906ec3a4", "html_url": "https://github.com/rust-lang/rust/commit/050499c407218fb6b0044bc4a16ffbfb906ec3a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050499c407218fb6b0044bc4a16ffbfb906ec3a4/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855f3e740c35af413c27f12a85be1557ca36633a", "url": "https://api.github.com/repos/rust-lang/rust/commits/855f3e740c35af413c27f12a85be1557ca36633a", "html_url": "https://github.com/rust-lang/rust/commit/855f3e740c35af413c27f12a85be1557ca36633a"}, {"sha": "1fadd868cd4fbb16d9d9a7d07fa02997b50194f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fadd868cd4fbb16d9d9a7d07fa02997b50194f5", "html_url": "https://github.com/rust-lang/rust/commit/1fadd868cd4fbb16d9d9a7d07fa02997b50194f5"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "fafdf161b2dc29f3e3c234339ec3fb05b2b684dc", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -445,8 +445,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 let mut err = struct_span_err!(self.tcx.sess, span, E0277,\n                                     \"the trait bound `{}` is not satisfied\",\n                                     trait_ref.to_predicate());\n-                                err.span_label(span, &format!(\"trait `{}` not satisfied\",\n-                                                              trait_ref.to_predicate()));\n+                                err.span_label(span, &format!(\"the trait `{}` is not implemented \\\n+                                                               for `{}`\",\n+                                                              trait_ref,\n+                                                              trait_ref.self_ty()));\n \n                                 // Try to report a help message\n "}, {"sha": "e4cb50cd3f25348deaa0d65df285e1ff5d600ef1", "filename": "src/test/compile-fail/E0277.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -19,6 +19,6 @@ fn some_func<T: Foo>(foo: T) {\n fn main() {\n     some_func(5i32);\n     //~^ ERROR the trait bound `i32: Foo` is not satisfied\n-    //~| NOTE trait `i32: Foo` not satisfied\n+    //~| NOTE the trait `Foo` is not implemented for `i32`\n     //~| NOTE required by `some_func`\n }"}, {"sha": "5a19aecf667f0fedfd77550fffaaff60b5d7bc34", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -32,5 +32,5 @@ fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n     //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n-    //~| NOTE trait `(): Add<A>` not satisfied\n+    //~| NOTE the trait `Add<A>` is not implemented for `()`\n }"}, {"sha": "0c373057c76e05fb36d7dd9cc2d4a862b160762e", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -92,7 +92,7 @@ fn main()\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n     //~^ ERROR the trait bound `[u8]: std::marker::Sized` is not satisfied\n-    //~| NOTE trait `[u8]: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `[u8]`\n     //~| NOTE `[u8]` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n     let _ = foo as *const str; //~ ERROR casting\n@@ -107,7 +107,7 @@ fn main()\n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n     //~^ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n-    //~| NOTE trait `str: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `str`\n     //~| NOTE `str` does not have a constant size known at compile-time\n     //~| NOTE required for the cast to the object type `Foo`\n "}, {"sha": "226b567c546e52fcb54f9b8c147ce7c435e43ce0", "filename": "src/test/compile-fail/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-unsized.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -12,25 +12,25 @@ use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + Sync + 'static`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n const CONST_FOO: str = *\"foo\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE `str: std::marker::Sized` not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `str`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n //~^ ERROR `std::fmt::Debug + Sync + 'static: std::marker::Sized` is not satisfied\n-//~| NOTE `std::fmt::Debug + Sync + 'static: std::marker::Sized` not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + Sync + 'static`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n \n static STATIC_BAR: str = *\"bar\";\n //~^ ERROR `str: std::marker::Sized` is not satisfied\n-//~| NOTE `str: std::marker::Sized` not satisfied\n+//~| NOTE the trait `std::marker::Sized` is not implemented for `str`\n //~| NOTE does not have a constant size known at compile-time\n //~| NOTE constant expressions must have a statically known size\n "}, {"sha": "f055d20e1343be79178270ef1fa266801aa6537a", "filename": "src/test/compile-fail/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fauto-trait-leak.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -26,15 +26,15 @@ fn send<T: Send>(_: T) {}\n fn main() {\n     send(before());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n+    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n     //~| NOTE required by `send`\n \n     send(after());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n+    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `[closure\n     //~| NOTE required because it appears within the type `impl std::ops::Fn<(i32,)>`\n@@ -54,7 +54,7 @@ fn after() -> impl Fn(i32) {\n fn cycle1() -> impl Clone {\n     send(cycle2().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::string::String>: std::marker::Send` is not satisfied\n-    //~| NOTE trait `std::rc::Rc<std::string::String>: std::marker::Send` not satisfied\n+    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n     //~| NOTE `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`\n@@ -65,7 +65,7 @@ fn cycle1() -> impl Clone {\n fn cycle2() -> impl Clone {\n     send(cycle1().clone());\n     //~^ ERROR the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied\n-    //~| NOTE trait `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` not satisfied\n+    //~| NOTE the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n     //~| NOTE `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n     //~| NOTE required because it appears within the type `impl std::clone::Clone`\n     //~| NOTE required by `send`"}, {"sha": "0ad9f21e0983f491bc079f65dfec4e4e76656f5f", "filename": "src/test/compile-fail/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fmultiple-impls.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -42,17 +42,17 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n-    //~| NOTE not satisfied\n+    //~| NOTE the trait `Index<u32>` is not implemented for `[i32]`\n     //~| NOTE trait message\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n-    //~| NOTE not satisfied\n+    //~| NOTE the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n     //~| NOTE on impl for Foo\n     //~| NOTE required by\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n-    //~| NOTE not satisfied\n+    //~| NOTE the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n     //~| NOTE on impl for Bar\n     //~| NOTE required by\n }"}, {"sha": "a7c599330a070e70051a8b9b7771bcefb7c26b12", "filename": "src/test/compile-fail/on-unimplemented/on-impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-impl.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -29,8 +29,9 @@ impl Index<usize> for [i32] {\n \n #[rustc_error]\n fn main() {\n-    Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32); //~ ERROR E0277\n-                                                     //~| NOTE not satisfied\n-                                                     //~| NOTE a usize is required\n-                                                     //~| NOTE required by\n+    Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+    //~^ ERROR E0277\n+    //~| NOTE the trait `Index<u32>` is not implemented for `[i32]`\n+    //~| NOTE a usize is required\n+    //~| NOTE required by\n }"}, {"sha": "ef7695af3e12e52cbb7acee91892048927770d80", "filename": "src/test/compile-fail/on-unimplemented/on-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fon-trait.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -35,9 +35,9 @@ pub fn main() {\n     //~^ ERROR\n     //~^^ NOTE a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n     //~^^^ NOTE required by `collect`\n-    //~| NOTE trait `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` not satisfied\n+    //~| NOTE the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n     let x: String = foobar(); //~ ERROR\n     //~^ NOTE test error `std::string::String` with `u8` `_` `u32`\n     //~^^ NOTE required by `foobar`\n-    //~| NOTE trait `std::string::String: Foo<u8, _, u32>` not satisfied\n+    //~| NOTE the trait `Foo<u8, _, u32>` is not implemented for `std::string::String`\n }"}, {"sha": "d528d0e626a79511d619509e50c9c2618432f531", "filename": "src/test/compile-fail/on-unimplemented/slice-index.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented%2Fslice-index.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -17,10 +17,12 @@ use std::ops::Index;\n #[rustc_error]\n fn main() {\n     let x = &[1, 2, 3] as &[i32];\n-    x[1i32]; //~ ERROR E0277\n-             //~| NOTE trait `[i32]: std::ops::Index<i32>` not satisfied\n-             //~| NOTE slice indices are of type `usize`\n-    x[..1i32]; //~ ERROR E0277\n-               //~| NOTE trait `[i32]: std::ops::Index<std::ops::RangeTo<i32>>` not satisfied\n-               //~| NOTE slice indices are of type `usize`\n+    x[1i32];\n+    //~^ ERROR E0277\n+    //~| NOTE the trait `std::ops::Index<i32>` is not implemented for `[i32]`\n+    //~| NOTE slice indices are of type `usize`\n+    x[..1i32];\n+    //~^ ERROR E0277\n+    //~| NOTE the trait `std::ops::Index<std::ops::RangeTo<i32>>` is not implemented for `[i32]`\n+    //~| NOTE slice indices are of type `usize`\n }"}, {"sha": "7530d8890b98c9397f45e10bb23fab948959ecf7", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050499c407218fb6b0044bc4a16ffbfb906ec3a4/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=050499c407218fb6b0044bc4a16ffbfb906ec3a4", "patch": "@@ -16,13 +16,13 @@ fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| NOTE trait `U: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `U`\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<Misc<U>>();\n     //~^ ERROR `U: std::marker::Sized` is not satisfied\n-    //~| NOTE trait `U: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `U`\n     //~| HELP consider adding a `where U: std::marker::Sized` bound\n     //~| NOTE required because it appears within the type `Misc<U>`\n     //~| NOTE required by `std::mem::size_of`\n@@ -31,34 +31,34 @@ fn check<T: Iterator, U: ?Sized>() {\n \n     <u64 as From<T>>::from;\n     //~^ ERROR `u64: std::convert::From<T>` is not satisfied\n-    //~| NOTE trait `u64: std::convert::From<T>` not satisfied\n+    //~| NOTE the trait `std::convert::From<T>` is not implemented for `u64`\n     //~| HELP consider adding a `where u64: std::convert::From<T>` bound\n     //~| NOTE required by `std::convert::From::from`\n \n     <u64 as From<<T as Iterator>::Item>>::from;\n     //~^ ERROR `u64: std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n-    //~| NOTE trait `u64: std::convert::From<<T as std::iter::Iterator>::Item>` not satisfied\n+    //~| NOTE the trait `std::convert::From<<T as std::iter::Iterator>::Item>` is not implemented\n     //~| HELP consider adding a `where u64:\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... but not if there are inference variables\n \n     <Misc<_> as From<T>>::from;\n     //~^ ERROR `Misc<_>: std::convert::From<T>` is not satisfied\n-    //~| NOTE trait `Misc<_>: std::convert::From<T>` not satisfied\n+    //~| NOTE the trait `std::convert::From<T>` is not implemented for `Misc<_>`\n     //~| NOTE required by `std::convert::From::from`\n \n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n     //~^ ERROR `[T]: std::marker::Sized` is not satisfied\n-    //~| NOTE `[T]: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `[T]`\n     //~| NOTE `[T]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n \n     mem::size_of::<[&U]>();\n     //~^ ERROR `[&U]: std::marker::Sized` is not satisfied\n-    //~| NOTE `[&U]: std::marker::Sized` not satisfied\n+    //~| NOTE the trait `std::marker::Sized` is not implemented for `[&U]`\n     //~| NOTE `[&U]` does not have a constant size\n     //~| NOTE required by `std::mem::size_of`\n }"}]}