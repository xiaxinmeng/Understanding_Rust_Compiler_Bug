{"sha": "a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "node_id": "C_kwDOAAsO6NoAKGE2YzFmYTUwNTY3MzE1MmE4ZDdiYTA4YmNhNGM5N2IyZDhkNGI4MmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-17T16:13:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-17T16:13:35Z"}, "message": "Rollup merge of #110386 - nnethercote:clean-up-traversal-macros, r=lcnr\n\nClean up traversal macros\n\nThe declarative macros relating to type folding and visiting can be simplified.\n\nr? ``@lcnr``", "tree": {"sha": "1982388cf13e783295c8669986ed8c3e311e6345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1982388cf13e783295c8669986ed8c3e311e6345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPXAvCRBK7hj4Ov3rIwAAkoYIAHjujen7rx8BwknlvVDHTQ4z\nWtes4E0VtaaVLc9GD4HJshMEzGMEALwnZ+BV5AaFTihodXJgTFOGHYAEuKgd6TUN\nBKUeclubZVqtNzMtY7owm0Uqp2XpQM8pKVKUWq3IlRdrgjtGFMvKRiq2He6BYv5J\nmTewRDq4w8k63DtxxPkIixCUwOejvwjxNYGqEDWEoXc2uavSpXSlQefICqu34OVa\neVFvQjrUvTtz023wSW2MZxCxWlpdQS3gV7mBX/jCIl/1GAijR8t7JPSz6uvW3mJu\ndOcbd38FhTsOw4Zk+CGrEPIhmMa1eNY1G8ol0mfcw8taBoEqq7lS4icQCBWB0fQ=\n=NTjN\n-----END PGP SIGNATURE-----\n", "payload": "tree 1982388cf13e783295c8669986ed8c3e311e6345\nparent a785328630b9e011dfcccd4ec3d6737744bfb352\nparent d2b5a64579aace20b1288f346787d0feb76e3742\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681748015 +0200\ncommitter GitHub <noreply@github.com> 1681748015 +0200\n\nRollup merge of #110386 - nnethercote:clean-up-traversal-macros, r=lcnr\n\nClean up traversal macros\n\nThe declarative macros relating to type folding and visiting can be simplified.\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "html_url": "https://github.com/rust-lang/rust/commit/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a785328630b9e011dfcccd4ec3d6737744bfb352", "url": "https://api.github.com/repos/rust-lang/rust/commits/a785328630b9e011dfcccd4ec3d6737744bfb352", "html_url": "https://github.com/rust-lang/rust/commit/a785328630b9e011dfcccd4ec3d6737744bfb352"}, {"sha": "d2b5a64579aace20b1288f346787d0feb76e3742", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b5a64579aace20b1288f346787d0feb76e3742", "html_url": "https://github.com/rust-lang/rust/commit/d2b5a64579aace20b1288f346787d0feb76e3742"}], "stats": {"total": 260, "additions": 54, "deletions": 206}, "files": [{"sha": "c4e41e00520e66332241e96bea588cbaf3044b4c", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -392,10 +392,8 @@ pub type QueryOutlivesConstraint<'tcx> =\n     (ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>, ConstraintCategory<'tcx>);\n \n TrivialTypeTraversalAndLiftImpls! {\n-    for <'tcx> {\n-        crate::infer::canonical::Certainty,\n-        crate::infer::canonical::CanonicalTyVarKind,\n-    }\n+    crate::infer::canonical::Certainty,\n+    crate::infer::canonical::CanonicalTyVarKind,\n }\n \n impl<'tcx> CanonicalVarValues<'tcx> {"}, {"sha": "cd1c6c330bc1e239ca46c5f23535e002210ca959", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -43,52 +43,44 @@ macro_rules! span_bug {\n \n #[macro_export]\n macro_rules! CloneLiftImpls {\n-    (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n+    ($($ty:ty,)+) => {\n         $(\n-            impl<$tcx> $crate::ty::Lift<$tcx> for $ty {\n+            impl<'tcx> $crate::ty::Lift<'tcx> for $ty {\n                 type Lifted = Self;\n-                fn lift_to_tcx(self, _: $crate::ty::TyCtxt<$tcx>) -> Option<Self> {\n+                fn lift_to_tcx(self, _: $crate::ty::TyCtxt<'tcx>) -> Option<Self> {\n                     Some(self)\n                 }\n             }\n         )+\n     };\n-\n-    ($($ty:ty,)+) => {\n-        CloneLiftImpls! {\n-            for <'tcx> {\n-                $($ty,)+\n-            }\n-        }\n-    };\n }\n \n /// Used for types that are `Copy` and which **do not care arena\n /// allocated data** (i.e., don't need to be folded).\n #[macro_export]\n macro_rules! TrivialTypeTraversalImpls {\n-    (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n+    ($($ty:ty,)+) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n-                fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$crate::ty::TyCtxt<$tcx>>>(\n+            impl<'tcx> $crate::ty::fold::TypeFoldable<$crate::ty::TyCtxt<'tcx>> for $ty {\n+                fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$crate::ty::TyCtxt<'tcx>>>(\n                     self,\n                     _: &mut F,\n                 ) -> ::std::result::Result<Self, F::Error> {\n                     Ok(self)\n                 }\n \n                 #[inline]\n-                fn fold_with<F: $crate::ty::fold::TypeFolder<$crate::ty::TyCtxt<$tcx>>>(\n+                fn fold_with<F: $crate::ty::fold::TypeFolder<$crate::ty::TyCtxt<'tcx>>>(\n                     self,\n                     _: &mut F,\n                 ) -> Self {\n                     self\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n+            impl<'tcx> $crate::ty::visit::TypeVisitable<$crate::ty::TyCtxt<'tcx>> for $ty {\n                 #[inline]\n-                fn visit_with<F: $crate::ty::visit::TypeVisitor<$crate::ty::TyCtxt<$tcx>>>(\n+                fn visit_with<F: $crate::ty::visit::TypeVisitor<$crate::ty::TyCtxt<'tcx>>>(\n                     &self,\n                     _: &mut F)\n                     -> ::std::ops::ControlFlow<F::BreakTy>\n@@ -98,14 +90,6 @@ macro_rules! TrivialTypeTraversalImpls {\n             }\n         )+\n     };\n-\n-    ($($ty:ty,)+) => {\n-        TrivialTypeTraversalImpls! {\n-            for<'tcx> {\n-                $($ty,)+\n-            }\n-        }\n-    };\n }\n \n #[macro_export]"}, {"sha": "f985aae9a2255ad3f1f9db5bff1f407773304e23", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -714,9 +714,7 @@ pub enum BindingForm<'tcx> {\n }\n \n TrivialTypeTraversalAndLiftImpls! {\n-    for<'tcx> {\n-        BindingForm<'tcx>,\n-    }\n+    BindingForm<'tcx>,\n }\n \n mod binding_form_impl {"}, {"sha": "ace856b9f95e021b703ba3993b0c37ccbe6a60a8", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -25,9 +25,7 @@ TrivialTypeTraversalAndLiftImpls! {\n }\n \n TrivialTypeTraversalImpls! {\n-    for <'tcx> {\n-        ConstValue<'tcx>,\n-    }\n+    ConstValue<'tcx>,\n }\n \n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {"}, {"sha": "e5356581e6e1de8b5a9192c0f2df26fb3a08c9fa", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -1329,9 +1329,12 @@ nop_list_lift! {bound_variable_kinds; ty::BoundVariableKind => ty::BoundVariable\n // This is the impl for `&'a InternalSubsts<'a>`.\n nop_list_lift! {substs; GenericArg<'a> => GenericArg<'tcx>}\n \n-CloneLiftImpls! { for<'tcx> {\n-    Constness, traits::WellFormedLoc, ImplPolarity, crate::mir::ReturnConstraint,\n-} }\n+CloneLiftImpls! {\n+    Constness,\n+    traits::WellFormedLoc,\n+    ImplPolarity,\n+    crate::mir::ReturnConstraint,\n+}\n \n macro_rules! sty_debug_print {\n     ($fmt: expr, $ctxt: expr, $($variant: ident),*) => {{"}, {"sha": "7706fdddeb833609833e663fac2cff34ce4f18ce", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -276,9 +276,7 @@ TrivialTypeTraversalAndLiftImpls! {\n }\n \n TrivialTypeTraversalAndLiftImpls! {\n-    for<'tcx> {\n-        ty::ValTree<'tcx>,\n-    }\n+    ty::ValTree<'tcx>,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "8c3cb22832299947df31222eff25ba1fe49302cd", "filename": "compiler/rustc_type_ir/src/macros.rs", "status": "modified", "additions": 0, "deletions": 141, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fmacros.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -33,144 +33,3 @@ macro_rules! TrivialTypeTraversalImpls {\n         )+\n     };\n }\n-\n-macro_rules! EnumTypeTraversalImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn try_fold_with<V: $crate::fold::FallibleTypeFolder<$tcx>>(\n-                self,\n-                folder: &mut V,\n-            ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::visit::TypeVisitable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn visit_with<V: $crate::visit::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr) input() output($($output:tt)*)) => {\n-        Ok(match $this {\n-            $($output)*\n-        })\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $variant (\n-                            $($crate::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n-                        )\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $variant {\n-                            $($variant_arg: $crate::fold::TypeFoldable::fold_with(\n-                                $variant_arg, $folder\n-                            )?),* }\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant => { $variant }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr) input() output($($output:tt)*)) => {\n-        match $this {\n-            $($output)*\n-        }\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $($crate::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $($crate::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n-                    $($output)*\n-                )\n-        )\n-    };\n-}"}, {"sha": "c90c86b7690deb6e02f98bf78ef617c44fbd705f", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=a6c1fa505673152a8d7ba08bca4c97b2d8d4b82c", "patch": "@@ -70,30 +70,40 @@ impl<I: Interner, A: TypeVisitable<I>, B: TypeVisitable<I>, C: TypeVisitable<I>>\n     }\n }\n \n-EnumTypeTraversalImpl! {\n-    impl<I, T> TypeFoldable<I> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where I: Interner, T: TypeFoldable<I>\n-}\n-EnumTypeTraversalImpl! {\n-    impl<I, T> TypeVisitable<I> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where I: Interner, T: TypeVisitable<I>\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<I, T, E> TypeFoldable<I> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where I: Interner, T: TypeFoldable<I>, E: TypeFoldable<I>,\n-}\n-EnumTypeTraversalImpl! {\n-    impl<I, T, E> TypeVisitable<I> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>,\n+impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Option<T> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(match self {\n+            Some(v) => Some(v.try_fold_with(folder)?),\n+            None => None,\n+        })\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>> TypeVisitable<I> for Option<T> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match self {\n+            Some(v) => v.visit_with(visitor),\n+            None => ControlFlow::Continue(()),\n+        }\n+    }\n+}\n+\n+impl<I: Interner, T: TypeFoldable<I>, E: TypeFoldable<I>> TypeFoldable<I> for Result<T, E> {\n+    fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(match self {\n+            Ok(v) => Ok(v.try_fold_with(folder)?),\n+            Err(e) => Err(e.try_fold_with(folder)?),\n+        })\n+    }\n+}\n+\n+impl<I: Interner, T: TypeVisitable<I>, E: TypeVisitable<I>> TypeVisitable<I> for Result<T, E> {\n+    fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n+        match self {\n+            Ok(v) => v.visit_with(visitor),\n+            Err(e) => e.visit_with(visitor),\n+        }\n+    }\n }\n \n impl<I: Interner, T: TypeFoldable<I>> TypeFoldable<I> for Rc<T> {"}]}