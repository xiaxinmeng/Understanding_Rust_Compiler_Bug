{"sha": "bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjM5MjFhMmFhZjcyYzBmN2EzZTA1MmRkMmVmMjBmMTg4MDU0YTM=", "commit": {"author": {"name": "Mike Marcacci", "email": "mike.marcacci@gmail.com", "date": "2015-08-08T06:13:08Z"}, "committer": {"name": "Mike Marcacci", "email": "mike.marcacci@gmail.com", "date": "2015-08-08T06:13:08Z"}, "message": "Added arrows to references in tables\n\nKeeping integer values and integer references in the \"value\" columns made the examples quite difficult for me to follow. I've added unicode arrows to make references more obvious, without using a character with actual meaning in the rust language (like `&` or previously `~`).", "tree": {"sha": "e15e8ce7c4a22c7f8be99ae48e89d61aa3f9f4a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15e8ce7c4a22c7f8be99ae48e89d61aa3f9f4a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3", "html_url": "https://github.com/rust-lang/rust/commit/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3/comments", "author": {"login": "mike-marcacci", "id": 690517, "node_id": "MDQ6VXNlcjY5MDUxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/690517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mike-marcacci", "html_url": "https://github.com/mike-marcacci", "followers_url": "https://api.github.com/users/mike-marcacci/followers", "following_url": "https://api.github.com/users/mike-marcacci/following{/other_user}", "gists_url": "https://api.github.com/users/mike-marcacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/mike-marcacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mike-marcacci/subscriptions", "organizations_url": "https://api.github.com/users/mike-marcacci/orgs", "repos_url": "https://api.github.com/users/mike-marcacci/repos", "events_url": "https://api.github.com/users/mike-marcacci/events{/privacy}", "received_events_url": "https://api.github.com/users/mike-marcacci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mike-marcacci", "id": 690517, "node_id": "MDQ6VXNlcjY5MDUxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/690517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mike-marcacci", "html_url": "https://github.com/mike-marcacci", "followers_url": "https://api.github.com/users/mike-marcacci/followers", "following_url": "https://api.github.com/users/mike-marcacci/following{/other_user}", "gists_url": "https://api.github.com/users/mike-marcacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/mike-marcacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mike-marcacci/subscriptions", "organizations_url": "https://api.github.com/users/mike-marcacci/orgs", "repos_url": "https://api.github.com/users/mike-marcacci/repos", "events_url": "https://api.github.com/users/mike-marcacci/events{/privacy}", "received_events_url": "https://api.github.com/users/mike-marcacci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d90d98402475b6e154ce216f9efcb80da1a747", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d90d98402475b6e154ce216f9efcb80da1a747", "html_url": "https://github.com/rust-lang/rust/commit/e5d90d98402475b6e154ce216f9efcb80da1a747"}], "stats": {"total": 266, "additions": 133, "deletions": 133}, "files": [{"sha": "e4317f9c399e8d292e945e104df491bcb19adb15", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 133, "deletions": 133, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=bcf3921a2aaf72c0f7a3e052dd2ef20f188054a3", "patch": "@@ -217,12 +217,12 @@ on the heap. The actual value of the box is a structure which has a pointer to\n it allocates some memory for the heap, and puts `5` there. The memory now looks\n like this:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-| 2<sup>30</sup>  |      | 5              |\n-| ...             | ...  | ...            |\n-| 1               | y    | 42             |\n-| 0               | x    | 2<sup>30</sup> |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+| 2<sup>30</sup>  |      | 5                |\n+| ...             | ...  | ...              |\n+| 1               | y    | 42               |\n+| 0               | x    | \u2192 2<sup>30</sup> |\n \n We have 2<sup>30</sup> in our hypothetical computer with 1GB of RAM. And since\n our stack grows from zero, the easiest place to allocate memory is from the\n@@ -242,17 +242,17 @@ freed in any order, it can end up with \u2018holes\u2019. Here\u2019s a diagram of the me\n layout of a program which has been running for a while now:\n \n \n-| Address              | Name | Value                |\n-|----------------------|------|----------------------|\n-| 2<sup>30</sup>       |      | 5                    |\n-| (2<sup>30</sup>) - 1 |      |                      |\n-| (2<sup>30</sup>) - 2 |      |                      |\n-| (2<sup>30</sup>) - 3 |      | 42                   |\n-| ...                  | ...  | ...                  |\n-| 3                    | y    | (2<sup>30</sup>) - 3 |\n-| 2                    | y    | 42                   |\n-| 1                    | y    | 42                   |\n-| 0                    | x    | 2<sup>30</sup>       |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+| 2<sup>30</sup>       |      | 5                      |\n+| (2<sup>30</sup>) - 1 |      |                        |\n+| (2<sup>30</sup>) - 2 |      |                        |\n+| (2<sup>30</sup>) - 3 |      | 42                     |\n+| ...                  | ...  | ...                    |\n+| 3                    | y    | \u2192 (2<sup>30</sup>) - 3 |\n+| 2                    | y    | 42                     |\n+| 1                    | y    | 42                     |\n+| 0                    | x    | \u2192 2<sup>30</sup>       |\n \n In this case, we\u2019ve allocated four things on the heap, but deallocated two of\n them. There\u2019s a gap between 2<sup>30</sup> and (2<sup>30</sup>) - 3 which isn\u2019t\n@@ -304,22 +304,22 @@ fn main() {\n \n When we enter `main()`, memory looks like this:\n \n-| Address | Name | Value |\n-|---------|------|-------|\n-| 1       | y    | 0     |\n-| 0       | x    | 5     |\n+| Address | Name | Value  |\n+|---------|------|--------|\n+| 1       | y    | \u2192 0    |\n+| 0       | x    | 5      |\n \n `x` is a plain old `5`, and `y` is a reference to `x`. So its value is the\n memory location that `x` lives at, which in this case is `0`.\n \n What about when we call `foo()`, passing `y` as an argument?\n \n-| Address | Name | Value |\n-|---------|------|-------|\n-| 3       | z    | 42    |\n-| 2       | i    | 0     |\n-| 1       | y    | 0     |\n-| 0       | x    | 5     |\n+| Address | Name | Value  |\n+|---------|------|--------|\n+| 3       | z    | 42     |\n+| 2       | i    | \u2192 0    |\n+| 1       | y    | \u2192 0    |\n+| 0       | x    | 5      |\n \n Stack frames aren\u2019t just for local bindings, they\u2019re for arguments too. So in\n this case, we need to have both `i`, our argument, and `z`, our local variable\n@@ -366,152 +366,152 @@ fn main() {\n \n First, we call `main()`:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-| 2<sup>30</sup>  |      | 20             |\n-| ...             | ...  | ...            |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+| 2<sup>30</sup>  |      | 20               |\n+| ...             | ...  | ...              |\n+| 2               | j    | \u2192 0              |\n+| 1               | i    | \u2192 2<sup>30</sup> |\n+| 0               | h    | 3                |\n \n We allocate memory for `j`, `i`, and `h`. `i` is on the heap, and so has a\n value pointing there.\n \n Next, at the end of `main()`, `foo()` gets called:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-| 2<sup>30</sup>  |      | 20             |\n-| ...             | ...  | ...            |\n-| 5               | z    | 4              |\n-| 4               | y    | 10             |\n-| 3               | x    | 0              |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value           |\n+|-----------------|------|-----------------|\n+| 2<sup>30</sup>  |      | 20              |\n+| ...             | ...  | ...             |\n+| 5               | z    | \u2192 4             |\n+| 4               | y    | 10              |\n+| 3               | x    | \u2192 0             |\n+| 2               | j    | \u2192 0             |\n+| 1               | i    | \u2192 2<sup>30</sup>|\n+| 0               | h    | 3               |\n \n Space gets allocated for `x`, `y`, and `z`. The argument `x` has the same value\n as `j`, since that\u2019s what we passed it in. It\u2019s a pointer to the `0` address,\n since `j` points at `h`.\n \n Next, `foo()` calls `baz()`, passing `z`:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-| 2<sup>30</sup>  |      | 20             |\n-| ...             | ...  | ...            |\n-| 7               | g    | 100            |\n-| 6               | f    | 4              |\n-| 5               | z    | 4              |\n-| 4               | y    | 10             |\n-| 3               | x    | 0              |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+| 2<sup>30</sup>  |      | 20               |\n+| ...             | ...  | ...              |\n+| 7               | g    | 100              |\n+| 6               | f    | \u2192 4              |\n+| 5               | z    | \u2192 4              |\n+| 4               | y    | 10               |\n+| 3               | x    | \u2192 0              |\n+| 2               | j    | \u2192 0              |\n+| 1               | i    | \u2192 2<sup>30</sup> |\n+| 0               | h    | 3                |\n \n We\u2019ve allocated memory for `f` and `g`. `baz()` is very short, so when it\u2019s\n over, we get rid of its stack frame:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-| 2<sup>30</sup>  |      | 20             |\n-| ...             | ...  | ...            |\n-| 5               | z    | 4              |\n-| 4               | y    | 10             |\n-| 3               | x    | 0              |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+| 2<sup>30</sup>  |      | 20               |\n+| ...             | ...  | ...              |\n+| 5               | z    | \u2192 4              |\n+| 4               | y    | 10               |\n+| 3               | x    | \u2192 0              |\n+| 2               | j    | \u2192 0              |\n+| 1               | i    | \u2192 2<sup>30</sup> |\n+| 0               | h    | 3                |\n \n Next, `foo()` calls `bar()` with `x` and `z`:\n \n-| Address              | Name | Value                |\n-|----------------------|------|----------------------|\n-|  2<sup>30</sup>      |      | 20                   |\n-| (2<sup>30</sup>) - 1 |      | 5                    |\n-| ...                  | ...  | ...                  |\n-| 10                   | e    | 9                    |\n-| 9                    | d    | (2<sup>30</sup>) - 1 |\n-| 8                    | c    | 5                    |\n-| 7                    | b    | 4                    |\n-| 6                    | a    | 0                    |\n-| 5                    | z    | 4                    |\n-| 4                    | y    | 10                   |\n-| 3                    | x    | 0                    |\n-| 2                    | j    | 0                    |\n-| 1                    | i    | 2<sup>30</sup>       |\n-| 0                    | h    | 3                    |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+|  2<sup>30</sup>      |      | 20                     |\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n+| ...                  | ...  | ...                    |\n+| 10                   | e    | \u2192 9                    |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 8                    | c    | 5                      |\n+| 7                    | b    | \u2192 4                    |\n+| 6                    | a    | \u2192 0                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 0                    | h    | 3                      |\n \n We end up allocating another value on the heap, and so we have to subtract one\n from 2<sup>30</sup>. It\u2019s easier to just write that than `1,073,741,823`. In any\n case, we set up the variables as usual.\n \n At the end of `bar()`, it calls `baz()`:\n \n-| Address              | Name | Value                |\n-|----------------------|------|----------------------|\n-|  2<sup>30</sup>      |      | 20                   |\n-| (2<sup>30</sup>) - 1 |      | 5                    |\n-| ...                  | ...  | ...                  |\n-| 12                   | g    | 100                  |\n-| 11                   | f    | 9                    |\n-| 10                   | e    | 9                    |\n-| 9                    | d    | (2<sup>30</sup>) - 1 |\n-| 8                    | c    | 5                    |\n-| 7                    | b    | 4                    |\n-| 6                    | a    | 0                    |\n-| 5                    | z    | 4                    |\n-| 4                    | y    | 10                   |\n-| 3                    | x    | 0                    |\n-| 2                    | j    | 0                    |\n-| 1                    | i    | 2<sup>30</sup>       |\n-| 0                    | h    | 3                    |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+|  2<sup>30</sup>      |      | 20                     |\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n+| ...                  | ...  | ...                    |\n+| 12                   | g    | 100                    |\n+| 11                   | f    | \u2192 9                    |\n+| 10                   | e    | \u2192 9                    |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 8                    | c    | 5                      |\n+| 7                    | b    | \u2192 4                    |\n+| 6                    | a    | \u2192 0                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 0                    | h    | 3                      |\n \n With this, we\u2019re at our deepest point! Whew! Congrats for following along this\n far.\n \n After `baz()` is over, we get rid of `f` and `g`:\n \n-| Address              | Name | Value                |\n-|----------------------|------|----------------------|\n-|  2<sup>30</sup>      |      | 20                   |\n-| (2<sup>30</sup>) - 1 |      | 5                    |\n-| ...                  | ...  | ...                  |\n-| 10                   | e    | 9                    |\n-| 9                    | d    | (2<sup>30</sup>) - 1 |\n-| 8                    | c    | 5                    |\n-| 7                    | b    | 4                    |\n-| 6                    | a    | 0                    |\n-| 5                    | z    | 4                    |\n-| 4                    | y    | 10                   |\n-| 3                    | x    | 0                    |\n-| 2                    | j    | 0                    |\n-| 1                    | i    | 2<sup>30</sup>       |\n-| 0                    | h    | 3                    |\n+| Address              | Name | Value                  |\n+|----------------------|------|------------------------|\n+|  2<sup>30</sup>      |      | 20                     |\n+| (2<sup>30</sup>) - 1 |      | 5                      |\n+| ...                  | ...  | ...                    |\n+| 10                   | e    | \u2192 9                    |\n+| 9                    | d    | \u2192 (2<sup>30</sup>) - 1 |\n+| 8                    | c    | 5                      |\n+| 7                    | b    | \u2192 4                    |\n+| 6                    | a    | \u2192 0                    |\n+| 5                    | z    | \u2192 4                    |\n+| 4                    | y    | 10                     |\n+| 3                    | x    | \u2192 0                    |\n+| 2                    | j    | \u2192 0                    |\n+| 1                    | i    | \u2192 2<sup>30</sup>       |\n+| 0                    | h    | 3                      |\n \n Next, we return from `bar()`. `d` in this case is a `Box<T>`, so it also frees\n what it points to: (2<sup>30</sup>) - 1.\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-|  2<sup>30</sup> |      | 20             |\n-| ...             | ...  | ...            |\n-| 5               | z    | 4              |\n-| 4               | y    | 10             |\n-| 3               | x    | 0              |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+|  2<sup>30</sup> |      | 20               |\n+| ...             | ...  | ...              |\n+| 5               | z    | \u2192 4              |\n+| 4               | y    | 10               |\n+| 3               | x    | \u2192 0              |\n+| 2               | j    | \u2192 0              |\n+| 1               | i    | \u2192 2<sup>30</sup> |\n+| 0               | h    | 3                |\n \n And after that, `foo()` returns:\n \n-| Address         | Name | Value          |\n-|-----------------|------|----------------|\n-|  2<sup>30</sup> |      | 20             |\n-| ...             | ...  | ...            |\n-| 2               | j    | 0              |\n-| 1               | i    | 2<sup>30</sup> |\n-| 0               | h    | 3              |\n+| Address         | Name | Value            |\n+|-----------------|------|------------------|\n+|  2<sup>30</sup> |      | 20               |\n+| ...             | ...  | ...              |\n+| 2               | j    | \u2192 0              |\n+| 1               | i    | \u2192 2<sup>30</sup> |\n+| 0               | h    | 3                |\n \n And then, finally, `main()`, which cleans the rest up. When `i` is `Drop`ped,\n it will clean up the last of the heap too."}]}