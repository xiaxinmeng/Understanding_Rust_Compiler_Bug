{"sha": "d6dcfa5744034c178ea4174342618b915112e431", "node_id": "C_kwDOAAsO6NoAKGQ2ZGNmYTU3NDQwMzRjMTc4ZWE0MTc0MzQyNjE4YjkxNTExMmU0MzE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T06:25:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T06:25:06Z"}, "message": "internal: Less file parsing for symbol index generation", "tree": {"sha": "e35d096d2dbe7c0d8336a984126bc896a7bf6409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35d096d2dbe7c0d8336a984126bc896a7bf6409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6dcfa5744034c178ea4174342618b915112e431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dcfa5744034c178ea4174342618b915112e431", "html_url": "https://github.com/rust-lang/rust/commit/d6dcfa5744034c178ea4174342618b915112e431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6dcfa5744034c178ea4174342618b915112e431/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478705baf5a64274edd8b2660d5e2be83edc780d", "url": "https://api.github.com/repos/rust-lang/rust/commits/478705baf5a64274edd8b2660d5e2be83edc780d", "html_url": "https://github.com/rust-lang/rust/commit/478705baf5a64274edd8b2660d5e2be83edc780d"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "de515b569dfa900eefc533866b46ac56d20801e4", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=d6dcfa5744034c178ea4174342618b915112e431", "patch": "@@ -764,7 +764,7 @@ impl<'attr> AttrQuery<'attr> {\n                 .nth(2);\n \n             match name {\n-                Some(tt::TokenTree::Leaf(tt::Leaf::Literal(tt::Literal{ref text, ..}))) => Some(text),\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Literal(tt::Literal{ ref text, ..}))) => Some(text),\n                 _ => None\n             }\n         })"}, {"sha": "400442de94b981b334dd0b135b545caca8eb10eb", "filename": "crates/hir-expand/src/ast_id_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fast_id_map.rs?ref=d6dcfa5744034c178ea4174342618b915112e431", "patch": "@@ -124,6 +124,10 @@ impl AstIdMap {\n         FileAstId { raw, _ty: PhantomData }\n     }\n \n+    pub fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n+        AstPtr::try_from_raw(self.arena[id.raw].clone()).unwrap()\n+    }\n+\n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n         let hash = hash_ptr(&ptr);\n@@ -137,10 +141,6 @@ impl AstIdMap {\n         }\n     }\n \n-    pub fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n-        AstPtr::try_from_raw(self.arena[id.raw].clone()).unwrap()\n-    }\n-\n     fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {\n         self.arena.alloc(SyntaxNodePtr::new(item))\n     }"}, {"sha": "c8373778d32b0766d07962a452a9e7537f8d12a0", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=d6dcfa5744034c178ea4174342618b915112e431", "patch": "@@ -978,6 +978,7 @@ fn ascend_node_border_tokens(\n     let first_token = |node: &SyntaxNode| skip_trivia_token(node.first_token()?, Direction::Next);\n     let last_token = |node: &SyntaxNode| skip_trivia_token(node.last_token()?, Direction::Prev);\n \n+    // FIXME: Once the token map rewrite is done, this shouldnt need to rely on syntax nodes and tokens anymore\n     let first = first_token(node)?;\n     let last = last_token(node)?;\n     let first = ascend_call_token(db, &expansion, InFile::new(file_id, first))?;"}, {"sha": "4eaf99e3e73fadb398d1bfad202baf852e15d780", "filename": "crates/hir/src/symbols.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcfa5744034c178ea4174342618b915112e431/crates%2Fhir%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsymbols.rs?ref=d6dcfa5744034c178ea4174342618b915112e431", "patch": "@@ -39,11 +39,19 @@ impl DeclarationLocation {\n     }\n \n     pub fn original_range(&self, db: &dyn HirDatabase) -> FileRange {\n+        if let Some(file_id) = self.hir_file_id.file_id() {\n+            // fast path to prevent parsing\n+            return FileRange { file_id, range: self.ptr.text_range() };\n+        }\n         let node = resolve_node(db, self.hir_file_id, &self.ptr);\n         node.as_ref().original_file_range(db.upcast())\n     }\n \n     pub fn original_name_range(&self, db: &dyn HirDatabase) -> Option<FileRange> {\n+        if let Some(file_id) = self.hir_file_id.file_id() {\n+            // fast path to prevent parsing\n+            return Some(FileRange { file_id, range: self.ptr.text_range() });\n+        }\n         let node = resolve_node(db, self.hir_file_id, &self.name_ptr);\n         node.as_ref().original_file_range_opt(db.upcast())\n     }"}, {"sha": "74e79e8e6050aad96b110aad8978e5dd663294d2", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d6dcfa5744034c178ea4174342618b915112e431/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dcfa5744034c178ea4174342618b915112e431/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=d6dcfa5744034c178ea4174342618b915112e431", "patch": "@@ -81,39 +81,14 @@ impl GlobalState {\n         match additional_info {\n             Some(additional_info) => {\n                 tracing::error!(\"{}:\\n{}\", &message, &additional_info);\n-                match self.config.open_server_logs() && tracing::enabled!(tracing::Level::ERROR) {\n-                    true => self.send_request::<lsp_types::request::ShowMessageRequest>(\n-                        lsp_types::ShowMessageRequestParams {\n-                            typ: lsp_types::MessageType::ERROR,\n-                            message,\n-                            actions: Some(vec![lsp_types::MessageActionItem {\n-                                title: \"Open server logs\".to_owned(),\n-                                properties: Default::default(),\n-                            }]),\n-                        },\n-                        |this, resp| {\n-                            let lsp_server::Response { error: None, result: Some(result), .. } = resp\n-                            else { return };\n-                            if let Ok(Some(_item)) = crate::from_json::<\n-                                <lsp_types::request::ShowMessageRequest as lsp_types::request::Request>::Result,\n-                            >(\n-                                lsp_types::request::ShowMessageRequest::METHOD, &result\n-                            ) {\n-                                this.send_notification::<lsp_ext::OpenServerLogs>(());\n-                            }\n-                        },\n-                    ),\n-                    false => self.send_notification::<lsp_types::notification::ShowMessage>(\n-                        lsp_types::ShowMessageParams {\n-                            typ: lsp_types::MessageType::ERROR,\n-                            message,\n-                        },\n-                    ),\n-                }\n+                self.show_message(\n+                    lsp_types::MessageType::ERROR,\n+                    message,\n+                    tracing::enabled!(tracing::Level::ERROR),\n+                );\n             }\n             None => {\n                 tracing::error!(\"{}\", &message);\n-\n                 self.send_notification::<lsp_types::notification::ShowMessage>(\n                     lsp_types::ShowMessageParams { typ: lsp_types::MessageType::ERROR, message },\n                 );"}]}