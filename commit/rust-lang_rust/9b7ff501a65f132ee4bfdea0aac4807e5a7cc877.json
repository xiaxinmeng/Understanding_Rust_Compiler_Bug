{"sha": "9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliN2ZmNTAxYTY1ZjEzMmVlNGJmZGVhMGFhYzQ4MDdlNWE3Y2M4Nzc=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-03-18T11:43:10Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-03-18T11:54:10Z"}, "message": "Replace most of ty:Ty with Ty", "tree": {"sha": "f136deb4f035cdae7ba4097726ac2b9eed92600f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f136deb4f035cdae7ba4097726ac2b9eed92600f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "html_url": "https://github.com/rust-lang/rust/commit/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4832a853c782000799bf6b1986c18f1455fb11ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4832a853c782000799bf6b1986c18f1455fb11ce", "html_url": "https://github.com/rust-lang/rust/commit/4832a853c782000799bf6b1986c18f1455fb11ce"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "61bfc78b3de8e6f63b55e46f3ce4d24c6c7c6f25", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -117,7 +117,7 @@ impl Hash for Constant {\n }\n \n impl Constant {\n-    pub fn partial_cmp(tcx: TyCtxt<'_, '_, '_>, cmp_type: ty::Ty<'_>, left: &Self, right: &Self) -> Option<Ordering> {\n+    pub fn partial_cmp(tcx: TyCtxt<'_, '_, '_>, cmp_type: Ty<'_>, left: &Self, right: &Self) -> Option<Ordering> {\n         match (left, right) {\n             (&Constant::Str(ref ls), &Constant::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Constant::Char(ref l), &Constant::Char(ref r)) => Some(l.cmp(r)),\n@@ -268,7 +268,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     }\n \n     #[allow(clippy::cast_possible_wrap)]\n-    fn constant_not(&self, o: &Constant, ty: ty::Ty<'_>) -> Option<Constant> {\n+    fn constant_not(&self, o: &Constant, ty: Ty<'_>) -> Option<Constant> {\n         use self::Constant::*;\n         match *o {\n             Bool(b) => Some(Bool(!b)),\n@@ -284,7 +284,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n-    fn constant_negate(&self, o: &Constant, ty: ty::Ty<'_>) -> Option<Constant> {\n+    fn constant_negate(&self, o: &Constant, ty: Ty<'_>) -> Option<Constant> {\n         use self::Constant::*;\n         match *o {\n             Int(value) => {"}, {"sha": "e0fa9e5e929bf0d7c31ed97f00e09f2ef5d30344", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -1,7 +1,7 @@\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n \n@@ -147,7 +147,7 @@ fn get_ufcs_type_name(\n     })\n }\n \n-fn match_borrow_depth(lhs: ty::Ty<'_>, rhs: ty::Ty<'_>) -> bool {\n+fn match_borrow_depth(lhs: Ty<'_>, rhs: Ty<'_>) -> bool {\n     match (&lhs.sty, &rhs.sty) {\n         (ty::Ref(_, t1, _), ty::Ref(_, t2, _)) => match_borrow_depth(&t1, &t2),\n         (l, r) => match (l, r) {\n@@ -157,7 +157,7 @@ fn match_borrow_depth(lhs: ty::Ty<'_>, rhs: ty::Ty<'_>) -> bool {\n     }\n }\n \n-fn match_types(lhs: ty::Ty<'_>, rhs: ty::Ty<'_>) -> bool {\n+fn match_types(lhs: Ty<'_>, rhs: Ty<'_>) -> bool {\n     match (&lhs.sty, &rhs.sty) {\n         (ty::Bool, ty::Bool)\n         | (ty::Char, ty::Char)\n@@ -172,7 +172,7 @@ fn match_types(lhs: ty::Ty<'_>, rhs: ty::Ty<'_>) -> bool {\n     }\n }\n \n-fn get_type_name(cx: &LateContext<'_, '_>, ty: ty::Ty<'_>) -> String {\n+fn get_type_name(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> String {\n     match ty.sty {\n         ty::Adt(t, _) => cx.tcx.def_path_str(t.did),\n         ty::Ref(_, r, _) => get_type_name(cx, &r),"}, {"sha": "bed5964fb32f11171c30afb4a92e14d3162999d9", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::{declare_tool_lint, lint_array};\n use syntax_pos::Span;\n \n@@ -132,7 +132,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n     }\n }\n \n-fn match_type<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, ty: ty::Ty<'_>, path: &[&str]) -> bool {\n+fn match_type<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.sty {\n         ty::Adt(adt, _) => match_def_path(tcx, adt.did, path),\n         _ => false,"}, {"sha": "22c336b8c47829e90121691655aaa017a43fe634", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -3,7 +3,7 @@ use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, sni\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n@@ -87,7 +87,7 @@ impl LintPass for Pass {\n     }\n }\n \n-fn is_unit_type(ty: ty::Ty<'_>) -> bool {\n+fn is_unit_type(ty: Ty<'_>) -> bool {\n     match ty.sty {\n         ty::Tuple(slice) => slice.is_empty(),\n         ty::Never => true,"}, {"sha": "3e7403a3fe28491ef62b67779c7f4258e0dcd65b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -2196,7 +2196,7 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n \n fn ty_has_iter_method(\n     cx: &LateContext<'_, '_>,\n-    self_ref_ty: ty::Ty<'_>,\n+    self_ref_ty: Ty<'_>,\n ) -> Option<(&'static Lint, &'static str, &'static str)> {\n     if let Some(ty_name) = has_iter_method(cx, self_ref_ty) {\n         let lint = match ty_name {\n@@ -2217,7 +2217,7 @@ fn ty_has_iter_method(\n     }\n }\n \n-fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: ty::Ty<'_>, method_span: Span) {\n+fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: Ty<'_>, method_span: Span) {\n     if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n         return;\n     }"}, {"sha": "8b7b6b6c42c639a21c274ea200bf596604d3e81a", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n use rustc::ty::adjustment::Adjust;\n-use rustc::ty::{self, TypeFlags};\n+use rustc::ty::{Ty, TypeFlags};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n@@ -108,7 +108,7 @@ impl Source {\n     }\n }\n \n-fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, source: Source) {\n+fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: Source) {\n     if ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP) || is_copy(cx, ty) {\n         // An `UnsafeCell` is `!Copy`, and an `UnsafeCell` is also the only type which\n         // is `!Freeze`, thus if our type is `Copy` we can be sure it must be `Freeze`"}, {"sha": "086c76c20b6340e456f1a59a9e9b7a890b33fe9a", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     visit::{MutatingUseContext, PlaceContext, Visitor},\n     TerminatorKind,\n };\n-use rustc::ty;\n+use rustc::ty::{self, Ty};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n use std::convert::TryFrom;\n@@ -225,7 +225,7 @@ fn is_call_with_ref_arg<'tcx>(\n     cx: &LateContext<'_, 'tcx>,\n     mir: &'tcx mir::Mir<'tcx>,\n     kind: &'tcx mir::TerminatorKind<'tcx>,\n-) -> Option<(def_id::DefId, mir::Local, ty::Ty<'tcx>, Option<&'tcx mir::Place<'tcx>>)> {\n+) -> Option<(def_id::DefId, mir::Local, Ty<'tcx>, Option<&'tcx mir::Place<'tcx>>)> {\n     if_chain! {\n         if let TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;"}, {"sha": "7ffe226f5fc5e2bbac65ff33daa3f8a0fdbab1f5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7ff501a65f132ee4bfdea0aac4807e5a7cc877/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9b7ff501a65f132ee4bfdea0aac4807e5a7cc877", "patch": "@@ -1080,7 +1080,7 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_, '_, '_>, node: HirId)\n }\n \n /// Returns true if ty has `iter` or `iter_mut` methods\n-pub fn has_iter_method(cx: &LateContext<'_, '_>, probably_ref_ty: ty::Ty<'_>) -> Option<&'static str> {\n+pub fn has_iter_method(cx: &LateContext<'_, '_>, probably_ref_ty: Ty<'_>) -> Option<&'static str> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n     // exists and has the desired signature. Unfortunately FnCtxt is not exported\n     // so we can't use its `lookup_method` method."}]}