{"sha": "2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTkxODc3NWNiYThkMGIxMTY2ZjdhMTRhOGUxMTRjMmZkNzNmMGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:17:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-16T17:17:35Z"}, "message": "Refactor position parsing", "tree": {"sha": "52ba49bbe54a98b40223ed212dc7f40f44296771", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ba49bbe54a98b40223ed212dc7f40f44296771"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "html_url": "https://github.com/rust-lang/rust/commit/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98cc51580d0b8a6662f0155d8a45a8cfff469d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/98cc51580d0b8a6662f0155d8a45a8cfff469d72", "html_url": "https://github.com/rust-lang/rust/commit/98cc51580d0b8a6662f0155d8a45a8cfff469d72"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "1882a93420006cf7d3aaa1145408bf4b47be2e87", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "patch": "@@ -2,6 +2,7 @@\n \n use std::{\n     path::{Path, PathBuf},\n+    str::FromStr,\n     sync::Arc,\n     time::Instant,\n };\n@@ -14,9 +15,29 @@ use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n use crate::Result;\n \n+pub(crate) struct Position {\n+    path: PathBuf,\n+    line: u32,\n+    column: u32,\n+}\n+\n+impl FromStr for Position {\n+    type Err = Box<dyn std::error::Error + Send + Sync>;\n+    fn from_str(s: &str) -> Result<Self> {\n+        let (path_line, column) = rsplit_at_char(s, ':')?;\n+        let (path, line) = rsplit_at_char(path_line, ':')?;\n+        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+    }\n+}\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n+}\n+\n pub(crate) enum Op {\n     Highlight { path: PathBuf },\n-    Complete { path: PathBuf, line: u32, column: u32 },\n+    Complete(Position),\n }\n \n pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n@@ -31,7 +52,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n     let file_id = {\n         let path = match &op {\n             Op::Highlight { path } => path,\n-            Op::Complete { path, .. } => path,\n+            Op::Complete(pos) => &pos.path,\n         };\n         let path = std::env::current_dir()?.join(path).canonicalize()?;\n         roots\n@@ -61,11 +82,11 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n                 println!(\"\\n{}\", res);\n             }\n         }\n-        Op::Complete { line, column, .. } => {\n+        Op::Complete(pos) => {\n             let offset = host\n                 .analysis()\n                 .file_line_index(file_id)?\n-                .offset(LineCol { line, col_utf16: column });\n+                .offset(LineCol { line: pos.line, col_utf16: pos.column });\n             let file_postion = FilePosition { file_id, offset };\n \n             let res = do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));"}, {"sha": "749317475ff04f32642895cf6ea2e29357b0cac4", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba918775cba8d0b1166f7a14a8e114c2fd73f0d/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=2ba918775cba8d0b1166f7a14a8e114c2fd73f0d", "patch": "@@ -133,22 +133,15 @@ fn main() -> Result<()> {\n             let verbose = matches.contains([\"-v\", \"--verbose\"]);\n             let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n             let highlight_path = matches.opt_value_from_str(\"--highlight\")?;\n-            let complete_path = matches.opt_value_from_str(\"--complete\")?;\n+            let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n             if highlight_path.is_some() && complete_path.is_some() {\n                 panic!(\"either --highlight or --complete must be set, not both\")\n             }\n             let op = if let Some(path) = highlight_path {\n                 let path: String = path;\n                 analysis_bench::Op::Highlight { path: path.into() }\n-            } else if let Some(path_line_col) = complete_path {\n-                let path_line_col: String = path_line_col;\n-                let (path_line, column) = rsplit_at_char(path_line_col.as_str(), ':')?;\n-                let (path, line) = rsplit_at_char(path_line, ':')?;\n-                analysis_bench::Op::Complete {\n-                    path: path.into(),\n-                    line: line.parse()?,\n-                    column: column.parse()?,\n-                }\n+            } else if let Some(position) = complete_path {\n+                analysis_bench::Op::Complete(position.parse()?)\n             } else {\n                 panic!(\"either --highlight or --complete must be set\")\n             };\n@@ -183,8 +176,3 @@ fn read_stdin() -> Result<String> {\n     std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n-\n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}"}]}