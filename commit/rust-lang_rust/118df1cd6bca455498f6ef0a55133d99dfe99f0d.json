{"sha": "118df1cd6bca455498f6ef0a55133d99dfe99f0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExOGRmMWNkNmJjYTQ1NTQ5OGY2ZWYwYTU1MTMzZDk5ZGZlOTlmMGQ=", "commit": {"author": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2021-08-22T07:54:03Z"}, "committer": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2021-08-26T13:48:33Z"}, "message": "Adjust linking order of static nobundle libraries\n\nLink the static libraries with \"-bundle\" modifier from upstream rust crate\nright after linking this rust crate. Some linker such as GNU linker\n`ld.bdf` treat order of linking as order of dependency. After this change,\nstatic libraries with \"-bundle\" modifier is linked in the same order as\n\"+bundle\" modifier. So we can change the value of \"bundle\" modifier without\ncausing linking error.", "tree": {"sha": "8bd13ca2a4088f07d8d0361bdf8ab37f3e5be197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd13ca2a4088f07d8d0361bdf8ab37f3e5be197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/118df1cd6bca455498f6ef0a55133d99dfe99f0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERq7VLWSlisBf3CZ8l3hfrfOKl9wFAmEnm7QACgkQl3hfrfOK\nl9xlPw/+NBSFXPEqaYGwNtPMFY62SHclHBmji8OD+T+aAE5X0CsQtqOgzNS3X4Fo\n/iEY49HHDlpOg0sDfWVLAQETv8KMc6lzQrfigu5ppjh2o+kPYm8oXdF2In+j7XH+\no5MrdMpenfKJgHicrmh3ezX2l2orhndhQX+QU6x9pqoDM9uWk7ynKFA31BODo8ky\no+CVZECiITGmFsJoBWgCc6vVy8YEOvNYm/DuqiB6lse7NrTPocHciF0jocQpaUOP\nuoPetbLLbKwWKWjh9JKV9eL9QKEA0oIpc6fnxZ1Cxg4KL3QYHd2Lvn/IqsIRS1jv\nfeMD4xE+Gp4JK2n9zposT0F7u43Z+jwDMh+3Mkt5MPYnsTbtY7n2YH1uDhu94d4N\ntqJPGe9Y52sq1di7HB0wM5XQC+8/7ieHyFwgJZJOheaBuhvhVXup7/qys67kfDUV\nOfhobKMyUjCSYGR7x20TEjZBHNRKGx82ymV7UtKSe+v3ID1hxYut+nPmiuxJnloK\nWjLjcQDOwk0pjFNZ00tuBHZSLOgzi/h1UtrWf0cHVqvY5XfIkWYQD4ClM9ph4bSq\nNoz0Ks9gpnBsg+m2fc/2FgwdSjW2Xf6TfSoPrQ68gUJeXvRmLSGQLwEoSO7pjQvm\nZ0/HhTm821JH0T2Prowj3XTZnEAaCf+5dqktJ8l6DjgJA0JIxW0=\n=ATlQ\n-----END PGP SIGNATURE-----", "payload": "tree 8bd13ca2a4088f07d8d0361bdf8ab37f3e5be197\nparent 50731df24e584e8ebc0097497169b431c005bf86\nauthor 12101111 <w12101111@gmail.com> 1629618843 +0800\ncommitter 12101111 <w12101111@gmail.com> 1629985713 +0800\n\nAdjust linking order of static nobundle libraries\n\nLink the static libraries with \"-bundle\" modifier from upstream rust crate\nright after linking this rust crate. Some linker such as GNU linker\n`ld.bdf` treat order of linking as order of dependency. After this change,\nstatic libraries with \"-bundle\" modifier is linked in the same order as\n\"+bundle\" modifier. So we can change the value of \"bundle\" modifier without\ncausing linking error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/118df1cd6bca455498f6ef0a55133d99dfe99f0d", "html_url": "https://github.com/rust-lang/rust/commit/118df1cd6bca455498f6ef0a55133d99dfe99f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/118df1cd6bca455498f6ef0a55133d99dfe99f0d/comments", "author": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50731df24e584e8ebc0097497169b431c005bf86", "url": "https://api.github.com/repos/rust-lang/rust/commits/50731df24e584e8ebc0097497169b431c005bf86", "html_url": "https://github.com/rust-lang/rust/commit/50731df24e584e8ebc0097497169b431c005bf86"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "e51d6fff788479baca05c5ea234dc51aab4d54c2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/118df1cd6bca455498f6ef0a55133d99dfe99f0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118df1cd6bca455498f6ef0a55133d99dfe99f0d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=118df1cd6bca455498f6ef0a55133d99dfe99f0d", "patch": "@@ -1803,15 +1803,16 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         add_local_native_libraries(cmd, sess, codegen_results);\n     }\n \n-    // Rust libraries.\n+    // Upstream rust libraries and their nobundle static libraries\n     add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n \n-    // Native libraries linked with `#[link]` attributes at and `-l` command line options.\n+    // Upstream dymamic native libraries linked with `#[link]` attributes at and `-l`\n+    // command line options.\n     // If -Zlink-native-libraries=false is set, then the assumption is that an\n     // external build system already has the native dependencies defined, and it\n     // will provide them to the linker itself.\n     if sess.opts.debugging_opts.link_native_libraries {\n-        add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n+        add_upstream_native_libraries(cmd, sess, codegen_results);\n     }\n \n     // Library linking above uses some global state for things like `-Bstatic`/`-Bdynamic` to make\n@@ -2033,7 +2034,7 @@ fn add_local_native_libraries(\n     }\n }\n \n-/// # Rust Crate linking\n+/// # Linking Rust crates and their nobundle static libraries\n ///\n /// Rust crates are not considered at all when creating an rlib output. All dependencies will be\n /// linked when producing the final output (instead of the intermediate rlib version).\n@@ -2138,6 +2139,29 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n                 add_static_crate::<B>(cmd, sess, codegen_results, tmpdir, crate_type, cnum);\n+\n+                // Link static native libs with \"-bundle\" modifier only if the crate they originate from\n+                // is being linked statically to the current crate.  If it's linked dynamically\n+                // or is an rlib already included via some other dylib crate, the symbols from\n+                // native libs will have already been included in that dylib.\n+                //\n+                // If -Zlink-native-libraries=false is set, then the assumption is that an\n+                // external build system already has the native dependencies defined, and it\n+                // will provide them to the linker itself.\n+                if sess.opts.debugging_opts.link_native_libraries {\n+                    // Skip if this library is the same as the last.\n+                    let mut last = None;\n+                    for lib in &codegen_results.crate_info.native_libraries[&cnum] {\n+                        if lib.name.is_some()\n+                            && relevant_lib(sess, lib)\n+                            && matches!(lib.kind, NativeLibKind::Static { bundle: Some(false), .. })\n+                            && last != lib.name\n+                        {\n+                            cmd.link_staticlib(lib.name.unwrap(), lib.verbatim.unwrap_or(false));\n+                            last = lib.name;\n+                        }\n+                    }\n+                }\n             }\n             Linkage::Dynamic => add_dynamic_crate(cmd, sess, &src.dylib.as_ref().unwrap().0),\n         }\n@@ -2310,27 +2334,9 @@ fn add_upstream_native_libraries(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     codegen_results: &CodegenResults,\n-    crate_type: CrateType,\n ) {\n-    // Be sure to use a topological sorting of crates because there may be\n-    // interdependencies between native libraries. When passing -nodefaultlibs,\n-    // for example, almost all native libraries depend on libc, so we have to\n-    // make sure that's all the way at the right (liblibc is near the base of\n-    // the dependency chain).\n-    //\n-    // This passes RequireStatic, but the actual requirement doesn't matter,\n-    // we're just getting an ordering of crate numbers, we're not worried about\n-    // the paths.\n-    let (_, data) = codegen_results\n-        .crate_info\n-        .dependency_formats\n-        .iter()\n-        .find(|(ty, _)| *ty == crate_type)\n-        .expect(\"failed to find crate type in dependency format list\");\n-\n-    let crates = &codegen_results.crate_info.used_crates;\n     let mut last = (NativeLibKind::Unspecified, None);\n-    for &cnum in crates {\n+    for &cnum in &codegen_results.crate_info.used_crates {\n         for lib in codegen_results.crate_info.native_libraries[&cnum].iter() {\n             let name = match lib.name {\n                 Some(l) => l,\n@@ -2352,19 +2358,10 @@ fn add_upstream_native_libraries(\n                 NativeLibKind::Framework { as_needed } => {\n                     cmd.link_framework(name, as_needed.unwrap_or(true))\n                 }\n-                NativeLibKind::Static { bundle: Some(false), .. } => {\n-                    // Link \"static-nobundle\" native libs only if the crate they originate from\n-                    // is being linked statically to the current crate.  If it's linked dynamically\n-                    // or is an rlib already included via some other dylib crate, the symbols from\n-                    // native libs will have already been included in that dylib.\n-                    if data[cnum.as_usize() - 1] == Linkage::Static {\n-                        cmd.link_staticlib(name, verbatim)\n-                    }\n-                }\n-                // ignore statically included native libraries here as we've\n-                // already included them when we included the rust library\n-                // previously\n-                NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n+                // ignore static native libraries here as we've\n+                // already included them in add_local_native_libraries and\n+                // add_upstream_rust_crates\n+                NativeLibKind::Static { .. } => {}\n                 NativeLibKind::RawDylib => {}\n             }\n         }"}]}