{"sha": "b9af043879a8b11f4fd5dc563291b66d7eabdd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YWYwNDM4NzlhOGIxMWY0ZmQ1ZGM1NjMyOTFiNjZkN2VhYmRkNjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-01T00:22:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-01T00:22:36Z"}, "message": "Address nits from @pnkfelix", "tree": {"sha": "3860c87eda0ffc9538d50fce3a6fba7dadc9eac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3860c87eda0ffc9538d50fce3a6fba7dadc9eac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9af043879a8b11f4fd5dc563291b66d7eabdd64", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9af043879a8b11f4fd5dc563291b66d7eabdd64", "html_url": "https://github.com/rust-lang/rust/commit/b9af043879a8b11f4fd5dc563291b66d7eabdd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9af043879a8b11f4fd5dc563291b66d7eabdd64/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b80ff901cc1e61bdf16e6e103c5d7eb3524d2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b80ff901cc1e61bdf16e6e103c5d7eb3524d2da", "html_url": "https://github.com/rust-lang/rust/commit/4b80ff901cc1e61bdf16e6e103c5d7eb3524d2da"}], "stats": {"total": 83, "additions": 41, "deletions": 42}, "files": [{"sha": "36daa776036429a0662b20584b4999995adc9154", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b9af043879a8b11f4fd5dc563291b66d7eabdd64/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9af043879a8b11f4fd5dc563291b66d7eabdd64/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=b9af043879a8b11f4fd5dc563291b66d7eabdd64", "patch": "@@ -26,32 +26,9 @@ use util::ppaux::Repr;\n \n ///////////////////////////////////////////////////////////////////////////\n // The Delegate trait\n-//\n-// This trait defines the callbacks you can expect to receiver when\n-// employing the ExprUseVisitor.\n-\n-#[deriving(Eq)]\n-pub enum LoanCause {\n-    ClosureCapture(Span),\n-    AddrOf,\n-    AutoRef,\n-    RefBinding,\n-    OverloadedOperator,\n-    ClosureInvocation\n-}\n-\n-#[deriving(Eq,Show)]\n-pub enum ConsumeMode {\n-    Copy,    // reference to x where x has a type that copies\n-    Move,    // reference to x where x has a type that moves\n-}\n-\n-#[deriving(Eq,Show)]\n-pub enum MutateMode {\n-    JustWrite,    // x = y\n-    WriteAndRead, // x += y\n-}\n \n+/// This trait defines the callbacks you can expect to receive when\n+/// employing the ExprUseVisitor.\n pub trait Delegate {\n     // The value found at `cmt` is either copied or moved, depending\n     // on mode.\n@@ -91,6 +68,28 @@ pub trait Delegate {\n               mode: MutateMode);\n }\n \n+#[deriving(Eq)]\n+pub enum LoanCause {\n+    ClosureCapture(Span),\n+    AddrOf,\n+    AutoRef,\n+    RefBinding,\n+    OverloadedOperator,\n+    ClosureInvocation\n+}\n+\n+#[deriving(Eq,Show)]\n+pub enum ConsumeMode {\n+    Copy,    // reference to x where x has a type that copies\n+    Move,    // reference to x where x has a type that moves\n+}\n+\n+#[deriving(Eq,Show)]\n+pub enum MutateMode {\n+    JustWrite,    // x = y\n+    WriteAndRead, // x += y\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // The ExprUseVisitor type\n //\n@@ -112,7 +111,7 @@ pub struct ExprUseVisitor<'d,'t,TYPER> {\n //\n // Note that this macro appears similar to try!(), but, unlike try!(),\n // it does not propagate the error.\n-macro_rules! ignore_err(\n+macro_rules! return_if_err(\n     ($inp: expr) => (\n         match $inp {\n             Ok(v) => v,\n@@ -174,7 +173,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n     fn consume_expr(&mut self, expr: &ast::Expr) {\n         debug!(\"consume_expr(expr={})\", expr.repr(self.tcx()));\n \n-        let cmt = ignore_err!(self.mc.cat_expr(expr));\n+        let cmt = return_if_err!(self.mc.cat_expr(expr));\n         self.delegate_consume(expr.id, expr.span, cmt);\n \n         match expr.node {\n@@ -200,7 +199,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                    assignment_expr: &ast::Expr,\n                    expr: &ast::Expr,\n                    mode: MutateMode) {\n-        let cmt = ignore_err!(self.mc.cat_expr(expr));\n+        let cmt = return_if_err!(self.mc.cat_expr(expr));\n         self.delegate.mutate(assignment_expr.id, assignment_expr.span, cmt, mode);\n         self.walk_expr(expr);\n     }\n@@ -213,7 +212,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n         debug!(\"borrow_expr(expr={}, r={}, bk={})\",\n                expr.repr(self.tcx()), r.repr(self.tcx()), bk.repr(self.tcx()));\n \n-        let cmt = ignore_err!(self.mc.cat_expr(expr));\n+        let cmt = return_if_err!(self.mc.cat_expr(expr));\n         self.delegate.borrow(expr.id, expr.span, cmt, r, bk, cause);\n \n         // Note: Unlike consume, we can ignore ExprParen. cat_expr\n@@ -284,7 +283,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                 // treatment of the discriminant is handled while\n                 // walking the arms:\n                 self.walk_expr(discr);\n-                let discr_cmt = ignore_err!(self.mc.cat_expr(discr));\n+                let discr_cmt = return_if_err!(self.mc.cat_expr(discr));\n                 for arm in arms.iter() {\n                     self.walk_arm(discr_cmt.clone(), arm);\n                 }\n@@ -471,7 +470,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                 // \"assigns\", which is handled by\n                 // `walk_pat`:\n                 self.walk_expr(expr);\n-                let init_cmt = ignore_err!(self.mc.cat_expr(expr));\n+                let init_cmt = return_if_err!(self.mc.cat_expr(expr));\n                 self.walk_pat(init_cmt, local.pat);\n             }\n         }\n@@ -508,7 +507,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n             None => { return; }\n         };\n \n-        let with_cmt = ignore_err!(self.mc.cat_expr(with_expr));\n+        let with_cmt = return_if_err!(self.mc.cat_expr(with_expr));\n \n         // Select just those fields of the `with`\n         // expression that will actually be used\n@@ -558,7 +557,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                         // input and stores it into the resulting rvalue.\n                         debug!(\"walk_adjustment(AutoAddEnv|AutoObject)\");\n                         let cmt_unadjusted =\n-                            ignore_err!(self.mc.cat_expr_unadjusted(expr));\n+                            return_if_err!(self.mc.cat_expr_unadjusted(expr));\n                         self.delegate_consume(expr.id, expr.span, cmt_unadjusted);\n                     }\n                     ty::AutoDerefRef(ty::AutoDerefRef {\n@@ -596,7 +595,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n             match self.typer.node_method_ty(deref_id) {\n                 None => {}\n                 Some(method_ty) => {\n-                    let cmt = ignore_err!(self.mc.cat_expr_autoderefd(expr, i));\n+                    let cmt = return_if_err!(self.mc.cat_expr_autoderefd(expr, i));\n                     let self_ty = *ty::ty_fn_args(method_ty).get(0);\n                     let (m, r) = match ty::get(self_ty).sty {\n                         ty::ty_rptr(r, ref m) => (m.mutbl, r),\n@@ -618,7 +617,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                     autoderefs: uint) {\n         debug!(\"walk_autoref expr={} autoderefs={}\", expr.repr(self.tcx()), autoderefs);\n \n-        let cmt_derefd = ignore_err!(\n+        let cmt_derefd = return_if_err!(\n             self.mc.cat_expr_autoderefd(expr, autoderefs));\n \n         debug!(\"walk_autoref: cmt_derefd={}\", cmt_derefd.repr(self.tcx()));\n@@ -699,7 +698,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n         let tcx = typer.tcx();\n         let def_map = &self.typer.tcx().def_map;\n         let delegate = &mut self.delegate;\n-        ignore_err!(mc.cat_pattern(cmt_discr, pat, |mc, cmt_pat, pat| {\n+        return_if_err!(mc.cat_pattern(cmt_discr, pat, |mc, cmt_pat, pat| {\n             if pat_util::pat_is_binding(def_map, pat) {\n                 let tcx = typer.tcx();\n \n@@ -810,9 +809,9 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                             freevars: &[freevars::freevar_entry]) {\n         for freevar in freevars.iter() {\n             let id_var = ast_util::def_id_of_def(freevar.def).node;\n-            let cmt_var = ignore_err!(self.cat_captured_var(closure_expr.id,\n-                                                            closure_expr.span,\n-                                                            freevar.def));\n+            let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n+                                                               closure_expr.span,\n+                                                               freevar.def));\n \n             // Lookup the kind of borrow the callee requires, as\n             // inferred by regionbk\n@@ -834,9 +833,9 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                               closure_expr: &ast::Expr,\n                               freevars: &[freevars::freevar_entry]) {\n         for freevar in freevars.iter() {\n-            let cmt_var = ignore_err!(self.cat_captured_var(closure_expr.id,\n-                                                            closure_expr.span,\n-                                                            freevar.def));\n+            let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n+                                                               closure_expr.span,\n+                                                               freevar.def));\n             self.delegate_consume(closure_expr.id, freevar.span, cmt_var);\n         }\n     }"}]}