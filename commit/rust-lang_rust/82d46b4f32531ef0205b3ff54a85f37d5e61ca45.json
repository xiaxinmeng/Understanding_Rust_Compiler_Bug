{"sha": "82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZDQ2YjRmMzI1MzFlZjAyMDViM2ZmNTRhODVmMzdkNWU2MWNhNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T11:34:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T11:34:49Z"}, "message": "Auto merge of #1296 - RalfJung:rustup, r=RalfJung\n\nrustup for AllocRef changes\n\nCc https://github.com/rust-lang/rust/pull/70362", "tree": {"sha": "ad0b5a2c1c2e64cfb0cf3faf7cdd953966135aee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad0b5a2c1c2e64cfb0cf3faf7cdd953966135aee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "html_url": "https://github.com/rust-lang/rust/commit/82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094fec3e477c07387222585b52872a1a97838031", "url": "https://api.github.com/repos/rust-lang/rust/commits/094fec3e477c07387222585b52872a1a97838031", "html_url": "https://github.com/rust-lang/rust/commit/094fec3e477c07387222585b52872a1a97838031"}, {"sha": "cd132f563ea5385c8dfed2b9c9032ea3e8dc3edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd132f563ea5385c8dfed2b9c9032ea3e8dc3edc", "html_url": "https://github.com/rust-lang/rust/commit/cd132f563ea5385c8dfed2b9c9032ea3e8dc3edc"}], "stats": {"total": 91, "additions": 31, "deletions": 60}, "files": [{"sha": "2cb1f848a684b04beec087c8a7509c043dde6cfa", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1 +1 @@\n-b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b\n+127a11a344eb59b5aea1464e98257c262dcba967"}, {"sha": "9b5ee9a934b0b26b5ce3205d7cc1aa53368518b0", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,15 +1,10 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n // error-pattern: allocation has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "39a0d48c8b1a43f241fc2854d4207a9fe1c047b4", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,15 +1,10 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n // error-pattern: allocation has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "3c5e8e96360c726b0843f78ee6bd320c6b3214cf", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,16 +1,11 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n // error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }\n }"}, {"sha": "bbdef4421b6c2771dd9bde9a9905565260e601fd", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,15 +1,10 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n // error-pattern: allocation has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n     }\n }"}, {"sha": "8130d72dee59698cd9f31fdc44e3cc33f28995a8", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,14 +1,9 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n-        let _z = *(x.as_ptr() as *mut u8); //~ ERROR dereferenced after this allocation got freed\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+        let _z = *x; //~ ERROR dereferenced after this allocation got freed\n     }\n }"}, {"sha": "702ddc0724a33af8abc898d74e2318f485e237b3", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,16 +1,11 @@\n-#![feature(allocator_api)]\n-\n-extern crate alloc;\n-\n-use alloc::alloc::Global;\n-use std::alloc::{AllocRef, Layout};\n+use std::alloc::{alloc, dealloc, realloc, Layout};\n \n // error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap().0;\n-        Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n+        let x = alloc(Layout::from_size_align_unchecked(1, 1));\n+        dealloc(x, Layout::from_size_align_unchecked(1, 1));\n+        realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n     }\n }"}, {"sha": "c2fcfea58cdf501e5535706fe8e3883c97c9db40", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d46b4f32531ef0205b3ff54a85f37d5e61ca45/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=82d46b4f32531ef0205b3ff54a85f37d5e61ca45", "patch": "@@ -1,36 +1,37 @@\n #![feature(allocator_api)]\n \n use std::ptr::NonNull;\n-use std::alloc::{Global, AllocRef, Layout, System};\n+use std::alloc::{Global, AllocRef, Layout, System, AllocInit, ReallocPlacement};\n use std::slice;\n \n fn check_alloc<T: AllocRef>(mut allocator: T) { unsafe {\n     for &align in &[4, 8, 16, 32] {\n         let layout = Layout::from_size_align(20, align).unwrap();\n \n         for _ in 0..32 {\n-            let a = allocator.alloc(layout).unwrap().0;\n+            let a = allocator.alloc(layout, AllocInit::Uninitialized).unwrap().ptr;\n             assert_eq!(a.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n             allocator.dealloc(a, layout);\n         }\n \n-        let p1 = allocator.alloc_zeroed(layout).unwrap().0;\n+        let p1 = allocator.alloc(layout, AllocInit::Zeroed).unwrap().ptr;\n         assert_eq!(p1.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n \n-        let p2 = allocator.realloc(p1, layout, 40).unwrap().0;\n+        // old size < new size\n+        let p2 = allocator.grow(p1, layout, 40, ReallocPlacement::MayMove, AllocInit::Uninitialized).unwrap().ptr;\n         let layout = Layout::from_size_align(40, align).unwrap();\n         assert_eq!(p2.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p2.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size == new size\n-        let p3 = allocator.realloc(p2, layout, 40).unwrap().0;\n+        let p3 = allocator.grow(p2, layout, 40, ReallocPlacement::MayMove, AllocInit::Uninitialized).unwrap().ptr;\n         assert_eq!(p3.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p3.as_ptr(), 20);\n         assert_eq!(&slice, &[0_u8; 20]);\n \n         // old size > new size\n-        let p4 = allocator.realloc(p3, layout, 10).unwrap().0;\n+        let p4 = allocator.shrink(p3, layout, 10, ReallocPlacement::MayMove).unwrap().ptr;\n         let layout = Layout::from_size_align(10, align).unwrap();\n         assert_eq!(p4.as_ptr() as usize % align, 0, \"pointer is incorrectly aligned\");\n         let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n@@ -46,7 +47,7 @@ fn check_align_requests<T: AllocRef>(mut allocator: T) {\n             let iterations = 32;\n             unsafe {\n                 let pointers: Vec<_> = (0..iterations).map(|_| {\n-                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap().0\n+                    allocator.alloc(Layout::from_size_align(size, align).unwrap(), AllocInit::Uninitialized).unwrap().ptr\n                 }).collect();\n                 for &ptr in &pointers {\n                     assert_eq!((ptr.as_ptr() as usize) % align, 0,\n@@ -67,7 +68,7 @@ fn global_to_box() {\n     let l = Layout::new::<T>();\n     // allocate manually with global allocator, then turn into Box and free there\n     unsafe {\n-        let ptr = Global.alloc(l).unwrap().0.as_ptr() as *mut T;\n+        let ptr = Global.alloc(l, AllocInit::Uninitialized).unwrap().ptr.as_ptr() as *mut T;\n         let b = Box::from_raw(ptr);\n         drop(b);\n     }"}]}