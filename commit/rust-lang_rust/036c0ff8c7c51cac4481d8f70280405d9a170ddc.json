{"sha": "036c0ff8c7c51cac4481d8f70280405d9a170ddc", "node_id": "C_kwDOAAsO6NoAKDAzNmMwZmY4YzdjNTFjYWM0NDgxZDhmNzAyODA0MDVkOWExNzBkZGM", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T14:27:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-09T14:27:38Z"}, "message": "move some tests", "tree": {"sha": "ba860ce7c8b7d6b93ce805ac4a2251770e9e4920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba860ce7c8b7d6b93ce805ac4a2251770e9e4920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036c0ff8c7c51cac4481d8f70280405d9a170ddc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036c0ff8c7c51cac4481d8f70280405d9a170ddc", "html_url": "https://github.com/rust-lang/rust/commit/036c0ff8c7c51cac4481d8f70280405d9a170ddc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036c0ff8c7c51cac4481d8f70280405d9a170ddc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb1b6a273f6b317482541afbccb9c130c2e44313", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1b6a273f6b317482541afbccb9c130c2e44313", "html_url": "https://github.com/rust-lang/rust/commit/cb1b6a273f6b317482541afbccb9c130c2e44313"}], "stats": {"total": 109, "additions": 66, "deletions": 43}, "files": [{"sha": "d4520939b61decea8f1d8900904d512d25621244", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=036c0ff8c7c51cac4481d8f70280405d9a170ddc", "patch": "@@ -102,9 +102,11 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n         let curr_kind = token.kind();\n         let space = match (prev_kind, curr_kind) {\n             _ if prev_kind.is_trivia() || curr_kind.is_trivia() => \"\",\n+            (T!['{'], T!['}']) => \"\",\n             (T![=], _) | (_, T![=]) => \" \",\n             (_, T!['{']) => \" \",\n-            (T![;] | T!['}'], _) => \"\\n\",\n+            (T![;] | T!['{'] | T!['}'], _) => \"\\n\",\n+            (_, T!['}']) => \"\\n\",\n             (IDENT | LIFETIME_IDENT, IDENT | LIFETIME_IDENT) => \" \",\n             (IDENT, _) if curr_kind.is_keyword() => \" \",\n             (_, IDENT) if prev_kind.is_keyword() => \" \","}, {"sha": "8851028845fc34b62c22b6c4742cda20875befc5", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=036c0ff8c7c51cac4481d8f70280405d9a170ddc", "patch": "@@ -159,3 +159,66 @@ struct Bar;\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_defs() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( impl Bar { $ ( fn $ i {} )*} );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( impl Bar { $ ( fn $ i {} )*} );\n+}\n+impl Bar {\n+fn foo {}\n+fn bar {}\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_statement() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( fn baz { $ ( $ i (); )*} );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( fn baz { $ ( $ i (); )*} );\n+}\n+fn baz {\n+foo();\n+bar();\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_statement_without_semi() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( fn baz { $ ( $i() );*} );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ ($ i:ident),*) => ( fn baz { $ ( $i() );*} );\n+}\n+fn baz {\n+foo();\n+bar()\n+}\n+\"#]],\n+    )\n+}"}, {"sha": "d329784023bd483fc063a8e1eaa8dbebfe9c0158", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036c0ff8c7c51cac4481d8f70280405d9a170ddc/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=036c0ff8c7c51cac4481d8f70280405d9a170ddc", "patch": "@@ -209,48 +209,6 @@ fn test_expr_order() {\n     );\n }\n \n-#[test]\n-fn test_match_group_pattern_with_multiple_defs() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( struct Bar { $ (\n-                fn $ i {}\n-            )*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"struct Bar {fn foo {} fn bar {}}\");\n-}\n-\n-#[test]\n-fn test_match_group_pattern_with_multiple_statement() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( fn baz { $ (\n-                $ i ();\n-            )*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"fn baz {foo () ; bar () ;}\");\n-}\n-\n-#[test]\n-fn test_match_group_pattern_with_multiple_statement_without_semi() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( fn baz { $ (\n-                $i()\n-            );*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"fn baz {foo () ;bar ()}\");\n-}\n-\n #[test]\n fn test_match_group_empty_fixed_token() {\n     parse_macro("}]}