{"sha": "6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZmMzNmJiMWJkY2I1ZjRjNjZlN2VmNTM5ZGFmZmFmMjFjYTI2Mjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-20T02:29:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-01-20T02:34:41Z"}, "message": "Move some doc text around.", "tree": {"sha": "ac143f2041d6c41ec3c94437765fe5df2ae9ac69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac143f2041d6c41ec3c94437765fe5df2ae9ac69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627", "html_url": "https://github.com/rust-lang/rust/commit/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ebe6af187ce0504b40c177f1700b090b226625", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe6af187ce0504b40c177f1700b090b226625", "html_url": "https://github.com/rust-lang/rust/commit/59ebe6af187ce0504b40c177f1700b090b226625"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "231066f5a8f8dc2a16012e7447d8e5a6eee6a11d", "filename": "doc/rust.md", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=6ffc36bb1bdcb5f4c66e7ef539daffaf21ca2627", "patch": "@@ -1290,24 +1290,6 @@ Rust has two kinds of statement:\n [declaration statements](#declaration-statements) and\n [expression statements](#expression-statements).\n \n-A declaration serves to introduce a *name* that can be used in the block\n-*scope* enclosing the statement: all statements before and after the\n-name, from the previous opening curly-brace (`{`) up to the next closing\n-curly-brace (`}`).\n-\n-An expression plays the dual roles of causing side effects and producing a\n-*value*. Expressions are said to *evaluate to* a value, and the side effects\n-are caused during *evaluation*. Many expressions contain sub-expressions as\n-operands; the definition of each kind of expression dictates whether or not,\n-and in which order, it will evaluate its sub-expressions, and how the\n-expression's value derives from the value of its sub-expressions.\n-\n-In this way, the structure of execution -- both the overall sequence of\n-observable side effects and the final produced value -- is dictated by the\n-structure of expressions. Blocks themselves are expressions, so the nesting\n-sequence of block, statement, expression, and block can repeatedly nest to an\n-arbitrary depth.\n-\n ### Declaration statements\n \n A _declaration statement_ is one that introduces a *name* into the enclosing\n@@ -1363,6 +1345,19 @@ the side effects of the expression's evaluation.\n \n ## Expressions\n \n+An expression plays the dual roles of causing side effects and producing a\n+*value*. Expressions are said to *evaluate to* a value, and the side effects\n+are caused during *evaluation*. Many expressions contain sub-expressions as\n+operands; the definition of each kind of expression dictates whether or not,\n+and in which order, it will evaluate its sub-expressions, and how the\n+expression's value derives from the value of its sub-expressions.\n+\n+In this way, the structure of execution -- both the overall sequence of\n+observable side effects and the final produced value -- is dictated by the\n+structure of expressions. Blocks themselves are expressions, so the nesting\n+sequence of block, statement, expression, and block can repeatedly nest to an\n+arbitrary depth.\n+\n ### Literal expressions\n \n A _literal expression_ consists of one of the [literal](#literals)\n@@ -1759,7 +1754,7 @@ let x = ~10;\n let y = [move x];\n ~~~~\n \n-Any access to `y` after applying the `move` operator to it is invalid,\n+Any access to `x` after applying the `move` operator to it is invalid,\n since it is no longer initialized at that point.\n \n ### Call expressions\n@@ -1770,10 +1765,10 @@ paren_expr_list : '(' expr_list ')' ;\n call_expr : expr paren_expr_list ;\n ~~~~~~~~\n \n-A _call expression_ invokes a function, providing a tuple of input slots\n-and a reference slot to serve as the function's output, bound to the\n-`lval` on the right hand side of the call. If the function eventually\n-returns, then the expression completes.\n+A _call expression_ invokes a function, providing zero or more input slots and\n+an optional reference slot to serve as the function's output, bound to the\n+`lval` on the right hand side of the call. If the function eventually returns,\n+then the expression completes.\n \n A call expression statically requires that the precondition declared in the\n callee's signature is satisfied by the expression prestate. In this way,"}]}