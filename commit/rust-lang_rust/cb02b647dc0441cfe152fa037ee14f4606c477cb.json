{"sha": "cb02b647dc0441cfe152fa037ee14f4606c477cb", "node_id": "C_kwDOAAsO6NoAKGNiMDJiNjQ3ZGMwNDQxY2ZlMTUyZmEwMzdlZTE0ZjQ2MDZjNDc3Y2I", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-08T23:20:15Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-09-12T12:29:12Z"}, "message": "constify `CStr` methods", "tree": {"sha": "b6281270b85bd18f3c0364ef6c25a278d7aadcff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6281270b85bd18f3c0364ef6c25a278d7aadcff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb02b647dc0441cfe152fa037ee14f4606c477cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb02b647dc0441cfe152fa037ee14f4606c477cb", "html_url": "https://github.com/rust-lang/rust/commit/cb02b647dc0441cfe152fa037ee14f4606c477cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb02b647dc0441cfe152fa037ee14f4606c477cb/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbbf60b0442f1d56fc39f30274be77acc79164c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbbf60b0442f1d56fc39f30274be77acc79164c", "html_url": "https://github.com/rust-lang/rust/commit/9bbbf60b0442f1d56fc39f30274be77acc79164c"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "ec3cce2a234c4b9aeea1fa872e498e893284904e", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=cb02b647dc0441cfe152fa037ee14f4606c477cb", "patch": "@@ -121,10 +121,10 @@ enum FromBytesWithNulErrorKind {\n }\n \n impl FromBytesWithNulError {\n-    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+    const fn interior_nul(pos: usize) -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::InteriorNul(pos) }\n     }\n-    fn not_nul_terminated() -> FromBytesWithNulError {\n+    const fn not_nul_terminated() -> FromBytesWithNulError {\n         FromBytesWithNulError { kind: FromBytesWithNulErrorKind::NotNulTerminated }\n     }\n \n@@ -299,7 +299,8 @@ impl CStr {\n     /// ```\n     ///\n     #[unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n-    pub fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n+    #[rustc_const_unstable(feature = \"cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) => {\n@@ -348,7 +349,8 @@ impl CStr {\n     /// assert!(cstr.is_err());\n     /// ```\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {\n             Some(nul_pos) if nul_pos + 1 == bytes.len() => {\n@@ -497,7 +499,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes(&self) -> &[u8] {\n         let bytes = self.to_bytes_with_nul();\n         // SAFETY: to_bytes_with_nul returns slice with length at least 1\n         unsafe { bytes.get_unchecked(..bytes.len() - 1) }\n@@ -524,7 +527,8 @@ impl CStr {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_bytes_with_nul(&self) -> &[u8] {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_bytes_with_nul(&self) -> &[u8] {\n         // SAFETY: Transmuting a slice of `c_char`s to a slice of `u8`s\n         // is safe on all supported targets.\n         unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n@@ -547,7 +551,8 @@ impl CStr {\n     /// assert_eq!(cstr.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n-    pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    pub const fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // N.B., when `CStr` is changed to perform the length check in `.to_bytes()`\n         // instead of in `from_ptr()`, it may be worth considering if this should\n         // be rewritten to do the UTF-8 check inline with the length calculation"}, {"sha": "87ffc5abd2ee6694a416fd2cceb6891768f37d7e", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=cb02b647dc0441cfe152fa037ee14f4606c477cb", "patch": "@@ -157,6 +157,7 @@\n #![feature(const_slice_from_ref)]\n #![feature(const_slice_index)]\n #![feature(const_is_char_boundary)]\n+#![feature(const_cstr_methods)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "e0419f0ffdbaceb124a41b2c392fe6425d0d005b", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb02b647dc0441cfe152fa037ee14f4606c477cb/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=cb02b647dc0441cfe152fa037ee14f4606c477cb", "patch": "@@ -2,6 +2,7 @@\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n use crate::cmp;\n+use crate::intrinsics;\n use crate::mem;\n \n const LO_USIZE: usize = usize::repeat_u8(0x01);\n@@ -35,13 +36,31 @@ fn repeat_byte(b: u8) -> usize {\n /// Returns the first index matching the byte `x` in `text`.\n #[must_use]\n #[inline]\n-pub fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n-    // Fast path for small slices\n-    if text.len() < 2 * USIZE_BYTES {\n-        return text.iter().position(|elt| *elt == x);\n+pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n+    #[inline]\n+    fn rt_impl(x: u8, text: &[u8]) -> Option<usize> {\n+        // Fast path for small slices\n+        if text.len() < 2 * USIZE_BYTES {\n+            return text.iter().position(|elt| *elt == x);\n+        }\n+\n+        memchr_general_case(x, text)\n+    }\n+\n+    const fn const_impl(x: u8, bytes: &[u8]) -> Option<usize> {\n+        let mut i = 0;\n+        while i < bytes.len() {\n+            if bytes[i] == x {\n+                return Some(i);\n+            }\n+            i += 1;\n+        }\n+\n+        None\n     }\n \n-    memchr_general_case(x, text)\n+    // SAFETY: The const and runtime versions have identical behavior\n+    unsafe { intrinsics::const_eval_select((x, text), const_impl, rt_impl) }\n }\n \n fn memchr_general_case(x: u8, text: &[u8]) -> Option<usize> {"}]}