{"sha": "edcb8f6976457b4a42a1788a908ff19bc93c6632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkY2I4ZjY5NzY0NTdiNGE0MmExNzg4YTkwOGZmMTliYzkzYzY2MzI=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-05-30T19:26:09Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-05-30T19:26:09Z"}, "message": "Use compiletest::make_tests to allow it to setup the output folders", "tree": {"sha": "70f3d349261b98621698ea8e210e28860ecda9ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f3d349261b98621698ea8e210e28860ecda9ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edcb8f6976457b4a42a1788a908ff19bc93c6632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edcb8f6976457b4a42a1788a908ff19bc93c6632", "html_url": "https://github.com/rust-lang/rust/commit/edcb8f6976457b4a42a1788a908ff19bc93c6632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edcb8f6976457b4a42a1788a908ff19bc93c6632/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3244d122fdfea854f44c2b04457ea49e01c1013e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3244d122fdfea854f44c2b04457ea49e01c1013e", "html_url": "https://github.com/rust-lang/rust/commit/3244d122fdfea854f44c2b04457ea49e01c1013e"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "236cce0dbb7ccca1fe9dda389a3bb73429436c75", "filename": "tests/compile-test.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/edcb8f6976457b4a42a1788a908ff19bc93c6632/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edcb8f6976457b4a42a1788a908ff19bc93c6632/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=edcb8f6976457b4a42a1788a908ff19bc93c6632", "patch": "@@ -3,9 +3,9 @@\n extern crate compiletest_rs as compiletest;\n extern crate test;\n \n+use std::io;\n use std::ffi::OsStr;\n use std::fs;\n-use std::error::Error;\n use std::env::{set_var, var};\n use std::path::{Path, PathBuf};\n \n@@ -33,7 +33,7 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn config(mode: &str, dir: &str) -> compiletest::Config {\n+fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n     let mut config = compiletest::Config::default();\n \n     let cfg_mode = mode.parse().expect(\"Invalid mode\");\n@@ -59,25 +59,25 @@ fn config(mode: &str, dir: &str) -> compiletest::Config {\n         path.push(\"target/debug/test_build_base\");\n         path\n     };\n-    config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n+    config.src_base = dir;\n     config.rustc_path = clippy_driver_path();\n     config\n }\n \n-fn run_mode(mode: &str, dir: &str) {\n+fn run_mode(mode: &str, dir: PathBuf) {\n     compiletest::run_tests(&config(mode, dir));\n }\n \n-fn run_ui_toml() -> Result<(), Box<Error>> {\n-    let base = PathBuf::from(\"tests/ui-toml/\").canonicalize()?;\n-    for dir in fs::read_dir(&base)? {\n+fn run_ui_toml_tests(config: &compiletest::Config, mut tests: Vec<test::TestDescAndFn>) -> Result<bool, io::Error> {\n+    let mut result = true;\n+    let opts = compiletest::test_opts(config);\n+    for dir in fs::read_dir(&config.src_base)? {\n         let dir = dir?;\n         if !dir.file_type()?.is_dir() {\n             continue;\n         }\n         let dir_path = dir.path();\n         set_var(\"CARGO_MANIFEST_DIR\", &dir_path);\n-        let config = config(\"ui\", \"ui-toml\");\n         for file in fs::read_dir(&dir_path)? {\n             let file = file?;\n             let file_path = file.path();\n@@ -89,13 +89,34 @@ fn run_ui_toml() -> Result<(), Box<Error>> {\n             }\n             let paths = compiletest::common::TestPaths {\n                 file: file_path,\n-                base: base.clone(),\n+                base: config.src_base.clone(),\n                 relative_dir: dir_path.file_name().unwrap().into(),\n             };\n-            compiletest::runtest::run(config.clone(), &paths);\n+            let test_name = compiletest::make_test_name(&config, &paths);\n+            let index = tests.iter()\n+                .position(|test| test.desc.name == test_name)\n+                .expect(\"The test should be in there\");\n+            result &= test::run_tests_console(\n+                &opts,\n+                vec![tests.swap_remove(index)])?;\n+        }\n+    }\n+    Ok(result)\n+}\n+\n+fn run_ui_toml() {\n+    let path = PathBuf::from(\"tests/ui-toml\").canonicalize().unwrap();\n+    let config = config(\"ui\", path);\n+    let tests = compiletest::make_tests(&config);\n+\n+    let res = run_ui_toml_tests(&config, tests);\n+    match res {\n+        Ok(true) => {}\n+        Ok(false) => panic!(\"Some tests failed\"),\n+        Err(e) => {\n+            println!(\"I/O failure during tests: {:?}\", e);\n         }\n     }\n-    Ok(())\n }\n \n fn prepare_env() {\n@@ -107,7 +128,7 @@ fn prepare_env() {\n #[test]\n fn compile_test() {\n     prepare_env();\n-    run_mode(\"run-pass\", \"run-pass\");\n-    run_mode(\"ui\", \"ui\");\n-    run_ui_toml().unwrap();\n+    run_mode(\"run-pass\", \"tests/run-pass\".into());\n+    run_mode(\"ui\", \"tests/ui\".into());\n+    run_ui_toml();\n }"}]}